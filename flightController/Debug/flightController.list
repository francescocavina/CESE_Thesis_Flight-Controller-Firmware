
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000891c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b6c  08008b6c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b6c  08008b6c  00018b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b74  08008b74  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b78  08008b78  00018b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001620  2000014c  08008cc8  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000176c  08008cc8  0002176c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012831  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000348c  00000000  00000000  000329f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00035e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad7  00000000  00000000  00036ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018bda  00000000  00000000  000377bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140e3  00000000  00000000  00050399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088f82  00000000  00000000  0006447c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f18  00000000  00000000  000ed400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000f1318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008aa4 	.word	0x08008aa4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08008aa4 	.word	0x08008aa4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fb97 	bl	8000cb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f839 	bl	80005fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8a1 	bl	80006d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800058e:	f007 f8cd 	bl	800772c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint8_t buffer[32];
    uint8_t str[32] = {0};
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	619a      	str	r2, [r3, #24]
    uint8_t channel = CHANNEL_3;
 80005aa:	2303      	movs	r3, #3
 80005ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    iBus_HandleTypeDef_t * rc_controller = FSA8S_RC_Init(&huart2, buffer);
 80005b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b4:	4619      	mov	r1, r3
 80005b6:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0x78>)
 80005b8:	f000 fb16 	bl	8000be8 <FSA8S_RC_Init>
 80005bc:	64b8      	str	r0, [r7, #72]	; 0x48

    while (1) {
        uint16_t value = FSA8S_RC_ReadChannel(rc_controller, channel);
 80005be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005c2:	4619      	mov	r1, r3
 80005c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80005c6:	f000 fb49 	bl	8000c5c <FSA8S_RC_ReadChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        sprintf(str, (const char *) "Channel %d: %d\r\n", channel, value);
 80005d0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80005d8:	1d38      	adds	r0, r7, #4
 80005da:	4907      	ldr	r1, [pc, #28]	; (80005f8 <main+0x7c>)
 80005dc:	f007 fe6a 	bl	80082b4 <siprintf>

        CDC_Transmit_FS(str, sizeof(str));
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2120      	movs	r1, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f007 f95f 	bl	80078a8 <CDC_Transmit_FS>

        HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fbd3 	bl	8000d98 <HAL_Delay>
    while (1) {
 80005f2:	e7e4      	b.n	80005be <main+0x42>
 80005f4:	20000168 	.word	0x20000168
 80005f8:	08008abc 	.word	0x08008abc

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f007 fe72 	bl	80082f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xd0>)
 800064a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000670:	230f      	movs	r3, #15
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000674:	2390      	movs	r3, #144	; 0x90
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000678:	2304      	movs	r3, #4
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800067c:	2305      	movs	r3, #5
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f002 faa5 	bl	8002bd4 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000690:	f000 f846 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fd07 	bl	80030c4 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 f830 	bl	8000720 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_GPIO_Init+0x4c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <MX_GPIO_Init+0x4c>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_GPIO_Init+0x4c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <MX_GPIO_Init+0x4c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_MspInit+0x4c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <HAL_MspInit+0x4c>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a30      	ldr	r2, [pc, #192]	; (8000860 <HAL_UART_MspInit+0xe0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d15a      	bne.n	8000858 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_UART_MspInit+0xe4>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <HAL_UART_MspInit+0xe4>)
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <HAL_UART_MspInit+0xe4>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_UART_MspInit+0xe4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a27      	ldr	r2, [pc, #156]	; (8000864 <HAL_UART_MspInit+0xe4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_UART_MspInit+0xe4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007da:	230c      	movs	r3, #12
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ea:	2307      	movs	r3, #7
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	481c      	ldr	r0, [pc, #112]	; (8000868 <HAL_UART_MspInit+0xe8>)
 80007f6:	f000 fdeb 	bl	80013d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <HAL_UART_MspInit+0xec>)
 80007fc:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <HAL_UART_MspInit+0xf0>)
 80007fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <HAL_UART_MspInit+0xec>)
 8000802:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000806:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <HAL_UART_MspInit+0xec>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_UART_MspInit+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_UART_MspInit+0xec>)
 8000816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_UART_MspInit+0xec>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_UART_MspInit+0xec>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_UART_MspInit+0xec>)
 800082a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800082e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_UART_MspInit+0xec>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_UART_MspInit+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <HAL_UART_MspInit+0xec>)
 800083e:	f000 fbe1 	bl	8001004 <HAL_DMA_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000848:	f7ff ff6a 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_UART_MspInit+0xec>)
 8000850:	639a      	str	r2, [r3, #56]	; 0x38
 8000852:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_UART_MspInit+0xec>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40004400 	.word	0x40004400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	200001ac 	.word	0x200001ac
 8000870:	40026088 	.word	0x40026088

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 fa4a 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <OTG_FS_IRQHandler+0x10>)
 80008ce:	f001 f853 	bl	8001978 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000ef8 	.word	0x20000ef8

080008dc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
        errno = ENOMEM;
 800090c:	f007 fd0a 	bl	8008324 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20010000 	.word	0x20010000
 800093c:	00000400 	.word	0x00000400
 8000940:	2000020c 	.word	0x2000020c
 8000944:	20001770 	.word	0x20001770

08000948 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000972:	490e      	ldr	r1, [pc, #56]	; (80009ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000988:	4c0b      	ldr	r4, [pc, #44]	; (80009b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000996:	f7ff ffd7 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099a:	f007 fcc9 	bl	8008330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099e:	f7ff fded 	bl	800057c <main>
  bx  lr
 80009a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80009b0:	08008b7c 	.word	0x08008b7c
  ldr r2, =_sbss
 80009b4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80009b8:	2000176c 	.word	0x2000176c

080009bc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC_IRQHandler>
	...

080009c0 <MX_UART_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t MX_UART_Init(UART_HandleTypeDef * huart) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    /* BEGIN MODIFY 1*/
    huart->Instance = FSA8S_RC_UART_INSTANCE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_UART_Init+0x54>)
 80009cc:	601a      	str	r2, [r3, #0]
    huart->Init.BaudRate = 115200;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_RX;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2204      	movs	r2, #4
 80009ec:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
    /* Initialize UART peripheral with function located on the "stm32f4xx_hal_uart.c"
     * file, taking the previously defined UART handle as argument.
     */

    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_UART_Init(huart)) {
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f002 fd42 	bl	8003484 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_UART_Init+0x4a>
        /* END MODIFY 2 */
        return false;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <MX_UART_Init+0x4c>
    }

    return true;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	 * HAL_DMA_Init() on the "stm32f4xx_hal_dma.c" file which sets all the configuration.
	 */

    /* DMA controller clock enable */
    /* BEGIN MODIFY 3 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_DMA_Init+0x30>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <MX_DMA_Init+0x30>)
 8000a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_DMA_Init+0x30>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
    /* END MODIFY 3 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <iBus_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t iBus_Init(iBus_HandleTypeDef_t * hibus) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    MX_DMA_Init();
 8000a54:	f7ff ffe0 	bl	8000a18 <MX_DMA_Init>

    /* Initialize UART */
    if (!MX_UART_Init(hibus->huart)) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffaf 	bl	80009c0 <MX_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f083 0301 	eor.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <iBus_Init+0x26>
    	/* UART initialization was unsuccessful */
        return false;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e00f      	b.n	8000a92 <iBus_Init+0x46>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6859      	ldr	r1, [r3, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7a1b      	ldrb	r3, [r3, #8]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	f002 fd4c 	bl	800351e <HAL_UART_Receive_DMA>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <iBus_Init+0x44>
        /* END MODIFY 4 */

    	/* DMA initialization was unsuccessful */
        return false;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e000      	b.n	8000a92 <iBus_Init+0x46>
    }

    /* iBus initialization was successful */
    return true;
 8000a90:	2301      	movs	r3, #1
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <FSA8S_RC_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_RC_CheckFirstBytes(iBus_HandleTypeDef_t * hibus) {
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]

    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b20      	cmp	r3, #32
 8000aaa:	d107      	bne.n	8000abc <FSA8S_RC_CheckFirstBytes+0x22>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b40      	cmp	r3, #64	; 0x40
 8000ab6:	d101      	bne.n	8000abc <FSA8S_RC_CheckFirstBytes+0x22>
    	/* First two bytes are correct */
        return true;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <FSA8S_RC_CheckFirstBytes+0x24>
    } else {
    	/* First two bytes are not correct */
        return false;
 8000abc:	2300      	movs	r3, #0
    }
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <FSA8S_RC_Checksum>:

static bool_t FSA8S_RC_Checksum(iBus_HandleTypeDef_t * hibus) {
 8000aca:	b480      	push	{r7}
 8000acc:	b085      	sub	sp, #20
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]

    uint16_t sentChecksum;
    uint16_t receivedChecksum = 0xFFFF;
 8000ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ad6:	81fb      	strh	r3, [r7, #14]

    /* Get received checksum value */
    sentChecksum =
        (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7a1b      	ldrb	r3, [r3, #8]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6859      	ldr	r1, [r3, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7a1b      	ldrb	r3, [r3, #8]
 8000af2:	3b02      	subs	r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
    sentChecksum =
 8000afe:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	737b      	strb	r3, [r7, #13]
 8000b04:	e00b      	b.n	8000b1e <FSA8S_RC_Checksum+0x54>
        receivedChecksum -= hibus->buffer[i];
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	7b7b      	ldrb	r3, [r7, #13]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8000b18:	7b7b      	ldrb	r3, [r7, #13]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	737b      	strb	r3, [r7, #13]
 8000b1e:	7b7b      	ldrb	r3, [r7, #13]
 8000b20:	2b1d      	cmp	r3, #29
 8000b22:	d9f0      	bls.n	8000b06 <FSA8S_RC_Checksum+0x3c>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8000b24:	897a      	ldrh	r2, [r7, #10]
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d101      	bne.n	8000b30 <FSA8S_RC_Checksum+0x66>
    	/* Received data is correct */
        return true;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <FSA8S_RC_Checksum+0x68>
    } else {
    	/* Received data is corrupted */
        return false;
 8000b30:	2300      	movs	r3, #0
    }
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <FSA8S_RC_AmendData>:

static void FSA8S_RC_AmendData(iBus_HandleTypeDef_t * hibus) {
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

    uint16_t channelValue;

    for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000b48:	2302      	movs	r3, #2
 8000b4a:	737b      	strb	r3, [r7, #13]
 8000b4c:	e03c      	b.n	8000bc8 <FSA8S_RC_AmendData+0x88>

        channelValue = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	81fb      	strh	r3, [r7, #14]

        /* Swap channel bytes */
        channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i]));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	7b7b      	ldrb	r3, [r7, #13]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	021b      	lsls	r3, r3, #8
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6859      	ldr	r1, [r3, #4]
 8000b66:	7b7b      	ldrb	r3, [r7, #13]
 8000b68:	440b      	add	r3, r1
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	81fb      	strh	r3, [r7, #14]

        /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
        if ((1000 <= channelValue) && (2000 >= channelValue)) {
 8000b74:	89fb      	ldrh	r3, [r7, #14]
 8000b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b7a:	d308      	bcc.n	8000b8e <FSA8S_RC_AmendData+0x4e>
 8000b7c:	89fb      	ldrh	r3, [r7, #14]
 8000b7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b82:	d804      	bhi.n	8000b8e <FSA8S_RC_AmendData+0x4e>
            channelValue -= 1000;
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b8a:	81fb      	strh	r3, [r7, #14]
 8000b8c:	e001      	b.n	8000b92 <FSA8S_RC_AmendData+0x52>
        } else {
            channelValue = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	81fb      	strh	r3, [r7, #14]
        }

        hibus->data[(i - 2) / 2] = channelValue * ((float) IBUS_CHANNEL_MAX_VALUE / 1000);
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b9c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000be4 <FSA8S_RC_AmendData+0xa4>
 8000ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	7b7b      	ldrb	r3, [r7, #13]
 8000baa:	3b02      	subs	r3, #2
 8000bac:	0fd9      	lsrs	r1, r3, #31
 8000bae:	440b      	add	r3, r1
 8000bb0:	105b      	asrs	r3, r3, #1
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bba:	ee17 2a90 	vmov	r2, s15
 8000bbe:	b292      	uxth	r2, r2
 8000bc0:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000bc2:	7b7b      	ldrb	r3, [r7, #13]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	737b      	strb	r3, [r7, #13]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7a1b      	ldrb	r3, [r3, #8]
 8000bcc:	1e5a      	subs	r2, r3, #1
 8000bce:	7b7b      	ldrb	r3, [r7, #13]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dcbc      	bgt.n	8000b4e <FSA8S_RC_AmendData+0xe>
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	4083126f 	.word	0x4083126f

08000be8 <FSA8S_RC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
iBus_HandleTypeDef_t * FSA8S_RC_Init(UART_HandleTypeDef * huart, uint8_t * buffer) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]

	static uint8_t alreadyInitialized = 0;

	/* Check if driver was already initialized */
	if(alreadyInitialized)
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <FSA8S_RC_Init+0x70>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <FSA8S_RC_Init+0x16>
	{
		return NULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e027      	b.n	8000c4e <FSA8S_RC_Init+0x66>
	/* Allocate dynamic memory for the iBus_HandleTypeDef structure */
#ifdef USE_FREERTOS
    iBus_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(iBus_HandleTypeDef_t));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    iBus_HandleTypeDef_t * hibus = malloc(sizeof(iBus_HandleTypeDef_t));
 8000bfe:	2014      	movs	r0, #20
 8000c00:	f007 faa4 	bl	800814c <malloc>
 8000c04:	4603      	mov	r3, r0
 8000c06:	60fb      	str	r3, [r7, #12]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f007 fa9f 	bl	800814c <malloc>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	60bb      	str	r3, [r7, #8]
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00e      	beq.n	8000c36 <FSA8S_RC_Init+0x4e>
        hibus->huart = huart;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2220      	movs	r2, #32
 8000c28:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	220e      	movs	r2, #14
 8000c34:	741a      	strb	r2, [r3, #16]
    }

    /* Initialize iBus communication */
    if (iBus_Init(hibus)) {
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff ff08 	bl	8000a4c <iBus_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <FSA8S_RC_Init+0x64>
    	/* Initialization was successful */
    	alreadyInitialized = 1;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <FSA8S_RC_Init+0x70>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
        return hibus;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	e000      	b.n	8000c4e <FSA8S_RC_Init+0x66>
    } else {
    	/* Initialization was unsuccessful */
        return NULL;
 8000c4c:	2300      	movs	r3, #0
    }
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000210 	.word	0x20000210

08000c5c <FSA8S_RC_ReadChannel>:

uint16_t FSA8S_RC_ReadChannel(iBus_HandleTypeDef_t * hibus, FSA8S_RC_CHANNEL_t channel) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]

	/* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while(1)
    {
		while(!FSA8S_RC_CheckFirstBytes(hibus))
 8000c68:	bf00      	nop
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ff15 	bl	8000a9a <FSA8S_RC_CheckFirstBytes>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f6      	bne.n	8000c6a <FSA8S_RC_ReadChannel+0xe>
		{
			/* Wait until a data frame with right format is received */
		}

		/* Perform a checksum */
		if(!FSA8S_RC_Checksum(hibus))
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff24 	bl	8000aca <FSA8S_RC_Checksum>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f083 0301 	eor.w	r3, r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <FSA8S_RC_ReadChannel+0x36>
		{
			/* Received data is corrupted */
			continue;
 8000c8e:	bf00      	nop
		while(!FSA8S_RC_CheckFirstBytes(hibus))
 8000c90:	e7ea      	b.n	8000c68 <FSA8S_RC_ReadChannel+0xc>
		}
		else
		{
			/* Received data is correct */
			break;
 8000c92:	bf00      	nop
		}
    }

    /* Get channels data in little-endian */
    FSA8S_RC_AmendData(hibus);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff53 	bl	8000b40 <FSA8S_RC_AmendData>

    return hibus->data[channel - 1];
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	881b      	ldrh	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f94f 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fd22 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f967 	bl	8000fea <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d34:	f000 f92f 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000214 	.word	0x20000214

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000214 	.word	0x20000214

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff3e 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff31 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffa2 	bl	8000f3c <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff feb6 	bl	8000d80 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e099      	b.n	8001154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001040:	e00f      	b.n	8001062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001042:	f7ff fe9d 	bl	8000d80 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b05      	cmp	r3, #5
 800104e:	d908      	bls.n	8001062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2220      	movs	r2, #32
 8001054:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2203      	movs	r2, #3
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e078      	b.n	8001154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1e8      	bne.n	8001042 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <HAL_DMA_Init+0x158>)
 800107c:	4013      	ands	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800108e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d107      	bne.n	80010cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4313      	orrs	r3, r2
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f023 0307 	bic.w	r3, r3, #7
 80010e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d117      	bne.n	8001126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00e      	beq.n	8001126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f8e5 	bl	80012d8 <DMA_CheckFifoParam>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2240      	movs	r2, #64	; 0x40
 8001118:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e016      	b.n	8001154 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f89c 	bl	800126c <DMA_CalcBaseAndBitshift>
 8001134:	4603      	mov	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113c:	223f      	movs	r2, #63	; 0x3f
 800113e:	409a      	lsls	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	f010803f 	.word	0xf010803f

08001160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_DMA_Start_IT+0x26>
 8001182:	2302      	movs	r3, #2
 8001184:	e040      	b.n	8001208 <HAL_DMA_Start_IT+0xa8>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d12f      	bne.n	80011fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2202      	movs	r2, #2
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f82e 	bl	8001210 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	223f      	movs	r2, #63	; 0x3f
 80011ba:	409a      	lsls	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0216 	orr.w	r2, r2, #22
 80011ce:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0208 	orr.w	r2, r2, #8
 80011e6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e005      	b.n	8001206 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8001202:	2302      	movs	r3, #2
 8001204:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001206:	7dfb      	ldrb	r3, [r7, #23]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800122c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b40      	cmp	r3, #64	; 0x40
 800123c:	d108      	bne.n	8001250 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800124e:	e007      	b.n	8001260 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	60da      	str	r2, [r3, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3b10      	subs	r3, #16
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <DMA_CalcBaseAndBitshift+0x64>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d909      	bls.n	80012ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012a2:	f023 0303 	bic.w	r3, r3, #3
 80012a6:	1d1a      	adds	r2, r3, #4
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	659a      	str	r2, [r3, #88]	; 0x58
 80012ac:	e007      	b.n	80012be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	aaaaaaab 	.word	0xaaaaaaab
 80012d4:	08008b30 	.word	0x08008b30

080012d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11f      	bne.n	8001332 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d856      	bhi.n	80013a6 <DMA_CheckFifoParam+0xce>
 80012f8:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <DMA_CheckFifoParam+0x28>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001311 	.word	0x08001311
 8001304:	08001323 	.word	0x08001323
 8001308:	08001311 	.word	0x08001311
 800130c:	080013a7 	.word	0x080013a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d046      	beq.n	80013aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001320:	e043      	b.n	80013aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800132a:	d140      	bne.n	80013ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001330:	e03d      	b.n	80013ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800133a:	d121      	bne.n	8001380 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d837      	bhi.n	80013b2 <DMA_CheckFifoParam+0xda>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <DMA_CheckFifoParam+0x70>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	08001359 	.word	0x08001359
 800134c:	0800135f 	.word	0x0800135f
 8001350:	08001359 	.word	0x08001359
 8001354:	08001371 	.word	0x08001371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
      break;
 800135c:	e030      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d025      	beq.n	80013b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800136e:	e022      	b.n	80013b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001378:	d11f      	bne.n	80013ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800137e:	e01c      	b.n	80013ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d903      	bls.n	800138e <DMA_CheckFifoParam+0xb6>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d003      	beq.n	8001394 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800138c:	e018      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
      break;
 8001392:	e015      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
      break;
 80013a4:	e00b      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      break;
 80013a6:	bf00      	nop
 80013a8:	e00a      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
      break;
 80013aa:	bf00      	nop
 80013ac:	e008      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
      break;
 80013ae:	bf00      	nop
 80013b0:	e006      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
      break;
 80013b2:	bf00      	nop
 80013b4:	e004      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
      break;
 80013b6:	bf00      	nop
 80013b8:	e002      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
      break;
 80013ba:	bf00      	nop
 80013bc:	e000      	b.n	80013c0 <DMA_CheckFifoParam+0xe8>
      break;
 80013be:	bf00      	nop
    }
  }

  return status;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e159      	b.n	80016a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 8148 	bne.w	800169a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d005      	beq.n	8001422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	2b02      	cmp	r3, #2
 8001420:	d130      	bne.n	8001484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0201 	and.w	r2, r3, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b03      	cmp	r3, #3
 800148e:	d017      	beq.n	80014c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d123      	bne.n	8001514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0203 	and.w	r2, r3, #3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a2 	beq.w	800169a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a56      	ldr	r2, [pc, #344]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001572:	4a52      	ldr	r2, [pc, #328]	; (80016bc <HAL_GPIO_Init+0x2ec>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <HAL_GPIO_Init+0x2f0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x202>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <HAL_GPIO_Init+0x2f4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x1fe>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a47      	ldr	r2, [pc, #284]	; (80016c8 <HAL_GPIO_Init+0x2f8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a46      	ldr	r2, [pc, #280]	; (80016cc <HAL_GPIO_Init+0x2fc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x1f6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <HAL_GPIO_Init+0x300>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x1f2>
 80015be:	2304      	movs	r3, #4
 80015c0:	e008      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c2:	2307      	movs	r3, #7
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015d2:	2300      	movs	r3, #0
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e4:	4935      	ldr	r1, [pc, #212]	; (80016bc <HAL_GPIO_Init+0x2ec>)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_GPIO_Init+0x304>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_GPIO_Init+0x304>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001640:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166a:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <HAL_GPIO_Init+0x304>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001694:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3301      	adds	r3, #1
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	f67f aea2 	bls.w	80013ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016da:	b08f      	sub	sp, #60	; 0x3c
 80016dc:	af0a      	add	r7, sp, #40	; 0x28
 80016de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e10f      	b.n	800190a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d106      	bne.n	800170a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f006 fa17 	bl	8007b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2203      	movs	r2, #3
 800170e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fcfe 	bl	800412a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	687e      	ldr	r6, [r7, #4]
 8001736:	466d      	mov	r5, sp
 8001738:	f106 0410 	add.w	r4, r6, #16
 800173c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001748:	e885 0003 	stmia.w	r5, {r0, r1}
 800174c:	1d33      	adds	r3, r6, #4
 800174e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f002 fbd5 	bl	8003f00 <USB_CoreInit>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d0      	b.n	800190a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fcec 	bl	800414c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e04a      	b.n	8001810 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	333d      	adds	r3, #61	; 0x3d
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	333c      	adds	r3, #60	; 0x3c
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	b298      	uxth	r0, r3
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	3344      	adds	r3, #68	; 0x44
 80017b6:	4602      	mov	r2, r0
 80017b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3340      	adds	r3, #64	; 0x40
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3348      	adds	r3, #72	; 0x48
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	334c      	adds	r3, #76	; 0x4c
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3354      	adds	r3, #84	; 0x54
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3301      	adds	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	d3af      	bcc.n	800177a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e044      	b.n	80018aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	3301      	adds	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3b5      	bcc.n	8001820 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	687e      	ldr	r6, [r7, #4]
 80018bc:	466d      	mov	r5, sp
 80018be:	f106 0410 	add.w	r4, r6, #16
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80018d2:	1d33      	adds	r3, r6, #4
 80018d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d6:	6838      	ldr	r0, [r7, #0]
 80018d8:	f002 fc84 	bl	80041e4 <USB_DevInit>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2202      	movs	r2, #2
 80018e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00d      	b.n	800190a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fdd3 	bl	80054ae <USB_DevDisconnect>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001912 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_PCD_Start+0x1c>
 800192a:	2302      	movs	r3, #2
 800192c:	e020      	b.n	8001970 <HAL_PCD_Start+0x5e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	2b01      	cmp	r3, #1
 800193c:	d109      	bne.n	8001952 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001942:	2b01      	cmp	r3, #1
 8001944:	d005      	beq.n	8001952 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fbd6 	bl	8004108 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fd83 	bl	800546c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b08d      	sub	sp, #52	; 0x34
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 fe41 	bl	8005616 <USB_GetMode>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 848a 	bne.w	80022b0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fda5 	bl	80054f0 <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8480 	beq.w	80022ae <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fd92 	bl	80054f0 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f002 0202 	and.w	r2, r2, #2
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fd80 	bl	80054f0 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d161      	bne.n	8001abe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0210 	bic.w	r2, r2, #16
 8001a08:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f003 020f 	and.w	r2, r3, #15
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	0c5b      	lsrs	r3, r3, #17
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d124      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d035      	beq.n	8001aae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	6a38      	ldr	r0, [r7, #32]
 8001a56:	f003 fbb7 	bl	80051c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a66:	441a      	add	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a78:	441a      	add	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	621a      	str	r2, [r3, #32]
 8001a7e:	e016      	b.n	8001aae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	0c5b      	lsrs	r3, r3, #17
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	2b06      	cmp	r3, #6
 8001a8a:	d110      	bne.n	8001aae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a92:	2208      	movs	r2, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	6a38      	ldr	r0, [r7, #32]
 8001a98:	f003 fb96 	bl	80051c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa8:	441a      	add	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0210 	orr.w	r2, r2, #16
 8001abc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fd14 	bl	80054f0 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ace:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ad2:	f040 80a7 	bne.w	8001c24 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fd19 	bl	8005516 <USB_ReadDevAllOutEpInterrupt>
 8001ae4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ae6:	e099      	b.n	8001c1c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 808e 	beq.w	8001c10 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fd3d 	bl	800557e <USB_ReadDevOutEPInterrupt>
 8001b04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2301      	movs	r3, #1
 8001b20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fec3 	bl	80028b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b40:	461a      	mov	r2, r3
 8001b42:	2308      	movs	r3, #8
 8001b44:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 ff99 	bl	8002a80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b64:	461a      	mov	r2, r3
 8001b66:	2310      	movs	r3, #16
 8001b68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d030      	beq.n	8001bd6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7c:	2b80      	cmp	r3, #128	; 0x80
 8001b7e:	d109      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	78db      	ldrb	r3, [r3, #3]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f006 f8b6 	bl	8007d30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bec:	461a      	mov	r2, r3
 8001bee:	2320      	movs	r3, #32
 8001bf0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	3301      	adds	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f af62 	bne.w	8001ae8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fc61 	bl	80054f0 <USB_ReadInterrupts>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c38:	f040 80db 	bne.w	8001df2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fc82 	bl	800554a <USB_ReadDevAllInEpInterrupt>
 8001c46:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c4c:	e0cd      	b.n	8001dea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80c2 	beq.w	8001dde <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fca8 	bl	80055ba <USB_ReadDevInEPInterrupt>
 8001c6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d057      	beq.n	8001d26 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69f9      	ldr	r1, [r7, #28]
 8001c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c96:	4013      	ands	r3, r2
 8001c98:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2301      	movs	r3, #1
 8001caa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d132      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	334c      	adds	r3, #76	; 0x4c
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4403      	add	r3, r0
 8001cd4:	3348      	adds	r3, #72	; 0x48
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4419      	add	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4403      	add	r3, r0
 8001ce8:	334c      	adds	r3, #76	; 0x4c
 8001cea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x3a2>
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3354      	adds	r3, #84	; 0x54
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d108      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d12:	461a      	mov	r2, r3
 8001d14:	2101      	movs	r1, #1
 8001d16:	f003 fcaf 	bl	8005678 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f005 ff8a 	bl	8007c3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2308      	movs	r3, #8
 8001d40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2310      	movs	r3, #16
 8001d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d74:	461a      	mov	r2, r3
 8001d76:	2340      	movs	r3, #64	; 0x40
 8001d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d023      	beq.n	8001dcc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d86:	6a38      	ldr	r0, [r7, #32]
 8001d88:	f002 fb90 	bl	80044ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	3338      	adds	r3, #56	; 0x38
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	78db      	ldrb	r3, [r3, #3]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2200      	movs	r2, #0
 8001dac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f005 ffcd 	bl	8007d54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2302      	movs	r3, #2
 8001dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fcdb 	bl	8002794 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	3301      	adds	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f47f af2e 	bne.w	8001c4e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fb7a 	bl	80054f0 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e06:	d122      	bne.n	8001e4e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fec3 	bl	8002bbc <HAL_PCDEx_LPM_Callback>
 8001e36:	e002      	b.n	8001e3e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f005 ff6b 	bl	8007d14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fb4c 	bl	80054f0 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e62:	d112      	bne.n	8001e8a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f005 ff27 	bl	8007cc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e88:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fb2e 	bl	80054f0 <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9e:	f040 80b7 	bne.w	8002010 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2110      	movs	r1, #16
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 faf5 	bl	80044ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec6:	e046      	b.n	8001f56 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001eda:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eec:	0151      	lsls	r1, r2, #5
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	440a      	add	r2, r1
 8001ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001efa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f20:	0151      	lsls	r1, r2, #5
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	440a      	add	r2, r1
 8001f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f40:	0151      	lsls	r1, r2, #5
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	440a      	add	r2, r1
 8001f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	3301      	adds	r3, #1
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3b3      	bcc.n	8001ec8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f6e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f72:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d016      	beq.n	8001faa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f8c:	f043 030b 	orr.w	r3, r3, #11
 8001f90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa2:	f043 030b 	orr.w	r3, r3, #11
 8001fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa8:	e015      	b.n	8001fd6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fbc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001fc0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fd0:	f043 030b 	orr.w	r3, r3, #11
 8001fd4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001fe8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f003 fb3c 	bl	8005678 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800200e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fa6b 	bl	80054f0 <USB_ReadInterrupts>
 800201a:	4603      	mov	r3, r0
 800201c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002024:	d124      	bne.n	8002070 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fb01 	bl	8005632 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fab6 	bl	80045a6 <USB_GetDevSpeed>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681c      	ldr	r4, [r3, #0]
 8002046:	f001 f9e9 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800204a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	4620      	mov	r0, r4
 8002056:	f001 ffb5 	bl	8003fc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f005 fe15 	bl	8007c8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800206e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fa3b 	bl	80054f0 <USB_ReadInterrupts>
 800207a:	4603      	mov	r3, r0
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b08      	cmp	r3, #8
 8002082:	d10a      	bne.n	800209a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f005 fdf2 	bl	8007c6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f002 0208 	and.w	r2, r2, #8
 8002098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fa26 	bl	80054f0 <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	2b80      	cmp	r3, #128	; 0x80
 80020ac:	d122      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ba:	2301      	movs	r3, #1
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	e014      	b.n	80020ea <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	4619      	mov	r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fb27 	bl	8002732 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	3301      	adds	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e5      	bcc.n	80020c0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 f9f9 	bl	80054f0 <USB_ReadInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002108:	d13b      	bne.n	8002182 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800210a:	2301      	movs	r3, #1
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	e02b      	b.n	8002168 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3340      	adds	r3, #64	; 0x40
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d115      	bne.n	8002162 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002136:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002138:	2b00      	cmp	r3, #0
 800213a:	da12      	bge.n	8002162 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	333f      	adds	r3, #63	; 0x3f
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4619      	mov	r1, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fae8 	bl	8002732 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	3301      	adds	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216e:	429a      	cmp	r2, r3
 8002170:	d3ce      	bcc.n	8002110 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 f9b2 	bl	80054f0 <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002196:	d155      	bne.n	8002244 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	e045      	b.n	800222a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d12e      	bne.n	8002224 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da2b      	bge.n	8002224 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80021d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021dc:	429a      	cmp	r2, r3
 80021de:	d121      	bne.n	8002224 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800221c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002220:	6053      	str	r3, [r2, #4]
            break;
 8002222:	e007      	b.n	8002234 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	3301      	adds	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	429a      	cmp	r2, r3
 8002232:	d3b4      	bcc.n	800219e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 f951 	bl	80054f0 <USB_ReadInterrupts>
 800224e:	4603      	mov	r3, r0
 8002250:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d10a      	bne.n	8002270 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f005 fd8c 	bl	8007d78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800226e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 f93b 	bl	80054f0 <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b04      	cmp	r3, #4
 8002282:	d115      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f005 fd7c 	bl	8007d94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	e000      	b.n	80022b0 <HAL_PCD_IRQHandler+0x938>
      return;
 80022ae:	bf00      	nop
    }
  }
}
 80022b0:	3734      	adds	r7, #52	; 0x34
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd90      	pop	{r4, r7, pc}

080022b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_PCD_SetAddress+0x1a>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e013      	b.n	80022f8 <HAL_PCD_SetAddress+0x42>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f899 	bl	8005420 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4603      	mov	r3, r0
 8002310:	70fb      	strb	r3, [r7, #3]
 8002312:	460b      	mov	r3, r1
 8002314:	803b      	strh	r3, [r7, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800231e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da0f      	bge.n	8002346 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3338      	adds	r3, #56	; 0x38
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	705a      	strb	r2, [r3, #1]
 8002344:	e00f      	b.n	8002366 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	3304      	adds	r3, #4
 800235e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002372:	883a      	ldrh	r2, [r7, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	78ba      	ldrb	r2, [r7, #2]
 800237c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002390:	78bb      	ldrb	r3, [r7, #2]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d102      	bne.n	800239c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_PCD_EP_Open+0xaa>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e00e      	b.n	80023c8 <HAL_PCD_EP_Open+0xc8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 f919 	bl	80045f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80023c6:	7afb      	ldrb	r3, [r7, #11]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da0f      	bge.n	8002404 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 020f 	and.w	r2, r3, #15
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	3338      	adds	r3, #56	; 0x38
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	3304      	adds	r3, #4
 80023fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	705a      	strb	r2, [r3, #1]
 8002402:	e00f      	b.n	8002424 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_PCD_EP_Close+0x6e>
 800243a:	2302      	movs	r3, #2
 800243c:	e00e      	b.n	800245c <HAL_PCD_EP_Close+0x8c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68f9      	ldr	r1, [r7, #12]
 800244c:	4618      	mov	r0, r3
 800244e:	f002 f957 	bl	8004700 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	460b      	mov	r3, r1
 8002472:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	f003 020f 	and.w	r2, r3, #15
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	3304      	adds	r3, #4
 800248c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2200      	movs	r2, #0
 80024a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a6:	7afb      	ldrb	r3, [r7, #11]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024c0:	7afb      	ldrb	r3, [r7, #11]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	6979      	ldr	r1, [r7, #20]
 80024d8:	f002 fc36 	bl	8004d48 <USB_EP0StartXfer>
 80024dc:	e008      	b.n	80024f0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6979      	ldr	r1, [r7, #20]
 80024ec:	f002 f9e4 	bl	80048b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	f003 020f 	and.w	r2, r3, #15
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800251c:	681b      	ldr	r3, [r3, #0]
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	460b      	mov	r3, r1
 8002538:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253a:	7afb      	ldrb	r3, [r7, #11]
 800253c:	f003 020f 	and.w	r2, r3, #15
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	3338      	adds	r3, #56	; 0x38
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2201      	movs	r2, #1
 8002568:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	b2da      	uxtb	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	6979      	ldr	r1, [r7, #20]
 800259c:	f002 fbd4 	bl	8004d48 <USB_EP0StartXfer>
 80025a0:	e008      	b.n	80025b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	6979      	ldr	r1, [r7, #20]
 80025b0:	f002 f982 	bl	80048b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	f003 020f 	and.w	r2, r3, #15
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d901      	bls.n	80025dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e050      	b.n	800267e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	da0f      	bge.n	8002604 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	3338      	adds	r3, #56	; 0x38
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	3304      	adds	r3, #4
 80025fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	705a      	strb	r2, [r3, #1]
 8002602:	e00d      	b.n	8002620 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_PCD_EP_SetStall+0x82>
 800263c:	2302      	movs	r3, #2
 800263e:	e01e      	b.n	800267e <HAL_PCD_EP_SetStall+0xc0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	4618      	mov	r0, r3
 8002650:	f002 fe12 	bl	8005278 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	b2d9      	uxtb	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800266e:	461a      	mov	r2, r3
 8002670:	f003 f802 	bl	8005678 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d901      	bls.n	80026a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e042      	b.n	800272a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da0f      	bge.n	80026cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3338      	adds	r3, #56	; 0x38
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	705a      	strb	r2, [r3, #1]
 80026ca:	e00f      	b.n	80026ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_PCD_EP_ClrStall+0x86>
 8002708:	2302      	movs	r3, #2
 800270a:	e00e      	b.n	800272a <HAL_PCD_EP_ClrStall+0xa4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fe1a 	bl	8005354 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800273e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002742:	2b00      	cmp	r3, #0
 8002744:	da0c      	bge.n	8002760 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f003 020f 	and.w	r2, r3, #15
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	3338      	adds	r3, #56	; 0x38
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	3304      	adds	r3, #4
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	e00c      	b.n	800277a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 020f 	and.w	r2, r3, #15
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	3304      	adds	r3, #4
 8002778:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68f9      	ldr	r1, [r7, #12]
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fc39 	bl	8004ff8 <USB_EPStopXfer>
 8002786:	4603      	mov	r3, r0
 8002788:	72fb      	strb	r3, [r7, #11]

  return ret;
 800278a:	7afb      	ldrb	r3, [r7, #11]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af02      	add	r7, sp, #8
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	3338      	adds	r3, #56	; 0x38
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1a      	ldr	r2, [r3, #32]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d901      	bls.n	80027cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e06c      	b.n	80028a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d902      	bls.n	80027e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3303      	adds	r3, #3
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027f0:	e02b      	b.n	800284a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	429a      	cmp	r2, r3
 8002806:	d902      	bls.n	800280e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3303      	adds	r3, #3
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002826:	b2db      	uxtb	r3, r3
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	4603      	mov	r3, r0
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f002 fc8d 	bl	800514c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	441a      	add	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1a      	ldr	r2, [r3, #32]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	441a      	add	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	429a      	cmp	r2, r3
 800285e:	d809      	bhi.n	8002874 <PCD_WriteEmptyTxFifo+0xe0>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1a      	ldr	r2, [r3, #32]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002868:	429a      	cmp	r2, r3
 800286a:	d203      	bcs.n	8002874 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1be      	bne.n	80027f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	429a      	cmp	r2, r3
 800287e:	d811      	bhi.n	80028a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	2201      	movs	r2, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	43db      	mvns	r3, r3
 800289a:	6939      	ldr	r1, [r7, #16]
 800289c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028a0:	4013      	ands	r3, r2
 80028a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	333c      	adds	r3, #60	; 0x3c
 80028c8:	3304      	adds	r3, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d17b      	bne.n	80029de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	f240 80b9 	bls.w	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80b3 	beq.w	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002912:	461a      	mov	r2, r3
 8002914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002918:	6093      	str	r3, [r2, #8]
 800291a:	e0a7      	b.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002932:	461a      	mov	r2, r3
 8002934:	2320      	movs	r3, #32
 8002936:	6093      	str	r3, [r2, #8]
 8002938:	e098      	b.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 8093 	bne.w	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d90f      	bls.n	800296e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002964:	461a      	mov	r2, r3
 8002966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296a:	6093      	str	r3, [r2, #8]
 800296c:	e07e      	b.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	0159      	lsls	r1, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	440b      	add	r3, r1
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	1ad2      	subs	r2, r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d114      	bne.n	80029d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029b8:	461a      	mov	r2, r3
 80029ba:	2101      	movs	r1, #1
 80029bc:	f002 fe5c 	bl	8005678 <USB_EP0_OutStart>
 80029c0:	e006      	b.n	80029d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	441a      	add	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f005 f914 	bl	8007c04 <HAL_PCD_DataOutStageCallback>
 80029dc:	e046      	b.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d124      	bne.n	8002a30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a02:	6093      	str	r3, [r2, #8]
 8002a04:	e032      	b.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2320      	movs	r3, #32
 8002a20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f005 f8eb 	bl	8007c04 <HAL_PCD_DataOutStageCallback>
 8002a2e:	e01d      	b.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d114      	bne.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d108      	bne.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f002 fe0c 	bl	8005678 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f005 f8cc 	bl	8007c04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	4f54300a 	.word	0x4f54300a
 8002a7c:	4f54310a 	.word	0x4f54310a

08002a80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	333c      	adds	r3, #60	; 0x3c
 8002a98:	3304      	adds	r3, #4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d90e      	bls.n	8002ad4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f005 f883 	bl	8007be0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d90c      	bls.n	8002afc <PCD_EP_OutSetupPacket_int+0x7c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d108      	bne.n	8002afc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002af4:	461a      	mov	r2, r3
 8002af6:	2101      	movs	r1, #1
 8002af8:	f002 fdbe 	bl	8005678 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	4f54300a 	.word	0x4f54300a

08002b0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d107      	bne.n	8002b3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b2a:	883b      	ldrh	r3, [r7, #0]
 8002b2c:	0419      	lsls	r1, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
 8002b38:	e028      	b.n	8002b8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	4413      	add	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e00d      	b.n	8002b6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	3340      	adds	r3, #64	; 0x40
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4413      	add	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	3301      	adds	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d3ec      	bcc.n	8002b4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b74:	883b      	ldrh	r3, [r7, #0]
 8002b76:	0418      	lsls	r0, r3, #16
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	4302      	orrs	r2, r0
 8002b84:	3340      	adds	r3, #64	; 0x40
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e267      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d075      	beq.n	8002cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b7e      	ldr	r3, [pc, #504]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x108>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d157      	bne.n	8002cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e242      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x74>
 8002c3a:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a75      	ldr	r2, [pc, #468]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6f      	ldr	r2, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6c      	ldr	r2, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	4b69      	ldr	r3, [pc, #420]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a68      	ldr	r2, [pc, #416]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a65      	ldr	r2, [pc, #404]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f878 	bl	8000d80 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe f874 	bl	8000d80 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e207      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b5b      	ldr	r3, [pc, #364]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xc0>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f864 	bl	8000d80 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe f860 	bl	8000d80 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1f3      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0xe8>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cea:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b44      	ldr	r3, [pc, #272]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e1c7      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4937      	ldr	r1, [pc, #220]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	e03a      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d44:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <HAL_RCC_OscConfig+0x244>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f819 	bl	8000d80 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe f815 	bl	8000d80 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e1a8      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4925      	ldr	r1, [pc, #148]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d86:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCC_OscConfig+0x244>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fd fff8 	bl	8000d80 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fd fff4 	bl	8000d80 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e187      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d036      	beq.n	8002e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <HAL_RCC_OscConfig+0x248>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fd ffd8 	bl	8000d80 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fd ffd4 	bl	8000d80 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e167      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x200>
 8002df2:	e01b      	b.n	8002e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_OscConfig+0x248>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fd ffc1 	bl	8000d80 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	e00e      	b.n	8002e20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fd ffbd 	bl	8000d80 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d907      	bls.n	8002e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e150      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470000 	.word	0x42470000
 8002e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ea      	bne.n	8002e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8097 	beq.w	8002f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b81      	ldr	r3, [pc, #516]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	4b7d      	ldr	r3, [pc, #500]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a7c      	ldr	r2, [pc, #496]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b7a      	ldr	r3, [pc, #488]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b77      	ldr	r3, [pc, #476]	; (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b74      	ldr	r3, [pc, #464]	; (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a73      	ldr	r2, [pc, #460]	; (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fd ff7d 	bl	8000d80 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fd ff79 	bl	8000d80 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e10c      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x2ea>
 8002eb0:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	4a63      	ldr	r2, [pc, #396]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebc:	e01c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x324>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x30c>
 8002ec6:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a5e      	ldr	r2, [pc, #376]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a5b      	ldr	r2, [pc, #364]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x324>
 8002ee0:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a57      	ldr	r2, [pc, #348]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	4b55      	ldr	r3, [pc, #340]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a54      	ldr	r2, [pc, #336]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fd ff3e 	bl	8000d80 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fd ff3a 	bl	8000d80 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0cb      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	4b49      	ldr	r3, [pc, #292]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ee      	beq.n	8002f08 <HAL_RCC_OscConfig+0x334>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fd ff28 	bl	8000d80 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fd ff24 	bl	8000d80 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0b5      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ee      	bne.n	8002f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4b39      	ldr	r3, [pc, #228]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	4a38      	ldr	r2, [pc, #224]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a1 	beq.w	80030b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f72:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d05c      	beq.n	8003038 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d141      	bne.n	800300a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f86:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCC_OscConfig+0x478>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fd fef8 	bl	8000d80 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fd fef4 	bl	8000d80 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e087      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b27      	ldr	r3, [pc, #156]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	491b      	ldr	r1, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCC_OscConfig+0x478>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fd fecd 	bl	8000d80 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fd fec9 	bl	8000d80 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e05c      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x416>
 8003008:	e054      	b.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCC_OscConfig+0x478>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fd feb6 	bl	8000d80 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fd feb2 	bl	8000d80 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e045      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_RCC_OscConfig+0x470>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x444>
 8003036:	e03d      	b.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e038      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
 800304c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x4ec>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d028      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d121      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d11a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003080:	4013      	ands	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003088:	4293      	cmp	r3, r2
 800308a:	d111      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0cc      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b68      	ldr	r3, [pc, #416]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d90c      	bls.n	8003100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b65      	ldr	r3, [pc, #404]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a52      	ldr	r2, [pc, #328]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800313a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	494d      	ldr	r1, [pc, #308]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d044      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d119      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d003      	beq.n	8003182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	2b03      	cmp	r3, #3
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003182:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e06f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e067      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a2:	4b37      	ldr	r3, [pc, #220]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f023 0203 	bic.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4934      	ldr	r1, [pc, #208]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b4:	f7fd fde4 	bl	8000d80 <HAL_GetTick>
 80031b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031bc:	f7fd fde0 	bl	8000d80 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e04f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 020c 	and.w	r2, r3, #12
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d1eb      	bne.n	80031bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d20c      	bcs.n	800320c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e032      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4916      	ldr	r1, [pc, #88]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800324a:	f000 f821 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800324e:	4602      	mov	r2, r0
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	490a      	ldr	r1, [pc, #40]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd fd44 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00
 8003280:	40023800 	.word	0x40023800
 8003284:	08008b18 	.word	0x08008b18
 8003288:	20000000 	.word	0x20000000
 800328c:	20000004 	.word	0x20000004

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003294:	b090      	sub	sp, #64	; 0x40
 8003296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
 800329c:	2300      	movs	r3, #0
 800329e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a0:	2300      	movs	r3, #0
 80032a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_GetSysClockFreq+0x180>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d00d      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x40>
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	f200 80a1 	bhi.w	80033fc <HAL_RCC_GetSysClockFreq+0x16c>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x34>
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0x3a>
 80032c2:	e09b      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_GetSysClockFreq+0x184>)
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032c8:	e09b      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ca:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_GetSysClockFreq+0x188>)
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032ce:	e098      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d0:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032da:	4b4d      	ldr	r3, [pc, #308]	; (8003410 <HAL_RCC_GetSysClockFreq+0x180>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d028      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e6:	4b4a      	ldr	r3, [pc, #296]	; (8003410 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	2200      	movs	r2, #0
 80032ee:	623b      	str	r3, [r7, #32]
 80032f0:	627a      	str	r2, [r7, #36]	; 0x24
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032f8:	2100      	movs	r1, #0
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_GetSysClockFreq+0x188>)
 80032fc:	fb03 f201 	mul.w	r2, r3, r1
 8003300:	2300      	movs	r3, #0
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	4413      	add	r3, r2
 8003308:	4a43      	ldr	r2, [pc, #268]	; (8003418 <HAL_RCC_GetSysClockFreq+0x188>)
 800330a:	fba0 1202 	umull	r1, r2, r0, r2
 800330e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003310:	460a      	mov	r2, r1
 8003312:	62ba      	str	r2, [r7, #40]	; 0x28
 8003314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003316:	4413      	add	r3, r2
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331c:	2200      	movs	r2, #0
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	61fa      	str	r2, [r7, #28]
 8003322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800332a:	f7fc ffa9 	bl	8000280 <__aeabi_uldivmod>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4613      	mov	r3, r2
 8003334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003336:	e053      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003338:	4b35      	ldr	r3, [pc, #212]	; (8003410 <HAL_RCC_GetSysClockFreq+0x180>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	2200      	movs	r2, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	617a      	str	r2, [r7, #20]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800334a:	f04f 0b00 	mov.w	fp, #0
 800334e:	4652      	mov	r2, sl
 8003350:	465b      	mov	r3, fp
 8003352:	f04f 0000 	mov.w	r0, #0
 8003356:	f04f 0100 	mov.w	r1, #0
 800335a:	0159      	lsls	r1, r3, #5
 800335c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003360:	0150      	lsls	r0, r2, #5
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	ebb2 080a 	subs.w	r8, r2, sl
 800336a:	eb63 090b 	sbc.w	r9, r3, fp
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800337a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800337e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003382:	ebb2 0408 	subs.w	r4, r2, r8
 8003386:	eb63 0509 	sbc.w	r5, r3, r9
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	00eb      	lsls	r3, r5, #3
 8003394:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003398:	00e2      	lsls	r2, r4, #3
 800339a:	4614      	mov	r4, r2
 800339c:	461d      	mov	r5, r3
 800339e:	eb14 030a 	adds.w	r3, r4, sl
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	eb45 030b 	adc.w	r3, r5, fp
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b6:	4629      	mov	r1, r5
 80033b8:	028b      	lsls	r3, r1, #10
 80033ba:	4621      	mov	r1, r4
 80033bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c0:	4621      	mov	r1, r4
 80033c2:	028a      	lsls	r2, r1, #10
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	2200      	movs	r2, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	60fa      	str	r2, [r7, #12]
 80033d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d4:	f7fc ff54 	bl	8000280 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4613      	mov	r3, r2
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_GetSysClockFreq+0x180>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	3301      	adds	r3, #1
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033fa:	e002      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetSysClockFreq+0x184>)
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003404:	4618      	mov	r0, r3
 8003406:	3740      	adds	r7, #64	; 0x40
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	00f42400 	.word	0x00f42400
 8003418:	017d7840 	.word	0x017d7840

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003438:	f7ff fff0 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	08008b28 	.word	0x08008b28

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003460:	f7ff ffdc 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0b5b      	lsrs	r3, r3, #13
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4903      	ldr	r1, [pc, #12]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08008b28 	.word	0x08008b28

08003484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e03f      	b.n	8003516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd f968 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 faa5 	bl	8003a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	4613      	mov	r3, r2
 800352a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	d11d      	bne.n	8003574 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_UART_Receive_DMA+0x26>
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e016      	b.n	8003576 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_UART_Receive_DMA+0x38>
 8003552:	2302      	movs	r3, #2
 8003554:	e00f      	b.n	8003576 <HAL_UART_Receive_DMA+0x58>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	461a      	mov	r2, r3
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f92a 	bl	80037c4 <UART_Start_Receive_DMA>
 8003570:	4603      	mov	r3, r0
 8003572:	e000      	b.n	8003576 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b09c      	sub	sp, #112	; 0x70
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d172      	bne.n	80036d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	2200      	movs	r2, #0
 80035f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360a:	66bb      	str	r3, [r7, #104]	; 0x68
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003614:	65ba      	str	r2, [r7, #88]	; 0x58
 8003616:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800361a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e5      	bne.n	80035f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	667b      	str	r3, [r7, #100]	; 0x64
 8003640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3314      	adds	r3, #20
 8003646:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003648:	647a      	str	r2, [r7, #68]	; 0x44
 800364a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800364e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e5      	bne.n	8003628 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800365c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	623b      	str	r3, [r7, #32]
   return(result);
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003672:	663b      	str	r3, [r7, #96]	; 0x60
 8003674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800367c:	633a      	str	r2, [r7, #48]	; 0x30
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	2b01      	cmp	r3, #1
 800369e:	d119      	bne.n	80036d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0310 	bic.w	r3, r3, #16
 80036b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	69b9      	ldr	r1, [r7, #24]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	617b      	str	r3, [r7, #20]
   return(result);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e5      	bne.n	80036a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d106      	bne.n	80036ea <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036e0:	4619      	mov	r1, r3
 80036e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80036e4:	f7ff ff69 	bl	80035ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036e8:	e002      	b.n	80036f0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80036ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80036ec:	f7ff ff47 	bl	800357e <HAL_UART_RxCpltCallback>
}
 80036f0:	bf00      	nop
 80036f2:	3770      	adds	r7, #112	; 0x70
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	2b01      	cmp	r3, #1
 800370c:	d108      	bne.n	8003720 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	b29b      	uxth	r3, r3
 8003716:	4619      	mov	r1, r3
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff ff4e 	bl	80035ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800371e:	e002      	b.n	8003726 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff ff36 	bl	8003592 <HAL_UART_RxHalfCpltCallback>
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b21      	cmp	r3, #33	; 0x21
 8003760:	d108      	bne.n	8003774 <UART_DMAError+0x46>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800376e:	68b8      	ldr	r0, [r7, #8]
 8003770:	f000 f8c6 	bl	8003900 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b22      	cmp	r3, #34	; 0x22
 8003794:	d108      	bne.n	80037a8 <UART_DMAError+0x7a>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2200      	movs	r2, #0
 80037a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80037a2:	68b8      	ldr	r0, [r7, #8]
 80037a4:	f000 f8d4 	bl	8003950 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0210 	orr.w	r2, r3, #16
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037b4:	68b8      	ldr	r0, [r7, #8]
 80037b6:	f7ff fef6 	bl	80035a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ba:	bf00      	nop
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b098      	sub	sp, #96	; 0x60
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2222      	movs	r2, #34	; 0x22
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	4a40      	ldr	r2, [pc, #256]	; (80038f4 <UART_Start_Receive_DMA+0x130>)
 80037f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <UART_Start_Receive_DMA+0x134>)
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <UART_Start_Receive_DMA+0x138>)
 8003802:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	2200      	movs	r2, #0
 800380a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800380c:	f107 0308 	add.w	r3, r7, #8
 8003810:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	f7fd fc9c 	bl	8001160 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d019      	beq.n	8003882 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	65bb      	str	r3, [r7, #88]	; 0x58
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003870:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800387c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e5      	bne.n	800384e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3314      	adds	r3, #20
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	657b      	str	r3, [r7, #84]	; 0x54
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3314      	adds	r3, #20
 80038a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3314      	adds	r3, #20
 80038bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	617b      	str	r3, [r7, #20]
   return(result);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038cc:	653b      	str	r3, [r7, #80]	; 0x50
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038d6:	627a      	str	r2, [r7, #36]	; 0x24
 80038d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6a39      	ldr	r1, [r7, #32]
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e5      	bne.n	80038b6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3760      	adds	r7, #96	; 0x60
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	080035d3 	.word	0x080035d3
 80038f8:	080036f9 	.word	0x080036f9
 80038fc:	0800372f 	.word	0x0800372f

08003900 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	60bb      	str	r3, [r7, #8]
   return(result);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	61ba      	str	r2, [r7, #24]
 800392a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6979      	ldr	r1, [r7, #20]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	613b      	str	r3, [r7, #16]
   return(result);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003944:	bf00      	nop
 8003946:	3724      	adds	r7, #36	; 0x24
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b095      	sub	sp, #84	; 0x54
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800396e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003978:	643a      	str	r2, [r7, #64]	; 0x40
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800397e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	61fb      	str	r3, [r7, #28]
   return(result);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e5      	bne.n	800398c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d119      	bne.n	80039fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f023 0310 	bic.w	r3, r3, #16
 80039de:	647b      	str	r3, [r7, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039e8:	61ba      	str	r2, [r7, #24]
 80039ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	6979      	ldr	r1, [r7, #20]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	613b      	str	r3, [r7, #16]
   return(result);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e5      	bne.n	80039c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a0a:	bf00      	nop
 8003a0c:	3754      	adds	r7, #84	; 0x54
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a1c:	b0c0      	sub	sp, #256	; 0x100
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	68d9      	ldr	r1, [r3, #12]
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	ea40 0301 	orr.w	r3, r0, r1
 8003a40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a70:	f021 010c 	bic.w	r1, r1, #12
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	6999      	ldr	r1, [r3, #24]
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	ea40 0301 	orr.w	r3, r0, r1
 8003a9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b8f      	ldr	r3, [pc, #572]	; (8003ce4 <UART_SetConfig+0x2cc>)
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d005      	beq.n	8003ab8 <UART_SetConfig+0xa0>
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b8d      	ldr	r3, [pc, #564]	; (8003ce8 <UART_SetConfig+0x2d0>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d104      	bne.n	8003ac2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7ff fcd0 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 8003abc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ac0:	e003      	b.n	8003aca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ac2:	f7ff fcb7 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8003ac6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad4:	f040 810c 	bne.w	8003cf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ae2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ae6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003aea:	4622      	mov	r2, r4
 8003aec:	462b      	mov	r3, r5
 8003aee:	1891      	adds	r1, r2, r2
 8003af0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003af2:	415b      	adcs	r3, r3
 8003af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003afa:	4621      	mov	r1, r4
 8003afc:	eb12 0801 	adds.w	r8, r2, r1
 8003b00:	4629      	mov	r1, r5
 8003b02:	eb43 0901 	adc.w	r9, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb18 0303 	adds.w	r3, r8, r3
 8003b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b28:	462b      	mov	r3, r5
 8003b2a:	eb49 0303 	adc.w	r3, r9, r3
 8003b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b46:	460b      	mov	r3, r1
 8003b48:	18db      	adds	r3, r3, r3
 8003b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	eb42 0303 	adc.w	r3, r2, r3
 8003b52:	657b      	str	r3, [r7, #84]	; 0x54
 8003b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b5c:	f7fc fb90 	bl	8000280 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4b61      	ldr	r3, [pc, #388]	; (8003cec <UART_SetConfig+0x2d4>)
 8003b66:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	011c      	lsls	r4, r3, #4
 8003b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b80:	4642      	mov	r2, r8
 8003b82:	464b      	mov	r3, r9
 8003b84:	1891      	adds	r1, r2, r2
 8003b86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b88:	415b      	adcs	r3, r3
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b90:	4641      	mov	r1, r8
 8003b92:	eb12 0a01 	adds.w	sl, r2, r1
 8003b96:	4649      	mov	r1, r9
 8003b98:	eb43 0b01 	adc.w	fp, r3, r1
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ba8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bb0:	4692      	mov	sl, r2
 8003bb2:	469b      	mov	fp, r3
 8003bb4:	4643      	mov	r3, r8
 8003bb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	18db      	adds	r3, r3, r3
 8003be0:	643b      	str	r3, [r7, #64]	; 0x40
 8003be2:	4613      	mov	r3, r2
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bf2:	f7fc fb45 	bl	8000280 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <UART_SetConfig+0x2d4>)
 8003bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2264      	movs	r2, #100	; 0x64
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	1acb      	subs	r3, r1, r3
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c12:	4b36      	ldr	r3, [pc, #216]	; (8003cec <UART_SetConfig+0x2d4>)
 8003c14:	fba3 2302 	umull	r2, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c20:	441c      	add	r4, r3
 8003c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c34:	4642      	mov	r2, r8
 8003c36:	464b      	mov	r3, r9
 8003c38:	1891      	adds	r1, r2, r2
 8003c3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c3c:	415b      	adcs	r3, r3
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c44:	4641      	mov	r1, r8
 8003c46:	1851      	adds	r1, r2, r1
 8003c48:	6339      	str	r1, [r7, #48]	; 0x30
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	414b      	adcs	r3, r1
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	00cb      	lsls	r3, r1, #3
 8003c60:	4651      	mov	r1, sl
 8003c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c66:	4651      	mov	r1, sl
 8003c68:	00ca      	lsls	r2, r1, #3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4642      	mov	r2, r8
 8003c72:	189b      	adds	r3, r3, r2
 8003c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c78:	464b      	mov	r3, r9
 8003c7a:	460a      	mov	r2, r1
 8003c7c:	eb42 0303 	adc.w	r3, r2, r3
 8003c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c98:	460b      	mov	r3, r1
 8003c9a:	18db      	adds	r3, r3, r3
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	eb42 0303 	adc.w	r3, r2, r3
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003caa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cae:	f7fc fae7 	bl	8000280 <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <UART_SetConfig+0x2d4>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	2164      	movs	r1, #100	; 0x64
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	3332      	adds	r3, #50	; 0x32
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <UART_SetConfig+0x2d4>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f003 0207 	and.w	r2, r3, #7
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4422      	add	r2, r4
 8003cde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ce0:	e106      	b.n	8003ef0 <UART_SetConfig+0x4d8>
 8003ce2:	bf00      	nop
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	40011400 	.word	0x40011400
 8003cec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d02:	4642      	mov	r2, r8
 8003d04:	464b      	mov	r3, r9
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	6239      	str	r1, [r7, #32]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d12:	4641      	mov	r1, r8
 8003d14:	1854      	adds	r4, r2, r1
 8003d16:	4649      	mov	r1, r9
 8003d18:	eb43 0501 	adc.w	r5, r3, r1
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	00eb      	lsls	r3, r5, #3
 8003d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2a:	00e2      	lsls	r2, r4, #3
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	461d      	mov	r5, r3
 8003d30:	4643      	mov	r3, r8
 8003d32:	18e3      	adds	r3, r4, r3
 8003d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d38:	464b      	mov	r3, r9
 8003d3a:	eb45 0303 	adc.w	r3, r5, r3
 8003d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d5e:	4629      	mov	r1, r5
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	4621      	mov	r1, r4
 8003d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d68:	4621      	mov	r1, r4
 8003d6a:	008a      	lsls	r2, r1, #2
 8003d6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d70:	f7fc fa86 	bl	8000280 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4b60      	ldr	r3, [pc, #384]	; (8003efc <UART_SetConfig+0x4e4>)
 8003d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	011c      	lsls	r4, r3, #4
 8003d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	61b9      	str	r1, [r7, #24]
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da4:	4641      	mov	r1, r8
 8003da6:	1851      	adds	r1, r2, r1
 8003da8:	6139      	str	r1, [r7, #16]
 8003daa:	4649      	mov	r1, r9
 8003dac:	414b      	adcs	r3, r1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	00cb      	lsls	r3, r1, #3
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	00ca      	lsls	r2, r1, #3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dd8:	464b      	mov	r3, r9
 8003dda:	460a      	mov	r2, r1
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	008b      	lsls	r3, r1, #2
 8003e00:	4641      	mov	r1, r8
 8003e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e06:	4641      	mov	r1, r8
 8003e08:	008a      	lsls	r2, r1, #2
 8003e0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e0e:	f7fc fa37 	bl	8000280 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	4b38      	ldr	r3, [pc, #224]	; (8003efc <UART_SetConfig+0x4e4>)
 8003e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2264      	movs	r2, #100	; 0x64
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	1acb      	subs	r3, r1, r3
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	3332      	adds	r3, #50	; 0x32
 8003e2c:	4a33      	ldr	r2, [pc, #204]	; (8003efc <UART_SetConfig+0x4e4>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e38:	441c      	add	r4, r3
 8003e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e3e:	2200      	movs	r2, #0
 8003e40:	673b      	str	r3, [r7, #112]	; 0x70
 8003e42:	677a      	str	r2, [r7, #116]	; 0x74
 8003e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	1891      	adds	r1, r2, r2
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	415b      	adcs	r3, r3
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e58:	4641      	mov	r1, r8
 8003e5a:	1851      	adds	r1, r2, r1
 8003e5c:	6039      	str	r1, [r7, #0]
 8003e5e:	4649      	mov	r1, r9
 8003e60:	414b      	adcs	r3, r1
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e70:	4659      	mov	r1, fp
 8003e72:	00cb      	lsls	r3, r1, #3
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	00ca      	lsls	r2, r1, #3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	4642      	mov	r2, r8
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	460a      	mov	r2, r1
 8003e8e:	eb42 0303 	adc.w	r3, r2, r3
 8003e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e9e:	667a      	str	r2, [r7, #100]	; 0x64
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eac:	4649      	mov	r1, r9
 8003eae:	008b      	lsls	r3, r1, #2
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	008a      	lsls	r2, r1, #2
 8003eba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ebe:	f7fc f9df 	bl	8000280 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <UART_SetConfig+0x4e4>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	; 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	; 0x32
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <UART_SetConfig+0x4e4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4422      	add	r2, r4
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efc:	51eb851f 	.word	0x51eb851f

08003f00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f00:	b084      	sub	sp, #16
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	f107 001c 	add.w	r0, r7, #28
 8003f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d122      	bne.n	8003f5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f001 fbee 	bl	8005734 <USB_CoreReset>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e01a      	b.n	8003f94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f001 fbe2 	bl	8005734 <USB_CoreReset>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
 8003f86:	e005      	b.n	8003f94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d10b      	bne.n	8003fb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f043 0206 	orr.w	r2, r3, #6
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fbe:	b004      	add	sp, #16
 8003fc0:	4770      	bx	lr
	...

08003fc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d165      	bne.n	80040a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4a41      	ldr	r2, [pc, #260]	; (80040e0 <USB_SetTurnaroundTime+0x11c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d906      	bls.n	8003fee <USB_SetTurnaroundTime+0x2a>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <USB_SetTurnaroundTime+0x120>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d202      	bcs.n	8003fee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fe8:	230f      	movs	r3, #15
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e062      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4a3c      	ldr	r2, [pc, #240]	; (80040e4 <USB_SetTurnaroundTime+0x120>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d306      	bcc.n	8004004 <USB_SetTurnaroundTime+0x40>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <USB_SetTurnaroundTime+0x124>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d202      	bcs.n	8004004 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ffe:	230e      	movs	r3, #14
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e057      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4a38      	ldr	r2, [pc, #224]	; (80040e8 <USB_SetTurnaroundTime+0x124>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d306      	bcc.n	800401a <USB_SetTurnaroundTime+0x56>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4a37      	ldr	r2, [pc, #220]	; (80040ec <USB_SetTurnaroundTime+0x128>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d202      	bcs.n	800401a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004014:	230d      	movs	r3, #13
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e04c      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4a33      	ldr	r2, [pc, #204]	; (80040ec <USB_SetTurnaroundTime+0x128>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d306      	bcc.n	8004030 <USB_SetTurnaroundTime+0x6c>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4a32      	ldr	r2, [pc, #200]	; (80040f0 <USB_SetTurnaroundTime+0x12c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d802      	bhi.n	8004030 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800402a:	230c      	movs	r3, #12
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e041      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4a2f      	ldr	r2, [pc, #188]	; (80040f0 <USB_SetTurnaroundTime+0x12c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d906      	bls.n	8004046 <USB_SetTurnaroundTime+0x82>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4a2e      	ldr	r2, [pc, #184]	; (80040f4 <USB_SetTurnaroundTime+0x130>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d802      	bhi.n	8004046 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004040:	230b      	movs	r3, #11
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e036      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <USB_SetTurnaroundTime+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d906      	bls.n	800405c <USB_SetTurnaroundTime+0x98>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <USB_SetTurnaroundTime+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d802      	bhi.n	800405c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004056:	230a      	movs	r3, #10
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e02b      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <USB_SetTurnaroundTime+0x134>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d906      	bls.n	8004072 <USB_SetTurnaroundTime+0xae>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4a25      	ldr	r2, [pc, #148]	; (80040fc <USB_SetTurnaroundTime+0x138>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d202      	bcs.n	8004072 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800406c:	2309      	movs	r3, #9
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e020      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4a21      	ldr	r2, [pc, #132]	; (80040fc <USB_SetTurnaroundTime+0x138>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d306      	bcc.n	8004088 <USB_SetTurnaroundTime+0xc4>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4a20      	ldr	r2, [pc, #128]	; (8004100 <USB_SetTurnaroundTime+0x13c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d802      	bhi.n	8004088 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004082:	2308      	movs	r3, #8
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e015      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <USB_SetTurnaroundTime+0x13c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d906      	bls.n	800409e <USB_SetTurnaroundTime+0xda>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <USB_SetTurnaroundTime+0x140>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d202      	bcs.n	800409e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004098:	2307      	movs	r3, #7
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e00a      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800409e:	2306      	movs	r3, #6
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e007      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040aa:	2309      	movs	r3, #9
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e001      	b.n	80040b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040b0:	2309      	movs	r3, #9
 80040b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	029b      	lsls	r3, r3, #10
 80040c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	00d8acbf 	.word	0x00d8acbf
 80040e4:	00e4e1c0 	.word	0x00e4e1c0
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	01067380 	.word	0x01067380
 80040f0:	011a499f 	.word	0x011a499f
 80040f4:	01312cff 	.word	0x01312cff
 80040f8:	014ca43f 	.word	0x014ca43f
 80040fc:	016e3600 	.word	0x016e3600
 8004100:	01a6ab1f 	.word	0x01a6ab1f
 8004104:	01e84800 	.word	0x01e84800

08004108 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f043 0201 	orr.w	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 0201 	bic.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d115      	bne.n	800419a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800417a:	2001      	movs	r0, #1
 800417c:	f7fc fe0c 	bl	8000d98 <HAL_Delay>
      ms++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f001 fa45 	bl	8005616 <USB_GetMode>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d01e      	beq.n	80041d0 <USB_SetCurrentMode+0x84>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b31      	cmp	r3, #49	; 0x31
 8004196:	d9f0      	bls.n	800417a <USB_SetCurrentMode+0x2e>
 8004198:	e01a      	b.n	80041d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d115      	bne.n	80041cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7fc fdf3 	bl	8000d98 <HAL_Delay>
      ms++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3301      	adds	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f001 fa2c 	bl	8005616 <USB_GetMode>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <USB_SetCurrentMode+0x84>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b31      	cmp	r3, #49	; 0x31
 80041c8:	d9f0      	bls.n	80041ac <USB_SetCurrentMode+0x60>
 80041ca:	e001      	b.n	80041d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e005      	b.n	80041dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b32      	cmp	r3, #50	; 0x32
 80041d4:	d101      	bne.n	80041da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041e4:	b084      	sub	sp, #16
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e009      	b.n	8004218 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	3340      	adds	r3, #64	; 0x40
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	2200      	movs	r2, #0
 8004210:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3301      	adds	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b0e      	cmp	r3, #14
 800421c:	d9f2      	bls.n	8004204 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800421e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11c      	bne.n	800425e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004232:	f043 0302 	orr.w	r3, r3, #2
 8004236:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	; 0x38
 800425c:	e00b      	b.n	8004276 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800427c:	461a      	mov	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004288:	4619      	mov	r1, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	461a      	mov	r2, r3
 8004292:	680b      	ldr	r3, [r1, #0]
 8004294:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10c      	bne.n	80042b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042a2:	2100      	movs	r1, #0
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f965 	bl	8004574 <USB_SetDevSpeed>
 80042aa:	e008      	b.n	80042be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042ac:	2101      	movs	r1, #1
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f960 	bl	8004574 <USB_SetDevSpeed>
 80042b4:	e003      	b.n	80042be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042b6:	2103      	movs	r1, #3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f95b 	bl	8004574 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042be:	2110      	movs	r1, #16
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8f3 	bl	80044ac <USB_FlushTxFifo>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f91f 	bl	8004514 <USB_FlushRxFifo>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	461a      	mov	r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	461a      	mov	r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e043      	b.n	8004392 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800431c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004320:	d118      	bne.n	8004354 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e013      	b.n	8004366 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	461a      	mov	r2, r3
 800434c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e008      	b.n	8004366 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	461a      	mov	r2, r3
 8004362:	2300      	movs	r3, #0
 8004364:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004372:	461a      	mov	r2, r3
 8004374:	2300      	movs	r3, #0
 8004376:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	461a      	mov	r2, r3
 8004386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800438a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	3301      	adds	r3, #1
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	429a      	cmp	r2, r3
 8004398:	d3b7      	bcc.n	800430a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	e043      	b.n	8004428 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b6:	d118      	bne.n	80043ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e013      	b.n	80043fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e008      	b.n	80043fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	2300      	movs	r3, #0
 80043fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	2300      	movs	r3, #0
 800440c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	461a      	mov	r2, r3
 800441c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004420:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3301      	adds	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	429a      	cmp	r2, r3
 800442e:	d3b7      	bcc.n	80043a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004442:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004450:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f043 0210 	orr.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <USB_DevInit+0x2c4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f043 0208 	orr.w	r2, r3, #8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044a4:	b004      	add	sp, #16
 80044a6:	4770      	bx	lr
 80044a8:	803c3800 	.word	0x803c3800

080044ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3301      	adds	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <USB_FlushTxFifo+0x64>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e01b      	b.n	8004504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	daf2      	bge.n	80044ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	019b      	lsls	r3, r3, #6
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3301      	adds	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <USB_FlushTxFifo+0x64>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e006      	b.n	8004504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d0f0      	beq.n	80044e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	00030d40 	.word	0x00030d40

08004514 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3301      	adds	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a11      	ldr	r2, [pc, #68]	; (8004570 <USB_FlushRxFifo+0x5c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e018      	b.n	8004564 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	daf2      	bge.n	8004520 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2210      	movs	r2, #16
 8004542:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3301      	adds	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a08      	ldr	r2, [pc, #32]	; (8004570 <USB_FlushRxFifo+0x5c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e006      	b.n	8004564 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b10      	cmp	r3, #16
 8004560:	d0f0      	beq.n	8004544 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	00030d40 	.word	0x00030d40

08004574 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	68f9      	ldr	r1, [r7, #12]
 8004590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b087      	sub	sp, #28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0306 	and.w	r3, r3, #6
 80045be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
 80045ca:	e00a      	b.n	80045e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d002      	beq.n	80045d8 <USB_GetDevSpeed+0x32>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b06      	cmp	r3, #6
 80045d6:	d102      	bne.n	80045de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045d8:	2302      	movs	r3, #2
 80045da:	75fb      	strb	r3, [r7, #23]
 80045dc:	e001      	b.n	80045e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045de:	230f      	movs	r3, #15
 80045e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d13a      	bne.n	8004682 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	2101      	movs	r1, #1
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	b29b      	uxth	r3, r3
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800462a:	4313      	orrs	r3, r2
 800462c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d155      	bne.n	80046f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	791b      	ldrb	r3, [r3, #4]
 800465e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004660:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	059b      	lsls	r3, r3, #22
 8004666:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004668:	4313      	orrs	r3, r2
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e036      	b.n	80046f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	2101      	movs	r1, #1
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	68f9      	ldr	r1, [r7, #12]
 800469c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d11a      	bne.n	80046f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	791b      	ldrb	r3, [r3, #4]
 80046d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046d6:	430b      	orrs	r3, r1
 80046d8:	4313      	orrs	r3, r2
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d161      	bne.n	80047e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800472e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004732:	d11f      	bne.n	8004774 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004752:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004772:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	b29b      	uxth	r3, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004794:	4013      	ands	r3, r2
 8004796:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b8:	4013      	ands	r3, r2
 80047ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	0159      	lsls	r1, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	440b      	add	r3, r1
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	4619      	mov	r1, r3
 80047d8:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <USB_DeactivateEndpoint+0x1b0>)
 80047da:	4013      	ands	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
 80047de:	e060      	b.n	80048a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f6:	d11f      	bne.n	8004838 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004816:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004836:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	43db      	mvns	r3, r3
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004858:	4013      	ands	r3, r2
 800485a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	43db      	mvns	r3, r3
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487c:	4013      	ands	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	0159      	lsls	r1, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	440b      	add	r3, r1
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	4619      	mov	r1, r3
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <USB_DeactivateEndpoint+0x1b4>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	ec337800 	.word	0xec337800
 80048b4:	eff37800 	.word	0xeff37800

080048b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 815c 	bne.w	8004b92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d132      	bne.n	8004948 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004900:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004904:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004924:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004940:	0cdb      	lsrs	r3, r3, #19
 8004942:	04db      	lsls	r3, r3, #19
 8004944:	6113      	str	r3, [r2, #16]
 8004946:	e074      	b.n	8004a32 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004962:	0cdb      	lsrs	r3, r3, #19
 8004964:	04db      	lsls	r3, r3, #19
 8004966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004982:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004986:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800498a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6999      	ldr	r1, [r3, #24]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	440b      	add	r3, r1
 80049a4:	1e59      	subs	r1, r3, #1
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049b0:	4b9d      	ldr	r3, [pc, #628]	; (8004c28 <USB_EPStartXfer+0x370>)
 80049b2:	400b      	ands	r3, r1
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	0148      	lsls	r0, r1, #5
 80049b8:	69f9      	ldr	r1, [r7, #28]
 80049ba:	4401      	add	r1, r0
 80049bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049c0:	4313      	orrs	r3, r2
 80049c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049da:	69b9      	ldr	r1, [r7, #24]
 80049dc:	0148      	lsls	r0, r1, #5
 80049de:	69f9      	ldr	r1, [r7, #28]
 80049e0:	4401      	add	r1, r0
 80049e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049e6:	4313      	orrs	r3, r2
 80049e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d11f      	bne.n	8004a32 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d14b      	bne.n	8004ad0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	791b      	ldrb	r3, [r3, #4]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d128      	bne.n	8004aae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d110      	bne.n	8004a8e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e00f      	b.n	8004aae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e133      	b.n	8004d38 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	791b      	ldrb	r3, [r3, #4]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d015      	beq.n	8004b24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 811b 	beq.w	8004d38 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	2101      	movs	r1, #1
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	69f9      	ldr	r1, [r7, #28]
 8004b1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	634b      	str	r3, [r1, #52]	; 0x34
 8004b22:	e109      	b.n	8004d38 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d110      	bne.n	8004b56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	e00f      	b.n	8004b76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	b298      	uxth	r0, r3
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	4603      	mov	r3, r0
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fade 	bl	800514c <USB_WritePacket>
 8004b90:	e0d2      	b.n	8004d38 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	0cdb      	lsrs	r3, r3, #19
 8004bae:	04db      	lsls	r3, r3, #19
 8004bb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d126      	bne.n	8004c2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	0148      	lsls	r0, r1, #5
 8004bf8:	69f9      	ldr	r1, [r7, #28]
 8004bfa:	4401      	add	r1, r0
 8004bfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c00:	4313      	orrs	r3, r2
 8004c02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c22:	6113      	str	r3, [r2, #16]
 8004c24:	e03a      	b.n	8004c9c <USB_EPStartXfer+0x3e4>
 8004c26:	bf00      	nop
 8004c28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	8afa      	ldrh	r2, [r7, #22]
 8004c48:	fb03 f202 	mul.w	r2, r3, r2
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	8afb      	ldrh	r3, [r7, #22]
 8004c60:	04d9      	lsls	r1, r3, #19
 8004c62:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <USB_EPStartXfer+0x48c>)
 8004c64:	400b      	ands	r3, r1
 8004c66:	69b9      	ldr	r1, [r7, #24]
 8004c68:	0148      	lsls	r0, r1, #5
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	4401      	add	r1, r0
 8004c6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c72:	4313      	orrs	r3, r2
 8004c74:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8c:	69b9      	ldr	r1, [r7, #24]
 8004c8e:	0148      	lsls	r0, r1, #5
 8004c90:	69f9      	ldr	r1, [r7, #28]
 8004c92:	4401      	add	r1, r0
 8004c94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10d      	bne.n	8004cbe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6919      	ldr	r1, [r3, #16]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	460a      	mov	r2, r1
 8004cbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	791b      	ldrb	r3, [r3, #4]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d128      	bne.n	8004d18 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d110      	bne.n	8004cf8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00f      	b.n	8004d18 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	1ff80000 	.word	0x1ff80000

08004d48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	f040 80ce 	bne.w	8004f06 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d132      	bne.n	8004dd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd0:	0cdb      	lsrs	r3, r3, #19
 8004dd2:	04db      	lsls	r3, r3, #19
 8004dd4:	6113      	str	r3, [r2, #16]
 8004dd6:	e04e      	b.n	8004e76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df2:	0cdb      	lsrs	r3, r3, #19
 8004df4:	04db      	lsls	r3, r3, #19
 8004df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d903      	bls.n	8004e30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e66:	6939      	ldr	r1, [r7, #16]
 8004e68:	0148      	lsls	r0, r1, #5
 8004e6a:	6979      	ldr	r1, [r7, #20]
 8004e6c:	4401      	add	r1, r0
 8004e6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e72:	4313      	orrs	r3, r2
 8004e74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d11e      	bne.n	8004eba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	461a      	mov	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	e097      	b.n	8004fea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8083 	beq.w	8004fea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f00:	4313      	orrs	r3, r2
 8004f02:	634b      	str	r3, [r1, #52]	; 0x34
 8004f04:	e071      	b.n	8004fea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f20:	0cdb      	lsrs	r3, r3, #19
 8004f22:	04db      	lsls	r3, r3, #19
 8004f24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f98:	6939      	ldr	r1, [r7, #16]
 8004f9a:	0148      	lsls	r0, r1, #5
 8004f9c:	6979      	ldr	r1, [r7, #20]
 8004f9e:	4401      	add	r1, r0
 8004fa0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10d      	bne.n	8004fca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6919      	ldr	r1, [r3, #16]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fe8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d14a      	bne.n	80050ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800502a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502e:	f040 8086 	bne.w	800513e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005054:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005078:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f242 7210 	movw	r2, #10000	; 0x2710
 8005086:	4293      	cmp	r3, r2
 8005088:	d902      	bls.n	8005090 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
          break;
 800508e:	e056      	b.n	800513e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050a8:	d0e7      	beq.n	800507a <USB_EPStopXfer+0x82>
 80050aa:	e048      	b.n	800513e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c4:	d13b      	bne.n	800513e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800510c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f242 7210 	movw	r2, #10000	; 0x2710
 800511a:	4293      	cmp	r3, r2
 800511c:	d902      	bls.n	8005124 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
          break;
 8005122:	e00c      	b.n	800513e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800513c:	d0e7      	beq.n	800510e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800513e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005140:	4618      	mov	r0, r3
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800514c:	b480      	push	{r7}
 800514e:	b089      	sub	sp, #36	; 0x24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4611      	mov	r1, r2
 8005158:	461a      	mov	r2, r3
 800515a:	460b      	mov	r3, r1
 800515c:	71fb      	strb	r3, [r7, #7]
 800515e:	4613      	mov	r3, r2
 8005160:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800516a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d123      	bne.n	80051ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005172:	88bb      	ldrh	r3, [r7, #4]
 8005174:	3303      	adds	r3, #3
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	e018      	b.n	80051b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	031a      	lsls	r2, r3, #12
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518c:	461a      	mov	r2, r3
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3301      	adds	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3301      	adds	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	3301      	adds	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d3e2      	bcc.n	8005180 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3724      	adds	r7, #36	; 0x24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b08b      	sub	sp, #44	; 0x2c
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	089b      	lsrs	r3, r3, #2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	e014      	b.n	800521e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	3301      	adds	r3, #1
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	3301      	adds	r3, #1
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	3301      	adds	r3, #1
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	3301      	adds	r3, #1
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	3301      	adds	r3, #1
 800521c:	623b      	str	r3, [r7, #32]
 800521e:	6a3a      	ldr	r2, [r7, #32]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	429a      	cmp	r2, r3
 8005224:	d3e6      	bcc.n	80051f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005226:	8bfb      	ldrh	r3, [r7, #30]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01e      	beq.n	800526a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005236:	461a      	mov	r2, r3
 8005238:	f107 0310 	add.w	r3, r7, #16
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
 800524c:	b2da      	uxtb	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	701a      	strb	r2, [r3, #0]
      i++;
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	3301      	adds	r3, #1
 8005256:	623b      	str	r3, [r7, #32]
      pDest++;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	3301      	adds	r3, #1
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800525e:	8bfb      	ldrh	r3, [r7, #30]
 8005260:	3b01      	subs	r3, #1
 8005262:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005264:	8bfb      	ldrh	r3, [r7, #30]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1ea      	bne.n	8005240 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800526c:	4618      	mov	r0, r3
 800526e:	372c      	adds	r7, #44	; 0x2c
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d12c      	bne.n	80052ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	db12      	blt.n	80052cc <USB_EPSetStall+0x54>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00f      	beq.n	80052cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	e02b      	b.n	8005346 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db12      	blt.n	8005326 <USB_EPSetStall+0xae>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00f      	beq.n	8005326 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005320:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005324:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005344:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d128      	bne.n	80053c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800538e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	791b      	ldrb	r3, [r3, #4]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d003      	beq.n	80053a0 <USB_EPClearStall+0x4c>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	791b      	ldrb	r3, [r3, #4]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d138      	bne.n	8005412 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	e027      	b.n	8005412 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	791b      	ldrb	r3, [r3, #4]
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d003      	beq.n	80053f2 <USB_EPClearStall+0x9e>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	791b      	ldrb	r3, [r3, #4]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d10f      	bne.n	8005412 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005410:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800543e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005442:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549a:	f023 0302 	bic.w	r3, r3, #2
 800549e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054c8:	f023 0303 	bic.w	r3, r3, #3
 80054cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054dc:	f043 0302 	orr.w	r3, r3, #2
 80054e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4013      	ands	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005508:	68fb      	ldr	r3, [r7, #12]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	4013      	ands	r3, r2
 8005538:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	0c1b      	lsrs	r3, r3, #16
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	4013      	ands	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	b29b      	uxth	r3, r3
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4013      	ands	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055ac:	68bb      	ldr	r3, [r7, #8]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ea:	01db      	lsls	r3, r3, #7
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4013      	ands	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005608:	68bb      	ldr	r3, [r7, #8]
}
 800560a:	4618      	mov	r0, r3
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f003 0301 	and.w	r3, r3, #1
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005650:	f023 0307 	bic.w	r3, r3, #7
 8005654:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	460b      	mov	r3, r1
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	333c      	adds	r3, #60	; 0x3c
 800568e:	3304      	adds	r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4a26      	ldr	r2, [pc, #152]	; (8005730 <USB_EP0_OutStart+0xb8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d90a      	bls.n	80056b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ac:	d101      	bne.n	80056b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e037      	b.n	8005722 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	461a      	mov	r2, r3
 80056ba:	2300      	movs	r3, #0
 80056bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e0:	f043 0318 	orr.w	r3, r3, #24
 80056e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10f      	bne.n	8005720 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800571e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	4f54300a 	.word	0x4f54300a

08005734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <USB_CoreReset+0x64>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e01b      	b.n	800578a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	daf2      	bge.n	8005740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a09      	ldr	r2, [pc, #36]	; (8005798 <USB_CoreReset+0x64>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e006      	b.n	800578a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d0f0      	beq.n	800576a <USB_CoreReset+0x36>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	00030d40 	.word	0x00030d40

0800579c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057ac:	f002 fc8a 	bl	80080c4 <USBD_static_malloc>
 80057b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d109      	bne.n	80057cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	32b0      	adds	r2, #176	; 0xb0
 80057c2:	2100      	movs	r1, #0
 80057c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057c8:	2302      	movs	r3, #2
 80057ca:	e0d4      	b.n	8005976 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057cc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80057d0:	2100      	movs	r1, #0
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f002 fd8e 	bl	80082f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	32b0      	adds	r2, #176	; 0xb0
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	32b0      	adds	r2, #176	; 0xb0
 80057f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	7c1b      	ldrb	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d138      	bne.n	8005876 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005804:	4b5e      	ldr	r3, [pc, #376]	; (8005980 <USBD_CDC_Init+0x1e4>)
 8005806:	7819      	ldrb	r1, [r3, #0]
 8005808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800580c:	2202      	movs	r2, #2
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f002 fb35 	bl	8007e7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005814:	4b5a      	ldr	r3, [pc, #360]	; (8005980 <USBD_CDC_Init+0x1e4>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	3324      	adds	r3, #36	; 0x24
 800582a:	2201      	movs	r2, #1
 800582c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800582e:	4b55      	ldr	r3, [pc, #340]	; (8005984 <USBD_CDC_Init+0x1e8>)
 8005830:	7819      	ldrb	r1, [r3, #0]
 8005832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005836:	2202      	movs	r2, #2
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f002 fb20 	bl	8007e7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800583e:	4b51      	ldr	r3, [pc, #324]	; (8005984 <USBD_CDC_Init+0x1e8>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005856:	2201      	movs	r2, #1
 8005858:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800585a:	4b4b      	ldr	r3, [pc, #300]	; (8005988 <USBD_CDC_Init+0x1ec>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	f003 020f 	and.w	r2, r3, #15
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3326      	adds	r3, #38	; 0x26
 8005870:	2210      	movs	r2, #16
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	e035      	b.n	80058e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005876:	4b42      	ldr	r3, [pc, #264]	; (8005980 <USBD_CDC_Init+0x1e4>)
 8005878:	7819      	ldrb	r1, [r3, #0]
 800587a:	2340      	movs	r3, #64	; 0x40
 800587c:	2202      	movs	r2, #2
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f002 fafd 	bl	8007e7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005884:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <USBD_CDC_Init+0x1e4>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	3324      	adds	r3, #36	; 0x24
 800589a:	2201      	movs	r2, #1
 800589c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800589e:	4b39      	ldr	r3, [pc, #228]	; (8005984 <USBD_CDC_Init+0x1e8>)
 80058a0:	7819      	ldrb	r1, [r3, #0]
 80058a2:	2340      	movs	r3, #64	; 0x40
 80058a4:	2202      	movs	r2, #2
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f002 fae9 	bl	8007e7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058ac:	4b35      	ldr	r3, [pc, #212]	; (8005984 <USBD_CDC_Init+0x1e8>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058c4:	2201      	movs	r2, #1
 80058c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058c8:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <USBD_CDC_Init+0x1ec>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	f003 020f 	and.w	r2, r3, #15
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	3326      	adds	r3, #38	; 0x26
 80058de:	2210      	movs	r2, #16
 80058e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058e2:	4b29      	ldr	r3, [pc, #164]	; (8005988 <USBD_CDC_Init+0x1ec>)
 80058e4:	7819      	ldrb	r1, [r3, #0]
 80058e6:	2308      	movs	r3, #8
 80058e8:	2203      	movs	r2, #3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f002 fac7 	bl	8007e7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80058f0:	4b25      	ldr	r3, [pc, #148]	; (8005988 <USBD_CDC_Init+0x1ec>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f003 020f 	and.w	r2, r3, #15
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3324      	adds	r3, #36	; 0x24
 8005906:	2201      	movs	r2, #1
 8005908:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	33b0      	adds	r3, #176	; 0xb0
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005940:	2302      	movs	r3, #2
 8005942:	e018      	b.n	8005976 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7c1b      	ldrb	r3, [r3, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <USBD_CDC_Init+0x1e8>)
 800594e:	7819      	ldrb	r1, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f002 fb7e 	bl	800805c <USBD_LL_PrepareReceive>
 8005960:	e008      	b.n	8005974 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005962:	4b08      	ldr	r3, [pc, #32]	; (8005984 <USBD_CDC_Init+0x1e8>)
 8005964:	7819      	ldrb	r1, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800596c:	2340      	movs	r3, #64	; 0x40
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f002 fb74 	bl	800805c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000093 	.word	0x20000093
 8005984:	20000094 	.word	0x20000094
 8005988:	20000095 	.word	0x20000095

0800598c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005998:	4b3a      	ldr	r3, [pc, #232]	; (8005a84 <USBD_CDC_DeInit+0xf8>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f002 fa93 	bl	8007eca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80059a4:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <USBD_CDC_DeInit+0xf8>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	3324      	adds	r3, #36	; 0x24
 80059ba:	2200      	movs	r2, #0
 80059bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80059be:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <USBD_CDC_DeInit+0xfc>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f002 fa80 	bl	8007eca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059ca:	4b2f      	ldr	r3, [pc, #188]	; (8005a88 <USBD_CDC_DeInit+0xfc>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 020f 	and.w	r2, r3, #15
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059e2:	2200      	movs	r2, #0
 80059e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <USBD_CDC_DeInit+0x100>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f002 fa6c 	bl	8007eca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <USBD_CDC_DeInit+0x100>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	f003 020f 	and.w	r2, r3, #15
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	3324      	adds	r3, #36	; 0x24
 8005a08:	2200      	movs	r2, #0
 8005a0a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005a0c:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <USBD_CDC_DeInit+0x100>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f003 020f 	and.w	r2, r3, #15
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3326      	adds	r3, #38	; 0x26
 8005a22:	2200      	movs	r2, #0
 8005a24:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	32b0      	adds	r2, #176	; 0xb0
 8005a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01f      	beq.n	8005a78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	33b0      	adds	r3, #176	; 0xb0
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	32b0      	adds	r2, #176	; 0xb0
 8005a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f002 fb40 	bl	80080e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	32b0      	adds	r2, #176	; 0xb0
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000093 	.word	0x20000093
 8005a88:	20000094 	.word	0x20000094
 8005a8c:	20000095 	.word	0x20000095

08005a90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	32b0      	adds	r2, #176	; 0xb0
 8005aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e0bf      	b.n	8005c40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d050      	beq.n	8005b6e <USBD_CDC_Setup+0xde>
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	f040 80af 	bne.w	8005c30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	88db      	ldrh	r3, [r3, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d03a      	beq.n	8005b50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	b25b      	sxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da1b      	bge.n	8005b1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	33b0      	adds	r3, #176	; 0xb0
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005afa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	88d2      	ldrh	r2, [r2, #6]
 8005b00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	88db      	ldrh	r3, [r3, #6]
 8005b06:	2b07      	cmp	r3, #7
 8005b08:	bf28      	it	cs
 8005b0a:	2307      	movcs	r3, #7
 8005b0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	89fa      	ldrh	r2, [r7, #14]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 fd89 	bl	800762c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005b1a:	e090      	b.n	8005c3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	785a      	ldrb	r2, [r3, #1]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	88db      	ldrh	r3, [r3, #6]
 8005b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8005b2c:	d803      	bhi.n	8005b36 <USBD_CDC_Setup+0xa6>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	88db      	ldrh	r3, [r3, #6]
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	e000      	b.n	8005b38 <USBD_CDC_Setup+0xa8>
 8005b36:	2240      	movs	r2, #64	; 0x40
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b3e:	6939      	ldr	r1, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b46:	461a      	mov	r2, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 fd9b 	bl	8007684 <USBD_CtlPrepareRx>
      break;
 8005b4e:	e076      	b.n	8005c3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	33b0      	adds	r3, #176	; 0xb0
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	7850      	ldrb	r0, [r2, #1]
 8005b66:	2200      	movs	r2, #0
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	4798      	blx	r3
      break;
 8005b6c:	e067      	b.n	8005c3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b0b      	cmp	r3, #11
 8005b74:	d851      	bhi.n	8005c1a <USBD_CDC_Setup+0x18a>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <USBD_CDC_Setup+0xec>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005bad 	.word	0x08005bad
 8005b80:	08005c29 	.word	0x08005c29
 8005b84:	08005c1b 	.word	0x08005c1b
 8005b88:	08005c1b 	.word	0x08005c1b
 8005b8c:	08005c1b 	.word	0x08005c1b
 8005b90:	08005c1b 	.word	0x08005c1b
 8005b94:	08005c1b 	.word	0x08005c1b
 8005b98:	08005c1b 	.word	0x08005c1b
 8005b9c:	08005c1b 	.word	0x08005c1b
 8005ba0:	08005c1b 	.word	0x08005c1b
 8005ba4:	08005bd7 	.word	0x08005bd7
 8005ba8:	08005c01 	.word	0x08005c01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d107      	bne.n	8005bc8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bb8:	f107 030a 	add.w	r3, r7, #10
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 fd33 	bl	800762c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bc6:	e032      	b.n	8005c2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 fcbd 	bl	800754a <USBD_CtlError>
            ret = USBD_FAIL;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd4:	e02b      	b.n	8005c2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d107      	bne.n	8005bf2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005be2:	f107 030d 	add.w	r3, r7, #13
 8005be6:	2201      	movs	r2, #1
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fd1e 	bl	800762c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bf0:	e01d      	b.n	8005c2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 fca8 	bl	800754a <USBD_CtlError>
            ret = USBD_FAIL;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8005bfe:	e016      	b.n	8005c2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d00f      	beq.n	8005c2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 fc9b 	bl	800754a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c18:	e008      	b.n	8005c2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fc94 	bl	800754a <USBD_CtlError>
          ret = USBD_FAIL;
 8005c22:	2303      	movs	r3, #3
 8005c24:	75fb      	strb	r3, [r7, #23]
          break;
 8005c26:	e002      	b.n	8005c2e <USBD_CDC_Setup+0x19e>
          break;
 8005c28:	bf00      	nop
 8005c2a:	e008      	b.n	8005c3e <USBD_CDC_Setup+0x1ae>
          break;
 8005c2c:	bf00      	nop
      }
      break;
 8005c2e:	e006      	b.n	8005c3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 fc89 	bl	800754a <USBD_CtlError>
      ret = USBD_FAIL;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	32b0      	adds	r2, #176	; 0xb0
 8005c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e065      	b.n	8005d3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	32b0      	adds	r2, #176	; 0xb0
 8005c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	3318      	adds	r3, #24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d02f      	beq.n	8005cfc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	f003 020f 	and.w	r2, r3, #15
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	3318      	adds	r3, #24
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	f003 010f 	and.w	r1, r3, #15
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	440b      	add	r3, r1
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4403      	add	r3, r0
 8005cc4:	3348      	adds	r3, #72	; 0x48
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d112      	bne.n	8005cfc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3318      	adds	r3, #24
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cee:	78f9      	ldrb	r1, [r7, #3]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f002 f990 	bl	800801a <USBD_LL_Transmit>
 8005cfa:	e01f      	b.n	8005d3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	33b0      	adds	r3, #176	; 0xb0
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d010      	beq.n	8005d3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	33b0      	adds	r3, #176	; 0xb0
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	32b0      	adds	r2, #176	; 0xb0
 8005d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	32b0      	adds	r2, #176	; 0xb0
 8005d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e01a      	b.n	8005dae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f002 f98e 	bl	800809e <USBD_LL_GetRxDataSize>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	33b0      	adds	r3, #176	; 0xb0
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005da8:	4611      	mov	r1, r2
 8005daa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	32b0      	adds	r2, #176	; 0xb0
 8005dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dcc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e025      	b.n	8005e24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	33b0      	adds	r3, #176	; 0xb0
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01a      	beq.n	8005e22 <USBD_CDC_EP0_RxReady+0x6c>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005df2:	2bff      	cmp	r3, #255	; 0xff
 8005df4:	d015      	beq.n	8005e22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	33b0      	adds	r3, #176	; 0xb0
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005e0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e16:	b292      	uxth	r2, r2
 8005e18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e34:	2182      	movs	r1, #130	; 0x82
 8005e36:	4818      	ldr	r0, [pc, #96]	; (8005e98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e38:	f000 fd4f 	bl	80068da <USBD_GetEpDesc>
 8005e3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e3e:	2101      	movs	r1, #1
 8005e40:	4815      	ldr	r0, [pc, #84]	; (8005e98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e42:	f000 fd4a 	bl	80068da <USBD_GetEpDesc>
 8005e46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e48:	2181      	movs	r1, #129	; 0x81
 8005e4a:	4813      	ldr	r0, [pc, #76]	; (8005e98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e4c:	f000 fd45 	bl	80068da <USBD_GetEpDesc>
 8005e50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d006      	beq.n	8005e72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e6c:	711a      	strb	r2, [r3, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e80:	711a      	strb	r2, [r3, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2243      	movs	r2, #67	; 0x43
 8005e8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000050 	.word	0x20000050

08005e9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ea4:	2182      	movs	r1, #130	; 0x82
 8005ea6:	4818      	ldr	r0, [pc, #96]	; (8005f08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ea8:	f000 fd17 	bl	80068da <USBD_GetEpDesc>
 8005eac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4815      	ldr	r0, [pc, #84]	; (8005f08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005eb2:	f000 fd12 	bl	80068da <USBD_GetEpDesc>
 8005eb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005eb8:	2181      	movs	r1, #129	; 0x81
 8005eba:	4813      	ldr	r0, [pc, #76]	; (8005f08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ebc:	f000 fd0d 	bl	80068da <USBD_GetEpDesc>
 8005ec0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2210      	movs	r2, #16
 8005ecc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	711a      	strb	r2, [r3, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f042 0202 	orr.w	r2, r2, #2
 8005ee0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d006      	beq.n	8005ef6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	711a      	strb	r2, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f042 0202 	orr.w	r2, r2, #2
 8005ef4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2243      	movs	r2, #67	; 0x43
 8005efa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000050 	.word	0x20000050

08005f0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f14:	2182      	movs	r1, #130	; 0x82
 8005f16:	4818      	ldr	r0, [pc, #96]	; (8005f78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f18:	f000 fcdf 	bl	80068da <USBD_GetEpDesc>
 8005f1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f1e:	2101      	movs	r1, #1
 8005f20:	4815      	ldr	r0, [pc, #84]	; (8005f78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f22:	f000 fcda 	bl	80068da <USBD_GetEpDesc>
 8005f26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f28:	2181      	movs	r1, #129	; 0x81
 8005f2a:	4813      	ldr	r0, [pc, #76]	; (8005f78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f2c:	f000 fcd5 	bl	80068da <USBD_GetEpDesc>
 8005f30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2210      	movs	r2, #16
 8005f3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d006      	beq.n	8005f52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4c:	711a      	strb	r2, [r3, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d006      	beq.n	8005f66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f60:	711a      	strb	r2, [r3, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2243      	movs	r2, #67	; 0x43
 8005f6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f6c:	4b02      	ldr	r3, [pc, #8]	; (8005f78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000050 	.word	0x20000050

08005f7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	220a      	movs	r2, #10
 8005f88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f8a:	4b03      	ldr	r3, [pc, #12]	; (8005f98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	2000000c 	.word	0x2000000c

08005f9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e009      	b.n	8005fc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	33b0      	adds	r3, #176	; 0xb0
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	32b0      	adds	r2, #176	; 0xb0
 8005fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fea:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e008      	b.n	8006008 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	32b0      	adds	r2, #176	; 0xb0
 8006028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006034:	2303      	movs	r3, #3
 8006036:	e004      	b.n	8006042 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	32b0      	adds	r2, #176	; 0xb0
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	32b0      	adds	r2, #176	; 0xb0
 8006076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800607e:	2303      	movs	r3, #3
 8006080:	e025      	b.n	80060ce <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11f      	bne.n	80060cc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2201      	movs	r2, #1
 8006090:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <USBD_CDC_TransmitPacket+0x88>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4403      	add	r3, r0
 80060ae:	3318      	adds	r3, #24
 80060b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <USBD_CDC_TransmitPacket+0x88>)
 80060b4:	7819      	ldrb	r1, [r3, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 ffa9 	bl	800801a <USBD_LL_Transmit>

    ret = USBD_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000093 	.word	0x20000093

080060dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	32b0      	adds	r2, #176	; 0xb0
 80060ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	32b0      	adds	r2, #176	; 0xb0
 80060fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006106:	2303      	movs	r3, #3
 8006108:	e018      	b.n	800613c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	7c1b      	ldrb	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006112:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <USBD_CDC_ReceivePacket+0x68>)
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800611c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 ff9b 	bl	800805c <USBD_LL_PrepareReceive>
 8006126:	e008      	b.n	800613a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006128:	4b06      	ldr	r3, [pc, #24]	; (8006144 <USBD_CDC_ReceivePacket+0x68>)
 800612a:	7819      	ldrb	r1, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 ff91 	bl	800805c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20000094 	.word	0x20000094

08006148 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	e01f      	b.n	80061a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	79fa      	ldrb	r2, [r7, #7]
 8006192:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f001 fe0b 	bl	8007db0 <USBD_LL_Init>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	e025      	b.n	800620c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32ae      	adds	r2, #174	; 0xae
 80061d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00f      	beq.n	80061fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32ae      	adds	r2, #174	; 0xae
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	f107 020e 	add.w	r2, r7, #14
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fe13 	bl	8007e48 <USBD_LL_Start>
 8006222:	4603      	mov	r3, r0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006234:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	4611      	mov	r1, r2
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006270:	7bfb      	ldrb	r3, [r7, #15]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	4611      	mov	r1, r2
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 f908 	bl	80074d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062d4:	461a      	mov	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d01a      	beq.n	8006320 <USBD_LL_SetupStage+0x72>
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d822      	bhi.n	8006334 <USBD_LL_SetupStage+0x86>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <USBD_LL_SetupStage+0x4a>
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d00a      	beq.n	800630c <USBD_LL_SetupStage+0x5e>
 80062f6:	e01d      	b.n	8006334 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fb5f 	bl	80069c4 <USBD_StdDevReq>
 8006306:	4603      	mov	r3, r0
 8006308:	73fb      	strb	r3, [r7, #15]
      break;
 800630a:	e020      	b.n	800634e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fbc7 	bl	8006aa8 <USBD_StdItfReq>
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]
      break;
 800631e:	e016      	b.n	800634e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc29 	bl	8006b80 <USBD_StdEPReq>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]
      break;
 8006332:	e00c      	b.n	800634e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800633a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800633e:	b2db      	uxtb	r3, r3
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 fde0 	bl	8007f08 <USBD_LL_StallEP>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	bf00      	nop
  }

  return ret;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	460b      	mov	r3, r1
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800636a:	7afb      	ldrb	r3, [r7, #11]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d16e      	bne.n	800644e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006376:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800637e:	2b03      	cmp	r3, #3
 8006380:	f040 8098 	bne.w	80064b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d913      	bls.n	80063b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	1ad2      	subs	r2, r2, r3
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	4293      	cmp	r3, r2
 80063a8:	bf28      	it	cs
 80063aa:	4613      	movcs	r3, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f001 f984 	bl	80076be <USBD_CtlContinueRx>
 80063b6:	e07d      	b.n	80064b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d014      	beq.n	80063f0 <USBD_LL_DataOutStage+0x98>
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d81d      	bhi.n	8006406 <USBD_LL_DataOutStage+0xae>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <USBD_LL_DataOutStage+0x7c>
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d003      	beq.n	80063da <USBD_LL_DataOutStage+0x82>
 80063d2:	e018      	b.n	8006406 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	75bb      	strb	r3, [r7, #22]
            break;
 80063d8:	e018      	b.n	800640c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	4619      	mov	r1, r3
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fa5e 	bl	80068a6 <USBD_CoreFindIF>
 80063ea:	4603      	mov	r3, r0
 80063ec:	75bb      	strb	r3, [r7, #22]
            break;
 80063ee:	e00d      	b.n	800640c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	4619      	mov	r1, r3
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fa60 	bl	80068c0 <USBD_CoreFindEP>
 8006400:	4603      	mov	r3, r0
 8006402:	75bb      	strb	r3, [r7, #22]
            break;
 8006404:	e002      	b.n	800640c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	75bb      	strb	r3, [r7, #22]
            break;
 800640a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800640c:	7dbb      	ldrb	r3, [r7, #22]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d119      	bne.n	8006446 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b03      	cmp	r3, #3
 800641c:	d113      	bne.n	8006446 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800641e:	7dba      	ldrb	r2, [r7, #22]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	32ae      	adds	r2, #174	; 0xae
 8006424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800642e:	7dba      	ldrb	r2, [r7, #22]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006436:	7dba      	ldrb	r2, [r7, #22]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	32ae      	adds	r2, #174	; 0xae
 800643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f001 f94a 	bl	80076e0 <USBD_CtlSendStatus>
 800644c:	e032      	b.n	80064b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006454:	b2db      	uxtb	r3, r3
 8006456:	4619      	mov	r1, r3
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fa31 	bl	80068c0 <USBD_CoreFindEP>
 800645e:	4603      	mov	r3, r0
 8006460:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006462:	7dbb      	ldrb	r3, [r7, #22]
 8006464:	2bff      	cmp	r3, #255	; 0xff
 8006466:	d025      	beq.n	80064b4 <USBD_LL_DataOutStage+0x15c>
 8006468:	7dbb      	ldrb	r3, [r7, #22]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d122      	bne.n	80064b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b03      	cmp	r3, #3
 8006478:	d117      	bne.n	80064aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800647a:	7dba      	ldrb	r2, [r7, #22]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	32ae      	adds	r2, #174	; 0xae
 8006480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800648a:	7dba      	ldrb	r2, [r7, #22]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006492:	7dba      	ldrb	r2, [r7, #22]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	32ae      	adds	r2, #174	; 0xae
 8006498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	7afa      	ldrb	r2, [r7, #11]
 80064a0:	4611      	mov	r1, r2
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	4798      	blx	r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	e000      	b.n	80064b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b086      	sub	sp, #24
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	460b      	mov	r3, r1
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064cc:	7afb      	ldrb	r3, [r7, #11]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d16f      	bne.n	80065b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3314      	adds	r3, #20
 80064d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d15a      	bne.n	8006598 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d914      	bls.n	8006518 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	461a      	mov	r2, r3
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f001 f8ac 	bl	8007662 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800650a:	2300      	movs	r3, #0
 800650c:	2200      	movs	r2, #0
 800650e:	2100      	movs	r1, #0
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f001 fda3 	bl	800805c <USBD_LL_PrepareReceive>
 8006516:	e03f      	b.n	8006598 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	429a      	cmp	r2, r3
 8006522:	d11c      	bne.n	800655e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800652c:	429a      	cmp	r2, r3
 800652e:	d316      	bcc.n	800655e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800653a:	429a      	cmp	r2, r3
 800653c:	d20f      	bcs.n	800655e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800653e:	2200      	movs	r2, #0
 8006540:	2100      	movs	r1, #0
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f001 f88d 	bl	8007662 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006550:	2300      	movs	r3, #0
 8006552:	2200      	movs	r2, #0
 8006554:	2100      	movs	r1, #0
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f001 fd80 	bl	800805c <USBD_LL_PrepareReceive>
 800655c:	e01c      	b.n	8006598 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b03      	cmp	r3, #3
 8006568:	d10f      	bne.n	800658a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800658a:	2180      	movs	r1, #128	; 0x80
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f001 fcbb 	bl	8007f08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f001 f8b7 	bl	8007706 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d03a      	beq.n	8006618 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff fe42 	bl	800622c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065b0:	e032      	b.n	8006618 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065b2:	7afb      	ldrb	r3, [r7, #11]
 80065b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	4619      	mov	r1, r3
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f97f 	bl	80068c0 <USBD_CoreFindEP>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
 80065c8:	2bff      	cmp	r3, #255	; 0xff
 80065ca:	d025      	beq.n	8006618 <USBD_LL_DataInStage+0x15a>
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d122      	bne.n	8006618 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d11c      	bne.n	8006618 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80065de:	7dfa      	ldrb	r2, [r7, #23]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	32ae      	adds	r2, #174	; 0xae
 80065e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d014      	beq.n	8006618 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80065ee:	7dfa      	ldrb	r2, [r7, #23]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80065f6:	7dfa      	ldrb	r2, [r7, #23]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	32ae      	adds	r2, #174	; 0xae
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	7afa      	ldrb	r2, [r7, #11]
 8006604:	4611      	mov	r1, r2
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	4798      	blx	r3
 800660a:	4603      	mov	r3, r0
 800660c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800660e:	7dbb      	ldrb	r3, [r7, #22]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006614:	7dbb      	ldrb	r3, [r7, #22]
 8006616:	e000      	b.n	800661a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d014      	beq.n	8006688 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6852      	ldr	r2, [r2, #4]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	4611      	mov	r1, r2
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006684:	2303      	movs	r3, #3
 8006686:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fbf5 	bl	8007e7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2240      	movs	r2, #64	; 0x40
 80066a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066a4:	2340      	movs	r3, #64	; 0x40
 80066a6:	2200      	movs	r2, #0
 80066a8:	2180      	movs	r1, #128	; 0x80
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fbe7 	bl	8007e7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2240      	movs	r2, #64	; 0x40
 80066ba:	621a      	str	r2, [r3, #32]

  return ret;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	78fa      	ldrb	r2, [r7, #3]
 80066d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2204      	movs	r2, #4
 8006700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b04      	cmp	r3, #4
 8006724:	d106      	bne.n	8006734 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800672c:	b2da      	uxtb	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b03      	cmp	r3, #3
 8006754:	d110      	bne.n	8006778 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	32ae      	adds	r2, #174	; 0xae
 8006798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e01c      	b.n	80067de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d115      	bne.n	80067dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	32ae      	adds	r2, #174	; 0xae
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	32ae      	adds	r2, #174	; 0xae
 80067ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	4611      	mov	r1, r2
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	32ae      	adds	r2, #174	; 0xae
 80067fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006804:	2303      	movs	r3, #3
 8006806:	e01c      	b.n	8006842 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b03      	cmp	r3, #3
 8006812:	d115      	bne.n	8006840 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	32ae      	adds	r2, #174	; 0xae
 800681e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	32ae      	adds	r2, #174	; 0xae
 8006832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	4611      	mov	r1, r2
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6852      	ldr	r2, [r2, #4]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	4611      	mov	r1, r2
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006898:	2303      	movs	r3, #3
 800689a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b086      	sub	sp, #24
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	460b      	mov	r3, r1
 80068e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	885b      	ldrh	r3, [r3, #2]
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	429a      	cmp	r2, r3
 8006900:	d920      	bls.n	8006944 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800690a:	e013      	b.n	8006934 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800690c:	f107 030a 	add.w	r3, r7, #10
 8006910:	4619      	mov	r1, r3
 8006912:	6978      	ldr	r0, [r7, #20]
 8006914:	f000 f81b 	bl	800694e <USBD_GetNextDesc>
 8006918:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	2b05      	cmp	r3, #5
 8006920:	d108      	bne.n	8006934 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	789b      	ldrb	r3, [r3, #2]
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	429a      	cmp	r2, r3
 800692e:	d008      	beq.n	8006942 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	885b      	ldrh	r3, [r3, #2]
 8006938:	b29a      	uxth	r2, r3
 800693a:	897b      	ldrh	r3, [r7, #10]
 800693c:	429a      	cmp	r2, r3
 800693e:	d8e5      	bhi.n	800690c <USBD_GetEpDesc+0x32>
 8006940:	e000      	b.n	8006944 <USBD_GetEpDesc+0x6a>
          break;
 8006942:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006944:	693b      	ldr	r3, [r7, #16]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	4413      	add	r3, r2
 8006968:	b29a      	uxth	r2, r3
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4413      	add	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800697a:	68fb      	ldr	r3, [r7, #12]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	3301      	adds	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069a6:	8a3b      	ldrh	r3, [r7, #16]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	b21a      	sxth	r2, r3
 80069ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069b6:	89fb      	ldrh	r3, [r7, #14]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d005      	beq.n	80069ea <USBD_StdDevReq+0x26>
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d857      	bhi.n	8006a92 <USBD_StdDevReq+0xce>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00f      	beq.n	8006a06 <USBD_StdDevReq+0x42>
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d153      	bne.n	8006a92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	32ae      	adds	r2, #174	; 0xae
 80069f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
      break;
 8006a04:	e04a      	b.n	8006a9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b09      	cmp	r3, #9
 8006a0c:	d83b      	bhi.n	8006a86 <USBD_StdDevReq+0xc2>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <USBD_StdDevReq+0x50>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a69 	.word	0x08006a69
 8006a18:	08006a7d 	.word	0x08006a7d
 8006a1c:	08006a87 	.word	0x08006a87
 8006a20:	08006a73 	.word	0x08006a73
 8006a24:	08006a87 	.word	0x08006a87
 8006a28:	08006a47 	.word	0x08006a47
 8006a2c:	08006a3d 	.word	0x08006a3d
 8006a30:	08006a87 	.word	0x08006a87
 8006a34:	08006a5f 	.word	0x08006a5f
 8006a38:	08006a51 	.word	0x08006a51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa3c 	bl	8006ebc <USBD_GetDescriptor>
          break;
 8006a44:	e024      	b.n	8006a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fba1 	bl	8007190 <USBD_SetAddress>
          break;
 8006a4e:	e01f      	b.n	8006a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fbe0 	bl	8007218 <USBD_SetConfig>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a5c:	e018      	b.n	8006a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fc83 	bl	800736c <USBD_GetConfig>
          break;
 8006a66:	e013      	b.n	8006a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fcb4 	bl	80073d8 <USBD_GetStatus>
          break;
 8006a70:	e00e      	b.n	8006a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fce3 	bl	8007440 <USBD_SetFeature>
          break;
 8006a7a:	e009      	b.n	8006a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fd07 	bl	8007492 <USBD_ClrFeature>
          break;
 8006a84:	e004      	b.n	8006a90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fd5e 	bl	800754a <USBD_CtlError>
          break;
 8006a8e:	bf00      	nop
      }
      break;
 8006a90:	e004      	b.n	8006a9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fd58 	bl	800754a <USBD_CtlError>
      break;
 8006a9a:	bf00      	nop
  }

  return ret;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop

08006aa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d005      	beq.n	8006ace <USBD_StdItfReq+0x26>
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d852      	bhi.n	8006b6c <USBD_StdItfReq+0xc4>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <USBD_StdItfReq+0x26>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d14e      	bne.n	8006b6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d840      	bhi.n	8006b5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	889b      	ldrh	r3, [r3, #4]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d836      	bhi.n	8006b54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	889b      	ldrh	r3, [r3, #4]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fed9 	bl	80068a6 <USBD_CoreFindIF>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	2bff      	cmp	r3, #255	; 0xff
 8006afc:	d01d      	beq.n	8006b3a <USBD_StdItfReq+0x92>
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d11a      	bne.n	8006b3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b04:	7bba      	ldrb	r2, [r7, #14]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	32ae      	adds	r2, #174	; 0xae
 8006b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00f      	beq.n	8006b34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b14:	7bba      	ldrb	r2, [r7, #14]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b1c:	7bba      	ldrb	r2, [r7, #14]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	32ae      	adds	r2, #174	; 0xae
 8006b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b32:	e004      	b.n	8006b3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b34:	2303      	movs	r3, #3
 8006b36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b38:	e001      	b.n	8006b3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	88db      	ldrh	r3, [r3, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d110      	bne.n	8006b68 <USBD_StdItfReq+0xc0>
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10d      	bne.n	8006b68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fdc7 	bl	80076e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b52:	e009      	b.n	8006b68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fcf7 	bl	800754a <USBD_CtlError>
          break;
 8006b5c:	e004      	b.n	8006b68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fcf2 	bl	800754a <USBD_CtlError>
          break;
 8006b66:	e000      	b.n	8006b6a <USBD_StdItfReq+0xc2>
          break;
 8006b68:	bf00      	nop
      }
      break;
 8006b6a:	e004      	b.n	8006b76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fceb 	bl	800754a <USBD_CtlError>
      break;
 8006b74:	bf00      	nop
  }

  return ret;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	889b      	ldrh	r3, [r3, #4]
 8006b92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b9c:	2b40      	cmp	r3, #64	; 0x40
 8006b9e:	d007      	beq.n	8006bb0 <USBD_StdEPReq+0x30>
 8006ba0:	2b40      	cmp	r3, #64	; 0x40
 8006ba2:	f200 817f 	bhi.w	8006ea4 <USBD_StdEPReq+0x324>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d02a      	beq.n	8006c00 <USBD_StdEPReq+0x80>
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	f040 817a 	bne.w	8006ea4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff fe83 	bl	80068c0 <USBD_CoreFindEP>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bbe:	7b7b      	ldrb	r3, [r7, #13]
 8006bc0:	2bff      	cmp	r3, #255	; 0xff
 8006bc2:	f000 8174 	beq.w	8006eae <USBD_StdEPReq+0x32e>
 8006bc6:	7b7b      	ldrb	r3, [r7, #13]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f040 8170 	bne.w	8006eae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006bce:	7b7a      	ldrb	r2, [r7, #13]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006bd6:	7b7a      	ldrb	r2, [r7, #13]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	32ae      	adds	r2, #174	; 0xae
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8163 	beq.w	8006eae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006be8:	7b7a      	ldrb	r2, [r7, #13]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	32ae      	adds	r2, #174	; 0xae
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bfe:	e156      	b.n	8006eae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d008      	beq.n	8006c1a <USBD_StdEPReq+0x9a>
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	f300 8145 	bgt.w	8006e98 <USBD_StdEPReq+0x318>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 809b 	beq.w	8006d4a <USBD_StdEPReq+0x1ca>
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d03c      	beq.n	8006c92 <USBD_StdEPReq+0x112>
 8006c18:	e13e      	b.n	8006e98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d002      	beq.n	8006c2c <USBD_StdEPReq+0xac>
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d016      	beq.n	8006c58 <USBD_StdEPReq+0xd8>
 8006c2a:	e02c      	b.n	8006c86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00d      	beq.n	8006c4e <USBD_StdEPReq+0xce>
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b80      	cmp	r3, #128	; 0x80
 8006c36:	d00a      	beq.n	8006c4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 f963 	bl	8007f08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c42:	2180      	movs	r1, #128	; 0x80
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f95f 	bl	8007f08 <USBD_LL_StallEP>
 8006c4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c4c:	e020      	b.n	8006c90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fc7a 	bl	800754a <USBD_CtlError>
              break;
 8006c56:	e01b      	b.n	8006c90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	885b      	ldrh	r3, [r3, #2]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10e      	bne.n	8006c7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <USBD_StdEPReq+0xfe>
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	2b80      	cmp	r3, #128	; 0x80
 8006c6a:	d008      	beq.n	8006c7e <USBD_StdEPReq+0xfe>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	88db      	ldrh	r3, [r3, #6]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f945 	bl	8007f08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fd2e 	bl	80076e0 <USBD_CtlSendStatus>

              break;
 8006c84:	e004      	b.n	8006c90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fc5e 	bl	800754a <USBD_CtlError>
              break;
 8006c8e:	bf00      	nop
          }
          break;
 8006c90:	e107      	b.n	8006ea2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d002      	beq.n	8006ca4 <USBD_StdEPReq+0x124>
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d016      	beq.n	8006cd0 <USBD_StdEPReq+0x150>
 8006ca2:	e04b      	b.n	8006d3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00d      	beq.n	8006cc6 <USBD_StdEPReq+0x146>
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	2b80      	cmp	r3, #128	; 0x80
 8006cae:	d00a      	beq.n	8006cc6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 f927 	bl	8007f08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cba:	2180      	movs	r1, #128	; 0x80
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 f923 	bl	8007f08 <USBD_LL_StallEP>
 8006cc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cc4:	e040      	b.n	8006d48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc3e 	bl	800754a <USBD_CtlError>
              break;
 8006cce:	e03b      	b.n	8006d48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	885b      	ldrh	r3, [r3, #2]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d136      	bne.n	8006d46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f92d 	bl	8007f46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fcf7 	bl	80076e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fde2 	bl	80068c0 <USBD_CoreFindEP>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d00:	7b7b      	ldrb	r3, [r7, #13]
 8006d02:	2bff      	cmp	r3, #255	; 0xff
 8006d04:	d01f      	beq.n	8006d46 <USBD_StdEPReq+0x1c6>
 8006d06:	7b7b      	ldrb	r3, [r7, #13]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d11c      	bne.n	8006d46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d0c:	7b7a      	ldrb	r2, [r7, #13]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d14:	7b7a      	ldrb	r2, [r7, #13]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32ae      	adds	r2, #174	; 0xae
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d010      	beq.n	8006d46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d24:	7b7a      	ldrb	r2, [r7, #13]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32ae      	adds	r2, #174	; 0xae
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4798      	blx	r3
 8006d36:	4603      	mov	r3, r0
 8006d38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d3a:	e004      	b.n	8006d46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fc03 	bl	800754a <USBD_CtlError>
              break;
 8006d44:	e000      	b.n	8006d48 <USBD_StdEPReq+0x1c8>
              break;
 8006d46:	bf00      	nop
          }
          break;
 8006d48:	e0ab      	b.n	8006ea2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d002      	beq.n	8006d5c <USBD_StdEPReq+0x1dc>
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d032      	beq.n	8006dc0 <USBD_StdEPReq+0x240>
 8006d5a:	e097      	b.n	8006e8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <USBD_StdEPReq+0x1f2>
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d004      	beq.n	8006d72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fbed 	bl	800754a <USBD_CtlError>
                break;
 8006d70:	e091      	b.n	8006e96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da0b      	bge.n	8006d92 <USBD_StdEPReq+0x212>
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	3310      	adds	r3, #16
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3304      	adds	r3, #4
 8006d90:	e00b      	b.n	8006daa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	3304      	adds	r3, #4
 8006daa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2202      	movs	r2, #2
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fc37 	bl	800762c <USBD_CtlSendData>
              break;
 8006dbe:	e06a      	b.n	8006e96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da11      	bge.n	8006dec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 020f 	and.w	r2, r3, #15
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	3324      	adds	r3, #36	; 0x24
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d117      	bne.n	8006e12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fbb0 	bl	800754a <USBD_CtlError>
                  break;
 8006dea:	e054      	b.n	8006e96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d104      	bne.n	8006e12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fb9d 	bl	800754a <USBD_CtlError>
                  break;
 8006e10:	e041      	b.n	8006e96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da0b      	bge.n	8006e32 <USBD_StdEPReq+0x2b2>
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	3310      	adds	r3, #16
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3304      	adds	r3, #4
 8006e30:	e00b      	b.n	8006e4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	4413      	add	r3, r2
 8006e48:	3304      	adds	r3, #4
 8006e4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <USBD_StdEPReq+0x2d8>
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b80      	cmp	r3, #128	; 0x80
 8006e56:	d103      	bne.n	8006e60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e00e      	b.n	8006e7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f88d 	bl	8007f84 <USBD_LL_IsStallEP>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e002      	b.n	8006e7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2202      	movs	r2, #2
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fbd1 	bl	800762c <USBD_CtlSendData>
              break;
 8006e8a:	e004      	b.n	8006e96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb5b 	bl	800754a <USBD_CtlError>
              break;
 8006e94:	bf00      	nop
          }
          break;
 8006e96:	e004      	b.n	8006ea2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fb55 	bl	800754a <USBD_CtlError>
          break;
 8006ea0:	bf00      	nop
      }
      break;
 8006ea2:	e005      	b.n	8006eb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fb4f 	bl	800754a <USBD_CtlError>
      break;
 8006eac:	e000      	b.n	8006eb0 <USBD_StdEPReq+0x330>
      break;
 8006eae:	bf00      	nop
  }

  return ret;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	885b      	ldrh	r3, [r3, #2]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	2b06      	cmp	r3, #6
 8006ede:	f200 8128 	bhi.w	8007132 <USBD_GetDescriptor+0x276>
 8006ee2:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <USBD_GetDescriptor+0x2c>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	08006f1d 	.word	0x08006f1d
 8006ef0:	08006f5d 	.word	0x08006f5d
 8006ef4:	08007133 	.word	0x08007133
 8006ef8:	08007133 	.word	0x08007133
 8006efc:	080070d3 	.word	0x080070d3
 8006f00:	080070ff 	.word	0x080070ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7c12      	ldrb	r2, [r2, #16]
 8006f10:	f107 0108 	add.w	r1, r7, #8
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	60f8      	str	r0, [r7, #12]
      break;
 8006f1a:	e112      	b.n	8007142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	7c1b      	ldrb	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10d      	bne.n	8006f40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	f107 0208 	add.w	r2, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f3e:	e100      	b.n	8007142 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	f107 0208 	add.w	r2, r7, #8
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
 8006f50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	2202      	movs	r2, #2
 8006f58:	701a      	strb	r2, [r3, #0]
      break;
 8006f5a:	e0f2      	b.n	8007142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	885b      	ldrh	r3, [r3, #2]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b05      	cmp	r3, #5
 8006f64:	f200 80ac 	bhi.w	80070c0 <USBD_GetDescriptor+0x204>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <USBD_GetDescriptor+0xb4>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f89 	.word	0x08006f89
 8006f74:	08006fbd 	.word	0x08006fbd
 8006f78:	08006ff1 	.word	0x08006ff1
 8006f7c:	08007025 	.word	0x08007025
 8006f80:	08007059 	.word	0x08007059
 8006f84:	0800708d 	.word	0x0800708d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7c12      	ldrb	r2, [r2, #16]
 8006fa0:	f107 0108 	add.w	r1, r7, #8
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4798      	blx	r3
 8006fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006faa:	e091      	b.n	80070d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 facb 	bl	800754a <USBD_CtlError>
            err++;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fba:	e089      	b.n	80070d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7c12      	ldrb	r2, [r2, #16]
 8006fd4:	f107 0108 	add.w	r1, r7, #8
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fde:	e077      	b.n	80070d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fab1 	bl	800754a <USBD_CtlError>
            err++;
 8006fe8:	7afb      	ldrb	r3, [r7, #11]
 8006fea:	3301      	adds	r3, #1
 8006fec:	72fb      	strb	r3, [r7, #11]
          break;
 8006fee:	e06f      	b.n	80070d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	7c12      	ldrb	r2, [r2, #16]
 8007008:	f107 0108 	add.w	r1, r7, #8
 800700c:	4610      	mov	r0, r2
 800700e:	4798      	blx	r3
 8007010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007012:	e05d      	b.n	80070d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa97 	bl	800754a <USBD_CtlError>
            err++;
 800701c:	7afb      	ldrb	r3, [r7, #11]
 800701e:	3301      	adds	r3, #1
 8007020:	72fb      	strb	r3, [r7, #11]
          break;
 8007022:	e055      	b.n	80070d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	7c12      	ldrb	r2, [r2, #16]
 800703c:	f107 0108 	add.w	r1, r7, #8
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
 8007044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007046:	e043      	b.n	80070d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fa7d 	bl	800754a <USBD_CtlError>
            err++;
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	3301      	adds	r3, #1
 8007054:	72fb      	strb	r3, [r7, #11]
          break;
 8007056:	e03b      	b.n	80070d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	7c12      	ldrb	r2, [r2, #16]
 8007070:	f107 0108 	add.w	r1, r7, #8
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800707a:	e029      	b.n	80070d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa63 	bl	800754a <USBD_CtlError>
            err++;
 8007084:	7afb      	ldrb	r3, [r7, #11]
 8007086:	3301      	adds	r3, #1
 8007088:	72fb      	strb	r3, [r7, #11]
          break;
 800708a:	e021      	b.n	80070d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	7c12      	ldrb	r2, [r2, #16]
 80070a4:	f107 0108 	add.w	r1, r7, #8
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
 80070ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ae:	e00f      	b.n	80070d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa49 	bl	800754a <USBD_CtlError>
            err++;
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	3301      	adds	r3, #1
 80070bc:	72fb      	strb	r3, [r7, #11]
          break;
 80070be:	e007      	b.n	80070d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa41 	bl	800754a <USBD_CtlError>
          err++;
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	3301      	adds	r3, #1
 80070cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070ce:	bf00      	nop
      }
      break;
 80070d0:	e037      	b.n	8007142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	7c1b      	ldrb	r3, [r3, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d109      	bne.n	80070ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	f107 0208 	add.w	r2, r7, #8
 80070e6:	4610      	mov	r0, r2
 80070e8:	4798      	blx	r3
 80070ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ec:	e029      	b.n	8007142 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa2a 	bl	800754a <USBD_CtlError>
        err++;
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	3301      	adds	r3, #1
 80070fa:	72fb      	strb	r3, [r7, #11]
      break;
 80070fc:	e021      	b.n	8007142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7c1b      	ldrb	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10d      	bne.n	8007122 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	f107 0208 	add.w	r2, r7, #8
 8007112:	4610      	mov	r0, r2
 8007114:	4798      	blx	r3
 8007116:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	2207      	movs	r2, #7
 800711e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007120:	e00f      	b.n	8007142 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fa10 	bl	800754a <USBD_CtlError>
        err++;
 800712a:	7afb      	ldrb	r3, [r7, #11]
 800712c:	3301      	adds	r3, #1
 800712e:	72fb      	strb	r3, [r7, #11]
      break;
 8007130:	e007      	b.n	8007142 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fa08 	bl	800754a <USBD_CtlError>
      err++;
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	3301      	adds	r3, #1
 800713e:	72fb      	strb	r3, [r7, #11]
      break;
 8007140:	bf00      	nop
  }

  if (err != 0U)
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d11e      	bne.n	8007186 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	88db      	ldrh	r3, [r3, #6]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d016      	beq.n	800717e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007150:	893b      	ldrh	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00e      	beq.n	8007174 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	88da      	ldrh	r2, [r3, #6]
 800715a:	893b      	ldrh	r3, [r7, #8]
 800715c:	4293      	cmp	r3, r2
 800715e:	bf28      	it	cs
 8007160:	4613      	movcs	r3, r2
 8007162:	b29b      	uxth	r3, r3
 8007164:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007166:	893b      	ldrh	r3, [r7, #8]
 8007168:	461a      	mov	r2, r3
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fa5d 	bl	800762c <USBD_CtlSendData>
 8007172:	e009      	b.n	8007188 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f9e7 	bl	800754a <USBD_CtlError>
 800717c:	e004      	b.n	8007188 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 faae 	bl	80076e0 <USBD_CtlSendStatus>
 8007184:	e000      	b.n	8007188 <USBD_GetDescriptor+0x2cc>
    return;
 8007186:	bf00      	nop
  }
}
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop

08007190 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	889b      	ldrh	r3, [r3, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d131      	bne.n	8007206 <USBD_SetAddress+0x76>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	88db      	ldrh	r3, [r3, #6]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d12d      	bne.n	8007206 <USBD_SetAddress+0x76>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	885b      	ldrh	r3, [r3, #2]
 80071ae:	2b7f      	cmp	r3, #127	; 0x7f
 80071b0:	d829      	bhi.n	8007206 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	885b      	ldrh	r3, [r3, #2]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d104      	bne.n	80071d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f9bc 	bl	800754a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d2:	e01d      	b.n	8007210 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	7bfa      	ldrb	r2, [r7, #15]
 80071d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fefb 	bl	8007fdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa7a 	bl	80076e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d004      	beq.n	80071fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fa:	e009      	b.n	8007210 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007204:	e004      	b.n	8007210 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f99e 	bl	800754a <USBD_CtlError>
  }
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	885b      	ldrh	r3, [r3, #2]
 800722a:	b2da      	uxtb	r2, r3
 800722c:	4b4e      	ldr	r3, [pc, #312]	; (8007368 <USBD_SetConfig+0x150>)
 800722e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007230:	4b4d      	ldr	r3, [pc, #308]	; (8007368 <USBD_SetConfig+0x150>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d905      	bls.n	8007244 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f985 	bl	800754a <USBD_CtlError>
    return USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	e08c      	b.n	800735e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d002      	beq.n	8007256 <USBD_SetConfig+0x3e>
 8007250:	2b03      	cmp	r3, #3
 8007252:	d029      	beq.n	80072a8 <USBD_SetConfig+0x90>
 8007254:	e075      	b.n	8007342 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007256:	4b44      	ldr	r3, [pc, #272]	; (8007368 <USBD_SetConfig+0x150>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d020      	beq.n	80072a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800725e:	4b42      	ldr	r3, [pc, #264]	; (8007368 <USBD_SetConfig+0x150>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007268:	4b3f      	ldr	r3, [pc, #252]	; (8007368 <USBD_SetConfig+0x150>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7fe ffe7 	bl	8006242 <USBD_SetClassConfig>
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d008      	beq.n	8007290 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f962 	bl	800754a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800728e:	e065      	b.n	800735c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa25 	bl	80076e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2203      	movs	r2, #3
 800729a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800729e:	e05d      	b.n	800735c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fa1d 	bl	80076e0 <USBD_CtlSendStatus>
      break;
 80072a6:	e059      	b.n	800735c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072a8:	4b2f      	ldr	r3, [pc, #188]	; (8007368 <USBD_SetConfig+0x150>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d112      	bne.n	80072d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072b8:	4b2b      	ldr	r3, [pc, #172]	; (8007368 <USBD_SetConfig+0x150>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072c2:	4b29      	ldr	r3, [pc, #164]	; (8007368 <USBD_SetConfig+0x150>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fe ffd6 	bl	800627a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa06 	bl	80076e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072d4:	e042      	b.n	800735c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80072d6:	4b24      	ldr	r3, [pc, #144]	; (8007368 <USBD_SetConfig+0x150>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d02a      	beq.n	800733a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7fe ffc4 	bl	800627a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072f2:	4b1d      	ldr	r3, [pc, #116]	; (8007368 <USBD_SetConfig+0x150>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072fc:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <USBD_SetConfig+0x150>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fe ff9d 	bl	8006242 <USBD_SetClassConfig>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00f      	beq.n	8007332 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f918 	bl	800754a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fe ffa9 	bl	800627a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007330:	e014      	b.n	800735c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9d4 	bl	80076e0 <USBD_CtlSendStatus>
      break;
 8007338:	e010      	b.n	800735c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9d0 	bl	80076e0 <USBD_CtlSendStatus>
      break;
 8007340:	e00c      	b.n	800735c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f900 	bl	800754a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <USBD_SetConfig+0x150>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7fe ff92 	bl	800627a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007356:	2303      	movs	r3, #3
 8007358:	73fb      	strb	r3, [r7, #15]
      break;
 800735a:	bf00      	nop
  }

  return ret;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000218 	.word	0x20000218

0800736c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	88db      	ldrh	r3, [r3, #6]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d004      	beq.n	8007388 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f8e2 	bl	800754a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007386:	e023      	b.n	80073d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	dc02      	bgt.n	800739a <USBD_GetConfig+0x2e>
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc03      	bgt.n	80073a0 <USBD_GetConfig+0x34>
 8007398:	e015      	b.n	80073c6 <USBD_GetConfig+0x5a>
 800739a:	2b03      	cmp	r3, #3
 800739c:	d00b      	beq.n	80073b6 <USBD_GetConfig+0x4a>
 800739e:	e012      	b.n	80073c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3308      	adds	r3, #8
 80073aa:	2201      	movs	r2, #1
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f93c 	bl	800762c <USBD_CtlSendData>
        break;
 80073b4:	e00c      	b.n	80073d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3304      	adds	r3, #4
 80073ba:	2201      	movs	r2, #1
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f934 	bl	800762c <USBD_CtlSendData>
        break;
 80073c4:	e004      	b.n	80073d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f8be 	bl	800754a <USBD_CtlError>
        break;
 80073ce:	bf00      	nop
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d81e      	bhi.n	800742e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	88db      	ldrh	r3, [r3, #6]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d004      	beq.n	8007402 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f8a5 	bl	800754a <USBD_CtlError>
        break;
 8007400:	e01a      	b.n	8007438 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f043 0202 	orr.w	r2, r3, #2
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	330c      	adds	r3, #12
 8007422:	2202      	movs	r2, #2
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f900 	bl	800762c <USBD_CtlSendData>
      break;
 800742c:	e004      	b.n	8007438 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f88a 	bl	800754a <USBD_CtlError>
      break;
 8007436:	bf00      	nop
  }
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	885b      	ldrh	r3, [r3, #2]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d107      	bne.n	8007462 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f940 	bl	80076e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007460:	e013      	b.n	800748a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	885b      	ldrh	r3, [r3, #2]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d10b      	bne.n	8007482 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	889b      	ldrh	r3, [r3, #4]
 800746e:	0a1b      	lsrs	r3, r3, #8
 8007470:	b29b      	uxth	r3, r3
 8007472:	b2da      	uxtb	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f930 	bl	80076e0 <USBD_CtlSendStatus>
}
 8007480:	e003      	b.n	800748a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f860 	bl	800754a <USBD_CtlError>
}
 800748a:	bf00      	nop
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d80b      	bhi.n	80074c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	885b      	ldrh	r3, [r3, #2]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d10c      	bne.n	80074cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f910 	bl	80076e0 <USBD_CtlSendStatus>
      }
      break;
 80074c0:	e004      	b.n	80074cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f840 	bl	800754a <USBD_CtlError>
      break;
 80074ca:	e000      	b.n	80074ce <USBD_ClrFeature+0x3c>
      break;
 80074cc:	bf00      	nop
  }
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	781a      	ldrb	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	781a      	ldrb	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7ff fa41 	bl	8006988 <SWAPBYTE>
 8007506:	4603      	mov	r3, r0
 8007508:	461a      	mov	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3301      	adds	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff fa34 	bl	8006988 <SWAPBYTE>
 8007520:	4603      	mov	r3, r0
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3301      	adds	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fa27 	bl	8006988 <SWAPBYTE>
 800753a:	4603      	mov	r3, r0
 800753c:	461a      	mov	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	80da      	strh	r2, [r3, #6]
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007554:	2180      	movs	r1, #128	; 0x80
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fcd6 	bl	8007f08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fcd2 	bl	8007f08 <USBD_LL_StallEP>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d036      	beq.n	80075f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007586:	6938      	ldr	r0, [r7, #16]
 8007588:	f000 f836 	bl	80075f8 <USBD_GetLen>
 800758c:	4603      	mov	r3, r0
 800758e:	3301      	adds	r3, #1
 8007590:	b29b      	uxth	r3, r3
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4413      	add	r3, r2
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	3301      	adds	r3, #1
 80075aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	2203      	movs	r2, #3
 80075b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	3301      	adds	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075bc:	e013      	b.n	80075e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	4413      	add	r3, r2
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	7812      	ldrb	r2, [r2, #0]
 80075c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	3301      	adds	r3, #1
 80075ce:	613b      	str	r3, [r7, #16]
    idx++;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	3301      	adds	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	4413      	add	r3, r2
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]
    idx++;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	3301      	adds	r3, #1
 80075e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e7      	bne.n	80075be <USBD_GetString+0x52>
 80075ee:	e000      	b.n	80075f2 <USBD_GetString+0x86>
    return;
 80075f0:	bf00      	nop
  }
}
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007608:	e005      	b.n	8007616 <USBD_GetLen+0x1e>
  {
    len++;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	3301      	adds	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3301      	adds	r3, #1
 8007614:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f5      	bne.n	800760a <USBD_GetLen+0x12>
  }

  return len;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2202      	movs	r2, #2
 800763c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	2100      	movs	r1, #0
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fce1 	bl	800801a <USBD_LL_Transmit>

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	2100      	movs	r1, #0
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fcd0 	bl	800801a <USBD_LL_Transmit>

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2203      	movs	r2, #3
 8007694:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	2100      	movs	r1, #0
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fcd4 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	2100      	movs	r1, #0
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 fcc3 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2204      	movs	r2, #4
 80076ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076f0:	2300      	movs	r3, #0
 80076f2:	2200      	movs	r2, #0
 80076f4:	2100      	movs	r1, #0
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc8f 	bl	800801a <USBD_LL_Transmit>

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2205      	movs	r2, #5
 8007712:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007716:	2300      	movs	r3, #0
 8007718:	2200      	movs	r2, #0
 800771a:	2100      	movs	r1, #0
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fc9d 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007730:	2200      	movs	r2, #0
 8007732:	4912      	ldr	r1, [pc, #72]	; (800777c <MX_USB_DEVICE_Init+0x50>)
 8007734:	4812      	ldr	r0, [pc, #72]	; (8007780 <MX_USB_DEVICE_Init+0x54>)
 8007736:	f7fe fd07 	bl	8006148 <USBD_Init>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007740:	f7f8 ffee 	bl	8000720 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007744:	490f      	ldr	r1, [pc, #60]	; (8007784 <MX_USB_DEVICE_Init+0x58>)
 8007746:	480e      	ldr	r0, [pc, #56]	; (8007780 <MX_USB_DEVICE_Init+0x54>)
 8007748:	f7fe fd2e 	bl	80061a8 <USBD_RegisterClass>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007752:	f7f8 ffe5 	bl	8000720 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007756:	490c      	ldr	r1, [pc, #48]	; (8007788 <MX_USB_DEVICE_Init+0x5c>)
 8007758:	4809      	ldr	r0, [pc, #36]	; (8007780 <MX_USB_DEVICE_Init+0x54>)
 800775a:	f7fe fc1f 	bl	8005f9c <USBD_CDC_RegisterInterface>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007764:	f7f8 ffdc 	bl	8000720 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007768:	4805      	ldr	r0, [pc, #20]	; (8007780 <MX_USB_DEVICE_Init+0x54>)
 800776a:	f7fe fd53 	bl	8006214 <USBD_Start>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007774:	f7f8 ffd4 	bl	8000720 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007778:	bf00      	nop
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200000ac 	.word	0x200000ac
 8007780:	2000021c 	.word	0x2000021c
 8007784:	20000018 	.word	0x20000018
 8007788:	20000098 	.word	0x20000098

0800778c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007790:	2200      	movs	r2, #0
 8007792:	4905      	ldr	r1, [pc, #20]	; (80077a8 <CDC_Init_FS+0x1c>)
 8007794:	4805      	ldr	r0, [pc, #20]	; (80077ac <CDC_Init_FS+0x20>)
 8007796:	f7fe fc1b 	bl	8005fd0 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800779a:	4905      	ldr	r1, [pc, #20]	; (80077b0 <CDC_Init_FS+0x24>)
 800779c:	4803      	ldr	r0, [pc, #12]	; (80077ac <CDC_Init_FS+0x20>)
 800779e:	f7fe fc39 	bl	8006014 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80077a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	200008f8 	.word	0x200008f8
 80077ac:	2000021c 	.word	0x2000021c
 80077b0:	200004f8 	.word	0x200004f8

080077b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 80077b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	6039      	str	r1, [r7, #0]
 80077ce:	71fb      	strb	r3, [r7, #7]
 80077d0:	4613      	mov	r3, r2
 80077d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	2b23      	cmp	r3, #35	; 0x23
 80077d8:	d84a      	bhi.n	8007870 <CDC_Control_FS+0xac>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <CDC_Control_FS+0x1c>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	08007871 	.word	0x08007871
 80077e4:	08007871 	.word	0x08007871
 80077e8:	08007871 	.word	0x08007871
 80077ec:	08007871 	.word	0x08007871
 80077f0:	08007871 	.word	0x08007871
 80077f4:	08007871 	.word	0x08007871
 80077f8:	08007871 	.word	0x08007871
 80077fc:	08007871 	.word	0x08007871
 8007800:	08007871 	.word	0x08007871
 8007804:	08007871 	.word	0x08007871
 8007808:	08007871 	.word	0x08007871
 800780c:	08007871 	.word	0x08007871
 8007810:	08007871 	.word	0x08007871
 8007814:	08007871 	.word	0x08007871
 8007818:	08007871 	.word	0x08007871
 800781c:	08007871 	.word	0x08007871
 8007820:	08007871 	.word	0x08007871
 8007824:	08007871 	.word	0x08007871
 8007828:	08007871 	.word	0x08007871
 800782c:	08007871 	.word	0x08007871
 8007830:	08007871 	.word	0x08007871
 8007834:	08007871 	.word	0x08007871
 8007838:	08007871 	.word	0x08007871
 800783c:	08007871 	.word	0x08007871
 8007840:	08007871 	.word	0x08007871
 8007844:	08007871 	.word	0x08007871
 8007848:	08007871 	.word	0x08007871
 800784c:	08007871 	.word	0x08007871
 8007850:	08007871 	.word	0x08007871
 8007854:	08007871 	.word	0x08007871
 8007858:	08007871 	.word	0x08007871
 800785c:	08007871 	.word	0x08007871
 8007860:	08007871 	.word	0x08007871
 8007864:	08007871 	.word	0x08007871
 8007868:	08007871 	.word	0x08007871
 800786c:	08007871 	.word	0x08007871
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8007870:	bf00      	nop
    }

    return (USBD_OK);
 8007872:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007874:	4618      	mov	r0, r3
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4805      	ldr	r0, [pc, #20]	; (80078a4 <CDC_Receive_FS+0x24>)
 800788e:	f7fe fbc1 	bl	8006014 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007892:	4804      	ldr	r0, [pc, #16]	; (80078a4 <CDC_Receive_FS+0x24>)
 8007894:	f7fe fc22 	bl	80060dc <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8007898:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	2000021c 	.word	0x2000021c

080078a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80078b8:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <CDC_Transmit_FS+0x48>)
 80078ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078be:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e00b      	b.n	80078e6 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078ce:	887b      	ldrh	r3, [r7, #2]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4806      	ldr	r0, [pc, #24]	; (80078f0 <CDC_Transmit_FS+0x48>)
 80078d6:	f7fe fb7b 	bl	8005fd0 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078da:	4805      	ldr	r0, [pc, #20]	; (80078f0 <CDC_Transmit_FS+0x48>)
 80078dc:	f7fe fbb8 	bl	8006050 <USBD_CDC_TransmitPacket>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	2000021c 	.word	0x2000021c

080078f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	4613      	mov	r3, r2
 8007900:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800790a:	4618      	mov	r0, r3
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2212      	movs	r2, #18
 8007928:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800792a:	4b03      	ldr	r3, [pc, #12]	; (8007938 <USBD_FS_DeviceDescriptor+0x20>)
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	200000c8 	.word	0x200000c8

0800793c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2204      	movs	r2, #4
 800794c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800794e:	4b03      	ldr	r3, [pc, #12]	; (800795c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	200000dc 	.word	0x200000dc

08007960 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	6039      	str	r1, [r7, #0]
 800796a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d105      	bne.n	800797e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	4907      	ldr	r1, [pc, #28]	; (8007994 <USBD_FS_ProductStrDescriptor+0x34>)
 8007976:	4808      	ldr	r0, [pc, #32]	; (8007998 <USBD_FS_ProductStrDescriptor+0x38>)
 8007978:	f7ff fdf8 	bl	800756c <USBD_GetString>
 800797c:	e004      	b.n	8007988 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4904      	ldr	r1, [pc, #16]	; (8007994 <USBD_FS_ProductStrDescriptor+0x34>)
 8007982:	4805      	ldr	r0, [pc, #20]	; (8007998 <USBD_FS_ProductStrDescriptor+0x38>)
 8007984:	f7ff fdf2 	bl	800756c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007988:	4b02      	ldr	r3, [pc, #8]	; (8007994 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000cf8 	.word	0x20000cf8
 8007998:	08008ad0 	.word	0x08008ad0

0800799c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	4904      	ldr	r1, [pc, #16]	; (80079bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079ac:	4804      	ldr	r0, [pc, #16]	; (80079c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079ae:	f7ff fddd 	bl	800756c <USBD_GetString>
  return USBD_StrDesc;
 80079b2:	4b02      	ldr	r3, [pc, #8]	; (80079bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20000cf8 	.word	0x20000cf8
 80079c0:	08008ae8 	.word	0x08008ae8

080079c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	6039      	str	r1, [r7, #0]
 80079ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	221a      	movs	r2, #26
 80079d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079d6:	f000 f843 	bl	8007a60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079da:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	200000e0 	.word	0x200000e0

080079e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	6039      	str	r1, [r7, #0]
 80079f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	4907      	ldr	r1, [pc, #28]	; (8007a1c <USBD_FS_ConfigStrDescriptor+0x34>)
 80079fe:	4808      	ldr	r0, [pc, #32]	; (8007a20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a00:	f7ff fdb4 	bl	800756c <USBD_GetString>
 8007a04:	e004      	b.n	8007a10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	4904      	ldr	r1, [pc, #16]	; (8007a1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a0a:	4805      	ldr	r0, [pc, #20]	; (8007a20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a0c:	f7ff fdae 	bl	800756c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a10:	4b02      	ldr	r3, [pc, #8]	; (8007a1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000cf8 	.word	0x20000cf8
 8007a20:	08008afc 	.word	0x08008afc

08007a24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	6039      	str	r1, [r7, #0]
 8007a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d105      	bne.n	8007a42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	4907      	ldr	r1, [pc, #28]	; (8007a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a3a:	4808      	ldr	r0, [pc, #32]	; (8007a5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a3c:	f7ff fd96 	bl	800756c <USBD_GetString>
 8007a40:	e004      	b.n	8007a4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	4904      	ldr	r1, [pc, #16]	; (8007a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a46:	4805      	ldr	r0, [pc, #20]	; (8007a5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a48:	f7ff fd90 	bl	800756c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a4c:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000cf8 	.word	0x20000cf8
 8007a5c:	08008b08 	.word	0x08008b08

08007a60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a66:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <Get_SerialNum+0x44>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a6c:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <Get_SerialNum+0x48>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a72:	4b0e      	ldr	r3, [pc, #56]	; (8007aac <Get_SerialNum+0x4c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a86:	2208      	movs	r2, #8
 8007a88:	4909      	ldr	r1, [pc, #36]	; (8007ab0 <Get_SerialNum+0x50>)
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f814 	bl	8007ab8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a90:	2204      	movs	r2, #4
 8007a92:	4908      	ldr	r1, [pc, #32]	; (8007ab4 <Get_SerialNum+0x54>)
 8007a94:	68b8      	ldr	r0, [r7, #8]
 8007a96:	f000 f80f 	bl	8007ab8 <IntToUnicode>
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	1fff7a10 	.word	0x1fff7a10
 8007aa8:	1fff7a14 	.word	0x1fff7a14
 8007aac:	1fff7a18 	.word	0x1fff7a18
 8007ab0:	200000e2 	.word	0x200000e2
 8007ab4:	200000f2 	.word	0x200000f2

08007ab8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	75fb      	strb	r3, [r7, #23]
 8007ace:	e027      	b.n	8007b20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	0f1b      	lsrs	r3, r3, #28
 8007ad4:	2b09      	cmp	r3, #9
 8007ad6:	d80b      	bhi.n	8007af0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	0f1b      	lsrs	r3, r3, #28
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	440b      	add	r3, r1
 8007ae8:	3230      	adds	r2, #48	; 0x30
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e00a      	b.n	8007b06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	0f1b      	lsrs	r3, r3, #28
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	4619      	mov	r1, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	440b      	add	r3, r1
 8007b00:	3237      	adds	r2, #55	; 0x37
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	3301      	adds	r3, #1
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	4413      	add	r3, r2
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
 8007b20:	7dfa      	ldrb	r2, [r7, #23]
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d3d3      	bcc.n	8007ad0 <IntToUnicode+0x18>
  }
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b40:	f107 0314 	add.w	r3, r7, #20
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	609a      	str	r2, [r3, #8]
 8007b4c:	60da      	str	r2, [r3, #12]
 8007b4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b58:	d13a      	bne.n	8007bd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <HAL_PCD_MspInit+0xa0>)
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	4a1d      	ldr	r2, [pc, #116]	; (8007bd8 <HAL_PCD_MspInit+0xa0>)
 8007b64:	f043 0301 	orr.w	r3, r3, #1
 8007b68:	6313      	str	r3, [r2, #48]	; 0x30
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <HAL_PCD_MspInit+0xa0>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b84:	2303      	movs	r3, #3
 8007b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b88:	230a      	movs	r3, #10
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	4619      	mov	r1, r3
 8007b92:	4812      	ldr	r0, [pc, #72]	; (8007bdc <HAL_PCD_MspInit+0xa4>)
 8007b94:	f7f9 fc1c 	bl	80013d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <HAL_PCD_MspInit+0xa0>)
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9c:	4a0e      	ldr	r2, [pc, #56]	; (8007bd8 <HAL_PCD_MspInit+0xa0>)
 8007b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba2:	6353      	str	r3, [r2, #52]	; 0x34
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <HAL_PCD_MspInit+0xa0>)
 8007baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bac:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <HAL_PCD_MspInit+0xa0>)
 8007bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8007bb4:	4b08      	ldr	r3, [pc, #32]	; (8007bd8 <HAL_PCD_MspInit+0xa0>)
 8007bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	2043      	movs	r0, #67	; 0x43
 8007bc6:	f7f9 f9e6 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bca:	2043      	movs	r0, #67	; 0x43
 8007bcc:	f7f9 f9ff 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	3728      	adds	r7, #40	; 0x28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	40020000 	.word	0x40020000

08007be0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	f7fe fb59 	bl	80062ae <USBD_LL_SetupStage>
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f7fe fb93 	bl	8006358 <USBD_LL_DataOutStage>
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c4c:	78fa      	ldrb	r2, [r7, #3]
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	334c      	adds	r3, #76	; 0x4c
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	4619      	mov	r1, r3
 8007c62:	f7fe fc2c 	bl	80064be <USBD_LL_DataInStage>
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe fd60 	bl	8006742 <USBD_LL_SOF>
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c92:	2301      	movs	r3, #1
 8007c94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d001      	beq.n	8007ca2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c9e:	f7f8 fd3f 	bl	8000720 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ca8:	7bfa      	ldrb	r2, [r7, #15]
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe fd0a 	bl	80066c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe fcb2 	bl	8006622 <USBD_LL_Reset>
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fd05 	bl	80066e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cee:	f043 0301 	orr.w	r3, r3, #1
 8007cf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cfc:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <HAL_PCD_SuspendCallback+0x48>)
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	4a03      	ldr	r2, [pc, #12]	; (8007d10 <HAL_PCD_SuspendCallback+0x48>)
 8007d02:	f043 0306 	orr.w	r3, r3, #6
 8007d06:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	e000ed00 	.word	0xe000ed00

08007d14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fcf5 	bl	8006712 <USBD_LL_Resume>
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fd4d 	bl	80067e6 <USBD_LL_IsoOUTIncomplete>
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fd09 	bl	8006782 <USBD_LL_IsoINIncomplete>
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fd5f 	bl	800684a <USBD_LL_DevConnected>
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fd5c 	bl	8006860 <USBD_LL_DevDisconnected>
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d13c      	bne.n	8007e3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007dc0:	4a20      	ldr	r2, [pc, #128]	; (8007e44 <USBD_LL_Init+0x94>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <USBD_LL_Init+0x94>)
 8007dcc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dd0:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <USBD_LL_Init+0x94>)
 8007dd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007dd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007dd8:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <USBD_LL_Init+0x94>)
 8007dda:	2204      	movs	r2, #4
 8007ddc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007dde:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <USBD_LL_Init+0x94>)
 8007de0:	2202      	movs	r2, #2
 8007de2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007de4:	4b17      	ldr	r3, [pc, #92]	; (8007e44 <USBD_LL_Init+0x94>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dea:	4b16      	ldr	r3, [pc, #88]	; (8007e44 <USBD_LL_Init+0x94>)
 8007dec:	2202      	movs	r2, #2
 8007dee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007df0:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <USBD_LL_Init+0x94>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007df6:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <USBD_LL_Init+0x94>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007dfc:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <USBD_LL_Init+0x94>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e02:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <USBD_LL_Init+0x94>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e08:	4b0e      	ldr	r3, [pc, #56]	; (8007e44 <USBD_LL_Init+0x94>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e0e:	480d      	ldr	r0, [pc, #52]	; (8007e44 <USBD_LL_Init+0x94>)
 8007e10:	f7f9 fc62 	bl	80016d8 <HAL_PCD_Init>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e1a:	f7f8 fc81 	bl	8000720 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e1e:	2180      	movs	r1, #128	; 0x80
 8007e20:	4808      	ldr	r0, [pc, #32]	; (8007e44 <USBD_LL_Init+0x94>)
 8007e22:	f7fa feba 	bl	8002b9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e26:	2240      	movs	r2, #64	; 0x40
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4806      	ldr	r0, [pc, #24]	; (8007e44 <USBD_LL_Init+0x94>)
 8007e2c:	f7fa fe6e 	bl	8002b0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e30:	2280      	movs	r2, #128	; 0x80
 8007e32:	2101      	movs	r1, #1
 8007e34:	4803      	ldr	r0, [pc, #12]	; (8007e44 <USBD_LL_Init+0x94>)
 8007e36:	f7fa fe69 	bl	8002b0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000ef8 	.word	0x20000ef8

08007e48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f9 fd57 	bl	8001912 <HAL_PCD_Start>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f942 	bl	80080f4 <USBD_Get_USB_Status>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	4608      	mov	r0, r1
 8007e88:	4611      	mov	r1, r2
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	70fb      	strb	r3, [r7, #3]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70bb      	strb	r3, [r7, #2]
 8007e94:	4613      	mov	r3, r2
 8007e96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ea6:	78bb      	ldrb	r3, [r7, #2]
 8007ea8:	883a      	ldrh	r2, [r7, #0]
 8007eaa:	78f9      	ldrb	r1, [r7, #3]
 8007eac:	f7fa fa28 	bl	8002300 <HAL_PCD_EP_Open>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f91c 	bl	80080f4 <USBD_Get_USB_Status>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ee4:	78fa      	ldrb	r2, [r7, #3]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fa fa71 	bl	80023d0 <HAL_PCD_EP_Close>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 f8fd 	bl	80080f4 <USBD_Get_USB_Status>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fa fb49 	bl	80025be <HAL_PCD_EP_SetStall>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f8de 	bl	80080f4 <USBD_Get_USB_Status>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fa fb8e 	bl	8002686 <HAL_PCD_EP_ClrStall>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f8bf 	bl	80080f4 <USBD_Get_USB_Status>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	da0b      	bge.n	8007fb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	333e      	adds	r3, #62	; 0x3e
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	e00b      	b.n	8007fd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007fce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fa f95b 	bl	80022b6 <HAL_PCD_SetAddress>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f874 	bl	80080f4 <USBD_Get_USB_Status>
 800800c:	4603      	mov	r3, r0
 800800e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008010:	7bbb      	ldrb	r3, [r7, #14]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b086      	sub	sp, #24
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	460b      	mov	r3, r1
 8008028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008038:	7af9      	ldrb	r1, [r7, #11]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	f7fa fa74 	bl	800252a <HAL_PCD_EP_Transmit>
 8008042:	4603      	mov	r3, r0
 8008044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	4618      	mov	r0, r3
 800804a:	f000 f853 	bl	80080f4 <USBD_Get_USB_Status>
 800804e:	4603      	mov	r3, r0
 8008050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008052:	7dbb      	ldrb	r3, [r7, #22]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	460b      	mov	r3, r1
 800806a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800807a:	7af9      	ldrb	r1, [r7, #11]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	f7fa f9f0 	bl	8002464 <HAL_PCD_EP_Receive>
 8008084:	4603      	mov	r3, r0
 8008086:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f832 	bl	80080f4 <USBD_Get_USB_Status>
 8008090:	4603      	mov	r3, r0
 8008092:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008094:	7dbb      	ldrb	r3, [r7, #22]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	460b      	mov	r3, r1
 80080a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080b0:	78fa      	ldrb	r2, [r7, #3]
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fa fa20 	bl	80024fa <HAL_PCD_EP_GetRxCount>
 80080ba:	4603      	mov	r3, r0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080cc:	4b03      	ldr	r3, [pc, #12]	; (80080dc <USBD_static_malloc+0x18>)
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20001404 	.word	0x20001404

080080e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]

}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	2b03      	cmp	r3, #3
 8008106:	d817      	bhi.n	8008138 <USBD_Get_USB_Status+0x44>
 8008108:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <USBD_Get_USB_Status+0x1c>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	08008121 	.word	0x08008121
 8008114:	08008127 	.word	0x08008127
 8008118:	0800812d 	.word	0x0800812d
 800811c:	08008133 	.word	0x08008133
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
    break;
 8008124:	e00b      	b.n	800813e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008126:	2303      	movs	r3, #3
 8008128:	73fb      	strb	r3, [r7, #15]
    break;
 800812a:	e008      	b.n	800813e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800812c:	2301      	movs	r3, #1
 800812e:	73fb      	strb	r3, [r7, #15]
    break;
 8008130:	e005      	b.n	800813e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	73fb      	strb	r3, [r7, #15]
    break;
 8008136:	e002      	b.n	800813e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008138:	2303      	movs	r3, #3
 800813a:	73fb      	strb	r3, [r7, #15]
    break;
 800813c:	bf00      	nop
  }
  return usb_status;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <malloc>:
 800814c:	4b02      	ldr	r3, [pc, #8]	; (8008158 <malloc+0xc>)
 800814e:	4601      	mov	r1, r0
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f000 b823 	b.w	800819c <_malloc_r>
 8008156:	bf00      	nop
 8008158:	20000148 	.word	0x20000148

0800815c <sbrk_aligned>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4e0e      	ldr	r6, [pc, #56]	; (8008198 <sbrk_aligned+0x3c>)
 8008160:	460c      	mov	r4, r1
 8008162:	6831      	ldr	r1, [r6, #0]
 8008164:	4605      	mov	r5, r0
 8008166:	b911      	cbnz	r1, 800816e <sbrk_aligned+0x12>
 8008168:	f000 f8cc 	bl	8008304 <_sbrk_r>
 800816c:	6030      	str	r0, [r6, #0]
 800816e:	4621      	mov	r1, r4
 8008170:	4628      	mov	r0, r5
 8008172:	f000 f8c7 	bl	8008304 <_sbrk_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d00a      	beq.n	8008190 <sbrk_aligned+0x34>
 800817a:	1cc4      	adds	r4, r0, #3
 800817c:	f024 0403 	bic.w	r4, r4, #3
 8008180:	42a0      	cmp	r0, r4
 8008182:	d007      	beq.n	8008194 <sbrk_aligned+0x38>
 8008184:	1a21      	subs	r1, r4, r0
 8008186:	4628      	mov	r0, r5
 8008188:	f000 f8bc 	bl	8008304 <_sbrk_r>
 800818c:	3001      	adds	r0, #1
 800818e:	d101      	bne.n	8008194 <sbrk_aligned+0x38>
 8008190:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008194:	4620      	mov	r0, r4
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	20001628 	.word	0x20001628

0800819c <_malloc_r>:
 800819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a0:	1ccd      	adds	r5, r1, #3
 80081a2:	f025 0503 	bic.w	r5, r5, #3
 80081a6:	3508      	adds	r5, #8
 80081a8:	2d0c      	cmp	r5, #12
 80081aa:	bf38      	it	cc
 80081ac:	250c      	movcc	r5, #12
 80081ae:	2d00      	cmp	r5, #0
 80081b0:	4607      	mov	r7, r0
 80081b2:	db01      	blt.n	80081b8 <_malloc_r+0x1c>
 80081b4:	42a9      	cmp	r1, r5
 80081b6:	d905      	bls.n	80081c4 <_malloc_r+0x28>
 80081b8:	230c      	movs	r3, #12
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	2600      	movs	r6, #0
 80081be:	4630      	mov	r0, r6
 80081c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008298 <_malloc_r+0xfc>
 80081c8:	f000 f868 	bl	800829c <__malloc_lock>
 80081cc:	f8d8 3000 	ldr.w	r3, [r8]
 80081d0:	461c      	mov	r4, r3
 80081d2:	bb5c      	cbnz	r4, 800822c <_malloc_r+0x90>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ffc0 	bl	800815c <sbrk_aligned>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	4604      	mov	r4, r0
 80081e0:	d155      	bne.n	800828e <_malloc_r+0xf2>
 80081e2:	f8d8 4000 	ldr.w	r4, [r8]
 80081e6:	4626      	mov	r6, r4
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	d145      	bne.n	8008278 <_malloc_r+0xdc>
 80081ec:	2c00      	cmp	r4, #0
 80081ee:	d048      	beq.n	8008282 <_malloc_r+0xe6>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	4631      	mov	r1, r6
 80081f4:	4638      	mov	r0, r7
 80081f6:	eb04 0903 	add.w	r9, r4, r3
 80081fa:	f000 f883 	bl	8008304 <_sbrk_r>
 80081fe:	4581      	cmp	r9, r0
 8008200:	d13f      	bne.n	8008282 <_malloc_r+0xe6>
 8008202:	6821      	ldr	r1, [r4, #0]
 8008204:	1a6d      	subs	r5, r5, r1
 8008206:	4629      	mov	r1, r5
 8008208:	4638      	mov	r0, r7
 800820a:	f7ff ffa7 	bl	800815c <sbrk_aligned>
 800820e:	3001      	adds	r0, #1
 8008210:	d037      	beq.n	8008282 <_malloc_r+0xe6>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	442b      	add	r3, r5
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	f8d8 3000 	ldr.w	r3, [r8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d038      	beq.n	8008292 <_malloc_r+0xf6>
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	42a2      	cmp	r2, r4
 8008224:	d12b      	bne.n	800827e <_malloc_r+0xe2>
 8008226:	2200      	movs	r2, #0
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	e00f      	b.n	800824c <_malloc_r+0xb0>
 800822c:	6822      	ldr	r2, [r4, #0]
 800822e:	1b52      	subs	r2, r2, r5
 8008230:	d41f      	bmi.n	8008272 <_malloc_r+0xd6>
 8008232:	2a0b      	cmp	r2, #11
 8008234:	d917      	bls.n	8008266 <_malloc_r+0xca>
 8008236:	1961      	adds	r1, r4, r5
 8008238:	42a3      	cmp	r3, r4
 800823a:	6025      	str	r5, [r4, #0]
 800823c:	bf18      	it	ne
 800823e:	6059      	strne	r1, [r3, #4]
 8008240:	6863      	ldr	r3, [r4, #4]
 8008242:	bf08      	it	eq
 8008244:	f8c8 1000 	streq.w	r1, [r8]
 8008248:	5162      	str	r2, [r4, r5]
 800824a:	604b      	str	r3, [r1, #4]
 800824c:	4638      	mov	r0, r7
 800824e:	f104 060b 	add.w	r6, r4, #11
 8008252:	f000 f829 	bl	80082a8 <__malloc_unlock>
 8008256:	f026 0607 	bic.w	r6, r6, #7
 800825a:	1d23      	adds	r3, r4, #4
 800825c:	1af2      	subs	r2, r6, r3
 800825e:	d0ae      	beq.n	80081be <_malloc_r+0x22>
 8008260:	1b9b      	subs	r3, r3, r6
 8008262:	50a3      	str	r3, [r4, r2]
 8008264:	e7ab      	b.n	80081be <_malloc_r+0x22>
 8008266:	42a3      	cmp	r3, r4
 8008268:	6862      	ldr	r2, [r4, #4]
 800826a:	d1dd      	bne.n	8008228 <_malloc_r+0x8c>
 800826c:	f8c8 2000 	str.w	r2, [r8]
 8008270:	e7ec      	b.n	800824c <_malloc_r+0xb0>
 8008272:	4623      	mov	r3, r4
 8008274:	6864      	ldr	r4, [r4, #4]
 8008276:	e7ac      	b.n	80081d2 <_malloc_r+0x36>
 8008278:	4634      	mov	r4, r6
 800827a:	6876      	ldr	r6, [r6, #4]
 800827c:	e7b4      	b.n	80081e8 <_malloc_r+0x4c>
 800827e:	4613      	mov	r3, r2
 8008280:	e7cc      	b.n	800821c <_malloc_r+0x80>
 8008282:	230c      	movs	r3, #12
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	4638      	mov	r0, r7
 8008288:	f000 f80e 	bl	80082a8 <__malloc_unlock>
 800828c:	e797      	b.n	80081be <_malloc_r+0x22>
 800828e:	6025      	str	r5, [r4, #0]
 8008290:	e7dc      	b.n	800824c <_malloc_r+0xb0>
 8008292:	605b      	str	r3, [r3, #4]
 8008294:	deff      	udf	#255	; 0xff
 8008296:	bf00      	nop
 8008298:	20001624 	.word	0x20001624

0800829c <__malloc_lock>:
 800829c:	4801      	ldr	r0, [pc, #4]	; (80082a4 <__malloc_lock+0x8>)
 800829e:	f000 b86b 	b.w	8008378 <__retarget_lock_acquire_recursive>
 80082a2:	bf00      	nop
 80082a4:	20001768 	.word	0x20001768

080082a8 <__malloc_unlock>:
 80082a8:	4801      	ldr	r0, [pc, #4]	; (80082b0 <__malloc_unlock+0x8>)
 80082aa:	f000 b866 	b.w	800837a <__retarget_lock_release_recursive>
 80082ae:	bf00      	nop
 80082b0:	20001768 	.word	0x20001768

080082b4 <siprintf>:
 80082b4:	b40e      	push	{r1, r2, r3}
 80082b6:	b500      	push	{lr}
 80082b8:	b09c      	sub	sp, #112	; 0x70
 80082ba:	ab1d      	add	r3, sp, #116	; 0x74
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	9006      	str	r0, [sp, #24]
 80082c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082c4:	4809      	ldr	r0, [pc, #36]	; (80082ec <siprintf+0x38>)
 80082c6:	9107      	str	r1, [sp, #28]
 80082c8:	9104      	str	r1, [sp, #16]
 80082ca:	4909      	ldr	r1, [pc, #36]	; (80082f0 <siprintf+0x3c>)
 80082cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d0:	9105      	str	r1, [sp, #20]
 80082d2:	6800      	ldr	r0, [r0, #0]
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	a902      	add	r1, sp, #8
 80082d8:	f000 f8f6 	bl	80084c8 <_svfiprintf_r>
 80082dc:	9b02      	ldr	r3, [sp, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	b01c      	add	sp, #112	; 0x70
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e8:	b003      	add	sp, #12
 80082ea:	4770      	bx	lr
 80082ec:	20000148 	.word	0x20000148
 80082f0:	ffff0208 	.word	0xffff0208

080082f4 <memset>:
 80082f4:	4402      	add	r2, r0
 80082f6:	4603      	mov	r3, r0
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d100      	bne.n	80082fe <memset+0xa>
 80082fc:	4770      	bx	lr
 80082fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008302:	e7f9      	b.n	80082f8 <memset+0x4>

08008304 <_sbrk_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d06      	ldr	r5, [pc, #24]	; (8008320 <_sbrk_r+0x1c>)
 8008308:	2300      	movs	r3, #0
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	f7f8 fae4 	bl	80008dc <_sbrk>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_sbrk_r+0x1a>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_sbrk_r+0x1a>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	20001764 	.word	0x20001764

08008324 <__errno>:
 8008324:	4b01      	ldr	r3, [pc, #4]	; (800832c <__errno+0x8>)
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	20000148 	.word	0x20000148

08008330 <__libc_init_array>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	4d0d      	ldr	r5, [pc, #52]	; (8008368 <__libc_init_array+0x38>)
 8008334:	4c0d      	ldr	r4, [pc, #52]	; (800836c <__libc_init_array+0x3c>)
 8008336:	1b64      	subs	r4, r4, r5
 8008338:	10a4      	asrs	r4, r4, #2
 800833a:	2600      	movs	r6, #0
 800833c:	42a6      	cmp	r6, r4
 800833e:	d109      	bne.n	8008354 <__libc_init_array+0x24>
 8008340:	4d0b      	ldr	r5, [pc, #44]	; (8008370 <__libc_init_array+0x40>)
 8008342:	4c0c      	ldr	r4, [pc, #48]	; (8008374 <__libc_init_array+0x44>)
 8008344:	f000 fbae 	bl	8008aa4 <_init>
 8008348:	1b64      	subs	r4, r4, r5
 800834a:	10a4      	asrs	r4, r4, #2
 800834c:	2600      	movs	r6, #0
 800834e:	42a6      	cmp	r6, r4
 8008350:	d105      	bne.n	800835e <__libc_init_array+0x2e>
 8008352:	bd70      	pop	{r4, r5, r6, pc}
 8008354:	f855 3b04 	ldr.w	r3, [r5], #4
 8008358:	4798      	blx	r3
 800835a:	3601      	adds	r6, #1
 800835c:	e7ee      	b.n	800833c <__libc_init_array+0xc>
 800835e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008362:	4798      	blx	r3
 8008364:	3601      	adds	r6, #1
 8008366:	e7f2      	b.n	800834e <__libc_init_array+0x1e>
 8008368:	08008b74 	.word	0x08008b74
 800836c:	08008b74 	.word	0x08008b74
 8008370:	08008b74 	.word	0x08008b74
 8008374:	08008b78 	.word	0x08008b78

08008378 <__retarget_lock_acquire_recursive>:
 8008378:	4770      	bx	lr

0800837a <__retarget_lock_release_recursive>:
 800837a:	4770      	bx	lr

0800837c <_free_r>:
 800837c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800837e:	2900      	cmp	r1, #0
 8008380:	d044      	beq.n	800840c <_free_r+0x90>
 8008382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008386:	9001      	str	r0, [sp, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f1a1 0404 	sub.w	r4, r1, #4
 800838e:	bfb8      	it	lt
 8008390:	18e4      	addlt	r4, r4, r3
 8008392:	f7ff ff83 	bl	800829c <__malloc_lock>
 8008396:	4a1e      	ldr	r2, [pc, #120]	; (8008410 <_free_r+0x94>)
 8008398:	9801      	ldr	r0, [sp, #4]
 800839a:	6813      	ldr	r3, [r2, #0]
 800839c:	b933      	cbnz	r3, 80083ac <_free_r+0x30>
 800839e:	6063      	str	r3, [r4, #4]
 80083a0:	6014      	str	r4, [r2, #0]
 80083a2:	b003      	add	sp, #12
 80083a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083a8:	f7ff bf7e 	b.w	80082a8 <__malloc_unlock>
 80083ac:	42a3      	cmp	r3, r4
 80083ae:	d908      	bls.n	80083c2 <_free_r+0x46>
 80083b0:	6825      	ldr	r5, [r4, #0]
 80083b2:	1961      	adds	r1, r4, r5
 80083b4:	428b      	cmp	r3, r1
 80083b6:	bf01      	itttt	eq
 80083b8:	6819      	ldreq	r1, [r3, #0]
 80083ba:	685b      	ldreq	r3, [r3, #4]
 80083bc:	1949      	addeq	r1, r1, r5
 80083be:	6021      	streq	r1, [r4, #0]
 80083c0:	e7ed      	b.n	800839e <_free_r+0x22>
 80083c2:	461a      	mov	r2, r3
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	b10b      	cbz	r3, 80083cc <_free_r+0x50>
 80083c8:	42a3      	cmp	r3, r4
 80083ca:	d9fa      	bls.n	80083c2 <_free_r+0x46>
 80083cc:	6811      	ldr	r1, [r2, #0]
 80083ce:	1855      	adds	r5, r2, r1
 80083d0:	42a5      	cmp	r5, r4
 80083d2:	d10b      	bne.n	80083ec <_free_r+0x70>
 80083d4:	6824      	ldr	r4, [r4, #0]
 80083d6:	4421      	add	r1, r4
 80083d8:	1854      	adds	r4, r2, r1
 80083da:	42a3      	cmp	r3, r4
 80083dc:	6011      	str	r1, [r2, #0]
 80083de:	d1e0      	bne.n	80083a2 <_free_r+0x26>
 80083e0:	681c      	ldr	r4, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	6053      	str	r3, [r2, #4]
 80083e6:	440c      	add	r4, r1
 80083e8:	6014      	str	r4, [r2, #0]
 80083ea:	e7da      	b.n	80083a2 <_free_r+0x26>
 80083ec:	d902      	bls.n	80083f4 <_free_r+0x78>
 80083ee:	230c      	movs	r3, #12
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	e7d6      	b.n	80083a2 <_free_r+0x26>
 80083f4:	6825      	ldr	r5, [r4, #0]
 80083f6:	1961      	adds	r1, r4, r5
 80083f8:	428b      	cmp	r3, r1
 80083fa:	bf04      	itt	eq
 80083fc:	6819      	ldreq	r1, [r3, #0]
 80083fe:	685b      	ldreq	r3, [r3, #4]
 8008400:	6063      	str	r3, [r4, #4]
 8008402:	bf04      	itt	eq
 8008404:	1949      	addeq	r1, r1, r5
 8008406:	6021      	streq	r1, [r4, #0]
 8008408:	6054      	str	r4, [r2, #4]
 800840a:	e7ca      	b.n	80083a2 <_free_r+0x26>
 800840c:	b003      	add	sp, #12
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	20001624 	.word	0x20001624

08008414 <__ssputs_r>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	688e      	ldr	r6, [r1, #8]
 800841a:	461f      	mov	r7, r3
 800841c:	42be      	cmp	r6, r7
 800841e:	680b      	ldr	r3, [r1, #0]
 8008420:	4682      	mov	sl, r0
 8008422:	460c      	mov	r4, r1
 8008424:	4690      	mov	r8, r2
 8008426:	d82c      	bhi.n	8008482 <__ssputs_r+0x6e>
 8008428:	898a      	ldrh	r2, [r1, #12]
 800842a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800842e:	d026      	beq.n	800847e <__ssputs_r+0x6a>
 8008430:	6965      	ldr	r5, [r4, #20]
 8008432:	6909      	ldr	r1, [r1, #16]
 8008434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008438:	eba3 0901 	sub.w	r9, r3, r1
 800843c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008440:	1c7b      	adds	r3, r7, #1
 8008442:	444b      	add	r3, r9
 8008444:	106d      	asrs	r5, r5, #1
 8008446:	429d      	cmp	r5, r3
 8008448:	bf38      	it	cc
 800844a:	461d      	movcc	r5, r3
 800844c:	0553      	lsls	r3, r2, #21
 800844e:	d527      	bpl.n	80084a0 <__ssputs_r+0x8c>
 8008450:	4629      	mov	r1, r5
 8008452:	f7ff fea3 	bl	800819c <_malloc_r>
 8008456:	4606      	mov	r6, r0
 8008458:	b360      	cbz	r0, 80084b4 <__ssputs_r+0xa0>
 800845a:	6921      	ldr	r1, [r4, #16]
 800845c:	464a      	mov	r2, r9
 800845e:	f000 fadb 	bl	8008a18 <memcpy>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	6126      	str	r6, [r4, #16]
 8008470:	6165      	str	r5, [r4, #20]
 8008472:	444e      	add	r6, r9
 8008474:	eba5 0509 	sub.w	r5, r5, r9
 8008478:	6026      	str	r6, [r4, #0]
 800847a:	60a5      	str	r5, [r4, #8]
 800847c:	463e      	mov	r6, r7
 800847e:	42be      	cmp	r6, r7
 8008480:	d900      	bls.n	8008484 <__ssputs_r+0x70>
 8008482:	463e      	mov	r6, r7
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	4632      	mov	r2, r6
 8008488:	4641      	mov	r1, r8
 800848a:	f000 faab 	bl	80089e4 <memmove>
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	1b9b      	subs	r3, r3, r6
 8008492:	60a3      	str	r3, [r4, #8]
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	4433      	add	r3, r6
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	2000      	movs	r0, #0
 800849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a0:	462a      	mov	r2, r5
 80084a2:	f000 fac7 	bl	8008a34 <_realloc_r>
 80084a6:	4606      	mov	r6, r0
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d1e0      	bne.n	800846e <__ssputs_r+0x5a>
 80084ac:	6921      	ldr	r1, [r4, #16]
 80084ae:	4650      	mov	r0, sl
 80084b0:	f7ff ff64 	bl	800837c <_free_r>
 80084b4:	230c      	movs	r3, #12
 80084b6:	f8ca 3000 	str.w	r3, [sl]
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c6:	e7e9      	b.n	800849c <__ssputs_r+0x88>

080084c8 <_svfiprintf_r>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	4698      	mov	r8, r3
 80084ce:	898b      	ldrh	r3, [r1, #12]
 80084d0:	061b      	lsls	r3, r3, #24
 80084d2:	b09d      	sub	sp, #116	; 0x74
 80084d4:	4607      	mov	r7, r0
 80084d6:	460d      	mov	r5, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	d50e      	bpl.n	80084fa <_svfiprintf_r+0x32>
 80084dc:	690b      	ldr	r3, [r1, #16]
 80084de:	b963      	cbnz	r3, 80084fa <_svfiprintf_r+0x32>
 80084e0:	2140      	movs	r1, #64	; 0x40
 80084e2:	f7ff fe5b 	bl	800819c <_malloc_r>
 80084e6:	6028      	str	r0, [r5, #0]
 80084e8:	6128      	str	r0, [r5, #16]
 80084ea:	b920      	cbnz	r0, 80084f6 <_svfiprintf_r+0x2e>
 80084ec:	230c      	movs	r3, #12
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084f4:	e0d0      	b.n	8008698 <_svfiprintf_r+0x1d0>
 80084f6:	2340      	movs	r3, #64	; 0x40
 80084f8:	616b      	str	r3, [r5, #20]
 80084fa:	2300      	movs	r3, #0
 80084fc:	9309      	str	r3, [sp, #36]	; 0x24
 80084fe:	2320      	movs	r3, #32
 8008500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008504:	f8cd 800c 	str.w	r8, [sp, #12]
 8008508:	2330      	movs	r3, #48	; 0x30
 800850a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086b0 <_svfiprintf_r+0x1e8>
 800850e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008512:	f04f 0901 	mov.w	r9, #1
 8008516:	4623      	mov	r3, r4
 8008518:	469a      	mov	sl, r3
 800851a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800851e:	b10a      	cbz	r2, 8008524 <_svfiprintf_r+0x5c>
 8008520:	2a25      	cmp	r2, #37	; 0x25
 8008522:	d1f9      	bne.n	8008518 <_svfiprintf_r+0x50>
 8008524:	ebba 0b04 	subs.w	fp, sl, r4
 8008528:	d00b      	beq.n	8008542 <_svfiprintf_r+0x7a>
 800852a:	465b      	mov	r3, fp
 800852c:	4622      	mov	r2, r4
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ff6f 	bl	8008414 <__ssputs_r>
 8008536:	3001      	adds	r0, #1
 8008538:	f000 80a9 	beq.w	800868e <_svfiprintf_r+0x1c6>
 800853c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800853e:	445a      	add	r2, fp
 8008540:	9209      	str	r2, [sp, #36]	; 0x24
 8008542:	f89a 3000 	ldrb.w	r3, [sl]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80a1 	beq.w	800868e <_svfiprintf_r+0x1c6>
 800854c:	2300      	movs	r3, #0
 800854e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008556:	f10a 0a01 	add.w	sl, sl, #1
 800855a:	9304      	str	r3, [sp, #16]
 800855c:	9307      	str	r3, [sp, #28]
 800855e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008562:	931a      	str	r3, [sp, #104]	; 0x68
 8008564:	4654      	mov	r4, sl
 8008566:	2205      	movs	r2, #5
 8008568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856c:	4850      	ldr	r0, [pc, #320]	; (80086b0 <_svfiprintf_r+0x1e8>)
 800856e:	f7f7 fe37 	bl	80001e0 <memchr>
 8008572:	9a04      	ldr	r2, [sp, #16]
 8008574:	b9d8      	cbnz	r0, 80085ae <_svfiprintf_r+0xe6>
 8008576:	06d0      	lsls	r0, r2, #27
 8008578:	bf44      	itt	mi
 800857a:	2320      	movmi	r3, #32
 800857c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008580:	0711      	lsls	r1, r2, #28
 8008582:	bf44      	itt	mi
 8008584:	232b      	movmi	r3, #43	; 0x2b
 8008586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858a:	f89a 3000 	ldrb.w	r3, [sl]
 800858e:	2b2a      	cmp	r3, #42	; 0x2a
 8008590:	d015      	beq.n	80085be <_svfiprintf_r+0xf6>
 8008592:	9a07      	ldr	r2, [sp, #28]
 8008594:	4654      	mov	r4, sl
 8008596:	2000      	movs	r0, #0
 8008598:	f04f 0c0a 	mov.w	ip, #10
 800859c:	4621      	mov	r1, r4
 800859e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085a2:	3b30      	subs	r3, #48	; 0x30
 80085a4:	2b09      	cmp	r3, #9
 80085a6:	d94d      	bls.n	8008644 <_svfiprintf_r+0x17c>
 80085a8:	b1b0      	cbz	r0, 80085d8 <_svfiprintf_r+0x110>
 80085aa:	9207      	str	r2, [sp, #28]
 80085ac:	e014      	b.n	80085d8 <_svfiprintf_r+0x110>
 80085ae:	eba0 0308 	sub.w	r3, r0, r8
 80085b2:	fa09 f303 	lsl.w	r3, r9, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	46a2      	mov	sl, r4
 80085bc:	e7d2      	b.n	8008564 <_svfiprintf_r+0x9c>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	1d19      	adds	r1, r3, #4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	9103      	str	r1, [sp, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bfbb      	ittet	lt
 80085ca:	425b      	neglt	r3, r3
 80085cc:	f042 0202 	orrlt.w	r2, r2, #2
 80085d0:	9307      	strge	r3, [sp, #28]
 80085d2:	9307      	strlt	r3, [sp, #28]
 80085d4:	bfb8      	it	lt
 80085d6:	9204      	strlt	r2, [sp, #16]
 80085d8:	7823      	ldrb	r3, [r4, #0]
 80085da:	2b2e      	cmp	r3, #46	; 0x2e
 80085dc:	d10c      	bne.n	80085f8 <_svfiprintf_r+0x130>
 80085de:	7863      	ldrb	r3, [r4, #1]
 80085e0:	2b2a      	cmp	r3, #42	; 0x2a
 80085e2:	d134      	bne.n	800864e <_svfiprintf_r+0x186>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	1d1a      	adds	r2, r3, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	9203      	str	r2, [sp, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfb8      	it	lt
 80085f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085f4:	3402      	adds	r4, #2
 80085f6:	9305      	str	r3, [sp, #20]
 80085f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086c0 <_svfiprintf_r+0x1f8>
 80085fc:	7821      	ldrb	r1, [r4, #0]
 80085fe:	2203      	movs	r2, #3
 8008600:	4650      	mov	r0, sl
 8008602:	f7f7 fded 	bl	80001e0 <memchr>
 8008606:	b138      	cbz	r0, 8008618 <_svfiprintf_r+0x150>
 8008608:	9b04      	ldr	r3, [sp, #16]
 800860a:	eba0 000a 	sub.w	r0, r0, sl
 800860e:	2240      	movs	r2, #64	; 0x40
 8008610:	4082      	lsls	r2, r0
 8008612:	4313      	orrs	r3, r2
 8008614:	3401      	adds	r4, #1
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861c:	4825      	ldr	r0, [pc, #148]	; (80086b4 <_svfiprintf_r+0x1ec>)
 800861e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008622:	2206      	movs	r2, #6
 8008624:	f7f7 fddc 	bl	80001e0 <memchr>
 8008628:	2800      	cmp	r0, #0
 800862a:	d038      	beq.n	800869e <_svfiprintf_r+0x1d6>
 800862c:	4b22      	ldr	r3, [pc, #136]	; (80086b8 <_svfiprintf_r+0x1f0>)
 800862e:	bb1b      	cbnz	r3, 8008678 <_svfiprintf_r+0x1b0>
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	3307      	adds	r3, #7
 8008634:	f023 0307 	bic.w	r3, r3, #7
 8008638:	3308      	adds	r3, #8
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863e:	4433      	add	r3, r6
 8008640:	9309      	str	r3, [sp, #36]	; 0x24
 8008642:	e768      	b.n	8008516 <_svfiprintf_r+0x4e>
 8008644:	fb0c 3202 	mla	r2, ip, r2, r3
 8008648:	460c      	mov	r4, r1
 800864a:	2001      	movs	r0, #1
 800864c:	e7a6      	b.n	800859c <_svfiprintf_r+0xd4>
 800864e:	2300      	movs	r3, #0
 8008650:	3401      	adds	r4, #1
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	4619      	mov	r1, r3
 8008656:	f04f 0c0a 	mov.w	ip, #10
 800865a:	4620      	mov	r0, r4
 800865c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008660:	3a30      	subs	r2, #48	; 0x30
 8008662:	2a09      	cmp	r2, #9
 8008664:	d903      	bls.n	800866e <_svfiprintf_r+0x1a6>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0c6      	beq.n	80085f8 <_svfiprintf_r+0x130>
 800866a:	9105      	str	r1, [sp, #20]
 800866c:	e7c4      	b.n	80085f8 <_svfiprintf_r+0x130>
 800866e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008672:	4604      	mov	r4, r0
 8008674:	2301      	movs	r3, #1
 8008676:	e7f0      	b.n	800865a <_svfiprintf_r+0x192>
 8008678:	ab03      	add	r3, sp, #12
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	462a      	mov	r2, r5
 800867e:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <_svfiprintf_r+0x1f4>)
 8008680:	a904      	add	r1, sp, #16
 8008682:	4638      	mov	r0, r7
 8008684:	f3af 8000 	nop.w
 8008688:	1c42      	adds	r2, r0, #1
 800868a:	4606      	mov	r6, r0
 800868c:	d1d6      	bne.n	800863c <_svfiprintf_r+0x174>
 800868e:	89ab      	ldrh	r3, [r5, #12]
 8008690:	065b      	lsls	r3, r3, #25
 8008692:	f53f af2d 	bmi.w	80084f0 <_svfiprintf_r+0x28>
 8008696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008698:	b01d      	add	sp, #116	; 0x74
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869e:	ab03      	add	r3, sp, #12
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	462a      	mov	r2, r5
 80086a4:	4b05      	ldr	r3, [pc, #20]	; (80086bc <_svfiprintf_r+0x1f4>)
 80086a6:	a904      	add	r1, sp, #16
 80086a8:	4638      	mov	r0, r7
 80086aa:	f000 f879 	bl	80087a0 <_printf_i>
 80086ae:	e7eb      	b.n	8008688 <_svfiprintf_r+0x1c0>
 80086b0:	08008b38 	.word	0x08008b38
 80086b4:	08008b42 	.word	0x08008b42
 80086b8:	00000000 	.word	0x00000000
 80086bc:	08008415 	.word	0x08008415
 80086c0:	08008b3e 	.word	0x08008b3e

080086c4 <_printf_common>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	4616      	mov	r6, r2
 80086ca:	4699      	mov	r9, r3
 80086cc:	688a      	ldr	r2, [r1, #8]
 80086ce:	690b      	ldr	r3, [r1, #16]
 80086d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bfb8      	it	lt
 80086d8:	4613      	movlt	r3, r2
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086e0:	4607      	mov	r7, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	b10a      	cbz	r2, 80086ea <_printf_common+0x26>
 80086e6:	3301      	adds	r3, #1
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	0699      	lsls	r1, r3, #26
 80086ee:	bf42      	ittt	mi
 80086f0:	6833      	ldrmi	r3, [r6, #0]
 80086f2:	3302      	addmi	r3, #2
 80086f4:	6033      	strmi	r3, [r6, #0]
 80086f6:	6825      	ldr	r5, [r4, #0]
 80086f8:	f015 0506 	ands.w	r5, r5, #6
 80086fc:	d106      	bne.n	800870c <_printf_common+0x48>
 80086fe:	f104 0a19 	add.w	sl, r4, #25
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	6832      	ldr	r2, [r6, #0]
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	42ab      	cmp	r3, r5
 800870a:	dc26      	bgt.n	800875a <_printf_common+0x96>
 800870c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008710:	1e13      	subs	r3, r2, #0
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	bf18      	it	ne
 8008716:	2301      	movne	r3, #1
 8008718:	0692      	lsls	r2, r2, #26
 800871a:	d42b      	bmi.n	8008774 <_printf_common+0xb0>
 800871c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008720:	4649      	mov	r1, r9
 8008722:	4638      	mov	r0, r7
 8008724:	47c0      	blx	r8
 8008726:	3001      	adds	r0, #1
 8008728:	d01e      	beq.n	8008768 <_printf_common+0xa4>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	f003 0306 	and.w	r3, r3, #6
 8008732:	2b04      	cmp	r3, #4
 8008734:	bf02      	ittt	eq
 8008736:	68e5      	ldreq	r5, [r4, #12]
 8008738:	6833      	ldreq	r3, [r6, #0]
 800873a:	1aed      	subeq	r5, r5, r3
 800873c:	68a3      	ldr	r3, [r4, #8]
 800873e:	bf0c      	ite	eq
 8008740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008744:	2500      	movne	r5, #0
 8008746:	4293      	cmp	r3, r2
 8008748:	bfc4      	itt	gt
 800874a:	1a9b      	subgt	r3, r3, r2
 800874c:	18ed      	addgt	r5, r5, r3
 800874e:	2600      	movs	r6, #0
 8008750:	341a      	adds	r4, #26
 8008752:	42b5      	cmp	r5, r6
 8008754:	d11a      	bne.n	800878c <_printf_common+0xc8>
 8008756:	2000      	movs	r0, #0
 8008758:	e008      	b.n	800876c <_printf_common+0xa8>
 800875a:	2301      	movs	r3, #1
 800875c:	4652      	mov	r2, sl
 800875e:	4649      	mov	r1, r9
 8008760:	4638      	mov	r0, r7
 8008762:	47c0      	blx	r8
 8008764:	3001      	adds	r0, #1
 8008766:	d103      	bne.n	8008770 <_printf_common+0xac>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008770:	3501      	adds	r5, #1
 8008772:	e7c6      	b.n	8008702 <_printf_common+0x3e>
 8008774:	18e1      	adds	r1, r4, r3
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	2030      	movs	r0, #48	; 0x30
 800877a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800877e:	4422      	add	r2, r4
 8008780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008788:	3302      	adds	r3, #2
 800878a:	e7c7      	b.n	800871c <_printf_common+0x58>
 800878c:	2301      	movs	r3, #1
 800878e:	4622      	mov	r2, r4
 8008790:	4649      	mov	r1, r9
 8008792:	4638      	mov	r0, r7
 8008794:	47c0      	blx	r8
 8008796:	3001      	adds	r0, #1
 8008798:	d0e6      	beq.n	8008768 <_printf_common+0xa4>
 800879a:	3601      	adds	r6, #1
 800879c:	e7d9      	b.n	8008752 <_printf_common+0x8e>
	...

080087a0 <_printf_i>:
 80087a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	7e0f      	ldrb	r7, [r1, #24]
 80087a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087a8:	2f78      	cmp	r7, #120	; 0x78
 80087aa:	4691      	mov	r9, r2
 80087ac:	4680      	mov	r8, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	469a      	mov	sl, r3
 80087b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087b6:	d807      	bhi.n	80087c8 <_printf_i+0x28>
 80087b8:	2f62      	cmp	r7, #98	; 0x62
 80087ba:	d80a      	bhi.n	80087d2 <_printf_i+0x32>
 80087bc:	2f00      	cmp	r7, #0
 80087be:	f000 80d4 	beq.w	800896a <_printf_i+0x1ca>
 80087c2:	2f58      	cmp	r7, #88	; 0x58
 80087c4:	f000 80c0 	beq.w	8008948 <_printf_i+0x1a8>
 80087c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087d0:	e03a      	b.n	8008848 <_printf_i+0xa8>
 80087d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087d6:	2b15      	cmp	r3, #21
 80087d8:	d8f6      	bhi.n	80087c8 <_printf_i+0x28>
 80087da:	a101      	add	r1, pc, #4	; (adr r1, 80087e0 <_printf_i+0x40>)
 80087dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e0:	08008839 	.word	0x08008839
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	080087c9 	.word	0x080087c9
 80087ec:	080087c9 	.word	0x080087c9
 80087f0:	080087c9 	.word	0x080087c9
 80087f4:	080087c9 	.word	0x080087c9
 80087f8:	0800884d 	.word	0x0800884d
 80087fc:	080087c9 	.word	0x080087c9
 8008800:	080087c9 	.word	0x080087c9
 8008804:	080087c9 	.word	0x080087c9
 8008808:	080087c9 	.word	0x080087c9
 800880c:	08008951 	.word	0x08008951
 8008810:	08008879 	.word	0x08008879
 8008814:	0800890b 	.word	0x0800890b
 8008818:	080087c9 	.word	0x080087c9
 800881c:	080087c9 	.word	0x080087c9
 8008820:	08008973 	.word	0x08008973
 8008824:	080087c9 	.word	0x080087c9
 8008828:	08008879 	.word	0x08008879
 800882c:	080087c9 	.word	0x080087c9
 8008830:	080087c9 	.word	0x080087c9
 8008834:	08008913 	.word	0x08008913
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	602a      	str	r2, [r5, #0]
 8008840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008848:	2301      	movs	r3, #1
 800884a:	e09f      	b.n	800898c <_printf_i+0x1ec>
 800884c:	6820      	ldr	r0, [r4, #0]
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	0607      	lsls	r7, r0, #24
 8008852:	f103 0104 	add.w	r1, r3, #4
 8008856:	6029      	str	r1, [r5, #0]
 8008858:	d501      	bpl.n	800885e <_printf_i+0xbe>
 800885a:	681e      	ldr	r6, [r3, #0]
 800885c:	e003      	b.n	8008866 <_printf_i+0xc6>
 800885e:	0646      	lsls	r6, r0, #25
 8008860:	d5fb      	bpl.n	800885a <_printf_i+0xba>
 8008862:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008866:	2e00      	cmp	r6, #0
 8008868:	da03      	bge.n	8008872 <_printf_i+0xd2>
 800886a:	232d      	movs	r3, #45	; 0x2d
 800886c:	4276      	negs	r6, r6
 800886e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008872:	485a      	ldr	r0, [pc, #360]	; (80089dc <_printf_i+0x23c>)
 8008874:	230a      	movs	r3, #10
 8008876:	e012      	b.n	800889e <_printf_i+0xfe>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	6820      	ldr	r0, [r4, #0]
 800887c:	1d19      	adds	r1, r3, #4
 800887e:	6029      	str	r1, [r5, #0]
 8008880:	0605      	lsls	r5, r0, #24
 8008882:	d501      	bpl.n	8008888 <_printf_i+0xe8>
 8008884:	681e      	ldr	r6, [r3, #0]
 8008886:	e002      	b.n	800888e <_printf_i+0xee>
 8008888:	0641      	lsls	r1, r0, #25
 800888a:	d5fb      	bpl.n	8008884 <_printf_i+0xe4>
 800888c:	881e      	ldrh	r6, [r3, #0]
 800888e:	4853      	ldr	r0, [pc, #332]	; (80089dc <_printf_i+0x23c>)
 8008890:	2f6f      	cmp	r7, #111	; 0x6f
 8008892:	bf0c      	ite	eq
 8008894:	2308      	moveq	r3, #8
 8008896:	230a      	movne	r3, #10
 8008898:	2100      	movs	r1, #0
 800889a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800889e:	6865      	ldr	r5, [r4, #4]
 80088a0:	60a5      	str	r5, [r4, #8]
 80088a2:	2d00      	cmp	r5, #0
 80088a4:	bfa2      	ittt	ge
 80088a6:	6821      	ldrge	r1, [r4, #0]
 80088a8:	f021 0104 	bicge.w	r1, r1, #4
 80088ac:	6021      	strge	r1, [r4, #0]
 80088ae:	b90e      	cbnz	r6, 80088b4 <_printf_i+0x114>
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	d04b      	beq.n	800894c <_printf_i+0x1ac>
 80088b4:	4615      	mov	r5, r2
 80088b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80088ba:	fb03 6711 	mls	r7, r3, r1, r6
 80088be:	5dc7      	ldrb	r7, [r0, r7]
 80088c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088c4:	4637      	mov	r7, r6
 80088c6:	42bb      	cmp	r3, r7
 80088c8:	460e      	mov	r6, r1
 80088ca:	d9f4      	bls.n	80088b6 <_printf_i+0x116>
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	d10b      	bne.n	80088e8 <_printf_i+0x148>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	07de      	lsls	r6, r3, #31
 80088d4:	d508      	bpl.n	80088e8 <_printf_i+0x148>
 80088d6:	6923      	ldr	r3, [r4, #16]
 80088d8:	6861      	ldr	r1, [r4, #4]
 80088da:	4299      	cmp	r1, r3
 80088dc:	bfde      	ittt	le
 80088de:	2330      	movle	r3, #48	; 0x30
 80088e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80088e8:	1b52      	subs	r2, r2, r5
 80088ea:	6122      	str	r2, [r4, #16]
 80088ec:	f8cd a000 	str.w	sl, [sp]
 80088f0:	464b      	mov	r3, r9
 80088f2:	aa03      	add	r2, sp, #12
 80088f4:	4621      	mov	r1, r4
 80088f6:	4640      	mov	r0, r8
 80088f8:	f7ff fee4 	bl	80086c4 <_printf_common>
 80088fc:	3001      	adds	r0, #1
 80088fe:	d14a      	bne.n	8008996 <_printf_i+0x1f6>
 8008900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008904:	b004      	add	sp, #16
 8008906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	f043 0320 	orr.w	r3, r3, #32
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	4833      	ldr	r0, [pc, #204]	; (80089e0 <_printf_i+0x240>)
 8008914:	2778      	movs	r7, #120	; 0x78
 8008916:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	6829      	ldr	r1, [r5, #0]
 800891e:	061f      	lsls	r7, r3, #24
 8008920:	f851 6b04 	ldr.w	r6, [r1], #4
 8008924:	d402      	bmi.n	800892c <_printf_i+0x18c>
 8008926:	065f      	lsls	r7, r3, #25
 8008928:	bf48      	it	mi
 800892a:	b2b6      	uxthmi	r6, r6
 800892c:	07df      	lsls	r7, r3, #31
 800892e:	bf48      	it	mi
 8008930:	f043 0320 	orrmi.w	r3, r3, #32
 8008934:	6029      	str	r1, [r5, #0]
 8008936:	bf48      	it	mi
 8008938:	6023      	strmi	r3, [r4, #0]
 800893a:	b91e      	cbnz	r6, 8008944 <_printf_i+0x1a4>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	f023 0320 	bic.w	r3, r3, #32
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	2310      	movs	r3, #16
 8008946:	e7a7      	b.n	8008898 <_printf_i+0xf8>
 8008948:	4824      	ldr	r0, [pc, #144]	; (80089dc <_printf_i+0x23c>)
 800894a:	e7e4      	b.n	8008916 <_printf_i+0x176>
 800894c:	4615      	mov	r5, r2
 800894e:	e7bd      	b.n	80088cc <_printf_i+0x12c>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	6826      	ldr	r6, [r4, #0]
 8008954:	6961      	ldr	r1, [r4, #20]
 8008956:	1d18      	adds	r0, r3, #4
 8008958:	6028      	str	r0, [r5, #0]
 800895a:	0635      	lsls	r5, r6, #24
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	d501      	bpl.n	8008964 <_printf_i+0x1c4>
 8008960:	6019      	str	r1, [r3, #0]
 8008962:	e002      	b.n	800896a <_printf_i+0x1ca>
 8008964:	0670      	lsls	r0, r6, #25
 8008966:	d5fb      	bpl.n	8008960 <_printf_i+0x1c0>
 8008968:	8019      	strh	r1, [r3, #0]
 800896a:	2300      	movs	r3, #0
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	4615      	mov	r5, r2
 8008970:	e7bc      	b.n	80088ec <_printf_i+0x14c>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	1d1a      	adds	r2, r3, #4
 8008976:	602a      	str	r2, [r5, #0]
 8008978:	681d      	ldr	r5, [r3, #0]
 800897a:	6862      	ldr	r2, [r4, #4]
 800897c:	2100      	movs	r1, #0
 800897e:	4628      	mov	r0, r5
 8008980:	f7f7 fc2e 	bl	80001e0 <memchr>
 8008984:	b108      	cbz	r0, 800898a <_printf_i+0x1ea>
 8008986:	1b40      	subs	r0, r0, r5
 8008988:	6060      	str	r0, [r4, #4]
 800898a:	6863      	ldr	r3, [r4, #4]
 800898c:	6123      	str	r3, [r4, #16]
 800898e:	2300      	movs	r3, #0
 8008990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008994:	e7aa      	b.n	80088ec <_printf_i+0x14c>
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	462a      	mov	r2, r5
 800899a:	4649      	mov	r1, r9
 800899c:	4640      	mov	r0, r8
 800899e:	47d0      	blx	sl
 80089a0:	3001      	adds	r0, #1
 80089a2:	d0ad      	beq.n	8008900 <_printf_i+0x160>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	079b      	lsls	r3, r3, #30
 80089a8:	d413      	bmi.n	80089d2 <_printf_i+0x232>
 80089aa:	68e0      	ldr	r0, [r4, #12]
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	4298      	cmp	r0, r3
 80089b0:	bfb8      	it	lt
 80089b2:	4618      	movlt	r0, r3
 80089b4:	e7a6      	b.n	8008904 <_printf_i+0x164>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4632      	mov	r2, r6
 80089ba:	4649      	mov	r1, r9
 80089bc:	4640      	mov	r0, r8
 80089be:	47d0      	blx	sl
 80089c0:	3001      	adds	r0, #1
 80089c2:	d09d      	beq.n	8008900 <_printf_i+0x160>
 80089c4:	3501      	adds	r5, #1
 80089c6:	68e3      	ldr	r3, [r4, #12]
 80089c8:	9903      	ldr	r1, [sp, #12]
 80089ca:	1a5b      	subs	r3, r3, r1
 80089cc:	42ab      	cmp	r3, r5
 80089ce:	dcf2      	bgt.n	80089b6 <_printf_i+0x216>
 80089d0:	e7eb      	b.n	80089aa <_printf_i+0x20a>
 80089d2:	2500      	movs	r5, #0
 80089d4:	f104 0619 	add.w	r6, r4, #25
 80089d8:	e7f5      	b.n	80089c6 <_printf_i+0x226>
 80089da:	bf00      	nop
 80089dc:	08008b49 	.word	0x08008b49
 80089e0:	08008b5a 	.word	0x08008b5a

080089e4 <memmove>:
 80089e4:	4288      	cmp	r0, r1
 80089e6:	b510      	push	{r4, lr}
 80089e8:	eb01 0402 	add.w	r4, r1, r2
 80089ec:	d902      	bls.n	80089f4 <memmove+0x10>
 80089ee:	4284      	cmp	r4, r0
 80089f0:	4623      	mov	r3, r4
 80089f2:	d807      	bhi.n	8008a04 <memmove+0x20>
 80089f4:	1e43      	subs	r3, r0, #1
 80089f6:	42a1      	cmp	r1, r4
 80089f8:	d008      	beq.n	8008a0c <memmove+0x28>
 80089fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a02:	e7f8      	b.n	80089f6 <memmove+0x12>
 8008a04:	4402      	add	r2, r0
 8008a06:	4601      	mov	r1, r0
 8008a08:	428a      	cmp	r2, r1
 8008a0a:	d100      	bne.n	8008a0e <memmove+0x2a>
 8008a0c:	bd10      	pop	{r4, pc}
 8008a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a16:	e7f7      	b.n	8008a08 <memmove+0x24>

08008a18 <memcpy>:
 8008a18:	440a      	add	r2, r1
 8008a1a:	4291      	cmp	r1, r2
 8008a1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a20:	d100      	bne.n	8008a24 <memcpy+0xc>
 8008a22:	4770      	bx	lr
 8008a24:	b510      	push	{r4, lr}
 8008a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a2e:	4291      	cmp	r1, r2
 8008a30:	d1f9      	bne.n	8008a26 <memcpy+0xe>
 8008a32:	bd10      	pop	{r4, pc}

08008a34 <_realloc_r>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	460e      	mov	r6, r1
 8008a3e:	b921      	cbnz	r1, 8008a4a <_realloc_r+0x16>
 8008a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a44:	4611      	mov	r1, r2
 8008a46:	f7ff bba9 	b.w	800819c <_malloc_r>
 8008a4a:	b92a      	cbnz	r2, 8008a58 <_realloc_r+0x24>
 8008a4c:	f7ff fc96 	bl	800837c <_free_r>
 8008a50:	4625      	mov	r5, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	f000 f81b 	bl	8008a92 <_malloc_usable_size_r>
 8008a5c:	4284      	cmp	r4, r0
 8008a5e:	4607      	mov	r7, r0
 8008a60:	d802      	bhi.n	8008a68 <_realloc_r+0x34>
 8008a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a66:	d812      	bhi.n	8008a8e <_realloc_r+0x5a>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7ff fb96 	bl	800819c <_malloc_r>
 8008a70:	4605      	mov	r5, r0
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d0ed      	beq.n	8008a52 <_realloc_r+0x1e>
 8008a76:	42bc      	cmp	r4, r7
 8008a78:	4622      	mov	r2, r4
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	bf28      	it	cs
 8008a7e:	463a      	movcs	r2, r7
 8008a80:	f7ff ffca 	bl	8008a18 <memcpy>
 8008a84:	4631      	mov	r1, r6
 8008a86:	4640      	mov	r0, r8
 8008a88:	f7ff fc78 	bl	800837c <_free_r>
 8008a8c:	e7e1      	b.n	8008a52 <_realloc_r+0x1e>
 8008a8e:	4635      	mov	r5, r6
 8008a90:	e7df      	b.n	8008a52 <_realloc_r+0x1e>

08008a92 <_malloc_usable_size_r>:
 8008a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a96:	1f18      	subs	r0, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bfbc      	itt	lt
 8008a9c:	580b      	ldrlt	r3, [r1, r0]
 8008a9e:	18c0      	addlt	r0, r0, r3
 8008aa0:	4770      	bx	lr
	...

08008aa4 <_init>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	bf00      	nop
 8008aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aaa:	bc08      	pop	{r3}
 8008aac:	469e      	mov	lr, r3
 8008aae:	4770      	bx	lr

08008ab0 <_fini>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr
