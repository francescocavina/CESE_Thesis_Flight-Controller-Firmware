
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08011668  08011668  00021668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c04  08011c04  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  08011c04  08011c04  00021c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c0c  08011c0c  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c0c  08011c0c  00021c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c10  08011c10  00021c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08011c14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002078  200002d8  08011eec  000302d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002350  08011eec  00032350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026954  00000000  00000000  0003034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006148  00000000  00000000  00056c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f8  00000000  00000000  0005cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001960  00000000  00000000  0005eee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ec0  00000000  00000000  00060840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ca0e  00000000  00000000  00081700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad7df  00000000  00000000  000ae10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a5c  00000000  00000000  0015b8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0016534c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801164c 	.word	0x0801164c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0801164c 	.word	0x0801164c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <FreeRTOS_CreateStartUpTasks>:
static IBUS_HandleTypeDef_t * rc_controller;
static MPU6050_HandleTypeDef_t * hmpu6050;
static ESC_HandleTypeDef_t * hesc;

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af02      	add	r7, sp, #8

	BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_StartUp_Handle);
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec8:	4927      	ldr	r1, [pc, #156]	; (8000f68 <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000eca:	4828      	ldr	r0, [pc, #160]	; (8000f6c <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000ecc:	f00b f9f5 	bl	800c2ba <xTaskCreate>
 8000ed0:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d00a      	beq.n	8000eee <FreeRTOS_CreateStartUpTasks+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000edc:	f383 8811 	msr	BASEPRI, r3
 8000ee0:	f3bf 8f6f 	isb	sy
 8000ee4:	f3bf 8f4f 	dsb	sy
 8000ee8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000eea:	bf00      	nop
 8000eec:	e7fe      	b.n	8000eec <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <FreeRTOS_CreateStartUpTasks+0x4c>
        vTaskDelete(FlightController_StartUp_Handle);
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f00b fb14 	bl	800c528 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_OnOffButton_Handle);
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	2301      	movs	r3, #1
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0e:	4919      	ldr	r1, [pc, #100]	; (8000f74 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000f10:	4819      	ldr	r0, [pc, #100]	; (8000f78 <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000f12:	f00b f9d2 	bl	800c2ba <xTaskCreate>
 8000f16:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d00a      	beq.n	8000f34 <FreeRTOS_CreateStartUpTasks+0x80>
	__asm volatile
 8000f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f22:	f383 8811 	msr	BASEPRI, r3
 8000f26:	f3bf 8f6f 	isb	sy
 8000f2a:	f3bf 8f4f 	dsb	sy
 8000f2e:	607b      	str	r3, [r7, #4]
}
 8000f30:	bf00      	nop
 8000f32:	e7fe      	b.n	8000f32 <FreeRTOS_CreateStartUpTasks+0x7e>

    if (FlightController_OnOffButton_Handle == NULL) {
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d104      	bne.n	8000f46 <FreeRTOS_CreateStartUpTasks+0x92>
        vTaskDelete(FlightController_OnOffButton_Handle);
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00b faf1 	bl	800c528 <vTaskDelete>
    }

    /* Timer: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *) 0, Timer1_Callback);
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <FreeRTOS_CreateStartUpTasks+0xc8>)
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2164      	movs	r1, #100	; 0x64
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8000f52:	f00c f9d1 	bl	800d2f8 <xTimerCreate>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <FreeRTOS_CreateStartUpTasks+0xd0>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200002f4 	.word	0x200002f4
 8000f68:	08011668 	.word	0x08011668
 8000f6c:	08001195 	.word	0x08001195
 8000f70:	2000030c 	.word	0x2000030c
 8000f74:	08011684 	.word	0x08011684
 8000f78:	080012c9 	.word	0x080012c9
 8000f7c:	080013d9 	.word	0x080013d9
 8000f80:	080116a4 	.word	0x080116a4
 8000f84:	20000314 	.word	0x20000314

08000f88 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_HeartbeatLight_Handle);
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <FreeRTOS_CreateTasks+0x1b4>)
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9c:	4968      	ldr	r1, [pc, #416]	; (8001140 <FreeRTOS_CreateTasks+0x1b8>)
 8000f9e:	4869      	ldr	r0, [pc, #420]	; (8001144 <FreeRTOS_CreateTasks+0x1bc>)
 8000fa0:	f00b f98b 	bl	800c2ba <xTaskCreate>
 8000fa4:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d00a      	beq.n	8000fc2 <FreeRTOS_CreateTasks+0x3a>
	__asm volatile
 8000fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb0:	f383 8811 	msr	BASEPRI, r3
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	61bb      	str	r3, [r7, #24]
}
 8000fbe:	bf00      	nop
 8000fc0:	e7fe      	b.n	8000fc0 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	; (800113c <FreeRTOS_CreateTasks+0x1b4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d104      	bne.n	8000fd4 <FreeRTOS_CreateTasks+0x4c>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 8000fca:	4b5c      	ldr	r3, [pc, #368]	; (800113c <FreeRTOS_CreateTasks+0x1b4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00b faaa 	bl	800c528 <vTaskDelete>
    }

    /* Task 2: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_FlightLights_Handle);
 8000fd4:	4b5c      	ldr	r3, [pc, #368]	; (8001148 <FreeRTOS_CreateTasks+0x1c0>)
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe2:	495a      	ldr	r1, [pc, #360]	; (800114c <FreeRTOS_CreateTasks+0x1c4>)
 8000fe4:	485a      	ldr	r0, [pc, #360]	; (8001150 <FreeRTOS_CreateTasks+0x1c8>)
 8000fe6:	f00b f968 	bl	800c2ba <xTaskCreate>
 8000fea:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d00a      	beq.n	8001008 <FreeRTOS_CreateTasks+0x80>
	__asm volatile
 8000ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff6:	f383 8811 	msr	BASEPRI, r3
 8000ffa:	f3bf 8f6f 	isb	sy
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	617b      	str	r3, [r7, #20]
}
 8001004:	bf00      	nop
 8001006:	e7fe      	b.n	8001006 <FreeRTOS_CreateTasks+0x7e>

    if (FlightController_FlightLights_Handle == NULL) {
 8001008:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <FreeRTOS_CreateTasks+0x1c0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d104      	bne.n	800101a <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_FlightLights_Handle);
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <FreeRTOS_CreateTasks+0x1c0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f00b fa87 	bl	800c528 <vTaskDelete>
    }

    /* Task 3: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_Read_FSA8S_Handle);
 800101a:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <FreeRTOS_CreateTasks+0x1cc>)
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	2301      	movs	r3, #1
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001028:	494b      	ldr	r1, [pc, #300]	; (8001158 <FreeRTOS_CreateTasks+0x1d0>)
 800102a:	484c      	ldr	r0, [pc, #304]	; (800115c <FreeRTOS_CreateTasks+0x1d4>)
 800102c:	f00b f945 	bl	800c2ba <xTaskCreate>
 8001030:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d00a      	beq.n	800104e <FreeRTOS_CreateTasks+0xc6>
	__asm volatile
 8001038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103c:	f383 8811 	msr	BASEPRI, r3
 8001040:	f3bf 8f6f 	isb	sy
 8001044:	f3bf 8f4f 	dsb	sy
 8001048:	613b      	str	r3, [r7, #16]
}
 800104a:	bf00      	nop
 800104c:	e7fe      	b.n	800104c <FreeRTOS_CreateTasks+0xc4>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 800104e:	4b41      	ldr	r3, [pc, #260]	; (8001154 <FreeRTOS_CreateTasks+0x1cc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d104      	bne.n	8001060 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <FreeRTOS_CreateTasks+0x1cc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f00b fa64 	bl	800c528 <vTaskDelete>
    }

    /* Task 4: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_Read_GY87_Handle);
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <FreeRTOS_CreateTasks+0x1d8>)
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	2301      	movs	r3, #1
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106e:	493d      	ldr	r1, [pc, #244]	; (8001164 <FreeRTOS_CreateTasks+0x1dc>)
 8001070:	483d      	ldr	r0, [pc, #244]	; (8001168 <FreeRTOS_CreateTasks+0x1e0>)
 8001072:	f00b f922 	bl	800c2ba <xTaskCreate>
 8001076:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d00a      	beq.n	8001094 <FreeRTOS_CreateTasks+0x10c>
	__asm volatile
 800107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001082:	f383 8811 	msr	BASEPRI, r3
 8001086:	f3bf 8f6f 	isb	sy
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	60fb      	str	r3, [r7, #12]
}
 8001090:	bf00      	nop
 8001092:	e7fe      	b.n	8001092 <FreeRTOS_CreateTasks+0x10a>

    if (FlightController_Read_GY87_Handle == NULL) {
 8001094:	4b32      	ldr	r3, [pc, #200]	; (8001160 <FreeRTOS_CreateTasks+0x1d8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d104      	bne.n	80010a6 <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Read_GY87_Handle);
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <FreeRTOS_CreateTasks+0x1d8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00b fa41 	bl	800c528 <vTaskDelete>
    }

    /* Task 5: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_Write_ESCs_Handle);
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <FreeRTOS_CreateTasks+0x1e4>)
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	2301      	movs	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2300      	movs	r3, #0
 80010b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b4:	492e      	ldr	r1, [pc, #184]	; (8001170 <FreeRTOS_CreateTasks+0x1e8>)
 80010b6:	482f      	ldr	r0, [pc, #188]	; (8001174 <FreeRTOS_CreateTasks+0x1ec>)
 80010b8:	f00b f8ff 	bl	800c2ba <xTaskCreate>
 80010bc:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d00a      	beq.n	80010da <FreeRTOS_CreateTasks+0x152>
	__asm volatile
 80010c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010c8:	f383 8811 	msr	BASEPRI, r3
 80010cc:	f3bf 8f6f 	isb	sy
 80010d0:	f3bf 8f4f 	dsb	sy
 80010d4:	60bb      	str	r3, [r7, #8]
}
 80010d6:	bf00      	nop
 80010d8:	e7fe      	b.n	80010d8 <FreeRTOS_CreateTasks+0x150>

    if (FlightController_Write_ESCs_Handle == NULL) {
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <FreeRTOS_CreateTasks+0x1e4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <FreeRTOS_CreateTasks+0x1e4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00b fa1e 	bl	800c528 <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryLevel_Handle);
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <FreeRTOS_CreateTasks+0x1f0>)
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2300      	movs	r3, #0
 80010f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fa:	4920      	ldr	r1, [pc, #128]	; (800117c <FreeRTOS_CreateTasks+0x1f4>)
 80010fc:	4820      	ldr	r0, [pc, #128]	; (8001180 <FreeRTOS_CreateTasks+0x1f8>)
 80010fe:	f00b f8dc 	bl	800c2ba <xTaskCreate>
 8001102:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d00a      	beq.n	8001120 <FreeRTOS_CreateTasks+0x198>
	__asm volatile
 800110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	607b      	str	r3, [r7, #4]
}
 800111c:	bf00      	nop
 800111e:	e7fe      	b.n	800111e <FreeRTOS_CreateTasks+0x196>

    if (FlightController_BatteryLevel_Handle == NULL) {
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <FreeRTOS_CreateTasks+0x1f0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d104      	bne.n	8001132 <FreeRTOS_CreateTasks+0x1aa>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <FreeRTOS_CreateTasks+0x1f0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f00b f9fb 	bl	800c528 <vTaskDelete>
    }
}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002f8 	.word	0x200002f8
 8001140:	080116b4 	.word	0x080116b4
 8001144:	080011fd 	.word	0x080011fd
 8001148:	20000304 	.word	0x20000304
 800114c:	080116d4 	.word	0x080116d4
 8001150:	08001239 	.word	0x08001239
 8001154:	200002fc 	.word	0x200002fc
 8001158:	080116f4 	.word	0x080116f4
 800115c:	0800124d 	.word	0x0800124d
 8001160:	20000300 	.word	0x20000300
 8001164:	08011710 	.word	0x08011710
 8001168:	08001269 	.word	0x08001269
 800116c:	20000308 	.word	0x20000308
 8001170:	0801172c 	.word	0x0801172c
 8001174:	080012b5 	.word	0x080012b5
 8001178:	20000310 	.word	0x20000310
 800117c:	08011748 	.word	0x08011748
 8001180:	08001329 	.word	0x08001329

08001184 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0


}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

	while(1) {
		/* Check if flight controller is already running */
		if(FlightController_running) {
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <FlightController_StartUp+0x48>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0fb      	beq.n	800119c <FlightController_StartUp+0x8>

			/* Create system tasks */
			FreeRTOS_CreateTasks();
 80011a4:	f7ff fef0 	bl	8000f88 <FreeRTOS_CreateTasks>

			/* Create system timers */
			FreeRTOS_CreateTimers();
 80011a8:	f7ff ffec 	bl	8001184 <FreeRTOS_CreateTimers>

			/* Initialize drivers */
			rc_controller = FSA8S_Init(&huart2);
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <FlightController_StartUp+0x4c>)
 80011ae:	f001 f8e5 	bl	800237c <FSA8S_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <FlightController_StartUp+0x50>)
 80011b6:	6013      	str	r3, [r2, #0]
			hmpu6050 = MPU6050_Init(&hi2c1);
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <FlightController_StartUp+0x54>)
 80011ba:	f001 fbef 	bl	800299c <MPU6050_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <FlightController_StartUp+0x58>)
 80011c2:	6013      	str	r3, [r2, #0]
			hesc = ESC_Init(&htim3);
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <FlightController_StartUp+0x5c>)
 80011c6:	f001 f84d 	bl	8002264 <ESC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <FlightController_StartUp+0x60>)
 80011ce:	6013      	str	r3, [r2, #0]

			/* Delete this task, as initialization must happen only once */
			vTaskDelete(FlightController_StartUp_Handle);
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <FlightController_StartUp+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00b f9a7 	bl	800c528 <vTaskDelete>
		if(FlightController_running) {
 80011da:	e7df      	b.n	800119c <FlightController_StartUp+0x8>
 80011dc:	20000319 	.word	0x20000319
 80011e0:	20000ad4 	.word	0x20000ad4
 80011e4:	2000031c 	.word	0x2000031c
 80011e8:	20000a38 	.word	0x20000a38
 80011ec:	20000320 	.word	0x20000320
 80011f0:	20000a8c 	.word	0x20000a8c
 80011f4:	20000324 	.word	0x20000324
 80011f8:	200002f4 	.word	0x200002f4

080011fc <FlightController_HeartbeatLight>:
		}
	}
}

void FlightController_HeartbeatLight(void * ptr) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001208:	23fa      	movs	r3, #250	; 0xfa
 800120a:	60bb      	str	r3, [r7, #8]

    while(1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	461a      	mov	r2, r3
 8001210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <FlightController_HeartbeatLight+0x38>)
 8001216:	f002 fd73 	bl	8003d00 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e001      	b.n	800122a <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
        }

        /* Set time delay */
        vTaskDelay(xDelay);
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f00b fa0c 	bl	800c648 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001230:	e7ec      	b.n	800120c <FlightController_HeartbeatLight+0x10>
 8001232:	bf00      	nop
 8001234:	40020800 	.word	0x40020800

08001238 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001240:	2332      	movs	r3, #50	; 0x32
 8001242:	60fb      	str	r3, [r7, #12]
//    	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//    	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//    	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
//    	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);

    	vTaskDelay(xDelay);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f00b f9ff 	bl	800c648 <vTaskDelay>
 800124a:	e7fb      	b.n	8001244 <FlightController_FlightLights+0xc>

0800124c <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

    uint8_t channel = CHANNEL_9;
 8001254:	2309      	movs	r3, #9
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t channelValue;
    uint8_t str[20];

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * 10);
 800125a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800125e:	623b      	str	r3, [r7, #32]
    	/* Demo */
//    	channelValue = FSA8S_ReadChannel(rc_controller, channel);
//    	sprintf((char *)str, (const char *)"Channel %d: %d\r\n", channel, channelValue);
//    	CDC_Transmit_FS(str, strlen((const char *)str));

    	vTaskDelay(xDelay);
 8001260:	6a38      	ldr	r0, [r7, #32]
 8001262:	f00b f9f1 	bl	800c648 <vTaskDelay>
 8001266:	e7fb      	b.n	8001260 <FlightController_Read_FSA8S+0x14>

08001268 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b0b8      	sub	sp, #224	; 0xe0
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    gyroscopeValues_t * gyroscopeValues;
    accelerometerValues_t * accelerometerValues;
    uint16_t tempVal;
    magnetometerValues_t * magnetometerValues;

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001270:	2332      	movs	r3, #50	; 0x32
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
//        HAL_Delay(10);
//        sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n", accelerometerValues->accelerometerZ);
//        LOG(str2, LOG_DEBUGGING);
//        HAL_Delay(10);
//
        tempVal = MPU6050_ReadTemperatureSensor(hmpu6050);
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <FlightController_Read_GY87+0x44>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fbc6 	bl	8002a0c <MPU6050_ReadTemperatureSensor>
 8001280:	4603      	mov	r3, r0
 8001282:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n", tempVal);
 8001286:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 800128a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <FlightController_Read_GY87+0x48>)
 8001290:	4618      	mov	r0, r3
 8001292:	f00e f927 	bl	800f4e4 <siprintf>
        LOG(str3, LOG_DEBUGGING);
 8001296:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129a:	2101      	movs	r1, #1
 800129c:	4618      	mov	r0, r3
 800129e:	f001 fbf5 	bl	8002a8c <LOG>
//
//        int16_t heading = MPU6050_ReadMagnetometerHeading(hmpu6050);
//        sprintf((char *)str4, (const char *)"Heading Value: %d\r\n\n", heading);
//        LOG(str4, LOG_DEBUGGING);

        vTaskDelay(xDelay);
 80012a2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80012a6:	f00b f9cf 	bl	800c648 <vTaskDelay>
        tempVal = MPU6050_ReadTemperatureSensor(hmpu6050);
 80012aa:	e7e4      	b.n	8001276 <FlightController_Read_GY87+0xe>
 80012ac:	20000320 	.word	0x20000320
 80012b0:	08011768 	.word	0x08011768

080012b4 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	/* Change delay from time in [ms] to ticks */
	const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80012bc:	2332      	movs	r3, #50	; 0x32
 80012be:	60fb      	str	r3, [r7, #12]

    while(1) {

//        ESC_SetSpeed(hesc, hesc->channel3, channel_test/10);

        vTaskDelay(xDelay);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f00b f9c1 	bl	800c648 <vTaskDelay>
 80012c6:	e7fb      	b.n	80012c0 <FlightController_Write_ESCs+0xc>

080012c8 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]

	/* Change delay from time in [ms] to ticks */
	const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80012d0:	2332      	movs	r3, #50	; 0x32
 80012d2:	60fb      	str	r3, [r7, #12]

	while(1) {

		/* Check On/Off Button status */
		if(!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80012d4:	2120      	movs	r1, #32
 80012d6:	4810      	ldr	r0, [pc, #64]	; (8001318 <FlightController_OnOffButton+0x50>)
 80012d8:	f002 fcfa 	bl	8003cd0 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d115      	bne.n	800130e <FlightController_OnOffButton+0x46>
			/* User is trying to turn it on or off */
			if(!Timer1_running) {
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <FlightController_OnOffButton+0x54>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f083 0301 	eor.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00e      	beq.n	800130e <FlightController_OnOffButton+0x46>

				xTimerStart(Timer1_Handle, 0);
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <FlightController_OnOffButton+0x58>)
 80012f2:	681c      	ldr	r4, [r3, #0]
 80012f4:	f00b fb7e 	bl	800c9f4 <xTaskGetTickCount>
 80012f8:	4602      	mov	r2, r0
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	2101      	movs	r1, #1
 8001302:	4620      	mov	r0, r4
 8001304:	f00c f854 	bl	800d3b0 <xTimerGenericCommand>
				Timer1_running = true;
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <FlightController_OnOffButton+0x54>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Set time delay */
		vTaskDelay(xDelay);
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f00b f99a 	bl	800c648 <vTaskDelay>
		if(!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001314:	e7de      	b.n	80012d4 <FlightController_OnOffButton+0xc>
 8001316:	bf00      	nop
 8001318:	40020400 	.word	0x40020400
 800131c:	20000318 	.word	0x20000318
 8001320:	20000314 	.word	0x20000314
 8001324:	00000000 	.word	0x00000000

08001328 <FlightController_BatteryLevel>:
	}
}

void FlightController_BatteryLevel(void * ptr) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
#ifdef MAIN_APP_USE_LOGGING
	uint8_t loggingStr[50];
#endif

	/* Change delay from time in [ms] to ticks */
	const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * 10);
 8001330:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001334:	61fb      	str	r3, [r7, #28]
	uint16_t adcValue;
	double batteryLevel = 3.3;
 8001336:	a320      	add	r3, pc, #128	; (adr r3, 80013b8 <FlightController_BatteryLevel+0x90>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	while(1) {

	    // Start ADC Conversion
		HAL_ADC_Start(&hadc1);
 8001340:	4823      	ldr	r0, [pc, #140]	; (80013d0 <FlightController_BatteryLevel+0xa8>)
 8001342:	f001 fcdf 	bl	8002d04 <HAL_ADC_Start>

	    // Poll ADC peripheral
		HAL_ADC_PollForConversion(&hadc1, 1);
 8001346:	2101      	movs	r1, #1
 8001348:	4821      	ldr	r0, [pc, #132]	; (80013d0 <FlightController_BatteryLevel+0xa8>)
 800134a:	f001 fd8f 	bl	8002e6c <HAL_ADC_PollForConversion>

		// Read ADC value
		adcValue = HAL_ADC_GetValue(&hadc1);
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <FlightController_BatteryLevel+0xa8>)
 8001350:	f001 fe17 	bl	8002f82 <HAL_ADC_GetValue>
 8001354:	4603      	mov	r3, r0
 8001356:	81fb      	strh	r3, [r7, #14]

		// Convert ADC value to real value
		batteryLevel = (adcValue * 3.3) / 4096;
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8ea 	bl	8000534 <__aeabi_i2d>
 8001360:	a315      	add	r3, pc, #84	; (adr r3, 80013b8 <FlightController_BatteryLevel+0x90>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff f94f 	bl	8000608 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <FlightController_BatteryLevel+0xac>)
 8001378:	f7ff fa70 	bl	800085c <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	e9c7 2304 	strd	r2, r3, [r7, #16]

		// Correct real value, as when battery full, ADC input is not 3.3V
		batteryLevel = batteryLevel * 1.046046;
 8001384:	a30e      	add	r3, pc, #56	; (adr r3, 80013c0 <FlightController_BatteryLevel+0x98>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800138e:	f7ff f93b 	bl	8000608 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9c7 2304 	strd	r2, r3, [r7, #16]

		// Map real value to battery levels
		batteryLevel = batteryLevel * 3.363636;
 800139a:	a30b      	add	r3, pc, #44	; (adr r3, 80013c8 <FlightController_BatteryLevel+0xa0>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013a4:	f7ff f930 	bl	8000608 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
		sprintf((char *)loggingStr, "Battery Level: %.2f[V]\r\n\n", batteryLevel);
		LOG(loggingStr, LOG_INFORMATION);
#endif

		/* Set time delay */
		vTaskDelay(xDelay);
 80013b0:	69f8      	ldr	r0, [r7, #28]
 80013b2:	f00b f949 	bl	800c648 <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 80013b6:	e7c3      	b.n	8001340 <FlightController_BatteryLevel+0x18>
 80013b8:	66666666 	.word	0x66666666
 80013bc:	400a6666 	.word	0x400a6666
 80013c0:	bb01c92e 	.word	0xbb01c92e
 80013c4:	3ff0bc9a 	.word	0x3ff0bc9a
 80013c8:	fdbd2fa1 	.word	0xfdbd2fa1
 80013cc:	400ae8b9 	.word	0x400ae8b9
 80013d0:	200009f0 	.word	0x200009f0
 80013d4:	40b00000 	.word	0x40b00000

080013d8 <Timer1_Callback>:
	}
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af02      	add	r7, sp, #8
 80013de:	6078      	str	r0, [r7, #4]

	/* Get no. of times this timer has expired */
	uint32_t ulCount = (uint32_t) pvTimerGetTimerID(xTimer);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f00c faeb 	bl	800d9bc <pvTimerGetTimerID>
 80013e6:	4603      	mov	r3, r0
 80013e8:	60fb      	str	r3, [r7, #12]

	/* Get timer period */
	uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f00c f82e 	bl	800d44c <xTimerGetPeriod>
 80013f0:	60b8      	str	r0, [r7, #8]

	/* Increment the count */
	ulCount++;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]

	if(ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 80013f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d339      	bcc.n	800147c <Timer1_Callback+0xa4>
		/* Check if On/Off Button is still pressed after 3 seconds */
		if(!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001408:	2120      	movs	r1, #32
 800140a:	4821      	ldr	r0, [pc, #132]	; (8001490 <Timer1_Callback+0xb8>)
 800140c:	f002 fc60 	bl	8003cd0 <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d122      	bne.n	800145c <Timer1_Callback+0x84>

			if(!FlightController_running) {
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <Timer1_Callback+0xbc>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f083 0301 	eor.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <Timer1_Callback+0x5e>
				/* Flight controller was off */
				/* User turned it on */
				/* Turn on flight controller */
				HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 8001424:	2201      	movs	r2, #1
 8001426:	2110      	movs	r1, #16
 8001428:	4819      	ldr	r0, [pc, #100]	; (8001490 <Timer1_Callback+0xb8>)
 800142a:	f002 fc69 	bl	8003d00 <HAL_GPIO_WritePin>

				FlightController_running = true;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <Timer1_Callback+0xbc>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	e012      	b.n	800145c <Timer1_Callback+0x84>
			} else {
				/* Flight controller was on */
				/* User turned it off */
				/* Suspend HeartbeatLight task and turn LED on */
				vTaskSuspend(FlightController_HeartbeatLight_Handle);
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <Timer1_Callback+0xc0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f00b f938 	bl	800c6b0 <vTaskSuspend>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <Timer1_Callback+0xc4>)
 8001448:	f002 fc5a 	bl	8003d00 <HAL_GPIO_WritePin>

				FlightController_running = false;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <Timer1_Callback+0xbc>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

				/* Turn off flight controller */
				HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2110      	movs	r1, #16
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <Timer1_Callback+0xb8>)
 8001458:	f002 fc52 	bl	8003d00 <HAL_GPIO_WritePin>
			}
		}

		/* Stop Timer1 */
		xTimerStop(xTimer, 0);
 800145c:	2300      	movs	r3, #0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2300      	movs	r3, #0
 8001462:	2200      	movs	r2, #0
 8001464:	2103      	movs	r1, #3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f00b ffa2 	bl	800d3b0 <xTimerGenericCommand>
		vTimerSetTimerID(xTimer, (void *) 0);
 800146c:	2100      	movs	r1, #0
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f00c fac4 	bl	800d9fc <vTimerSetTimerID>

		/* Reset running flag */
		Timer1_running = false;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <Timer1_Callback+0xc8>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
	} else {
		/* Store the incremented count back into the timer's ID */
		vTimerSetTimerID(xTimer, (void *) ulCount);
	}
}
 800147a:	e004      	b.n	8001486 <Timer1_Callback+0xae>
		vTimerSetTimerID(xTimer, (void *) ulCount);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f00c fabb 	bl	800d9fc <vTimerSetTimerID>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40020400 	.word	0x40020400
 8001494:	20000319 	.word	0x20000319
 8001498:	200002f8 	.word	0x200002f8
 800149c:	40020800 	.word	0x40020800
 80014a0:	20000318 	.word	0x20000318

080014a4 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0

    /* Welcome message */
    LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 80014a8:	2100      	movs	r1, #0
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <FlightController_Init+0x14>)
 80014ac:	f001 faee 	bl	8002a8c <LOG>

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 80014b0:	f7ff fd00 	bl	8000eb4 <FreeRTOS_CreateStartUpTasks>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08011784 	.word	0x08011784

080014bc <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80014cc:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <vApplicationGetIdleTaskMemory+0x30>)
 80014d2:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000328 	.word	0x20000328
 80014ec:	2000038c 	.word	0x2000038c

080014f0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a07      	ldr	r2, [pc, #28]	; (800151c <vApplicationGetTimerTaskMemory+0x2c>)
 8001500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <vApplicationGetTimerTaskMemory+0x30>)
 8001506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	2000058c 	.word	0x2000058c
 8001520:	200005f0 	.word	0x200005f0

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f001 fb11 	bl	8002b50 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f827 	bl	8001580 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f000 f9cd 	bl	80018d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001536:	f000 f9b1 	bl	800189c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800153a:	f000 f985 	bl	8001848 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800153e:	f000 f8db 	bl	80016f8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001542:	f000 f907 	bl	8001754 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001546:	f000 f885 	bl	8001654 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 800154a:	f7ff ffab 	bl	80014a4 <FlightController_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <main+0x54>)
 8001550:	1d3c      	adds	r4, r7, #4
 8001552:	461d      	mov	r5, r3
 8001554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800155c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f00a f84e 	bl	800b606 <osThreadCreate>
 800156a:	4603      	mov	r3, r0
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <main+0x58>)
 800156e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001570:	f00a f842 	bl	800b5f8 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 8001574:	e7fe      	b.n	8001574 <main+0x50>
 8001576:	bf00      	nop
 8001578:	080117b8 	.word	0x080117b8
 800157c:	20000b78 	.word	0x20000b78

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b094      	sub	sp, #80	; 0x50
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2230      	movs	r2, #48	; 0x30
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f00e f80b 	bl	800f5aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <SystemClock_Config+0xcc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a27      	ldr	r2, [pc, #156]	; (800164c <SystemClock_Config+0xcc>)
 80015ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <SystemClock_Config+0xcc>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <SystemClock_Config+0xd0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015cc:	4a20      	ldr	r2, [pc, #128]	; (8001650 <SystemClock_Config+0xd0>)
 80015ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <SystemClock_Config+0xd0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ea:	2302      	movs	r3, #2
 80015ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015f4:	2319      	movs	r3, #25
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80015f8:	2390      	movs	r3, #144	; 0x90
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001600:	2303      	movs	r3, #3
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fdcf 	bl	80061ac <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001614:	f000 f9ea 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	230f      	movs	r3, #15
 800161a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2302      	movs	r3, #2
 800161e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2102      	movs	r1, #2
 8001634:	4618      	mov	r0, r3
 8001636:	f005 f831 	bl	800669c <HAL_RCC_ClockConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001640:	f000 f9d4 	bl	80019ec <Error_Handler>
  }
}
 8001644:	bf00      	nop
 8001646:	3750      	adds	r7, #80	; 0x50
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165a:	463b      	mov	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <MX_ADC1_Init+0x98>)
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <MX_ADC1_Init+0x9c>)
 800166a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_ADC1_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_ADC1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_ADC1_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_ADC1_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_ADC1_Init+0x98>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_ADC1_Init+0x98>)
 800168e:	2200      	movs	r2, #0
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_ADC1_Init+0x98>)
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <MX_ADC1_Init+0xa0>)
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_ADC1_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_ADC1_Init+0x98>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_ADC1_Init+0x98>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_ADC1_Init+0x98>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b2:	480e      	ldr	r0, [pc, #56]	; (80016ec <MX_ADC1_Init+0x98>)
 80016b4:	f001 fae2 	bl	8002c7c <HAL_ADC_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016be:	f000 f995 	bl	80019ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ce:	463b      	mov	r3, r7
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_ADC1_Init+0x98>)
 80016d4:	f001 fc62 	bl	8002f9c <HAL_ADC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016de:	f000 f985 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200009f0 	.word	0x200009f0
 80016f0:	40012000 	.word	0x40012000
 80016f4:	0f000001 	.word	0x0f000001

080016f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_I2C1_Init+0x50>)
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <MX_I2C1_Init+0x54>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_I2C1_Init+0x50>)
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_I2C1_Init+0x58>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_I2C1_Init+0x50>)
 8001716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_I2C1_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_I2C1_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_I2C1_Init+0x50>)
 8001736:	f002 fafd 	bl	8003d34 <HAL_I2C_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001740:	f000 f954 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000a38 	.word	0x20000a38
 800174c:	40005400 	.word	0x40005400
 8001750:	000186a0 	.word	0x000186a0

08001754 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <MX_TIM3_Init+0xec>)
 8001778:	4a32      	ldr	r2, [pc, #200]	; (8001844 <MX_TIM3_Init+0xf0>)
 800177a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800177c:	4b30      	ldr	r3, [pc, #192]	; (8001840 <MX_TIM3_Init+0xec>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <MX_TIM3_Init+0xec>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <MX_TIM3_Init+0xec>)
 800178a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <MX_TIM3_Init+0xec>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <MX_TIM3_Init+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800179c:	4828      	ldr	r0, [pc, #160]	; (8001840 <MX_TIM3_Init+0xec>)
 800179e:	f005 f95d 	bl	8006a5c <HAL_TIM_PWM_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017a8:	f000 f920 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	4619      	mov	r1, r3
 80017ba:	4821      	ldr	r0, [pc, #132]	; (8001840 <MX_TIM3_Init+0xec>)
 80017bc:	f005 fd42 	bl	8007244 <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017c6:	f000 f911 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ca:	2360      	movs	r3, #96	; 0x60
 80017cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	4817      	ldr	r0, [pc, #92]	; (8001840 <MX_TIM3_Init+0xec>)
 80017e2:	f005 fa3b 	bl	8006c5c <HAL_TIM_PWM_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80017ec:	f000 f8fe 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2204      	movs	r2, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4812      	ldr	r0, [pc, #72]	; (8001840 <MX_TIM3_Init+0xec>)
 80017f8:	f005 fa30 	bl	8006c5c <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001802:	f000 f8f3 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2208      	movs	r2, #8
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <MX_TIM3_Init+0xec>)
 800180e:	f005 fa25 	bl	8006c5c <HAL_TIM_PWM_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001818:	f000 f8e8 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	220c      	movs	r2, #12
 8001820:	4619      	mov	r1, r3
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <MX_TIM3_Init+0xec>)
 8001824:	f005 fa1a 	bl	8006c5c <HAL_TIM_PWM_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800182e:	f000 f8dd 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001832:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_TIM3_Init+0xec>)
 8001834:	f000 f9bc 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000a8c 	.word	0x20000a8c
 8001844:	40000400 	.word	0x40000400

08001848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <MX_USART2_UART_Init+0x50>)
 8001850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 800186e:	2204      	movs	r2, #4
 8001870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001880:	f005 fd4e 	bl	8007320 <HAL_UART_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800188a:	f000 f8af 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000ad4 	.word	0x20000ad4
 8001898:	40004400 	.word	0x40004400

0800189c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_DMA_Init+0x30>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <MX_DMA_Init+0x30>)
 80018ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_DMA_Init+0x30>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b38      	ldr	r3, [pc, #224]	; (80019cc <MX_GPIO_Init+0xfc>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a37      	ldr	r2, [pc, #220]	; (80019cc <MX_GPIO_Init+0xfc>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <MX_GPIO_Init+0xfc>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <MX_GPIO_Init+0xfc>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a30      	ldr	r2, [pc, #192]	; (80019cc <MX_GPIO_Init+0xfc>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <MX_GPIO_Init+0xfc>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <MX_GPIO_Init+0xfc>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a29      	ldr	r2, [pc, #164]	; (80019cc <MX_GPIO_Init+0xfc>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <MX_GPIO_Init+0xfc>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <MX_GPIO_Init+0xfc>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a22      	ldr	r2, [pc, #136]	; (80019cc <MX_GPIO_Init+0xfc>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <MX_GPIO_Init+0xfc>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800195c:	481c      	ldr	r0, [pc, #112]	; (80019d0 <MX_GPIO_Init+0x100>)
 800195e:	f002 f9cf 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	f241 1114 	movw	r1, #4372	; 0x1114
 8001968:	481a      	ldr	r0, [pc, #104]	; (80019d4 <MX_GPIO_Init+0x104>)
 800196a:	f002 f9c9 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED4_Pin;
 800196e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4812      	ldr	r0, [pc, #72]	; (80019d0 <MX_GPIO_Init+0x100>)
 8001988:	f002 f81e 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin;
 800198c:	f241 1314 	movw	r3, #4372	; 0x1114
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <MX_GPIO_Init+0x104>)
 80019a6:	f002 f80f 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
  GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 80019aa:	2320      	movs	r3, #32
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_GPIO_Init+0x104>)
 80019be:	f002 f803 	bl	80039c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020400 	.word	0x40020400

080019d8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80019e0:	f00c fa9e 	bl	800df20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f009 fe5a 	bl	800b69e <osDelay>
 80019ea:	e7fb      	b.n	80019e4 <StartDefaultTask+0xc>

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_MspInit+0x54>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_MspInit+0x54>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_MspInit+0x54>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_MspInit+0x54>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_MspInit+0x54>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_MspInit+0x54>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	f06f 0001 	mvn.w	r0, #1
 8001a42:	f001 fda4 	bl	800358e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_ADC_MspInit+0x7c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d127      	bne.n	8001ac6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_ADC_MspInit+0x80>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <HAL_ADC_MspInit+0x80>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_ADC_MspInit+0x80>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_ADC_MspInit+0x80>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_ADC_MspInit+0x80>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_ADC_MspInit+0x80>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_ADC_MspInit+0x84>)
 8001ac2:	f001 ff81 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40012000 	.word	0x40012000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000

08001adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_I2C_MspInit+0x84>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d12b      	bne.n	8001b56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_I2C_MspInit+0x88>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_I2C_MspInit+0x88>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_I2C_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b1a:	23c0      	movs	r3, #192	; 0xc0
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <HAL_I2C_MspInit+0x8c>)
 8001b36:	f001 ff47 	bl	80039c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_I2C_MspInit+0x88>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_I2C_MspInit+0x88>)
 8001b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_I2C_MspInit+0x88>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40005400 	.word	0x40005400
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020400 	.word	0x40020400

08001b6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10d      	bne.n	8001b9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_TIM_PWM_MspInit+0x40>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_TIM_PWM_MspInit+0x40>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_TIM_PWM_MspInit+0x40>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_TIM_MspPostInit+0xa4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d13b      	bne.n	8001c4a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_TIM_MspPostInit+0xa8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_TIM_MspPostInit+0xa8>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_TIM_MspPostInit+0xa8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_TIM_MspPostInit+0xa8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <HAL_TIM_MspPostInit+0xa8>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_TIM_MspPostInit+0xa8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c0a:	23c0      	movs	r3, #192	; 0xc0
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <HAL_TIM_MspPostInit+0xac>)
 8001c26:	f001 fecf 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4806      	ldr	r0, [pc, #24]	; (8001c60 <HAL_TIM_MspPostInit+0xb0>)
 8001c46:	f001 febf 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_UART_MspInit+0xe4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d15b      	bne.n	8001d3e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_UART_MspInit+0xe8>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <HAL_UART_MspInit+0xe8>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_UART_MspInit+0xe8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_UART_MspInit+0xe8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <HAL_UART_MspInit+0xe8>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_UART_MspInit+0xe8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481d      	ldr	r0, [pc, #116]	; (8001d50 <HAL_UART_MspInit+0xec>)
 8001cda:	f001 fe75 	bl	80039c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_UART_MspInit+0xf4>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d12:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001d16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d1a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d22:	480c      	ldr	r0, [pc, #48]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001d24:	f001 fc6a 	bl	80035fc <HAL_DMA_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001d2e:	f7ff fe5d 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_UART_MspInit+0xf0>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	; 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40004400 	.word	0x40004400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	20000b18 	.word	0x20000b18
 8001d58:	40026088 	.word	0x40026088

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 ff32 	bl	8002bf4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d90:	f00b f960 	bl	800d054 <xTaskGetSchedulerState>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d9a:	f00c f80d 	bl	800ddb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <OTG_FS_IRQHandler+0x10>)
 8001daa:	f003 f8d2 	bl	8004f52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20001ad8 	.word	0x20001ad8

08001db8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
    return 1;
 8001dbc:	2301      	movs	r3, #1
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_kill>:

int _kill(int pid, int sig) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8001dd2:	f00d fc5b 	bl	800f68c <__errno>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2216      	movs	r2, #22
 8001dda:	601a      	str	r2, [r3, #0]
    return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_exit>:

void _exit(int status) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffe7 	bl	8001dc8 <_kill>
    while (1) {
 8001dfa:	e7fe      	b.n	8001dfa <_exit+0x12>

08001dfc <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00a      	b.n	8001e24 <_read+0x28>
        *ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4601      	mov	r1, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf0      	blt.n	8001e0e <_read+0x12>
    }

    return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e009      	b.n	8001e5c <_write+0x26>
        __io_putchar(*ptr++);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf1      	blt.n	8001e48 <_write+0x12>
    }
    return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_close>:

int _close(int file) {
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_fstat>:

int _fstat(int file, struct stat * st) {
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	605a      	str	r2, [r3, #4]
    return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file) {
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
        errno = ENOMEM;
 8001f08:	f00d fbc0 	bl	800f68c <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20010000 	.word	0x20010000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	20000b7c 	.word	0x20000b7c
 8001f40:	20002350 	.word	0x20002350

08001f44 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6e:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f84:	4c0b      	ldr	r4, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f92:	f7ff ffd7 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f00d fb7f 	bl	800f698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff fac3 	bl	8001524 <main>
  bx  lr
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001fac:	08011c14 	.word	0x08011c14
  ldr r2, =_sbss
 8001fb0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001fb4:	20002350 	.word	0x20002350

08001fb8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc, uint32_t channel) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]

    /* Check parameters */
    if (NULL == hesc) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <PWM_Init+0x14>
        return false;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e043      	b.n	8002058 <PWM_Init+0x9c>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d010      	beq.n	8001ffc <PWM_Init+0x40>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d00b      	beq.n	8001ffc <PWM_Init+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d006      	beq.n	8001ffc <PWM_Init+0x40>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <PWM_Init+0x40>
        return false;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e02d      	b.n	8002058 <PWM_Init+0x9c>
    }

    /* Initialize ESC_HandleTypeDef structure */
    /* BEGIN MODIFY 1 */
    hesc->channel1 = TIM_CHANNEL_1;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
    hesc->channel2 = TIM_CHANNEL_2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2204      	movs	r2, #4
 8002006:	609a      	str	r2, [r3, #8]
    hesc->channel3 = TIM_CHANNEL_3;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2208      	movs	r2, #8
 800200c:	60da      	str	r2, [r3, #12]
    hesc->channel4 = TIM_CHANNEL_4;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	220c      	movs	r2, #12
 8002012:	611a      	str	r2, [r3, #16]
    hesc->CCR1 = (uint32_t *)&(TIM3->CCR1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <PWM_Init+0xa4>)
 8002018:	615a      	str	r2, [r3, #20]
    hesc->CCR2 = (uint32_t *)&(TIM3->CCR2);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a11      	ldr	r2, [pc, #68]	; (8002064 <PWM_Init+0xa8>)
 800201e:	619a      	str	r2, [r3, #24]
    hesc->CCR3 = (uint32_t *)&(TIM3->CCR3);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a11      	ldr	r2, [pc, #68]	; (8002068 <PWM_Init+0xac>)
 8002024:	61da      	str	r2, [r3, #28]
    hesc->CCR4 = (uint32_t *)&(TIM3->CCR4);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a10      	ldr	r2, [pc, #64]	; (800206c <PWM_Init+0xb0>)
 800202a:	621a      	str	r2, [r3, #32]
    /* END MODIFY 1 */

    /* Initialize timer peripheral */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Init(hesc->htim)) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fd13 	bl	8006a5c <HAL_TIM_PWM_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <PWM_Init+0x84>
        /* END MODIFY 2 */
        return false;
 800203c:	2300      	movs	r3, #0
 800203e:	e00b      	b.n	8002058 <PWM_Init+0x9c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, channel)) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f004 fd58 	bl	8006afc <HAL_TIM_PWM_Start>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <PWM_Init+0x9a>
        /* END MODIFY 3 */
        return false;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <PWM_Init+0x9c>
    }

    return true;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40000434 	.word	0x40000434
 8002064:	40000438 	.word	0x40000438
 8002068:	4000043c 	.word	0x4000043c
 800206c:	40000440 	.word	0x40000440

08002070 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint32_t channel, uint16_t dutyCycle) {
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	80fb      	strh	r3, [r7, #6]

    /* Check parameters */
    if (NULL == hesc) {
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <PWM_SetDutyCycle+0x18>
        return false;
 8002084:	2300      	movs	r3, #0
 8002086:	e046      	b.n	8002116 <PWM_SetDutyCycle+0xa6>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	429a      	cmp	r2, r3
 8002090:	d010      	beq.n	80020b4 <PWM_SetDutyCycle+0x44>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	d00b      	beq.n	80020b4 <PWM_SetDutyCycle+0x44>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d006      	beq.n	80020b4 <PWM_SetDutyCycle+0x44>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <PWM_SetDutyCycle+0x44>
        return false;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e030      	b.n	8002116 <PWM_SetDutyCycle+0xa6>
    }
    if (dutyCycle > MAX_PWM_VALUE) {
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020ba:	d301      	bcc.n	80020c0 <PWM_SetDutyCycle+0x50>
        return false;
 80020bc:	2300      	movs	r3, #0
 80020be:	e02a      	b.n	8002116 <PWM_SetDutyCycle+0xa6>
    }

    /* Set duty cycle */
    if (hesc->channel1 == channel) {
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d104      	bne.n	80020d4 <PWM_SetDutyCycle+0x64>

        *(hesc->CCR1) = dutyCycle;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	88fa      	ldrh	r2, [r7, #6]
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e01f      	b.n	8002114 <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel2 == channel) {
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d104      	bne.n	80020e8 <PWM_SetDutyCycle+0x78>

        *(hesc->CCR2) = dutyCycle;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	88fa      	ldrh	r2, [r7, #6]
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e015      	b.n	8002114 <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel3 == channel) {
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d104      	bne.n	80020fc <PWM_SetDutyCycle+0x8c>

        *(hesc->CCR3) = dutyCycle;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	88fa      	ldrh	r2, [r7, #6]
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e00b      	b.n	8002114 <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel4 == channel) {
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	d104      	bne.n	8002110 <PWM_SetDutyCycle+0xa0>

        *(hesc->CCR4) = dutyCycle;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e001      	b.n	8002114 <PWM_SetDutyCycle+0xa4>
    } else {

        return false;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <PWM_SetDutyCycle+0xa6>
    }

    return true;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <ESC_SetTimeDelay>:

void ESC_SetTimeDelay(uint32_t delay) {
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
/* Set delay */
#ifdef USE_FREERTOS
    const TickType_t xDelay = pdMS_TO_TICKS(delay);
    vTaskDelay(xDelay);
#else
    HAL_Delay(delay);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fd82 	bl	8002c34 <HAL_Delay>
#endif
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <ESC_AutoCalibrate>:
    *pwmValue = (MAX_ESC_SPEED - MIN_ESC_SPEED) * (speed / 100) + MIN_ESC_SPEED;

    return true;
}

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <ESC_AutoCalibrate+0x12>
        return false;
 8002146:	2300      	movs	r3, #0
 8002148:	e088      	b.n	800225c <ESC_AutoCalibrate+0x124>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->channel1, MAX_ESC_SPEED)) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f240 6266 	movw	r2, #1638	; 0x666
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff8b 	bl	8002070 <PWM_SetDutyCycle>
 800215a:	4603      	mov	r3, r0
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <ESC_AutoCalibrate+0x32>
        return false;
 8002166:	2300      	movs	r3, #0
 8002168:	e078      	b.n	800225c <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel2, MAX_ESC_SPEED)) {
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f240 6266 	movw	r2, #1638	; 0x666
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff7b 	bl	8002070 <PWM_SetDutyCycle>
 800217a:	4603      	mov	r3, r0
 800217c:	f083 0301 	eor.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <ESC_AutoCalibrate+0x52>
        return false;
 8002186:	2300      	movs	r3, #0
 8002188:	e068      	b.n	800225c <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel3, MAX_ESC_SPEED)) {
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f240 6266 	movw	r2, #1638	; 0x666
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff6b 	bl	8002070 <PWM_SetDutyCycle>
 800219a:	4603      	mov	r3, r0
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <ESC_AutoCalibrate+0x72>
        return false;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e058      	b.n	800225c <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel4, MAX_ESC_SPEED)) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f240 6266 	movw	r2, #1638	; 0x666
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff5b 	bl	8002070 <PWM_SetDutyCycle>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f083 0301 	eor.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <ESC_AutoCalibrate+0x92>
        return false;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e048      	b.n	800225c <ESC_AutoCalibrate+0x124>
    }

    /* Wait 2 seconds */
    ESC_SetTimeDelay(ESC_AUTOCALIBRATION_WAIT_TIME_1);
 80021ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021ce:	f7ff ffa8 	bl	8002122 <ESC_SetTimeDelay>

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->channel1, MIN_ESC_SPEED)) {
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f240 3233 	movw	r2, #819	; 0x333
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff47 	bl	8002070 <PWM_SetDutyCycle>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f083 0301 	eor.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <ESC_AutoCalibrate+0xba>
        return false;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e034      	b.n	800225c <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel2, MIN_ESC_SPEED)) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f240 3233 	movw	r2, #819	; 0x333
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff37 	bl	8002070 <PWM_SetDutyCycle>
 8002202:	4603      	mov	r3, r0
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <ESC_AutoCalibrate+0xda>
        return false;
 800220e:	2300      	movs	r3, #0
 8002210:	e024      	b.n	800225c <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel3, MIN_ESC_SPEED)) {
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f240 3233 	movw	r2, #819	; 0x333
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff27 	bl	8002070 <PWM_SetDutyCycle>
 8002222:	4603      	mov	r3, r0
 8002224:	f083 0301 	eor.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <ESC_AutoCalibrate+0xfa>
        return false;
 800222e:	2300      	movs	r3, #0
 8002230:	e014      	b.n	800225c <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel4, MIN_ESC_SPEED)) {
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f240 3233 	movw	r2, #819	; 0x333
 800223a:	4619      	mov	r1, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff17 	bl	8002070 <PWM_SetDutyCycle>
 8002242:	4603      	mov	r3, r0
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <ESC_AutoCalibrate+0x11a>
        return false;
 800224e:	2300      	movs	r3, #0
 8002250:	e004      	b.n	800225c <ESC_AutoCalibrate+0x124>
    }

    /* Wait 1 second */
    ESC_SetTimeDelay(ESC_AUTOCALIBRATION_WAIT_TIME_2);
 8002252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002256:	f7ff ff64 	bl	8002122 <ESC_SetTimeDelay>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <ESC_Init+0x12>
        return NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	e060      	b.n	8002338 <ESC_Init+0xd4>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 8002276:	2024      	movs	r0, #36	; 0x24
 8002278:	f00b fe2e 	bl	800ded8 <pvPortMalloc>
 800227c:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <ESC_Init+0x28>
        hesc->htim = htim;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e002      	b.n	8002292 <ESC_Init+0x2e>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f00b fe35 	bl	800defc <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc, hesc->channel1)) {
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4619      	mov	r1, r3
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff fe8f 	bl	8001fbc <PWM_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	f083 0301 	eor.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <ESC_Init+0x50>
        LOG((uint8_t *)"ESC 1 couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f00b fe26 	bl	800defc <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e041      	b.n	8002338 <ESC_Init+0xd4>
    }
    if (false == PWM_Init(hesc, hesc->channel2)) {
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4619      	mov	r1, r3
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff fe7e 	bl	8001fbc <PWM_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <ESC_Init+0x72>
        LOG((uint8_t *)"ESC 2 couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f00b fe15 	bl	800defc <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e030      	b.n	8002338 <ESC_Init+0xd4>
    }
    if (false == PWM_Init(hesc, hesc->channel3)) {
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4619      	mov	r1, r3
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff fe6d 	bl	8001fbc <PWM_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <ESC_Init+0x94>
        LOG((uint8_t *)"ESC 3 couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f00b fe04 	bl	800defc <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e01f      	b.n	8002338 <ESC_Init+0xd4>
    }
    if (false == PWM_Init(hesc, hesc->channel4)) {
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	4619      	mov	r1, r3
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff fe5c 	bl	8001fbc <PWM_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d004      	beq.n	800231a <ESC_Init+0xb6>
        LOG((uint8_t *)"ESC 4 couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f00b fdf3 	bl	800defc <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8002316:	2300      	movs	r3, #0
 8002318:	e00e      	b.n	8002338 <ESC_Init+0xd4>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff ff0c 	bl	8002138 <ESC_AutoCalibrate>
 8002320:	4603      	mov	r3, r0
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <ESC_Init+0xd2>
        LOG((uint8_t *)"ESCs couldn't be auto-calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f00b fde5 	bl	800defc <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <ESC_Init+0xd4>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <IBUS_Init+0x12>
        return false;
 800234e:	2300      	movs	r3, #0
 8002350:	e00f      	b.n	8002372 <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7a1b      	ldrb	r3, [r3, #8]
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	f005 f82a 	bl	80073ba <HAL_UART_Receive_DMA>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <FSA8S_Init>:
        }
    }
}

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <FSA8S_Init+0x12>
        return NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	e04a      	b.n	8002424 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <FSA8S_Init+0xb0>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <FSA8S_Init+0x1e>
        return NULL;
 8002396:	2300      	movs	r3, #0
 8002398:	e044      	b.n	8002424 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *) pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 800239a:	2014      	movs	r0, #20
 800239c:	f00b fd9c 	bl	800ded8 <pvPortMalloc>
 80023a0:	6178      	str	r0, [r7, #20]
    uint8_t * buffer =  (uint8_t *) pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 80023a2:	2020      	movs	r0, #32
 80023a4:	f00b fd98 	bl	800ded8 <pvPortMalloc>
 80023a8:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *) pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 80023aa:	201c      	movs	r0, #28
 80023ac:	f00b fd94 	bl	800ded8 <pvPortMalloc>
 80023b0:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *) malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *) malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00f      	beq.n	80023d8 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2220      	movs	r2, #32
 80023c8:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	220e      	movs	r2, #14
 80023d4:	741a      	strb	r2, [r3, #16]
 80023d6:	e00c      	b.n	80023f2 <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	f00b fd8d 	bl	800defc <vPortFree>
        vPortFree(hibus->data);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00b fd88 	bl	800defc <vPortFree>
        vPortFree(hibus);
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f00b fd85 	bl	800defc <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff ffa4 	bl	8002340 <IBUS_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <FSA8S_Init+0xb0>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
        return hibus;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	e00d      	b.n	8002424 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	f00b fd75 	bl	800defc <vPortFree>
        vPortFree(hibus->data);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4618      	mov	r0, r3
 8002418:	f00b fd70 	bl	800defc <vPortFree>
        vPortFree(hibus);
 800241c:	6978      	ldr	r0, [r7, #20]
 800241e:	f00b fd6d 	bl	800defc <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 8002422:	2300      	movs	r3, #0
    }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000b80 	.word	0x20000b80

08002430 <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af02      	add	r7, sp, #8
 8002436:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <I2C_Init+0x12>
        return false;
 800243e:	2300      	movs	r3, #0
 8002440:	e010      	b.n	8002464 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6858      	ldr	r0, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7a19      	ldrb	r1, [r3, #8]
 800244a:	f107 030f 	add.w	r3, r7, #15
 800244e:	2201      	movs	r2, #1
 8002450:	9200      	str	r2, [sp, #0]
 8002452:	2275      	movs	r2, #117	; 0x75
 8002454:	f000 f80a 	bl	800246c <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b68      	cmp	r3, #104	; 0x68
 800245c:	d101      	bne.n	8002462 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8002462:	2300      	movs	r3, #0
    }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af04      	add	r7, sp, #16
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	72fb      	strb	r3, [r7, #11]
 800247a:	4613      	mov	r3, r2
 800247c:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <I2C_Read+0x1c>
        return false;
 8002484:	2300      	movs	r3, #0
 8002486:	e019      	b.n	80024bc <I2C_Read+0x50>
    }
    if (NULL == data) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <I2C_Read+0x26>
        return false;
 800248e:	2300      	movs	r3, #0
 8002490:	e014      	b.n	80024bc <I2C_Read+0x50>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	b299      	uxth	r1, r3
 8002496:	7abb      	ldrb	r3, [r7, #10]
 8002498:	b29a      	uxth	r2, r3
 800249a:	7e3b      	ldrb	r3, [r7, #24]
 800249c:	b29b      	uxth	r3, r3
 800249e:	2064      	movs	r0, #100	; 0x64
 80024a0:	9002      	str	r0, [sp, #8]
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2301      	movs	r3, #1
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f001 fe80 	bl	80041b0 <HAL_I2C_Mem_Read>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <I2C_Read+0x4e>

        /* Data couldn't be read */
        return false;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <I2C_Read+0x50>
    } else {

        /* Data read successfully */
        return true;
 80024ba:	2301      	movs	r3, #1
    }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	72fb      	strb	r3, [r7, #11]
 80024d2:	4613      	mov	r3, r2
 80024d4:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <I2C_Write+0x1c>
        return false;
 80024dc:	2300      	movs	r3, #0
 80024de:	e018      	b.n	8002512 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <I2C_Write+0x26>
        return false;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e013      	b.n	8002512 <I2C_Write+0x4e>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	b299      	uxth	r1, r3
 80024ee:	7abb      	ldrb	r3, [r7, #10]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	2364      	movs	r3, #100	; 0x64
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	2301      	movs	r3, #1
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2301      	movs	r3, #1
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f001 fd5b 	bl	8003fbc <HAL_I2C_Mem_Write>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <I2C_Write+0x4c>

        /* Data couldn't be written */
        return false;
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8002510:	2301      	movs	r3, #1
    }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <MPU6050_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_InstanceInit(I2C_HandleTypeDef * hi2c) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = pvPortMalloc(sizeof(MPU6050_HandleTypeDef_t));
 8002524:	2014      	movs	r0, #20
 8002526:	f00b fcd7 	bl	800ded8 <pvPortMalloc>
 800252a:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 800252c:	2004      	movs	r0, #4
 800252e:	f00b fcd3 	bl	800ded8 <pvPortMalloc>
 8002532:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <MPU6050_InstanceInit+0x24>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <MPU6050_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4618      	mov	r0, r3
 8002546:	f00b fcd9 	bl	800defc <vPortFree>
        vPortFree(hmpu6050);
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f00b fcd6 	bl	800defc <vPortFree>
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
        free(hmpu6050->buffer);
        free(hmpu6050);
#endif
        return NULL;
 8002550:	2300      	movs	r3, #0
 8002552:	e01b      	b.n	800258c <MPU6050_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <MPU6050_InstanceInit+0x78>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <MPU6050_InstanceInit+0x4e>
            hmpu6050->instance = 1;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22d0      	movs	r2, #208	; 0xd0
 8002566:	721a      	strb	r2, [r3, #8]
 8002568:	e009      	b.n	800257e <MPU6050_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <MPU6050_InstanceInit+0x78>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <MPU6050_InstanceInit+0x62>
            hmpu6050->instance = 2;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2202      	movs	r2, #2
 8002576:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	22d1      	movs	r2, #209	; 0xd1
 800257c:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000b81 	.word	0x20000b81

08002598 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 80025a0:	2340      	movs	r3, #64	; 0x40
 80025a2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6858      	ldr	r0, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7a19      	ldrb	r1, [r3, #8]
 80025ac:	f107 030f 	add.w	r3, r7, #15
 80025b0:	2200      	movs	r2, #0
 80025b2:	9200      	str	r2, [sp, #0]
 80025b4:	226b      	movs	r2, #107	; 0x6b
 80025b6:	f000 f9bd 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(MPU6050_HandleTypeDef_t * hmpu6050) {
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af02      	add	r7, sp, #8
 80025c8:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6858      	ldr	r0, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7a19      	ldrb	r1, [r3, #8]
 80025d6:	f107 030f 	add.w	r3, r7, #15
 80025da:	2201      	movs	r2, #1
 80025dc:	9200      	str	r2, [sp, #0]
 80025de:	226b      	movs	r2, #107	; 0x6b
 80025e0:	f000 f9a8 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(MPU6050_HandleTypeDef_t * hmpu6050) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 80025f4:	2318      	movs	r3, #24
 80025f6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6858      	ldr	r0, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7a19      	ldrb	r1, [r3, #8]
 8002600:	f107 030f 	add.w	r3, r7, #15
 8002604:	2201      	movs	r2, #1
 8002606:	9200      	str	r2, [sp, #0]
 8002608:	2219      	movs	r2, #25
 800260a:	f000 f993 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af02      	add	r7, sp, #8
 800261c:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_3; // Full range
 800261e:	2318      	movs	r3, #24
 8002620:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6858      	ldr	r0, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7a19      	ldrb	r1, [r3, #8]
 800262a:	f107 030f 	add.w	r3, r7, #15
 800262e:	2201      	movs	r2, #1
 8002630:	9200      	str	r2, [sp, #0]
 8002632:	221b      	movs	r2, #27
 8002634:	f000 f97e 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af02      	add	r7, sp, #8
 8002646:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_3; // Full range
 8002648:	2318      	movs	r3, #24
 800264a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6858      	ldr	r0, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7a19      	ldrb	r1, [r3, #8]
 8002654:	f107 030f 	add.w	r3, r7, #15
 8002658:	2201      	movs	r2, #1
 800265a:	9200      	str	r2, [sp, #0]
 800265c:	221c      	movs	r2, #28
 800265e:	f000 f969 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(MPU6050_HandleTypeDef_t * hmpu6050) {
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af02      	add	r7, sp, #8
 8002670:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = 0b00100010; // TODO
 8002672:	2322      	movs	r3, #34	; 0x22
 8002674:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6858      	ldr	r0, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7a19      	ldrb	r1, [r3, #8]
 800267e:	f107 030f 	add.w	r3, r7, #15
 8002682:	2201      	movs	r2, #1
 8002684:	9200      	str	r2, [sp, #0]
 8002686:	226a      	movs	r2, #106	; 0x6a
 8002688:	f000 f954 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 800269c:	2320      	movs	r3, #32
 800269e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6858      	ldr	r0, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7a19      	ldrb	r1, [r3, #8]
 80026a8:	f107 030f 	add.w	r3, r7, #15
 80026ac:	2200      	movs	r2, #0
 80026ae:	9200      	str	r2, [sp, #0]
 80026b0:	226a      	movs	r2, #106	; 0x6a
 80026b2:	f000 f93f 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(MPU6050_HandleTypeDef_t * hmpu6050) {
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af02      	add	r7, sp, #8
 80026c4:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 80026c6:	2302      	movs	r3, #2
 80026c8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6858      	ldr	r0, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7a19      	ldrb	r1, [r3, #8]
 80026d2:	f107 030f 	add.w	r3, r7, #15
 80026d6:	2201      	movs	r2, #1
 80026d8:	9200      	str	r2, [sp, #0]
 80026da:	2237      	movs	r2, #55	; 0x37
 80026dc:	f000 f92a 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(MPU6050_HandleTypeDef_t * hmpu6050) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 80026f0:	2302      	movs	r3, #2
 80026f2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6858      	ldr	r0, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7a19      	ldrb	r1, [r3, #8]
 80026fc:	f107 030f 	add.w	r3, r7, #15
 8002700:	2201      	movs	r2, #1
 8002702:	9200      	str	r2, [sp, #0]
 8002704:	2237      	movs	r2, #55	; 0x37
 8002706:	f000 f915 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af02      	add	r7, sp, #8
 8002718:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = 0b00001101; // 400 kHz TODO
 800271a:	230d      	movs	r3, #13
 800271c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6858      	ldr	r0, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7a19      	ldrb	r1, [r3, #8]
 8002726:	f107 030f 	add.w	r3, r7, #15
 800272a:	2201      	movs	r2, #1
 800272c:	9200      	str	r2, [sp, #0]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	f000 f900 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <MPU6050_TestConnection_QMC5883L>:

static bool_t MPU6050_TestConnection_QMC5883L(MPU6050_HandleTypeDef_t * hmpu6050) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af02      	add	r7, sp, #8
 8002742:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hmpu6050->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6858      	ldr	r0, [r3, #4]
 8002748:	f107 030f 	add.w	r3, r7, #15
 800274c:	2201      	movs	r2, #1
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	220d      	movs	r2, #13
 8002752:	211a      	movs	r1, #26
 8002754:	f000 f8c6 	bl	80028e4 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2bff      	cmp	r3, #255	; 0xff
 800275c:	d001      	beq.n	8002762 <MPU6050_TestConnection_QMC5883L+0x26>
        return false;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <MPU6050_TestConnection_QMC5883L+0x28>
    } else {
        return true;
 8002762:	2301      	movs	r3, #1
    }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <MPU6050_TestConnection_BMP180>:

static bool_t MPU6050_TestConnection_BMP180(MPU6050_HandleTypeDef_t * hmpu6050) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hmpu6050->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xD0, &regData, sizeof(regData));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6858      	ldr	r0, [r3, #4]
 8002778:	f107 030f 	add.w	r3, r7, #15
 800277c:	2201      	movs	r2, #1
 800277e:	9200      	str	r2, [sp, #0]
 8002780:	22d0      	movs	r2, #208	; 0xd0
 8002782:	21ee      	movs	r1, #238	; 0xee
 8002784:	f000 f8ae 	bl	80028e4 <MPU6050_ReadRegister>

    if (0x55 != regData) { // TODO
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b55      	cmp	r3, #85	; 0x55
 800278c:	d001      	beq.n	8002792 <MPU6050_TestConnection_BMP180+0x26>
        return false;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <MPU6050_TestConnection_BMP180+0x28>
    } else {
        return true;
 8002792:	2301      	movs	r3, #1
    }
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <QMC5883L_Configure>:

static void QMC5883L_Configure(MPU6050_HandleTypeDef_t * hmpu6050) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6858      	ldr	r0, [r3, #4]
 80027ac:	f107 030f 	add.w	r3, r7, #15
 80027b0:	2201      	movs	r2, #1
 80027b2:	9200      	str	r2, [sp, #0]
 80027b4:	220b      	movs	r2, #11
 80027b6:	211a      	movs	r1, #26
 80027b8:	f000 f8bc 	bl	8002934 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 80027bc:	231d      	movs	r3, #29
 80027be:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6858      	ldr	r0, [r3, #4]
 80027c4:	f107 030f 	add.w	r3, r7, #15
 80027c8:	2201      	movs	r2, #1
 80027ca:	9200      	str	r2, [sp, #0]
 80027cc:	2209      	movs	r2, #9
 80027ce:	211a      	movs	r1, #26
 80027d0:	f000 f8b0 	bl	8002934 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6858      	ldr	r0, [r3, #4]
 80027dc:	f107 030f 	add.w	r3, r7, #15
 80027e0:	2201      	movs	r2, #1
 80027e2:	9200      	str	r2, [sp, #0]
 80027e4:	220a      	movs	r2, #10
 80027e6:	211a      	movs	r1, #26
 80027e8:	f000 f8a4 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <BMP180_Configure>:

static void BMP180_Configure(MPU6050_HandleTypeDef_t * hmpu6050) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    uint8_t regData;

    regData = 0b01000000;
 80027fc:	2340      	movs	r3, #64	; 0x40
 80027fe:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData, BMP180_SET_BIT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6858      	ldr	r0, [r3, #4]
 8002804:	f107 030f 	add.w	r3, r7, #15
 8002808:	2201      	movs	r2, #1
 800280a:	9200      	str	r2, [sp, #0]
 800280c:	22f4      	movs	r2, #244	; 0xf4
 800280e:	21ee      	movs	r1, #238	; 0xee
 8002810:	f000 f890 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(MPU6050_HandleTypeDef_t * hmpu6050) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = QMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8002824:	238d      	movs	r3, #141	; 0x8d
 8002826:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6858      	ldr	r0, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7a19      	ldrb	r1, [r3, #8]
 8002830:	f107 030f 	add.w	r3, r7, #15
 8002834:	2201      	movs	r2, #1
 8002836:	9200      	str	r2, [sp, #0]
 8002838:	2225      	movs	r2, #37	; 0x25
 800283a:	f000 f87b 	bl	8002934 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6858      	ldr	r0, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7a19      	ldrb	r1, [r3, #8]
 800284a:	f107 030f 	add.w	r3, r7, #15
 800284e:	2201      	movs	r2, #1
 8002850:	9200      	str	r2, [sp, #0]
 8002852:	2226      	movs	r2, #38	; 0x26
 8002854:	f000 f86e 	bl	8002934 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8002858:	2386      	movs	r3, #134	; 0x86
 800285a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6858      	ldr	r0, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7a19      	ldrb	r1, [r3, #8]
 8002864:	f107 030f 	add.w	r3, r7, #15
 8002868:	2201      	movs	r2, #1
 800286a:	9200      	str	r2, [sp, #0]
 800286c:	2227      	movs	r2, #39	; 0x27
 800286e:	f000 f861 	bl	8002934 <MPU6050_WriteRegisterBitmasked>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <MPU6050_Config>:

static void MPU6050_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hmpu6050);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fe88 	bl	8002598 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hmpu6050);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fe9a 	bl	80025c2 <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hmpu6050);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff feac 	bl	80025ec <MPU6050_SetSampleDivider>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hmpu6050);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff febe 	bl	8002616 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hmpu6050);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fed0 	bl	8002640 <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hmpu6050);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fef7 	bl	8002694 <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hmpu6050);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff09 	bl	80026be <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!MPU6050_TestConnection_QMC5883L(hmpu6050)) {
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff45 	bl	800273c <MPU6050_TestConnection_QMC5883L>
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hmpu6050);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff72 	bl	800279c <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!MPU6050_TestConnection_BMP180(hmpu6050)) {
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff57 	bl	800276c <MPU6050_TestConnection_BMP180>
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hmpu6050);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff98 	bl	80027f4 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hmpu6050);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff0f 	bl	80026e8 <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hmpu6050);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fecd 	bl	800266a <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hmpu6050);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff1e 	bl	8002712 <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer */
    MPU6050_Configure_QMC5883l(hmpu6050);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffa0 	bl	800281c <MPU6050_Configure_QMC5883l>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	72fb      	strb	r3, [r7, #11]
 80028f2:	4613      	mov	r3, r2
 80028f4:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 80028f6:	7aba      	ldrb	r2, [r7, #10]
 80028f8:	7af9      	ldrb	r1, [r7, #11]
 80028fa:	7e3b      	ldrb	r3, [r7, #24]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fdb3 	bl	800246c <I2C_Read>
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	72fb      	strb	r3, [r7, #11]
 800291c:	4613      	mov	r3, r2
 800291e:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8002920:	7aba      	ldrb	r2, [r7, #10]
 8002922:	7af9      	ldrb	r1, [r7, #11]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fdcc 	bl	80024c4 <I2C_Write>
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	72fb      	strb	r3, [r7, #11]
 8002942:	4613      	mov	r3, r2
 8002944:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8002946:	f107 0317 	add.w	r3, r7, #23
 800294a:	7aba      	ldrb	r2, [r7, #10]
 800294c:	7af9      	ldrb	r1, [r7, #11]
 800294e:	2001      	movs	r0, #1
 8002950:	9000      	str	r0, [sp, #0]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff ffc6 	bl	80028e4 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8002958:	f897 3020 	ldrb.w	r3, [r7, #32]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	4313      	orrs	r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	75bb      	strb	r3, [r7, #22]
 800296c:	e00a      	b.n	8002984 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b25b      	sxtb	r3, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	b25a      	sxtb	r2, r3
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	b25b      	sxtb	r3, r3
 800297c:	4013      	ands	r3, r2
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8002984:	f107 0316 	add.w	r3, r7, #22
 8002988:	7aba      	ldrb	r2, [r7, #10]
 800298a:	7af9      	ldrb	r1, [r7, #11]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff ffbe 	bl	800290e <MPU6050_WriteRegister>
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <MPU6050_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_Init(I2C_HandleTypeDef * hi2c) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <MPU6050_Init+0x12>
        return NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e028      	b.n	8002a00 <MPU6050_Init+0x64>
    }

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <MPU6050_Init+0x6c>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d101      	bne.n	80029ba <MPU6050_Init+0x1e>
        return NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e022      	b.n	8002a00 <MPU6050_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_InstanceInit(hi2c);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fdae 	bl	800251c <MPU6050_InstanceInit>
 80029c0:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01a      	beq.n	80029fe <MPU6050_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff fd31 	bl	8002430 <I2C_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <MPU6050_Init+0x4e>
#ifdef MPU6050_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
#endif

            /* Configure device */
            MPU6050_Config(hmpu6050);
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7ff ff50 	bl	800287a <MPU6050_Config>

            instancesNumber++;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MPU6050_Init+0x6c>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MPU6050_Init+0x6c>)
 80029e4:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	e00a      	b.n	8002a00 <MPU6050_Init+0x64>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f00b fa84 	bl	800defc <vPortFree>
            vPortFree(hmpu6050);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f00b fa81 	bl	800defc <vPortFree>
#endif

#ifdef MPU6050_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU not detected.\r\n\n", LOG_ERROR);
#endif
            return NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <MPU6050_Init+0x64>

        /* Instance couldn't be created */
#ifdef MPU6050_USE_LOGGING
        LOG((uint8_t *)"MPU6050 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
#endif
        return NULL;
 80029fe:	2300      	movs	r3, #0
    }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000b81 	.word	0x20000b81

08002a0c <MPU6050_ReadTemperatureSensor>:
        accelerometerValues->accelerometerY = 0;
        accelerometerValues->accelerometerZ = 0;
    }
}

int16_t MPU6050_ReadTemperatureSensor(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 8002a14:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002a18:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8002a1a:	2324      	movs	r3, #36	; 0x24
 8002a1c:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hmpu6050) {
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <MPU6050_ReadTemperatureSensor+0x1c>
        return 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e01b      	b.n	8002a60 <MPU6050_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6858      	ldr	r0, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7a19      	ldrb	r1, [r3, #8]
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	2202      	movs	r2, #2
 8002a36:	9200      	str	r2, [sp, #0]
 8002a38:	2241      	movs	r2, #65	; 0x41
 8002a3a:	f7ff ff53 	bl	80028e4 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 8002a3e:	7a3b      	ldrb	r3, [r7, #8]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	b21a      	sxth	r2, r3
 8002a44:	7a7b      	ldrb	r3, [r7, #9]
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b21b      	sxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a52:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	89bb      	ldrh	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b21b      	sxth	r3, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS(string, strlen((const char *)string));
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fd fc05 	bl	8000280 <strlen>
 8002a76:	4603      	mov	r3, r0
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f00b fb0d 	bl	800e09c <CDC_Transmit_FS>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b090      	sub	sp, #64	; 0x40
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <LOG+0x18>
        return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa2:	e049      	b.n	8002b38 <LOG+0xac>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d902      	bls.n	8002ab0 <LOG+0x24>
        return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aae:	e043      	b.n	8002b38 <LOG+0xac>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	222e      	movs	r2, #46	; 0x2e
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00c fd74 	bl	800f5aa <memset>

    if (LOG_INFORMATION == logType) {
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d108      	bne.n	8002ada <LOG+0x4e>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <LOG+0xb4>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f00c fd71 	bl	800f5ba <strcat>
 8002ad8:	e022      	b.n	8002b20 <LOG+0x94>
    } else if (LOG_DEBUGGING == logType) {
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d108      	bne.n	8002af2 <LOG+0x66>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <LOG+0xb8>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f00c fd65 	bl	800f5ba <strcat>
 8002af0:	e016      	b.n	8002b20 <LOG+0x94>
    } else if (LOG_WARNING == logType) {
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d108      	bne.n	8002b0a <LOG+0x7e>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <LOG+0xbc>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f00c fd59 	bl	800f5ba <strcat>
 8002b08:	e00a      	b.n	8002b20 <LOG+0x94>
    } else if (LOG_ERROR == logType) {
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d107      	bne.n	8002b20 <LOG+0x94>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <LOG+0xc0>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00c fd4d 	bl	800f5ba <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f00c fd47 	bl	800f5ba <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff99 	bl	8002a68 <USB_Write>

    return 0;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3740      	adds	r7, #64	; 0x40
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000004 	.word	0x20000004
 8002b44:	20000008 	.word	0x20000008
 8002b48:	2000000c 	.word	0x2000000c
 8002b4c:	20000010 	.word	0x20000010

08002b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_Init+0x40>)
 8002b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_Init+0x40>)
 8002b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_Init+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_Init+0x40>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f000 fcfd 	bl	8003578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7e:	200f      	movs	r0, #15
 8002b80:	f000 f808 	bl	8002b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b84:	f7fe ff3a 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_InitTick+0x54>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_InitTick+0x58>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fd15 	bl	80035e2 <HAL_SYSTICK_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00e      	b.n	8002be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	d80a      	bhi.n	8002bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd0:	f000 fcdd 	bl	800358e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd4:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <HAL_InitTick+0x5c>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000018 	.word	0x20000018
 8002bf0:	20000014 	.word	0x20000014

08002bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_IncTick+0x20>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_IncTick+0x24>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_IncTick+0x24>)
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000018 	.word	0x20000018
 8002c18:	20000b84 	.word	0x20000b84

08002c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_GetTick+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000b84 	.word	0x20000b84

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff ffee 	bl	8002c1c <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4c:	d005      	beq.n	8002c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_Delay+0x44>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c5a:	bf00      	nop
 8002c5c:	f7ff ffde 	bl	8002c1c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d8f7      	bhi.n	8002c5c <HAL_Delay+0x28>
  {
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000018 	.word	0x20000018

08002c7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e033      	b.n	8002cfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe feda 	bl	8001a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d118      	bne.n	8002cec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cc2:	f023 0302 	bic.w	r3, r3, #2
 8002cc6:	f043 0202 	orr.w	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa86 	bl	80031e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8002cea:	e001      	b.n	8002cf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Start+0x1a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e097      	b.n	8002e4e <HAL_ADC_Start+0x14a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d018      	beq.n	8002d66 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d44:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <HAL_ADC_Start+0x158>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a45      	ldr	r2, [pc, #276]	; (8002e60 <HAL_ADC_Start+0x15c>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0c9a      	lsrs	r2, r3, #18
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d58:	e002      	b.n	8002d60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f9      	bne.n	8002d5a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d15f      	bne.n	8002e34 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	d106      	bne.n	8002dc2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f023 0206 	bic.w	r2, r3, #6
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
 8002dc0:	e002      	b.n	8002dc8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_ADC_Start+0x160>)
 8002dd2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d129      	bne.n	8002e4c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e020      	b.n	8002e4c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_ADC_Start+0x164>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d11b      	bne.n	8002e4c <HAL_ADC_Start+0x148>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d114      	bne.n	8002e4c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e00b      	b.n	8002e4c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0210 	orr.w	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	431bde83 	.word	0x431bde83
 8002e64:	40012300 	.word	0x40012300
 8002e68:	40012000 	.word	0x40012000

08002e6c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d113      	bne.n	8002eb2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	d10b      	bne.n	8002eb2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e063      	b.n	8002f7a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb2:	f7ff feb3 	bl	8002c1c <HAL_GetTick>
 8002eb6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002eb8:	e021      	b.n	8002efe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec0:	d01d      	beq.n	8002efe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_ADC_PollForConversion+0x6c>
 8002ec8:	f7ff fea8 	bl	8002c1c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d212      	bcs.n	8002efe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d00b      	beq.n	8002efe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0204 	orr.w	r2, r3, #4
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e03d      	b.n	8002f7a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d1d6      	bne.n	8002eba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0212 	mvn.w	r2, #18
 8002f14:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d123      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11f      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x1c>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e105      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x228>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b09      	cmp	r3, #9
 8002fc6:	d925      	bls.n	8003014 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68d9      	ldr	r1, [r3, #12]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	2207      	movs	r2, #7
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68d9      	ldr	r1, [r3, #12]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	4603      	mov	r3, r0
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4403      	add	r3, r0
 8003006:	3b1e      	subs	r3, #30
 8003008:	409a      	lsls	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	e022      	b.n	800305a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6919      	ldr	r1, [r3, #16]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	2207      	movs	r2, #7
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	400a      	ands	r2, r1
 8003036:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6919      	ldr	r1, [r3, #16]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	4603      	mov	r3, r0
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4403      	add	r3, r0
 8003050:	409a      	lsls	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b06      	cmp	r3, #6
 8003060:	d824      	bhi.n	80030ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	3b05      	subs	r3, #5
 8003074:	221f      	movs	r2, #31
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	400a      	ands	r2, r1
 8003082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	4618      	mov	r0, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	3b05      	subs	r3, #5
 800309e:	fa00 f203 	lsl.w	r2, r0, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34
 80030aa:	e04c      	b.n	8003146 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d824      	bhi.n	80030fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	3b23      	subs	r3, #35	; 0x23
 80030c6:	221f      	movs	r2, #31
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43da      	mvns	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	400a      	ands	r2, r1
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	3b23      	subs	r3, #35	; 0x23
 80030f0:	fa00 f203 	lsl.w	r2, r0, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
 80030fc:	e023      	b.n	8003146 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	3b41      	subs	r3, #65	; 0x41
 8003110:	221f      	movs	r2, #31
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	400a      	ands	r2, r1
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	4618      	mov	r0, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3b41      	subs	r3, #65	; 0x41
 800313a:	fa00 f203 	lsl.w	r2, r0, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_ADC_ConfigChannel+0x234>)
 8003148:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <HAL_ADC_ConfigChannel+0x238>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d109      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x1cc>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b12      	cmp	r3, #18
 800315a:	d105      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <HAL_ADC_ConfigChannel+0x238>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d123      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x21e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b10      	cmp	r3, #16
 8003178:	d003      	beq.n	8003182 <HAL_ADC_ConfigChannel+0x1e6>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b11      	cmp	r3, #17
 8003180:	d11b      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b10      	cmp	r3, #16
 8003194:	d111      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_ADC_ConfigChannel+0x23c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_ADC_ConfigChannel+0x240>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	0c9a      	lsrs	r2, r3, #18
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031ac:	e002      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f9      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40012300 	.word	0x40012300
 80031d4:	40012000 	.word	0x40012000
 80031d8:	20000000 	.word	0x20000000
 80031dc:	431bde83 	.word	0x431bde83

080031e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e8:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <ADC_Init+0x1f0>)
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	021a      	lsls	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <ADC_Init+0x1f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	e00f      	b.n	80032de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0202 	bic.w	r2, r2, #2
 80032ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6899      	ldr	r1, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7e1b      	ldrb	r3, [r3, #24]
 80032f8:	005a      	lsls	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800332a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	3b01      	subs	r3, #1
 8003338:	035a      	lsls	r2, r3, #13
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	e007      	b.n	8003354 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003352:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	3b01      	subs	r3, #1
 8003370:	051a      	lsls	r2, r3, #20
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003396:	025a      	lsls	r2, r3, #9
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	029a      	lsls	r2, r3, #10
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40012300 	.word	0x40012300
 80033d4:	0f000001 	.word	0x0f000001

080033d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <__NVIC_SetPriorityGrouping+0x44>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f4:	4013      	ands	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340a:	4a04      	ldr	r2, [pc, #16]	; (800341c <__NVIC_SetPriorityGrouping+0x44>)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <__NVIC_GetPriorityGrouping+0x18>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 0307 	and.w	r3, r3, #7
}
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	2b00      	cmp	r3, #0
 800344c:	db0b      	blt.n	8003466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4907      	ldr	r1, [pc, #28]	; (8003474 <__NVIC_EnableIRQ+0x38>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000e100 	.word	0xe000e100

08003478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db0a      	blt.n	80034a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	490c      	ldr	r1, [pc, #48]	; (80034c4 <__NVIC_SetPriority+0x4c>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	440b      	add	r3, r1
 800349c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a0:	e00a      	b.n	80034b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4908      	ldr	r1, [pc, #32]	; (80034c8 <__NVIC_SetPriority+0x50>)
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	3b04      	subs	r3, #4
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	440b      	add	r3, r1
 80034b6:	761a      	strb	r2, [r3, #24]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000e100 	.word	0xe000e100
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	bf28      	it	cs
 80034ea:	2304      	movcs	r3, #4
 80034ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d902      	bls.n	80034fc <NVIC_EncodePriority+0x30>
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3b03      	subs	r3, #3
 80034fa:	e000      	b.n	80034fe <NVIC_EncodePriority+0x32>
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	401a      	ands	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	43d9      	mvns	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	4313      	orrs	r3, r2
         );
}
 8003526:	4618      	mov	r0, r3
 8003528:	3724      	adds	r7, #36	; 0x24
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3b01      	subs	r3, #1
 8003540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003544:	d301      	bcc.n	800354a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003546:	2301      	movs	r3, #1
 8003548:	e00f      	b.n	800356a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <SysTick_Config+0x40>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003552:	210f      	movs	r1, #15
 8003554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003558:	f7ff ff8e 	bl	8003478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <SysTick_Config+0x40>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <SysTick_Config+0x40>)
 8003564:	2207      	movs	r2, #7
 8003566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	e000e010 	.word	0xe000e010

08003578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff29 	bl	80033d8 <__NVIC_SetPriorityGrouping>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035a0:	f7ff ff3e 	bl	8003420 <__NVIC_GetPriorityGrouping>
 80035a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7ff ff8e 	bl	80034cc <NVIC_EncodePriority>
 80035b0:	4602      	mov	r2, r0
 80035b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff5d 	bl	8003478 <__NVIC_SetPriority>
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff31 	bl	800343c <__NVIC_EnableIRQ>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ffa2 	bl	8003534 <SysTick_Config>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003608:	f7ff fb08 	bl	8002c1c <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e099      	b.n	800374c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003638:	e00f      	b.n	800365a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363a:	f7ff faef 	bl	8002c1c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b05      	cmp	r3, #5
 8003646:	d908      	bls.n	800365a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e078      	b.n	800374c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e8      	bne.n	800363a <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_DMA_Init+0x158>)
 8003674:	4013      	ands	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4313      	orrs	r3, r2
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0307 	bic.w	r3, r3, #7
 80036da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d117      	bne.n	800371e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8e5 	bl	80038d0 <DMA_CheckFifoParam>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e016      	b.n	800374c <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f89c 	bl	8003864 <DMA_CalcBaseAndBitshift>
 800372c:	4603      	mov	r3, r0
 800372e:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	223f      	movs	r2, #63	; 0x3f
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	f010803f 	.word	0xf010803f

08003758 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_DMA_Start_IT+0x26>
 800377a:	2302      	movs	r3, #2
 800377c:	e040      	b.n	8003800 <HAL_DMA_Start_IT+0xa8>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d12f      	bne.n	80037f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f82e 	bl	8003808 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	223f      	movs	r2, #63	; 0x3f
 80037b2:	409a      	lsls	r2, r3
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0216 	orr.w	r2, r2, #22
 80037c6:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e005      	b.n	80037fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
 80037fc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003824:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d108      	bne.n	8003848 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003846:	e007      	b.n	8003858 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3b10      	subs	r3, #16
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800387e:	4a13      	ldr	r2, [pc, #76]	; (80038cc <DMA_CalcBaseAndBitshift+0x68>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d909      	bls.n	80038a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	1d1a      	adds	r2, r3, #4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	659a      	str	r2, [r3, #88]	; 0x58
 80038a4:	e007      	b.n	80038b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	aaaaaaab 	.word	0xaaaaaaab
 80038cc:	0801188c 	.word	0x0801188c

080038d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11f      	bne.n	800392a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d856      	bhi.n	800399e <DMA_CheckFifoParam+0xce>
 80038f0:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <DMA_CheckFifoParam+0x28>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	08003909 	.word	0x08003909
 80038fc:	0800391b 	.word	0x0800391b
 8003900:	08003909 	.word	0x08003909
 8003904:	0800399f 	.word	0x0800399f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d046      	beq.n	80039a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003918:	e043      	b.n	80039a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003922:	d140      	bne.n	80039a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e03d      	b.n	80039a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003932:	d121      	bne.n	8003978 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d837      	bhi.n	80039aa <DMA_CheckFifoParam+0xda>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <DMA_CheckFifoParam+0x70>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003951 	.word	0x08003951
 8003944:	08003957 	.word	0x08003957
 8003948:	08003951 	.word	0x08003951
 800394c:	08003969 	.word	0x08003969
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      break;
 8003954:	e030      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d025      	beq.n	80039ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003966:	e022      	b.n	80039ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003970:	d11f      	bne.n	80039b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003976:	e01c      	b.n	80039b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d903      	bls.n	8003986 <DMA_CheckFifoParam+0xb6>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d003      	beq.n	800398c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003984:	e018      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
      break;
 800398a:	e015      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00e      	beq.n	80039b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e00b      	b.n	80039b6 <DMA_CheckFifoParam+0xe6>
      break;
 800399e:	bf00      	nop
 80039a0:	e00a      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039a2:	bf00      	nop
 80039a4:	e008      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039a6:	bf00      	nop
 80039a8:	e006      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e004      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ae:	bf00      	nop
 80039b0:	e002      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039b6:	bf00      	nop
    }
  }

  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop

080039c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e159      	b.n	8003c98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	f040 8148 	bne.w	8003c92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d005      	beq.n	8003a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d130      	bne.n	8003a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	2203      	movs	r2, #3
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a50:	2201      	movs	r2, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 0201 	and.w	r2, r3, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d017      	beq.n	8003ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d123      	bne.n	8003b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	08da      	lsrs	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3208      	adds	r2, #8
 8003acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	220f      	movs	r2, #15
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	08da      	lsrs	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3208      	adds	r2, #8
 8003b06:	69b9      	ldr	r1, [r7, #24]
 8003b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0203 	and.w	r2, r3, #3
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a2 	beq.w	8003c92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <HAL_GPIO_Init+0x2e8>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	4a56      	ldr	r2, [pc, #344]	; (8003cb0 <HAL_GPIO_Init+0x2e8>)
 8003b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5e:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <HAL_GPIO_Init+0x2e8>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6a:	4a52      	ldr	r2, [pc, #328]	; (8003cb4 <HAL_GPIO_Init+0x2ec>)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	3302      	adds	r3, #2
 8003b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	220f      	movs	r2, #15
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_GPIO_Init+0x2f0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d019      	beq.n	8003bca <HAL_GPIO_Init+0x202>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a48      	ldr	r2, [pc, #288]	; (8003cbc <HAL_GPIO_Init+0x2f4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_GPIO_Init+0x1fe>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a47      	ldr	r2, [pc, #284]	; (8003cc0 <HAL_GPIO_Init+0x2f8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00d      	beq.n	8003bc2 <HAL_GPIO_Init+0x1fa>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a46      	ldr	r2, [pc, #280]	; (8003cc4 <HAL_GPIO_Init+0x2fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <HAL_GPIO_Init+0x1f6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a45      	ldr	r2, [pc, #276]	; (8003cc8 <HAL_GPIO_Init+0x300>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_GPIO_Init+0x1f2>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	e008      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bba:	2307      	movs	r3, #7
 8003bbc:	e006      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e004      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e002      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_GPIO_Init+0x204>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	f002 0203 	and.w	r2, r2, #3
 8003bd2:	0092      	lsls	r2, r2, #2
 8003bd4:	4093      	lsls	r3, r2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bdc:	4935      	ldr	r1, [pc, #212]	; (8003cb4 <HAL_GPIO_Init+0x2ec>)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bea:	4b38      	ldr	r3, [pc, #224]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c0e:	4a2f      	ldr	r2, [pc, #188]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c14:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c38:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c3e:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c62:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c68:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8c:	4a0f      	ldr	r2, [pc, #60]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	f67f aea2 	bls.w	80039e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3724      	adds	r7, #36	; 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40013c00 	.word	0x40013c00

08003cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
 8003cec:	e001      	b.n	8003cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d10:	787b      	ldrb	r3, [r7, #1]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d1c:	e003      	b.n	8003d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d1e:	887b      	ldrh	r3, [r7, #2]
 8003d20:	041a      	lsls	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	619a      	str	r2, [r3, #24]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e12b      	b.n	8003f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd febe 	bl	8001adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d98:	f002 fe38 	bl	8006a0c <HAL_RCC_GetPCLK1Freq>
 8003d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4a81      	ldr	r2, [pc, #516]	; (8003fa8 <HAL_I2C_Init+0x274>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d807      	bhi.n	8003db8 <HAL_I2C_Init+0x84>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a80      	ldr	r2, [pc, #512]	; (8003fac <HAL_I2C_Init+0x278>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bf94      	ite	ls
 8003db0:	2301      	movls	r3, #1
 8003db2:	2300      	movhi	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e006      	b.n	8003dc6 <HAL_I2C_Init+0x92>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a7d      	ldr	r2, [pc, #500]	; (8003fb0 <HAL_I2C_Init+0x27c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bf94      	ite	ls
 8003dc0:	2301      	movls	r3, #1
 8003dc2:	2300      	movhi	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0e7      	b.n	8003f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a78      	ldr	r2, [pc, #480]	; (8003fb4 <HAL_I2C_Init+0x280>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	0c9b      	lsrs	r3, r3, #18
 8003dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4a6a      	ldr	r2, [pc, #424]	; (8003fa8 <HAL_I2C_Init+0x274>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d802      	bhi.n	8003e08 <HAL_I2C_Init+0xd4>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3301      	adds	r3, #1
 8003e06:	e009      	b.n	8003e1c <HAL_I2C_Init+0xe8>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	4a69      	ldr	r2, [pc, #420]	; (8003fb8 <HAL_I2C_Init+0x284>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	495c      	ldr	r1, [pc, #368]	; (8003fa8 <HAL_I2C_Init+0x274>)
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	d819      	bhi.n	8003e70 <HAL_I2C_Init+0x13c>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1e59      	subs	r1, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e50:	400b      	ands	r3, r1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_I2C_Init+0x138>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1e59      	subs	r1, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6a:	e051      	b.n	8003f10 <HAL_I2C_Init+0x1dc>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	e04f      	b.n	8003f10 <HAL_I2C_Init+0x1dc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d111      	bne.n	8003e9c <HAL_I2C_Init+0x168>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1e58      	subs	r0, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	440b      	add	r3, r1
 8003e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e012      	b.n	8003ec2 <HAL_I2C_Init+0x18e>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e58      	subs	r0, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	0099      	lsls	r1, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_Init+0x196>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e022      	b.n	8003f10 <HAL_I2C_Init+0x1dc>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_I2C_Init+0x1bc>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1e58      	subs	r0, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	460b      	mov	r3, r1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	440b      	add	r3, r1
 8003ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eee:	e00f      	b.n	8003f10 <HAL_I2C_Init+0x1dc>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1e58      	subs	r0, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	0099      	lsls	r1, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	6809      	ldr	r1, [r1, #0]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6911      	ldr	r1, [r2, #16]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68d2      	ldr	r2, [r2, #12]
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	000186a0 	.word	0x000186a0
 8003fac:	001e847f 	.word	0x001e847f
 8003fb0:	003d08ff 	.word	0x003d08ff
 8003fb4:	431bde83 	.word	0x431bde83
 8003fb8:	10624dd3 	.word	0x10624dd3

08003fbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	817b      	strh	r3, [r7, #10]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	813b      	strh	r3, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fd6:	f7fe fe21 	bl	8002c1c <HAL_GetTick>
 8003fda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	f040 80d9 	bne.w	800419c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2319      	movs	r3, #25
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	496d      	ldr	r1, [pc, #436]	; (80041a8 <HAL_I2C_Mem_Write+0x1ec>)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fc7f 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
 8004002:	e0cc      	b.n	800419e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_I2C_Mem_Write+0x56>
 800400e:	2302      	movs	r3, #2
 8004010:	e0c5      	b.n	800419e <HAL_I2C_Mem_Write+0x1e2>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d007      	beq.n	8004038 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004046:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2221      	movs	r2, #33	; 0x21
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2240      	movs	r2, #64	; 0x40
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a3a      	ldr	r2, [r7, #32]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a4d      	ldr	r2, [pc, #308]	; (80041ac <HAL_I2C_Mem_Write+0x1f0>)
 8004078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800407a:	88f8      	ldrh	r0, [r7, #6]
 800407c:	893a      	ldrh	r2, [r7, #8]
 800407e:	8979      	ldrh	r1, [r7, #10]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	4603      	mov	r3, r0
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fab6 	bl	80045fc <I2C_RequestMemoryWrite>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d052      	beq.n	800413c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e081      	b.n	800419e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fd00 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00d      	beq.n	80040c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d107      	bne.n	80040c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e06b      	b.n	800419e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	781a      	ldrb	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d11b      	bne.n	800413c <HAL_I2C_Mem_Write+0x180>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	d017      	beq.n	800413c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1aa      	bne.n	800409a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fcec 	bl	8004b26 <I2C_WaitOnBTFFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	2b04      	cmp	r3, #4
 800415a:	d107      	bne.n	800416c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e016      	b.n	800419e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	00100002 	.word	0x00100002
 80041ac:	ffff0000 	.word	0xffff0000

080041b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	; 0x30
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	817b      	strh	r3, [r7, #10]
 80041c2:	460b      	mov	r3, r1
 80041c4:	813b      	strh	r3, [r7, #8]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041ca:	f7fe fd27 	bl	8002c1c <HAL_GetTick>
 80041ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b20      	cmp	r3, #32
 80041da:	f040 8208 	bne.w	80045ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2319      	movs	r3, #25
 80041e4:	2201      	movs	r2, #1
 80041e6:	497b      	ldr	r1, [pc, #492]	; (80043d4 <HAL_I2C_Mem_Read+0x224>)
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb85 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
 80041f6:	e1fb      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Mem_Read+0x56>
 8004202:	2302      	movs	r3, #2
 8004204:	e1f4      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d007      	beq.n	800422c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2222      	movs	r2, #34	; 0x22
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2240      	movs	r2, #64	; 0x40
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a5b      	ldr	r2, [pc, #364]	; (80043d8 <HAL_I2C_Mem_Read+0x228>)
 800426c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800426e:	88f8      	ldrh	r0, [r7, #6]
 8004270:	893a      	ldrh	r2, [r7, #8]
 8004272:	8979      	ldrh	r1, [r7, #10]
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4603      	mov	r3, r0
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fa52 	bl	8004728 <I2C_RequestMemoryRead>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e1b0      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004292:	2b00      	cmp	r3, #0
 8004294:	d113      	bne.n	80042be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004296:	2300      	movs	r3, #0
 8004298:	623b      	str	r3, [r7, #32]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	623b      	str	r3, [r7, #32]
 80042aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e184      	b.n	80045c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d11b      	bne.n	80042fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e164      	b.n	80045c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	2b02      	cmp	r3, #2
 8004304:	d11b      	bne.n	800433e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004314:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	e144      	b.n	80045c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004354:	e138      	b.n	80045c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435a:	2b03      	cmp	r3, #3
 800435c:	f200 80f1 	bhi.w	8004542 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	2b01      	cmp	r3, #1
 8004366:	d123      	bne.n	80043b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fc1b 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e139      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ae:	e10b      	b.n	80045c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d14e      	bne.n	8004456 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	2200      	movs	r2, #0
 80043c0:	4906      	ldr	r1, [pc, #24]	; (80043dc <HAL_I2C_Mem_Read+0x22c>)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa98 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e10e      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
 80043d2:	bf00      	nop
 80043d4:	00100002 	.word	0x00100002
 80043d8:	ffff0000 	.word	0xffff0000
 80043dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004454:	e0b8      	b.n	80045c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	2200      	movs	r2, #0
 800445e:	4966      	ldr	r1, [pc, #408]	; (80045f8 <HAL_I2C_Mem_Read+0x448>)
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fa49 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0bf      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2200      	movs	r2, #0
 80044ba:	494f      	ldr	r1, [pc, #316]	; (80045f8 <HAL_I2C_Mem_Read+0x448>)
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fa1b 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e091      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004540:	e042      	b.n	80045c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fb2e 	bl	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e04c      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b04      	cmp	r3, #4
 8004594:	d118      	bne.n	80045c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f47f aec2 	bne.w	8004356 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	00010004 	.word	0x00010004

080045fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	4608      	mov	r0, r1
 8004606:	4611      	mov	r1, r2
 8004608:	461a      	mov	r2, r3
 800460a:	4603      	mov	r3, r0
 800460c:	817b      	strh	r3, [r7, #10]
 800460e:	460b      	mov	r3, r1
 8004610:	813b      	strh	r3, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2200      	movs	r2, #0
 800462e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f960 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464c:	d103      	bne.n	8004656 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e05f      	b.n	800471a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800465a:	897b      	ldrh	r3, [r7, #10]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	492d      	ldr	r1, [pc, #180]	; (8004724 <I2C_RequestMemoryWrite+0x128>)
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f998 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e04c      	b.n	800471a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004698:	6a39      	ldr	r1, [r7, #32]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa02 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d107      	bne.n	80046be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e02b      	b.n	800471a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046c8:	893b      	ldrh	r3, [r7, #8]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	611a      	str	r2, [r3, #16]
 80046d2:	e021      	b.n	8004718 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046d4:	893b      	ldrh	r3, [r7, #8]
 80046d6:	0a1b      	lsrs	r3, r3, #8
 80046d8:	b29b      	uxth	r3, r3
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	6a39      	ldr	r1, [r7, #32]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f9dc 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00d      	beq.n	800470e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d107      	bne.n	800470a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e005      	b.n	800471a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800470e:	893b      	ldrh	r3, [r7, #8]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	00010002 	.word	0x00010002

08004728 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	461a      	mov	r2, r3
 8004736:	4603      	mov	r3, r0
 8004738:	817b      	strh	r3, [r7, #10]
 800473a:	460b      	mov	r3, r1
 800473c:	813b      	strh	r3, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004750:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	2200      	movs	r2, #0
 800476a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f8c2 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004788:	d103      	bne.n	8004792 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e0aa      	b.n	80048ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	4952      	ldr	r1, [pc, #328]	; (80048f4 <I2C_RequestMemoryRead+0x1cc>)
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f8fa 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e097      	b.n	80048ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	6a39      	ldr	r1, [r7, #32]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f964 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d107      	bne.n	80047fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e076      	b.n	80048ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004804:	893b      	ldrh	r3, [r7, #8]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]
 800480e:	e021      	b.n	8004854 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004810:	893b      	ldrh	r3, [r7, #8]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	b29b      	uxth	r3, r3
 8004816:	b2da      	uxtb	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f93e 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b04      	cmp	r3, #4
 8004834:	d107      	bne.n	8004846 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e050      	b.n	80048ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800484a:	893b      	ldrh	r3, [r7, #8]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	6a39      	ldr	r1, [r7, #32]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f923 	bl	8004aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	2b04      	cmp	r3, #4
 800486a:	d107      	bne.n	800487c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e035      	b.n	80048ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800488e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2200      	movs	r2, #0
 8004898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f82b 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d103      	bne.n	80048c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e013      	b.n	80048ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048c4:	897b      	ldrh	r3, [r7, #10]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	6a3a      	ldr	r2, [r7, #32]
 80048d8:	4906      	ldr	r1, [pc, #24]	; (80048f4 <I2C_RequestMemoryRead+0x1cc>)
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f863 	bl	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	00010002 	.word	0x00010002

080048f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004908:	e025      	b.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004910:	d021      	beq.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fe f983 	bl	8002c1c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d116      	bne.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e023      	b.n	800499e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10d      	bne.n	800497c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	43da      	mvns	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	e00c      	b.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	43da      	mvns	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4013      	ands	r3, r2
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	429a      	cmp	r2, r3
 800499a:	d0b6      	beq.n	800490a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b4:	e051      	b.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d123      	bne.n	8004a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f043 0204 	orr.w	r2, r3, #4
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e046      	b.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a14:	d021      	beq.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fe f901 	bl	8002c1c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d116      	bne.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e020      	b.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10c      	bne.n	8004a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e00b      	b.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	43da      	mvns	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d18d      	bne.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab0:	e02d      	b.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f8ce 	bl	8004c54 <I2C_IsAcknowledgeFailed>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e02d      	b.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac8:	d021      	beq.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fe f8a7 	bl	8002c1c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e007      	b.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d1ca      	bne.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b32:	e02d      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f88d 	bl	8004c54 <I2C_IsAcknowledgeFailed>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e02d      	b.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b4a:	d021      	beq.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4c:	f7fe f866 	bl	8002c1c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d116      	bne.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e007      	b.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d1ca      	bne.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bb4:	e042      	b.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d119      	bne.n	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0210 	mvn.w	r2, #16
 8004bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e029      	b.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf8:	f7fe f810 	bl	8002c1c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d302      	bcc.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e007      	b.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d1b5      	bne.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6a:	d11b      	bne.n	8004ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb4:	b08f      	sub	sp, #60	; 0x3c
 8004cb6:	af0a      	add	r7, sp, #40	; 0x28
 8004cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e10f      	b.n	8004ee4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f009 fb24 	bl	800e32c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 f95f 	bl	8007fc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	687e      	ldr	r6, [r7, #4]
 8004d10:	466d      	mov	r5, sp
 8004d12:	f106 0410 	add.w	r4, r6, #16
 8004d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d26:	1d33      	adds	r3, r6, #4
 8004d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d2a:	6838      	ldr	r0, [r7, #0]
 8004d2c:	f003 f836 	bl	8007d9c <USB_CoreInit>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e0d0      	b.n	8004ee4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f003 f94d 	bl	8007fe8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	e04a      	b.n	8004dea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	333d      	adds	r3, #61	; 0x3d
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	333c      	adds	r3, #60	; 0x3c
 8004d78:	7bfa      	ldrb	r2, [r7, #15]
 8004d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d7c:	7bfa      	ldrb	r2, [r7, #15]
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	b298      	uxth	r0, r3
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3344      	adds	r3, #68	; 0x44
 8004d90:	4602      	mov	r2, r0
 8004d92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3340      	adds	r3, #64	; 0x40
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	3348      	adds	r3, #72	; 0x48
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	334c      	adds	r3, #76	; 0x4c
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3354      	adds	r3, #84	; 0x54
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	3301      	adds	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
 8004dea:	7bfa      	ldrb	r2, [r7, #15]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d3af      	bcc.n	8004d54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	73fb      	strb	r3, [r7, #15]
 8004df8:	e044      	b.n	8004e84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e52:	7bfa      	ldrb	r2, [r7, #15]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e68:	7bfa      	ldrb	r2, [r7, #15]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	3301      	adds	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d3b5      	bcc.n	8004dfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	687e      	ldr	r6, [r7, #4]
 8004e96:	466d      	mov	r5, sp
 8004e98:	f106 0410 	add.w	r4, r6, #16
 8004e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ea4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ea8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004eac:	1d33      	adds	r3, r6, #4
 8004eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eb0:	6838      	ldr	r0, [r7, #0]
 8004eb2:	f003 f8e5 	bl	8008080 <USB_DevInit>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e00d      	b.n	8004ee4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f004 fa34 	bl	800934a <USB_DevDisconnect>

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_PCD_Start+0x1c>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e020      	b.n	8004f4a <HAL_PCD_Start+0x5e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d109      	bne.n	8004f2c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d005      	beq.n	8004f2c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f003 f837 	bl	8007fa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 f9e4 	bl	8009308 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f52:	b590      	push	{r4, r7, lr}
 8004f54:	b08d      	sub	sp, #52	; 0x34
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f004 faa2 	bl	80094b2 <USB_GetMode>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 848a 	bne.w	800588a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 fa06 	bl	800938c <USB_ReadInterrupts>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8480 	beq.w	8005888 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f004 f9f3 	bl	800938c <USB_ReadInterrupts>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d107      	bne.n	8004fc0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f002 0202 	and.w	r2, r2, #2
 8004fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f004 f9e1 	bl	800938c <USB_ReadInterrupts>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d161      	bne.n	8005098 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0210 	bic.w	r2, r2, #16
 8004fe2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f003 020f 	and.w	r2, r3, #15
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4413      	add	r3, r2
 8005000:	3304      	adds	r3, #4
 8005002:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	0c5b      	lsrs	r3, r3, #17
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	2b02      	cmp	r3, #2
 800500e:	d124      	bne.n	800505a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d035      	beq.n	8005088 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	091b      	lsrs	r3, r3, #4
 8005024:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800502a:	b29b      	uxth	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	6a38      	ldr	r0, [r7, #32]
 8005030:	f004 f818 	bl	8009064 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005040:	441a      	add	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005052:	441a      	add	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
 8005058:	e016      	b.n	8005088 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	0c5b      	lsrs	r3, r3, #17
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	2b06      	cmp	r3, #6
 8005064:	d110      	bne.n	8005088 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800506c:	2208      	movs	r2, #8
 800506e:	4619      	mov	r1, r3
 8005070:	6a38      	ldr	r0, [r7, #32]
 8005072:	f003 fff7 	bl	8009064 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	6a1a      	ldr	r2, [r3, #32]
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005082:	441a      	add	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0210 	orr.w	r2, r2, #16
 8005096:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f004 f975 	bl	800938c <USB_ReadInterrupts>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050ac:	f040 80a7 	bne.w	80051fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f004 f97a 	bl	80093b2 <USB_ReadDevAllOutEpInterrupt>
 80050be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80050c0:	e099      	b.n	80051f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 808e 	beq.w	80051ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f004 f99e 	bl	800941a <USB_ReadDevOutEPInterrupt>
 80050de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00c      	beq.n	8005104 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	461a      	mov	r2, r3
 80050f8:	2301      	movs	r3, #1
 80050fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fec2 	bl	8005e88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511a:	461a      	mov	r2, r3
 800511c:	2308      	movs	r3, #8
 800511e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 ff98 	bl	8006058 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	2310      	movs	r3, #16
 8005142:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d030      	beq.n	80051b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b80      	cmp	r3, #128	; 0x80
 8005158:	d109      	bne.n	800516e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800516c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4413      	add	r3, r2
 8005180:	3304      	adds	r3, #4
 8005182:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	78db      	ldrb	r3, [r3, #3]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d108      	bne.n	800519e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2200      	movs	r2, #0
 8005190:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	b2db      	uxtb	r3, r3
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f009 f9c3 	bl	800e524 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	461a      	mov	r2, r3
 80051ac:	2302      	movs	r3, #2
 80051ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d008      	beq.n	80051cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	461a      	mov	r2, r3
 80051c8:	2320      	movs	r3, #32
 80051ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	461a      	mov	r2, r3
 80051e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	3301      	adds	r3, #1
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f af62 	bne.w	80050c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f004 f8c2 	bl	800938c <USB_ReadInterrupts>
 8005208:	4603      	mov	r3, r0
 800520a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800520e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005212:	f040 80db 	bne.w	80053cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f004 f8e3 	bl	80093e6 <USB_ReadDevAllInEpInterrupt>
 8005220:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005226:	e0cd      	b.n	80053c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80c2 	beq.w	80053b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	4611      	mov	r1, r2
 800523e:	4618      	mov	r0, r3
 8005240:	f004 f909 	bl	8009456 <USB_ReadDevInEPInterrupt>
 8005244:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d057      	beq.n	8005300 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	2201      	movs	r2, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	43db      	mvns	r3, r3
 800526a:	69f9      	ldr	r1, [r7, #28]
 800526c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005270:	4013      	ands	r3, r2
 8005272:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	461a      	mov	r2, r3
 8005282:	2301      	movs	r3, #1
 8005284:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d132      	bne.n	80052f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	334c      	adds	r3, #76	; 0x4c
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4403      	add	r3, r0
 80052ae:	3348      	adds	r3, #72	; 0x48
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4419      	add	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4403      	add	r3, r0
 80052c2:	334c      	adds	r3, #76	; 0x4c
 80052c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d113      	bne.n	80052f4 <HAL_PCD_IRQHandler+0x3a2>
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	3354      	adds	r3, #84	; 0x54
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052ec:	461a      	mov	r2, r3
 80052ee:	2101      	movs	r1, #1
 80052f0:	f004 f910 	bl	8009514 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f009 f897 	bl	800e42e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d008      	beq.n	800531c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005316:	461a      	mov	r2, r3
 8005318:	2308      	movs	r3, #8
 800531a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	461a      	mov	r2, r3
 8005334:	2310      	movs	r3, #16
 8005336:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	461a      	mov	r2, r3
 8005350:	2340      	movs	r3, #64	; 0x40
 8005352:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d023      	beq.n	80053a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800535e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005360:	6a38      	ldr	r0, [r7, #32]
 8005362:	f002 fff1 	bl	8008348 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	3338      	adds	r3, #56	; 0x38
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	3304      	adds	r3, #4
 8005378:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	78db      	ldrb	r3, [r3, #3]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d108      	bne.n	8005394 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2200      	movs	r2, #0
 8005386:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f009 f8da 	bl	800e548 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	461a      	mov	r2, r3
 80053a2:	2302      	movs	r3, #2
 80053a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fcdb 	bl	8005d6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	3301      	adds	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f47f af2e 	bne.w	8005228 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f003 ffdb 	bl	800938c <USB_ReadInterrupts>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e0:	d122      	bne.n	8005428 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d108      	bne.n	8005412 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005408:	2100      	movs	r1, #0
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fec2 	bl	8006194 <HAL_PCDEx_LPM_Callback>
 8005410:	e002      	b.n	8005418 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f009 f878 	bl	800e508 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f003 ffad 	bl	800938c <USB_ReadInterrupts>
 8005432:	4603      	mov	r3, r0
 8005434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543c:	d112      	bne.n	8005464 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d102      	bne.n	8005454 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f009 f834 	bl	800e4bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005462:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f003 ff8f 	bl	800938c <USB_ReadInterrupts>
 800546e:	4603      	mov	r3, r0
 8005470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	f040 80b7 	bne.w	80055ea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2110      	movs	r1, #16
 8005496:	4618      	mov	r0, r3
 8005498:	f002 ff56 	bl	8008348 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800549c:	2300      	movs	r3, #0
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a0:	e046      	b.n	8005530 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ae:	461a      	mov	r2, r3
 80054b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c6:	0151      	lsls	r1, r2, #5
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	440a      	add	r2, r1
 80054cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005504:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005508:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005524:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005528:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	3301      	adds	r3, #1
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005536:	429a      	cmp	r2, r3
 8005538:	d3b3      	bcc.n	80054a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005548:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800554c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005566:	f043 030b 	orr.w	r3, r3, #11
 800556a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800557c:	f043 030b 	orr.w	r3, r3, #11
 8005580:	6453      	str	r3, [r2, #68]	; 0x44
 8005582:	e015      	b.n	80055b0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005596:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800559a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055aa:	f043 030b 	orr.w	r3, r3, #11
 80055ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055d4:	461a      	mov	r2, r3
 80055d6:	f003 ff9d 	bl	8009514 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80055e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f003 fecc 	bl	800938c <USB_ReadInterrupts>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fe:	d124      	bne.n	800564a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f003 ff62 	bl	80094ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f002 ff17 	bl	8008442 <USB_GetDevSpeed>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681c      	ldr	r4, [r3, #0]
 8005620:	f001 f9e8 	bl	80069f4 <HAL_RCC_GetHCLKFreq>
 8005624:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800562a:	b2db      	uxtb	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	4620      	mov	r0, r4
 8005630:	f002 fc16 	bl	8007e60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f008 ff22 	bl	800e47e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005648:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f003 fe9c 	bl	800938c <USB_ReadInterrupts>
 8005654:	4603      	mov	r3, r0
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b08      	cmp	r3, #8
 800565c:	d10a      	bne.n	8005674 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f008 feff 	bl	800e462 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f002 0208 	and.w	r2, r2, #8
 8005672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f003 fe87 	bl	800938c <USB_ReadInterrupts>
 800567e:	4603      	mov	r3, r0
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b80      	cmp	r3, #128	; 0x80
 8005686:	d122      	bne.n	80056ce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005694:	2301      	movs	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	e014      	b.n	80056c4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	4613      	mov	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d105      	bne.n	80056be <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fb27 	bl	8005d0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	3301      	adds	r3, #1
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d3e5      	bcc.n	800569a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f003 fe5a 	bl	800938c <USB_ReadInterrupts>
 80056d8:	4603      	mov	r3, r0
 80056da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e2:	d13b      	bne.n	800575c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e4:	2301      	movs	r3, #1
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
 80056e8:	e02b      	b.n	8005742 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fe:	4613      	mov	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	3340      	adds	r3, #64	; 0x40
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d115      	bne.n	800573c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005710:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005712:	2b00      	cmp	r3, #0
 8005714:	da12      	bge.n	800573c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571a:	4613      	mov	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	333f      	adds	r3, #63	; 0x3f
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005732:	b2db      	uxtb	r3, r3
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fae8 	bl	8005d0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	3301      	adds	r3, #1
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005748:	429a      	cmp	r2, r3
 800574a:	d3ce      	bcc.n	80056ea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800575a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f003 fe13 	bl	800938c <USB_ReadInterrupts>
 8005766:	4603      	mov	r3, r0
 8005768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800576c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005770:	d155      	bne.n	800581e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005772:	2301      	movs	r3, #1
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	e045      	b.n	8005804 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	4613      	mov	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d12e      	bne.n	80057fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da2b      	bge.n	80057fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80057b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d121      	bne.n	80057fe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057fa:	6053      	str	r3, [r2, #4]
            break;
 80057fc:	e007      	b.n	800580e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	3301      	adds	r3, #1
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	429a      	cmp	r2, r3
 800580c:	d3b4      	bcc.n	8005778 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800581c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f003 fdb2 	bl	800938c <USB_ReadInterrupts>
 8005828:	4603      	mov	r3, r0
 800582a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800582e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005832:	d10a      	bne.n	800584a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f008 fe99 	bl	800e56c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f003 fd9c 	bl	800938c <USB_ReadInterrupts>
 8005854:	4603      	mov	r3, r0
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b04      	cmp	r3, #4
 800585c:	d115      	bne.n	800588a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f008 fe89 	bl	800e588 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	e000      	b.n	800588a <HAL_PCD_IRQHandler+0x938>
      return;
 8005888:	bf00      	nop
    }
  }
}
 800588a:	3734      	adds	r7, #52	; 0x34
 800588c:	46bd      	mov	sp, r7
 800588e:	bd90      	pop	{r4, r7, pc}

08005890 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_PCD_SetAddress+0x1a>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e013      	b.n	80058d2 <HAL_PCD_SetAddress+0x42>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	78fa      	ldrb	r2, [r7, #3]
 80058b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	78fa      	ldrb	r2, [r7, #3]
 80058c0:	4611      	mov	r1, r2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f003 fcfa 	bl	80092bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	4608      	mov	r0, r1
 80058e4:	4611      	mov	r1, r2
 80058e6:	461a      	mov	r2, r3
 80058e8:	4603      	mov	r3, r0
 80058ea:	70fb      	strb	r3, [r7, #3]
 80058ec:	460b      	mov	r3, r1
 80058ee:	803b      	strh	r3, [r7, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	da0f      	bge.n	8005920 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	4613      	mov	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	3338      	adds	r3, #56	; 0x38
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	3304      	adds	r3, #4
 8005916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	705a      	strb	r2, [r3, #1]
 800591e:	e00f      	b.n	8005940 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	f003 020f 	and.w	r2, r3, #15
 8005926:	4613      	mov	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	3304      	adds	r3, #4
 8005938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	b2da      	uxtb	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800594c:	883a      	ldrh	r2, [r7, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	78ba      	ldrb	r2, [r7, #2]
 8005956:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800596a:	78bb      	ldrb	r3, [r7, #2]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d102      	bne.n	8005976 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_PCD_EP_Open+0xaa>
 8005980:	2302      	movs	r3, #2
 8005982:	e00e      	b.n	80059a2 <HAL_PCD_EP_Open+0xc8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68f9      	ldr	r1, [r7, #12]
 8005992:	4618      	mov	r0, r3
 8005994:	f002 fd7a 	bl	800848c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80059a0:	7afb      	ldrb	r3, [r7, #11]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	460b      	mov	r3, r1
 80059b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da0f      	bge.n	80059de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	f003 020f 	and.w	r2, r3, #15
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	3338      	adds	r3, #56	; 0x38
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	3304      	adds	r3, #4
 80059d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	705a      	strb	r2, [r3, #1]
 80059dc:	e00f      	b.n	80059fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	3304      	adds	r3, #4
 80059f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_PCD_EP_Close+0x6e>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e00e      	b.n	8005a36 <HAL_PCD_EP_Close+0x8c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68f9      	ldr	r1, [r7, #12]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f002 fdb8 	bl	800859c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	f003 020f 	and.w	r2, r3, #15
 8005a54:	4613      	mov	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	3304      	adds	r3, #4
 8005a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2200      	movs	r2, #0
 8005a78:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a80:	7afb      	ldrb	r3, [r7, #11]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d102      	bne.n	8005a9a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a9a:	7afb      	ldrb	r3, [r7, #11]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6979      	ldr	r1, [r7, #20]
 8005ab2:	f003 f897 	bl	8008be4 <USB_EP0StartXfer>
 8005ab6:	e008      	b.n	8005aca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6979      	ldr	r1, [r7, #20]
 8005ac6:	f002 fe45 	bl	8008754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	f003 020f 	and.w	r2, r3, #15
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005af6:	681b      	ldr	r3, [r3, #0]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	460b      	mov	r3, r1
 8005b12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b14:	7afb      	ldrb	r3, [r7, #11]
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	3338      	adds	r3, #56	; 0x38
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	3304      	adds	r3, #4
 8005b2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2201      	movs	r2, #1
 8005b42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b44:	7afb      	ldrb	r3, [r7, #11]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d102      	bne.n	8005b5e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b5e:	7afb      	ldrb	r3, [r7, #11]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d109      	bne.n	8005b7c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	6979      	ldr	r1, [r7, #20]
 8005b76:	f003 f835 	bl	8008be4 <USB_EP0StartXfer>
 8005b7a:	e008      	b.n	8005b8e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	6979      	ldr	r1, [r7, #20]
 8005b8a:	f002 fde3 	bl	8008754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	f003 020f 	and.w	r2, r3, #15
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d901      	bls.n	8005bb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e050      	b.n	8005c58 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	da0f      	bge.n	8005bde <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	3338      	adds	r3, #56	; 0x38
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	705a      	strb	r2, [r3, #1]
 8005bdc:	e00d      	b.n	8005bfa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bde:	78fa      	ldrb	r2, [r7, #3]
 8005be0:	4613      	mov	r3, r2
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	4413      	add	r3, r2
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_PCD_EP_SetStall+0x82>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e01e      	b.n	8005c58 <HAL_PCD_EP_SetStall+0xc0>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f003 fa73 	bl	8009114 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	b2d9      	uxtb	r1, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f003 fc63 	bl	8009514 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	f003 020f 	and.w	r2, r3, #15
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d901      	bls.n	8005c7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e042      	b.n	8005d04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da0f      	bge.n	8005ca6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	f003 020f 	and.w	r2, r3, #15
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	3338      	adds	r3, #56	; 0x38
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	705a      	strb	r2, [r3, #1]
 8005ca4:	e00f      	b.n	8005cc6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	f003 020f 	and.w	r2, r3, #15
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_PCD_EP_ClrStall+0x86>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e00e      	b.n	8005d04 <HAL_PCD_EP_ClrStall+0xa4>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f003 fa7b 	bl	80091f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da0c      	bge.n	8005d3a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 020f 	and.w	r2, r3, #15
 8005d26:	4613      	mov	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	3338      	adds	r3, #56	; 0x38
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	3304      	adds	r3, #4
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e00c      	b.n	8005d54 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	4413      	add	r3, r2
 8005d50:	3304      	adds	r3, #4
 8005d52:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68f9      	ldr	r1, [r7, #12]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f003 f89a 	bl	8008e94 <USB_EPStopXfer>
 8005d60:	4603      	mov	r3, r0
 8005d62:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d64:	7afb      	ldrb	r3, [r7, #11]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b08a      	sub	sp, #40	; 0x28
 8005d72:	af02      	add	r7, sp, #8
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	3338      	adds	r3, #56	; 0x38
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4413      	add	r3, r2
 8005d92:	3304      	adds	r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1a      	ldr	r2, [r3, #32]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d901      	bls.n	8005da6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e06c      	b.n	8005e80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d902      	bls.n	8005dc2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3303      	adds	r3, #3
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dca:	e02b      	b.n	8005e24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d902      	bls.n	8005de8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3303      	adds	r3, #3
 8005dec:	089b      	lsrs	r3, r3, #2
 8005dee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6919      	ldr	r1, [r3, #16]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	4603      	mov	r3, r0
 8005e06:	6978      	ldr	r0, [r7, #20]
 8005e08:	f003 f8ee 	bl	8008fe8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	441a      	add	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1a      	ldr	r2, [r3, #32]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	441a      	add	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d809      	bhi.n	8005e4e <PCD_WriteEmptyTxFifo+0xe0>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a1a      	ldr	r2, [r3, #32]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d203      	bcs.n	8005e4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1be      	bne.n	8005dcc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d811      	bhi.n	8005e7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	2201      	movs	r2, #1
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	43db      	mvns	r3, r3
 8005e74:	6939      	ldr	r1, [r7, #16]
 8005e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	333c      	adds	r3, #60	; 0x3c
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d17b      	bne.n	8005fb6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4a61      	ldr	r2, [pc, #388]	; (8006050 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	f240 80b9 	bls.w	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80b3 	beq.w	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	461a      	mov	r2, r3
 8005eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef0:	6093      	str	r3, [r2, #8]
 8005ef2:	e0a7      	b.n	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	6093      	str	r3, [r2, #8]
 8005f10:	e098      	b.n	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f040 8093 	bne.w	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	4a4b      	ldr	r2, [pc, #300]	; (8006050 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d90f      	bls.n	8005f46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f42:	6093      	str	r3, [r2, #8]
 8005f44:	e07e      	b.n	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	3304      	adds	r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	0159      	lsls	r1, r3, #5
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	440b      	add	r3, r1
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d114      	bne.n	8005fa8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f90:	461a      	mov	r2, r3
 8005f92:	2101      	movs	r1, #1
 8005f94:	f003 fabe 	bl	8009514 <USB_EP0_OutStart>
 8005f98:	e006      	b.n	8005fa8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	441a      	add	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f008 fa22 	bl	800e3f8 <HAL_PCD_DataOutStageCallback>
 8005fb4:	e046      	b.n	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4a26      	ldr	r2, [pc, #152]	; (8006054 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d124      	bne.n	8006008 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fda:	6093      	str	r3, [r2, #8]
 8005fdc:	e032      	b.n	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2320      	movs	r3, #32
 8005ff8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f008 f9f9 	bl	800e3f8 <HAL_PCD_DataOutStageCallback>
 8006006:	e01d      	b.n	8006044 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d114      	bne.n	8006038 <PCD_EP_OutXfrComplete_int+0x1b0>
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006030:	461a      	mov	r2, r3
 8006032:	2100      	movs	r1, #0
 8006034:	f003 fa6e 	bl	8009514 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f008 f9da 	bl	800e3f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	4f54300a 	.word	0x4f54300a
 8006054:	4f54310a 	.word	0x4f54310a

08006058 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	333c      	adds	r3, #60	; 0x3c
 8006070:	3304      	adds	r3, #4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d90e      	bls.n	80060ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	461a      	mov	r2, r3
 80060a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f008 f991 	bl	800e3d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a0a      	ldr	r2, [pc, #40]	; (80060e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d90c      	bls.n	80060d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d108      	bne.n	80060d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060cc:	461a      	mov	r2, r3
 80060ce:	2101      	movs	r1, #1
 80060d0:	f003 fa20 	bl	8009514 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	4f54300a 	.word	0x4f54300a

080060e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
 80060f0:	4613      	mov	r3, r2
 80060f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d107      	bne.n	8006112 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006102:	883b      	ldrh	r3, [r7, #0]
 8006104:	0419      	lsls	r1, r3, #16
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	430a      	orrs	r2, r1
 800610e:	629a      	str	r2, [r3, #40]	; 0x28
 8006110:	e028      	b.n	8006164 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	0c1b      	lsrs	r3, r3, #16
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4413      	add	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006120:	2300      	movs	r3, #0
 8006122:	73fb      	strb	r3, [r7, #15]
 8006124:	e00d      	b.n	8006142 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	3340      	adds	r3, #64	; 0x40
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4413      	add	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	3301      	adds	r3, #1
 8006140:	73fb      	strb	r3, [r7, #15]
 8006142:	7bfa      	ldrb	r2, [r7, #15]
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	3b01      	subs	r3, #1
 8006148:	429a      	cmp	r2, r3
 800614a:	d3ec      	bcc.n	8006126 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800614c:	883b      	ldrh	r3, [r7, #0]
 800614e:	0418      	lsls	r0, r3, #16
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6819      	ldr	r1, [r3, #0]
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	3b01      	subs	r3, #1
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	4302      	orrs	r2, r0
 800615c:	3340      	adds	r3, #64	; 0x40
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	887a      	ldrh	r2, [r7, #2]
 8006184:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e267      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d075      	beq.n	80062b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ca:	4b88      	ldr	r3, [pc, #544]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d00c      	beq.n	80061f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d6:	4b85      	ldr	r3, [pc, #532]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d112      	bne.n	8006208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061e2:	4b82      	ldr	r3, [pc, #520]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ee:	d10b      	bne.n	8006208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f0:	4b7e      	ldr	r3, [pc, #504]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d05b      	beq.n	80062b4 <HAL_RCC_OscConfig+0x108>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d157      	bne.n	80062b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e242      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006210:	d106      	bne.n	8006220 <HAL_RCC_OscConfig+0x74>
 8006212:	4b76      	ldr	r3, [pc, #472]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a75      	ldr	r2, [pc, #468]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e01d      	b.n	800625c <HAL_RCC_OscConfig+0xb0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006228:	d10c      	bne.n	8006244 <HAL_RCC_OscConfig+0x98>
 800622a:	4b70      	ldr	r3, [pc, #448]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a6f      	ldr	r2, [pc, #444]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	4b6d      	ldr	r3, [pc, #436]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a6c      	ldr	r2, [pc, #432]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e00b      	b.n	800625c <HAL_RCC_OscConfig+0xb0>
 8006244:	4b69      	ldr	r3, [pc, #420]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a68      	ldr	r2, [pc, #416]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800624a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	4b66      	ldr	r3, [pc, #408]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a65      	ldr	r2, [pc, #404]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800625a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fc fcda 	bl	8002c1c <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800626c:	f7fc fcd6 	bl	8002c1c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e207      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	4b5b      	ldr	r3, [pc, #364]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0xc0>
 800628a:	e014      	b.n	80062b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fc fcc6 	bl	8002c1c <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006294:	f7fc fcc2 	bl	8002c1c <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	; 0x64
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e1f3      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a6:	4b51      	ldr	r3, [pc, #324]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0xe8>
 80062b2:	e000      	b.n	80062b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d063      	beq.n	800638a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062c2:	4b4a      	ldr	r3, [pc, #296]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ce:	4b47      	ldr	r3, [pc, #284]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d11c      	bne.n	8006314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062da:	4b44      	ldr	r3, [pc, #272]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d116      	bne.n	8006314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e6:	4b41      	ldr	r3, [pc, #260]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_RCC_OscConfig+0x152>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d001      	beq.n	80062fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e1c7      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fe:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4937      	ldr	r1, [pc, #220]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006312:	e03a      	b.n	800638a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d020      	beq.n	800635e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800631c:	4b34      	ldr	r3, [pc, #208]	; (80063f0 <HAL_RCC_OscConfig+0x244>)
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fc fc7b 	bl	8002c1c <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800632a:	f7fc fc77 	bl	8002c1c <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e1a8      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633c:	4b2b      	ldr	r3, [pc, #172]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006348:	4b28      	ldr	r3, [pc, #160]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4925      	ldr	r1, [pc, #148]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]
 800635c:	e015      	b.n	800638a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635e:	4b24      	ldr	r3, [pc, #144]	; (80063f0 <HAL_RCC_OscConfig+0x244>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fc fc5a 	bl	8002c1c <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800636c:	f7fc fc56 	bl	8002c1c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e187      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d036      	beq.n	8006404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <HAL_RCC_OscConfig+0x248>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fc fc3a 	bl	8002c1c <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ac:	f7fc fc36 	bl	8002c1c <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e167      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_OscConfig+0x240>)
 80063c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x200>
 80063ca:	e01b      	b.n	8006404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <HAL_RCC_OscConfig+0x248>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d2:	f7fc fc23 	bl	8002c1c <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d8:	e00e      	b.n	80063f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063da:	f7fc fc1f 	bl	8002c1c <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d907      	bls.n	80063f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e150      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 80063ec:	40023800 	.word	0x40023800
 80063f0:	42470000 	.word	0x42470000
 80063f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f8:	4b88      	ldr	r3, [pc, #544]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80063fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1ea      	bne.n	80063da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8097 	beq.w	8006540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006416:	4b81      	ldr	r3, [pc, #516]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10f      	bne.n	8006442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	4b7d      	ldr	r3, [pc, #500]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	4a7c      	ldr	r2, [pc, #496]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006430:	6413      	str	r3, [r2, #64]	; 0x40
 8006432:	4b7a      	ldr	r3, [pc, #488]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006442:	4b77      	ldr	r3, [pc, #476]	; (8006620 <HAL_RCC_OscConfig+0x474>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d118      	bne.n	8006480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800644e:	4b74      	ldr	r3, [pc, #464]	; (8006620 <HAL_RCC_OscConfig+0x474>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a73      	ldr	r2, [pc, #460]	; (8006620 <HAL_RCC_OscConfig+0x474>)
 8006454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800645a:	f7fc fbdf 	bl	8002c1c <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006462:	f7fc fbdb 	bl	8002c1c <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e10c      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006474:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_RCC_OscConfig+0x474>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d106      	bne.n	8006496 <HAL_RCC_OscConfig+0x2ea>
 8006488:	4b64      	ldr	r3, [pc, #400]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	4a63      	ldr	r2, [pc, #396]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	6713      	str	r3, [r2, #112]	; 0x70
 8006494:	e01c      	b.n	80064d0 <HAL_RCC_OscConfig+0x324>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b05      	cmp	r3, #5
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x30c>
 800649e:	4b5f      	ldr	r3, [pc, #380]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	4a5e      	ldr	r2, [pc, #376]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064a4:	f043 0304 	orr.w	r3, r3, #4
 80064a8:	6713      	str	r3, [r2, #112]	; 0x70
 80064aa:	4b5c      	ldr	r3, [pc, #368]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a5b      	ldr	r2, [pc, #364]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
 80064b6:	e00b      	b.n	80064d0 <HAL_RCC_OscConfig+0x324>
 80064b8:	4b58      	ldr	r3, [pc, #352]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a57      	ldr	r2, [pc, #348]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
 80064c4:	4b55      	ldr	r3, [pc, #340]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c8:	4a54      	ldr	r2, [pc, #336]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064ca:	f023 0304 	bic.w	r3, r3, #4
 80064ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d8:	f7fc fba0 	bl	8002c1c <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064de:	e00a      	b.n	80064f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064e0:	f7fc fb9c 	bl	8002c1c <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0cb      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f6:	4b49      	ldr	r3, [pc, #292]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0ee      	beq.n	80064e0 <HAL_RCC_OscConfig+0x334>
 8006502:	e014      	b.n	800652e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006504:	f7fc fb8a 	bl	8002c1c <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800650a:	e00a      	b.n	8006522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650c:	f7fc fb86 	bl	8002c1c <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f241 3288 	movw	r2, #5000	; 0x1388
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e0b5      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006522:	4b3e      	ldr	r3, [pc, #248]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1ee      	bne.n	800650c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006534:	4b39      	ldr	r3, [pc, #228]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	4a38      	ldr	r2, [pc, #224]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800653a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80a1 	beq.w	800668c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800654a:	4b34      	ldr	r3, [pc, #208]	; (800661c <HAL_RCC_OscConfig+0x470>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 030c 	and.w	r3, r3, #12
 8006552:	2b08      	cmp	r3, #8
 8006554:	d05c      	beq.n	8006610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d141      	bne.n	80065e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655e:	4b31      	ldr	r3, [pc, #196]	; (8006624 <HAL_RCC_OscConfig+0x478>)
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006564:	f7fc fb5a 	bl	8002c1c <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800656c:	f7fc fb56 	bl	8002c1c <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e087      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657e:	4b27      	ldr	r3, [pc, #156]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1f0      	bne.n	800656c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69da      	ldr	r2, [r3, #28]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	019b      	lsls	r3, r3, #6
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	3b01      	subs	r3, #1
 80065a4:	041b      	lsls	r3, r3, #16
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	061b      	lsls	r3, r3, #24
 80065ae:	491b      	ldr	r1, [pc, #108]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065b4:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <HAL_RCC_OscConfig+0x478>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ba:	f7fc fb2f 	bl	8002c1c <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c2:	f7fc fb2b 	bl	8002c1c <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e05c      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d4:	4b11      	ldr	r3, [pc, #68]	; (800661c <HAL_RCC_OscConfig+0x470>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <HAL_RCC_OscConfig+0x416>
 80065e0:	e054      	b.n	800668c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <HAL_RCC_OscConfig+0x478>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e8:	f7fc fb18 	bl	8002c1c <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f0:	f7fc fb14 	bl	8002c1c <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e045      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <HAL_RCC_OscConfig+0x470>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x444>
 800660e:	e03d      	b.n	800668c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d107      	bne.n	8006628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e038      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
 800661c:	40023800 	.word	0x40023800
 8006620:	40007000 	.word	0x40007000
 8006624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006628:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <HAL_RCC_OscConfig+0x4ec>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d028      	beq.n	8006688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006640:	429a      	cmp	r2, r3
 8006642:	d121      	bne.n	8006688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664e:	429a      	cmp	r2, r3
 8006650:	d11a      	bne.n	8006688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006658:	4013      	ands	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800665e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006660:	4293      	cmp	r3, r2
 8006662:	d111      	bne.n	8006688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	3b01      	subs	r3, #1
 8006672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006674:	429a      	cmp	r2, r3
 8006676:	d107      	bne.n	8006688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006684:	429a      	cmp	r2, r3
 8006686:	d001      	beq.n	800668c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40023800 	.word	0x40023800

0800669c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0cc      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066b0:	4b68      	ldr	r3, [pc, #416]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d90c      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066be:	4b65      	ldr	r3, [pc, #404]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c6:	4b63      	ldr	r3, [pc, #396]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d001      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0b8      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d020      	beq.n	8006726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066f0:	4b59      	ldr	r3, [pc, #356]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	4a58      	ldr	r2, [pc, #352]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006708:	4b53      	ldr	r3, [pc, #332]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	4a52      	ldr	r2, [pc, #328]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006714:	4b50      	ldr	r3, [pc, #320]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	494d      	ldr	r1, [pc, #308]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	4313      	orrs	r3, r2
 8006724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d044      	beq.n	80067bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d107      	bne.n	800674a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673a:	4b47      	ldr	r3, [pc, #284]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d119      	bne.n	800677a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e07f      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d003      	beq.n	800675a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006756:	2b03      	cmp	r3, #3
 8006758:	d107      	bne.n	800676a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675a:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e06f      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800676a:	4b3b      	ldr	r3, [pc, #236]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e067      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800677a:	4b37      	ldr	r3, [pc, #220]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f023 0203 	bic.w	r2, r3, #3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4934      	ldr	r1, [pc, #208]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	4313      	orrs	r3, r2
 800678a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800678c:	f7fc fa46 	bl	8002c1c <HAL_GetTick>
 8006790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006792:	e00a      	b.n	80067aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006794:	f7fc fa42 	bl	8002c1c <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e04f      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067aa:	4b2b      	ldr	r3, [pc, #172]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 020c 	and.w	r2, r3, #12
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d1eb      	bne.n	8006794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067bc:	4b25      	ldr	r3, [pc, #148]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d20c      	bcs.n	80067e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ca:	4b22      	ldr	r3, [pc, #136]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d2:	4b20      	ldr	r3, [pc, #128]	; (8006854 <HAL_RCC_ClockConfig+0x1b8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e032      	b.n	800684a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067f0:	4b19      	ldr	r3, [pc, #100]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4916      	ldr	r1, [pc, #88]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d009      	beq.n	8006822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	490e      	ldr	r1, [pc, #56]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006822:	f000 f821 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006826:	4602      	mov	r2, r0
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_RCC_ClockConfig+0x1bc>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	091b      	lsrs	r3, r3, #4
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	490a      	ldr	r1, [pc, #40]	; (800685c <HAL_RCC_ClockConfig+0x1c0>)
 8006834:	5ccb      	ldrb	r3, [r1, r3]
 8006836:	fa22 f303 	lsr.w	r3, r2, r3
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <HAL_RCC_ClockConfig+0x1c4>)
 800683c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <HAL_RCC_ClockConfig+0x1c8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fc f9a6 	bl	8002b94 <HAL_InitTick>

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40023c00 	.word	0x40023c00
 8006858:	40023800 	.word	0x40023800
 800685c:	08011874 	.word	0x08011874
 8006860:	20000000 	.word	0x20000000
 8006864:	20000014 	.word	0x20000014

08006868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800686c:	b090      	sub	sp, #64	; 0x40
 800686e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
 8006874:	2300      	movs	r3, #0
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006878:	2300      	movs	r3, #0
 800687a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006880:	4b59      	ldr	r3, [pc, #356]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b08      	cmp	r3, #8
 800688a:	d00d      	beq.n	80068a8 <HAL_RCC_GetSysClockFreq+0x40>
 800688c:	2b08      	cmp	r3, #8
 800688e:	f200 80a1 	bhi.w	80069d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x34>
 8006896:	2b04      	cmp	r3, #4
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800689a:	e09b      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800689c:	4b53      	ldr	r3, [pc, #332]	; (80069ec <HAL_RCC_GetSysClockFreq+0x184>)
 800689e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80068a0:	e09b      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068a2:	4b53      	ldr	r3, [pc, #332]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068a6:	e098      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068a8:	4b4f      	ldr	r3, [pc, #316]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068b2:	4b4d      	ldr	r3, [pc, #308]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d028      	beq.n	8006910 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068be:	4b4a      	ldr	r3, [pc, #296]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	099b      	lsrs	r3, r3, #6
 80068c4:	2200      	movs	r2, #0
 80068c6:	623b      	str	r3, [r7, #32]
 80068c8:	627a      	str	r2, [r7, #36]	; 0x24
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068d0:	2100      	movs	r1, #0
 80068d2:	4b47      	ldr	r3, [pc, #284]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068d4:	fb03 f201 	mul.w	r2, r3, r1
 80068d8:	2300      	movs	r3, #0
 80068da:	fb00 f303 	mul.w	r3, r0, r3
 80068de:	4413      	add	r3, r2
 80068e0:	4a43      	ldr	r2, [pc, #268]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068e2:	fba0 1202 	umull	r1, r2, r0, r2
 80068e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e8:	460a      	mov	r2, r1
 80068ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80068ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ee:	4413      	add	r3, r2
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	2200      	movs	r2, #0
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	61fa      	str	r2, [r7, #28]
 80068fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006902:	f7fa f959 	bl	8000bb8 <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4613      	mov	r3, r2
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690e:	e053      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006910:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	099b      	lsrs	r3, r3, #6
 8006916:	2200      	movs	r2, #0
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	617a      	str	r2, [r7, #20]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006922:	f04f 0b00 	mov.w	fp, #0
 8006926:	4652      	mov	r2, sl
 8006928:	465b      	mov	r3, fp
 800692a:	f04f 0000 	mov.w	r0, #0
 800692e:	f04f 0100 	mov.w	r1, #0
 8006932:	0159      	lsls	r1, r3, #5
 8006934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006938:	0150      	lsls	r0, r2, #5
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	ebb2 080a 	subs.w	r8, r2, sl
 8006942:	eb63 090b 	sbc.w	r9, r3, fp
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006952:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006956:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800695a:	ebb2 0408 	subs.w	r4, r2, r8
 800695e:	eb63 0509 	sbc.w	r5, r3, r9
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	00eb      	lsls	r3, r5, #3
 800696c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006970:	00e2      	lsls	r2, r4, #3
 8006972:	4614      	mov	r4, r2
 8006974:	461d      	mov	r5, r3
 8006976:	eb14 030a 	adds.w	r3, r4, sl
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	eb45 030b 	adc.w	r3, r5, fp
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800698e:	4629      	mov	r1, r5
 8006990:	028b      	lsls	r3, r1, #10
 8006992:	4621      	mov	r1, r4
 8006994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006998:	4621      	mov	r1, r4
 800699a:	028a      	lsls	r2, r1, #10
 800699c:	4610      	mov	r0, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a2:	2200      	movs	r2, #0
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	60fa      	str	r2, [r7, #12]
 80069a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069ac:	f7fa f904 	bl	8000bb8 <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4613      	mov	r3, r2
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069b8:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	3301      	adds	r3, #1
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80069c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069d2:	e002      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <HAL_RCC_GetSysClockFreq+0x184>)
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3740      	adds	r7, #64	; 0x40
 80069e0:	46bd      	mov	sp, r7
 80069e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069e6:	bf00      	nop
 80069e8:	40023800 	.word	0x40023800
 80069ec:	00f42400 	.word	0x00f42400
 80069f0:	017d7840 	.word	0x017d7840

080069f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069f8:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80069fa:	681b      	ldr	r3, [r3, #0]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000000 	.word	0x20000000

08006a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a10:	f7ff fff0 	bl	80069f4 <HAL_RCC_GetHCLKFreq>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	0a9b      	lsrs	r3, r3, #10
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	4903      	ldr	r1, [pc, #12]	; (8006a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a22:	5ccb      	ldrb	r3, [r1, r3]
 8006a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	08011884 	.word	0x08011884

08006a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a38:	f7ff ffdc 	bl	80069f4 <HAL_RCC_GetHCLKFreq>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	0b5b      	lsrs	r3, r3, #13
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	4903      	ldr	r1, [pc, #12]	; (8006a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a4a:	5ccb      	ldrb	r3, [r1, r3]
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40023800 	.word	0x40023800
 8006a58:	08011884 	.word	0x08011884

08006a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e041      	b.n	8006af2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fb f872 	bl	8001b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f000 f9a0 	bl	8006de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_TIM_PWM_Start+0x24>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	e022      	b.n	8006b66 <HAL_TIM_PWM_Start+0x6a>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d109      	bne.n	8006b3a <HAL_TIM_PWM_Start+0x3e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	bf14      	ite	ne
 8006b32:	2301      	movne	r3, #1
 8006b34:	2300      	moveq	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	e015      	b.n	8006b66 <HAL_TIM_PWM_Start+0x6a>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d109      	bne.n	8006b54 <HAL_TIM_PWM_Start+0x58>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	bf14      	ite	ne
 8006b4c:	2301      	movne	r3, #1
 8006b4e:	2300      	moveq	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	e008      	b.n	8006b66 <HAL_TIM_PWM_Start+0x6a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	bf14      	ite	ne
 8006b60:	2301      	movne	r3, #1
 8006b62:	2300      	moveq	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e068      	b.n	8006c40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_TIM_PWM_Start+0x82>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	e013      	b.n	8006ba6 <HAL_TIM_PWM_Start+0xaa>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_PWM_Start+0x92>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b8c:	e00b      	b.n	8006ba6 <HAL_TIM_PWM_Start+0xaa>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_PWM_Start+0xa2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b9c:	e003      	b.n	8006ba6 <HAL_TIM_PWM_Start+0xaa>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2201      	movs	r2, #1
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fb22 	bl	80071f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a23      	ldr	r2, [pc, #140]	; (8006c48 <HAL_TIM_PWM_Start+0x14c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d107      	bne.n	8006bce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <HAL_TIM_PWM_Start+0x14c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d018      	beq.n	8006c0a <HAL_TIM_PWM_Start+0x10e>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be0:	d013      	beq.n	8006c0a <HAL_TIM_PWM_Start+0x10e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <HAL_TIM_PWM_Start+0x150>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_TIM_PWM_Start+0x10e>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <HAL_TIM_PWM_Start+0x154>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_TIM_PWM_Start+0x10e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <HAL_TIM_PWM_Start+0x158>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIM_PWM_Start+0x10e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <HAL_TIM_PWM_Start+0x15c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d111      	bne.n	8006c2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b06      	cmp	r3, #6
 8006c1a:	d010      	beq.n	8006c3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c2c:	e007      	b.n	8006c3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40014000 	.word	0x40014000

08006c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e0ae      	b.n	8006dd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	f200 809f 	bhi.w	8006dc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cc5 	.word	0x08006cc5
 8006c94:	08006dc9 	.word	0x08006dc9
 8006c98:	08006dc9 	.word	0x08006dc9
 8006c9c:	08006dc9 	.word	0x08006dc9
 8006ca0:	08006d05 	.word	0x08006d05
 8006ca4:	08006dc9 	.word	0x08006dc9
 8006ca8:	08006dc9 	.word	0x08006dc9
 8006cac:	08006dc9 	.word	0x08006dc9
 8006cb0:	08006d47 	.word	0x08006d47
 8006cb4:	08006dc9 	.word	0x08006dc9
 8006cb8:	08006dc9 	.word	0x08006dc9
 8006cbc:	08006dc9 	.word	0x08006dc9
 8006cc0:	08006d87 	.word	0x08006d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f908 	bl	8006ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0208 	orr.w	r2, r2, #8
 8006cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0204 	bic.w	r2, r2, #4
 8006cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	619a      	str	r2, [r3, #24]
      break;
 8006d02:	e064      	b.n	8006dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f94e 	bl	8006fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6999      	ldr	r1, [r3, #24]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	021a      	lsls	r2, r3, #8
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	619a      	str	r2, [r3, #24]
      break;
 8006d44:	e043      	b.n	8006dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 f999 	bl	8007084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0208 	orr.w	r2, r2, #8
 8006d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0204 	bic.w	r2, r2, #4
 8006d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69d9      	ldr	r1, [r3, #28]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	61da      	str	r2, [r3, #28]
      break;
 8006d84:	e023      	b.n	8006dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f9e3 	bl	8007158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69da      	ldr	r2, [r3, #28]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69d9      	ldr	r1, [r3, #28]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	021a      	lsls	r2, r3, #8
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	61da      	str	r2, [r3, #28]
      break;
 8006dc6:	e002      	b.n	8006dce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	75fb      	strb	r3, [r7, #23]
      break;
 8006dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a34      	ldr	r2, [pc, #208]	; (8006ec4 <TIM_Base_SetConfig+0xe4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00f      	beq.n	8006e18 <TIM_Base_SetConfig+0x38>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfe:	d00b      	beq.n	8006e18 <TIM_Base_SetConfig+0x38>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a31      	ldr	r2, [pc, #196]	; (8006ec8 <TIM_Base_SetConfig+0xe8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d007      	beq.n	8006e18 <TIM_Base_SetConfig+0x38>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a30      	ldr	r2, [pc, #192]	; (8006ecc <TIM_Base_SetConfig+0xec>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_Base_SetConfig+0x38>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a2f      	ldr	r2, [pc, #188]	; (8006ed0 <TIM_Base_SetConfig+0xf0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d108      	bne.n	8006e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a25      	ldr	r2, [pc, #148]	; (8006ec4 <TIM_Base_SetConfig+0xe4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01b      	beq.n	8006e6a <TIM_Base_SetConfig+0x8a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e38:	d017      	beq.n	8006e6a <TIM_Base_SetConfig+0x8a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <TIM_Base_SetConfig+0xe8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <TIM_Base_SetConfig+0x8a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a21      	ldr	r2, [pc, #132]	; (8006ecc <TIM_Base_SetConfig+0xec>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00f      	beq.n	8006e6a <TIM_Base_SetConfig+0x8a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a20      	ldr	r2, [pc, #128]	; (8006ed0 <TIM_Base_SetConfig+0xf0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00b      	beq.n	8006e6a <TIM_Base_SetConfig+0x8a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a1f      	ldr	r2, [pc, #124]	; (8006ed4 <TIM_Base_SetConfig+0xf4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <TIM_Base_SetConfig+0x8a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ed8 <TIM_Base_SetConfig+0xf8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d003      	beq.n	8006e6a <TIM_Base_SetConfig+0x8a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a1d      	ldr	r2, [pc, #116]	; (8006edc <TIM_Base_SetConfig+0xfc>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d108      	bne.n	8006e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a08      	ldr	r2, [pc, #32]	; (8006ec4 <TIM_Base_SetConfig+0xe4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d103      	bne.n	8006eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	615a      	str	r2, [r3, #20]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40010000 	.word	0x40010000
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40000800 	.word	0x40000800
 8006ed0:	40000c00 	.word	0x40000c00
 8006ed4:	40014000 	.word	0x40014000
 8006ed8:	40014400 	.word	0x40014400
 8006edc:	40014800 	.word	0x40014800

08006ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f023 0201 	bic.w	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f023 0302 	bic.w	r3, r3, #2
 8006f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a1c      	ldr	r2, [pc, #112]	; (8006fa8 <TIM_OC1_SetConfig+0xc8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10c      	bne.n	8006f56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 0308 	bic.w	r3, r3, #8
 8006f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f023 0304 	bic.w	r3, r3, #4
 8006f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <TIM_OC1_SetConfig+0xc8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d111      	bne.n	8006f82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	621a      	str	r2, [r3, #32]
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	40010000 	.word	0x40010000

08006fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f023 0210 	bic.w	r2, r3, #16
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0320 	bic.w	r3, r3, #32
 8006ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a1e      	ldr	r2, [pc, #120]	; (8007080 <TIM_OC2_SetConfig+0xd4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d10d      	bne.n	8007028 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007026:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a15      	ldr	r2, [pc, #84]	; (8007080 <TIM_OC2_SetConfig+0xd4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d113      	bne.n	8007058 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40010000 	.word	0x40010000

08007084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0303 	bic.w	r3, r3, #3
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <TIM_OC3_SetConfig+0xd0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d10d      	bne.n	80070fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a14      	ldr	r2, [pc, #80]	; (8007154 <TIM_OC3_SetConfig+0xd0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d113      	bne.n	800712e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800710c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40010000 	.word	0x40010000

08007158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	031b      	lsls	r3, r3, #12
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a10      	ldr	r2, [pc, #64]	; (80071f4 <TIM_OC4_SetConfig+0x9c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d109      	bne.n	80071cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	019b      	lsls	r3, r3, #6
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	621a      	str	r2, [r3, #32]
}
 80071e6:	bf00      	nop
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40010000 	.word	0x40010000

080071f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	2201      	movs	r2, #1
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1a      	ldr	r2, [r3, #32]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	43db      	mvns	r3, r3
 800721a:	401a      	ands	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a1a      	ldr	r2, [r3, #32]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	fa01 f303 	lsl.w	r3, r1, r3
 8007230:	431a      	orrs	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
}
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007258:	2302      	movs	r3, #2
 800725a:	e050      	b.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1c      	ldr	r2, [pc, #112]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d018      	beq.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a8:	d013      	beq.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a18      	ldr	r2, [pc, #96]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d00e      	beq.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a16      	ldr	r2, [pc, #88]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d009      	beq.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a15      	ldr	r2, [pc, #84]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d004      	beq.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a13      	ldr	r2, [pc, #76]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d10c      	bne.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40010000 	.word	0x40010000
 8007310:	40000400 	.word	0x40000400
 8007314:	40000800 	.word	0x40000800
 8007318:	40000c00 	.word	0x40000c00
 800731c:	40014000 	.word	0x40014000

08007320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e03f      	b.n	80073b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d106      	bne.n	800734c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fa fc8c 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2224      	movs	r2, #36	; 0x24
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 faa5 	bl	80078b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691a      	ldr	r2, [r3, #16]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695a      	ldr	r2, [r3, #20]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	4613      	mov	r3, r2
 80073c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d11d      	bne.n	8007410 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <HAL_UART_Receive_DMA+0x26>
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e016      	b.n	8007412 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_UART_Receive_DMA+0x38>
 80073ee:	2302      	movs	r3, #2
 80073f0:	e00f      	b.n	8007412 <HAL_UART_Receive_DMA+0x58>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	461a      	mov	r2, r3
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f92a 	bl	8007660 <UART_Start_Receive_DMA>
 800740c:	4603      	mov	r3, r0
 800740e:	e000      	b.n	8007412 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007410:	2302      	movs	r3, #2
  }
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b09c      	sub	sp, #112	; 0x70
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d172      	bne.n	8007570 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800748a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748c:	2200      	movs	r2, #0
 800748e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80074a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	330c      	adds	r3, #12
 80074ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80074b2:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e5      	bne.n	8007490 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3314      	adds	r3, #20
 80074ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	667b      	str	r3, [r7, #100]	; 0x64
 80074dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3314      	adds	r3, #20
 80074e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074e4:	647a      	str	r2, [r7, #68]	; 0x44
 80074e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3314      	adds	r3, #20
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	623b      	str	r3, [r7, #32]
   return(result);
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800750e:	663b      	str	r3, [r7, #96]	; 0x60
 8007510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3314      	adds	r3, #20
 8007516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007518:	633a      	str	r2, [r7, #48]	; 0x30
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800751e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e5      	bne.n	80074f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800752c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752e:	2220      	movs	r2, #32
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	2b01      	cmp	r3, #1
 800753a:	d119      	bne.n	8007570 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	60fb      	str	r3, [r7, #12]
   return(result);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0310 	bic.w	r3, r3, #16
 8007552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800755c:	61fa      	str	r2, [r7, #28]
 800755e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	617b      	str	r3, [r7, #20]
   return(result);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e5      	bne.n	800753c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	2b01      	cmp	r3, #1
 8007576:	d106      	bne.n	8007586 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800757c:	4619      	mov	r1, r3
 800757e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007580:	f7ff ff69 	bl	8007456 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007584:	e002      	b.n	800758c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007586:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007588:	f7ff ff47 	bl	800741a <HAL_UART_RxCpltCallback>
}
 800758c:	bf00      	nop
 800758e:	3770      	adds	r7, #112	; 0x70
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d108      	bne.n	80075bc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075ae:	085b      	lsrs	r3, r3, #1
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	4619      	mov	r1, r3
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff ff4e 	bl	8007456 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075ba:	e002      	b.n	80075c2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ff36 	bl	800742e <HAL_UART_RxHalfCpltCallback>
}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e6:	2b80      	cmp	r3, #128	; 0x80
 80075e8:	bf0c      	ite	eq
 80075ea:	2301      	moveq	r3, #1
 80075ec:	2300      	movne	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b21      	cmp	r3, #33	; 0x21
 80075fc:	d108      	bne.n	8007610 <UART_DMAError+0x46>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800760a:	68b8      	ldr	r0, [r7, #8]
 800760c:	f000 f8c6 	bl	800779c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761a:	2b40      	cmp	r3, #64	; 0x40
 800761c:	bf0c      	ite	eq
 800761e:	2301      	moveq	r3, #1
 8007620:	2300      	movne	r3, #0
 8007622:	b2db      	uxtb	r3, r3
 8007624:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b22      	cmp	r3, #34	; 0x22
 8007630:	d108      	bne.n	8007644 <UART_DMAError+0x7a>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2200      	movs	r2, #0
 800763c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800763e:	68b8      	ldr	r0, [r7, #8]
 8007640:	f000 f8d4 	bl	80077ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	f043 0210 	orr.w	r2, r3, #16
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007650:	68b8      	ldr	r0, [r7, #8]
 8007652:	f7ff fef6 	bl	8007442 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007656:	bf00      	nop
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b098      	sub	sp, #96	; 0x60
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2222      	movs	r2, #34	; 0x22
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	4a40      	ldr	r2, [pc, #256]	; (8007790 <UART_Start_Receive_DMA+0x130>)
 800768e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	4a3f      	ldr	r2, [pc, #252]	; (8007794 <UART_Start_Receive_DMA+0x134>)
 8007696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	4a3e      	ldr	r2, [pc, #248]	; (8007798 <UART_Start_Receive_DMA+0x138>)
 800769e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	2200      	movs	r2, #0
 80076a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80076a8:	f107 0308 	add.w	r3, r7, #8
 80076ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4619      	mov	r1, r3
 80076ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	f7fc f84a 	bl	8003758 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	613b      	str	r3, [r7, #16]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d019      	beq.n	800771e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	330c      	adds	r3, #12
 80076f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007700:	65bb      	str	r3, [r7, #88]	; 0x58
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	330c      	adds	r3, #12
 8007708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800770a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800770c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e5      	bne.n	80076ea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3314      	adds	r3, #20
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	f043 0301 	orr.w	r3, r3, #1
 8007734:	657b      	str	r3, [r7, #84]	; 0x54
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800773e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e5      	bne.n	800771e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3314      	adds	r3, #20
 8007758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	617b      	str	r3, [r7, #20]
   return(result);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007768:	653b      	str	r3, [r7, #80]	; 0x50
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3314      	adds	r3, #20
 8007770:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007772:	627a      	str	r2, [r7, #36]	; 0x24
 8007774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	6a39      	ldr	r1, [r7, #32]
 8007778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e5      	bne.n	8007752 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3760      	adds	r7, #96	; 0x60
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	0800746f 	.word	0x0800746f
 8007794:	08007595 	.word	0x08007595
 8007798:	080075cb 	.word	0x080075cb

0800779c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800779c:	b480      	push	{r7}
 800779e:	b089      	sub	sp, #36	; 0x24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	61ba      	str	r2, [r7, #24]
 80077c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6979      	ldr	r1, [r7, #20]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	613b      	str	r3, [r7, #16]
   return(result);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e5      	bne.n	80077a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80077e0:	bf00      	nop
 80077e2:	3724      	adds	r7, #36	; 0x24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b095      	sub	sp, #84	; 0x54
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	330c      	adds	r3, #12
 80077fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800780a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007814:	643a      	str	r2, [r7, #64]	; 0x40
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800781a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e5      	bne.n	80077f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3314      	adds	r3, #20
 800782e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	61fb      	str	r3, [r7, #28]
   return(result);
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f023 0301 	bic.w	r3, r3, #1
 800783e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3314      	adds	r3, #20
 8007846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800784a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800784e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e5      	bne.n	8007828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	2b01      	cmp	r3, #1
 8007862:	d119      	bne.n	8007898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	330c      	adds	r3, #12
 800786a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	60bb      	str	r3, [r7, #8]
   return(result);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f023 0310 	bic.w	r3, r3, #16
 800787a:	647b      	str	r3, [r7, #68]	; 0x44
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007884:	61ba      	str	r2, [r7, #24]
 8007886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6979      	ldr	r1, [r7, #20]
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	613b      	str	r3, [r7, #16]
   return(result);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078a6:	bf00      	nop
 80078a8:	3754      	adds	r7, #84	; 0x54
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
	...

080078b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b8:	b0c0      	sub	sp, #256	; 0x100
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d0:	68d9      	ldr	r1, [r3, #12]
 80078d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	ea40 0301 	orr.w	r3, r0, r1
 80078dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800790c:	f021 010c 	bic.w	r1, r1, #12
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800791a:	430b      	orrs	r3, r1
 800791c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800791e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800792a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792e:	6999      	ldr	r1, [r3, #24]
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	ea40 0301 	orr.w	r3, r0, r1
 800793a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800793c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	4b8f      	ldr	r3, [pc, #572]	; (8007b80 <UART_SetConfig+0x2cc>)
 8007944:	429a      	cmp	r2, r3
 8007946:	d005      	beq.n	8007954 <UART_SetConfig+0xa0>
 8007948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b8d      	ldr	r3, [pc, #564]	; (8007b84 <UART_SetConfig+0x2d0>)
 8007950:	429a      	cmp	r2, r3
 8007952:	d104      	bne.n	800795e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007954:	f7ff f86e 	bl	8006a34 <HAL_RCC_GetPCLK2Freq>
 8007958:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800795c:	e003      	b.n	8007966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800795e:	f7ff f855 	bl	8006a0c <HAL_RCC_GetPCLK1Freq>
 8007962:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007970:	f040 810c 	bne.w	8007b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007978:	2200      	movs	r2, #0
 800797a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800797e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	1891      	adds	r1, r2, r2
 800798c:	65b9      	str	r1, [r7, #88]	; 0x58
 800798e:	415b      	adcs	r3, r3
 8007990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007996:	4621      	mov	r1, r4
 8007998:	eb12 0801 	adds.w	r8, r2, r1
 800799c:	4629      	mov	r1, r5
 800799e:	eb43 0901 	adc.w	r9, r3, r1
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	f04f 0300 	mov.w	r3, #0
 80079aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079b6:	4690      	mov	r8, r2
 80079b8:	4699      	mov	r9, r3
 80079ba:	4623      	mov	r3, r4
 80079bc:	eb18 0303 	adds.w	r3, r8, r3
 80079c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079c4:	462b      	mov	r3, r5
 80079c6:	eb49 0303 	adc.w	r3, r9, r3
 80079ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079e2:	460b      	mov	r3, r1
 80079e4:	18db      	adds	r3, r3, r3
 80079e6:	653b      	str	r3, [r7, #80]	; 0x50
 80079e8:	4613      	mov	r3, r2
 80079ea:	eb42 0303 	adc.w	r3, r2, r3
 80079ee:	657b      	str	r3, [r7, #84]	; 0x54
 80079f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079f8:	f7f9 f8de 	bl	8000bb8 <__aeabi_uldivmod>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4b61      	ldr	r3, [pc, #388]	; (8007b88 <UART_SetConfig+0x2d4>)
 8007a02:	fba3 2302 	umull	r2, r3, r3, r2
 8007a06:	095b      	lsrs	r3, r3, #5
 8007a08:	011c      	lsls	r4, r3, #4
 8007a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	464b      	mov	r3, r9
 8007a20:	1891      	adds	r1, r2, r2
 8007a22:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a24:	415b      	adcs	r3, r3
 8007a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a2c:	4641      	mov	r1, r8
 8007a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a32:	4649      	mov	r1, r9
 8007a34:	eb43 0b01 	adc.w	fp, r3, r1
 8007a38:	f04f 0200 	mov.w	r2, #0
 8007a3c:	f04f 0300 	mov.w	r3, #0
 8007a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a4c:	4692      	mov	sl, r2
 8007a4e:	469b      	mov	fp, r3
 8007a50:	4643      	mov	r3, r8
 8007a52:	eb1a 0303 	adds.w	r3, sl, r3
 8007a56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	18db      	adds	r3, r3, r3
 8007a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a7e:	4613      	mov	r3, r2
 8007a80:	eb42 0303 	adc.w	r3, r2, r3
 8007a84:	647b      	str	r3, [r7, #68]	; 0x44
 8007a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a8e:	f7f9 f893 	bl	8000bb8 <__aeabi_uldivmod>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	4b3b      	ldr	r3, [pc, #236]	; (8007b88 <UART_SetConfig+0x2d4>)
 8007a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	2264      	movs	r2, #100	; 0x64
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	1acb      	subs	r3, r1, r3
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007aae:	4b36      	ldr	r3, [pc, #216]	; (8007b88 <UART_SetConfig+0x2d4>)
 8007ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007abc:	441c      	add	r4, r3
 8007abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	1891      	adds	r1, r2, r2
 8007ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ad8:	415b      	adcs	r3, r3
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	1851      	adds	r1, r2, r1
 8007ae4:	6339      	str	r1, [r7, #48]	; 0x30
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	414b      	adcs	r3, r1
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007af8:	4659      	mov	r1, fp
 8007afa:	00cb      	lsls	r3, r1, #3
 8007afc:	4651      	mov	r1, sl
 8007afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b02:	4651      	mov	r1, sl
 8007b04:	00ca      	lsls	r2, r1, #3
 8007b06:	4610      	mov	r0, r2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	189b      	adds	r3, r3, r2
 8007b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b14:	464b      	mov	r3, r9
 8007b16:	460a      	mov	r2, r1
 8007b18:	eb42 0303 	adc.w	r3, r2, r3
 8007b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b34:	460b      	mov	r3, r1
 8007b36:	18db      	adds	r3, r3, r3
 8007b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	eb42 0303 	adc.w	r3, r2, r3
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b4a:	f7f9 f835 	bl	8000bb8 <__aeabi_uldivmod>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <UART_SetConfig+0x2d4>)
 8007b54:	fba3 1302 	umull	r1, r3, r3, r2
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	2164      	movs	r1, #100	; 0x64
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	3332      	adds	r3, #50	; 0x32
 8007b66:	4a08      	ldr	r2, [pc, #32]	; (8007b88 <UART_SetConfig+0x2d4>)
 8007b68:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	f003 0207 	and.w	r2, r3, #7
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4422      	add	r2, r4
 8007b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b7c:	e106      	b.n	8007d8c <UART_SetConfig+0x4d8>
 8007b7e:	bf00      	nop
 8007b80:	40011000 	.word	0x40011000
 8007b84:	40011400 	.word	0x40011400
 8007b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b9e:	4642      	mov	r2, r8
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	1891      	adds	r1, r2, r2
 8007ba4:	6239      	str	r1, [r7, #32]
 8007ba6:	415b      	adcs	r3, r3
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8007baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bae:	4641      	mov	r1, r8
 8007bb0:	1854      	adds	r4, r2, r1
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	eb43 0501 	adc.w	r5, r3, r1
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	00eb      	lsls	r3, r5, #3
 8007bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bc6:	00e2      	lsls	r2, r4, #3
 8007bc8:	4614      	mov	r4, r2
 8007bca:	461d      	mov	r5, r3
 8007bcc:	4643      	mov	r3, r8
 8007bce:	18e3      	adds	r3, r4, r3
 8007bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bd4:	464b      	mov	r3, r9
 8007bd6:	eb45 0303 	adc.w	r3, r5, r3
 8007bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	008b      	lsls	r3, r1, #2
 8007bfe:	4621      	mov	r1, r4
 8007c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c04:	4621      	mov	r1, r4
 8007c06:	008a      	lsls	r2, r1, #2
 8007c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c0c:	f7f8 ffd4 	bl	8000bb8 <__aeabi_uldivmod>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4b60      	ldr	r3, [pc, #384]	; (8007d98 <UART_SetConfig+0x4e4>)
 8007c16:	fba3 2302 	umull	r2, r3, r3, r2
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	011c      	lsls	r4, r3, #4
 8007c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c30:	4642      	mov	r2, r8
 8007c32:	464b      	mov	r3, r9
 8007c34:	1891      	adds	r1, r2, r2
 8007c36:	61b9      	str	r1, [r7, #24]
 8007c38:	415b      	adcs	r3, r3
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c40:	4641      	mov	r1, r8
 8007c42:	1851      	adds	r1, r2, r1
 8007c44:	6139      	str	r1, [r7, #16]
 8007c46:	4649      	mov	r1, r9
 8007c48:	414b      	adcs	r3, r1
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	f04f 0200 	mov.w	r2, #0
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c58:	4659      	mov	r1, fp
 8007c5a:	00cb      	lsls	r3, r1, #3
 8007c5c:	4651      	mov	r1, sl
 8007c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c62:	4651      	mov	r1, sl
 8007c64:	00ca      	lsls	r2, r1, #3
 8007c66:	4610      	mov	r0, r2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	189b      	adds	r3, r3, r2
 8007c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c74:	464b      	mov	r3, r9
 8007c76:	460a      	mov	r2, r1
 8007c78:	eb42 0303 	adc.w	r3, r2, r3
 8007c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c8c:	f04f 0200 	mov.w	r2, #0
 8007c90:	f04f 0300 	mov.w	r3, #0
 8007c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c98:	4649      	mov	r1, r9
 8007c9a:	008b      	lsls	r3, r1, #2
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ca2:	4641      	mov	r1, r8
 8007ca4:	008a      	lsls	r2, r1, #2
 8007ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007caa:	f7f8 ff85 	bl	8000bb8 <__aeabi_uldivmod>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4b38      	ldr	r3, [pc, #224]	; (8007d98 <UART_SetConfig+0x4e4>)
 8007cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	2264      	movs	r2, #100	; 0x64
 8007cbe:	fb02 f303 	mul.w	r3, r2, r3
 8007cc2:	1acb      	subs	r3, r1, r3
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	3332      	adds	r3, #50	; 0x32
 8007cc8:	4a33      	ldr	r2, [pc, #204]	; (8007d98 <UART_SetConfig+0x4e4>)
 8007cca:	fba2 2303 	umull	r2, r3, r2, r3
 8007cce:	095b      	lsrs	r3, r3, #5
 8007cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cd4:	441c      	add	r4, r3
 8007cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cda:	2200      	movs	r2, #0
 8007cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8007cde:	677a      	str	r2, [r7, #116]	; 0x74
 8007ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	1891      	adds	r1, r2, r2
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	415b      	adcs	r3, r3
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cf4:	4641      	mov	r1, r8
 8007cf6:	1851      	adds	r1, r2, r1
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	414b      	adcs	r3, r1
 8007cfe:	607b      	str	r3, [r7, #4]
 8007d00:	f04f 0200 	mov.w	r2, #0
 8007d04:	f04f 0300 	mov.w	r3, #0
 8007d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d0c:	4659      	mov	r1, fp
 8007d0e:	00cb      	lsls	r3, r1, #3
 8007d10:	4651      	mov	r1, sl
 8007d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d16:	4651      	mov	r1, sl
 8007d18:	00ca      	lsls	r2, r1, #3
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	4642      	mov	r2, r8
 8007d22:	189b      	adds	r3, r3, r2
 8007d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d26:	464b      	mov	r3, r9
 8007d28:	460a      	mov	r2, r1
 8007d2a:	eb42 0303 	adc.w	r3, r2, r3
 8007d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	663b      	str	r3, [r7, #96]	; 0x60
 8007d3a:	667a      	str	r2, [r7, #100]	; 0x64
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d48:	4649      	mov	r1, r9
 8007d4a:	008b      	lsls	r3, r1, #2
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d52:	4641      	mov	r1, r8
 8007d54:	008a      	lsls	r2, r1, #2
 8007d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d5a:	f7f8 ff2d 	bl	8000bb8 <__aeabi_uldivmod>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <UART_SetConfig+0x4e4>)
 8007d64:	fba3 1302 	umull	r1, r3, r3, r2
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	2164      	movs	r1, #100	; 0x64
 8007d6c:	fb01 f303 	mul.w	r3, r1, r3
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	3332      	adds	r3, #50	; 0x32
 8007d76:	4a08      	ldr	r2, [pc, #32]	; (8007d98 <UART_SetConfig+0x4e4>)
 8007d78:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	f003 020f 	and.w	r2, r3, #15
 8007d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4422      	add	r2, r4
 8007d8a:	609a      	str	r2, [r3, #8]
}
 8007d8c:	bf00      	nop
 8007d8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d92:	46bd      	mov	sp, r7
 8007d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d98:	51eb851f 	.word	0x51eb851f

08007d9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	f107 001c 	add.w	r0, r7, #28
 8007daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d122      	bne.n	8007dfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d105      	bne.n	8007dee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 fbee 	bl	80095d0 <USB_CoreReset>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]
 8007df8:	e01a      	b.n	8007e30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fbe2 	bl	80095d0 <USB_CoreReset>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d106      	bne.n	8007e24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38
 8007e22:	e005      	b.n	8007e30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d10b      	bne.n	8007e4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f043 0206 	orr.w	r2, r3, #6
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e5a:	b004      	add	sp, #16
 8007e5c:	4770      	bx	lr
	...

08007e60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d165      	bne.n	8007f40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4a41      	ldr	r2, [pc, #260]	; (8007f7c <USB_SetTurnaroundTime+0x11c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d906      	bls.n	8007e8a <USB_SetTurnaroundTime+0x2a>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4a40      	ldr	r2, [pc, #256]	; (8007f80 <USB_SetTurnaroundTime+0x120>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d202      	bcs.n	8007e8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e84:	230f      	movs	r3, #15
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	e062      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4a3c      	ldr	r2, [pc, #240]	; (8007f80 <USB_SetTurnaroundTime+0x120>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d306      	bcc.n	8007ea0 <USB_SetTurnaroundTime+0x40>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4a3b      	ldr	r2, [pc, #236]	; (8007f84 <USB_SetTurnaroundTime+0x124>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d202      	bcs.n	8007ea0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e9a:	230e      	movs	r3, #14
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e057      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4a38      	ldr	r2, [pc, #224]	; (8007f84 <USB_SetTurnaroundTime+0x124>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d306      	bcc.n	8007eb6 <USB_SetTurnaroundTime+0x56>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4a37      	ldr	r2, [pc, #220]	; (8007f88 <USB_SetTurnaroundTime+0x128>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d202      	bcs.n	8007eb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007eb0:	230d      	movs	r3, #13
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e04c      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4a33      	ldr	r2, [pc, #204]	; (8007f88 <USB_SetTurnaroundTime+0x128>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d306      	bcc.n	8007ecc <USB_SetTurnaroundTime+0x6c>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4a32      	ldr	r2, [pc, #200]	; (8007f8c <USB_SetTurnaroundTime+0x12c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d802      	bhi.n	8007ecc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	e041      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a2f      	ldr	r2, [pc, #188]	; (8007f8c <USB_SetTurnaroundTime+0x12c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d906      	bls.n	8007ee2 <USB_SetTurnaroundTime+0x82>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4a2e      	ldr	r2, [pc, #184]	; (8007f90 <USB_SetTurnaroundTime+0x130>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d802      	bhi.n	8007ee2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007edc:	230b      	movs	r3, #11
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e036      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4a2a      	ldr	r2, [pc, #168]	; (8007f90 <USB_SetTurnaroundTime+0x130>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d906      	bls.n	8007ef8 <USB_SetTurnaroundTime+0x98>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4a29      	ldr	r2, [pc, #164]	; (8007f94 <USB_SetTurnaroundTime+0x134>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d802      	bhi.n	8007ef8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e02b      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4a26      	ldr	r2, [pc, #152]	; (8007f94 <USB_SetTurnaroundTime+0x134>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d906      	bls.n	8007f0e <USB_SetTurnaroundTime+0xae>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <USB_SetTurnaroundTime+0x138>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d202      	bcs.n	8007f0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f08:	2309      	movs	r3, #9
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e020      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4a21      	ldr	r2, [pc, #132]	; (8007f98 <USB_SetTurnaroundTime+0x138>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d306      	bcc.n	8007f24 <USB_SetTurnaroundTime+0xc4>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4a20      	ldr	r2, [pc, #128]	; (8007f9c <USB_SetTurnaroundTime+0x13c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d802      	bhi.n	8007f24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f1e:	2308      	movs	r3, #8
 8007f20:	617b      	str	r3, [r7, #20]
 8007f22:	e015      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4a1d      	ldr	r2, [pc, #116]	; (8007f9c <USB_SetTurnaroundTime+0x13c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d906      	bls.n	8007f3a <USB_SetTurnaroundTime+0xda>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <USB_SetTurnaroundTime+0x140>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d202      	bcs.n	8007f3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f34:	2307      	movs	r3, #7
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e00a      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f3a:	2306      	movs	r3, #6
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	e007      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f46:	2309      	movs	r3, #9
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	e001      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f4c:	2309      	movs	r3, #9
 8007f4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	029b      	lsls	r3, r3, #10
 8007f64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	00d8acbf 	.word	0x00d8acbf
 8007f80:	00e4e1c0 	.word	0x00e4e1c0
 8007f84:	00f42400 	.word	0x00f42400
 8007f88:	01067380 	.word	0x01067380
 8007f8c:	011a499f 	.word	0x011a499f
 8007f90:	01312cff 	.word	0x01312cff
 8007f94:	014ca43f 	.word	0x014ca43f
 8007f98:	016e3600 	.word	0x016e3600
 8007f9c:	01a6ab1f 	.word	0x01a6ab1f
 8007fa0:	01e84800 	.word	0x01e84800

08007fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f043 0201 	orr.w	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f023 0201 	bic.w	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d115      	bne.n	8008036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008016:	2001      	movs	r0, #1
 8008018:	f7fa fe0c 	bl	8002c34 <HAL_Delay>
      ms++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 fa45 	bl	80094b2 <USB_GetMode>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d01e      	beq.n	800806c <USB_SetCurrentMode+0x84>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b31      	cmp	r3, #49	; 0x31
 8008032:	d9f0      	bls.n	8008016 <USB_SetCurrentMode+0x2e>
 8008034:	e01a      	b.n	800806c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d115      	bne.n	8008068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008048:	2001      	movs	r0, #1
 800804a:	f7fa fdf3 	bl	8002c34 <HAL_Delay>
      ms++;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3301      	adds	r3, #1
 8008052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 fa2c 	bl	80094b2 <USB_GetMode>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <USB_SetCurrentMode+0x84>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b31      	cmp	r3, #49	; 0x31
 8008064:	d9f0      	bls.n	8008048 <USB_SetCurrentMode+0x60>
 8008066:	e001      	b.n	800806c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e005      	b.n	8008078 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b32      	cmp	r3, #50	; 0x32
 8008070:	d101      	bne.n	8008076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008080:	b084      	sub	sp, #16
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800808e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	e009      	b.n	80080b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	3340      	adds	r3, #64	; 0x40
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3301      	adds	r3, #1
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2b0e      	cmp	r3, #14
 80080b8:	d9f2      	bls.n	80080a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11c      	bne.n	80080fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ce:	f043 0302 	orr.w	r3, r3, #2
 80080d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
 80080f8:	e00b      	b.n	8008112 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008118:	461a      	mov	r2, r3
 800811a:	2300      	movs	r3, #0
 800811c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008124:	4619      	mov	r1, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812c:	461a      	mov	r2, r3
 800812e:	680b      	ldr	r3, [r1, #0]
 8008130:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	2b01      	cmp	r3, #1
 8008136:	d10c      	bne.n	8008152 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f965 	bl	8008410 <USB_SetDevSpeed>
 8008146:	e008      	b.n	800815a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008148:	2101      	movs	r1, #1
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f960 	bl	8008410 <USB_SetDevSpeed>
 8008150:	e003      	b.n	800815a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008152:	2103      	movs	r1, #3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f95b 	bl	8008410 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800815a:	2110      	movs	r1, #16
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8f3 	bl	8008348 <USB_FlushTxFifo>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f91f 	bl	80083b0 <USB_FlushRxFifo>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008182:	461a      	mov	r2, r3
 8008184:	2300      	movs	r3, #0
 8008186:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818e:	461a      	mov	r2, r3
 8008190:	2300      	movs	r3, #0
 8008192:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	461a      	mov	r2, r3
 800819c:	2300      	movs	r3, #0
 800819e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	e043      	b.n	800822e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081bc:	d118      	bne.n	80081f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d0:	461a      	mov	r2, r3
 80081d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e013      	b.n	8008202 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	461a      	mov	r2, r3
 80081e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e008      	b.n	8008202 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fc:	461a      	mov	r2, r3
 80081fe:	2300      	movs	r3, #0
 8008200:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	461a      	mov	r2, r3
 8008210:	2300      	movs	r3, #0
 8008212:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	461a      	mov	r2, r3
 8008222:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008226:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3301      	adds	r3, #1
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	429a      	cmp	r2, r3
 8008234:	d3b7      	bcc.n	80081a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008236:	2300      	movs	r3, #0
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	e043      	b.n	80082c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800824e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008252:	d118      	bne.n	8008286 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4413      	add	r3, r2
 8008262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008266:	461a      	mov	r2, r3
 8008268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	e013      	b.n	8008298 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	461a      	mov	r2, r3
 800827e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	e008      	b.n	8008298 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	461a      	mov	r2, r3
 8008294:	2300      	movs	r3, #0
 8008296:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a4:	461a      	mov	r2, r3
 80082a6:	2300      	movs	r3, #0
 80082a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	461a      	mov	r2, r3
 80082b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	3301      	adds	r3, #1
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d3b7      	bcc.n	800823c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d105      	bne.n	8008300 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	f043 0210 	orr.w	r2, r3, #16
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <USB_DevInit+0x2c4>)
 8008306:	4313      	orrs	r3, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800830c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f043 0208 	orr.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800831e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008320:	2b01      	cmp	r3, #1
 8008322:	d107      	bne.n	8008334 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800832c:	f043 0304 	orr.w	r3, r3, #4
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008334:	7dfb      	ldrb	r3, [r7, #23]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008340:	b004      	add	sp, #16
 8008342:	4770      	bx	lr
 8008344:	803c3800 	.word	0x803c3800

08008348 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3301      	adds	r3, #1
 800835a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a13      	ldr	r2, [pc, #76]	; (80083ac <USB_FlushTxFifo+0x64>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d901      	bls.n	8008368 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e01b      	b.n	80083a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	daf2      	bge.n	8008356 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	019b      	lsls	r3, r3, #6
 8008378:	f043 0220 	orr.w	r2, r3, #32
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4a08      	ldr	r2, [pc, #32]	; (80083ac <USB_FlushTxFifo+0x64>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d901      	bls.n	8008392 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e006      	b.n	80083a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b20      	cmp	r3, #32
 800839c:	d0f0      	beq.n	8008380 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	00030d40 	.word	0x00030d40

080083b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4a11      	ldr	r2, [pc, #68]	; (800840c <USB_FlushRxFifo+0x5c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d901      	bls.n	80083ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e018      	b.n	8008400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	daf2      	bge.n	80083bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2210      	movs	r2, #16
 80083de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4a08      	ldr	r2, [pc, #32]	; (800840c <USB_FlushRxFifo+0x5c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d901      	bls.n	80083f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e006      	b.n	8008400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0310 	and.w	r3, r3, #16
 80083fa:	2b10      	cmp	r3, #16
 80083fc:	d0f0      	beq.n	80083e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	00030d40 	.word	0x00030d40

08008410 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	68f9      	ldr	r1, [r7, #12]
 800842c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008430:	4313      	orrs	r3, r2
 8008432:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008442:	b480      	push	{r7}
 8008444:	b087      	sub	sp, #28
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d102      	bne.n	8008468 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]
 8008466:	e00a      	b.n	800847e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d002      	beq.n	8008474 <USB_GetDevSpeed+0x32>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b06      	cmp	r3, #6
 8008472:	d102      	bne.n	800847a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008474:	2302      	movs	r3, #2
 8008476:	75fb      	strb	r3, [r7, #23]
 8008478:	e001      	b.n	800847e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800847a:	230f      	movs	r3, #15
 800847c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008480:	4618      	mov	r0, r3
 8008482:	371c      	adds	r7, #28
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d13a      	bne.n	800851e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	f003 030f 	and.w	r3, r3, #15
 80084b8:	2101      	movs	r1, #1
 80084ba:	fa01 f303 	lsl.w	r3, r1, r3
 80084be:	b29b      	uxth	r3, r3
 80084c0:	68f9      	ldr	r1, [r7, #12]
 80084c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084c6:	4313      	orrs	r3, r2
 80084c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d155      	bne.n	800858c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	791b      	ldrb	r3, [r3, #4]
 80084fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	059b      	lsls	r3, r3, #22
 8008502:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008504:	4313      	orrs	r3, r2
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	440a      	add	r2, r1
 800850e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	e036      	b.n	800858c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008524:	69da      	ldr	r2, [r3, #28]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	f003 030f 	and.w	r3, r3, #15
 800852e:	2101      	movs	r1, #1
 8008530:	fa01 f303 	lsl.w	r3, r1, r3
 8008534:	041b      	lsls	r3, r3, #16
 8008536:	68f9      	ldr	r1, [r7, #12]
 8008538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800853c:	4313      	orrs	r3, r2
 800853e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d11a      	bne.n	800858c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	791b      	ldrb	r3, [r3, #4]
 8008570:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008572:	430b      	orrs	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d161      	bne.n	800867c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ce:	d11f      	bne.n	8008610 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	440a      	add	r2, r1
 8008606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800860e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	2101      	movs	r1, #1
 8008622:	fa01 f303 	lsl.w	r3, r1, r3
 8008626:	b29b      	uxth	r3, r3
 8008628:	43db      	mvns	r3, r3
 800862a:	68f9      	ldr	r1, [r7, #12]
 800862c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008630:	4013      	ands	r3, r2
 8008632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863a:	69da      	ldr	r2, [r3, #28]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	2101      	movs	r1, #1
 8008646:	fa01 f303 	lsl.w	r3, r1, r3
 800864a:	b29b      	uxth	r3, r3
 800864c:	43db      	mvns	r3, r3
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008654:	4013      	ands	r3, r2
 8008656:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	0159      	lsls	r1, r3, #5
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	440b      	add	r3, r1
 800866e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008672:	4619      	mov	r1, r3
 8008674:	4b35      	ldr	r3, [pc, #212]	; (800874c <USB_DeactivateEndpoint+0x1b0>)
 8008676:	4013      	ands	r3, r2
 8008678:	600b      	str	r3, [r1, #0]
 800867a:	e060      	b.n	800873e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800868e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008692:	d11f      	bne.n	80086d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	0151      	lsls	r1, r2, #5
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	440a      	add	r2, r1
 80086ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	2101      	movs	r1, #1
 80086e6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	43db      	mvns	r3, r3
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086f4:	4013      	ands	r3, r2
 80086f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fe:	69da      	ldr	r2, [r3, #28]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f003 030f 	and.w	r3, r3, #15
 8008708:	2101      	movs	r1, #1
 800870a:	fa01 f303 	lsl.w	r3, r1, r3
 800870e:	041b      	lsls	r3, r3, #16
 8008710:	43db      	mvns	r3, r3
 8008712:	68f9      	ldr	r1, [r7, #12]
 8008714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008718:	4013      	ands	r3, r2
 800871a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	0159      	lsls	r1, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	440b      	add	r3, r1
 8008732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008736:	4619      	mov	r1, r3
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <USB_DeactivateEndpoint+0x1b4>)
 800873a:	4013      	ands	r3, r2
 800873c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	ec337800 	.word	0xec337800
 8008750:	eff37800 	.word	0xeff37800

08008754 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08a      	sub	sp, #40	; 0x28
 8008758:	af02      	add	r7, sp, #8
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	785b      	ldrb	r3, [r3, #1]
 8008770:	2b01      	cmp	r3, #1
 8008772:	f040 815c 	bne.w	8008a2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d132      	bne.n	80087e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	440a      	add	r2, r1
 8008794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008798:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800879c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	0151      	lsls	r1, r2, #5
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	440a      	add	r2, r1
 80087d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087dc:	0cdb      	lsrs	r3, r3, #19
 80087de:	04db      	lsls	r3, r3, #19
 80087e0:	6113      	str	r3, [r2, #16]
 80087e2:	e074      	b.n	80088ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fe:	0cdb      	lsrs	r3, r3, #19
 8008800:	04db      	lsls	r3, r3, #19
 8008802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008822:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6999      	ldr	r1, [r3, #24]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	440b      	add	r3, r1
 8008840:	1e59      	subs	r1, r3, #1
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	fbb1 f3f3 	udiv	r3, r1, r3
 800884a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800884c:	4b9d      	ldr	r3, [pc, #628]	; (8008ac4 <USB_EPStartXfer+0x370>)
 800884e:	400b      	ands	r3, r1
 8008850:	69b9      	ldr	r1, [r7, #24]
 8008852:	0148      	lsls	r0, r1, #5
 8008854:	69f9      	ldr	r1, [r7, #28]
 8008856:	4401      	add	r1, r0
 8008858:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800885c:	4313      	orrs	r3, r2
 800885e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008876:	69b9      	ldr	r1, [r7, #24]
 8008878:	0148      	lsls	r0, r1, #5
 800887a:	69f9      	ldr	r1, [r7, #28]
 800887c:	4401      	add	r1, r0
 800887e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008882:	4313      	orrs	r3, r2
 8008884:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	791b      	ldrb	r3, [r3, #4]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d11f      	bne.n	80088ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	0151      	lsls	r1, r2, #5
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	440a      	add	r2, r1
 80088a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d14b      	bne.n	800896c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d009      	beq.n	80088f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e8:	461a      	mov	r2, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	791b      	ldrb	r3, [r3, #4]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d128      	bne.n	800894a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008904:	2b00      	cmp	r3, #0
 8008906:	d110      	bne.n	800892a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	0151      	lsls	r1, r2, #5
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	440a      	add	r2, r1
 800891e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	e00f      	b.n	800894a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	440a      	add	r2, r1
 8008940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008948:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e133      	b.n	8008bd4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800898a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	791b      	ldrb	r3, [r3, #4]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d015      	beq.n	80089c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 811b 	beq.w	8008bd4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	f003 030f 	and.w	r3, r3, #15
 80089ae:	2101      	movs	r1, #1
 80089b0:	fa01 f303 	lsl.w	r3, r1, r3
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089ba:	4313      	orrs	r3, r2
 80089bc:	634b      	str	r3, [r1, #52]	; 0x34
 80089be:	e109      	b.n	8008bd4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d110      	bne.n	80089f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	e00f      	b.n	8008a12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6919      	ldr	r1, [r3, #16]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	781a      	ldrb	r2, [r3, #0]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	b298      	uxth	r0, r3
 8008a20:	79fb      	ldrb	r3, [r7, #7]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	4603      	mov	r3, r0
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fade 	bl	8008fe8 <USB_WritePacket>
 8008a2c:	e0d2      	b.n	8008bd4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a48:	0cdb      	lsrs	r3, r3, #19
 8008a4a:	04db      	lsls	r3, r3, #19
 8008a4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d126      	bne.n	8008ac8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a90:	69b9      	ldr	r1, [r7, #24]
 8008a92:	0148      	lsls	r0, r1, #5
 8008a94:	69f9      	ldr	r1, [r7, #28]
 8008a96:	4401      	add	r1, r0
 8008a98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008abe:	6113      	str	r3, [r2, #16]
 8008ac0:	e03a      	b.n	8008b38 <USB_EPStartXfer+0x3e4>
 8008ac2:	bf00      	nop
 8008ac4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	699a      	ldr	r2, [r3, #24]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	1e5a      	subs	r2, r3, #1
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008adc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	8afa      	ldrh	r2, [r7, #22]
 8008ae4:	fb03 f202 	mul.w	r2, r3, r2
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	8afb      	ldrh	r3, [r7, #22]
 8008afc:	04d9      	lsls	r1, r3, #19
 8008afe:	4b38      	ldr	r3, [pc, #224]	; (8008be0 <USB_EPStartXfer+0x48c>)
 8008b00:	400b      	ands	r3, r1
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	0148      	lsls	r0, r1, #5
 8008b06:	69f9      	ldr	r1, [r7, #28]
 8008b08:	4401      	add	r1, r0
 8008b0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	691a      	ldr	r2, [r3, #16]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b28:	69b9      	ldr	r1, [r7, #24]
 8008b2a:	0148      	lsls	r0, r1, #5
 8008b2c:	69f9      	ldr	r1, [r7, #28]
 8008b2e:	4401      	add	r1, r0
 8008b30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b34:	4313      	orrs	r3, r2
 8008b36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d10d      	bne.n	8008b5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d009      	beq.n	8008b5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	6919      	ldr	r1, [r3, #16]
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b56:	460a      	mov	r2, r1
 8008b58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	791b      	ldrb	r3, [r3, #4]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d128      	bne.n	8008bb4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d110      	bne.n	8008b94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	e00f      	b.n	8008bb4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3720      	adds	r7, #32
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	1ff80000 	.word	0x1ff80000

08008be4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	f040 80ce 	bne.w	8008da2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d132      	bne.n	8008c74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	0151      	lsls	r1, r2, #5
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	440a      	add	r2, r1
 8008c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	0151      	lsls	r1, r2, #5
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	440a      	add	r2, r1
 8008c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	0151      	lsls	r1, r2, #5
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	440a      	add	r2, r1
 8008c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6c:	0cdb      	lsrs	r3, r3, #19
 8008c6e:	04db      	lsls	r3, r3, #19
 8008c70:	6113      	str	r3, [r2, #16]
 8008c72:	e04e      	b.n	8008d12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	0151      	lsls	r1, r2, #5
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	440a      	add	r2, r1
 8008c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8e:	0cdb      	lsrs	r3, r3, #19
 8008c90:	04db      	lsls	r3, r3, #19
 8008c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	0151      	lsls	r1, r2, #5
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	440a      	add	r2, r1
 8008caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	699a      	ldr	r2, [r3, #24]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d903      	bls.n	8008ccc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf8:	691a      	ldr	r2, [r3, #16]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d02:	6939      	ldr	r1, [r7, #16]
 8008d04:	0148      	lsls	r0, r1, #5
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	4401      	add	r1, r0
 8008d0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d11e      	bne.n	8008d56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	0151      	lsls	r1, r2, #5
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	440a      	add	r2, r1
 8008d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e097      	b.n	8008e86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	0151      	lsls	r1, r2, #5
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	440a      	add	r2, r1
 8008d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 8083 	beq.w	8008e86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	f003 030f 	and.w	r3, r3, #15
 8008d90:	2101      	movs	r1, #1
 8008d92:	fa01 f303 	lsl.w	r3, r1, r3
 8008d96:	6979      	ldr	r1, [r7, #20]
 8008d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	634b      	str	r3, [r1, #52]	; 0x34
 8008da0:	e071      	b.n	8008e86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dbc:	0cdb      	lsrs	r3, r3, #19
 8008dbe:	04db      	lsls	r3, r3, #19
 8008dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008de4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	0151      	lsls	r1, r2, #5
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	440a      	add	r2, r1
 8008e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2a:	691a      	ldr	r2, [r3, #16]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e34:	6939      	ldr	r1, [r7, #16]
 8008e36:	0148      	lsls	r0, r1, #5
 8008e38:	6979      	ldr	r1, [r7, #20]
 8008e3a:	4401      	add	r1, r0
 8008e3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e40:	4313      	orrs	r3, r2
 8008e42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d10d      	bne.n	8008e66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6919      	ldr	r1, [r3, #16]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e62:	460a      	mov	r2, r1
 8008e64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d14a      	bne.n	8008f48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eca:	f040 8086 	bne.w	8008fda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	7812      	ldrb	r2, [r2, #0]
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ef0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	7812      	ldrb	r2, [r2, #0]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d902      	bls.n	8008f2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	75fb      	strb	r3, [r7, #23]
          break;
 8008f2a:	e056      	b.n	8008fda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f44:	d0e7      	beq.n	8008f16 <USB_EPStopXfer+0x82>
 8008f46:	e048      	b.n	8008fda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f60:	d13b      	bne.n	8008fda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	7812      	ldrb	r2, [r2, #0]
 8008f76:	0151      	lsls	r1, r2, #5
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	440a      	add	r2, r1
 8008f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	7812      	ldrb	r2, [r2, #0]
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d902      	bls.n	8008fc0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8008fbe:	e00c      	b.n	8008fda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fd8:	d0e7      	beq.n	8008faa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	371c      	adds	r7, #28
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b089      	sub	sp, #36	; 0x24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	71fb      	strb	r3, [r7, #7]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009006:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800900a:	2b00      	cmp	r3, #0
 800900c:	d123      	bne.n	8009056 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800900e:	88bb      	ldrh	r3, [r7, #4]
 8009010:	3303      	adds	r3, #3
 8009012:	089b      	lsrs	r3, r3, #2
 8009014:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009016:	2300      	movs	r3, #0
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	e018      	b.n	800904e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	031a      	lsls	r2, r3, #12
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	4413      	add	r3, r2
 8009024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009028:	461a      	mov	r2, r3
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	3301      	adds	r3, #1
 8009034:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	3301      	adds	r3, #1
 800903a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	3301      	adds	r3, #1
 8009040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	3301      	adds	r3, #1
 8009046:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	3301      	adds	r3, #1
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	429a      	cmp	r2, r3
 8009054:	d3e2      	bcc.n	800901c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3724      	adds	r7, #36	; 0x24
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009064:	b480      	push	{r7}
 8009066:	b08b      	sub	sp, #44	; 0x2c
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800907a:	88fb      	ldrh	r3, [r7, #6]
 800907c:	089b      	lsrs	r3, r3, #2
 800907e:	b29b      	uxth	r3, r3
 8009080:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800908a:	2300      	movs	r3, #0
 800908c:	623b      	str	r3, [r7, #32]
 800908e:	e014      	b.n	80090ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	601a      	str	r2, [r3, #0]
    pDest++;
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	3301      	adds	r3, #1
 80090a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	3301      	adds	r3, #1
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	3301      	adds	r3, #1
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	3301      	adds	r3, #1
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	3301      	adds	r3, #1
 80090b8:	623b      	str	r3, [r7, #32]
 80090ba:	6a3a      	ldr	r2, [r7, #32]
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d3e6      	bcc.n	8009090 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090c2:	8bfb      	ldrh	r3, [r7, #30]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01e      	beq.n	8009106 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d2:	461a      	mov	r2, r3
 80090d4:	f107 0310 	add.w	r3, r7, #16
 80090d8:	6812      	ldr	r2, [r2, #0]
 80090da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	fa22 f303 	lsr.w	r3, r2, r3
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	701a      	strb	r2, [r3, #0]
      i++;
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	3301      	adds	r3, #1
 80090f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	3301      	adds	r3, #1
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80090fa:	8bfb      	ldrh	r3, [r7, #30]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009100:	8bfb      	ldrh	r3, [r7, #30]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1ea      	bne.n	80090dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009108:	4618      	mov	r0, r3
 800910a:	372c      	adds	r7, #44	; 0x2c
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	785b      	ldrb	r3, [r3, #1]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d12c      	bne.n	800918a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	db12      	blt.n	8009168 <USB_EPSetStall+0x54>
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00f      	beq.n	8009168 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	0151      	lsls	r1, r2, #5
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	440a      	add	r2, r1
 800915e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009166:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	440a      	add	r2, r1
 800917e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009182:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	e02b      	b.n	80091e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	db12      	blt.n	80091c2 <USB_EPSetStall+0xae>
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00f      	beq.n	80091c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	0151      	lsls	r1, r2, #5
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	440a      	add	r2, r1
 80091b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	0151      	lsls	r1, r2, #5
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	440a      	add	r2, r1
 80091d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	785b      	ldrb	r3, [r3, #1]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d128      	bne.n	800925e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800922a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	791b      	ldrb	r3, [r3, #4]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d003      	beq.n	800923c <USB_EPClearStall+0x4c>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	791b      	ldrb	r3, [r3, #4]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d138      	bne.n	80092ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	0151      	lsls	r1, r2, #5
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	440a      	add	r2, r1
 8009252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	e027      	b.n	80092ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	0151      	lsls	r1, r2, #5
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	440a      	add	r2, r1
 8009274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800927c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	791b      	ldrb	r3, [r3, #4]
 8009282:	2b03      	cmp	r3, #3
 8009284:	d003      	beq.n	800928e <USB_EPClearStall+0x9e>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	791b      	ldrb	r3, [r3, #4]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d10f      	bne.n	80092ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	0151      	lsls	r1, r2, #5
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	440a      	add	r2, r1
 80092a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80092de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	78fb      	ldrb	r3, [r7, #3]
 80092ea:	011b      	lsls	r3, r3, #4
 80092ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80092f0:	68f9      	ldr	r1, [r7, #12]
 80092f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092f6:	4313      	orrs	r3, r2
 80092f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009322:	f023 0303 	bic.w	r3, r3, #3
 8009326:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009336:	f023 0302 	bic.w	r3, r3, #2
 800933a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009364:	f023 0303 	bic.w	r3, r3, #3
 8009368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009378:	f043 0302 	orr.w	r3, r3, #2
 800937c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	4013      	ands	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093a4:	68fb      	ldr	r3, [r7, #12]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ce:	69db      	ldr	r3, [r3, #28]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	4013      	ands	r3, r2
 80093d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	0c1b      	lsrs	r3, r3, #16
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b085      	sub	sp, #20
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	4013      	ands	r3, r2
 8009408:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	b29b      	uxth	r3, r3
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800941a:	b480      	push	{r7}
 800941c:	b085      	sub	sp, #20
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	4013      	ands	r3, r2
 8009446:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009448:	68bb      	ldr	r3, [r7, #8]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009456:	b480      	push	{r7}
 8009458:	b087      	sub	sp, #28
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	fa22 f303 	lsr.w	r3, r2, r3
 8009486:	01db      	lsls	r3, r3, #7
 8009488:	b2db      	uxtb	r3, r3
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4013      	ands	r3, r2
 80094a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094a4:	68bb      	ldr	r3, [r7, #8]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	f003 0301 	and.w	r3, r3, #1
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b085      	sub	sp, #20
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80094ec:	f023 0307 	bic.w	r3, r3, #7
 80094f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	460b      	mov	r3, r1
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	333c      	adds	r3, #60	; 0x3c
 800952a:	3304      	adds	r3, #4
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	4a26      	ldr	r2, [pc, #152]	; (80095cc <USB_EP0_OutStart+0xb8>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d90a      	bls.n	800954e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009548:	d101      	bne.n	800954e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	e037      	b.n	80095be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009554:	461a      	mov	r2, r3
 8009556:	2300      	movs	r3, #0
 8009558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800956c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800957c:	f043 0318 	orr.w	r3, r3, #24
 8009580:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009590:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009594:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009596:	7afb      	ldrb	r3, [r7, #11]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d10f      	bne.n	80095bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a2:	461a      	mov	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	4f54300a 	.word	0x4f54300a

080095d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3301      	adds	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	4a13      	ldr	r2, [pc, #76]	; (8009634 <USB_CoreReset+0x64>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d901      	bls.n	80095ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e01b      	b.n	8009626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	daf2      	bge.n	80095dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	f043 0201 	orr.w	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	3301      	adds	r3, #1
 800960a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4a09      	ldr	r2, [pc, #36]	; (8009634 <USB_CoreReset+0x64>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d901      	bls.n	8009618 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e006      	b.n	8009626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b01      	cmp	r3, #1
 8009622:	d0f0      	beq.n	8009606 <USB_CoreReset+0x36>

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	00030d40 	.word	0x00030d40

08009638 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009644:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009648:	f005 f936 	bl	800e8b8 <USBD_static_malloc>
 800964c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d109      	bne.n	8009668 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	32b0      	adds	r2, #176	; 0xb0
 800965e:	2100      	movs	r1, #0
 8009660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009664:	2302      	movs	r3, #2
 8009666:	e0d4      	b.n	8009812 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009668:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800966c:	2100      	movs	r1, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f005 ff9b 	bl	800f5aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	32b0      	adds	r2, #176	; 0xb0
 800967e:	68f9      	ldr	r1, [r7, #12]
 8009680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	32b0      	adds	r2, #176	; 0xb0
 800968e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7c1b      	ldrb	r3, [r3, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d138      	bne.n	8009712 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096a0:	4b5e      	ldr	r3, [pc, #376]	; (800981c <USBD_CDC_Init+0x1e4>)
 80096a2:	7819      	ldrb	r1, [r3, #0]
 80096a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096a8:	2202      	movs	r2, #2
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f004 ffe1 	bl	800e672 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096b0:	4b5a      	ldr	r3, [pc, #360]	; (800981c <USBD_CDC_Init+0x1e4>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f003 020f 	and.w	r2, r3, #15
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	3324      	adds	r3, #36	; 0x24
 80096c6:	2201      	movs	r2, #1
 80096c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096ca:	4b55      	ldr	r3, [pc, #340]	; (8009820 <USBD_CDC_Init+0x1e8>)
 80096cc:	7819      	ldrb	r1, [r3, #0]
 80096ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096d2:	2202      	movs	r2, #2
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f004 ffcc 	bl	800e672 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096da:	4b51      	ldr	r3, [pc, #324]	; (8009820 <USBD_CDC_Init+0x1e8>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	f003 020f 	and.w	r2, r3, #15
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096f2:	2201      	movs	r2, #1
 80096f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80096f6:	4b4b      	ldr	r3, [pc, #300]	; (8009824 <USBD_CDC_Init+0x1ec>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	f003 020f 	and.w	r2, r3, #15
 80096fe:	6879      	ldr	r1, [r7, #4]
 8009700:	4613      	mov	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	3326      	adds	r3, #38	; 0x26
 800970c:	2210      	movs	r2, #16
 800970e:	801a      	strh	r2, [r3, #0]
 8009710:	e035      	b.n	800977e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009712:	4b42      	ldr	r3, [pc, #264]	; (800981c <USBD_CDC_Init+0x1e4>)
 8009714:	7819      	ldrb	r1, [r3, #0]
 8009716:	2340      	movs	r3, #64	; 0x40
 8009718:	2202      	movs	r2, #2
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f004 ffa9 	bl	800e672 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009720:	4b3e      	ldr	r3, [pc, #248]	; (800981c <USBD_CDC_Init+0x1e4>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	f003 020f 	and.w	r2, r3, #15
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	4613      	mov	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	440b      	add	r3, r1
 8009734:	3324      	adds	r3, #36	; 0x24
 8009736:	2201      	movs	r2, #1
 8009738:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800973a:	4b39      	ldr	r3, [pc, #228]	; (8009820 <USBD_CDC_Init+0x1e8>)
 800973c:	7819      	ldrb	r1, [r3, #0]
 800973e:	2340      	movs	r3, #64	; 0x40
 8009740:	2202      	movs	r2, #2
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f004 ff95 	bl	800e672 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009748:	4b35      	ldr	r3, [pc, #212]	; (8009820 <USBD_CDC_Init+0x1e8>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 020f 	and.w	r2, r3, #15
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	4613      	mov	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	440b      	add	r3, r1
 800975c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009760:	2201      	movs	r2, #1
 8009762:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009764:	4b2f      	ldr	r3, [pc, #188]	; (8009824 <USBD_CDC_Init+0x1ec>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	4613      	mov	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	440b      	add	r3, r1
 8009778:	3326      	adds	r3, #38	; 0x26
 800977a:	2210      	movs	r2, #16
 800977c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800977e:	4b29      	ldr	r3, [pc, #164]	; (8009824 <USBD_CDC_Init+0x1ec>)
 8009780:	7819      	ldrb	r1, [r3, #0]
 8009782:	2308      	movs	r3, #8
 8009784:	2203      	movs	r2, #3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f004 ff73 	bl	800e672 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800978c:	4b25      	ldr	r3, [pc, #148]	; (8009824 <USBD_CDC_Init+0x1ec>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	f003 020f 	and.w	r2, r3, #15
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	440b      	add	r3, r1
 80097a0:	3324      	adds	r3, #36	; 0x24
 80097a2:	2201      	movs	r2, #1
 80097a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	33b0      	adds	r3, #176	; 0xb0
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80097dc:	2302      	movs	r3, #2
 80097de:	e018      	b.n	8009812 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7c1b      	ldrb	r3, [r3, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097e8:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <USBD_CDC_Init+0x1e8>)
 80097ea:	7819      	ldrb	r1, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f005 f82a 	bl	800e850 <USBD_LL_PrepareReceive>
 80097fc:	e008      	b.n	8009810 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097fe:	4b08      	ldr	r3, [pc, #32]	; (8009820 <USBD_CDC_Init+0x1e8>)
 8009800:	7819      	ldrb	r1, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f005 f820 	bl	800e850 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	200000a3 	.word	0x200000a3
 8009820:	200000a4 	.word	0x200000a4
 8009824:	200000a5 	.word	0x200000a5

08009828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009834:	4b3a      	ldr	r3, [pc, #232]	; (8009920 <USBD_CDC_DeInit+0xf8>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f004 ff3f 	bl	800e6be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009840:	4b37      	ldr	r3, [pc, #220]	; (8009920 <USBD_CDC_DeInit+0xf8>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	f003 020f 	and.w	r2, r3, #15
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	440b      	add	r3, r1
 8009854:	3324      	adds	r3, #36	; 0x24
 8009856:	2200      	movs	r2, #0
 8009858:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800985a:	4b32      	ldr	r3, [pc, #200]	; (8009924 <USBD_CDC_DeInit+0xfc>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f004 ff2c 	bl	800e6be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009866:	4b2f      	ldr	r3, [pc, #188]	; (8009924 <USBD_CDC_DeInit+0xfc>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	f003 020f 	and.w	r2, r3, #15
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800987e:	2200      	movs	r2, #0
 8009880:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009882:	4b29      	ldr	r3, [pc, #164]	; (8009928 <USBD_CDC_DeInit+0x100>)
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f004 ff18 	bl	800e6be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800988e:	4b26      	ldr	r3, [pc, #152]	; (8009928 <USBD_CDC_DeInit+0x100>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	f003 020f 	and.w	r2, r3, #15
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	3324      	adds	r3, #36	; 0x24
 80098a4:	2200      	movs	r2, #0
 80098a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80098a8:	4b1f      	ldr	r3, [pc, #124]	; (8009928 <USBD_CDC_DeInit+0x100>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	f003 020f 	and.w	r2, r3, #15
 80098b0:	6879      	ldr	r1, [r7, #4]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	440b      	add	r3, r1
 80098bc:	3326      	adds	r3, #38	; 0x26
 80098be:	2200      	movs	r2, #0
 80098c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	32b0      	adds	r2, #176	; 0xb0
 80098cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d01f      	beq.n	8009914 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	33b0      	adds	r3, #176	; 0xb0
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	32b0      	adds	r2, #176	; 0xb0
 80098f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f004 ffec 	bl	800e8d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	32b0      	adds	r2, #176	; 0xb0
 8009906:	2100      	movs	r1, #0
 8009908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200000a3 	.word	0x200000a3
 8009924:	200000a4 	.word	0x200000a4
 8009928:	200000a5 	.word	0x200000a5

0800992c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	32b0      	adds	r2, #176	; 0xb0
 8009940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009958:	2303      	movs	r3, #3
 800995a:	e0bf      	b.n	8009adc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009964:	2b00      	cmp	r3, #0
 8009966:	d050      	beq.n	8009a0a <USBD_CDC_Setup+0xde>
 8009968:	2b20      	cmp	r3, #32
 800996a:	f040 80af 	bne.w	8009acc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	88db      	ldrh	r3, [r3, #6]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d03a      	beq.n	80099ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	b25b      	sxtb	r3, r3
 800997c:	2b00      	cmp	r3, #0
 800997e:	da1b      	bge.n	80099b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	33b0      	adds	r3, #176	; 0xb0
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009996:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	88d2      	ldrh	r2, [r2, #6]
 800999c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	88db      	ldrh	r3, [r3, #6]
 80099a2:	2b07      	cmp	r3, #7
 80099a4:	bf28      	it	cs
 80099a6:	2307      	movcs	r3, #7
 80099a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	89fa      	ldrh	r2, [r7, #14]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 fd89 	bl	800b4c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80099b6:	e090      	b.n	8009ada <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	785a      	ldrb	r2, [r3, #1]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	88db      	ldrh	r3, [r3, #6]
 80099c6:	2b3f      	cmp	r3, #63	; 0x3f
 80099c8:	d803      	bhi.n	80099d2 <USBD_CDC_Setup+0xa6>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88db      	ldrh	r3, [r3, #6]
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	e000      	b.n	80099d4 <USBD_CDC_Setup+0xa8>
 80099d2:	2240      	movs	r2, #64	; 0x40
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80099da:	6939      	ldr	r1, [r7, #16]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80099e2:	461a      	mov	r2, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fd9b 	bl	800b520 <USBD_CtlPrepareRx>
      break;
 80099ea:	e076      	b.n	8009ada <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	33b0      	adds	r3, #176	; 0xb0
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	7850      	ldrb	r0, [r2, #1]
 8009a02:	2200      	movs	r2, #0
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	4798      	blx	r3
      break;
 8009a08:	e067      	b.n	8009ada <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b0b      	cmp	r3, #11
 8009a10:	d851      	bhi.n	8009ab6 <USBD_CDC_Setup+0x18a>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <USBD_CDC_Setup+0xec>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a49 	.word	0x08009a49
 8009a1c:	08009ac5 	.word	0x08009ac5
 8009a20:	08009ab7 	.word	0x08009ab7
 8009a24:	08009ab7 	.word	0x08009ab7
 8009a28:	08009ab7 	.word	0x08009ab7
 8009a2c:	08009ab7 	.word	0x08009ab7
 8009a30:	08009ab7 	.word	0x08009ab7
 8009a34:	08009ab7 	.word	0x08009ab7
 8009a38:	08009ab7 	.word	0x08009ab7
 8009a3c:	08009ab7 	.word	0x08009ab7
 8009a40:	08009a73 	.word	0x08009a73
 8009a44:	08009a9d 	.word	0x08009a9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d107      	bne.n	8009a64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a54:	f107 030a 	add.w	r3, r7, #10
 8009a58:	2202      	movs	r2, #2
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 fd33 	bl	800b4c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a62:	e032      	b.n	8009aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fcbd 	bl	800b3e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	75fb      	strb	r3, [r7, #23]
          break;
 8009a70:	e02b      	b.n	8009aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d107      	bne.n	8009a8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a7e:	f107 030d 	add.w	r3, r7, #13
 8009a82:	2201      	movs	r2, #1
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 fd1e 	bl	800b4c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a8c:	e01d      	b.n	8009aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 fca8 	bl	800b3e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a96:	2303      	movs	r3, #3
 8009a98:	75fb      	strb	r3, [r7, #23]
          break;
 8009a9a:	e016      	b.n	8009aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d00f      	beq.n	8009ac8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 fc9b 	bl	800b3e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ab4:	e008      	b.n	8009ac8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f001 fc94 	bl	800b3e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ac2:	e002      	b.n	8009aca <USBD_CDC_Setup+0x19e>
          break;
 8009ac4:	bf00      	nop
 8009ac6:	e008      	b.n	8009ada <USBD_CDC_Setup+0x1ae>
          break;
 8009ac8:	bf00      	nop
      }
      break;
 8009aca:	e006      	b.n	8009ada <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f001 fc89 	bl	800b3e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3718      	adds	r7, #24
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009af6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	32b0      	adds	r2, #176	; 0xb0
 8009b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e065      	b.n	8009bda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	32b0      	adds	r2, #176	; 0xb0
 8009b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	f003 020f 	and.w	r2, r3, #15
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	3318      	adds	r3, #24
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d02f      	beq.n	8009b98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	f003 020f 	and.w	r2, r3, #15
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	440b      	add	r3, r1
 8009b4a:	3318      	adds	r3, #24
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	f003 010f 	and.w	r1, r3, #15
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	460b      	mov	r3, r1
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	440b      	add	r3, r1
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4403      	add	r3, r0
 8009b60:	3348      	adds	r3, #72	; 0x48
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b68:	fb01 f303 	mul.w	r3, r1, r3
 8009b6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d112      	bne.n	8009b98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	f003 020f 	and.w	r2, r3, #15
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	3318      	adds	r3, #24
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b8a:	78f9      	ldrb	r1, [r7, #3]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	2200      	movs	r2, #0
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f004 fe3c 	bl	800e80e <USBD_LL_Transmit>
 8009b96:	e01f      	b.n	8009bd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	33b0      	adds	r3, #176	; 0xb0
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d010      	beq.n	8009bd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	33b0      	adds	r3, #176	; 0xb0
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009bd4:	78fa      	ldrb	r2, [r7, #3]
 8009bd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	460b      	mov	r3, r1
 8009bec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	32b0      	adds	r2, #176	; 0xb0
 8009bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	32b0      	adds	r2, #176	; 0xb0
 8009c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e01a      	b.n	8009c4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c14:	78fb      	ldrb	r3, [r7, #3]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f004 fe3a 	bl	800e892 <USBD_LL_GetRxDataSize>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	33b0      	adds	r3, #176	; 0xb0
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c44:	4611      	mov	r1, r2
 8009c46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	32b0      	adds	r2, #176	; 0xb0
 8009c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e025      	b.n	8009cc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	33b0      	adds	r3, #176	; 0xb0
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01a      	beq.n	8009cbe <USBD_CDC_EP0_RxReady+0x6c>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009c8e:	2bff      	cmp	r3, #255	; 0xff
 8009c90:	d015      	beq.n	8009cbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	33b0      	adds	r3, #176	; 0xb0
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009caa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cb2:	b292      	uxth	r2, r2
 8009cb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	22ff      	movs	r2, #255	; 0xff
 8009cba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cd0:	2182      	movs	r1, #130	; 0x82
 8009cd2:	4818      	ldr	r0, [pc, #96]	; (8009d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cd4:	f000 fd4f 	bl	800a776 <USBD_GetEpDesc>
 8009cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cda:	2101      	movs	r1, #1
 8009cdc:	4815      	ldr	r0, [pc, #84]	; (8009d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cde:	f000 fd4a 	bl	800a776 <USBD_GetEpDesc>
 8009ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ce4:	2181      	movs	r1, #129	; 0x81
 8009ce6:	4813      	ldr	r0, [pc, #76]	; (8009d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ce8:	f000 fd45 	bl	800a776 <USBD_GetEpDesc>
 8009cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	2210      	movs	r2, #16
 8009cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d006      	beq.n	8009d0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d08:	711a      	strb	r2, [r3, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d006      	beq.n	8009d22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d1c:	711a      	strb	r2, [r3, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2243      	movs	r2, #67	; 0x43
 8009d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000060 	.word	0x20000060

08009d38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d40:	2182      	movs	r1, #130	; 0x82
 8009d42:	4818      	ldr	r0, [pc, #96]	; (8009da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d44:	f000 fd17 	bl	800a776 <USBD_GetEpDesc>
 8009d48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	4815      	ldr	r0, [pc, #84]	; (8009da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d4e:	f000 fd12 	bl	800a776 <USBD_GetEpDesc>
 8009d52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d54:	2181      	movs	r1, #129	; 0x81
 8009d56:	4813      	ldr	r0, [pc, #76]	; (8009da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d58:	f000 fd0d 	bl	800a776 <USBD_GetEpDesc>
 8009d5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	2210      	movs	r2, #16
 8009d68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d006      	beq.n	8009d7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2200      	movs	r2, #0
 8009d74:	711a      	strb	r2, [r3, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f042 0202 	orr.w	r2, r2, #2
 8009d7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	711a      	strb	r2, [r3, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f042 0202 	orr.w	r2, r2, #2
 8009d90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2243      	movs	r2, #67	; 0x43
 8009d96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000060 	.word	0x20000060

08009da8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009db0:	2182      	movs	r1, #130	; 0x82
 8009db2:	4818      	ldr	r0, [pc, #96]	; (8009e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009db4:	f000 fcdf 	bl	800a776 <USBD_GetEpDesc>
 8009db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009dba:	2101      	movs	r1, #1
 8009dbc:	4815      	ldr	r0, [pc, #84]	; (8009e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009dbe:	f000 fcda 	bl	800a776 <USBD_GetEpDesc>
 8009dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009dc4:	2181      	movs	r1, #129	; 0x81
 8009dc6:	4813      	ldr	r0, [pc, #76]	; (8009e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009dc8:	f000 fcd5 	bl	800a776 <USBD_GetEpDesc>
 8009dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2210      	movs	r2, #16
 8009dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d006      	beq.n	8009dee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009de8:	711a      	strb	r2, [r3, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d006      	beq.n	8009e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dfc:	711a      	strb	r2, [r3, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2243      	movs	r2, #67	; 0x43
 8009e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000060 	.word	0x20000060

08009e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	220a      	movs	r2, #10
 8009e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e26:	4b03      	ldr	r3, [pc, #12]	; (8009e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	2000001c 	.word	0x2000001c

08009e38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e009      	b.n	8009e60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	33b0      	adds	r3, #176	; 0xb0
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	32b0      	adds	r2, #176	; 0xb0
 8009e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e86:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e008      	b.n	8009ea4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	32b0      	adds	r2, #176	; 0xb0
 8009ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e004      	b.n	8009ede <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
	...

08009eec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	32b0      	adds	r2, #176	; 0xb0
 8009efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f04:	2301      	movs	r3, #1
 8009f06:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	32b0      	adds	r2, #176	; 0xb0
 8009f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e025      	b.n	8009f6a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d11f      	bne.n	8009f68 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009f30:	4b10      	ldr	r3, [pc, #64]	; (8009f74 <USBD_CDC_TransmitPacket+0x88>)
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	f003 020f 	and.w	r2, r3, #15
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4613      	mov	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4403      	add	r3, r0
 8009f4a:	3318      	adds	r3, #24
 8009f4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009f4e:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <USBD_CDC_TransmitPacket+0x88>)
 8009f50:	7819      	ldrb	r1, [r3, #0]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f004 fc55 	bl	800e80e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	200000a3 	.word	0x200000a3

08009f78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	32b0      	adds	r2, #176	; 0xb0
 8009f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	32b0      	adds	r2, #176	; 0xb0
 8009f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e018      	b.n	8009fd8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	7c1b      	ldrb	r3, [r3, #16]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <USBD_CDC_ReceivePacket+0x68>)
 8009fb0:	7819      	ldrb	r1, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f004 fc47 	bl	800e850 <USBD_LL_PrepareReceive>
 8009fc2:	e008      	b.n	8009fd6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <USBD_CDC_ReceivePacket+0x68>)
 8009fc6:	7819      	ldrb	r1, [r3, #0]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fce:	2340      	movs	r3, #64	; 0x40
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f004 fc3d 	bl	800e850 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	200000a4 	.word	0x200000a4

08009fe4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e01f      	b.n	800a03c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	79fa      	ldrb	r2, [r7, #7]
 800a02e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f004 fab7 	bl	800e5a4 <USBD_LL_Init>
 800a036:	4603      	mov	r3, r0
 800a038:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a058:	2303      	movs	r3, #3
 800a05a:	e025      	b.n	800a0a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	32ae      	adds	r2, #174	; 0xae
 800a06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00f      	beq.n	800a098 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	32ae      	adds	r2, #174	; 0xae
 800a082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	f107 020e 	add.w	r2, r7, #14
 800a08c:	4610      	mov	r0, r2
 800a08e:	4798      	blx	r3
 800a090:	4602      	mov	r2, r0
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f004 fabf 	bl	800e63c <USBD_LL_Start>
 800a0be:	4603      	mov	r3, r0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d009      	beq.n	800a10c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	4611      	mov	r1, r2
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	4798      	blx	r3
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	78fa      	ldrb	r2, [r7, #3]
 800a130:	4611      	mov	r1, r2
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	4798      	blx	r3
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a13c:	2303      	movs	r3, #3
 800a13e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f001 f908 	bl	800b372 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a170:	461a      	mov	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a17e:	f003 031f 	and.w	r3, r3, #31
 800a182:	2b02      	cmp	r3, #2
 800a184:	d01a      	beq.n	800a1bc <USBD_LL_SetupStage+0x72>
 800a186:	2b02      	cmp	r3, #2
 800a188:	d822      	bhi.n	800a1d0 <USBD_LL_SetupStage+0x86>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <USBD_LL_SetupStage+0x4a>
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d00a      	beq.n	800a1a8 <USBD_LL_SetupStage+0x5e>
 800a192:	e01d      	b.n	800a1d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fb5f 	bl	800a860 <USBD_StdDevReq>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1a6:	e020      	b.n	800a1ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fbc7 	bl	800a944 <USBD_StdItfReq>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ba:	e016      	b.n	800a1ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fc29 	bl	800aa1c <USBD_StdEPReq>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ce:	e00c      	b.n	800a1ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f004 fa8c 	bl	800e6fc <USBD_LL_StallEP>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1e8:	bf00      	nop
  }

  return ret;
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a206:	7afb      	ldrb	r3, [r7, #11]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d16e      	bne.n	800a2ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a212:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	f040 8098 	bne.w	800a350 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	689a      	ldr	r2, [r3, #8]
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d913      	bls.n	800a254 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	1ad2      	subs	r2, r2, r3
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	4293      	cmp	r3, r2
 800a244:	bf28      	it	cs
 800a246:	4613      	movcs	r3, r2
 800a248:	461a      	mov	r2, r3
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f001 f984 	bl	800b55a <USBD_CtlContinueRx>
 800a252:	e07d      	b.n	800a350 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a25a:	f003 031f 	and.w	r3, r3, #31
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d014      	beq.n	800a28c <USBD_LL_DataOutStage+0x98>
 800a262:	2b02      	cmp	r3, #2
 800a264:	d81d      	bhi.n	800a2a2 <USBD_LL_DataOutStage+0xae>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <USBD_LL_DataOutStage+0x7c>
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d003      	beq.n	800a276 <USBD_LL_DataOutStage+0x82>
 800a26e:	e018      	b.n	800a2a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	75bb      	strb	r3, [r7, #22]
            break;
 800a274:	e018      	b.n	800a2a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	4619      	mov	r1, r3
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 fa5e 	bl	800a742 <USBD_CoreFindIF>
 800a286:	4603      	mov	r3, r0
 800a288:	75bb      	strb	r3, [r7, #22]
            break;
 800a28a:	e00d      	b.n	800a2a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a292:	b2db      	uxtb	r3, r3
 800a294:	4619      	mov	r1, r3
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 fa60 	bl	800a75c <USBD_CoreFindEP>
 800a29c:	4603      	mov	r3, r0
 800a29e:	75bb      	strb	r3, [r7, #22]
            break;
 800a2a0:	e002      	b.n	800a2a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	75bb      	strb	r3, [r7, #22]
            break;
 800a2a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a2a8:	7dbb      	ldrb	r3, [r7, #22]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d119      	bne.n	800a2e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d113      	bne.n	800a2e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a2ba:	7dba      	ldrb	r2, [r7, #22]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	32ae      	adds	r2, #174	; 0xae
 800a2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00b      	beq.n	800a2e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a2ca:	7dba      	ldrb	r2, [r7, #22]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a2d2:	7dba      	ldrb	r2, [r7, #22]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	32ae      	adds	r2, #174	; 0xae
 800a2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f001 f94a 	bl	800b57c <USBD_CtlSendStatus>
 800a2e8:	e032      	b.n	800a350 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a2ea:	7afb      	ldrb	r3, [r7, #11]
 800a2ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 fa31 	bl	800a75c <USBD_CoreFindEP>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2fe:	7dbb      	ldrb	r3, [r7, #22]
 800a300:	2bff      	cmp	r3, #255	; 0xff
 800a302:	d025      	beq.n	800a350 <USBD_LL_DataOutStage+0x15c>
 800a304:	7dbb      	ldrb	r3, [r7, #22]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d122      	bne.n	800a350 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b03      	cmp	r3, #3
 800a314:	d117      	bne.n	800a346 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a316:	7dba      	ldrb	r2, [r7, #22]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	32ae      	adds	r2, #174	; 0xae
 800a31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00f      	beq.n	800a346 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a326:	7dba      	ldrb	r2, [r7, #22]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a32e:	7dba      	ldrb	r2, [r7, #22]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	32ae      	adds	r2, #174	; 0xae
 800a334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	7afa      	ldrb	r2, [r7, #11]
 800a33c:	4611      	mov	r1, r2
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	4798      	blx	r3
 800a342:	4603      	mov	r3, r0
 800a344:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a346:	7dfb      	ldrb	r3, [r7, #23]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
 800a34e:	e000      	b.n	800a352 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b086      	sub	sp, #24
 800a35e:	af00      	add	r7, sp, #0
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	460b      	mov	r3, r1
 800a364:	607a      	str	r2, [r7, #4]
 800a366:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a368:	7afb      	ldrb	r3, [r7, #11]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d16f      	bne.n	800a44e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3314      	adds	r3, #20
 800a372:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d15a      	bne.n	800a434 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	429a      	cmp	r2, r3
 800a388:	d914      	bls.n	800a3b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	1ad2      	subs	r2, r2, r3
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	461a      	mov	r2, r3
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f001 f8ac 	bl	800b4fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f004 fa4f 	bl	800e850 <USBD_LL_PrepareReceive>
 800a3b2:	e03f      	b.n	800a434 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d11c      	bne.n	800a3fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d316      	bcc.n	800a3fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d20f      	bcs.n	800a3fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f001 f88d 	bl	800b4fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f004 fa2c 	bl	800e850 <USBD_LL_PrepareReceive>
 800a3f8:	e01c      	b.n	800a434 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b03      	cmp	r3, #3
 800a404:	d10f      	bne.n	800a426 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d009      	beq.n	800a426 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a426:	2180      	movs	r1, #128	; 0x80
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f004 f967 	bl	800e6fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f001 f8b7 	bl	800b5a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d03a      	beq.n	800a4b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f7ff fe42 	bl	800a0c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a44c:	e032      	b.n	800a4b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a44e:	7afb      	ldrb	r3, [r7, #11]
 800a450:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a454:	b2db      	uxtb	r3, r3
 800a456:	4619      	mov	r1, r3
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 f97f 	bl	800a75c <USBD_CoreFindEP>
 800a45e:	4603      	mov	r3, r0
 800a460:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	2bff      	cmp	r3, #255	; 0xff
 800a466:	d025      	beq.n	800a4b4 <USBD_LL_DataInStage+0x15a>
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d122      	bne.n	800a4b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b03      	cmp	r3, #3
 800a478:	d11c      	bne.n	800a4b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a47a:	7dfa      	ldrb	r2, [r7, #23]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	32ae      	adds	r2, #174	; 0xae
 800a480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d014      	beq.n	800a4b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a48a:	7dfa      	ldrb	r2, [r7, #23]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a492:	7dfa      	ldrb	r2, [r7, #23]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	32ae      	adds	r2, #174	; 0xae
 800a498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	7afa      	ldrb	r2, [r7, #11]
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	4798      	blx	r3
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a4aa:	7dbb      	ldrb	r3, [r7, #22]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a4b0:	7dbb      	ldrb	r3, [r7, #22]
 800a4b2:	e000      	b.n	800a4b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d014      	beq.n	800a524 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00e      	beq.n	800a524 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6852      	ldr	r2, [r2, #4]
 800a512:	b2d2      	uxtb	r2, r2
 800a514:	4611      	mov	r1, r2
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	4798      	blx	r3
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a520:	2303      	movs	r3, #3
 800a522:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a524:	2340      	movs	r3, #64	; 0x40
 800a526:	2200      	movs	r2, #0
 800a528:	2100      	movs	r1, #0
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f004 f8a1 	bl	800e672 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2240      	movs	r2, #64	; 0x40
 800a53c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a540:	2340      	movs	r3, #64	; 0x40
 800a542:	2200      	movs	r2, #0
 800a544:	2180      	movs	r1, #128	; 0x80
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f004 f893 	bl	800e672 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2240      	movs	r2, #64	; 0x40
 800a556:	621a      	str	r2, [r3, #32]

  return ret;
 800a558:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a562:	b480      	push	{r7}
 800a564:	b083      	sub	sp, #12
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a582:	b480      	push	{r7}
 800a584:	b083      	sub	sp, #12
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a590:	b2da      	uxtb	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2204      	movs	r2, #4
 800a59c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b04      	cmp	r3, #4
 800a5c0:	d106      	bne.n	800a5d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d110      	bne.n	800a614 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00b      	beq.n	800a614 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d005      	beq.n	800a614 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	32ae      	adds	r2, #174	; 0xae
 800a634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e01c      	b.n	800a67a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d115      	bne.n	800a678 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	32ae      	adds	r2, #174	; 0xae
 800a656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00b      	beq.n	800a678 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	32ae      	adds	r2, #174	; 0xae
 800a66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66e:	6a1b      	ldr	r3, [r3, #32]
 800a670:	78fa      	ldrb	r2, [r7, #3]
 800a672:	4611      	mov	r1, r2
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	32ae      	adds	r2, #174	; 0xae
 800a698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e01c      	b.n	800a6de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	d115      	bne.n	800a6dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	32ae      	adds	r2, #174	; 0xae
 800a6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00b      	beq.n	800a6dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	32ae      	adds	r2, #174	; 0xae
 800a6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	78fa      	ldrb	r2, [r7, #3]
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b083      	sub	sp, #12
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00e      	beq.n	800a738 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	6852      	ldr	r2, [r2, #4]
 800a726:	b2d2      	uxtb	r2, r2
 800a728:	4611      	mov	r1, r2
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	4798      	blx	r3
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a734:	2303      	movs	r3, #3
 800a736:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a738:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	460b      	mov	r3, r1
 800a74c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a74e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a750:	4618      	mov	r0, r3
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a768:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b086      	sub	sp, #24
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	885b      	ldrh	r3, [r3, #2]
 800a792:	b29a      	uxth	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	b29b      	uxth	r3, r3
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d920      	bls.n	800a7e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a7a6:	e013      	b.n	800a7d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a7a8:	f107 030a 	add.w	r3, r7, #10
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	6978      	ldr	r0, [r7, #20]
 800a7b0:	f000 f81b 	bl	800a7ea <USBD_GetNextDesc>
 800a7b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	785b      	ldrb	r3, [r3, #1]
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d108      	bne.n	800a7d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	789b      	ldrb	r3, [r3, #2]
 800a7c6:	78fa      	ldrb	r2, [r7, #3]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d008      	beq.n	800a7de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	885b      	ldrh	r3, [r3, #2]
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	897b      	ldrh	r3, [r7, #10]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d8e5      	bhi.n	800a7a8 <USBD_GetEpDesc+0x32>
 800a7dc:	e000      	b.n	800a7e0 <USBD_GetEpDesc+0x6a>
          break;
 800a7de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a7e0:	693b      	ldr	r3, [r7, #16]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	881a      	ldrh	r2, [r3, #0]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	b29b      	uxth	r3, r3
 800a802:	4413      	add	r3, r2
 800a804:	b29a      	uxth	r2, r3
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4413      	add	r3, r2
 800a814:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a816:	68fb      	ldr	r3, [r7, #12]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	3301      	adds	r3, #1
 800a83a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a842:	8a3b      	ldrh	r3, [r7, #16]
 800a844:	021b      	lsls	r3, r3, #8
 800a846:	b21a      	sxth	r2, r3
 800a848:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	b21b      	sxth	r3, r3
 800a850:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a852:	89fb      	ldrh	r3, [r7, #14]
}
 800a854:	4618      	mov	r0, r3
 800a856:	371c      	adds	r7, #28
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a876:	2b40      	cmp	r3, #64	; 0x40
 800a878:	d005      	beq.n	800a886 <USBD_StdDevReq+0x26>
 800a87a:	2b40      	cmp	r3, #64	; 0x40
 800a87c:	d857      	bhi.n	800a92e <USBD_StdDevReq+0xce>
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00f      	beq.n	800a8a2 <USBD_StdDevReq+0x42>
 800a882:	2b20      	cmp	r3, #32
 800a884:	d153      	bne.n	800a92e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	32ae      	adds	r2, #174	; 0xae
 800a890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	4798      	blx	r3
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a0:	e04a      	b.n	800a938 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	785b      	ldrb	r3, [r3, #1]
 800a8a6:	2b09      	cmp	r3, #9
 800a8a8:	d83b      	bhi.n	800a922 <USBD_StdDevReq+0xc2>
 800a8aa:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <USBD_StdDevReq+0x50>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a905 	.word	0x0800a905
 800a8b4:	0800a919 	.word	0x0800a919
 800a8b8:	0800a923 	.word	0x0800a923
 800a8bc:	0800a90f 	.word	0x0800a90f
 800a8c0:	0800a923 	.word	0x0800a923
 800a8c4:	0800a8e3 	.word	0x0800a8e3
 800a8c8:	0800a8d9 	.word	0x0800a8d9
 800a8cc:	0800a923 	.word	0x0800a923
 800a8d0:	0800a8fb 	.word	0x0800a8fb
 800a8d4:	0800a8ed 	.word	0x0800a8ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fa3c 	bl	800ad58 <USBD_GetDescriptor>
          break;
 800a8e0:	e024      	b.n	800a92c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fba1 	bl	800b02c <USBD_SetAddress>
          break;
 800a8ea:	e01f      	b.n	800a92c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fbe0 	bl	800b0b4 <USBD_SetConfig>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]
          break;
 800a8f8:	e018      	b.n	800a92c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fc83 	bl	800b208 <USBD_GetConfig>
          break;
 800a902:	e013      	b.n	800a92c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fcb4 	bl	800b274 <USBD_GetStatus>
          break;
 800a90c:	e00e      	b.n	800a92c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fce3 	bl	800b2dc <USBD_SetFeature>
          break;
 800a916:	e009      	b.n	800a92c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fd07 	bl	800b32e <USBD_ClrFeature>
          break;
 800a920:	e004      	b.n	800a92c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fd5e 	bl	800b3e6 <USBD_CtlError>
          break;
 800a92a:	bf00      	nop
      }
      break;
 800a92c:	e004      	b.n	800a938 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fd58 	bl	800b3e6 <USBD_CtlError>
      break;
 800a936:	bf00      	nop
  }

  return ret;
 800a938:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop

0800a944 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a95a:	2b40      	cmp	r3, #64	; 0x40
 800a95c:	d005      	beq.n	800a96a <USBD_StdItfReq+0x26>
 800a95e:	2b40      	cmp	r3, #64	; 0x40
 800a960:	d852      	bhi.n	800aa08 <USBD_StdItfReq+0xc4>
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <USBD_StdItfReq+0x26>
 800a966:	2b20      	cmp	r3, #32
 800a968:	d14e      	bne.n	800aa08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a970:	b2db      	uxtb	r3, r3
 800a972:	3b01      	subs	r3, #1
 800a974:	2b02      	cmp	r3, #2
 800a976:	d840      	bhi.n	800a9fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	889b      	ldrh	r3, [r3, #4]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d836      	bhi.n	800a9f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	889b      	ldrh	r3, [r3, #4]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7ff fed9 	bl	800a742 <USBD_CoreFindIF>
 800a990:	4603      	mov	r3, r0
 800a992:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	2bff      	cmp	r3, #255	; 0xff
 800a998:	d01d      	beq.n	800a9d6 <USBD_StdItfReq+0x92>
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d11a      	bne.n	800a9d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a9a0:	7bba      	ldrb	r2, [r7, #14]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	32ae      	adds	r2, #174	; 0xae
 800a9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00f      	beq.n	800a9d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a9b0:	7bba      	ldrb	r2, [r7, #14]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9b8:	7bba      	ldrb	r2, [r7, #14]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	32ae      	adds	r2, #174	; 0xae
 800a9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a9ce:	e004      	b.n	800a9da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a9d4:	e001      	b.n	800a9da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	88db      	ldrh	r3, [r3, #6]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d110      	bne.n	800aa04 <USBD_StdItfReq+0xc0>
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10d      	bne.n	800aa04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fdc7 	bl	800b57c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9ee:	e009      	b.n	800aa04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fcf7 	bl	800b3e6 <USBD_CtlError>
          break;
 800a9f8:	e004      	b.n	800aa04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fcf2 	bl	800b3e6 <USBD_CtlError>
          break;
 800aa02:	e000      	b.n	800aa06 <USBD_StdItfReq+0xc2>
          break;
 800aa04:	bf00      	nop
      }
      break;
 800aa06:	e004      	b.n	800aa12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fceb 	bl	800b3e6 <USBD_CtlError>
      break;
 800aa10:	bf00      	nop
  }

  return ret;
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	889b      	ldrh	r3, [r3, #4]
 800aa2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d007      	beq.n	800aa4c <USBD_StdEPReq+0x30>
 800aa3c:	2b40      	cmp	r3, #64	; 0x40
 800aa3e:	f200 817f 	bhi.w	800ad40 <USBD_StdEPReq+0x324>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d02a      	beq.n	800aa9c <USBD_StdEPReq+0x80>
 800aa46:	2b20      	cmp	r3, #32
 800aa48:	f040 817a 	bne.w	800ad40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7ff fe83 	bl	800a75c <USBD_CoreFindEP>
 800aa56:	4603      	mov	r3, r0
 800aa58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa5a:	7b7b      	ldrb	r3, [r7, #13]
 800aa5c:	2bff      	cmp	r3, #255	; 0xff
 800aa5e:	f000 8174 	beq.w	800ad4a <USBD_StdEPReq+0x32e>
 800aa62:	7b7b      	ldrb	r3, [r7, #13]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f040 8170 	bne.w	800ad4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aa6a:	7b7a      	ldrb	r2, [r7, #13]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aa72:	7b7a      	ldrb	r2, [r7, #13]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	32ae      	adds	r2, #174	; 0xae
 800aa78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 8163 	beq.w	800ad4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa84:	7b7a      	ldrb	r2, [r7, #13]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	32ae      	adds	r2, #174	; 0xae
 800aa8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	4798      	blx	r3
 800aa96:	4603      	mov	r3, r0
 800aa98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa9a:	e156      	b.n	800ad4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d008      	beq.n	800aab6 <USBD_StdEPReq+0x9a>
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	f300 8145 	bgt.w	800ad34 <USBD_StdEPReq+0x318>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 809b 	beq.w	800abe6 <USBD_StdEPReq+0x1ca>
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d03c      	beq.n	800ab2e <USBD_StdEPReq+0x112>
 800aab4:	e13e      	b.n	800ad34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d002      	beq.n	800aac8 <USBD_StdEPReq+0xac>
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d016      	beq.n	800aaf4 <USBD_StdEPReq+0xd8>
 800aac6:	e02c      	b.n	800ab22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00d      	beq.n	800aaea <USBD_StdEPReq+0xce>
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	d00a      	beq.n	800aaea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f003 fe0f 	bl	800e6fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aade:	2180      	movs	r1, #128	; 0x80
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f003 fe0b 	bl	800e6fc <USBD_LL_StallEP>
 800aae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aae8:	e020      	b.n	800ab2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fc7a 	bl	800b3e6 <USBD_CtlError>
              break;
 800aaf2:	e01b      	b.n	800ab2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	885b      	ldrh	r3, [r3, #2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10e      	bne.n	800ab1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00b      	beq.n	800ab1a <USBD_StdEPReq+0xfe>
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	2b80      	cmp	r3, #128	; 0x80
 800ab06:	d008      	beq.n	800ab1a <USBD_StdEPReq+0xfe>
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	88db      	ldrh	r3, [r3, #6]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d104      	bne.n	800ab1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f003 fdf1 	bl	800e6fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fd2e 	bl	800b57c <USBD_CtlSendStatus>

              break;
 800ab20:	e004      	b.n	800ab2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fc5e 	bl	800b3e6 <USBD_CtlError>
              break;
 800ab2a:	bf00      	nop
          }
          break;
 800ab2c:	e107      	b.n	800ad3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d002      	beq.n	800ab40 <USBD_StdEPReq+0x124>
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d016      	beq.n	800ab6c <USBD_StdEPReq+0x150>
 800ab3e:	e04b      	b.n	800abd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00d      	beq.n	800ab62 <USBD_StdEPReq+0x146>
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	2b80      	cmp	r3, #128	; 0x80
 800ab4a:	d00a      	beq.n	800ab62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f003 fdd3 	bl	800e6fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab56:	2180      	movs	r1, #128	; 0x80
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f003 fdcf 	bl	800e6fc <USBD_LL_StallEP>
 800ab5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab60:	e040      	b.n	800abe4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fc3e 	bl	800b3e6 <USBD_CtlError>
              break;
 800ab6a:	e03b      	b.n	800abe4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	885b      	ldrh	r3, [r3, #2]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d136      	bne.n	800abe2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d004      	beq.n	800ab88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f003 fdd9 	bl	800e73a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fcf7 	bl	800b57c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f7ff fde2 	bl	800a75c <USBD_CoreFindEP>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab9c:	7b7b      	ldrb	r3, [r7, #13]
 800ab9e:	2bff      	cmp	r3, #255	; 0xff
 800aba0:	d01f      	beq.n	800abe2 <USBD_StdEPReq+0x1c6>
 800aba2:	7b7b      	ldrb	r3, [r7, #13]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d11c      	bne.n	800abe2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aba8:	7b7a      	ldrb	r2, [r7, #13]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800abb0:	7b7a      	ldrb	r2, [r7, #13]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	32ae      	adds	r2, #174	; 0xae
 800abb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d010      	beq.n	800abe2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abc0:	7b7a      	ldrb	r2, [r7, #13]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	32ae      	adds	r2, #174	; 0xae
 800abc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	4798      	blx	r3
 800abd2:	4603      	mov	r3, r0
 800abd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800abd6:	e004      	b.n	800abe2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fc03 	bl	800b3e6 <USBD_CtlError>
              break;
 800abe0:	e000      	b.n	800abe4 <USBD_StdEPReq+0x1c8>
              break;
 800abe2:	bf00      	nop
          }
          break;
 800abe4:	e0ab      	b.n	800ad3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d002      	beq.n	800abf8 <USBD_StdEPReq+0x1dc>
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d032      	beq.n	800ac5c <USBD_StdEPReq+0x240>
 800abf6:	e097      	b.n	800ad28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d007      	beq.n	800ac0e <USBD_StdEPReq+0x1f2>
 800abfe:	7bbb      	ldrb	r3, [r7, #14]
 800ac00:	2b80      	cmp	r3, #128	; 0x80
 800ac02:	d004      	beq.n	800ac0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fbed 	bl	800b3e6 <USBD_CtlError>
                break;
 800ac0c:	e091      	b.n	800ad32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	da0b      	bge.n	800ac2e <USBD_StdEPReq+0x212>
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	3310      	adds	r3, #16
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	4413      	add	r3, r2
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	e00b      	b.n	800ac46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	4413      	add	r3, r2
 800ac44:	3304      	adds	r3, #4
 800ac46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2202      	movs	r2, #2
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fc37 	bl	800b4c8 <USBD_CtlSendData>
              break;
 800ac5a:	e06a      	b.n	800ad32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	da11      	bge.n	800ac88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	f003 020f 	and.w	r2, r3, #15
 800ac6a:	6879      	ldr	r1, [r7, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	440b      	add	r3, r1
 800ac76:	3324      	adds	r3, #36	; 0x24
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d117      	bne.n	800acae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fbb0 	bl	800b3e6 <USBD_CtlError>
                  break;
 800ac86:	e054      	b.n	800ad32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	f003 020f 	and.w	r2, r3, #15
 800ac8e:	6879      	ldr	r1, [r7, #4]
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	440b      	add	r3, r1
 800ac9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d104      	bne.n	800acae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fb9d 	bl	800b3e6 <USBD_CtlError>
                  break;
 800acac:	e041      	b.n	800ad32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	da0b      	bge.n	800acce <USBD_StdEPReq+0x2b2>
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acbc:	4613      	mov	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	3310      	adds	r3, #16
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4413      	add	r3, r2
 800acca:	3304      	adds	r3, #4
 800accc:	e00b      	b.n	800ace6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acd4:	4613      	mov	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	4413      	add	r3, r2
 800ace4:	3304      	adds	r3, #4
 800ace6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d002      	beq.n	800acf4 <USBD_StdEPReq+0x2d8>
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	2b80      	cmp	r3, #128	; 0x80
 800acf2:	d103      	bne.n	800acfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2200      	movs	r2, #0
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	e00e      	b.n	800ad1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f003 fd39 	bl	800e778 <USBD_LL_IsStallEP>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	601a      	str	r2, [r3, #0]
 800ad12:	e002      	b.n	800ad1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2200      	movs	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fbd1 	bl	800b4c8 <USBD_CtlSendData>
              break;
 800ad26:	e004      	b.n	800ad32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fb5b 	bl	800b3e6 <USBD_CtlError>
              break;
 800ad30:	bf00      	nop
          }
          break;
 800ad32:	e004      	b.n	800ad3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fb55 	bl	800b3e6 <USBD_CtlError>
          break;
 800ad3c:	bf00      	nop
      }
      break;
 800ad3e:	e005      	b.n	800ad4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fb4f 	bl	800b3e6 <USBD_CtlError>
      break;
 800ad48:	e000      	b.n	800ad4c <USBD_StdEPReq+0x330>
      break;
 800ad4a:	bf00      	nop
  }

  return ret;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad62:	2300      	movs	r3, #0
 800ad64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	885b      	ldrh	r3, [r3, #2]
 800ad72:	0a1b      	lsrs	r3, r3, #8
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	3b01      	subs	r3, #1
 800ad78:	2b06      	cmp	r3, #6
 800ad7a:	f200 8128 	bhi.w	800afce <USBD_GetDescriptor+0x276>
 800ad7e:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <USBD_GetDescriptor+0x2c>)
 800ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad84:	0800ada1 	.word	0x0800ada1
 800ad88:	0800adb9 	.word	0x0800adb9
 800ad8c:	0800adf9 	.word	0x0800adf9
 800ad90:	0800afcf 	.word	0x0800afcf
 800ad94:	0800afcf 	.word	0x0800afcf
 800ad98:	0800af6f 	.word	0x0800af6f
 800ad9c:	0800af9b 	.word	0x0800af9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	7c12      	ldrb	r2, [r2, #16]
 800adac:	f107 0108 	add.w	r1, r7, #8
 800adb0:	4610      	mov	r0, r2
 800adb2:	4798      	blx	r3
 800adb4:	60f8      	str	r0, [r7, #12]
      break;
 800adb6:	e112      	b.n	800afde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	7c1b      	ldrb	r3, [r3, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10d      	bne.n	800addc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc8:	f107 0208 	add.w	r2, r7, #8
 800adcc:	4610      	mov	r0, r2
 800adce:	4798      	blx	r3
 800add0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3301      	adds	r3, #1
 800add6:	2202      	movs	r2, #2
 800add8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adda:	e100      	b.n	800afde <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	f107 0208 	add.w	r2, r7, #8
 800ade8:	4610      	mov	r0, r2
 800adea:	4798      	blx	r3
 800adec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3301      	adds	r3, #1
 800adf2:	2202      	movs	r2, #2
 800adf4:	701a      	strb	r2, [r3, #0]
      break;
 800adf6:	e0f2      	b.n	800afde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	885b      	ldrh	r3, [r3, #2]
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b05      	cmp	r3, #5
 800ae00:	f200 80ac 	bhi.w	800af5c <USBD_GetDescriptor+0x204>
 800ae04:	a201      	add	r2, pc, #4	; (adr r2, 800ae0c <USBD_GetDescriptor+0xb4>)
 800ae06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0a:	bf00      	nop
 800ae0c:	0800ae25 	.word	0x0800ae25
 800ae10:	0800ae59 	.word	0x0800ae59
 800ae14:	0800ae8d 	.word	0x0800ae8d
 800ae18:	0800aec1 	.word	0x0800aec1
 800ae1c:	0800aef5 	.word	0x0800aef5
 800ae20:	0800af29 	.word	0x0800af29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	7c12      	ldrb	r2, [r2, #16]
 800ae3c:	f107 0108 	add.w	r1, r7, #8
 800ae40:	4610      	mov	r0, r2
 800ae42:	4798      	blx	r3
 800ae44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae46:	e091      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 facb 	bl	800b3e6 <USBD_CtlError>
            err++;
 800ae50:	7afb      	ldrb	r3, [r7, #11]
 800ae52:	3301      	adds	r3, #1
 800ae54:	72fb      	strb	r3, [r7, #11]
          break;
 800ae56:	e089      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	7c12      	ldrb	r2, [r2, #16]
 800ae70:	f107 0108 	add.w	r1, r7, #8
 800ae74:	4610      	mov	r0, r2
 800ae76:	4798      	blx	r3
 800ae78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae7a:	e077      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fab1 	bl	800b3e6 <USBD_CtlError>
            err++;
 800ae84:	7afb      	ldrb	r3, [r7, #11]
 800ae86:	3301      	adds	r3, #1
 800ae88:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8a:	e06f      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00b      	beq.n	800aeb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	7c12      	ldrb	r2, [r2, #16]
 800aea4:	f107 0108 	add.w	r1, r7, #8
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeae:	e05d      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa97 	bl	800b3e6 <USBD_CtlError>
            err++;
 800aeb8:	7afb      	ldrb	r3, [r7, #11]
 800aeba:	3301      	adds	r3, #1
 800aebc:	72fb      	strb	r3, [r7, #11]
          break;
 800aebe:	e055      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00b      	beq.n	800aee4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	7c12      	ldrb	r2, [r2, #16]
 800aed8:	f107 0108 	add.w	r1, r7, #8
 800aedc:	4610      	mov	r0, r2
 800aede:	4798      	blx	r3
 800aee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aee2:	e043      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa7d 	bl	800b3e6 <USBD_CtlError>
            err++;
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	3301      	adds	r3, #1
 800aef0:	72fb      	strb	r3, [r7, #11]
          break;
 800aef2:	e03b      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	7c12      	ldrb	r2, [r2, #16]
 800af0c:	f107 0108 	add.w	r1, r7, #8
 800af10:	4610      	mov	r0, r2
 800af12:	4798      	blx	r3
 800af14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af16:	e029      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa63 	bl	800b3e6 <USBD_CtlError>
            err++;
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	3301      	adds	r3, #1
 800af24:	72fb      	strb	r3, [r7, #11]
          break;
 800af26:	e021      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00b      	beq.n	800af4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	7c12      	ldrb	r2, [r2, #16]
 800af40:	f107 0108 	add.w	r1, r7, #8
 800af44:	4610      	mov	r0, r2
 800af46:	4798      	blx	r3
 800af48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af4a:	e00f      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa49 	bl	800b3e6 <USBD_CtlError>
            err++;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
          break;
 800af5a:	e007      	b.n	800af6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fa41 	bl	800b3e6 <USBD_CtlError>
          err++;
 800af64:	7afb      	ldrb	r3, [r7, #11]
 800af66:	3301      	adds	r3, #1
 800af68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af6a:	bf00      	nop
      }
      break;
 800af6c:	e037      	b.n	800afde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7c1b      	ldrb	r3, [r3, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d109      	bne.n	800af8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7e:	f107 0208 	add.w	r2, r7, #8
 800af82:	4610      	mov	r0, r2
 800af84:	4798      	blx	r3
 800af86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af88:	e029      	b.n	800afde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fa2a 	bl	800b3e6 <USBD_CtlError>
        err++;
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	3301      	adds	r3, #1
 800af96:	72fb      	strb	r3, [r7, #11]
      break;
 800af98:	e021      	b.n	800afde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	7c1b      	ldrb	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10d      	bne.n	800afbe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afaa:	f107 0208 	add.w	r2, r7, #8
 800afae:	4610      	mov	r0, r2
 800afb0:	4798      	blx	r3
 800afb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	3301      	adds	r3, #1
 800afb8:	2207      	movs	r2, #7
 800afba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afbc:	e00f      	b.n	800afde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fa10 	bl	800b3e6 <USBD_CtlError>
        err++;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	3301      	adds	r3, #1
 800afca:	72fb      	strb	r3, [r7, #11]
      break;
 800afcc:	e007      	b.n	800afde <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fa08 	bl	800b3e6 <USBD_CtlError>
      err++;
 800afd6:	7afb      	ldrb	r3, [r7, #11]
 800afd8:	3301      	adds	r3, #1
 800afda:	72fb      	strb	r3, [r7, #11]
      break;
 800afdc:	bf00      	nop
  }

  if (err != 0U)
 800afde:	7afb      	ldrb	r3, [r7, #11]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d11e      	bne.n	800b022 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	88db      	ldrh	r3, [r3, #6]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d016      	beq.n	800b01a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800afec:	893b      	ldrh	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00e      	beq.n	800b010 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	88da      	ldrh	r2, [r3, #6]
 800aff6:	893b      	ldrh	r3, [r7, #8]
 800aff8:	4293      	cmp	r3, r2
 800affa:	bf28      	it	cs
 800affc:	4613      	movcs	r3, r2
 800affe:	b29b      	uxth	r3, r3
 800b000:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b002:	893b      	ldrh	r3, [r7, #8]
 800b004:	461a      	mov	r2, r3
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fa5d 	bl	800b4c8 <USBD_CtlSendData>
 800b00e:	e009      	b.n	800b024 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f9e7 	bl	800b3e6 <USBD_CtlError>
 800b018:	e004      	b.n	800b024 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 faae 	bl	800b57c <USBD_CtlSendStatus>
 800b020:	e000      	b.n	800b024 <USBD_GetDescriptor+0x2cc>
    return;
 800b022:	bf00      	nop
  }
}
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop

0800b02c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	889b      	ldrh	r3, [r3, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d131      	bne.n	800b0a2 <USBD_SetAddress+0x76>
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	88db      	ldrh	r3, [r3, #6]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d12d      	bne.n	800b0a2 <USBD_SetAddress+0x76>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	885b      	ldrh	r3, [r3, #2]
 800b04a:	2b7f      	cmp	r3, #127	; 0x7f
 800b04c:	d829      	bhi.n	800b0a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	885b      	ldrh	r3, [r3, #2]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b058:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b03      	cmp	r3, #3
 800b064:	d104      	bne.n	800b070 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f9bc 	bl	800b3e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b06e:	e01d      	b.n	800b0ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	7bfa      	ldrb	r2, [r7, #15]
 800b074:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f003 fba7 	bl	800e7d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fa7a 	bl	800b57c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d004      	beq.n	800b098 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2202      	movs	r2, #2
 800b092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b096:	e009      	b.n	800b0ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a0:	e004      	b.n	800b0ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f99e 	bl	800b3e6 <USBD_CtlError>
  }
}
 800b0aa:	bf00      	nop
 800b0ac:	bf00      	nop
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	885b      	ldrh	r3, [r3, #2]
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	4b4e      	ldr	r3, [pc, #312]	; (800b204 <USBD_SetConfig+0x150>)
 800b0ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0cc:	4b4d      	ldr	r3, [pc, #308]	; (800b204 <USBD_SetConfig+0x150>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d905      	bls.n	800b0e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f985 	bl	800b3e6 <USBD_CtlError>
    return USBD_FAIL;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e08c      	b.n	800b1fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d002      	beq.n	800b0f2 <USBD_SetConfig+0x3e>
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d029      	beq.n	800b144 <USBD_SetConfig+0x90>
 800b0f0:	e075      	b.n	800b1de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0f2:	4b44      	ldr	r3, [pc, #272]	; (800b204 <USBD_SetConfig+0x150>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d020      	beq.n	800b13c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b0fa:	4b42      	ldr	r3, [pc, #264]	; (800b204 <USBD_SetConfig+0x150>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b104:	4b3f      	ldr	r3, [pc, #252]	; (800b204 <USBD_SetConfig+0x150>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7fe ffe7 	bl	800a0de <USBD_SetClassConfig>
 800b110:	4603      	mov	r3, r0
 800b112:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b114:	7bfb      	ldrb	r3, [r7, #15]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d008      	beq.n	800b12c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f962 	bl	800b3e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2202      	movs	r2, #2
 800b126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b12a:	e065      	b.n	800b1f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fa25 	bl	800b57c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2203      	movs	r2, #3
 800b136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b13a:	e05d      	b.n	800b1f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fa1d 	bl	800b57c <USBD_CtlSendStatus>
      break;
 800b142:	e059      	b.n	800b1f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b144:	4b2f      	ldr	r3, [pc, #188]	; (800b204 <USBD_SetConfig+0x150>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d112      	bne.n	800b172 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b154:	4b2b      	ldr	r3, [pc, #172]	; (800b204 <USBD_SetConfig+0x150>)
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	461a      	mov	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b15e:	4b29      	ldr	r3, [pc, #164]	; (800b204 <USBD_SetConfig+0x150>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7fe ffd6 	bl	800a116 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fa06 	bl	800b57c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b170:	e042      	b.n	800b1f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b172:	4b24      	ldr	r3, [pc, #144]	; (800b204 <USBD_SetConfig+0x150>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d02a      	beq.n	800b1d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	b2db      	uxtb	r3, r3
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7fe ffc4 	bl	800a116 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b18e:	4b1d      	ldr	r3, [pc, #116]	; (800b204 <USBD_SetConfig+0x150>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b198:	4b1a      	ldr	r3, [pc, #104]	; (800b204 <USBD_SetConfig+0x150>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7fe ff9d 	bl	800a0de <USBD_SetClassConfig>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00f      	beq.n	800b1ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f918 	bl	800b3e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7fe ffa9 	bl	800a116 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1cc:	e014      	b.n	800b1f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f9d4 	bl	800b57c <USBD_CtlSendStatus>
      break;
 800b1d4:	e010      	b.n	800b1f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f9d0 	bl	800b57c <USBD_CtlSendStatus>
      break;
 800b1dc:	e00c      	b.n	800b1f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f900 	bl	800b3e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1e6:	4b07      	ldr	r3, [pc, #28]	; (800b204 <USBD_SetConfig+0x150>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7fe ff92 	bl	800a116 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f6:	bf00      	nop
  }

  return ret;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000b88 	.word	0x20000b88

0800b208 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	88db      	ldrh	r3, [r3, #6]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d004      	beq.n	800b224 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f8e2 	bl	800b3e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b222:	e023      	b.n	800b26c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	dc02      	bgt.n	800b236 <USBD_GetConfig+0x2e>
 800b230:	2b00      	cmp	r3, #0
 800b232:	dc03      	bgt.n	800b23c <USBD_GetConfig+0x34>
 800b234:	e015      	b.n	800b262 <USBD_GetConfig+0x5a>
 800b236:	2b03      	cmp	r3, #3
 800b238:	d00b      	beq.n	800b252 <USBD_GetConfig+0x4a>
 800b23a:	e012      	b.n	800b262 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3308      	adds	r3, #8
 800b246:	2201      	movs	r2, #1
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f93c 	bl	800b4c8 <USBD_CtlSendData>
        break;
 800b250:	e00c      	b.n	800b26c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	3304      	adds	r3, #4
 800b256:	2201      	movs	r2, #1
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f934 	bl	800b4c8 <USBD_CtlSendData>
        break;
 800b260:	e004      	b.n	800b26c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f8be 	bl	800b3e6 <USBD_CtlError>
        break;
 800b26a:	bf00      	nop
}
 800b26c:	bf00      	nop
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b284:	b2db      	uxtb	r3, r3
 800b286:	3b01      	subs	r3, #1
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d81e      	bhi.n	800b2ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	88db      	ldrh	r3, [r3, #6]
 800b290:	2b02      	cmp	r3, #2
 800b292:	d004      	beq.n	800b29e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f8a5 	bl	800b3e6 <USBD_CtlError>
        break;
 800b29c:	e01a      	b.n	800b2d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d005      	beq.n	800b2ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	f043 0202 	orr.w	r2, r3, #2
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	330c      	adds	r3, #12
 800b2be:	2202      	movs	r2, #2
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f900 	bl	800b4c8 <USBD_CtlSendData>
      break;
 800b2c8:	e004      	b.n	800b2d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f88a 	bl	800b3e6 <USBD_CtlError>
      break;
 800b2d2:	bf00      	nop
  }
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	885b      	ldrh	r3, [r3, #2]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d107      	bne.n	800b2fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f940 	bl	800b57c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b2fc:	e013      	b.n	800b326 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	885b      	ldrh	r3, [r3, #2]
 800b302:	2b02      	cmp	r3, #2
 800b304:	d10b      	bne.n	800b31e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	889b      	ldrh	r3, [r3, #4]
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f930 	bl	800b57c <USBD_CtlSendStatus>
}
 800b31c:	e003      	b.n	800b326 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f860 	bl	800b3e6 <USBD_CtlError>
}
 800b326:	bf00      	nop
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	3b01      	subs	r3, #1
 800b342:	2b02      	cmp	r3, #2
 800b344:	d80b      	bhi.n	800b35e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	885b      	ldrh	r3, [r3, #2]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d10c      	bne.n	800b368 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f910 	bl	800b57c <USBD_CtlSendStatus>
      }
      break;
 800b35c:	e004      	b.n	800b368 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f840 	bl	800b3e6 <USBD_CtlError>
      break;
 800b366:	e000      	b.n	800b36a <USBD_ClrFeature+0x3c>
      break;
 800b368:	bf00      	nop
  }
}
 800b36a:	bf00      	nop
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	781a      	ldrb	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3301      	adds	r3, #1
 800b38c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	781a      	ldrb	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3301      	adds	r3, #1
 800b39a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7ff fa41 	bl	800a824 <SWAPBYTE>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff fa34 	bl	800a824 <SWAPBYTE>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	461a      	mov	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff fa27 	bl	800a824 <SWAPBYTE>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	461a      	mov	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	80da      	strh	r2, [r3, #6]
}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3f0:	2180      	movs	r1, #128	; 0x80
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f003 f982 	bl	800e6fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f003 f97e 	bl	800e6fc <USBD_LL_StallEP>
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b414:	2300      	movs	r3, #0
 800b416:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d036      	beq.n	800b48c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b422:	6938      	ldr	r0, [r7, #16]
 800b424:	f000 f836 	bl	800b494 <USBD_GetLen>
 800b428:	4603      	mov	r3, r0
 800b42a:	3301      	adds	r3, #1
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	005b      	lsls	r3, r3, #1
 800b430:	b29a      	uxth	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	4413      	add	r3, r2
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7812      	ldrb	r2, [r2, #0]
 800b440:	701a      	strb	r2, [r3, #0]
  idx++;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	3301      	adds	r3, #1
 800b446:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	4413      	add	r3, r2
 800b44e:	2203      	movs	r2, #3
 800b450:	701a      	strb	r2, [r3, #0]
  idx++;
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	3301      	adds	r3, #1
 800b456:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b458:	e013      	b.n	800b482 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	4413      	add	r3, r2
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	7812      	ldrb	r2, [r2, #0]
 800b464:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	3301      	adds	r3, #1
 800b46a:	613b      	str	r3, [r7, #16]
    idx++;
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	3301      	adds	r3, #1
 800b470:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b472:	7dfb      	ldrb	r3, [r7, #23]
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	4413      	add	r3, r2
 800b478:	2200      	movs	r2, #0
 800b47a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
 800b47e:	3301      	adds	r3, #1
 800b480:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1e7      	bne.n	800b45a <USBD_GetString+0x52>
 800b48a:	e000      	b.n	800b48e <USBD_GetString+0x86>
    return;
 800b48c:	bf00      	nop
  }
}
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b4a4:	e005      	b.n	800b4b2 <USBD_GetLen+0x1e>
  {
    len++;
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1f5      	bne.n	800b4a6 <USBD_GetLen+0x12>
  }

  return len;
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f003 f98d 	bl	800e80e <USBD_LL_Transmit>

  return USBD_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b084      	sub	sp, #16
 800b502:	af00      	add	r7, sp, #0
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	2100      	movs	r1, #0
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f003 f97c 	bl	800e80e <USBD_LL_Transmit>

  return USBD_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2203      	movs	r2, #3
 800b530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	2100      	movs	r1, #0
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f003 f980 	bl	800e850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b084      	sub	sp, #16
 800b55e:	af00      	add	r7, sp, #0
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	2100      	movs	r1, #0
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f003 f96f 	bl	800e850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2204      	movs	r2, #4
 800b588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b58c:	2300      	movs	r3, #0
 800b58e:	2200      	movs	r2, #0
 800b590:	2100      	movs	r1, #0
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f003 f93b 	bl	800e80e <USBD_LL_Transmit>

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f003 f949 	bl	800e850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 800b5d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5da:	2b84      	cmp	r3, #132	; 0x84
 800b5dc:	d005      	beq.n	800b5ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	3303      	adds	r3, #3
 800b5e8:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b5fc:	f001 f8ea 	bl	800c7d4 <vTaskStartScheduler>

  return osOK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	bd80      	pop	{r7, pc}

0800b606 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b606:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b608:	b089      	sub	sp, #36	; 0x24
 800b60a:	af04      	add	r7, sp, #16
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d020      	beq.n	800b65a <osThreadCreate+0x54>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d01c      	beq.n	800b65a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685c      	ldr	r4, [r3, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691e      	ldr	r6, [r3, #16]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff ffc8 	bl	800b5c8 <makeFreeRtosPriority>
 800b638:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b642:	9202      	str	r2, [sp, #8]
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	9100      	str	r1, [sp, #0]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	4632      	mov	r2, r6
 800b64c:	4629      	mov	r1, r5
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 fdd6 	bl	800c200 <xTaskCreateStatic>
 800b654:	4603      	mov	r3, r0
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	e01c      	b.n	800b694 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685c      	ldr	r4, [r3, #4]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b666:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff ffaa 	bl	800b5c8 <makeFreeRtosPriority>
 800b674:	4602      	mov	r2, r0
 800b676:	f107 030c 	add.w	r3, r7, #12
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	9200      	str	r2, [sp, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	4632      	mov	r2, r6
 800b682:	4629      	mov	r1, r5
 800b684:	4620      	mov	r0, r4
 800b686:	f000 fe18 	bl	800c2ba <xTaskCreate>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d001      	beq.n	800b694 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	e000      	b.n	800b696 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 800b694:	68fb      	ldr	r3, [r7, #12]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b69e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <osDelay+0x16>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	e000      	b.n	800b6b6 <osDelay+0x18>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 ffc6 	bl	800c648 <vTaskDelay>

  return osOK;
 800b6bc:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f103 0208 	add.w	r2, r3, #8
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f103 0208 	add.w	r2, r3, #8
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f103 0208 	add.w	r2, r3, #8
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	689a      	ldr	r2, [r3, #8]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	601a      	str	r2, [r3, #0]
}
 800b75c:	bf00      	nop
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b77e:	d103      	bne.n	800b788 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	e00c      	b.n	800b7a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3308      	adds	r3, #8
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	e002      	b.n	800b796 <vListInsert+0x2e>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d2f6      	bcs.n	800b790 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	601a      	str	r2, [r3, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b085      	sub	sp, #20
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	6892      	ldr	r2, [r2, #8]
 800b7f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	6852      	ldr	r2, [r2, #4]
 800b7fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d103      	bne.n	800b80e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	689a      	ldr	r2, [r3, #8]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	1e5a      	subs	r2, r3, #1
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
	...

0800b830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <xQueueGenericReset+0x2a>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	60bb      	str	r3, [r7, #8]
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b85a:	f002 fa1b 	bl	800dc94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b866:	68f9      	ldr	r1, [r7, #12]
 800b868:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b86a:	fb01 f303 	mul.w	r3, r1, r3
 800b86e:	441a      	add	r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88a:	3b01      	subs	r3, #1
 800b88c:	68f9      	ldr	r1, [r7, #12]
 800b88e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b890:	fb01 f303 	mul.w	r3, r1, r3
 800b894:	441a      	add	r2, r3
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	22ff      	movs	r2, #255	; 0xff
 800b89e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	22ff      	movs	r2, #255	; 0xff
 800b8a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d114      	bne.n	800b8da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01a      	beq.n	800b8ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3310      	adds	r3, #16
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 fa0d 	bl	800ccdc <xTaskRemoveFromEventList>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d012      	beq.n	800b8ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <xQueueGenericReset+0xcc>)
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	e009      	b.n	800b8ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3310      	adds	r3, #16
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff fef1 	bl	800b6c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3324      	adds	r3, #36	; 0x24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff feec 	bl	800b6c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8ee:	f002 fa01 	bl	800dcf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8f2:	2301      	movs	r3, #1
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	e000ed04 	.word	0xe000ed04

0800b900 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08e      	sub	sp, #56	; 0x38
 800b904:	af02      	add	r7, sp, #8
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <xQueueGenericCreateStatic+0x52>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <xQueueGenericCreateStatic+0x56>
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <xQueueGenericCreateStatic+0x58>
 800b956:	2300      	movs	r3, #0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	623b      	str	r3, [r7, #32]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d102      	bne.n	800b97e <xQueueGenericCreateStatic+0x7e>
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <xQueueGenericCreateStatic+0x82>
 800b97e:	2301      	movs	r3, #1
 800b980:	e000      	b.n	800b984 <xQueueGenericCreateStatic+0x84>
 800b982:	2300      	movs	r3, #0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	61fb      	str	r3, [r7, #28]
}
 800b99a:	bf00      	nop
 800b99c:	e7fe      	b.n	800b99c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b99e:	2348      	movs	r3, #72	; 0x48
 800b9a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2b48      	cmp	r3, #72	; 0x48
 800b9a6:	d00a      	beq.n	800b9be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	61bb      	str	r3, [r7, #24]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00d      	beq.n	800b9e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 f805 	bl	800b9f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3730      	adds	r7, #48	; 0x30
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d103      	bne.n	800ba0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	e002      	b.n	800ba12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba1e:	2101      	movs	r1, #1
 800ba20:	69b8      	ldr	r0, [r7, #24]
 800ba22:	f7ff ff05 	bl	800b830 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba26:	bf00      	nop
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
	...

0800ba30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b08e      	sub	sp, #56	; 0x38
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10a      	bne.n	800ba62 <xQueueGenericSend+0x32>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d103      	bne.n	800ba70 <xQueueGenericSend+0x40>
 800ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <xQueueGenericSend+0x44>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e000      	b.n	800ba76 <xQueueGenericSend+0x46>
 800ba74:	2300      	movs	r3, #0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10a      	bne.n	800ba90 <xQueueGenericSend+0x60>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba8c:	bf00      	nop
 800ba8e:	e7fe      	b.n	800ba8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d103      	bne.n	800ba9e <xQueueGenericSend+0x6e>
 800ba96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d101      	bne.n	800baa2 <xQueueGenericSend+0x72>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e000      	b.n	800baa4 <xQueueGenericSend+0x74>
 800baa2:	2300      	movs	r3, #0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10a      	bne.n	800babe <xQueueGenericSend+0x8e>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	623b      	str	r3, [r7, #32]
}
 800baba:	bf00      	nop
 800babc:	e7fe      	b.n	800babc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800babe:	f001 fac9 	bl	800d054 <xTaskGetSchedulerState>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d102      	bne.n	800bace <xQueueGenericSend+0x9e>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d101      	bne.n	800bad2 <xQueueGenericSend+0xa2>
 800bace:	2301      	movs	r3, #1
 800bad0:	e000      	b.n	800bad4 <xQueueGenericSend+0xa4>
 800bad2:	2300      	movs	r3, #0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10a      	bne.n	800baee <xQueueGenericSend+0xbe>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	61fb      	str	r3, [r7, #28]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baee:	f002 f8d1 	bl	800dc94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d302      	bcc.n	800bb04 <xQueueGenericSend+0xd4>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d129      	bne.n	800bb58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	68b9      	ldr	r1, [r7, #8]
 800bb08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb0a:	f000 fa0b 	bl	800bf24 <prvCopyDataToQueue>
 800bb0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d010      	beq.n	800bb3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	3324      	adds	r3, #36	; 0x24
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f001 f8dd 	bl	800ccdc <xTaskRemoveFromEventList>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d013      	beq.n	800bb50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb28:	4b3f      	ldr	r3, [pc, #252]	; (800bc28 <xQueueGenericSend+0x1f8>)
 800bb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	e00a      	b.n	800bb50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d007      	beq.n	800bb50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb40:	4b39      	ldr	r3, [pc, #228]	; (800bc28 <xQueueGenericSend+0x1f8>)
 800bb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb50:	f002 f8d0 	bl	800dcf4 <vPortExitCritical>
				return pdPASS;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e063      	b.n	800bc20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d103      	bne.n	800bb66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb5e:	f002 f8c9 	bl	800dcf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	e05c      	b.n	800bc20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d106      	bne.n	800bb7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb6c:	f107 0314 	add.w	r3, r7, #20
 800bb70:	4618      	mov	r0, r3
 800bb72:	f001 f915 	bl	800cda0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb76:	2301      	movs	r3, #1
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb7a:	f002 f8bb 	bl	800dcf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb7e:	f000 fe8f 	bl	800c8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb82:	f002 f887 	bl	800dc94 <vPortEnterCritical>
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb8c:	b25b      	sxtb	r3, r3
 800bb8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb92:	d103      	bne.n	800bb9c <xQueueGenericSend+0x16c>
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bba2:	b25b      	sxtb	r3, r3
 800bba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bba8:	d103      	bne.n	800bbb2 <xQueueGenericSend+0x182>
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb2:	f002 f89f 	bl	800dcf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbb6:	1d3a      	adds	r2, r7, #4
 800bbb8:	f107 0314 	add.w	r3, r7, #20
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f001 f904 	bl	800cdcc <xTaskCheckForTimeOut>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d124      	bne.n	800bc14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bbca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbcc:	f000 faa2 	bl	800c114 <prvIsQueueFull>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d018      	beq.n	800bc08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	3310      	adds	r3, #16
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f001 f82c 	bl	800cc3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbe6:	f000 fa2d 	bl	800c044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbea:	f000 fe67 	bl	800c8bc <xTaskResumeAll>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f47f af7c 	bne.w	800baee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbf6:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <xQueueGenericSend+0x1f8>)
 800bbf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	e772      	b.n	800baee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc0a:	f000 fa1b 	bl	800c044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc0e:	f000 fe55 	bl	800c8bc <xTaskResumeAll>
 800bc12:	e76c      	b.n	800baee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc16:	f000 fa15 	bl	800c044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc1a:	f000 fe4f 	bl	800c8bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3738      	adds	r7, #56	; 0x38
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	e000ed04 	.word	0xe000ed04

0800bc2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b090      	sub	sp, #64	; 0x40
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10a      	bne.n	800bc5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc56:	bf00      	nop
 800bc58:	e7fe      	b.n	800bc58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d103      	bne.n	800bc68 <xQueueGenericSendFromISR+0x3c>
 800bc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d101      	bne.n	800bc6c <xQueueGenericSendFromISR+0x40>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e000      	b.n	800bc6e <xQueueGenericSendFromISR+0x42>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10a      	bne.n	800bc88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc84:	bf00      	nop
 800bc86:	e7fe      	b.n	800bc86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d103      	bne.n	800bc96 <xQueueGenericSendFromISR+0x6a>
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d101      	bne.n	800bc9a <xQueueGenericSendFromISR+0x6e>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e000      	b.n	800bc9c <xQueueGenericSendFromISR+0x70>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	623b      	str	r3, [r7, #32]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcb6:	f002 f8cf 	bl	800de58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bcba:	f3ef 8211 	mrs	r2, BASEPRI
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	61fa      	str	r2, [r7, #28]
 800bcd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d302      	bcc.n	800bce8 <xQueueGenericSendFromISR+0xbc>
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d12f      	bne.n	800bd48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	68b9      	ldr	r1, [r7, #8]
 800bcfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcfe:	f000 f911 	bl	800bf24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bd06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd0a:	d112      	bne.n	800bd32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d016      	beq.n	800bd42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd16:	3324      	adds	r3, #36	; 0x24
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 ffdf 	bl	800ccdc <xTaskRemoveFromEventList>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00e      	beq.n	800bd42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00b      	beq.n	800bd42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	e007      	b.n	800bd42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd36:	3301      	adds	r3, #1
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	b25a      	sxtb	r2, r3
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd42:	2301      	movs	r3, #1
 800bd44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bd46:	e001      	b.n	800bd4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3740      	adds	r7, #64	; 0x40
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
	...

0800bd64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08c      	sub	sp, #48	; 0x30
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd70:	2300      	movs	r3, #0
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <xQueueReceive+0x30>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	623b      	str	r3, [r7, #32]
}
 800bd90:	bf00      	nop
 800bd92:	e7fe      	b.n	800bd92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d103      	bne.n	800bda2 <xQueueReceive+0x3e>
 800bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <xQueueReceive+0x42>
 800bda2:	2301      	movs	r3, #1
 800bda4:	e000      	b.n	800bda8 <xQueueReceive+0x44>
 800bda6:	2300      	movs	r3, #0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <xQueueReceive+0x5e>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	61fb      	str	r3, [r7, #28]
}
 800bdbe:	bf00      	nop
 800bdc0:	e7fe      	b.n	800bdc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdc2:	f001 f947 	bl	800d054 <xTaskGetSchedulerState>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d102      	bne.n	800bdd2 <xQueueReceive+0x6e>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <xQueueReceive+0x72>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e000      	b.n	800bdd8 <xQueueReceive+0x74>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <xQueueReceive+0x8e>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	61bb      	str	r3, [r7, #24]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdf2:	f001 ff4f 	bl	800dc94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01f      	beq.n	800be42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be02:	68b9      	ldr	r1, [r7, #8]
 800be04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be06:	f000 f8f7 	bl	800bff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	1e5a      	subs	r2, r3, #1
 800be0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00f      	beq.n	800be3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	3310      	adds	r3, #16
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 ff5c 	bl	800ccdc <xTaskRemoveFromEventList>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d007      	beq.n	800be3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be2a:	4b3d      	ldr	r3, [pc, #244]	; (800bf20 <xQueueReceive+0x1bc>)
 800be2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be3a:	f001 ff5b 	bl	800dcf4 <vPortExitCritical>
				return pdPASS;
 800be3e:	2301      	movs	r3, #1
 800be40:	e069      	b.n	800bf16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d103      	bne.n	800be50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be48:	f001 ff54 	bl	800dcf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be4c:	2300      	movs	r3, #0
 800be4e:	e062      	b.n	800bf16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be52:	2b00      	cmp	r3, #0
 800be54:	d106      	bne.n	800be64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be56:	f107 0310 	add.w	r3, r7, #16
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 ffa0 	bl	800cda0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be60:	2301      	movs	r3, #1
 800be62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be64:	f001 ff46 	bl	800dcf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be68:	f000 fd1a 	bl	800c8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be6c:	f001 ff12 	bl	800dc94 <vPortEnterCritical>
 800be70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be76:	b25b      	sxtb	r3, r3
 800be78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be7c:	d103      	bne.n	800be86 <xQueueReceive+0x122>
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be8c:	b25b      	sxtb	r3, r3
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be92:	d103      	bne.n	800be9c <xQueueReceive+0x138>
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be9c:	f001 ff2a 	bl	800dcf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bea0:	1d3a      	adds	r2, r7, #4
 800bea2:	f107 0310 	add.w	r3, r7, #16
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 ff8f 	bl	800cdcc <xTaskCheckForTimeOut>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d123      	bne.n	800befc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb6:	f000 f917 	bl	800c0e8 <prvIsQueueEmpty>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d017      	beq.n	800bef0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	3324      	adds	r3, #36	; 0x24
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	4611      	mov	r1, r2
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 feb7 	bl	800cc3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed0:	f000 f8b8 	bl	800c044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bed4:	f000 fcf2 	bl	800c8bc <xTaskResumeAll>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d189      	bne.n	800bdf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bede:	4b10      	ldr	r3, [pc, #64]	; (800bf20 <xQueueReceive+0x1bc>)
 800bee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	e780      	b.n	800bdf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef2:	f000 f8a7 	bl	800c044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bef6:	f000 fce1 	bl	800c8bc <xTaskResumeAll>
 800befa:	e77a      	b.n	800bdf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800befc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800befe:	f000 f8a1 	bl	800c044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf02:	f000 fcdb 	bl	800c8bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf08:	f000 f8ee 	bl	800c0e8 <prvIsQueueEmpty>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f43f af6f 	beq.w	800bdf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3730      	adds	r7, #48	; 0x30
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b086      	sub	sp, #24
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf30:	2300      	movs	r3, #0
 800bf32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10d      	bne.n	800bf5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d14d      	bne.n	800bfe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f001 f89e 	bl	800d090 <xTaskPriorityDisinherit>
 800bf54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	609a      	str	r2, [r3, #8]
 800bf5c:	e043      	b.n	800bfe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d119      	bne.n	800bf98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6858      	ldr	r0, [r3, #4]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	68b9      	ldr	r1, [r7, #8]
 800bf70:	f003 fbb8 	bl	800f6e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7c:	441a      	add	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	685a      	ldr	r2, [r3, #4]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d32b      	bcc.n	800bfe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	605a      	str	r2, [r3, #4]
 800bf96:	e026      	b.n	800bfe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	68d8      	ldr	r0, [r3, #12]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	68b9      	ldr	r1, [r7, #8]
 800bfa4:	f003 fb9e 	bl	800f6e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68da      	ldr	r2, [r3, #12]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb0:	425b      	negs	r3, r3
 800bfb2:	441a      	add	r2, r3
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68da      	ldr	r2, [r3, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d207      	bcs.n	800bfd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	689a      	ldr	r2, [r3, #8]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfcc:	425b      	negs	r3, r3
 800bfce:	441a      	add	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d105      	bne.n	800bfe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d002      	beq.n	800bfe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfee:	697b      	ldr	r3, [r7, #20]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c006:	2b00      	cmp	r3, #0
 800c008:	d018      	beq.n	800c03c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68da      	ldr	r2, [r3, #12]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c012:	441a      	add	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	68da      	ldr	r2, [r3, #12]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	429a      	cmp	r2, r3
 800c022:	d303      	bcc.n	800c02c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	68d9      	ldr	r1, [r3, #12]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c034:	461a      	mov	r2, r3
 800c036:	6838      	ldr	r0, [r7, #0]
 800c038:	f003 fb54 	bl	800f6e4 <memcpy>
	}
}
 800c03c:	bf00      	nop
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c04c:	f001 fe22 	bl	800dc94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c058:	e011      	b.n	800c07e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d012      	beq.n	800c088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3324      	adds	r3, #36	; 0x24
 800c066:	4618      	mov	r0, r3
 800c068:	f000 fe38 	bl	800ccdc <xTaskRemoveFromEventList>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d001      	beq.n	800c076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c072:	f000 ff0d 	bl	800ce90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c076:	7bfb      	ldrb	r3, [r7, #15]
 800c078:	3b01      	subs	r3, #1
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c07e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c082:	2b00      	cmp	r3, #0
 800c084:	dce9      	bgt.n	800c05a <prvUnlockQueue+0x16>
 800c086:	e000      	b.n	800c08a <prvUnlockQueue+0x46>
					break;
 800c088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	22ff      	movs	r2, #255	; 0xff
 800c08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c092:	f001 fe2f 	bl	800dcf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c096:	f001 fdfd 	bl	800dc94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0a2:	e011      	b.n	800c0c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d012      	beq.n	800c0d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3310      	adds	r3, #16
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 fe13 	bl	800ccdc <xTaskRemoveFromEventList>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0bc:	f000 fee8 	bl	800ce90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	dce9      	bgt.n	800c0a4 <prvUnlockQueue+0x60>
 800c0d0:	e000      	b.n	800c0d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	22ff      	movs	r2, #255	; 0xff
 800c0d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0dc:	f001 fe0a 	bl	800dcf4 <vPortExitCritical>
}
 800c0e0:	bf00      	nop
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0f0:	f001 fdd0 	bl	800dc94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d102      	bne.n	800c102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	60fb      	str	r3, [r7, #12]
 800c100:	e001      	b.n	800c106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c102:	2300      	movs	r3, #0
 800c104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c106:	f001 fdf5 	bl	800dcf4 <vPortExitCritical>

	return xReturn;
 800c10a:	68fb      	ldr	r3, [r7, #12]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c11c:	f001 fdba 	bl	800dc94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c128:	429a      	cmp	r2, r3
 800c12a:	d102      	bne.n	800c132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c12c:	2301      	movs	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	e001      	b.n	800c136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c132:	2300      	movs	r3, #0
 800c134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c136:	f001 fddd 	bl	800dcf4 <vPortExitCritical>

	return xReturn;
 800c13a:	68fb      	ldr	r3, [r7, #12]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c14e:	2300      	movs	r3, #0
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	e014      	b.n	800c17e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c154:	4a0f      	ldr	r2, [pc, #60]	; (800c194 <vQueueAddToRegistry+0x50>)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10b      	bne.n	800c178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c160:	490c      	ldr	r1, [pc, #48]	; (800c194 <vQueueAddToRegistry+0x50>)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c16a:	4a0a      	ldr	r2, [pc, #40]	; (800c194 <vQueueAddToRegistry+0x50>)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	4413      	add	r3, r2
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c176:	e006      	b.n	800c186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	3301      	adds	r3, #1
 800c17c:	60fb      	str	r3, [r7, #12]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b07      	cmp	r3, #7
 800c182:	d9e7      	bls.n	800c154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c184:	bf00      	nop
 800c186:	bf00      	nop
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	20000b8c 	.word	0x20000b8c

0800c198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c1a8:	f001 fd74 	bl	800dc94 <vPortEnterCritical>
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1b2:	b25b      	sxtb	r3, r3
 800c1b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b8:	d103      	bne.n	800c1c2 <vQueueWaitForMessageRestricted+0x2a>
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c8:	b25b      	sxtb	r3, r3
 800c1ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ce:	d103      	bne.n	800c1d8 <vQueueWaitForMessageRestricted+0x40>
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1d8:	f001 fd8c 	bl	800dcf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d106      	bne.n	800c1f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	3324      	adds	r3, #36	; 0x24
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	68b9      	ldr	r1, [r7, #8]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f000 fd49 	bl	800cc84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c1f2:	6978      	ldr	r0, [r7, #20]
 800c1f4:	f7ff ff26 	bl	800c044 <prvUnlockQueue>
	}
 800c1f8:	bf00      	nop
 800c1fa:	3718      	adds	r7, #24
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08e      	sub	sp, #56	; 0x38
 800c204:	af04      	add	r7, sp, #16
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	623b      	str	r3, [r7, #32]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10a      	bne.n	800c246 <xTaskCreateStatic+0x46>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	61fb      	str	r3, [r7, #28]
}
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c246:	2364      	movs	r3, #100	; 0x64
 800c248:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b64      	cmp	r3, #100	; 0x64
 800c24e:	d00a      	beq.n	800c266 <xTaskCreateStatic+0x66>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	61bb      	str	r3, [r7, #24]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c266:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d01e      	beq.n	800c2ac <xTaskCreateStatic+0xac>
 800c26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c270:	2b00      	cmp	r3, #0
 800c272:	d01b      	beq.n	800c2ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c27c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c280:	2202      	movs	r2, #2
 800c282:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c286:	2300      	movs	r3, #0
 800c288:	9303      	str	r3, [sp, #12]
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	9302      	str	r3, [sp, #8]
 800c28e:	f107 0314 	add.w	r3, r7, #20
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 f850 	bl	800c344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2a6:	f000 f8d5 	bl	800c454 <prvAddNewTaskToReadyList>
 800c2aa:	e001      	b.n	800c2b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2b0:	697b      	ldr	r3, [r7, #20]
	}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3728      	adds	r7, #40	; 0x28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b08c      	sub	sp, #48	; 0x30
 800c2be:	af04      	add	r7, sp, #16
 800c2c0:	60f8      	str	r0, [r7, #12]
 800c2c2:	60b9      	str	r1, [r7, #8]
 800c2c4:	603b      	str	r3, [r7, #0]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2ca:	88fb      	ldrh	r3, [r7, #6]
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f001 fe02 	bl	800ded8 <pvPortMalloc>
 800c2d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00e      	beq.n	800c2fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2dc:	2064      	movs	r0, #100	; 0x64
 800c2de:	f001 fdfb 	bl	800ded8 <pvPortMalloc>
 800c2e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d003      	beq.n	800c2f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	631a      	str	r2, [r3, #48]	; 0x30
 800c2f0:	e005      	b.n	800c2fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2f2:	6978      	ldr	r0, [r7, #20]
 800c2f4:	f001 fe02 	bl	800defc <vPortFree>
 800c2f8:	e001      	b.n	800c2fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d017      	beq.n	800c334 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c30c:	88fa      	ldrh	r2, [r7, #6]
 800c30e:	2300      	movs	r3, #0
 800c310:	9303      	str	r3, [sp, #12]
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	9302      	str	r3, [sp, #8]
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	9301      	str	r3, [sp, #4]
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	68b9      	ldr	r1, [r7, #8]
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f000 f80e 	bl	800c344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c328:	69f8      	ldr	r0, [r7, #28]
 800c32a:	f000 f893 	bl	800c454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c32e:	2301      	movs	r3, #1
 800c330:	61bb      	str	r3, [r7, #24]
 800c332:	e002      	b.n	800c33a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c338:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c33a:	69bb      	ldr	r3, [r7, #24]
	}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3720      	adds	r7, #32
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b088      	sub	sp, #32
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c35c:	3b01      	subs	r3, #1
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	f023 0307 	bic.w	r3, r3, #7
 800c36a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00a      	beq.n	800c38c <prvInitialiseNewTask+0x48>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	617b      	str	r3, [r7, #20]
}
 800c388:	bf00      	nop
 800c38a:	e7fe      	b.n	800c38a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d01f      	beq.n	800c3d2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c392:	2300      	movs	r3, #0
 800c394:	61fb      	str	r3, [r7, #28]
 800c396:	e012      	b.n	800c3be <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	4413      	add	r3, r2
 800c39e:	7819      	ldrb	r1, [r3, #0]
 800c3a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	3334      	adds	r3, #52	; 0x34
 800c3a8:	460a      	mov	r2, r1
 800c3aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d006      	beq.n	800c3c6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	61fb      	str	r3, [r7, #28]
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	2b1f      	cmp	r3, #31
 800c3c2:	d9e9      	bls.n	800c398 <prvInitialiseNewTask+0x54>
 800c3c4:	e000      	b.n	800c3c8 <prvInitialiseNewTask+0x84>
			{
				break;
 800c3c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c3d0:	e003      	b.n	800c3da <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	2b06      	cmp	r3, #6
 800c3de:	d901      	bls.n	800c3e4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3e0:	2306      	movs	r3, #6
 800c3e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3ee:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff f983 	bl	800b706 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c402:	3318      	adds	r3, #24
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff f97e 	bl	800b706 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c40e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	f1c3 0207 	rsb	r2, r3, #7
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c41e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	2200      	movs	r2, #0
 800c424:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c42e:	683a      	ldr	r2, [r7, #0]
 800c430:	68f9      	ldr	r1, [r7, #12]
 800c432:	69b8      	ldr	r0, [r7, #24]
 800c434:	f001 fb02 	bl	800da3c <pxPortInitialiseStack>
 800c438:	4602      	mov	r2, r0
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c44a:	bf00      	nop
 800c44c:	3720      	adds	r7, #32
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c45c:	f001 fc1a 	bl	800dc94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c460:	4b2a      	ldr	r3, [pc, #168]	; (800c50c <prvAddNewTaskToReadyList+0xb8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3301      	adds	r3, #1
 800c466:	4a29      	ldr	r2, [pc, #164]	; (800c50c <prvAddNewTaskToReadyList+0xb8>)
 800c468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c46a:	4b29      	ldr	r3, [pc, #164]	; (800c510 <prvAddNewTaskToReadyList+0xbc>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d109      	bne.n	800c486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c472:	4a27      	ldr	r2, [pc, #156]	; (800c510 <prvAddNewTaskToReadyList+0xbc>)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c478:	4b24      	ldr	r3, [pc, #144]	; (800c50c <prvAddNewTaskToReadyList+0xb8>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d110      	bne.n	800c4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c480:	f000 fd2a 	bl	800ced8 <prvInitialiseTaskLists>
 800c484:	e00d      	b.n	800c4a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c486:	4b23      	ldr	r3, [pc, #140]	; (800c514 <prvAddNewTaskToReadyList+0xc0>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d109      	bne.n	800c4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c48e:	4b20      	ldr	r3, [pc, #128]	; (800c510 <prvAddNewTaskToReadyList+0xbc>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	429a      	cmp	r2, r3
 800c49a:	d802      	bhi.n	800c4a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c49c:	4a1c      	ldr	r2, [pc, #112]	; (800c510 <prvAddNewTaskToReadyList+0xbc>)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4a2:	4b1d      	ldr	r3, [pc, #116]	; (800c518 <prvAddNewTaskToReadyList+0xc4>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	4a1b      	ldr	r2, [pc, #108]	; (800c518 <prvAddNewTaskToReadyList+0xc4>)
 800c4aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	409a      	lsls	r2, r3
 800c4b4:	4b19      	ldr	r3, [pc, #100]	; (800c51c <prvAddNewTaskToReadyList+0xc8>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	4a18      	ldr	r2, [pc, #96]	; (800c51c <prvAddNewTaskToReadyList+0xc8>)
 800c4bc:	6013      	str	r3, [r2, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4a15      	ldr	r2, [pc, #84]	; (800c520 <prvAddNewTaskToReadyList+0xcc>)
 800c4cc:	441a      	add	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	f7ff f923 	bl	800b720 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4da:	f001 fc0b 	bl	800dcf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4de:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <prvAddNewTaskToReadyList+0xc0>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00e      	beq.n	800c504 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4e6:	4b0a      	ldr	r3, [pc, #40]	; (800c510 <prvAddNewTaskToReadyList+0xbc>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d207      	bcs.n	800c504 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4f4:	4b0b      	ldr	r3, [pc, #44]	; (800c524 <prvAddNewTaskToReadyList+0xd0>)
 800c4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4fa:	601a      	str	r2, [r3, #0]
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c504:	bf00      	nop
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	20000ccc 	.word	0x20000ccc
 800c510:	20000bcc 	.word	0x20000bcc
 800c514:	20000cd8 	.word	0x20000cd8
 800c518:	20000ce8 	.word	0x20000ce8
 800c51c:	20000cd4 	.word	0x20000cd4
 800c520:	20000bd0 	.word	0x20000bd0
 800c524:	e000ed04 	.word	0xe000ed04

0800c528 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c530:	f001 fbb0 	bl	800dc94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d102      	bne.n	800c540 <vTaskDelete+0x18>
 800c53a:	4b39      	ldr	r3, [pc, #228]	; (800c620 <vTaskDelete+0xf8>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	e000      	b.n	800c542 <vTaskDelete+0x1a>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	3304      	adds	r3, #4
 800c548:	4618      	mov	r0, r3
 800c54a:	f7ff f946 	bl	800b7da <uxListRemove>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d115      	bne.n	800c580 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c558:	4932      	ldr	r1, [pc, #200]	; (800c624 <vTaskDelete+0xfc>)
 800c55a:	4613      	mov	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	440b      	add	r3, r1
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10a      	bne.n	800c580 <vTaskDelete+0x58>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56e:	2201      	movs	r2, #1
 800c570:	fa02 f303 	lsl.w	r3, r2, r3
 800c574:	43da      	mvns	r2, r3
 800c576:	4b2c      	ldr	r3, [pc, #176]	; (800c628 <vTaskDelete+0x100>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4013      	ands	r3, r2
 800c57c:	4a2a      	ldr	r2, [pc, #168]	; (800c628 <vTaskDelete+0x100>)
 800c57e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c584:	2b00      	cmp	r3, #0
 800c586:	d004      	beq.n	800c592 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3318      	adds	r3, #24
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff f924 	bl	800b7da <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c592:	4b26      	ldr	r3, [pc, #152]	; (800c62c <vTaskDelete+0x104>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3301      	adds	r3, #1
 800c598:	4a24      	ldr	r2, [pc, #144]	; (800c62c <vTaskDelete+0x104>)
 800c59a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c59c:	4b20      	ldr	r3, [pc, #128]	; (800c620 <vTaskDelete+0xf8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d10b      	bne.n	800c5be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4820      	ldr	r0, [pc, #128]	; (800c630 <vTaskDelete+0x108>)
 800c5ae:	f7ff f8b7 	bl	800b720 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c5b2:	4b20      	ldr	r3, [pc, #128]	; (800c634 <vTaskDelete+0x10c>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	4a1e      	ldr	r2, [pc, #120]	; (800c634 <vTaskDelete+0x10c>)
 800c5ba:	6013      	str	r3, [r2, #0]
 800c5bc:	e009      	b.n	800c5d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c5be:	4b1e      	ldr	r3, [pc, #120]	; (800c638 <vTaskDelete+0x110>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	4a1c      	ldr	r2, [pc, #112]	; (800c638 <vTaskDelete+0x110>)
 800c5c6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f000 fcf3 	bl	800cfb4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c5ce:	f000 fd21 	bl	800d014 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c5d2:	f001 fb8f 	bl	800dcf4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c5d6:	4b19      	ldr	r3, [pc, #100]	; (800c63c <vTaskDelete+0x114>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d01b      	beq.n	800c616 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800c5de:	4b10      	ldr	r3, [pc, #64]	; (800c620 <vTaskDelete+0xf8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d116      	bne.n	800c616 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c5e8:	4b15      	ldr	r3, [pc, #84]	; (800c640 <vTaskDelete+0x118>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00a      	beq.n	800c606 <vTaskDelete+0xde>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	60bb      	str	r3, [r7, #8]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800c606:	4b0f      	ldr	r3, [pc, #60]	; (800c644 <vTaskDelete+0x11c>)
 800c608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c616:	bf00      	nop
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	20000bcc 	.word	0x20000bcc
 800c624:	20000bd0 	.word	0x20000bd0
 800c628:	20000cd4 	.word	0x20000cd4
 800c62c:	20000ce8 	.word	0x20000ce8
 800c630:	20000ca0 	.word	0x20000ca0
 800c634:	20000cb4 	.word	0x20000cb4
 800c638:	20000ccc 	.word	0x20000ccc
 800c63c:	20000cd8 	.word	0x20000cd8
 800c640:	20000cf4 	.word	0x20000cf4
 800c644:	e000ed04 	.word	0xe000ed04

0800c648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c650:	2300      	movs	r3, #0
 800c652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d017      	beq.n	800c68a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c65a:	4b13      	ldr	r3, [pc, #76]	; (800c6a8 <vTaskDelay+0x60>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00a      	beq.n	800c678 <vTaskDelay+0x30>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	60bb      	str	r3, [r7, #8]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c678:	f000 f912 	bl	800c8a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c67c:	2100      	movs	r1, #0
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fd8c 	bl	800d19c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c684:	f000 f91a 	bl	800c8bc <xTaskResumeAll>
 800c688:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d107      	bne.n	800c6a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c690:	4b06      	ldr	r3, [pc, #24]	; (800c6ac <vTaskDelay+0x64>)
 800c692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6a0:	bf00      	nop
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	20000cf4 	.word	0x20000cf4
 800c6ac:	e000ed04 	.word	0xe000ed04

0800c6b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c6b8:	f001 faec 	bl	800dc94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d102      	bne.n	800c6c8 <vTaskSuspend+0x18>
 800c6c2:	4b3c      	ldr	r3, [pc, #240]	; (800c7b4 <vTaskSuspend+0x104>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	e000      	b.n	800c6ca <vTaskSuspend+0x1a>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff f882 	bl	800b7da <uxListRemove>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d115      	bne.n	800c708 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e0:	4935      	ldr	r1, [pc, #212]	; (800c7b8 <vTaskSuspend+0x108>)
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	440b      	add	r3, r1
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10a      	bne.n	800c708 <vTaskSuspend+0x58>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fc:	43da      	mvns	r2, r3
 800c6fe:	4b2f      	ldr	r3, [pc, #188]	; (800c7bc <vTaskSuspend+0x10c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4013      	ands	r3, r2
 800c704:	4a2d      	ldr	r2, [pc, #180]	; (800c7bc <vTaskSuspend+0x10c>)
 800c706:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d004      	beq.n	800c71a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	3318      	adds	r3, #24
 800c714:	4618      	mov	r0, r3
 800c716:	f7ff f860 	bl	800b7da <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	3304      	adds	r3, #4
 800c71e:	4619      	mov	r1, r3
 800c720:	4827      	ldr	r0, [pc, #156]	; (800c7c0 <vTaskSuspend+0x110>)
 800c722:	f7fe fffd 	bl	800b720 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d103      	bne.n	800c73a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2200      	movs	r2, #0
 800c736:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c73a:	f001 fadb 	bl	800dcf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c73e:	4b21      	ldr	r3, [pc, #132]	; (800c7c4 <vTaskSuspend+0x114>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d005      	beq.n	800c752 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c746:	f001 faa5 	bl	800dc94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c74a:	f000 fc63 	bl	800d014 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c74e:	f001 fad1 	bl	800dcf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c752:	4b18      	ldr	r3, [pc, #96]	; (800c7b4 <vTaskSuspend+0x104>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d127      	bne.n	800c7ac <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800c75c:	4b19      	ldr	r3, [pc, #100]	; (800c7c4 <vTaskSuspend+0x114>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d017      	beq.n	800c794 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c764:	4b18      	ldr	r3, [pc, #96]	; (800c7c8 <vTaskSuspend+0x118>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00a      	beq.n	800c782 <vTaskSuspend+0xd2>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	60bb      	str	r3, [r7, #8]
}
 800c77e:	bf00      	nop
 800c780:	e7fe      	b.n	800c780 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800c782:	4b12      	ldr	r3, [pc, #72]	; (800c7cc <vTaskSuspend+0x11c>)
 800c784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c788:	601a      	str	r2, [r3, #0]
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c792:	e00b      	b.n	800c7ac <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c794:	4b0a      	ldr	r3, [pc, #40]	; (800c7c0 <vTaskSuspend+0x110>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <vTaskSuspend+0x120>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d103      	bne.n	800c7a8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800c7a0:	4b04      	ldr	r3, [pc, #16]	; (800c7b4 <vTaskSuspend+0x104>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]
	}
 800c7a6:	e001      	b.n	800c7ac <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800c7a8:	f000 f9ec 	bl	800cb84 <vTaskSwitchContext>
	}
 800c7ac:	bf00      	nop
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	20000bcc 	.word	0x20000bcc
 800c7b8:	20000bd0 	.word	0x20000bd0
 800c7bc:	20000cd4 	.word	0x20000cd4
 800c7c0:	20000cb8 	.word	0x20000cb8
 800c7c4:	20000cd8 	.word	0x20000cd8
 800c7c8:	20000cf4 	.word	0x20000cf4
 800c7cc:	e000ed04 	.word	0xe000ed04
 800c7d0:	20000ccc 	.word	0x20000ccc

0800c7d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08a      	sub	sp, #40	; 0x28
 800c7d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c7e2:	463a      	mov	r2, r7
 800c7e4:	1d39      	adds	r1, r7, #4
 800c7e6:	f107 0308 	add.w	r3, r7, #8
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7f4 fe66 	bl	80014bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	9202      	str	r2, [sp, #8]
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	2300      	movs	r3, #0
 800c800:	460a      	mov	r2, r1
 800c802:	4921      	ldr	r1, [pc, #132]	; (800c888 <vTaskStartScheduler+0xb4>)
 800c804:	4821      	ldr	r0, [pc, #132]	; (800c88c <vTaskStartScheduler+0xb8>)
 800c806:	f7ff fcfb 	bl	800c200 <xTaskCreateStatic>
 800c80a:	4603      	mov	r3, r0
 800c80c:	4a20      	ldr	r2, [pc, #128]	; (800c890 <vTaskStartScheduler+0xbc>)
 800c80e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c810:	4b1f      	ldr	r3, [pc, #124]	; (800c890 <vTaskStartScheduler+0xbc>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e001      	b.n	800c822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c81e:	2300      	movs	r3, #0
 800c820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d102      	bne.n	800c82e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c828:	f000 fd1e 	bl	800d268 <xTimerCreateTimerTask>
 800c82c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d116      	bne.n	800c862 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	613b      	str	r3, [r7, #16]
}
 800c846:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c848:	4b12      	ldr	r3, [pc, #72]	; (800c894 <vTaskStartScheduler+0xc0>)
 800c84a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c84e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c850:	4b11      	ldr	r3, [pc, #68]	; (800c898 <vTaskStartScheduler+0xc4>)
 800c852:	2201      	movs	r2, #1
 800c854:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c856:	4b11      	ldr	r3, [pc, #68]	; (800c89c <vTaskStartScheduler+0xc8>)
 800c858:	2200      	movs	r2, #0
 800c85a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c85c:	f001 f978 	bl	800db50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c860:	e00e      	b.n	800c880 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c868:	d10a      	bne.n	800c880 <vTaskStartScheduler+0xac>
	__asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	60fb      	str	r3, [r7, #12]
}
 800c87c:	bf00      	nop
 800c87e:	e7fe      	b.n	800c87e <vTaskStartScheduler+0xaa>
}
 800c880:	bf00      	nop
 800c882:	3718      	adds	r7, #24
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	08011814 	.word	0x08011814
 800c88c:	0800cea9 	.word	0x0800cea9
 800c890:	20000cf0 	.word	0x20000cf0
 800c894:	20000cec 	.word	0x20000cec
 800c898:	20000cd8 	.word	0x20000cd8
 800c89c:	20000cd0 	.word	0x20000cd0

0800c8a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c8a4:	4b04      	ldr	r3, [pc, #16]	; (800c8b8 <vTaskSuspendAll+0x18>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	4a03      	ldr	r2, [pc, #12]	; (800c8b8 <vTaskSuspendAll+0x18>)
 800c8ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c8ae:	bf00      	nop
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	20000cf4 	.word	0x20000cf4

0800c8bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c8ca:	4b41      	ldr	r3, [pc, #260]	; (800c9d0 <xTaskResumeAll+0x114>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10a      	bne.n	800c8e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d6:	f383 8811 	msr	BASEPRI, r3
 800c8da:	f3bf 8f6f 	isb	sy
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	603b      	str	r3, [r7, #0]
}
 800c8e4:	bf00      	nop
 800c8e6:	e7fe      	b.n	800c8e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8e8:	f001 f9d4 	bl	800dc94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c8ec:	4b38      	ldr	r3, [pc, #224]	; (800c9d0 <xTaskResumeAll+0x114>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	4a37      	ldr	r2, [pc, #220]	; (800c9d0 <xTaskResumeAll+0x114>)
 800c8f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8f6:	4b36      	ldr	r3, [pc, #216]	; (800c9d0 <xTaskResumeAll+0x114>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d161      	bne.n	800c9c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c8fe:	4b35      	ldr	r3, [pc, #212]	; (800c9d4 <xTaskResumeAll+0x118>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d05d      	beq.n	800c9c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c906:	e02e      	b.n	800c966 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c908:	4b33      	ldr	r3, [pc, #204]	; (800c9d8 <xTaskResumeAll+0x11c>)
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3318      	adds	r3, #24
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe ff60 	bl	800b7da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3304      	adds	r3, #4
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe ff5b 	bl	800b7da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c928:	2201      	movs	r2, #1
 800c92a:	409a      	lsls	r2, r3
 800c92c:	4b2b      	ldr	r3, [pc, #172]	; (800c9dc <xTaskResumeAll+0x120>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4313      	orrs	r3, r2
 800c932:	4a2a      	ldr	r2, [pc, #168]	; (800c9dc <xTaskResumeAll+0x120>)
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93a:	4613      	mov	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4a27      	ldr	r2, [pc, #156]	; (800c9e0 <xTaskResumeAll+0x124>)
 800c944:	441a      	add	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3304      	adds	r3, #4
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f7fe fee7 	bl	800b720 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c956:	4b23      	ldr	r3, [pc, #140]	; (800c9e4 <xTaskResumeAll+0x128>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d302      	bcc.n	800c966 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c960:	4b21      	ldr	r3, [pc, #132]	; (800c9e8 <xTaskResumeAll+0x12c>)
 800c962:	2201      	movs	r2, #1
 800c964:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c966:	4b1c      	ldr	r3, [pc, #112]	; (800c9d8 <xTaskResumeAll+0x11c>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1cc      	bne.n	800c908 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c974:	f000 fb4e 	bl	800d014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c978:	4b1c      	ldr	r3, [pc, #112]	; (800c9ec <xTaskResumeAll+0x130>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d010      	beq.n	800c9a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c984:	f000 f846 	bl	800ca14 <xTaskIncrementTick>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d002      	beq.n	800c994 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c98e:	4b16      	ldr	r3, [pc, #88]	; (800c9e8 <xTaskResumeAll+0x12c>)
 800c990:	2201      	movs	r2, #1
 800c992:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	3b01      	subs	r3, #1
 800c998:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1f1      	bne.n	800c984 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c9a0:	4b12      	ldr	r3, [pc, #72]	; (800c9ec <xTaskResumeAll+0x130>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c9a6:	4b10      	ldr	r3, [pc, #64]	; (800c9e8 <xTaskResumeAll+0x12c>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d009      	beq.n	800c9c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c9b2:	4b0f      	ldr	r3, [pc, #60]	; (800c9f0 <xTaskResumeAll+0x134>)
 800c9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9c2:	f001 f997 	bl	800dcf4 <vPortExitCritical>

	return xAlreadyYielded;
 800c9c6:	68bb      	ldr	r3, [r7, #8]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	20000cf4 	.word	0x20000cf4
 800c9d4:	20000ccc 	.word	0x20000ccc
 800c9d8:	20000c8c 	.word	0x20000c8c
 800c9dc:	20000cd4 	.word	0x20000cd4
 800c9e0:	20000bd0 	.word	0x20000bd0
 800c9e4:	20000bcc 	.word	0x20000bcc
 800c9e8:	20000ce0 	.word	0x20000ce0
 800c9ec:	20000cdc 	.word	0x20000cdc
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c9fa:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <xTaskGetTickCount+0x1c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca00:	687b      	ldr	r3, [r7, #4]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	370c      	adds	r7, #12
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	20000cd0 	.word	0x20000cd0

0800ca14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca1e:	4b4e      	ldr	r3, [pc, #312]	; (800cb58 <xTaskIncrementTick+0x144>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f040 808e 	bne.w	800cb44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca28:	4b4c      	ldr	r3, [pc, #304]	; (800cb5c <xTaskIncrementTick+0x148>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca30:	4a4a      	ldr	r2, [pc, #296]	; (800cb5c <xTaskIncrementTick+0x148>)
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d120      	bne.n	800ca7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca3c:	4b48      	ldr	r3, [pc, #288]	; (800cb60 <xTaskIncrementTick+0x14c>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00a      	beq.n	800ca5c <xTaskIncrementTick+0x48>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	603b      	str	r3, [r7, #0]
}
 800ca58:	bf00      	nop
 800ca5a:	e7fe      	b.n	800ca5a <xTaskIncrementTick+0x46>
 800ca5c:	4b40      	ldr	r3, [pc, #256]	; (800cb60 <xTaskIncrementTick+0x14c>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60fb      	str	r3, [r7, #12]
 800ca62:	4b40      	ldr	r3, [pc, #256]	; (800cb64 <xTaskIncrementTick+0x150>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a3e      	ldr	r2, [pc, #248]	; (800cb60 <xTaskIncrementTick+0x14c>)
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	4a3e      	ldr	r2, [pc, #248]	; (800cb64 <xTaskIncrementTick+0x150>)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6013      	str	r3, [r2, #0]
 800ca70:	4b3d      	ldr	r3, [pc, #244]	; (800cb68 <xTaskIncrementTick+0x154>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3301      	adds	r3, #1
 800ca76:	4a3c      	ldr	r2, [pc, #240]	; (800cb68 <xTaskIncrementTick+0x154>)
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	f000 facb 	bl	800d014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca7e:	4b3b      	ldr	r3, [pc, #236]	; (800cb6c <xTaskIncrementTick+0x158>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d348      	bcc.n	800cb1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca88:	4b35      	ldr	r3, [pc, #212]	; (800cb60 <xTaskIncrementTick+0x14c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d104      	bne.n	800ca9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca92:	4b36      	ldr	r3, [pc, #216]	; (800cb6c <xTaskIncrementTick+0x158>)
 800ca94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca98:	601a      	str	r2, [r3, #0]
					break;
 800ca9a:	e03e      	b.n	800cb1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca9c:	4b30      	ldr	r3, [pc, #192]	; (800cb60 <xTaskIncrementTick+0x14c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800caac:	693a      	ldr	r2, [r7, #16]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d203      	bcs.n	800cabc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cab4:	4a2d      	ldr	r2, [pc, #180]	; (800cb6c <xTaskIncrementTick+0x158>)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800caba:	e02e      	b.n	800cb1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fe fe8a 	bl	800b7da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d004      	beq.n	800cad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	3318      	adds	r3, #24
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fe fe81 	bl	800b7da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cadc:	2201      	movs	r2, #1
 800cade:	409a      	lsls	r2, r3
 800cae0:	4b23      	ldr	r3, [pc, #140]	; (800cb70 <xTaskIncrementTick+0x15c>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	4a22      	ldr	r2, [pc, #136]	; (800cb70 <xTaskIncrementTick+0x15c>)
 800cae8:	6013      	str	r3, [r2, #0]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caee:	4613      	mov	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4413      	add	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4a1f      	ldr	r2, [pc, #124]	; (800cb74 <xTaskIncrementTick+0x160>)
 800caf8:	441a      	add	r2, r3
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	3304      	adds	r3, #4
 800cafe:	4619      	mov	r1, r3
 800cb00:	4610      	mov	r0, r2
 800cb02:	f7fe fe0d 	bl	800b720 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb0a:	4b1b      	ldr	r3, [pc, #108]	; (800cb78 <xTaskIncrementTick+0x164>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d3b9      	bcc.n	800ca88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cb14:	2301      	movs	r3, #1
 800cb16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb18:	e7b6      	b.n	800ca88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb1a:	4b17      	ldr	r3, [pc, #92]	; (800cb78 <xTaskIncrementTick+0x164>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb20:	4914      	ldr	r1, [pc, #80]	; (800cb74 <xTaskIncrementTick+0x160>)
 800cb22:	4613      	mov	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	440b      	add	r3, r1
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d901      	bls.n	800cb36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cb32:	2301      	movs	r3, #1
 800cb34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cb36:	4b11      	ldr	r3, [pc, #68]	; (800cb7c <xTaskIncrementTick+0x168>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d007      	beq.n	800cb4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	617b      	str	r3, [r7, #20]
 800cb42:	e004      	b.n	800cb4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb44:	4b0e      	ldr	r3, [pc, #56]	; (800cb80 <xTaskIncrementTick+0x16c>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	4a0d      	ldr	r2, [pc, #52]	; (800cb80 <xTaskIncrementTick+0x16c>)
 800cb4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cb4e:	697b      	ldr	r3, [r7, #20]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	20000cf4 	.word	0x20000cf4
 800cb5c:	20000cd0 	.word	0x20000cd0
 800cb60:	20000c84 	.word	0x20000c84
 800cb64:	20000c88 	.word	0x20000c88
 800cb68:	20000ce4 	.word	0x20000ce4
 800cb6c:	20000cec 	.word	0x20000cec
 800cb70:	20000cd4 	.word	0x20000cd4
 800cb74:	20000bd0 	.word	0x20000bd0
 800cb78:	20000bcc 	.word	0x20000bcc
 800cb7c:	20000ce0 	.word	0x20000ce0
 800cb80:	20000cdc 	.word	0x20000cdc

0800cb84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb8a:	4b27      	ldr	r3, [pc, #156]	; (800cc28 <vTaskSwitchContext+0xa4>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb92:	4b26      	ldr	r3, [pc, #152]	; (800cc2c <vTaskSwitchContext+0xa8>)
 800cb94:	2201      	movs	r2, #1
 800cb96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb98:	e03f      	b.n	800cc1a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cb9a:	4b24      	ldr	r3, [pc, #144]	; (800cc2c <vTaskSwitchContext+0xa8>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cba0:	4b23      	ldr	r3, [pc, #140]	; (800cc30 <vTaskSwitchContext+0xac>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	fab3 f383 	clz	r3, r3
 800cbac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cbae:	7afb      	ldrb	r3, [r7, #11]
 800cbb0:	f1c3 031f 	rsb	r3, r3, #31
 800cbb4:	617b      	str	r3, [r7, #20]
 800cbb6:	491f      	ldr	r1, [pc, #124]	; (800cc34 <vTaskSwitchContext+0xb0>)
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	440b      	add	r3, r1
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	607b      	str	r3, [r7, #4]
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <vTaskSwitchContext+0x5a>
 800cbe0:	697a      	ldr	r2, [r7, #20]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4a12      	ldr	r2, [pc, #72]	; (800cc34 <vTaskSwitchContext+0xb0>)
 800cbec:	4413      	add	r3, r2
 800cbee:	613b      	str	r3, [r7, #16]
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	685a      	ldr	r2, [r3, #4]
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	605a      	str	r2, [r3, #4]
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3308      	adds	r3, #8
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d104      	bne.n	800cc10 <vTaskSwitchContext+0x8c>
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	685a      	ldr	r2, [r3, #4]
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	605a      	str	r2, [r3, #4]
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	4a08      	ldr	r2, [pc, #32]	; (800cc38 <vTaskSwitchContext+0xb4>)
 800cc18:	6013      	str	r3, [r2, #0]
}
 800cc1a:	bf00      	nop
 800cc1c:	371c      	adds	r7, #28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	20000cf4 	.word	0x20000cf4
 800cc2c:	20000ce0 	.word	0x20000ce0
 800cc30:	20000cd4 	.word	0x20000cd4
 800cc34:	20000bd0 	.word	0x20000bd0
 800cc38:	20000bcc 	.word	0x20000bcc

0800cc3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	60fb      	str	r3, [r7, #12]
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc62:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <vTaskPlaceOnEventList+0x44>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	3318      	adds	r3, #24
 800cc68:	4619      	mov	r1, r3
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7fe fd7c 	bl	800b768 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc70:	2101      	movs	r1, #1
 800cc72:	6838      	ldr	r0, [r7, #0]
 800cc74:	f000 fa92 	bl	800d19c <prvAddCurrentTaskToDelayedList>
}
 800cc78:	bf00      	nop
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20000bcc 	.word	0x20000bcc

0800cc84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10a      	bne.n	800ccac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	617b      	str	r3, [r7, #20]
}
 800cca8:	bf00      	nop
 800ccaa:	e7fe      	b.n	800ccaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccac:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3318      	adds	r3, #24
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f7fe fd33 	bl	800b720 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ccc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	68b8      	ldr	r0, [r7, #8]
 800ccca:	f000 fa67 	bl	800d19c <prvAddCurrentTaskToDelayedList>
	}
 800ccce:	bf00      	nop
 800ccd0:	3718      	adds	r7, #24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20000bcc 	.word	0x20000bcc

0800ccdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	60fb      	str	r3, [r7, #12]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	3318      	adds	r3, #24
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe fd64 	bl	800b7da <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd12:	4b1d      	ldr	r3, [pc, #116]	; (800cd88 <xTaskRemoveFromEventList+0xac>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d11c      	bne.n	800cd54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	3304      	adds	r3, #4
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fe fd5b 	bl	800b7da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	2201      	movs	r2, #1
 800cd2a:	409a      	lsls	r2, r3
 800cd2c:	4b17      	ldr	r3, [pc, #92]	; (800cd8c <xTaskRemoveFromEventList+0xb0>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	4a16      	ldr	r2, [pc, #88]	; (800cd8c <xTaskRemoveFromEventList+0xb0>)
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4a13      	ldr	r2, [pc, #76]	; (800cd90 <xTaskRemoveFromEventList+0xb4>)
 800cd44:	441a      	add	r2, r3
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	f7fe fce7 	bl	800b720 <vListInsertEnd>
 800cd52:	e005      	b.n	800cd60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	3318      	adds	r3, #24
 800cd58:	4619      	mov	r1, r3
 800cd5a:	480e      	ldr	r0, [pc, #56]	; (800cd94 <xTaskRemoveFromEventList+0xb8>)
 800cd5c:	f7fe fce0 	bl	800b720 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd64:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <xTaskRemoveFromEventList+0xbc>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d905      	bls.n	800cd7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd72:	4b0a      	ldr	r3, [pc, #40]	; (800cd9c <xTaskRemoveFromEventList+0xc0>)
 800cd74:	2201      	movs	r2, #1
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	e001      	b.n	800cd7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd7e:	697b      	ldr	r3, [r7, #20]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	20000cf4 	.word	0x20000cf4
 800cd8c:	20000cd4 	.word	0x20000cd4
 800cd90:	20000bd0 	.word	0x20000bd0
 800cd94:	20000c8c 	.word	0x20000c8c
 800cd98:	20000bcc 	.word	0x20000bcc
 800cd9c:	20000ce0 	.word	0x20000ce0

0800cda0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cda8:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <vTaskInternalSetTimeOutState+0x24>)
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cdb0:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <vTaskInternalSetTimeOutState+0x28>)
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	605a      	str	r2, [r3, #4]
}
 800cdb8:	bf00      	nop
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr
 800cdc4:	20000ce4 	.word	0x20000ce4
 800cdc8:	20000cd0 	.word	0x20000cd0

0800cdcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10a      	bne.n	800cdf2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	613b      	str	r3, [r7, #16]
}
 800cdee:	bf00      	nop
 800cdf0:	e7fe      	b.n	800cdf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10a      	bne.n	800ce0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	60fb      	str	r3, [r7, #12]
}
 800ce0a:	bf00      	nop
 800ce0c:	e7fe      	b.n	800ce0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ce0e:	f000 ff41 	bl	800dc94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce12:	4b1d      	ldr	r3, [pc, #116]	; (800ce88 <xTaskCheckForTimeOut+0xbc>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	69ba      	ldr	r2, [r7, #24]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce2a:	d102      	bne.n	800ce32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	61fb      	str	r3, [r7, #28]
 800ce30:	e023      	b.n	800ce7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	4b15      	ldr	r3, [pc, #84]	; (800ce8c <xTaskCheckForTimeOut+0xc0>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d007      	beq.n	800ce4e <xTaskCheckForTimeOut+0x82>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d302      	bcc.n	800ce4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	61fb      	str	r3, [r7, #28]
 800ce4c:	e015      	b.n	800ce7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d20b      	bcs.n	800ce70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	1ad2      	subs	r2, r2, r3
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff ff9b 	bl	800cda0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	61fb      	str	r3, [r7, #28]
 800ce6e:	e004      	b.n	800ce7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce76:	2301      	movs	r3, #1
 800ce78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce7a:	f000 ff3b 	bl	800dcf4 <vPortExitCritical>

	return xReturn;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3720      	adds	r7, #32
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20000cd0 	.word	0x20000cd0
 800ce8c:	20000ce4 	.word	0x20000ce4

0800ce90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce90:	b480      	push	{r7}
 800ce92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce94:	4b03      	ldr	r3, [pc, #12]	; (800cea4 <vTaskMissedYield+0x14>)
 800ce96:	2201      	movs	r2, #1
 800ce98:	601a      	str	r2, [r3, #0]
}
 800ce9a:	bf00      	nop
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	20000ce0 	.word	0x20000ce0

0800cea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ceb0:	f000 f852 	bl	800cf58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ceb4:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <prvIdleTask+0x28>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d9f9      	bls.n	800ceb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cebc:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <prvIdleTask+0x2c>)
 800cebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cecc:	e7f0      	b.n	800ceb0 <prvIdleTask+0x8>
 800cece:	bf00      	nop
 800ced0:	20000bd0 	.word	0x20000bd0
 800ced4:	e000ed04 	.word	0xe000ed04

0800ced8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cede:	2300      	movs	r3, #0
 800cee0:	607b      	str	r3, [r7, #4]
 800cee2:	e00c      	b.n	800cefe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4a12      	ldr	r2, [pc, #72]	; (800cf38 <prvInitialiseTaskLists+0x60>)
 800cef0:	4413      	add	r3, r2
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe fbe7 	bl	800b6c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	3301      	adds	r3, #1
 800cefc:	607b      	str	r3, [r7, #4]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b06      	cmp	r3, #6
 800cf02:	d9ef      	bls.n	800cee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf04:	480d      	ldr	r0, [pc, #52]	; (800cf3c <prvInitialiseTaskLists+0x64>)
 800cf06:	f7fe fbde 	bl	800b6c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf0a:	480d      	ldr	r0, [pc, #52]	; (800cf40 <prvInitialiseTaskLists+0x68>)
 800cf0c:	f7fe fbdb 	bl	800b6c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf10:	480c      	ldr	r0, [pc, #48]	; (800cf44 <prvInitialiseTaskLists+0x6c>)
 800cf12:	f7fe fbd8 	bl	800b6c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf16:	480c      	ldr	r0, [pc, #48]	; (800cf48 <prvInitialiseTaskLists+0x70>)
 800cf18:	f7fe fbd5 	bl	800b6c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf1c:	480b      	ldr	r0, [pc, #44]	; (800cf4c <prvInitialiseTaskLists+0x74>)
 800cf1e:	f7fe fbd2 	bl	800b6c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf22:	4b0b      	ldr	r3, [pc, #44]	; (800cf50 <prvInitialiseTaskLists+0x78>)
 800cf24:	4a05      	ldr	r2, [pc, #20]	; (800cf3c <prvInitialiseTaskLists+0x64>)
 800cf26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf28:	4b0a      	ldr	r3, [pc, #40]	; (800cf54 <prvInitialiseTaskLists+0x7c>)
 800cf2a:	4a05      	ldr	r2, [pc, #20]	; (800cf40 <prvInitialiseTaskLists+0x68>)
 800cf2c:	601a      	str	r2, [r3, #0]
}
 800cf2e:	bf00      	nop
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20000bd0 	.word	0x20000bd0
 800cf3c:	20000c5c 	.word	0x20000c5c
 800cf40:	20000c70 	.word	0x20000c70
 800cf44:	20000c8c 	.word	0x20000c8c
 800cf48:	20000ca0 	.word	0x20000ca0
 800cf4c:	20000cb8 	.word	0x20000cb8
 800cf50:	20000c84 	.word	0x20000c84
 800cf54:	20000c88 	.word	0x20000c88

0800cf58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf5e:	e019      	b.n	800cf94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf60:	f000 fe98 	bl	800dc94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf64:	4b10      	ldr	r3, [pc, #64]	; (800cfa8 <prvCheckTasksWaitingTermination+0x50>)
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe fc32 	bl	800b7da <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf76:	4b0d      	ldr	r3, [pc, #52]	; (800cfac <prvCheckTasksWaitingTermination+0x54>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	4a0b      	ldr	r2, [pc, #44]	; (800cfac <prvCheckTasksWaitingTermination+0x54>)
 800cf7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf80:	4b0b      	ldr	r3, [pc, #44]	; (800cfb0 <prvCheckTasksWaitingTermination+0x58>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3b01      	subs	r3, #1
 800cf86:	4a0a      	ldr	r2, [pc, #40]	; (800cfb0 <prvCheckTasksWaitingTermination+0x58>)
 800cf88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf8a:	f000 feb3 	bl	800dcf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f810 	bl	800cfb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <prvCheckTasksWaitingTermination+0x58>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1e1      	bne.n	800cf60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf9c:	bf00      	nop
 800cf9e:	bf00      	nop
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	20000ca0 	.word	0x20000ca0
 800cfac:	20000ccc 	.word	0x20000ccc
 800cfb0:	20000cb4 	.word	0x20000cb4

0800cfb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d108      	bne.n	800cfd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 ff96 	bl	800defc <vPortFree>
				vPortFree( pxTCB );
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 ff93 	bl	800defc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cfd6:	e018      	b.n	800d00a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d103      	bne.n	800cfea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 ff8a 	bl	800defc <vPortFree>
	}
 800cfe8:	e00f      	b.n	800d00a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d00a      	beq.n	800d00a <prvDeleteTCB+0x56>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	60fb      	str	r3, [r7, #12]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <prvDeleteTCB+0x54>
	}
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d01a:	4b0c      	ldr	r3, [pc, #48]	; (800d04c <prvResetNextTaskUnblockTime+0x38>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d104      	bne.n	800d02e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d024:	4b0a      	ldr	r3, [pc, #40]	; (800d050 <prvResetNextTaskUnblockTime+0x3c>)
 800d026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d02a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d02c:	e008      	b.n	800d040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d02e:	4b07      	ldr	r3, [pc, #28]	; (800d04c <prvResetNextTaskUnblockTime+0x38>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	4a04      	ldr	r2, [pc, #16]	; (800d050 <prvResetNextTaskUnblockTime+0x3c>)
 800d03e:	6013      	str	r3, [r2, #0]
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr
 800d04c:	20000c84 	.word	0x20000c84
 800d050:	20000cec 	.word	0x20000cec

0800d054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d05a:	4b0b      	ldr	r3, [pc, #44]	; (800d088 <xTaskGetSchedulerState+0x34>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d102      	bne.n	800d068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d062:	2301      	movs	r3, #1
 800d064:	607b      	str	r3, [r7, #4]
 800d066:	e008      	b.n	800d07a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d068:	4b08      	ldr	r3, [pc, #32]	; (800d08c <xTaskGetSchedulerState+0x38>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d070:	2302      	movs	r3, #2
 800d072:	607b      	str	r3, [r7, #4]
 800d074:	e001      	b.n	800d07a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d076:	2300      	movs	r3, #0
 800d078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d07a:	687b      	ldr	r3, [r7, #4]
	}
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	20000cd8 	.word	0x20000cd8
 800d08c:	20000cf4 	.word	0x20000cf4

0800d090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d09c:	2300      	movs	r3, #0
 800d09e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d06e      	beq.n	800d184 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d0a6:	4b3a      	ldr	r3, [pc, #232]	; (800d190 <xTaskPriorityDisinherit+0x100>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	693a      	ldr	r2, [r7, #16]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d00a      	beq.n	800d0c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b4:	f383 8811 	msr	BASEPRI, r3
 800d0b8:	f3bf 8f6f 	isb	sy
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	60fb      	str	r3, [r7, #12]
}
 800d0c2:	bf00      	nop
 800d0c4:	e7fe      	b.n	800d0c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10a      	bne.n	800d0e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	60bb      	str	r3, [r7, #8]
}
 800d0e0:	bf00      	nop
 800d0e2:	e7fe      	b.n	800d0e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0e8:	1e5a      	subs	r2, r3, #1
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d044      	beq.n	800d184 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d140      	bne.n	800d184 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	3304      	adds	r3, #4
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fb67 	bl	800b7da <uxListRemove>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d115      	bne.n	800d13e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d116:	491f      	ldr	r1, [pc, #124]	; (800d194 <xTaskPriorityDisinherit+0x104>)
 800d118:	4613      	mov	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	440b      	add	r3, r1
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10a      	bne.n	800d13e <xTaskPriorityDisinherit+0xae>
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12c:	2201      	movs	r2, #1
 800d12e:	fa02 f303 	lsl.w	r3, r2, r3
 800d132:	43da      	mvns	r2, r3
 800d134:	4b18      	ldr	r3, [pc, #96]	; (800d198 <xTaskPriorityDisinherit+0x108>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4013      	ands	r3, r2
 800d13a:	4a17      	ldr	r2, [pc, #92]	; (800d198 <xTaskPriorityDisinherit+0x108>)
 800d13c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14a:	f1c3 0207 	rsb	r2, r3, #7
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d156:	2201      	movs	r2, #1
 800d158:	409a      	lsls	r2, r3
 800d15a:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <xTaskPriorityDisinherit+0x108>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4313      	orrs	r3, r2
 800d160:	4a0d      	ldr	r2, [pc, #52]	; (800d198 <xTaskPriorityDisinherit+0x108>)
 800d162:	6013      	str	r3, [r2, #0]
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d168:	4613      	mov	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4413      	add	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4a08      	ldr	r2, [pc, #32]	; (800d194 <xTaskPriorityDisinherit+0x104>)
 800d172:	441a      	add	r2, r3
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	3304      	adds	r3, #4
 800d178:	4619      	mov	r1, r3
 800d17a:	4610      	mov	r0, r2
 800d17c:	f7fe fad0 	bl	800b720 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d180:	2301      	movs	r3, #1
 800d182:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d184:	697b      	ldr	r3, [r7, #20]
	}
 800d186:	4618      	mov	r0, r3
 800d188:	3718      	adds	r7, #24
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20000bcc 	.word	0x20000bcc
 800d194:	20000bd0 	.word	0x20000bd0
 800d198:	20000cd4 	.word	0x20000cd4

0800d19c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1a6:	4b29      	ldr	r3, [pc, #164]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1ac:	4b28      	ldr	r3, [pc, #160]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe fb11 	bl	800b7da <uxListRemove>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10b      	bne.n	800d1d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d1be:	4b24      	ldr	r3, [pc, #144]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ca:	43da      	mvns	r2, r3
 800d1cc:	4b21      	ldr	r3, [pc, #132]	; (800d254 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	4a20      	ldr	r2, [pc, #128]	; (800d254 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1dc:	d10a      	bne.n	800d1f4 <prvAddCurrentTaskToDelayedList+0x58>
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1e4:	4b1a      	ldr	r3, [pc, #104]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	481a      	ldr	r0, [pc, #104]	; (800d258 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d1ee:	f7fe fa97 	bl	800b720 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d1f2:	e026      	b.n	800d242 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d1fc:	4b14      	ldr	r3, [pc, #80]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d209      	bcs.n	800d220 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d20c:	4b13      	ldr	r3, [pc, #76]	; (800d25c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	4b0f      	ldr	r3, [pc, #60]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3304      	adds	r3, #4
 800d216:	4619      	mov	r1, r3
 800d218:	4610      	mov	r0, r2
 800d21a:	f7fe faa5 	bl	800b768 <vListInsert>
}
 800d21e:	e010      	b.n	800d242 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d220:	4b0f      	ldr	r3, [pc, #60]	; (800d260 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	4b0a      	ldr	r3, [pc, #40]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3304      	adds	r3, #4
 800d22a:	4619      	mov	r1, r3
 800d22c:	4610      	mov	r0, r2
 800d22e:	f7fe fa9b 	bl	800b768 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d232:	4b0c      	ldr	r3, [pc, #48]	; (800d264 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d202      	bcs.n	800d242 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d23c:	4a09      	ldr	r2, [pc, #36]	; (800d264 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	6013      	str	r3, [r2, #0]
}
 800d242:	bf00      	nop
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	20000cd0 	.word	0x20000cd0
 800d250:	20000bcc 	.word	0x20000bcc
 800d254:	20000cd4 	.word	0x20000cd4
 800d258:	20000cb8 	.word	0x20000cb8
 800d25c:	20000c88 	.word	0x20000c88
 800d260:	20000c84 	.word	0x20000c84
 800d264:	20000cec 	.word	0x20000cec

0800d268 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08a      	sub	sp, #40	; 0x28
 800d26c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d26e:	2300      	movs	r3, #0
 800d270:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d272:	f000 fb63 	bl	800d93c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d276:	4b1c      	ldr	r3, [pc, #112]	; (800d2e8 <xTimerCreateTimerTask+0x80>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d021      	beq.n	800d2c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d27e:	2300      	movs	r3, #0
 800d280:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d282:	2300      	movs	r3, #0
 800d284:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d286:	1d3a      	adds	r2, r7, #4
 800d288:	f107 0108 	add.w	r1, r7, #8
 800d28c:	f107 030c 	add.w	r3, r7, #12
 800d290:	4618      	mov	r0, r3
 800d292:	f7f4 f92d 	bl	80014f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d296:	6879      	ldr	r1, [r7, #4]
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	9202      	str	r2, [sp, #8]
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	460a      	mov	r2, r1
 800d2a8:	4910      	ldr	r1, [pc, #64]	; (800d2ec <xTimerCreateTimerTask+0x84>)
 800d2aa:	4811      	ldr	r0, [pc, #68]	; (800d2f0 <xTimerCreateTimerTask+0x88>)
 800d2ac:	f7fe ffa8 	bl	800c200 <xTaskCreateStatic>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	4a10      	ldr	r2, [pc, #64]	; (800d2f4 <xTimerCreateTimerTask+0x8c>)
 800d2b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d2b6:	4b0f      	ldr	r3, [pc, #60]	; (800d2f4 <xTimerCreateTimerTask+0x8c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d001      	beq.n	800d2c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10a      	bne.n	800d2de <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	613b      	str	r3, [r7, #16]
}
 800d2da:	bf00      	nop
 800d2dc:	e7fe      	b.n	800d2dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d2de:	697b      	ldr	r3, [r7, #20]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3718      	adds	r7, #24
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	20000d28 	.word	0x20000d28
 800d2ec:	0801181c 	.word	0x0801181c
 800d2f0:	0800d51d 	.word	0x0800d51d
 800d2f4:	20000d2c 	.word	0x20000d2c

0800d2f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b088      	sub	sp, #32
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
 800d304:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d306:	2028      	movs	r0, #40	; 0x28
 800d308:	f000 fde6 	bl	800ded8 <pvPortMalloc>
 800d30c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00d      	beq.n	800d330 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	68b9      	ldr	r1, [r7, #8]
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f000 f805 	bl	800d33a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d330:	697b      	ldr	r3, [r7, #20]
	}
 800d332:	4618      	mov	r0, r3
 800d334:	3718      	adds	r7, #24
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b086      	sub	sp, #24
 800d33e:	af00      	add	r7, sp, #0
 800d340:	60f8      	str	r0, [r7, #12]
 800d342:	60b9      	str	r1, [r7, #8]
 800d344:	607a      	str	r2, [r7, #4]
 800d346:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10a      	bne.n	800d364 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	617b      	str	r3, [r7, #20]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	2b00      	cmp	r3, #0
 800d368:	d01e      	beq.n	800d3a8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d36a:	f000 fae7 	bl	800d93c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	68fa      	ldr	r2, [r7, #12]
 800d372:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	683a      	ldr	r2, [r7, #0]
 800d37e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	6a3a      	ldr	r2, [r7, #32]
 800d384:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d388:	3304      	adds	r3, #4
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fe f9bb 	bl	800b706 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d008      	beq.n	800d3a8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d39c:	f043 0304 	orr.w	r3, r3, #4
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d3a8:	bf00      	nop
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b08a      	sub	sp, #40	; 0x28
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
 800d3bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10a      	bne.n	800d3de <xTimerGenericCommand+0x2e>
	__asm volatile
 800d3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3cc:	f383 8811 	msr	BASEPRI, r3
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	623b      	str	r3, [r7, #32]
}
 800d3da:	bf00      	nop
 800d3dc:	e7fe      	b.n	800d3dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d3de:	4b1a      	ldr	r3, [pc, #104]	; (800d448 <xTimerGenericCommand+0x98>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d02a      	beq.n	800d43c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2b05      	cmp	r3, #5
 800d3f6:	dc18      	bgt.n	800d42a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d3f8:	f7ff fe2c 	bl	800d054 <xTaskGetSchedulerState>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b02      	cmp	r3, #2
 800d400:	d109      	bne.n	800d416 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d402:	4b11      	ldr	r3, [pc, #68]	; (800d448 <xTimerGenericCommand+0x98>)
 800d404:	6818      	ldr	r0, [r3, #0]
 800d406:	f107 0114 	add.w	r1, r7, #20
 800d40a:	2300      	movs	r3, #0
 800d40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d40e:	f7fe fb0f 	bl	800ba30 <xQueueGenericSend>
 800d412:	6278      	str	r0, [r7, #36]	; 0x24
 800d414:	e012      	b.n	800d43c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d416:	4b0c      	ldr	r3, [pc, #48]	; (800d448 <xTimerGenericCommand+0x98>)
 800d418:	6818      	ldr	r0, [r3, #0]
 800d41a:	f107 0114 	add.w	r1, r7, #20
 800d41e:	2300      	movs	r3, #0
 800d420:	2200      	movs	r2, #0
 800d422:	f7fe fb05 	bl	800ba30 <xQueueGenericSend>
 800d426:	6278      	str	r0, [r7, #36]	; 0x24
 800d428:	e008      	b.n	800d43c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d42a:	4b07      	ldr	r3, [pc, #28]	; (800d448 <xTimerGenericCommand+0x98>)
 800d42c:	6818      	ldr	r0, [r3, #0]
 800d42e:	f107 0114 	add.w	r1, r7, #20
 800d432:	2300      	movs	r3, #0
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	f7fe fbf9 	bl	800bc2c <xQueueGenericSendFromISR>
 800d43a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3728      	adds	r7, #40	; 0x28
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	20000d28 	.word	0x20000d28

0800d44c <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10a      	bne.n	800d474 <xTimerGetPeriod+0x28>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	60bb      	str	r3, [r7, #8]
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <xTimerGetPeriod+0x26>
	return pxTimer->xTimerPeriodInTicks;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	699b      	ldr	r3, [r3, #24]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3714      	adds	r7, #20
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b088      	sub	sp, #32
 800d488:	af02      	add	r7, sp, #8
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d48e:	4b22      	ldr	r3, [pc, #136]	; (800d518 <prvProcessExpiredTimer+0x94>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	3304      	adds	r3, #4
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fe f99c 	bl	800b7da <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d4a8:	f003 0304 	and.w	r3, r3, #4
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d022      	beq.n	800d4f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	699a      	ldr	r2, [r3, #24]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	18d1      	adds	r1, r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	6978      	ldr	r0, [r7, #20]
 800d4be:	f000 f8d1 	bl	800d664 <prvInsertTimerInActiveList>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01f      	beq.n	800d508 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	6978      	ldr	r0, [r7, #20]
 800d4d4:	f7ff ff6c 	bl	800d3b0 <xTimerGenericCommand>
 800d4d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d113      	bne.n	800d508 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	60fb      	str	r3, [r7, #12]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d4fc:	f023 0301 	bic.w	r3, r3, #1
 800d500:	b2da      	uxtb	r2, r3
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	6a1b      	ldr	r3, [r3, #32]
 800d50c:	6978      	ldr	r0, [r7, #20]
 800d50e:	4798      	blx	r3
}
 800d510:	bf00      	nop
 800d512:	3718      	adds	r7, #24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	20000d20 	.word	0x20000d20

0800d51c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d524:	f107 0308 	add.w	r3, r7, #8
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 f857 	bl	800d5dc <prvGetNextExpireTime>
 800d52e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	4619      	mov	r1, r3
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f000 f803 	bl	800d540 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d53a:	f000 f8d5 	bl	800d6e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d53e:	e7f1      	b.n	800d524 <prvTimerTask+0x8>

0800d540 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d54a:	f7ff f9a9 	bl	800c8a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d54e:	f107 0308 	add.w	r3, r7, #8
 800d552:	4618      	mov	r0, r3
 800d554:	f000 f866 	bl	800d624 <prvSampleTimeNow>
 800d558:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d130      	bne.n	800d5c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10a      	bne.n	800d57c <prvProcessTimerOrBlockTask+0x3c>
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d806      	bhi.n	800d57c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d56e:	f7ff f9a5 	bl	800c8bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d572:	68f9      	ldr	r1, [r7, #12]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff ff85 	bl	800d484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d57a:	e024      	b.n	800d5c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d008      	beq.n	800d594 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d582:	4b13      	ldr	r3, [pc, #76]	; (800d5d0 <prvProcessTimerOrBlockTask+0x90>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <prvProcessTimerOrBlockTask+0x50>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <prvProcessTimerOrBlockTask+0x52>
 800d590:	2300      	movs	r3, #0
 800d592:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d594:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <prvProcessTimerOrBlockTask+0x94>)
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f7fe fdf9 	bl	800c198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d5a6:	f7ff f989 	bl	800c8bc <xTaskResumeAll>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10a      	bne.n	800d5c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d5b0:	4b09      	ldr	r3, [pc, #36]	; (800d5d8 <prvProcessTimerOrBlockTask+0x98>)
 800d5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	f3bf 8f6f 	isb	sy
}
 800d5c0:	e001      	b.n	800d5c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d5c2:	f7ff f97b 	bl	800c8bc <xTaskResumeAll>
}
 800d5c6:	bf00      	nop
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20000d24 	.word	0x20000d24
 800d5d4:	20000d28 	.word	0x20000d28
 800d5d8:	e000ed04 	.word	0xe000ed04

0800d5dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d5e4:	4b0e      	ldr	r3, [pc, #56]	; (800d620 <prvGetNextExpireTime+0x44>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <prvGetNextExpireTime+0x16>
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	e000      	b.n	800d5f4 <prvGetNextExpireTime+0x18>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d105      	bne.n	800d60c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d600:	4b07      	ldr	r3, [pc, #28]	; (800d620 <prvGetNextExpireTime+0x44>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	60fb      	str	r3, [r7, #12]
 800d60a:	e001      	b.n	800d610 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d610:	68fb      	ldr	r3, [r7, #12]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	20000d20 	.word	0x20000d20

0800d624 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d62c:	f7ff f9e2 	bl	800c9f4 <xTaskGetTickCount>
 800d630:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d632:	4b0b      	ldr	r3, [pc, #44]	; (800d660 <prvSampleTimeNow+0x3c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d205      	bcs.n	800d648 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d63c:	f000 f91a 	bl	800d874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	601a      	str	r2, [r3, #0]
 800d646:	e002      	b.n	800d64e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d64e:	4a04      	ldr	r2, [pc, #16]	; (800d660 <prvSampleTimeNow+0x3c>)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d654:	68fb      	ldr	r3, [r7, #12]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	20000d30 	.word	0x20000d30

0800d664 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b086      	sub	sp, #24
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
 800d670:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d672:	2300      	movs	r3, #0
 800d674:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	68ba      	ldr	r2, [r7, #8]
 800d67a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	429a      	cmp	r2, r3
 800d688:	d812      	bhi.n	800d6b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	1ad2      	subs	r2, r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	699b      	ldr	r3, [r3, #24]
 800d694:	429a      	cmp	r2, r3
 800d696:	d302      	bcc.n	800d69e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d698:	2301      	movs	r3, #1
 800d69a:	617b      	str	r3, [r7, #20]
 800d69c:	e01b      	b.n	800d6d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d69e:	4b10      	ldr	r3, [pc, #64]	; (800d6e0 <prvInsertTimerInActiveList+0x7c>)
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	3304      	adds	r3, #4
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	f7fe f85d 	bl	800b768 <vListInsert>
 800d6ae:	e012      	b.n	800d6d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d206      	bcs.n	800d6c6 <prvInsertTimerInActiveList+0x62>
 800d6b8:	68ba      	ldr	r2, [r7, #8]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d302      	bcc.n	800d6c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	617b      	str	r3, [r7, #20]
 800d6c4:	e007      	b.n	800d6d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d6c6:	4b07      	ldr	r3, [pc, #28]	; (800d6e4 <prvInsertTimerInActiveList+0x80>)
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	3304      	adds	r3, #4
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	f7fe f849 	bl	800b768 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d6d6:	697b      	ldr	r3, [r7, #20]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	20000d24 	.word	0x20000d24
 800d6e4:	20000d20 	.word	0x20000d20

0800d6e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08c      	sub	sp, #48	; 0x30
 800d6ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6ee:	e0ae      	b.n	800d84e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f2c0 80ab 	blt.w	800d84e <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	695b      	ldr	r3, [r3, #20]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d004      	beq.n	800d70e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	3304      	adds	r3, #4
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fe f866 	bl	800b7da <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d70e:	1d3b      	adds	r3, r7, #4
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff ff87 	bl	800d624 <prvSampleTimeNow>
 800d716:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2b09      	cmp	r3, #9
 800d71c:	f200 8096 	bhi.w	800d84c <prvProcessReceivedCommands+0x164>
 800d720:	a201      	add	r2, pc, #4	; (adr r2, 800d728 <prvProcessReceivedCommands+0x40>)
 800d722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d726:	bf00      	nop
 800d728:	0800d751 	.word	0x0800d751
 800d72c:	0800d751 	.word	0x0800d751
 800d730:	0800d751 	.word	0x0800d751
 800d734:	0800d7c5 	.word	0x0800d7c5
 800d738:	0800d7d9 	.word	0x0800d7d9
 800d73c:	0800d823 	.word	0x0800d823
 800d740:	0800d751 	.word	0x0800d751
 800d744:	0800d751 	.word	0x0800d751
 800d748:	0800d7c5 	.word	0x0800d7c5
 800d74c:	0800d7d9 	.word	0x0800d7d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d756:	f043 0301 	orr.w	r3, r3, #1
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	18d1      	adds	r1, r2, r3
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6a3a      	ldr	r2, [r7, #32]
 800d76e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d770:	f7ff ff78 	bl	800d664 <prvInsertTimerInActiveList>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d069      	beq.n	800d84e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d05e      	beq.n	800d84e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	699b      	ldr	r3, [r3, #24]
 800d796:	441a      	add	r2, r3
 800d798:	2300      	movs	r3, #0
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	2300      	movs	r3, #0
 800d79e:	2100      	movs	r1, #0
 800d7a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7a2:	f7ff fe05 	bl	800d3b0 <xTimerGenericCommand>
 800d7a6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d14f      	bne.n	800d84e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	61bb      	str	r3, [r7, #24]
}
 800d7c0:	bf00      	nop
 800d7c2:	e7fe      	b.n	800d7c2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d7ca:	f023 0301 	bic.w	r3, r3, #1
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800d7d6:	e03a      	b.n	800d84e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d7de:	f043 0301 	orr.w	r3, r3, #1
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d7ea:	68fa      	ldr	r2, [r7, #12]
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10a      	bne.n	800d80e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	617b      	str	r3, [r7, #20]
}
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	699a      	ldr	r2, [r3, #24]
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	18d1      	adds	r1, r2, r3
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	6a3a      	ldr	r2, [r7, #32]
 800d81a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d81c:	f7ff ff22 	bl	800d664 <prvInsertTimerInActiveList>
					break;
 800d820:	e015      	b.n	800d84e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d824:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d828:	f003 0302 	and.w	r3, r3, #2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d103      	bne.n	800d838 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800d830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d832:	f000 fb63 	bl	800defc <vPortFree>
 800d836:	e00a      	b.n	800d84e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d83e:	f023 0301 	bic.w	r3, r3, #1
 800d842:	b2da      	uxtb	r2, r3
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d84a:	e000      	b.n	800d84e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800d84c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d84e:	4b08      	ldr	r3, [pc, #32]	; (800d870 <prvProcessReceivedCommands+0x188>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f107 0108 	add.w	r1, r7, #8
 800d856:	2200      	movs	r2, #0
 800d858:	4618      	mov	r0, r3
 800d85a:	f7fe fa83 	bl	800bd64 <xQueueReceive>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	f47f af45 	bne.w	800d6f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d866:	bf00      	nop
 800d868:	bf00      	nop
 800d86a:	3728      	adds	r7, #40	; 0x28
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20000d28 	.word	0x20000d28

0800d874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d87a:	e048      	b.n	800d90e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d87c:	4b2d      	ldr	r3, [pc, #180]	; (800d934 <prvSwitchTimerLists+0xc0>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d886:	4b2b      	ldr	r3, [pc, #172]	; (800d934 <prvSwitchTimerLists+0xc0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	3304      	adds	r3, #4
 800d894:	4618      	mov	r0, r3
 800d896:	f7fd ffa0 	bl	800b7da <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6a1b      	ldr	r3, [r3, #32]
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8a8:	f003 0304 	and.w	r3, r3, #4
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d02e      	beq.n	800d90e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	693a      	ldr	r2, [r7, #16]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d8ba:	68ba      	ldr	r2, [r7, #8]
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d90e      	bls.n	800d8e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8ce:	4b19      	ldr	r3, [pc, #100]	; (800d934 <prvSwitchTimerLists+0xc0>)
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4610      	mov	r0, r2
 800d8da:	f7fd ff45 	bl	800b768 <vListInsert>
 800d8de:	e016      	b.n	800d90e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	693a      	ldr	r2, [r7, #16]
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f7ff fd60 	bl	800d3b0 <xTimerGenericCommand>
 800d8f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10a      	bne.n	800d90e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	603b      	str	r3, [r7, #0]
}
 800d90a:	bf00      	nop
 800d90c:	e7fe      	b.n	800d90c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d90e:	4b09      	ldr	r3, [pc, #36]	; (800d934 <prvSwitchTimerLists+0xc0>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d1b1      	bne.n	800d87c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d918:	4b06      	ldr	r3, [pc, #24]	; (800d934 <prvSwitchTimerLists+0xc0>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d91e:	4b06      	ldr	r3, [pc, #24]	; (800d938 <prvSwitchTimerLists+0xc4>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a04      	ldr	r2, [pc, #16]	; (800d934 <prvSwitchTimerLists+0xc0>)
 800d924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d926:	4a04      	ldr	r2, [pc, #16]	; (800d938 <prvSwitchTimerLists+0xc4>)
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	6013      	str	r3, [r2, #0]
}
 800d92c:	bf00      	nop
 800d92e:	3718      	adds	r7, #24
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	20000d20 	.word	0x20000d20
 800d938:	20000d24 	.word	0x20000d24

0800d93c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d942:	f000 f9a7 	bl	800dc94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d946:	4b15      	ldr	r3, [pc, #84]	; (800d99c <prvCheckForValidListAndQueue+0x60>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d120      	bne.n	800d990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d94e:	4814      	ldr	r0, [pc, #80]	; (800d9a0 <prvCheckForValidListAndQueue+0x64>)
 800d950:	f7fd feb9 	bl	800b6c6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d954:	4813      	ldr	r0, [pc, #76]	; (800d9a4 <prvCheckForValidListAndQueue+0x68>)
 800d956:	f7fd feb6 	bl	800b6c6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d95a:	4b13      	ldr	r3, [pc, #76]	; (800d9a8 <prvCheckForValidListAndQueue+0x6c>)
 800d95c:	4a10      	ldr	r2, [pc, #64]	; (800d9a0 <prvCheckForValidListAndQueue+0x64>)
 800d95e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d960:	4b12      	ldr	r3, [pc, #72]	; (800d9ac <prvCheckForValidListAndQueue+0x70>)
 800d962:	4a10      	ldr	r2, [pc, #64]	; (800d9a4 <prvCheckForValidListAndQueue+0x68>)
 800d964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d966:	2300      	movs	r3, #0
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	4b11      	ldr	r3, [pc, #68]	; (800d9b0 <prvCheckForValidListAndQueue+0x74>)
 800d96c:	4a11      	ldr	r2, [pc, #68]	; (800d9b4 <prvCheckForValidListAndQueue+0x78>)
 800d96e:	210c      	movs	r1, #12
 800d970:	200a      	movs	r0, #10
 800d972:	f7fd ffc5 	bl	800b900 <xQueueGenericCreateStatic>
 800d976:	4603      	mov	r3, r0
 800d978:	4a08      	ldr	r2, [pc, #32]	; (800d99c <prvCheckForValidListAndQueue+0x60>)
 800d97a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d97c:	4b07      	ldr	r3, [pc, #28]	; (800d99c <prvCheckForValidListAndQueue+0x60>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d005      	beq.n	800d990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d984:	4b05      	ldr	r3, [pc, #20]	; (800d99c <prvCheckForValidListAndQueue+0x60>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	490b      	ldr	r1, [pc, #44]	; (800d9b8 <prvCheckForValidListAndQueue+0x7c>)
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fbda 	bl	800c144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d990:	f000 f9b0 	bl	800dcf4 <vPortExitCritical>
}
 800d994:	bf00      	nop
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	20000d28 	.word	0x20000d28
 800d9a0:	20000cf8 	.word	0x20000cf8
 800d9a4:	20000d0c 	.word	0x20000d0c
 800d9a8:	20000d20 	.word	0x20000d20
 800d9ac:	20000d24 	.word	0x20000d24
 800d9b0:	20000dac 	.word	0x20000dac
 800d9b4:	20000d34 	.word	0x20000d34
 800d9b8:	08011824 	.word	0x08011824

0800d9bc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10a      	bne.n	800d9e4 <pvTimerGetTimerID+0x28>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	60fb      	str	r3, [r7, #12]
}
 800d9e0:	bf00      	nop
 800d9e2:	e7fe      	b.n	800d9e2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d9e4:	f000 f956 	bl	800dc94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	69db      	ldr	r3, [r3, #28]
 800d9ec:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d9ee:	f000 f981 	bl	800dcf4 <vPortExitCritical>

	return pvReturn;
 800d9f2:	693b      	ldr	r3, [r7, #16]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d10a      	bne.n	800da26 <vTimerSetTimerID+0x2a>
	__asm volatile
 800da10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da14:	f383 8811 	msr	BASEPRI, r3
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	f3bf 8f4f 	dsb	sy
 800da20:	60bb      	str	r3, [r7, #8]
}
 800da22:	bf00      	nop
 800da24:	e7fe      	b.n	800da24 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800da26:	f000 f935 	bl	800dc94 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	683a      	ldr	r2, [r7, #0]
 800da2e:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800da30:	f000 f960 	bl	800dcf4 <vPortExitCritical>
}
 800da34:	bf00      	nop
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	3b04      	subs	r3, #4
 800da4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	3b04      	subs	r3, #4
 800da5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	f023 0201 	bic.w	r2, r3, #1
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	3b04      	subs	r3, #4
 800da6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800da6c:	4a0c      	ldr	r2, [pc, #48]	; (800daa0 <pxPortInitialiseStack+0x64>)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	3b14      	subs	r3, #20
 800da76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3b04      	subs	r3, #4
 800da82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f06f 0202 	mvn.w	r2, #2
 800da8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3b20      	subs	r3, #32
 800da90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800da92:	68fb      	ldr	r3, [r7, #12]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3714      	adds	r7, #20
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr
 800daa0:	0800daa5 	.word	0x0800daa5

0800daa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800daaa:	2300      	movs	r3, #0
 800daac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800daae:	4b12      	ldr	r3, [pc, #72]	; (800daf8 <prvTaskExitError+0x54>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dab6:	d00a      	beq.n	800dace <prvTaskExitError+0x2a>
	__asm volatile
 800dab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	60fb      	str	r3, [r7, #12]
}
 800daca:	bf00      	nop
 800dacc:	e7fe      	b.n	800dacc <prvTaskExitError+0x28>
	__asm volatile
 800dace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	60bb      	str	r3, [r7, #8]
}
 800dae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dae2:	bf00      	nop
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d0fc      	beq.n	800dae4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800daea:	bf00      	nop
 800daec:	bf00      	nop
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	200000a8 	.word	0x200000a8
 800dafc:	00000000 	.word	0x00000000

0800db00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db00:	4b07      	ldr	r3, [pc, #28]	; (800db20 <pxCurrentTCBConst2>)
 800db02:	6819      	ldr	r1, [r3, #0]
 800db04:	6808      	ldr	r0, [r1, #0]
 800db06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0a:	f380 8809 	msr	PSP, r0
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f04f 0000 	mov.w	r0, #0
 800db16:	f380 8811 	msr	BASEPRI, r0
 800db1a:	4770      	bx	lr
 800db1c:	f3af 8000 	nop.w

0800db20 <pxCurrentTCBConst2>:
 800db20:	20000bcc 	.word	0x20000bcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db24:	bf00      	nop
 800db26:	bf00      	nop

0800db28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db28:	4808      	ldr	r0, [pc, #32]	; (800db4c <prvPortStartFirstTask+0x24>)
 800db2a:	6800      	ldr	r0, [r0, #0]
 800db2c:	6800      	ldr	r0, [r0, #0]
 800db2e:	f380 8808 	msr	MSP, r0
 800db32:	f04f 0000 	mov.w	r0, #0
 800db36:	f380 8814 	msr	CONTROL, r0
 800db3a:	b662      	cpsie	i
 800db3c:	b661      	cpsie	f
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	df00      	svc	0
 800db48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db4a:	bf00      	nop
 800db4c:	e000ed08 	.word	0xe000ed08

0800db50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800db56:	4b46      	ldr	r3, [pc, #280]	; (800dc70 <xPortStartScheduler+0x120>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a46      	ldr	r2, [pc, #280]	; (800dc74 <xPortStartScheduler+0x124>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d10a      	bne.n	800db76 <xPortStartScheduler+0x26>
	__asm volatile
 800db60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db64:	f383 8811 	msr	BASEPRI, r3
 800db68:	f3bf 8f6f 	isb	sy
 800db6c:	f3bf 8f4f 	dsb	sy
 800db70:	613b      	str	r3, [r7, #16]
}
 800db72:	bf00      	nop
 800db74:	e7fe      	b.n	800db74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800db76:	4b3e      	ldr	r3, [pc, #248]	; (800dc70 <xPortStartScheduler+0x120>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a3f      	ldr	r2, [pc, #252]	; (800dc78 <xPortStartScheduler+0x128>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d10a      	bne.n	800db96 <xPortStartScheduler+0x46>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	60fb      	str	r3, [r7, #12]
}
 800db92:	bf00      	nop
 800db94:	e7fe      	b.n	800db94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db96:	4b39      	ldr	r3, [pc, #228]	; (800dc7c <xPortStartScheduler+0x12c>)
 800db98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	22ff      	movs	r2, #255	; 0xff
 800dba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dbb0:	78fb      	ldrb	r3, [r7, #3]
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	4b31      	ldr	r3, [pc, #196]	; (800dc80 <xPortStartScheduler+0x130>)
 800dbbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dbbe:	4b31      	ldr	r3, [pc, #196]	; (800dc84 <xPortStartScheduler+0x134>)
 800dbc0:	2207      	movs	r2, #7
 800dbc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dbc4:	e009      	b.n	800dbda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dbc6:	4b2f      	ldr	r3, [pc, #188]	; (800dc84 <xPortStartScheduler+0x134>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	4a2d      	ldr	r2, [pc, #180]	; (800dc84 <xPortStartScheduler+0x134>)
 800dbce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dbd0:	78fb      	ldrb	r3, [r7, #3]
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	005b      	lsls	r3, r3, #1
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dbda:	78fb      	ldrb	r3, [r7, #3]
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbe2:	2b80      	cmp	r3, #128	; 0x80
 800dbe4:	d0ef      	beq.n	800dbc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dbe6:	4b27      	ldr	r3, [pc, #156]	; (800dc84 <xPortStartScheduler+0x134>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f1c3 0307 	rsb	r3, r3, #7
 800dbee:	2b04      	cmp	r3, #4
 800dbf0:	d00a      	beq.n	800dc08 <xPortStartScheduler+0xb8>
	__asm volatile
 800dbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	60bb      	str	r3, [r7, #8]
}
 800dc04:	bf00      	nop
 800dc06:	e7fe      	b.n	800dc06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc08:	4b1e      	ldr	r3, [pc, #120]	; (800dc84 <xPortStartScheduler+0x134>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	021b      	lsls	r3, r3, #8
 800dc0e:	4a1d      	ldr	r2, [pc, #116]	; (800dc84 <xPortStartScheduler+0x134>)
 800dc10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc12:	4b1c      	ldr	r3, [pc, #112]	; (800dc84 <xPortStartScheduler+0x134>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc1a:	4a1a      	ldr	r2, [pc, #104]	; (800dc84 <xPortStartScheduler+0x134>)
 800dc1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc26:	4b18      	ldr	r3, [pc, #96]	; (800dc88 <xPortStartScheduler+0x138>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a17      	ldr	r2, [pc, #92]	; (800dc88 <xPortStartScheduler+0x138>)
 800dc2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc32:	4b15      	ldr	r3, [pc, #84]	; (800dc88 <xPortStartScheduler+0x138>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a14      	ldr	r2, [pc, #80]	; (800dc88 <xPortStartScheduler+0x138>)
 800dc38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dc3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc3e:	f000 f8dd 	bl	800ddfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc42:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <xPortStartScheduler+0x13c>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc48:	f000 f8fc 	bl	800de44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc4c:	4b10      	ldr	r3, [pc, #64]	; (800dc90 <xPortStartScheduler+0x140>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a0f      	ldr	r2, [pc, #60]	; (800dc90 <xPortStartScheduler+0x140>)
 800dc52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dc56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc58:	f7ff ff66 	bl	800db28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc5c:	f7fe ff92 	bl	800cb84 <vTaskSwitchContext>
	prvTaskExitError();
 800dc60:	f7ff ff20 	bl	800daa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	e000ed00 	.word	0xe000ed00
 800dc74:	410fc271 	.word	0x410fc271
 800dc78:	410fc270 	.word	0x410fc270
 800dc7c:	e000e400 	.word	0xe000e400
 800dc80:	20000df4 	.word	0x20000df4
 800dc84:	20000df8 	.word	0x20000df8
 800dc88:	e000ed20 	.word	0xe000ed20
 800dc8c:	200000a8 	.word	0x200000a8
 800dc90:	e000ef34 	.word	0xe000ef34

0800dc94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	607b      	str	r3, [r7, #4]
}
 800dcac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dcae:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <vPortEnterCritical+0x58>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	4a0d      	ldr	r2, [pc, #52]	; (800dcec <vPortEnterCritical+0x58>)
 800dcb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dcb8:	4b0c      	ldr	r3, [pc, #48]	; (800dcec <vPortEnterCritical+0x58>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d10f      	bne.n	800dce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dcc0:	4b0b      	ldr	r3, [pc, #44]	; (800dcf0 <vPortEnterCritical+0x5c>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00a      	beq.n	800dce0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	603b      	str	r3, [r7, #0]
}
 800dcdc:	bf00      	nop
 800dcde:	e7fe      	b.n	800dcde <vPortEnterCritical+0x4a>
	}
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr
 800dcec:	200000a8 	.word	0x200000a8
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dcfa:	4b12      	ldr	r3, [pc, #72]	; (800dd44 <vPortExitCritical+0x50>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10a      	bne.n	800dd18 <vPortExitCritical+0x24>
	__asm volatile
 800dd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd06:	f383 8811 	msr	BASEPRI, r3
 800dd0a:	f3bf 8f6f 	isb	sy
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	607b      	str	r3, [r7, #4]
}
 800dd14:	bf00      	nop
 800dd16:	e7fe      	b.n	800dd16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd18:	4b0a      	ldr	r3, [pc, #40]	; (800dd44 <vPortExitCritical+0x50>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	4a09      	ldr	r2, [pc, #36]	; (800dd44 <vPortExitCritical+0x50>)
 800dd20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd22:	4b08      	ldr	r3, [pc, #32]	; (800dd44 <vPortExitCritical+0x50>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d105      	bne.n	800dd36 <vPortExitCritical+0x42>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	f383 8811 	msr	BASEPRI, r3
}
 800dd34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd36:	bf00      	nop
 800dd38:	370c      	adds	r7, #12
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	200000a8 	.word	0x200000a8
	...

0800dd50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd50:	f3ef 8009 	mrs	r0, PSP
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	4b15      	ldr	r3, [pc, #84]	; (800ddb0 <pxCurrentTCBConst>)
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	f01e 0f10 	tst.w	lr, #16
 800dd60:	bf08      	it	eq
 800dd62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6a:	6010      	str	r0, [r2, #0]
 800dd6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd74:	f380 8811 	msr	BASEPRI, r0
 800dd78:	f3bf 8f4f 	dsb	sy
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f7fe ff00 	bl	800cb84 <vTaskSwitchContext>
 800dd84:	f04f 0000 	mov.w	r0, #0
 800dd88:	f380 8811 	msr	BASEPRI, r0
 800dd8c:	bc09      	pop	{r0, r3}
 800dd8e:	6819      	ldr	r1, [r3, #0]
 800dd90:	6808      	ldr	r0, [r1, #0]
 800dd92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd96:	f01e 0f10 	tst.w	lr, #16
 800dd9a:	bf08      	it	eq
 800dd9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dda0:	f380 8809 	msr	PSP, r0
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w

0800ddb0 <pxCurrentTCBConst>:
 800ddb0:	20000bcc 	.word	0x20000bcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ddb4:	bf00      	nop
 800ddb6:	bf00      	nop

0800ddb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
	__asm volatile
 800ddbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	607b      	str	r3, [r7, #4]
}
 800ddd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ddd2:	f7fe fe1f 	bl	800ca14 <xTaskIncrementTick>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d003      	beq.n	800dde4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dddc:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <xPortSysTickHandler+0x40>)
 800ddde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dde2:	601a      	str	r2, [r3, #0]
 800dde4:	2300      	movs	r3, #0
 800dde6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	f383 8811 	msr	BASEPRI, r3
}
 800ddee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ddf0:	bf00      	nop
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	e000ed04 	.word	0xe000ed04

0800ddfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de00:	4b0b      	ldr	r3, [pc, #44]	; (800de30 <vPortSetupTimerInterrupt+0x34>)
 800de02:	2200      	movs	r2, #0
 800de04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de06:	4b0b      	ldr	r3, [pc, #44]	; (800de34 <vPortSetupTimerInterrupt+0x38>)
 800de08:	2200      	movs	r2, #0
 800de0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de0c:	4b0a      	ldr	r3, [pc, #40]	; (800de38 <vPortSetupTimerInterrupt+0x3c>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a0a      	ldr	r2, [pc, #40]	; (800de3c <vPortSetupTimerInterrupt+0x40>)
 800de12:	fba2 2303 	umull	r2, r3, r2, r3
 800de16:	099b      	lsrs	r3, r3, #6
 800de18:	4a09      	ldr	r2, [pc, #36]	; (800de40 <vPortSetupTimerInterrupt+0x44>)
 800de1a:	3b01      	subs	r3, #1
 800de1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de1e:	4b04      	ldr	r3, [pc, #16]	; (800de30 <vPortSetupTimerInterrupt+0x34>)
 800de20:	2207      	movs	r2, #7
 800de22:	601a      	str	r2, [r3, #0]
}
 800de24:	bf00      	nop
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	e000e010 	.word	0xe000e010
 800de34:	e000e018 	.word	0xe000e018
 800de38:	20000000 	.word	0x20000000
 800de3c:	10624dd3 	.word	0x10624dd3
 800de40:	e000e014 	.word	0xe000e014

0800de44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800de54 <vPortEnableVFP+0x10>
 800de48:	6801      	ldr	r1, [r0, #0]
 800de4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800de4e:	6001      	str	r1, [r0, #0]
 800de50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de52:	bf00      	nop
 800de54:	e000ed88 	.word	0xe000ed88

0800de58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800de5e:	f3ef 8305 	mrs	r3, IPSR
 800de62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2b0f      	cmp	r3, #15
 800de68:	d914      	bls.n	800de94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800de6a:	4a17      	ldr	r2, [pc, #92]	; (800dec8 <vPortValidateInterruptPriority+0x70>)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	4413      	add	r3, r2
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de74:	4b15      	ldr	r3, [pc, #84]	; (800decc <vPortValidateInterruptPriority+0x74>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	7afa      	ldrb	r2, [r7, #11]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d20a      	bcs.n	800de94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800de7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	607b      	str	r3, [r7, #4]
}
 800de90:	bf00      	nop
 800de92:	e7fe      	b.n	800de92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800de94:	4b0e      	ldr	r3, [pc, #56]	; (800ded0 <vPortValidateInterruptPriority+0x78>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800de9c:	4b0d      	ldr	r3, [pc, #52]	; (800ded4 <vPortValidateInterruptPriority+0x7c>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d90a      	bls.n	800deba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea8:	f383 8811 	msr	BASEPRI, r3
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	603b      	str	r3, [r7, #0]
}
 800deb6:	bf00      	nop
 800deb8:	e7fe      	b.n	800deb8 <vPortValidateInterruptPriority+0x60>
	}
 800deba:	bf00      	nop
 800debc:	3714      	adds	r7, #20
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	e000e3f0 	.word	0xe000e3f0
 800decc:	20000df4 	.word	0x20000df4
 800ded0:	e000ed0c 	.word	0xe000ed0c
 800ded4:	20000df8 	.word	0x20000df8

0800ded8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800dee0:	f7fe fcde 	bl	800c8a0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fd2b 	bl	800e940 <malloc>
 800deea:	4603      	mov	r3, r0
 800deec:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800deee:	f7fe fce5 	bl	800c8bc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800def2:	68fb      	ldr	r3, [r7, #12]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	if( pv )
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d006      	beq.n	800df18 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800df0a:	f7fe fcc9 	bl	800c8a0 <vTaskSuspendAll>
		{
			free( pv );
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 fd1e 	bl	800e950 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800df14:	f7fe fcd2 	bl	800c8bc <xTaskResumeAll>
	}
}
 800df18:	bf00      	nop
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df24:	2200      	movs	r2, #0
 800df26:	4912      	ldr	r1, [pc, #72]	; (800df70 <MX_USB_DEVICE_Init+0x50>)
 800df28:	4812      	ldr	r0, [pc, #72]	; (800df74 <MX_USB_DEVICE_Init+0x54>)
 800df2a:	f7fc f85b 	bl	8009fe4 <USBD_Init>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df34:	f7f3 fd5a 	bl	80019ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df38:	490f      	ldr	r1, [pc, #60]	; (800df78 <MX_USB_DEVICE_Init+0x58>)
 800df3a:	480e      	ldr	r0, [pc, #56]	; (800df74 <MX_USB_DEVICE_Init+0x54>)
 800df3c:	f7fc f882 	bl	800a044 <USBD_RegisterClass>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d001      	beq.n	800df4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df46:	f7f3 fd51 	bl	80019ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df4a:	490c      	ldr	r1, [pc, #48]	; (800df7c <MX_USB_DEVICE_Init+0x5c>)
 800df4c:	4809      	ldr	r0, [pc, #36]	; (800df74 <MX_USB_DEVICE_Init+0x54>)
 800df4e:	f7fb ff73 	bl	8009e38 <USBD_CDC_RegisterInterface>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df58:	f7f3 fd48 	bl	80019ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df5c:	4805      	ldr	r0, [pc, #20]	; (800df74 <MX_USB_DEVICE_Init+0x54>)
 800df5e:	f7fc f8a7 	bl	800a0b0 <USBD_Start>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df68:	f7f3 fd40 	bl	80019ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df6c:	bf00      	nop
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	200000c0 	.word	0x200000c0
 800df74:	20000dfc 	.word	0x20000dfc
 800df78:	20000028 	.word	0x20000028
 800df7c:	200000ac 	.word	0x200000ac

0800df80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800df84:	2200      	movs	r2, #0
 800df86:	4905      	ldr	r1, [pc, #20]	; (800df9c <CDC_Init_FS+0x1c>)
 800df88:	4805      	ldr	r0, [pc, #20]	; (800dfa0 <CDC_Init_FS+0x20>)
 800df8a:	f7fb ff6f 	bl	8009e6c <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800df8e:	4905      	ldr	r1, [pc, #20]	; (800dfa4 <CDC_Init_FS+0x24>)
 800df90:	4803      	ldr	r0, [pc, #12]	; (800dfa0 <CDC_Init_FS+0x20>)
 800df92:	f7fb ff8d 	bl	8009eb0 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800df96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800df98:	4618      	mov	r0, r3
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	200014d8 	.word	0x200014d8
 800dfa0:	20000dfc 	.word	0x20000dfc
 800dfa4:	200010d8 	.word	0x200010d8

0800dfa8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800dfac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	6039      	str	r1, [r7, #0]
 800dfc2:	71fb      	strb	r3, [r7, #7]
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800dfc8:	79fb      	ldrb	r3, [r7, #7]
 800dfca:	2b23      	cmp	r3, #35	; 0x23
 800dfcc:	d84a      	bhi.n	800e064 <CDC_Control_FS+0xac>
 800dfce:	a201      	add	r2, pc, #4	; (adr r2, 800dfd4 <CDC_Control_FS+0x1c>)
 800dfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd4:	0800e065 	.word	0x0800e065
 800dfd8:	0800e065 	.word	0x0800e065
 800dfdc:	0800e065 	.word	0x0800e065
 800dfe0:	0800e065 	.word	0x0800e065
 800dfe4:	0800e065 	.word	0x0800e065
 800dfe8:	0800e065 	.word	0x0800e065
 800dfec:	0800e065 	.word	0x0800e065
 800dff0:	0800e065 	.word	0x0800e065
 800dff4:	0800e065 	.word	0x0800e065
 800dff8:	0800e065 	.word	0x0800e065
 800dffc:	0800e065 	.word	0x0800e065
 800e000:	0800e065 	.word	0x0800e065
 800e004:	0800e065 	.word	0x0800e065
 800e008:	0800e065 	.word	0x0800e065
 800e00c:	0800e065 	.word	0x0800e065
 800e010:	0800e065 	.word	0x0800e065
 800e014:	0800e065 	.word	0x0800e065
 800e018:	0800e065 	.word	0x0800e065
 800e01c:	0800e065 	.word	0x0800e065
 800e020:	0800e065 	.word	0x0800e065
 800e024:	0800e065 	.word	0x0800e065
 800e028:	0800e065 	.word	0x0800e065
 800e02c:	0800e065 	.word	0x0800e065
 800e030:	0800e065 	.word	0x0800e065
 800e034:	0800e065 	.word	0x0800e065
 800e038:	0800e065 	.word	0x0800e065
 800e03c:	0800e065 	.word	0x0800e065
 800e040:	0800e065 	.word	0x0800e065
 800e044:	0800e065 	.word	0x0800e065
 800e048:	0800e065 	.word	0x0800e065
 800e04c:	0800e065 	.word	0x0800e065
 800e050:	0800e065 	.word	0x0800e065
 800e054:	0800e065 	.word	0x0800e065
 800e058:	0800e065 	.word	0x0800e065
 800e05c:	0800e065 	.word	0x0800e065
 800e060:	0800e065 	.word	0x0800e065
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800e064:	bf00      	nop
    }

    return (USBD_OK);
 800e066:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e068:	4618      	mov	r0, r3
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e07e:	6879      	ldr	r1, [r7, #4]
 800e080:	4805      	ldr	r0, [pc, #20]	; (800e098 <CDC_Receive_FS+0x24>)
 800e082:	f7fb ff15 	bl	8009eb0 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e086:	4804      	ldr	r0, [pc, #16]	; (800e098 <CDC_Receive_FS+0x24>)
 800e088:	f7fb ff76 	bl	8009f78 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800e08c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	20000dfc 	.word	0x20000dfc

0800e09c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800e0ac:	4b0d      	ldr	r3, [pc, #52]	; (800e0e4 <CDC_Transmit_FS+0x48>)
 800e0ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0b2:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d001      	beq.n	800e0c2 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e00b      	b.n	800e0da <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e0c2:	887b      	ldrh	r3, [r7, #2]
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	6879      	ldr	r1, [r7, #4]
 800e0c8:	4806      	ldr	r0, [pc, #24]	; (800e0e4 <CDC_Transmit_FS+0x48>)
 800e0ca:	f7fb fecf 	bl	8009e6c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e0ce:	4805      	ldr	r0, [pc, #20]	; (800e0e4 <CDC_Transmit_FS+0x48>)
 800e0d0:	f7fb ff0c 	bl	8009eec <USBD_CDC_TransmitPacket>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20000dfc 	.word	0x20000dfc

0800e0e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b087      	sub	sp, #28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e0fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	371c      	adds	r7, #28
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr
	...

0800e10c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	4603      	mov	r3, r0
 800e114:	6039      	str	r1, [r7, #0]
 800e116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2212      	movs	r2, #18
 800e11c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e11e:	4b03      	ldr	r3, [pc, #12]	; (800e12c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e120:	4618      	mov	r0, r3
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	200000dc 	.word	0x200000dc

0800e130 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	6039      	str	r1, [r7, #0]
 800e13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	2204      	movs	r2, #4
 800e140:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e142:	4b03      	ldr	r3, [pc, #12]	; (800e150 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	200000f0 	.word	0x200000f0

0800e154 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	4603      	mov	r3, r0
 800e15c:	6039      	str	r1, [r7, #0]
 800e15e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d105      	bne.n	800e172 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	4907      	ldr	r1, [pc, #28]	; (800e188 <USBD_FS_ProductStrDescriptor+0x34>)
 800e16a:	4808      	ldr	r0, [pc, #32]	; (800e18c <USBD_FS_ProductStrDescriptor+0x38>)
 800e16c:	f7fd f94c 	bl	800b408 <USBD_GetString>
 800e170:	e004      	b.n	800e17c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	4904      	ldr	r1, [pc, #16]	; (800e188 <USBD_FS_ProductStrDescriptor+0x34>)
 800e176:	4805      	ldr	r0, [pc, #20]	; (800e18c <USBD_FS_ProductStrDescriptor+0x38>)
 800e178:	f7fd f946 	bl	800b408 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e17c:	4b02      	ldr	r3, [pc, #8]	; (800e188 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	200018d8 	.word	0x200018d8
 800e18c:	0801182c 	.word	0x0801182c

0800e190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	4603      	mov	r3, r0
 800e198:	6039      	str	r1, [r7, #0]
 800e19a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e19c:	683a      	ldr	r2, [r7, #0]
 800e19e:	4904      	ldr	r1, [pc, #16]	; (800e1b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e1a0:	4804      	ldr	r0, [pc, #16]	; (800e1b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e1a2:	f7fd f931 	bl	800b408 <USBD_GetString>
  return USBD_StrDesc;
 800e1a6:	4b02      	ldr	r3, [pc, #8]	; (800e1b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	200018d8 	.word	0x200018d8
 800e1b4:	08011844 	.word	0x08011844

0800e1b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	4603      	mov	r3, r0
 800e1c0:	6039      	str	r1, [r7, #0]
 800e1c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	221a      	movs	r2, #26
 800e1c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e1ca:	f000 f843 	bl	800e254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e1ce:	4b02      	ldr	r3, [pc, #8]	; (800e1d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3708      	adds	r7, #8
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	200000f4 	.word	0x200000f4

0800e1dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	6039      	str	r1, [r7, #0]
 800e1e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e1e8:	79fb      	ldrb	r3, [r7, #7]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d105      	bne.n	800e1fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	4907      	ldr	r1, [pc, #28]	; (800e210 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1f2:	4808      	ldr	r0, [pc, #32]	; (800e214 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1f4:	f7fd f908 	bl	800b408 <USBD_GetString>
 800e1f8:	e004      	b.n	800e204 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	4904      	ldr	r1, [pc, #16]	; (800e210 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1fe:	4805      	ldr	r0, [pc, #20]	; (800e214 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e200:	f7fd f902 	bl	800b408 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e204:	4b02      	ldr	r3, [pc, #8]	; (800e210 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e206:	4618      	mov	r0, r3
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	200018d8 	.word	0x200018d8
 800e214:	08011858 	.word	0x08011858

0800e218 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	4603      	mov	r3, r0
 800e220:	6039      	str	r1, [r7, #0]
 800e222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e224:	79fb      	ldrb	r3, [r7, #7]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d105      	bne.n	800e236 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e22a:	683a      	ldr	r2, [r7, #0]
 800e22c:	4907      	ldr	r1, [pc, #28]	; (800e24c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e22e:	4808      	ldr	r0, [pc, #32]	; (800e250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e230:	f7fd f8ea 	bl	800b408 <USBD_GetString>
 800e234:	e004      	b.n	800e240 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	4904      	ldr	r1, [pc, #16]	; (800e24c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e23a:	4805      	ldr	r0, [pc, #20]	; (800e250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e23c:	f7fd f8e4 	bl	800b408 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e240:	4b02      	ldr	r3, [pc, #8]	; (800e24c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e242:	4618      	mov	r0, r3
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	200018d8 	.word	0x200018d8
 800e250:	08011864 	.word	0x08011864

0800e254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e25a:	4b0f      	ldr	r3, [pc, #60]	; (800e298 <Get_SerialNum+0x44>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e260:	4b0e      	ldr	r3, [pc, #56]	; (800e29c <Get_SerialNum+0x48>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e266:	4b0e      	ldr	r3, [pc, #56]	; (800e2a0 <Get_SerialNum+0x4c>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	4413      	add	r3, r2
 800e272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d009      	beq.n	800e28e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e27a:	2208      	movs	r2, #8
 800e27c:	4909      	ldr	r1, [pc, #36]	; (800e2a4 <Get_SerialNum+0x50>)
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f000 f814 	bl	800e2ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e284:	2204      	movs	r2, #4
 800e286:	4908      	ldr	r1, [pc, #32]	; (800e2a8 <Get_SerialNum+0x54>)
 800e288:	68b8      	ldr	r0, [r7, #8]
 800e28a:	f000 f80f 	bl	800e2ac <IntToUnicode>
  }
}
 800e28e:	bf00      	nop
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	1fff7a10 	.word	0x1fff7a10
 800e29c:	1fff7a14 	.word	0x1fff7a14
 800e2a0:	1fff7a18 	.word	0x1fff7a18
 800e2a4:	200000f6 	.word	0x200000f6
 800e2a8:	20000106 	.word	0x20000106

0800e2ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b087      	sub	sp, #28
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e2be:	2300      	movs	r3, #0
 800e2c0:	75fb      	strb	r3, [r7, #23]
 800e2c2:	e027      	b.n	800e314 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	0f1b      	lsrs	r3, r3, #28
 800e2c8:	2b09      	cmp	r3, #9
 800e2ca:	d80b      	bhi.n	800e2e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	0f1b      	lsrs	r3, r3, #28
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	7dfb      	ldrb	r3, [r7, #23]
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	440b      	add	r3, r1
 800e2dc:	3230      	adds	r2, #48	; 0x30
 800e2de:	b2d2      	uxtb	r2, r2
 800e2e0:	701a      	strb	r2, [r3, #0]
 800e2e2:	e00a      	b.n	800e2fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	0f1b      	lsrs	r3, r3, #28
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	7dfb      	ldrb	r3, [r7, #23]
 800e2ec:	005b      	lsls	r3, r3, #1
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	440b      	add	r3, r1
 800e2f4:	3237      	adds	r2, #55	; 0x37
 800e2f6:	b2d2      	uxtb	r2, r2
 800e2f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	011b      	lsls	r3, r3, #4
 800e2fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e300:	7dfb      	ldrb	r3, [r7, #23]
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	3301      	adds	r3, #1
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	4413      	add	r3, r2
 800e30a:	2200      	movs	r2, #0
 800e30c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e30e:	7dfb      	ldrb	r3, [r7, #23]
 800e310:	3301      	adds	r3, #1
 800e312:	75fb      	strb	r3, [r7, #23]
 800e314:	7dfa      	ldrb	r2, [r7, #23]
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d3d3      	bcc.n	800e2c4 <IntToUnicode+0x18>
  }
}
 800e31c:	bf00      	nop
 800e31e:	bf00      	nop
 800e320:	371c      	adds	r7, #28
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
	...

0800e32c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b08a      	sub	sp, #40	; 0x28
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e334:	f107 0314 	add.w	r3, r7, #20
 800e338:	2200      	movs	r2, #0
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	605a      	str	r2, [r3, #4]
 800e33e:	609a      	str	r2, [r3, #8]
 800e340:	60da      	str	r2, [r3, #12]
 800e342:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e34c:	d13a      	bne.n	800e3c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e34e:	2300      	movs	r3, #0
 800e350:	613b      	str	r3, [r7, #16]
 800e352:	4b1e      	ldr	r3, [pc, #120]	; (800e3cc <HAL_PCD_MspInit+0xa0>)
 800e354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e356:	4a1d      	ldr	r2, [pc, #116]	; (800e3cc <HAL_PCD_MspInit+0xa0>)
 800e358:	f043 0301 	orr.w	r3, r3, #1
 800e35c:	6313      	str	r3, [r2, #48]	; 0x30
 800e35e:	4b1b      	ldr	r3, [pc, #108]	; (800e3cc <HAL_PCD_MspInit+0xa0>)
 800e360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e362:	f003 0301 	and.w	r3, r3, #1
 800e366:	613b      	str	r3, [r7, #16]
 800e368:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e36a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e36e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e370:	2302      	movs	r3, #2
 800e372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e374:	2300      	movs	r3, #0
 800e376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e378:	2303      	movs	r3, #3
 800e37a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e37c:	230a      	movs	r3, #10
 800e37e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e380:	f107 0314 	add.w	r3, r7, #20
 800e384:	4619      	mov	r1, r3
 800e386:	4812      	ldr	r0, [pc, #72]	; (800e3d0 <HAL_PCD_MspInit+0xa4>)
 800e388:	f7f5 fb1e 	bl	80039c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e38c:	4b0f      	ldr	r3, [pc, #60]	; (800e3cc <HAL_PCD_MspInit+0xa0>)
 800e38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e390:	4a0e      	ldr	r2, [pc, #56]	; (800e3cc <HAL_PCD_MspInit+0xa0>)
 800e392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e396:	6353      	str	r3, [r2, #52]	; 0x34
 800e398:	2300      	movs	r3, #0
 800e39a:	60fb      	str	r3, [r7, #12]
 800e39c:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <HAL_PCD_MspInit+0xa0>)
 800e39e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a0:	4a0a      	ldr	r2, [pc, #40]	; (800e3cc <HAL_PCD_MspInit+0xa0>)
 800e3a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e3a6:	6453      	str	r3, [r2, #68]	; 0x44
 800e3a8:	4b08      	ldr	r3, [pc, #32]	; (800e3cc <HAL_PCD_MspInit+0xa0>)
 800e3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3b0:	60fb      	str	r3, [r7, #12]
 800e3b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2105      	movs	r1, #5
 800e3b8:	2043      	movs	r0, #67	; 0x43
 800e3ba:	f7f5 f8e8 	bl	800358e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e3be:	2043      	movs	r0, #67	; 0x43
 800e3c0:	f7f5 f901 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e3c4:	bf00      	nop
 800e3c6:	3728      	adds	r7, #40	; 0x28
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	40023800 	.word	0x40023800
 800e3d0:	40020000 	.word	0x40020000

0800e3d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	f7fb fead 	bl	800a14a <USBD_LL_SetupStage>
}
 800e3f0:	bf00      	nop
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	460b      	mov	r3, r1
 800e402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e40a:	78fa      	ldrb	r2, [r7, #3]
 800e40c:	6879      	ldr	r1, [r7, #4]
 800e40e:	4613      	mov	r3, r2
 800e410:	00db      	lsls	r3, r3, #3
 800e412:	4413      	add	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	440b      	add	r3, r1
 800e418:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	78fb      	ldrb	r3, [r7, #3]
 800e420:	4619      	mov	r1, r3
 800e422:	f7fb fee7 	bl	800a1f4 <USBD_LL_DataOutStage>
}
 800e426:	bf00      	nop
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b082      	sub	sp, #8
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	460b      	mov	r3, r1
 800e438:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e440:	78fa      	ldrb	r2, [r7, #3]
 800e442:	6879      	ldr	r1, [r7, #4]
 800e444:	4613      	mov	r3, r2
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	4413      	add	r3, r2
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	440b      	add	r3, r1
 800e44e:	334c      	adds	r3, #76	; 0x4c
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	78fb      	ldrb	r3, [r7, #3]
 800e454:	4619      	mov	r1, r3
 800e456:	f7fb ff80 	bl	800a35a <USBD_LL_DataInStage>
}
 800e45a:	bf00      	nop
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b082      	sub	sp, #8
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e470:	4618      	mov	r0, r3
 800e472:	f7fc f8b4 	bl	800a5de <USBD_LL_SOF>
}
 800e476:	bf00      	nop
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b084      	sub	sp, #16
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e486:	2301      	movs	r3, #1
 800e488:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d001      	beq.n	800e496 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e492:	f7f3 faab 	bl	80019ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e49c:	7bfa      	ldrb	r2, [r7, #15]
 800e49e:	4611      	mov	r1, r2
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fc f85e 	bl	800a562 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fc f806 	bl	800a4be <USBD_LL_Reset>
}
 800e4b2:	bf00      	nop
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
	...

0800e4bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fc f859 	bl	800a582 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	6812      	ldr	r2, [r2, #0]
 800e4de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e4e2:	f043 0301 	orr.w	r3, r3, #1
 800e4e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6a1b      	ldr	r3, [r3, #32]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d005      	beq.n	800e4fc <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e4f0:	4b04      	ldr	r3, [pc, #16]	; (800e504 <HAL_PCD_SuspendCallback+0x48>)
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	4a03      	ldr	r2, [pc, #12]	; (800e504 <HAL_PCD_SuspendCallback+0x48>)
 800e4f6:	f043 0306 	orr.w	r3, r3, #6
 800e4fa:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800e4fc:	bf00      	nop
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	e000ed00 	.word	0xe000ed00

0800e508 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e516:	4618      	mov	r0, r3
 800e518:	f7fc f849 	bl	800a5ae <USBD_LL_Resume>
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	460b      	mov	r3, r1
 800e52e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e536:	78fa      	ldrb	r2, [r7, #3]
 800e538:	4611      	mov	r1, r2
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fc f8a1 	bl	800a682 <USBD_LL_IsoOUTIncomplete>
}
 800e540:	bf00      	nop
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	460b      	mov	r3, r1
 800e552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e55a:	78fa      	ldrb	r2, [r7, #3]
 800e55c:	4611      	mov	r1, r2
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fc f85d 	bl	800a61e <USBD_LL_IsoINIncomplete>
}
 800e564:	bf00      	nop
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fc f8b3 	bl	800a6e6 <USBD_LL_DevConnected>
}
 800e580:	bf00      	nop
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e596:	4618      	mov	r0, r3
 800e598:	f7fc f8b0 	bl	800a6fc <USBD_LL_DevDisconnected>
}
 800e59c:	bf00      	nop
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d13c      	bne.n	800e62e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e5b4:	4a20      	ldr	r2, [pc, #128]	; (800e638 <USBD_LL_Init+0x94>)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4a1e      	ldr	r2, [pc, #120]	; (800e638 <USBD_LL_Init+0x94>)
 800e5c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e5c4:	4b1c      	ldr	r3, [pc, #112]	; (800e638 <USBD_LL_Init+0x94>)
 800e5c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e5ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e5cc:	4b1a      	ldr	r3, [pc, #104]	; (800e638 <USBD_LL_Init+0x94>)
 800e5ce:	2204      	movs	r2, #4
 800e5d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5d2:	4b19      	ldr	r3, [pc, #100]	; (800e638 <USBD_LL_Init+0x94>)
 800e5d4:	2202      	movs	r2, #2
 800e5d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5d8:	4b17      	ldr	r3, [pc, #92]	; (800e638 <USBD_LL_Init+0x94>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5de:	4b16      	ldr	r3, [pc, #88]	; (800e638 <USBD_LL_Init+0x94>)
 800e5e0:	2202      	movs	r2, #2
 800e5e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e5e4:	4b14      	ldr	r3, [pc, #80]	; (800e638 <USBD_LL_Init+0x94>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e5ea:	4b13      	ldr	r3, [pc, #76]	; (800e638 <USBD_LL_Init+0x94>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e5f0:	4b11      	ldr	r3, [pc, #68]	; (800e638 <USBD_LL_Init+0x94>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e5f6:	4b10      	ldr	r3, [pc, #64]	; (800e638 <USBD_LL_Init+0x94>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e5fc:	4b0e      	ldr	r3, [pc, #56]	; (800e638 <USBD_LL_Init+0x94>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e602:	480d      	ldr	r0, [pc, #52]	; (800e638 <USBD_LL_Init+0x94>)
 800e604:	f7f6 fb55 	bl	8004cb2 <HAL_PCD_Init>
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d001      	beq.n	800e612 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e60e:	f7f3 f9ed 	bl	80019ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e612:	2180      	movs	r1, #128	; 0x80
 800e614:	4808      	ldr	r0, [pc, #32]	; (800e638 <USBD_LL_Init+0x94>)
 800e616:	f7f7 fdac 	bl	8006172 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e61a:	2240      	movs	r2, #64	; 0x40
 800e61c:	2100      	movs	r1, #0
 800e61e:	4806      	ldr	r0, [pc, #24]	; (800e638 <USBD_LL_Init+0x94>)
 800e620:	f7f7 fd60 	bl	80060e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e624:	2280      	movs	r2, #128	; 0x80
 800e626:	2101      	movs	r1, #1
 800e628:	4803      	ldr	r0, [pc, #12]	; (800e638 <USBD_LL_Init+0x94>)
 800e62a:	f7f7 fd5b 	bl	80060e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	20001ad8 	.word	0x20001ad8

0800e63c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e644:	2300      	movs	r3, #0
 800e646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e648:	2300      	movs	r3, #0
 800e64a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e652:	4618      	mov	r0, r3
 800e654:	f7f6 fc4a 	bl	8004eec <HAL_PCD_Start>
 800e658:	4603      	mov	r3, r0
 800e65a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
 800e65e:	4618      	mov	r0, r3
 800e660:	f000 f942 	bl	800e8e8 <USBD_Get_USB_Status>
 800e664:	4603      	mov	r3, r0
 800e666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e668:	7bbb      	ldrb	r3, [r7, #14]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e672:	b580      	push	{r7, lr}
 800e674:	b084      	sub	sp, #16
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	4608      	mov	r0, r1
 800e67c:	4611      	mov	r1, r2
 800e67e:	461a      	mov	r2, r3
 800e680:	4603      	mov	r3, r0
 800e682:	70fb      	strb	r3, [r7, #3]
 800e684:	460b      	mov	r3, r1
 800e686:	70bb      	strb	r3, [r7, #2]
 800e688:	4613      	mov	r3, r2
 800e68a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e68c:	2300      	movs	r3, #0
 800e68e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e69a:	78bb      	ldrb	r3, [r7, #2]
 800e69c:	883a      	ldrh	r2, [r7, #0]
 800e69e:	78f9      	ldrb	r1, [r7, #3]
 800e6a0:	f7f7 f91b 	bl	80058da <HAL_PCD_EP_Open>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 f91c 	bl	800e8e8 <USBD_Get_USB_Status>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b084      	sub	sp, #16
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	6078      	str	r0, [r7, #4]
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6d8:	78fa      	ldrb	r2, [r7, #3]
 800e6da:	4611      	mov	r1, r2
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7f7 f964 	bl	80059aa <HAL_PCD_EP_Close>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f000 f8fd 	bl	800e8e8 <USBD_Get_USB_Status>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	460b      	mov	r3, r1
 800e706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e70c:	2300      	movs	r3, #0
 800e70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e716:	78fa      	ldrb	r2, [r7, #3]
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7f7 fa3c 	bl	8005b98 <HAL_PCD_EP_SetStall>
 800e720:	4603      	mov	r3, r0
 800e722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e724:	7bfb      	ldrb	r3, [r7, #15]
 800e726:	4618      	mov	r0, r3
 800e728:	f000 f8de 	bl	800e8e8 <USBD_Get_USB_Status>
 800e72c:	4603      	mov	r3, r0
 800e72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e730:	7bbb      	ldrb	r3, [r7, #14]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b084      	sub	sp, #16
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
 800e742:	460b      	mov	r3, r1
 800e744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e746:	2300      	movs	r3, #0
 800e748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e74a:	2300      	movs	r3, #0
 800e74c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e754:	78fa      	ldrb	r2, [r7, #3]
 800e756:	4611      	mov	r1, r2
 800e758:	4618      	mov	r0, r3
 800e75a:	f7f7 fa81 	bl	8005c60 <HAL_PCD_EP_ClrStall>
 800e75e:	4603      	mov	r3, r0
 800e760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	4618      	mov	r0, r3
 800e766:	f000 f8bf 	bl	800e8e8 <USBD_Get_USB_Status>
 800e76a:	4603      	mov	r3, r0
 800e76c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e76e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	460b      	mov	r3, r1
 800e782:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e78a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e78c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e790:	2b00      	cmp	r3, #0
 800e792:	da0b      	bge.n	800e7ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e794:	78fb      	ldrb	r3, [r7, #3]
 800e796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e79a:	68f9      	ldr	r1, [r7, #12]
 800e79c:	4613      	mov	r3, r2
 800e79e:	00db      	lsls	r3, r3, #3
 800e7a0:	4413      	add	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	440b      	add	r3, r1
 800e7a6:	333e      	adds	r3, #62	; 0x3e
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	e00b      	b.n	800e7c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e7ac:	78fb      	ldrb	r3, [r7, #3]
 800e7ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7b2:	68f9      	ldr	r1, [r7, #12]
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	00db      	lsls	r3, r3, #3
 800e7b8:	4413      	add	r3, r2
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	440b      	add	r3, r1
 800e7be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e7c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3714      	adds	r7, #20
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7ea:	78fa      	ldrb	r2, [r7, #3]
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7f7 f84e 	bl	8005890 <HAL_PCD_SetAddress>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7f8:	7bfb      	ldrb	r3, [r7, #15]
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f000 f874 	bl	800e8e8 <USBD_Get_USB_Status>
 800e800:	4603      	mov	r3, r0
 800e802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e804:	7bbb      	ldrb	r3, [r7, #14]
}
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b086      	sub	sp, #24
 800e812:	af00      	add	r7, sp, #0
 800e814:	60f8      	str	r0, [r7, #12]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	603b      	str	r3, [r7, #0]
 800e81a:	460b      	mov	r3, r1
 800e81c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e81e:	2300      	movs	r3, #0
 800e820:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e822:	2300      	movs	r3, #0
 800e824:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e82c:	7af9      	ldrb	r1, [r7, #11]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	f7f7 f967 	bl	8005b04 <HAL_PCD_EP_Transmit>
 800e836:	4603      	mov	r3, r0
 800e838:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f000 f853 	bl	800e8e8 <USBD_Get_USB_Status>
 800e842:	4603      	mov	r3, r0
 800e844:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e846:	7dbb      	ldrb	r3, [r7, #22]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3718      	adds	r7, #24
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	607a      	str	r2, [r7, #4]
 800e85a:	603b      	str	r3, [r7, #0]
 800e85c:	460b      	mov	r3, r1
 800e85e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e860:	2300      	movs	r3, #0
 800e862:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e86e:	7af9      	ldrb	r1, [r7, #11]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	f7f7 f8e3 	bl	8005a3e <HAL_PCD_EP_Receive>
 800e878:	4603      	mov	r3, r0
 800e87a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	4618      	mov	r0, r3
 800e880:	f000 f832 	bl	800e8e8 <USBD_Get_USB_Status>
 800e884:	4603      	mov	r3, r0
 800e886:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e888:	7dbb      	ldrb	r3, [r7, #22]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3718      	adds	r7, #24
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b082      	sub	sp, #8
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
 800e89a:	460b      	mov	r3, r1
 800e89c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8a4:	78fa      	ldrb	r2, [r7, #3]
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7f7 f913 	bl	8005ad4 <HAL_PCD_EP_GetRxCount>
 800e8ae:	4603      	mov	r3, r0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e8c0:	4b03      	ldr	r3, [pc, #12]	; (800e8d0 <USBD_static_malloc+0x18>)
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	20001fe4 	.word	0x20001fe4

0800e8d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]

}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e8f6:	79fb      	ldrb	r3, [r7, #7]
 800e8f8:	2b03      	cmp	r3, #3
 800e8fa:	d817      	bhi.n	800e92c <USBD_Get_USB_Status+0x44>
 800e8fc:	a201      	add	r2, pc, #4	; (adr r2, 800e904 <USBD_Get_USB_Status+0x1c>)
 800e8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e902:	bf00      	nop
 800e904:	0800e915 	.word	0x0800e915
 800e908:	0800e91b 	.word	0x0800e91b
 800e90c:	0800e921 	.word	0x0800e921
 800e910:	0800e927 	.word	0x0800e927
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e914:	2300      	movs	r3, #0
 800e916:	73fb      	strb	r3, [r7, #15]
    break;
 800e918:	e00b      	b.n	800e932 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e91a:	2303      	movs	r3, #3
 800e91c:	73fb      	strb	r3, [r7, #15]
    break;
 800e91e:	e008      	b.n	800e932 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e920:	2301      	movs	r3, #1
 800e922:	73fb      	strb	r3, [r7, #15]
    break;
 800e924:	e005      	b.n	800e932 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e926:	2303      	movs	r3, #3
 800e928:	73fb      	strb	r3, [r7, #15]
    break;
 800e92a:	e002      	b.n	800e932 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e92c:	2303      	movs	r3, #3
 800e92e:	73fb      	strb	r3, [r7, #15]
    break;
 800e930:	bf00      	nop
  }
  return usb_status;
 800e932:	7bfb      	ldrb	r3, [r7, #15]
}
 800e934:	4618      	mov	r0, r3
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <malloc>:
 800e940:	4b02      	ldr	r3, [pc, #8]	; (800e94c <malloc+0xc>)
 800e942:	4601      	mov	r1, r0
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	f000 b82b 	b.w	800e9a0 <_malloc_r>
 800e94a:	bf00      	nop
 800e94c:	20000168 	.word	0x20000168

0800e950 <free>:
 800e950:	4b02      	ldr	r3, [pc, #8]	; (800e95c <free+0xc>)
 800e952:	4601      	mov	r1, r0
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	f001 bd4d 	b.w	80103f4 <_free_r>
 800e95a:	bf00      	nop
 800e95c:	20000168 	.word	0x20000168

0800e960 <sbrk_aligned>:
 800e960:	b570      	push	{r4, r5, r6, lr}
 800e962:	4e0e      	ldr	r6, [pc, #56]	; (800e99c <sbrk_aligned+0x3c>)
 800e964:	460c      	mov	r4, r1
 800e966:	6831      	ldr	r1, [r6, #0]
 800e968:	4605      	mov	r5, r0
 800e96a:	b911      	cbnz	r1, 800e972 <sbrk_aligned+0x12>
 800e96c:	f000 fe6c 	bl	800f648 <_sbrk_r>
 800e970:	6030      	str	r0, [r6, #0]
 800e972:	4621      	mov	r1, r4
 800e974:	4628      	mov	r0, r5
 800e976:	f000 fe67 	bl	800f648 <_sbrk_r>
 800e97a:	1c43      	adds	r3, r0, #1
 800e97c:	d00a      	beq.n	800e994 <sbrk_aligned+0x34>
 800e97e:	1cc4      	adds	r4, r0, #3
 800e980:	f024 0403 	bic.w	r4, r4, #3
 800e984:	42a0      	cmp	r0, r4
 800e986:	d007      	beq.n	800e998 <sbrk_aligned+0x38>
 800e988:	1a21      	subs	r1, r4, r0
 800e98a:	4628      	mov	r0, r5
 800e98c:	f000 fe5c 	bl	800f648 <_sbrk_r>
 800e990:	3001      	adds	r0, #1
 800e992:	d101      	bne.n	800e998 <sbrk_aligned+0x38>
 800e994:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e998:	4620      	mov	r0, r4
 800e99a:	bd70      	pop	{r4, r5, r6, pc}
 800e99c:	20002208 	.word	0x20002208

0800e9a0 <_malloc_r>:
 800e9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9a4:	1ccd      	adds	r5, r1, #3
 800e9a6:	f025 0503 	bic.w	r5, r5, #3
 800e9aa:	3508      	adds	r5, #8
 800e9ac:	2d0c      	cmp	r5, #12
 800e9ae:	bf38      	it	cc
 800e9b0:	250c      	movcc	r5, #12
 800e9b2:	2d00      	cmp	r5, #0
 800e9b4:	4607      	mov	r7, r0
 800e9b6:	db01      	blt.n	800e9bc <_malloc_r+0x1c>
 800e9b8:	42a9      	cmp	r1, r5
 800e9ba:	d905      	bls.n	800e9c8 <_malloc_r+0x28>
 800e9bc:	230c      	movs	r3, #12
 800e9be:	603b      	str	r3, [r7, #0]
 800e9c0:	2600      	movs	r6, #0
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ea9c <_malloc_r+0xfc>
 800e9cc:	f000 f868 	bl	800eaa0 <__malloc_lock>
 800e9d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e9d4:	461c      	mov	r4, r3
 800e9d6:	bb5c      	cbnz	r4, 800ea30 <_malloc_r+0x90>
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4638      	mov	r0, r7
 800e9dc:	f7ff ffc0 	bl	800e960 <sbrk_aligned>
 800e9e0:	1c43      	adds	r3, r0, #1
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	d155      	bne.n	800ea92 <_malloc_r+0xf2>
 800e9e6:	f8d8 4000 	ldr.w	r4, [r8]
 800e9ea:	4626      	mov	r6, r4
 800e9ec:	2e00      	cmp	r6, #0
 800e9ee:	d145      	bne.n	800ea7c <_malloc_r+0xdc>
 800e9f0:	2c00      	cmp	r4, #0
 800e9f2:	d048      	beq.n	800ea86 <_malloc_r+0xe6>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	4631      	mov	r1, r6
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	eb04 0903 	add.w	r9, r4, r3
 800e9fe:	f000 fe23 	bl	800f648 <_sbrk_r>
 800ea02:	4581      	cmp	r9, r0
 800ea04:	d13f      	bne.n	800ea86 <_malloc_r+0xe6>
 800ea06:	6821      	ldr	r1, [r4, #0]
 800ea08:	1a6d      	subs	r5, r5, r1
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	4638      	mov	r0, r7
 800ea0e:	f7ff ffa7 	bl	800e960 <sbrk_aligned>
 800ea12:	3001      	adds	r0, #1
 800ea14:	d037      	beq.n	800ea86 <_malloc_r+0xe6>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	442b      	add	r3, r5
 800ea1a:	6023      	str	r3, [r4, #0]
 800ea1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d038      	beq.n	800ea96 <_malloc_r+0xf6>
 800ea24:	685a      	ldr	r2, [r3, #4]
 800ea26:	42a2      	cmp	r2, r4
 800ea28:	d12b      	bne.n	800ea82 <_malloc_r+0xe2>
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	605a      	str	r2, [r3, #4]
 800ea2e:	e00f      	b.n	800ea50 <_malloc_r+0xb0>
 800ea30:	6822      	ldr	r2, [r4, #0]
 800ea32:	1b52      	subs	r2, r2, r5
 800ea34:	d41f      	bmi.n	800ea76 <_malloc_r+0xd6>
 800ea36:	2a0b      	cmp	r2, #11
 800ea38:	d917      	bls.n	800ea6a <_malloc_r+0xca>
 800ea3a:	1961      	adds	r1, r4, r5
 800ea3c:	42a3      	cmp	r3, r4
 800ea3e:	6025      	str	r5, [r4, #0]
 800ea40:	bf18      	it	ne
 800ea42:	6059      	strne	r1, [r3, #4]
 800ea44:	6863      	ldr	r3, [r4, #4]
 800ea46:	bf08      	it	eq
 800ea48:	f8c8 1000 	streq.w	r1, [r8]
 800ea4c:	5162      	str	r2, [r4, r5]
 800ea4e:	604b      	str	r3, [r1, #4]
 800ea50:	4638      	mov	r0, r7
 800ea52:	f104 060b 	add.w	r6, r4, #11
 800ea56:	f000 f829 	bl	800eaac <__malloc_unlock>
 800ea5a:	f026 0607 	bic.w	r6, r6, #7
 800ea5e:	1d23      	adds	r3, r4, #4
 800ea60:	1af2      	subs	r2, r6, r3
 800ea62:	d0ae      	beq.n	800e9c2 <_malloc_r+0x22>
 800ea64:	1b9b      	subs	r3, r3, r6
 800ea66:	50a3      	str	r3, [r4, r2]
 800ea68:	e7ab      	b.n	800e9c2 <_malloc_r+0x22>
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	6862      	ldr	r2, [r4, #4]
 800ea6e:	d1dd      	bne.n	800ea2c <_malloc_r+0x8c>
 800ea70:	f8c8 2000 	str.w	r2, [r8]
 800ea74:	e7ec      	b.n	800ea50 <_malloc_r+0xb0>
 800ea76:	4623      	mov	r3, r4
 800ea78:	6864      	ldr	r4, [r4, #4]
 800ea7a:	e7ac      	b.n	800e9d6 <_malloc_r+0x36>
 800ea7c:	4634      	mov	r4, r6
 800ea7e:	6876      	ldr	r6, [r6, #4]
 800ea80:	e7b4      	b.n	800e9ec <_malloc_r+0x4c>
 800ea82:	4613      	mov	r3, r2
 800ea84:	e7cc      	b.n	800ea20 <_malloc_r+0x80>
 800ea86:	230c      	movs	r3, #12
 800ea88:	603b      	str	r3, [r7, #0]
 800ea8a:	4638      	mov	r0, r7
 800ea8c:	f000 f80e 	bl	800eaac <__malloc_unlock>
 800ea90:	e797      	b.n	800e9c2 <_malloc_r+0x22>
 800ea92:	6025      	str	r5, [r4, #0]
 800ea94:	e7dc      	b.n	800ea50 <_malloc_r+0xb0>
 800ea96:	605b      	str	r3, [r3, #4]
 800ea98:	deff      	udf	#255	; 0xff
 800ea9a:	bf00      	nop
 800ea9c:	20002204 	.word	0x20002204

0800eaa0 <__malloc_lock>:
 800eaa0:	4801      	ldr	r0, [pc, #4]	; (800eaa8 <__malloc_lock+0x8>)
 800eaa2:	f000 be1d 	b.w	800f6e0 <__retarget_lock_acquire_recursive>
 800eaa6:	bf00      	nop
 800eaa8:	2000234c 	.word	0x2000234c

0800eaac <__malloc_unlock>:
 800eaac:	4801      	ldr	r0, [pc, #4]	; (800eab4 <__malloc_unlock+0x8>)
 800eaae:	f000 be18 	b.w	800f6e2 <__retarget_lock_release_recursive>
 800eab2:	bf00      	nop
 800eab4:	2000234c 	.word	0x2000234c

0800eab8 <__cvt>:
 800eab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eabc:	ec55 4b10 	vmov	r4, r5, d0
 800eac0:	2d00      	cmp	r5, #0
 800eac2:	460e      	mov	r6, r1
 800eac4:	4619      	mov	r1, r3
 800eac6:	462b      	mov	r3, r5
 800eac8:	bfbb      	ittet	lt
 800eaca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eace:	461d      	movlt	r5, r3
 800ead0:	2300      	movge	r3, #0
 800ead2:	232d      	movlt	r3, #45	; 0x2d
 800ead4:	700b      	strb	r3, [r1, #0]
 800ead6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ead8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eadc:	4691      	mov	r9, r2
 800eade:	f023 0820 	bic.w	r8, r3, #32
 800eae2:	bfbc      	itt	lt
 800eae4:	4622      	movlt	r2, r4
 800eae6:	4614      	movlt	r4, r2
 800eae8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eaec:	d005      	beq.n	800eafa <__cvt+0x42>
 800eaee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eaf2:	d100      	bne.n	800eaf6 <__cvt+0x3e>
 800eaf4:	3601      	adds	r6, #1
 800eaf6:	2102      	movs	r1, #2
 800eaf8:	e000      	b.n	800eafc <__cvt+0x44>
 800eafa:	2103      	movs	r1, #3
 800eafc:	ab03      	add	r3, sp, #12
 800eafe:	9301      	str	r3, [sp, #4]
 800eb00:	ab02      	add	r3, sp, #8
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	ec45 4b10 	vmov	d0, r4, r5
 800eb08:	4653      	mov	r3, sl
 800eb0a:	4632      	mov	r2, r6
 800eb0c:	f000 fe80 	bl	800f810 <_dtoa_r>
 800eb10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eb14:	4607      	mov	r7, r0
 800eb16:	d102      	bne.n	800eb1e <__cvt+0x66>
 800eb18:	f019 0f01 	tst.w	r9, #1
 800eb1c:	d022      	beq.n	800eb64 <__cvt+0xac>
 800eb1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eb22:	eb07 0906 	add.w	r9, r7, r6
 800eb26:	d110      	bne.n	800eb4a <__cvt+0x92>
 800eb28:	783b      	ldrb	r3, [r7, #0]
 800eb2a:	2b30      	cmp	r3, #48	; 0x30
 800eb2c:	d10a      	bne.n	800eb44 <__cvt+0x8c>
 800eb2e:	2200      	movs	r2, #0
 800eb30:	2300      	movs	r3, #0
 800eb32:	4620      	mov	r0, r4
 800eb34:	4629      	mov	r1, r5
 800eb36:	f7f1 ffcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb3a:	b918      	cbnz	r0, 800eb44 <__cvt+0x8c>
 800eb3c:	f1c6 0601 	rsb	r6, r6, #1
 800eb40:	f8ca 6000 	str.w	r6, [sl]
 800eb44:	f8da 3000 	ldr.w	r3, [sl]
 800eb48:	4499      	add	r9, r3
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	4620      	mov	r0, r4
 800eb50:	4629      	mov	r1, r5
 800eb52:	f7f1 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb56:	b108      	cbz	r0, 800eb5c <__cvt+0xa4>
 800eb58:	f8cd 900c 	str.w	r9, [sp, #12]
 800eb5c:	2230      	movs	r2, #48	; 0x30
 800eb5e:	9b03      	ldr	r3, [sp, #12]
 800eb60:	454b      	cmp	r3, r9
 800eb62:	d307      	bcc.n	800eb74 <__cvt+0xbc>
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb68:	1bdb      	subs	r3, r3, r7
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	6013      	str	r3, [r2, #0]
 800eb6e:	b004      	add	sp, #16
 800eb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb74:	1c59      	adds	r1, r3, #1
 800eb76:	9103      	str	r1, [sp, #12]
 800eb78:	701a      	strb	r2, [r3, #0]
 800eb7a:	e7f0      	b.n	800eb5e <__cvt+0xa6>

0800eb7c <__exponent>:
 800eb7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2900      	cmp	r1, #0
 800eb82:	bfb8      	it	lt
 800eb84:	4249      	neglt	r1, r1
 800eb86:	f803 2b02 	strb.w	r2, [r3], #2
 800eb8a:	bfb4      	ite	lt
 800eb8c:	222d      	movlt	r2, #45	; 0x2d
 800eb8e:	222b      	movge	r2, #43	; 0x2b
 800eb90:	2909      	cmp	r1, #9
 800eb92:	7042      	strb	r2, [r0, #1]
 800eb94:	dd2a      	ble.n	800ebec <__exponent+0x70>
 800eb96:	f10d 0207 	add.w	r2, sp, #7
 800eb9a:	4617      	mov	r7, r2
 800eb9c:	260a      	movs	r6, #10
 800eb9e:	4694      	mov	ip, r2
 800eba0:	fb91 f5f6 	sdiv	r5, r1, r6
 800eba4:	fb06 1415 	mls	r4, r6, r5, r1
 800eba8:	3430      	adds	r4, #48	; 0x30
 800ebaa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ebae:	460c      	mov	r4, r1
 800ebb0:	2c63      	cmp	r4, #99	; 0x63
 800ebb2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ebb6:	4629      	mov	r1, r5
 800ebb8:	dcf1      	bgt.n	800eb9e <__exponent+0x22>
 800ebba:	3130      	adds	r1, #48	; 0x30
 800ebbc:	f1ac 0402 	sub.w	r4, ip, #2
 800ebc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ebc4:	1c41      	adds	r1, r0, #1
 800ebc6:	4622      	mov	r2, r4
 800ebc8:	42ba      	cmp	r2, r7
 800ebca:	d30a      	bcc.n	800ebe2 <__exponent+0x66>
 800ebcc:	f10d 0209 	add.w	r2, sp, #9
 800ebd0:	eba2 020c 	sub.w	r2, r2, ip
 800ebd4:	42bc      	cmp	r4, r7
 800ebd6:	bf88      	it	hi
 800ebd8:	2200      	movhi	r2, #0
 800ebda:	4413      	add	r3, r2
 800ebdc:	1a18      	subs	r0, r3, r0
 800ebde:	b003      	add	sp, #12
 800ebe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebe2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ebe6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ebea:	e7ed      	b.n	800ebc8 <__exponent+0x4c>
 800ebec:	2330      	movs	r3, #48	; 0x30
 800ebee:	3130      	adds	r1, #48	; 0x30
 800ebf0:	7083      	strb	r3, [r0, #2]
 800ebf2:	70c1      	strb	r1, [r0, #3]
 800ebf4:	1d03      	adds	r3, r0, #4
 800ebf6:	e7f1      	b.n	800ebdc <__exponent+0x60>

0800ebf8 <_printf_float>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	ed2d 8b02 	vpush	{d8}
 800ec00:	b08d      	sub	sp, #52	; 0x34
 800ec02:	460c      	mov	r4, r1
 800ec04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ec08:	4616      	mov	r6, r2
 800ec0a:	461f      	mov	r7, r3
 800ec0c:	4605      	mov	r5, r0
 800ec0e:	f000 fce3 	bl	800f5d8 <_localeconv_r>
 800ec12:	f8d0 a000 	ldr.w	sl, [r0]
 800ec16:	4650      	mov	r0, sl
 800ec18:	f7f1 fb32 	bl	8000280 <strlen>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	9305      	str	r3, [sp, #20]
 800ec24:	f8d8 3000 	ldr.w	r3, [r8]
 800ec28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ec2c:	3307      	adds	r3, #7
 800ec2e:	f023 0307 	bic.w	r3, r3, #7
 800ec32:	f103 0208 	add.w	r2, r3, #8
 800ec36:	f8c8 2000 	str.w	r2, [r8]
 800ec3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ec42:	9307      	str	r3, [sp, #28]
 800ec44:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec48:	ee08 0a10 	vmov	s16, r0
 800ec4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ec50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec54:	4b9e      	ldr	r3, [pc, #632]	; (800eed0 <_printf_float+0x2d8>)
 800ec56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec5a:	f7f1 ff6f 	bl	8000b3c <__aeabi_dcmpun>
 800ec5e:	bb88      	cbnz	r0, 800ecc4 <_printf_float+0xcc>
 800ec60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec64:	4b9a      	ldr	r3, [pc, #616]	; (800eed0 <_printf_float+0x2d8>)
 800ec66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec6a:	f7f1 ff49 	bl	8000b00 <__aeabi_dcmple>
 800ec6e:	bb48      	cbnz	r0, 800ecc4 <_printf_float+0xcc>
 800ec70:	2200      	movs	r2, #0
 800ec72:	2300      	movs	r3, #0
 800ec74:	4640      	mov	r0, r8
 800ec76:	4649      	mov	r1, r9
 800ec78:	f7f1 ff38 	bl	8000aec <__aeabi_dcmplt>
 800ec7c:	b110      	cbz	r0, 800ec84 <_printf_float+0x8c>
 800ec7e:	232d      	movs	r3, #45	; 0x2d
 800ec80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec84:	4a93      	ldr	r2, [pc, #588]	; (800eed4 <_printf_float+0x2dc>)
 800ec86:	4b94      	ldr	r3, [pc, #592]	; (800eed8 <_printf_float+0x2e0>)
 800ec88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ec8c:	bf94      	ite	ls
 800ec8e:	4690      	movls	r8, r2
 800ec90:	4698      	movhi	r8, r3
 800ec92:	2303      	movs	r3, #3
 800ec94:	6123      	str	r3, [r4, #16]
 800ec96:	9b05      	ldr	r3, [sp, #20]
 800ec98:	f023 0304 	bic.w	r3, r3, #4
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	f04f 0900 	mov.w	r9, #0
 800eca2:	9700      	str	r7, [sp, #0]
 800eca4:	4633      	mov	r3, r6
 800eca6:	aa0b      	add	r2, sp, #44	; 0x2c
 800eca8:	4621      	mov	r1, r4
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f000 f9da 	bl	800f064 <_printf_common>
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	f040 8090 	bne.w	800edd6 <_printf_float+0x1de>
 800ecb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecba:	b00d      	add	sp, #52	; 0x34
 800ecbc:	ecbd 8b02 	vpop	{d8}
 800ecc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc4:	4642      	mov	r2, r8
 800ecc6:	464b      	mov	r3, r9
 800ecc8:	4640      	mov	r0, r8
 800ecca:	4649      	mov	r1, r9
 800eccc:	f7f1 ff36 	bl	8000b3c <__aeabi_dcmpun>
 800ecd0:	b140      	cbz	r0, 800ece4 <_printf_float+0xec>
 800ecd2:	464b      	mov	r3, r9
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	bfbc      	itt	lt
 800ecd8:	232d      	movlt	r3, #45	; 0x2d
 800ecda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ecde:	4a7f      	ldr	r2, [pc, #508]	; (800eedc <_printf_float+0x2e4>)
 800ece0:	4b7f      	ldr	r3, [pc, #508]	; (800eee0 <_printf_float+0x2e8>)
 800ece2:	e7d1      	b.n	800ec88 <_printf_float+0x90>
 800ece4:	6863      	ldr	r3, [r4, #4]
 800ece6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ecea:	9206      	str	r2, [sp, #24]
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	d13f      	bne.n	800ed70 <_printf_float+0x178>
 800ecf0:	2306      	movs	r3, #6
 800ecf2:	6063      	str	r3, [r4, #4]
 800ecf4:	9b05      	ldr	r3, [sp, #20]
 800ecf6:	6861      	ldr	r1, [r4, #4]
 800ecf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	9303      	str	r3, [sp, #12]
 800ed00:	ab0a      	add	r3, sp, #40	; 0x28
 800ed02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ed06:	ab09      	add	r3, sp, #36	; 0x24
 800ed08:	ec49 8b10 	vmov	d0, r8, r9
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	6022      	str	r2, [r4, #0]
 800ed10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ed14:	4628      	mov	r0, r5
 800ed16:	f7ff fecf 	bl	800eab8 <__cvt>
 800ed1a:	9b06      	ldr	r3, [sp, #24]
 800ed1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed1e:	2b47      	cmp	r3, #71	; 0x47
 800ed20:	4680      	mov	r8, r0
 800ed22:	d108      	bne.n	800ed36 <_printf_float+0x13e>
 800ed24:	1cc8      	adds	r0, r1, #3
 800ed26:	db02      	blt.n	800ed2e <_printf_float+0x136>
 800ed28:	6863      	ldr	r3, [r4, #4]
 800ed2a:	4299      	cmp	r1, r3
 800ed2c:	dd41      	ble.n	800edb2 <_printf_float+0x1ba>
 800ed2e:	f1ab 0302 	sub.w	r3, fp, #2
 800ed32:	fa5f fb83 	uxtb.w	fp, r3
 800ed36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ed3a:	d820      	bhi.n	800ed7e <_printf_float+0x186>
 800ed3c:	3901      	subs	r1, #1
 800ed3e:	465a      	mov	r2, fp
 800ed40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ed44:	9109      	str	r1, [sp, #36]	; 0x24
 800ed46:	f7ff ff19 	bl	800eb7c <__exponent>
 800ed4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed4c:	1813      	adds	r3, r2, r0
 800ed4e:	2a01      	cmp	r2, #1
 800ed50:	4681      	mov	r9, r0
 800ed52:	6123      	str	r3, [r4, #16]
 800ed54:	dc02      	bgt.n	800ed5c <_printf_float+0x164>
 800ed56:	6822      	ldr	r2, [r4, #0]
 800ed58:	07d2      	lsls	r2, r2, #31
 800ed5a:	d501      	bpl.n	800ed60 <_printf_float+0x168>
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	6123      	str	r3, [r4, #16]
 800ed60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d09c      	beq.n	800eca2 <_printf_float+0xaa>
 800ed68:	232d      	movs	r3, #45	; 0x2d
 800ed6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed6e:	e798      	b.n	800eca2 <_printf_float+0xaa>
 800ed70:	9a06      	ldr	r2, [sp, #24]
 800ed72:	2a47      	cmp	r2, #71	; 0x47
 800ed74:	d1be      	bne.n	800ecf4 <_printf_float+0xfc>
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d1bc      	bne.n	800ecf4 <_printf_float+0xfc>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e7b9      	b.n	800ecf2 <_printf_float+0xfa>
 800ed7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ed82:	d118      	bne.n	800edb6 <_printf_float+0x1be>
 800ed84:	2900      	cmp	r1, #0
 800ed86:	6863      	ldr	r3, [r4, #4]
 800ed88:	dd0b      	ble.n	800eda2 <_printf_float+0x1aa>
 800ed8a:	6121      	str	r1, [r4, #16]
 800ed8c:	b913      	cbnz	r3, 800ed94 <_printf_float+0x19c>
 800ed8e:	6822      	ldr	r2, [r4, #0]
 800ed90:	07d0      	lsls	r0, r2, #31
 800ed92:	d502      	bpl.n	800ed9a <_printf_float+0x1a2>
 800ed94:	3301      	adds	r3, #1
 800ed96:	440b      	add	r3, r1
 800ed98:	6123      	str	r3, [r4, #16]
 800ed9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ed9c:	f04f 0900 	mov.w	r9, #0
 800eda0:	e7de      	b.n	800ed60 <_printf_float+0x168>
 800eda2:	b913      	cbnz	r3, 800edaa <_printf_float+0x1b2>
 800eda4:	6822      	ldr	r2, [r4, #0]
 800eda6:	07d2      	lsls	r2, r2, #31
 800eda8:	d501      	bpl.n	800edae <_printf_float+0x1b6>
 800edaa:	3302      	adds	r3, #2
 800edac:	e7f4      	b.n	800ed98 <_printf_float+0x1a0>
 800edae:	2301      	movs	r3, #1
 800edb0:	e7f2      	b.n	800ed98 <_printf_float+0x1a0>
 800edb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800edb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edb8:	4299      	cmp	r1, r3
 800edba:	db05      	blt.n	800edc8 <_printf_float+0x1d0>
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	6121      	str	r1, [r4, #16]
 800edc0:	07d8      	lsls	r0, r3, #31
 800edc2:	d5ea      	bpl.n	800ed9a <_printf_float+0x1a2>
 800edc4:	1c4b      	adds	r3, r1, #1
 800edc6:	e7e7      	b.n	800ed98 <_printf_float+0x1a0>
 800edc8:	2900      	cmp	r1, #0
 800edca:	bfd4      	ite	le
 800edcc:	f1c1 0202 	rsble	r2, r1, #2
 800edd0:	2201      	movgt	r2, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	e7e0      	b.n	800ed98 <_printf_float+0x1a0>
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	055a      	lsls	r2, r3, #21
 800edda:	d407      	bmi.n	800edec <_printf_float+0x1f4>
 800eddc:	6923      	ldr	r3, [r4, #16]
 800edde:	4642      	mov	r2, r8
 800ede0:	4631      	mov	r1, r6
 800ede2:	4628      	mov	r0, r5
 800ede4:	47b8      	blx	r7
 800ede6:	3001      	adds	r0, #1
 800ede8:	d12c      	bne.n	800ee44 <_printf_float+0x24c>
 800edea:	e764      	b.n	800ecb6 <_printf_float+0xbe>
 800edec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800edf0:	f240 80e0 	bls.w	800efb4 <_printf_float+0x3bc>
 800edf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800edf8:	2200      	movs	r2, #0
 800edfa:	2300      	movs	r3, #0
 800edfc:	f7f1 fe6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d034      	beq.n	800ee6e <_printf_float+0x276>
 800ee04:	4a37      	ldr	r2, [pc, #220]	; (800eee4 <_printf_float+0x2ec>)
 800ee06:	2301      	movs	r3, #1
 800ee08:	4631      	mov	r1, r6
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	47b8      	blx	r7
 800ee0e:	3001      	adds	r0, #1
 800ee10:	f43f af51 	beq.w	800ecb6 <_printf_float+0xbe>
 800ee14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	db02      	blt.n	800ee22 <_printf_float+0x22a>
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	07d8      	lsls	r0, r3, #31
 800ee20:	d510      	bpl.n	800ee44 <_printf_float+0x24c>
 800ee22:	ee18 3a10 	vmov	r3, s16
 800ee26:	4652      	mov	r2, sl
 800ee28:	4631      	mov	r1, r6
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	47b8      	blx	r7
 800ee2e:	3001      	adds	r0, #1
 800ee30:	f43f af41 	beq.w	800ecb6 <_printf_float+0xbe>
 800ee34:	f04f 0800 	mov.w	r8, #0
 800ee38:	f104 091a 	add.w	r9, r4, #26
 800ee3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	4543      	cmp	r3, r8
 800ee42:	dc09      	bgt.n	800ee58 <_printf_float+0x260>
 800ee44:	6823      	ldr	r3, [r4, #0]
 800ee46:	079b      	lsls	r3, r3, #30
 800ee48:	f100 8107 	bmi.w	800f05a <_printf_float+0x462>
 800ee4c:	68e0      	ldr	r0, [r4, #12]
 800ee4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee50:	4298      	cmp	r0, r3
 800ee52:	bfb8      	it	lt
 800ee54:	4618      	movlt	r0, r3
 800ee56:	e730      	b.n	800ecba <_printf_float+0xc2>
 800ee58:	2301      	movs	r3, #1
 800ee5a:	464a      	mov	r2, r9
 800ee5c:	4631      	mov	r1, r6
 800ee5e:	4628      	mov	r0, r5
 800ee60:	47b8      	blx	r7
 800ee62:	3001      	adds	r0, #1
 800ee64:	f43f af27 	beq.w	800ecb6 <_printf_float+0xbe>
 800ee68:	f108 0801 	add.w	r8, r8, #1
 800ee6c:	e7e6      	b.n	800ee3c <_printf_float+0x244>
 800ee6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	dc39      	bgt.n	800eee8 <_printf_float+0x2f0>
 800ee74:	4a1b      	ldr	r2, [pc, #108]	; (800eee4 <_printf_float+0x2ec>)
 800ee76:	2301      	movs	r3, #1
 800ee78:	4631      	mov	r1, r6
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	47b8      	blx	r7
 800ee7e:	3001      	adds	r0, #1
 800ee80:	f43f af19 	beq.w	800ecb6 <_printf_float+0xbe>
 800ee84:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	d102      	bne.n	800ee92 <_printf_float+0x29a>
 800ee8c:	6823      	ldr	r3, [r4, #0]
 800ee8e:	07d9      	lsls	r1, r3, #31
 800ee90:	d5d8      	bpl.n	800ee44 <_printf_float+0x24c>
 800ee92:	ee18 3a10 	vmov	r3, s16
 800ee96:	4652      	mov	r2, sl
 800ee98:	4631      	mov	r1, r6
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	47b8      	blx	r7
 800ee9e:	3001      	adds	r0, #1
 800eea0:	f43f af09 	beq.w	800ecb6 <_printf_float+0xbe>
 800eea4:	f04f 0900 	mov.w	r9, #0
 800eea8:	f104 0a1a 	add.w	sl, r4, #26
 800eeac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeae:	425b      	negs	r3, r3
 800eeb0:	454b      	cmp	r3, r9
 800eeb2:	dc01      	bgt.n	800eeb8 <_printf_float+0x2c0>
 800eeb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeb6:	e792      	b.n	800edde <_printf_float+0x1e6>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	4652      	mov	r2, sl
 800eebc:	4631      	mov	r1, r6
 800eebe:	4628      	mov	r0, r5
 800eec0:	47b8      	blx	r7
 800eec2:	3001      	adds	r0, #1
 800eec4:	f43f aef7 	beq.w	800ecb6 <_printf_float+0xbe>
 800eec8:	f109 0901 	add.w	r9, r9, #1
 800eecc:	e7ee      	b.n	800eeac <_printf_float+0x2b4>
 800eece:	bf00      	nop
 800eed0:	7fefffff 	.word	0x7fefffff
 800eed4:	08011894 	.word	0x08011894
 800eed8:	08011898 	.word	0x08011898
 800eedc:	0801189c 	.word	0x0801189c
 800eee0:	080118a0 	.word	0x080118a0
 800eee4:	080118a4 	.word	0x080118a4
 800eee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eeea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eeec:	429a      	cmp	r2, r3
 800eeee:	bfa8      	it	ge
 800eef0:	461a      	movge	r2, r3
 800eef2:	2a00      	cmp	r2, #0
 800eef4:	4691      	mov	r9, r2
 800eef6:	dc37      	bgt.n	800ef68 <_printf_float+0x370>
 800eef8:	f04f 0b00 	mov.w	fp, #0
 800eefc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef00:	f104 021a 	add.w	r2, r4, #26
 800ef04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef06:	9305      	str	r3, [sp, #20]
 800ef08:	eba3 0309 	sub.w	r3, r3, r9
 800ef0c:	455b      	cmp	r3, fp
 800ef0e:	dc33      	bgt.n	800ef78 <_printf_float+0x380>
 800ef10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef14:	429a      	cmp	r2, r3
 800ef16:	db3b      	blt.n	800ef90 <_printf_float+0x398>
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	07da      	lsls	r2, r3, #31
 800ef1c:	d438      	bmi.n	800ef90 <_printf_float+0x398>
 800ef1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ef22:	eba2 0903 	sub.w	r9, r2, r3
 800ef26:	9b05      	ldr	r3, [sp, #20]
 800ef28:	1ad2      	subs	r2, r2, r3
 800ef2a:	4591      	cmp	r9, r2
 800ef2c:	bfa8      	it	ge
 800ef2e:	4691      	movge	r9, r2
 800ef30:	f1b9 0f00 	cmp.w	r9, #0
 800ef34:	dc35      	bgt.n	800efa2 <_printf_float+0x3aa>
 800ef36:	f04f 0800 	mov.w	r8, #0
 800ef3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef3e:	f104 0a1a 	add.w	sl, r4, #26
 800ef42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef46:	1a9b      	subs	r3, r3, r2
 800ef48:	eba3 0309 	sub.w	r3, r3, r9
 800ef4c:	4543      	cmp	r3, r8
 800ef4e:	f77f af79 	ble.w	800ee44 <_printf_float+0x24c>
 800ef52:	2301      	movs	r3, #1
 800ef54:	4652      	mov	r2, sl
 800ef56:	4631      	mov	r1, r6
 800ef58:	4628      	mov	r0, r5
 800ef5a:	47b8      	blx	r7
 800ef5c:	3001      	adds	r0, #1
 800ef5e:	f43f aeaa 	beq.w	800ecb6 <_printf_float+0xbe>
 800ef62:	f108 0801 	add.w	r8, r8, #1
 800ef66:	e7ec      	b.n	800ef42 <_printf_float+0x34a>
 800ef68:	4613      	mov	r3, r2
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	4642      	mov	r2, r8
 800ef6e:	4628      	mov	r0, r5
 800ef70:	47b8      	blx	r7
 800ef72:	3001      	adds	r0, #1
 800ef74:	d1c0      	bne.n	800eef8 <_printf_float+0x300>
 800ef76:	e69e      	b.n	800ecb6 <_printf_float+0xbe>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	4631      	mov	r1, r6
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	9205      	str	r2, [sp, #20]
 800ef80:	47b8      	blx	r7
 800ef82:	3001      	adds	r0, #1
 800ef84:	f43f ae97 	beq.w	800ecb6 <_printf_float+0xbe>
 800ef88:	9a05      	ldr	r2, [sp, #20]
 800ef8a:	f10b 0b01 	add.w	fp, fp, #1
 800ef8e:	e7b9      	b.n	800ef04 <_printf_float+0x30c>
 800ef90:	ee18 3a10 	vmov	r3, s16
 800ef94:	4652      	mov	r2, sl
 800ef96:	4631      	mov	r1, r6
 800ef98:	4628      	mov	r0, r5
 800ef9a:	47b8      	blx	r7
 800ef9c:	3001      	adds	r0, #1
 800ef9e:	d1be      	bne.n	800ef1e <_printf_float+0x326>
 800efa0:	e689      	b.n	800ecb6 <_printf_float+0xbe>
 800efa2:	9a05      	ldr	r2, [sp, #20]
 800efa4:	464b      	mov	r3, r9
 800efa6:	4442      	add	r2, r8
 800efa8:	4631      	mov	r1, r6
 800efaa:	4628      	mov	r0, r5
 800efac:	47b8      	blx	r7
 800efae:	3001      	adds	r0, #1
 800efb0:	d1c1      	bne.n	800ef36 <_printf_float+0x33e>
 800efb2:	e680      	b.n	800ecb6 <_printf_float+0xbe>
 800efb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efb6:	2a01      	cmp	r2, #1
 800efb8:	dc01      	bgt.n	800efbe <_printf_float+0x3c6>
 800efba:	07db      	lsls	r3, r3, #31
 800efbc:	d53a      	bpl.n	800f034 <_printf_float+0x43c>
 800efbe:	2301      	movs	r3, #1
 800efc0:	4642      	mov	r2, r8
 800efc2:	4631      	mov	r1, r6
 800efc4:	4628      	mov	r0, r5
 800efc6:	47b8      	blx	r7
 800efc8:	3001      	adds	r0, #1
 800efca:	f43f ae74 	beq.w	800ecb6 <_printf_float+0xbe>
 800efce:	ee18 3a10 	vmov	r3, s16
 800efd2:	4652      	mov	r2, sl
 800efd4:	4631      	mov	r1, r6
 800efd6:	4628      	mov	r0, r5
 800efd8:	47b8      	blx	r7
 800efda:	3001      	adds	r0, #1
 800efdc:	f43f ae6b 	beq.w	800ecb6 <_printf_float+0xbe>
 800efe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800efe4:	2200      	movs	r2, #0
 800efe6:	2300      	movs	r3, #0
 800efe8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800efec:	f7f1 fd74 	bl	8000ad8 <__aeabi_dcmpeq>
 800eff0:	b9d8      	cbnz	r0, 800f02a <_printf_float+0x432>
 800eff2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800eff6:	f108 0201 	add.w	r2, r8, #1
 800effa:	4631      	mov	r1, r6
 800effc:	4628      	mov	r0, r5
 800effe:	47b8      	blx	r7
 800f000:	3001      	adds	r0, #1
 800f002:	d10e      	bne.n	800f022 <_printf_float+0x42a>
 800f004:	e657      	b.n	800ecb6 <_printf_float+0xbe>
 800f006:	2301      	movs	r3, #1
 800f008:	4652      	mov	r2, sl
 800f00a:	4631      	mov	r1, r6
 800f00c:	4628      	mov	r0, r5
 800f00e:	47b8      	blx	r7
 800f010:	3001      	adds	r0, #1
 800f012:	f43f ae50 	beq.w	800ecb6 <_printf_float+0xbe>
 800f016:	f108 0801 	add.w	r8, r8, #1
 800f01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f01c:	3b01      	subs	r3, #1
 800f01e:	4543      	cmp	r3, r8
 800f020:	dcf1      	bgt.n	800f006 <_printf_float+0x40e>
 800f022:	464b      	mov	r3, r9
 800f024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f028:	e6da      	b.n	800ede0 <_printf_float+0x1e8>
 800f02a:	f04f 0800 	mov.w	r8, #0
 800f02e:	f104 0a1a 	add.w	sl, r4, #26
 800f032:	e7f2      	b.n	800f01a <_printf_float+0x422>
 800f034:	2301      	movs	r3, #1
 800f036:	4642      	mov	r2, r8
 800f038:	e7df      	b.n	800effa <_printf_float+0x402>
 800f03a:	2301      	movs	r3, #1
 800f03c:	464a      	mov	r2, r9
 800f03e:	4631      	mov	r1, r6
 800f040:	4628      	mov	r0, r5
 800f042:	47b8      	blx	r7
 800f044:	3001      	adds	r0, #1
 800f046:	f43f ae36 	beq.w	800ecb6 <_printf_float+0xbe>
 800f04a:	f108 0801 	add.w	r8, r8, #1
 800f04e:	68e3      	ldr	r3, [r4, #12]
 800f050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f052:	1a5b      	subs	r3, r3, r1
 800f054:	4543      	cmp	r3, r8
 800f056:	dcf0      	bgt.n	800f03a <_printf_float+0x442>
 800f058:	e6f8      	b.n	800ee4c <_printf_float+0x254>
 800f05a:	f04f 0800 	mov.w	r8, #0
 800f05e:	f104 0919 	add.w	r9, r4, #25
 800f062:	e7f4      	b.n	800f04e <_printf_float+0x456>

0800f064 <_printf_common>:
 800f064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f068:	4616      	mov	r6, r2
 800f06a:	4699      	mov	r9, r3
 800f06c:	688a      	ldr	r2, [r1, #8]
 800f06e:	690b      	ldr	r3, [r1, #16]
 800f070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f074:	4293      	cmp	r3, r2
 800f076:	bfb8      	it	lt
 800f078:	4613      	movlt	r3, r2
 800f07a:	6033      	str	r3, [r6, #0]
 800f07c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f080:	4607      	mov	r7, r0
 800f082:	460c      	mov	r4, r1
 800f084:	b10a      	cbz	r2, 800f08a <_printf_common+0x26>
 800f086:	3301      	adds	r3, #1
 800f088:	6033      	str	r3, [r6, #0]
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	0699      	lsls	r1, r3, #26
 800f08e:	bf42      	ittt	mi
 800f090:	6833      	ldrmi	r3, [r6, #0]
 800f092:	3302      	addmi	r3, #2
 800f094:	6033      	strmi	r3, [r6, #0]
 800f096:	6825      	ldr	r5, [r4, #0]
 800f098:	f015 0506 	ands.w	r5, r5, #6
 800f09c:	d106      	bne.n	800f0ac <_printf_common+0x48>
 800f09e:	f104 0a19 	add.w	sl, r4, #25
 800f0a2:	68e3      	ldr	r3, [r4, #12]
 800f0a4:	6832      	ldr	r2, [r6, #0]
 800f0a6:	1a9b      	subs	r3, r3, r2
 800f0a8:	42ab      	cmp	r3, r5
 800f0aa:	dc26      	bgt.n	800f0fa <_printf_common+0x96>
 800f0ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f0b0:	1e13      	subs	r3, r2, #0
 800f0b2:	6822      	ldr	r2, [r4, #0]
 800f0b4:	bf18      	it	ne
 800f0b6:	2301      	movne	r3, #1
 800f0b8:	0692      	lsls	r2, r2, #26
 800f0ba:	d42b      	bmi.n	800f114 <_printf_common+0xb0>
 800f0bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0c0:	4649      	mov	r1, r9
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	47c0      	blx	r8
 800f0c6:	3001      	adds	r0, #1
 800f0c8:	d01e      	beq.n	800f108 <_printf_common+0xa4>
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	6922      	ldr	r2, [r4, #16]
 800f0ce:	f003 0306 	and.w	r3, r3, #6
 800f0d2:	2b04      	cmp	r3, #4
 800f0d4:	bf02      	ittt	eq
 800f0d6:	68e5      	ldreq	r5, [r4, #12]
 800f0d8:	6833      	ldreq	r3, [r6, #0]
 800f0da:	1aed      	subeq	r5, r5, r3
 800f0dc:	68a3      	ldr	r3, [r4, #8]
 800f0de:	bf0c      	ite	eq
 800f0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0e4:	2500      	movne	r5, #0
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	bfc4      	itt	gt
 800f0ea:	1a9b      	subgt	r3, r3, r2
 800f0ec:	18ed      	addgt	r5, r5, r3
 800f0ee:	2600      	movs	r6, #0
 800f0f0:	341a      	adds	r4, #26
 800f0f2:	42b5      	cmp	r5, r6
 800f0f4:	d11a      	bne.n	800f12c <_printf_common+0xc8>
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	e008      	b.n	800f10c <_printf_common+0xa8>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	4652      	mov	r2, sl
 800f0fe:	4649      	mov	r1, r9
 800f100:	4638      	mov	r0, r7
 800f102:	47c0      	blx	r8
 800f104:	3001      	adds	r0, #1
 800f106:	d103      	bne.n	800f110 <_printf_common+0xac>
 800f108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f110:	3501      	adds	r5, #1
 800f112:	e7c6      	b.n	800f0a2 <_printf_common+0x3e>
 800f114:	18e1      	adds	r1, r4, r3
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	2030      	movs	r0, #48	; 0x30
 800f11a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f11e:	4422      	add	r2, r4
 800f120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f128:	3302      	adds	r3, #2
 800f12a:	e7c7      	b.n	800f0bc <_printf_common+0x58>
 800f12c:	2301      	movs	r3, #1
 800f12e:	4622      	mov	r2, r4
 800f130:	4649      	mov	r1, r9
 800f132:	4638      	mov	r0, r7
 800f134:	47c0      	blx	r8
 800f136:	3001      	adds	r0, #1
 800f138:	d0e6      	beq.n	800f108 <_printf_common+0xa4>
 800f13a:	3601      	adds	r6, #1
 800f13c:	e7d9      	b.n	800f0f2 <_printf_common+0x8e>
	...

0800f140 <_printf_i>:
 800f140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f144:	7e0f      	ldrb	r7, [r1, #24]
 800f146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f148:	2f78      	cmp	r7, #120	; 0x78
 800f14a:	4691      	mov	r9, r2
 800f14c:	4680      	mov	r8, r0
 800f14e:	460c      	mov	r4, r1
 800f150:	469a      	mov	sl, r3
 800f152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f156:	d807      	bhi.n	800f168 <_printf_i+0x28>
 800f158:	2f62      	cmp	r7, #98	; 0x62
 800f15a:	d80a      	bhi.n	800f172 <_printf_i+0x32>
 800f15c:	2f00      	cmp	r7, #0
 800f15e:	f000 80d4 	beq.w	800f30a <_printf_i+0x1ca>
 800f162:	2f58      	cmp	r7, #88	; 0x58
 800f164:	f000 80c0 	beq.w	800f2e8 <_printf_i+0x1a8>
 800f168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f16c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f170:	e03a      	b.n	800f1e8 <_printf_i+0xa8>
 800f172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f176:	2b15      	cmp	r3, #21
 800f178:	d8f6      	bhi.n	800f168 <_printf_i+0x28>
 800f17a:	a101      	add	r1, pc, #4	; (adr r1, 800f180 <_printf_i+0x40>)
 800f17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f180:	0800f1d9 	.word	0x0800f1d9
 800f184:	0800f1ed 	.word	0x0800f1ed
 800f188:	0800f169 	.word	0x0800f169
 800f18c:	0800f169 	.word	0x0800f169
 800f190:	0800f169 	.word	0x0800f169
 800f194:	0800f169 	.word	0x0800f169
 800f198:	0800f1ed 	.word	0x0800f1ed
 800f19c:	0800f169 	.word	0x0800f169
 800f1a0:	0800f169 	.word	0x0800f169
 800f1a4:	0800f169 	.word	0x0800f169
 800f1a8:	0800f169 	.word	0x0800f169
 800f1ac:	0800f2f1 	.word	0x0800f2f1
 800f1b0:	0800f219 	.word	0x0800f219
 800f1b4:	0800f2ab 	.word	0x0800f2ab
 800f1b8:	0800f169 	.word	0x0800f169
 800f1bc:	0800f169 	.word	0x0800f169
 800f1c0:	0800f313 	.word	0x0800f313
 800f1c4:	0800f169 	.word	0x0800f169
 800f1c8:	0800f219 	.word	0x0800f219
 800f1cc:	0800f169 	.word	0x0800f169
 800f1d0:	0800f169 	.word	0x0800f169
 800f1d4:	0800f2b3 	.word	0x0800f2b3
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	1d1a      	adds	r2, r3, #4
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	602a      	str	r2, [r5, #0]
 800f1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e09f      	b.n	800f32c <_printf_i+0x1ec>
 800f1ec:	6820      	ldr	r0, [r4, #0]
 800f1ee:	682b      	ldr	r3, [r5, #0]
 800f1f0:	0607      	lsls	r7, r0, #24
 800f1f2:	f103 0104 	add.w	r1, r3, #4
 800f1f6:	6029      	str	r1, [r5, #0]
 800f1f8:	d501      	bpl.n	800f1fe <_printf_i+0xbe>
 800f1fa:	681e      	ldr	r6, [r3, #0]
 800f1fc:	e003      	b.n	800f206 <_printf_i+0xc6>
 800f1fe:	0646      	lsls	r6, r0, #25
 800f200:	d5fb      	bpl.n	800f1fa <_printf_i+0xba>
 800f202:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f206:	2e00      	cmp	r6, #0
 800f208:	da03      	bge.n	800f212 <_printf_i+0xd2>
 800f20a:	232d      	movs	r3, #45	; 0x2d
 800f20c:	4276      	negs	r6, r6
 800f20e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f212:	485a      	ldr	r0, [pc, #360]	; (800f37c <_printf_i+0x23c>)
 800f214:	230a      	movs	r3, #10
 800f216:	e012      	b.n	800f23e <_printf_i+0xfe>
 800f218:	682b      	ldr	r3, [r5, #0]
 800f21a:	6820      	ldr	r0, [r4, #0]
 800f21c:	1d19      	adds	r1, r3, #4
 800f21e:	6029      	str	r1, [r5, #0]
 800f220:	0605      	lsls	r5, r0, #24
 800f222:	d501      	bpl.n	800f228 <_printf_i+0xe8>
 800f224:	681e      	ldr	r6, [r3, #0]
 800f226:	e002      	b.n	800f22e <_printf_i+0xee>
 800f228:	0641      	lsls	r1, r0, #25
 800f22a:	d5fb      	bpl.n	800f224 <_printf_i+0xe4>
 800f22c:	881e      	ldrh	r6, [r3, #0]
 800f22e:	4853      	ldr	r0, [pc, #332]	; (800f37c <_printf_i+0x23c>)
 800f230:	2f6f      	cmp	r7, #111	; 0x6f
 800f232:	bf0c      	ite	eq
 800f234:	2308      	moveq	r3, #8
 800f236:	230a      	movne	r3, #10
 800f238:	2100      	movs	r1, #0
 800f23a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f23e:	6865      	ldr	r5, [r4, #4]
 800f240:	60a5      	str	r5, [r4, #8]
 800f242:	2d00      	cmp	r5, #0
 800f244:	bfa2      	ittt	ge
 800f246:	6821      	ldrge	r1, [r4, #0]
 800f248:	f021 0104 	bicge.w	r1, r1, #4
 800f24c:	6021      	strge	r1, [r4, #0]
 800f24e:	b90e      	cbnz	r6, 800f254 <_printf_i+0x114>
 800f250:	2d00      	cmp	r5, #0
 800f252:	d04b      	beq.n	800f2ec <_printf_i+0x1ac>
 800f254:	4615      	mov	r5, r2
 800f256:	fbb6 f1f3 	udiv	r1, r6, r3
 800f25a:	fb03 6711 	mls	r7, r3, r1, r6
 800f25e:	5dc7      	ldrb	r7, [r0, r7]
 800f260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f264:	4637      	mov	r7, r6
 800f266:	42bb      	cmp	r3, r7
 800f268:	460e      	mov	r6, r1
 800f26a:	d9f4      	bls.n	800f256 <_printf_i+0x116>
 800f26c:	2b08      	cmp	r3, #8
 800f26e:	d10b      	bne.n	800f288 <_printf_i+0x148>
 800f270:	6823      	ldr	r3, [r4, #0]
 800f272:	07de      	lsls	r6, r3, #31
 800f274:	d508      	bpl.n	800f288 <_printf_i+0x148>
 800f276:	6923      	ldr	r3, [r4, #16]
 800f278:	6861      	ldr	r1, [r4, #4]
 800f27a:	4299      	cmp	r1, r3
 800f27c:	bfde      	ittt	le
 800f27e:	2330      	movle	r3, #48	; 0x30
 800f280:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f284:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f288:	1b52      	subs	r2, r2, r5
 800f28a:	6122      	str	r2, [r4, #16]
 800f28c:	f8cd a000 	str.w	sl, [sp]
 800f290:	464b      	mov	r3, r9
 800f292:	aa03      	add	r2, sp, #12
 800f294:	4621      	mov	r1, r4
 800f296:	4640      	mov	r0, r8
 800f298:	f7ff fee4 	bl	800f064 <_printf_common>
 800f29c:	3001      	adds	r0, #1
 800f29e:	d14a      	bne.n	800f336 <_printf_i+0x1f6>
 800f2a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2a4:	b004      	add	sp, #16
 800f2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	f043 0320 	orr.w	r3, r3, #32
 800f2b0:	6023      	str	r3, [r4, #0]
 800f2b2:	4833      	ldr	r0, [pc, #204]	; (800f380 <_printf_i+0x240>)
 800f2b4:	2778      	movs	r7, #120	; 0x78
 800f2b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f2ba:	6823      	ldr	r3, [r4, #0]
 800f2bc:	6829      	ldr	r1, [r5, #0]
 800f2be:	061f      	lsls	r7, r3, #24
 800f2c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f2c4:	d402      	bmi.n	800f2cc <_printf_i+0x18c>
 800f2c6:	065f      	lsls	r7, r3, #25
 800f2c8:	bf48      	it	mi
 800f2ca:	b2b6      	uxthmi	r6, r6
 800f2cc:	07df      	lsls	r7, r3, #31
 800f2ce:	bf48      	it	mi
 800f2d0:	f043 0320 	orrmi.w	r3, r3, #32
 800f2d4:	6029      	str	r1, [r5, #0]
 800f2d6:	bf48      	it	mi
 800f2d8:	6023      	strmi	r3, [r4, #0]
 800f2da:	b91e      	cbnz	r6, 800f2e4 <_printf_i+0x1a4>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	f023 0320 	bic.w	r3, r3, #32
 800f2e2:	6023      	str	r3, [r4, #0]
 800f2e4:	2310      	movs	r3, #16
 800f2e6:	e7a7      	b.n	800f238 <_printf_i+0xf8>
 800f2e8:	4824      	ldr	r0, [pc, #144]	; (800f37c <_printf_i+0x23c>)
 800f2ea:	e7e4      	b.n	800f2b6 <_printf_i+0x176>
 800f2ec:	4615      	mov	r5, r2
 800f2ee:	e7bd      	b.n	800f26c <_printf_i+0x12c>
 800f2f0:	682b      	ldr	r3, [r5, #0]
 800f2f2:	6826      	ldr	r6, [r4, #0]
 800f2f4:	6961      	ldr	r1, [r4, #20]
 800f2f6:	1d18      	adds	r0, r3, #4
 800f2f8:	6028      	str	r0, [r5, #0]
 800f2fa:	0635      	lsls	r5, r6, #24
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	d501      	bpl.n	800f304 <_printf_i+0x1c4>
 800f300:	6019      	str	r1, [r3, #0]
 800f302:	e002      	b.n	800f30a <_printf_i+0x1ca>
 800f304:	0670      	lsls	r0, r6, #25
 800f306:	d5fb      	bpl.n	800f300 <_printf_i+0x1c0>
 800f308:	8019      	strh	r1, [r3, #0]
 800f30a:	2300      	movs	r3, #0
 800f30c:	6123      	str	r3, [r4, #16]
 800f30e:	4615      	mov	r5, r2
 800f310:	e7bc      	b.n	800f28c <_printf_i+0x14c>
 800f312:	682b      	ldr	r3, [r5, #0]
 800f314:	1d1a      	adds	r2, r3, #4
 800f316:	602a      	str	r2, [r5, #0]
 800f318:	681d      	ldr	r5, [r3, #0]
 800f31a:	6862      	ldr	r2, [r4, #4]
 800f31c:	2100      	movs	r1, #0
 800f31e:	4628      	mov	r0, r5
 800f320:	f7f0 ff5e 	bl	80001e0 <memchr>
 800f324:	b108      	cbz	r0, 800f32a <_printf_i+0x1ea>
 800f326:	1b40      	subs	r0, r0, r5
 800f328:	6060      	str	r0, [r4, #4]
 800f32a:	6863      	ldr	r3, [r4, #4]
 800f32c:	6123      	str	r3, [r4, #16]
 800f32e:	2300      	movs	r3, #0
 800f330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f334:	e7aa      	b.n	800f28c <_printf_i+0x14c>
 800f336:	6923      	ldr	r3, [r4, #16]
 800f338:	462a      	mov	r2, r5
 800f33a:	4649      	mov	r1, r9
 800f33c:	4640      	mov	r0, r8
 800f33e:	47d0      	blx	sl
 800f340:	3001      	adds	r0, #1
 800f342:	d0ad      	beq.n	800f2a0 <_printf_i+0x160>
 800f344:	6823      	ldr	r3, [r4, #0]
 800f346:	079b      	lsls	r3, r3, #30
 800f348:	d413      	bmi.n	800f372 <_printf_i+0x232>
 800f34a:	68e0      	ldr	r0, [r4, #12]
 800f34c:	9b03      	ldr	r3, [sp, #12]
 800f34e:	4298      	cmp	r0, r3
 800f350:	bfb8      	it	lt
 800f352:	4618      	movlt	r0, r3
 800f354:	e7a6      	b.n	800f2a4 <_printf_i+0x164>
 800f356:	2301      	movs	r3, #1
 800f358:	4632      	mov	r2, r6
 800f35a:	4649      	mov	r1, r9
 800f35c:	4640      	mov	r0, r8
 800f35e:	47d0      	blx	sl
 800f360:	3001      	adds	r0, #1
 800f362:	d09d      	beq.n	800f2a0 <_printf_i+0x160>
 800f364:	3501      	adds	r5, #1
 800f366:	68e3      	ldr	r3, [r4, #12]
 800f368:	9903      	ldr	r1, [sp, #12]
 800f36a:	1a5b      	subs	r3, r3, r1
 800f36c:	42ab      	cmp	r3, r5
 800f36e:	dcf2      	bgt.n	800f356 <_printf_i+0x216>
 800f370:	e7eb      	b.n	800f34a <_printf_i+0x20a>
 800f372:	2500      	movs	r5, #0
 800f374:	f104 0619 	add.w	r6, r4, #25
 800f378:	e7f5      	b.n	800f366 <_printf_i+0x226>
 800f37a:	bf00      	nop
 800f37c:	080118a6 	.word	0x080118a6
 800f380:	080118b7 	.word	0x080118b7

0800f384 <std>:
 800f384:	2300      	movs	r3, #0
 800f386:	b510      	push	{r4, lr}
 800f388:	4604      	mov	r4, r0
 800f38a:	e9c0 3300 	strd	r3, r3, [r0]
 800f38e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f392:	6083      	str	r3, [r0, #8]
 800f394:	8181      	strh	r1, [r0, #12]
 800f396:	6643      	str	r3, [r0, #100]	; 0x64
 800f398:	81c2      	strh	r2, [r0, #14]
 800f39a:	6183      	str	r3, [r0, #24]
 800f39c:	4619      	mov	r1, r3
 800f39e:	2208      	movs	r2, #8
 800f3a0:	305c      	adds	r0, #92	; 0x5c
 800f3a2:	f000 f902 	bl	800f5aa <memset>
 800f3a6:	4b05      	ldr	r3, [pc, #20]	; (800f3bc <std+0x38>)
 800f3a8:	6263      	str	r3, [r4, #36]	; 0x24
 800f3aa:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <std+0x3c>)
 800f3ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3ae:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <std+0x40>)
 800f3b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3b2:	4b05      	ldr	r3, [pc, #20]	; (800f3c8 <std+0x44>)
 800f3b4:	6224      	str	r4, [r4, #32]
 800f3b6:	6323      	str	r3, [r4, #48]	; 0x30
 800f3b8:	bd10      	pop	{r4, pc}
 800f3ba:	bf00      	nop
 800f3bc:	0800f525 	.word	0x0800f525
 800f3c0:	0800f547 	.word	0x0800f547
 800f3c4:	0800f57f 	.word	0x0800f57f
 800f3c8:	0800f5a3 	.word	0x0800f5a3

0800f3cc <stdio_exit_handler>:
 800f3cc:	4a02      	ldr	r2, [pc, #8]	; (800f3d8 <stdio_exit_handler+0xc>)
 800f3ce:	4903      	ldr	r1, [pc, #12]	; (800f3dc <stdio_exit_handler+0x10>)
 800f3d0:	4803      	ldr	r0, [pc, #12]	; (800f3e0 <stdio_exit_handler+0x14>)
 800f3d2:	f000 b869 	b.w	800f4a8 <_fwalk_sglue>
 800f3d6:	bf00      	nop
 800f3d8:	20000110 	.word	0x20000110
 800f3dc:	08010f41 	.word	0x08010f41
 800f3e0:	2000011c 	.word	0x2000011c

0800f3e4 <cleanup_stdio>:
 800f3e4:	6841      	ldr	r1, [r0, #4]
 800f3e6:	4b0c      	ldr	r3, [pc, #48]	; (800f418 <cleanup_stdio+0x34>)
 800f3e8:	4299      	cmp	r1, r3
 800f3ea:	b510      	push	{r4, lr}
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	d001      	beq.n	800f3f4 <cleanup_stdio+0x10>
 800f3f0:	f001 fda6 	bl	8010f40 <_fflush_r>
 800f3f4:	68a1      	ldr	r1, [r4, #8]
 800f3f6:	4b09      	ldr	r3, [pc, #36]	; (800f41c <cleanup_stdio+0x38>)
 800f3f8:	4299      	cmp	r1, r3
 800f3fa:	d002      	beq.n	800f402 <cleanup_stdio+0x1e>
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f001 fd9f 	bl	8010f40 <_fflush_r>
 800f402:	68e1      	ldr	r1, [r4, #12]
 800f404:	4b06      	ldr	r3, [pc, #24]	; (800f420 <cleanup_stdio+0x3c>)
 800f406:	4299      	cmp	r1, r3
 800f408:	d004      	beq.n	800f414 <cleanup_stdio+0x30>
 800f40a:	4620      	mov	r0, r4
 800f40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f410:	f001 bd96 	b.w	8010f40 <_fflush_r>
 800f414:	bd10      	pop	{r4, pc}
 800f416:	bf00      	nop
 800f418:	2000220c 	.word	0x2000220c
 800f41c:	20002274 	.word	0x20002274
 800f420:	200022dc 	.word	0x200022dc

0800f424 <global_stdio_init.part.0>:
 800f424:	b510      	push	{r4, lr}
 800f426:	4b0b      	ldr	r3, [pc, #44]	; (800f454 <global_stdio_init.part.0+0x30>)
 800f428:	4c0b      	ldr	r4, [pc, #44]	; (800f458 <global_stdio_init.part.0+0x34>)
 800f42a:	4a0c      	ldr	r2, [pc, #48]	; (800f45c <global_stdio_init.part.0+0x38>)
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	4620      	mov	r0, r4
 800f430:	2200      	movs	r2, #0
 800f432:	2104      	movs	r1, #4
 800f434:	f7ff ffa6 	bl	800f384 <std>
 800f438:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f43c:	2201      	movs	r2, #1
 800f43e:	2109      	movs	r1, #9
 800f440:	f7ff ffa0 	bl	800f384 <std>
 800f444:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f448:	2202      	movs	r2, #2
 800f44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f44e:	2112      	movs	r1, #18
 800f450:	f7ff bf98 	b.w	800f384 <std>
 800f454:	20002344 	.word	0x20002344
 800f458:	2000220c 	.word	0x2000220c
 800f45c:	0800f3cd 	.word	0x0800f3cd

0800f460 <__sfp_lock_acquire>:
 800f460:	4801      	ldr	r0, [pc, #4]	; (800f468 <__sfp_lock_acquire+0x8>)
 800f462:	f000 b93d 	b.w	800f6e0 <__retarget_lock_acquire_recursive>
 800f466:	bf00      	nop
 800f468:	2000234d 	.word	0x2000234d

0800f46c <__sfp_lock_release>:
 800f46c:	4801      	ldr	r0, [pc, #4]	; (800f474 <__sfp_lock_release+0x8>)
 800f46e:	f000 b938 	b.w	800f6e2 <__retarget_lock_release_recursive>
 800f472:	bf00      	nop
 800f474:	2000234d 	.word	0x2000234d

0800f478 <__sinit>:
 800f478:	b510      	push	{r4, lr}
 800f47a:	4604      	mov	r4, r0
 800f47c:	f7ff fff0 	bl	800f460 <__sfp_lock_acquire>
 800f480:	6a23      	ldr	r3, [r4, #32]
 800f482:	b11b      	cbz	r3, 800f48c <__sinit+0x14>
 800f484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f488:	f7ff bff0 	b.w	800f46c <__sfp_lock_release>
 800f48c:	4b04      	ldr	r3, [pc, #16]	; (800f4a0 <__sinit+0x28>)
 800f48e:	6223      	str	r3, [r4, #32]
 800f490:	4b04      	ldr	r3, [pc, #16]	; (800f4a4 <__sinit+0x2c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1f5      	bne.n	800f484 <__sinit+0xc>
 800f498:	f7ff ffc4 	bl	800f424 <global_stdio_init.part.0>
 800f49c:	e7f2      	b.n	800f484 <__sinit+0xc>
 800f49e:	bf00      	nop
 800f4a0:	0800f3e5 	.word	0x0800f3e5
 800f4a4:	20002344 	.word	0x20002344

0800f4a8 <_fwalk_sglue>:
 800f4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4ac:	4607      	mov	r7, r0
 800f4ae:	4688      	mov	r8, r1
 800f4b0:	4614      	mov	r4, r2
 800f4b2:	2600      	movs	r6, #0
 800f4b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4b8:	f1b9 0901 	subs.w	r9, r9, #1
 800f4bc:	d505      	bpl.n	800f4ca <_fwalk_sglue+0x22>
 800f4be:	6824      	ldr	r4, [r4, #0]
 800f4c0:	2c00      	cmp	r4, #0
 800f4c2:	d1f7      	bne.n	800f4b4 <_fwalk_sglue+0xc>
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ca:	89ab      	ldrh	r3, [r5, #12]
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d907      	bls.n	800f4e0 <_fwalk_sglue+0x38>
 800f4d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	d003      	beq.n	800f4e0 <_fwalk_sglue+0x38>
 800f4d8:	4629      	mov	r1, r5
 800f4da:	4638      	mov	r0, r7
 800f4dc:	47c0      	blx	r8
 800f4de:	4306      	orrs	r6, r0
 800f4e0:	3568      	adds	r5, #104	; 0x68
 800f4e2:	e7e9      	b.n	800f4b8 <_fwalk_sglue+0x10>

0800f4e4 <siprintf>:
 800f4e4:	b40e      	push	{r1, r2, r3}
 800f4e6:	b500      	push	{lr}
 800f4e8:	b09c      	sub	sp, #112	; 0x70
 800f4ea:	ab1d      	add	r3, sp, #116	; 0x74
 800f4ec:	9002      	str	r0, [sp, #8]
 800f4ee:	9006      	str	r0, [sp, #24]
 800f4f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4f4:	4809      	ldr	r0, [pc, #36]	; (800f51c <siprintf+0x38>)
 800f4f6:	9107      	str	r1, [sp, #28]
 800f4f8:	9104      	str	r1, [sp, #16]
 800f4fa:	4909      	ldr	r1, [pc, #36]	; (800f520 <siprintf+0x3c>)
 800f4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f500:	9105      	str	r1, [sp, #20]
 800f502:	6800      	ldr	r0, [r0, #0]
 800f504:	9301      	str	r3, [sp, #4]
 800f506:	a902      	add	r1, sp, #8
 800f508:	f001 fb96 	bl	8010c38 <_svfiprintf_r>
 800f50c:	9b02      	ldr	r3, [sp, #8]
 800f50e:	2200      	movs	r2, #0
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	b01c      	add	sp, #112	; 0x70
 800f514:	f85d eb04 	ldr.w	lr, [sp], #4
 800f518:	b003      	add	sp, #12
 800f51a:	4770      	bx	lr
 800f51c:	20000168 	.word	0x20000168
 800f520:	ffff0208 	.word	0xffff0208

0800f524 <__sread>:
 800f524:	b510      	push	{r4, lr}
 800f526:	460c      	mov	r4, r1
 800f528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f52c:	f000 f87a 	bl	800f624 <_read_r>
 800f530:	2800      	cmp	r0, #0
 800f532:	bfab      	itete	ge
 800f534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f536:	89a3      	ldrhlt	r3, [r4, #12]
 800f538:	181b      	addge	r3, r3, r0
 800f53a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f53e:	bfac      	ite	ge
 800f540:	6563      	strge	r3, [r4, #84]	; 0x54
 800f542:	81a3      	strhlt	r3, [r4, #12]
 800f544:	bd10      	pop	{r4, pc}

0800f546 <__swrite>:
 800f546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54a:	461f      	mov	r7, r3
 800f54c:	898b      	ldrh	r3, [r1, #12]
 800f54e:	05db      	lsls	r3, r3, #23
 800f550:	4605      	mov	r5, r0
 800f552:	460c      	mov	r4, r1
 800f554:	4616      	mov	r6, r2
 800f556:	d505      	bpl.n	800f564 <__swrite+0x1e>
 800f558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f55c:	2302      	movs	r3, #2
 800f55e:	2200      	movs	r2, #0
 800f560:	f000 f84e 	bl	800f600 <_lseek_r>
 800f564:	89a3      	ldrh	r3, [r4, #12]
 800f566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f56a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f56e:	81a3      	strh	r3, [r4, #12]
 800f570:	4632      	mov	r2, r6
 800f572:	463b      	mov	r3, r7
 800f574:	4628      	mov	r0, r5
 800f576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f57a:	f000 b875 	b.w	800f668 <_write_r>

0800f57e <__sseek>:
 800f57e:	b510      	push	{r4, lr}
 800f580:	460c      	mov	r4, r1
 800f582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f586:	f000 f83b 	bl	800f600 <_lseek_r>
 800f58a:	1c43      	adds	r3, r0, #1
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	bf15      	itete	ne
 800f590:	6560      	strne	r0, [r4, #84]	; 0x54
 800f592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f59a:	81a3      	strheq	r3, [r4, #12]
 800f59c:	bf18      	it	ne
 800f59e:	81a3      	strhne	r3, [r4, #12]
 800f5a0:	bd10      	pop	{r4, pc}

0800f5a2 <__sclose>:
 800f5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5a6:	f000 b81b 	b.w	800f5e0 <_close_r>

0800f5aa <memset>:
 800f5aa:	4402      	add	r2, r0
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d100      	bne.n	800f5b4 <memset+0xa>
 800f5b2:	4770      	bx	lr
 800f5b4:	f803 1b01 	strb.w	r1, [r3], #1
 800f5b8:	e7f9      	b.n	800f5ae <memset+0x4>

0800f5ba <strcat>:
 800f5ba:	b510      	push	{r4, lr}
 800f5bc:	4602      	mov	r2, r0
 800f5be:	7814      	ldrb	r4, [r2, #0]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	3201      	adds	r2, #1
 800f5c4:	2c00      	cmp	r4, #0
 800f5c6:	d1fa      	bne.n	800f5be <strcat+0x4>
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5d2:	2a00      	cmp	r2, #0
 800f5d4:	d1f9      	bne.n	800f5ca <strcat+0x10>
 800f5d6:	bd10      	pop	{r4, pc}

0800f5d8 <_localeconv_r>:
 800f5d8:	4800      	ldr	r0, [pc, #0]	; (800f5dc <_localeconv_r+0x4>)
 800f5da:	4770      	bx	lr
 800f5dc:	2000025c 	.word	0x2000025c

0800f5e0 <_close_r>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	4d06      	ldr	r5, [pc, #24]	; (800f5fc <_close_r+0x1c>)
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	4608      	mov	r0, r1
 800f5ea:	602b      	str	r3, [r5, #0]
 800f5ec:	f7f2 fc3f 	bl	8001e6e <_close>
 800f5f0:	1c43      	adds	r3, r0, #1
 800f5f2:	d102      	bne.n	800f5fa <_close_r+0x1a>
 800f5f4:	682b      	ldr	r3, [r5, #0]
 800f5f6:	b103      	cbz	r3, 800f5fa <_close_r+0x1a>
 800f5f8:	6023      	str	r3, [r4, #0]
 800f5fa:	bd38      	pop	{r3, r4, r5, pc}
 800f5fc:	20002348 	.word	0x20002348

0800f600 <_lseek_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	4d07      	ldr	r5, [pc, #28]	; (800f620 <_lseek_r+0x20>)
 800f604:	4604      	mov	r4, r0
 800f606:	4608      	mov	r0, r1
 800f608:	4611      	mov	r1, r2
 800f60a:	2200      	movs	r2, #0
 800f60c:	602a      	str	r2, [r5, #0]
 800f60e:	461a      	mov	r2, r3
 800f610:	f7f2 fc54 	bl	8001ebc <_lseek>
 800f614:	1c43      	adds	r3, r0, #1
 800f616:	d102      	bne.n	800f61e <_lseek_r+0x1e>
 800f618:	682b      	ldr	r3, [r5, #0]
 800f61a:	b103      	cbz	r3, 800f61e <_lseek_r+0x1e>
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	20002348 	.word	0x20002348

0800f624 <_read_r>:
 800f624:	b538      	push	{r3, r4, r5, lr}
 800f626:	4d07      	ldr	r5, [pc, #28]	; (800f644 <_read_r+0x20>)
 800f628:	4604      	mov	r4, r0
 800f62a:	4608      	mov	r0, r1
 800f62c:	4611      	mov	r1, r2
 800f62e:	2200      	movs	r2, #0
 800f630:	602a      	str	r2, [r5, #0]
 800f632:	461a      	mov	r2, r3
 800f634:	f7f2 fbe2 	bl	8001dfc <_read>
 800f638:	1c43      	adds	r3, r0, #1
 800f63a:	d102      	bne.n	800f642 <_read_r+0x1e>
 800f63c:	682b      	ldr	r3, [r5, #0]
 800f63e:	b103      	cbz	r3, 800f642 <_read_r+0x1e>
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	bd38      	pop	{r3, r4, r5, pc}
 800f644:	20002348 	.word	0x20002348

0800f648 <_sbrk_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	4d06      	ldr	r5, [pc, #24]	; (800f664 <_sbrk_r+0x1c>)
 800f64c:	2300      	movs	r3, #0
 800f64e:	4604      	mov	r4, r0
 800f650:	4608      	mov	r0, r1
 800f652:	602b      	str	r3, [r5, #0]
 800f654:	f7f2 fc40 	bl	8001ed8 <_sbrk>
 800f658:	1c43      	adds	r3, r0, #1
 800f65a:	d102      	bne.n	800f662 <_sbrk_r+0x1a>
 800f65c:	682b      	ldr	r3, [r5, #0]
 800f65e:	b103      	cbz	r3, 800f662 <_sbrk_r+0x1a>
 800f660:	6023      	str	r3, [r4, #0]
 800f662:	bd38      	pop	{r3, r4, r5, pc}
 800f664:	20002348 	.word	0x20002348

0800f668 <_write_r>:
 800f668:	b538      	push	{r3, r4, r5, lr}
 800f66a:	4d07      	ldr	r5, [pc, #28]	; (800f688 <_write_r+0x20>)
 800f66c:	4604      	mov	r4, r0
 800f66e:	4608      	mov	r0, r1
 800f670:	4611      	mov	r1, r2
 800f672:	2200      	movs	r2, #0
 800f674:	602a      	str	r2, [r5, #0]
 800f676:	461a      	mov	r2, r3
 800f678:	f7f2 fbdd 	bl	8001e36 <_write>
 800f67c:	1c43      	adds	r3, r0, #1
 800f67e:	d102      	bne.n	800f686 <_write_r+0x1e>
 800f680:	682b      	ldr	r3, [r5, #0]
 800f682:	b103      	cbz	r3, 800f686 <_write_r+0x1e>
 800f684:	6023      	str	r3, [r4, #0]
 800f686:	bd38      	pop	{r3, r4, r5, pc}
 800f688:	20002348 	.word	0x20002348

0800f68c <__errno>:
 800f68c:	4b01      	ldr	r3, [pc, #4]	; (800f694 <__errno+0x8>)
 800f68e:	6818      	ldr	r0, [r3, #0]
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	20000168 	.word	0x20000168

0800f698 <__libc_init_array>:
 800f698:	b570      	push	{r4, r5, r6, lr}
 800f69a:	4d0d      	ldr	r5, [pc, #52]	; (800f6d0 <__libc_init_array+0x38>)
 800f69c:	4c0d      	ldr	r4, [pc, #52]	; (800f6d4 <__libc_init_array+0x3c>)
 800f69e:	1b64      	subs	r4, r4, r5
 800f6a0:	10a4      	asrs	r4, r4, #2
 800f6a2:	2600      	movs	r6, #0
 800f6a4:	42a6      	cmp	r6, r4
 800f6a6:	d109      	bne.n	800f6bc <__libc_init_array+0x24>
 800f6a8:	4d0b      	ldr	r5, [pc, #44]	; (800f6d8 <__libc_init_array+0x40>)
 800f6aa:	4c0c      	ldr	r4, [pc, #48]	; (800f6dc <__libc_init_array+0x44>)
 800f6ac:	f001 ffce 	bl	801164c <_init>
 800f6b0:	1b64      	subs	r4, r4, r5
 800f6b2:	10a4      	asrs	r4, r4, #2
 800f6b4:	2600      	movs	r6, #0
 800f6b6:	42a6      	cmp	r6, r4
 800f6b8:	d105      	bne.n	800f6c6 <__libc_init_array+0x2e>
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6c0:	4798      	blx	r3
 800f6c2:	3601      	adds	r6, #1
 800f6c4:	e7ee      	b.n	800f6a4 <__libc_init_array+0xc>
 800f6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6ca:	4798      	blx	r3
 800f6cc:	3601      	adds	r6, #1
 800f6ce:	e7f2      	b.n	800f6b6 <__libc_init_array+0x1e>
 800f6d0:	08011c0c 	.word	0x08011c0c
 800f6d4:	08011c0c 	.word	0x08011c0c
 800f6d8:	08011c0c 	.word	0x08011c0c
 800f6dc:	08011c10 	.word	0x08011c10

0800f6e0 <__retarget_lock_acquire_recursive>:
 800f6e0:	4770      	bx	lr

0800f6e2 <__retarget_lock_release_recursive>:
 800f6e2:	4770      	bx	lr

0800f6e4 <memcpy>:
 800f6e4:	440a      	add	r2, r1
 800f6e6:	4291      	cmp	r1, r2
 800f6e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f6ec:	d100      	bne.n	800f6f0 <memcpy+0xc>
 800f6ee:	4770      	bx	lr
 800f6f0:	b510      	push	{r4, lr}
 800f6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6fa:	4291      	cmp	r1, r2
 800f6fc:	d1f9      	bne.n	800f6f2 <memcpy+0xe>
 800f6fe:	bd10      	pop	{r4, pc}

0800f700 <quorem>:
 800f700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f704:	6903      	ldr	r3, [r0, #16]
 800f706:	690c      	ldr	r4, [r1, #16]
 800f708:	42a3      	cmp	r3, r4
 800f70a:	4607      	mov	r7, r0
 800f70c:	db7e      	blt.n	800f80c <quorem+0x10c>
 800f70e:	3c01      	subs	r4, #1
 800f710:	f101 0814 	add.w	r8, r1, #20
 800f714:	f100 0514 	add.w	r5, r0, #20
 800f718:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f71c:	9301      	str	r3, [sp, #4]
 800f71e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f726:	3301      	adds	r3, #1
 800f728:	429a      	cmp	r2, r3
 800f72a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f72e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f732:	fbb2 f6f3 	udiv	r6, r2, r3
 800f736:	d331      	bcc.n	800f79c <quorem+0x9c>
 800f738:	f04f 0e00 	mov.w	lr, #0
 800f73c:	4640      	mov	r0, r8
 800f73e:	46ac      	mov	ip, r5
 800f740:	46f2      	mov	sl, lr
 800f742:	f850 2b04 	ldr.w	r2, [r0], #4
 800f746:	b293      	uxth	r3, r2
 800f748:	fb06 e303 	mla	r3, r6, r3, lr
 800f74c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f750:	0c1a      	lsrs	r2, r3, #16
 800f752:	b29b      	uxth	r3, r3
 800f754:	ebaa 0303 	sub.w	r3, sl, r3
 800f758:	f8dc a000 	ldr.w	sl, [ip]
 800f75c:	fa13 f38a 	uxtah	r3, r3, sl
 800f760:	fb06 220e 	mla	r2, r6, lr, r2
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	9b00      	ldr	r3, [sp, #0]
 800f768:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f76c:	b292      	uxth	r2, r2
 800f76e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f772:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f776:	f8bd 3000 	ldrh.w	r3, [sp]
 800f77a:	4581      	cmp	r9, r0
 800f77c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f780:	f84c 3b04 	str.w	r3, [ip], #4
 800f784:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f788:	d2db      	bcs.n	800f742 <quorem+0x42>
 800f78a:	f855 300b 	ldr.w	r3, [r5, fp]
 800f78e:	b92b      	cbnz	r3, 800f79c <quorem+0x9c>
 800f790:	9b01      	ldr	r3, [sp, #4]
 800f792:	3b04      	subs	r3, #4
 800f794:	429d      	cmp	r5, r3
 800f796:	461a      	mov	r2, r3
 800f798:	d32c      	bcc.n	800f7f4 <quorem+0xf4>
 800f79a:	613c      	str	r4, [r7, #16]
 800f79c:	4638      	mov	r0, r7
 800f79e:	f001 f8f1 	bl	8010984 <__mcmp>
 800f7a2:	2800      	cmp	r0, #0
 800f7a4:	db22      	blt.n	800f7ec <quorem+0xec>
 800f7a6:	3601      	adds	r6, #1
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800f7b0:	f8d1 c000 	ldr.w	ip, [r1]
 800f7b4:	b293      	uxth	r3, r2
 800f7b6:	1ac3      	subs	r3, r0, r3
 800f7b8:	0c12      	lsrs	r2, r2, #16
 800f7ba:	fa13 f38c 	uxtah	r3, r3, ip
 800f7be:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f7c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7cc:	45c1      	cmp	r9, r8
 800f7ce:	f841 3b04 	str.w	r3, [r1], #4
 800f7d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f7d6:	d2e9      	bcs.n	800f7ac <quorem+0xac>
 800f7d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7e0:	b922      	cbnz	r2, 800f7ec <quorem+0xec>
 800f7e2:	3b04      	subs	r3, #4
 800f7e4:	429d      	cmp	r5, r3
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	d30a      	bcc.n	800f800 <quorem+0x100>
 800f7ea:	613c      	str	r4, [r7, #16]
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	b003      	add	sp, #12
 800f7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f4:	6812      	ldr	r2, [r2, #0]
 800f7f6:	3b04      	subs	r3, #4
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	d1ce      	bne.n	800f79a <quorem+0x9a>
 800f7fc:	3c01      	subs	r4, #1
 800f7fe:	e7c9      	b.n	800f794 <quorem+0x94>
 800f800:	6812      	ldr	r2, [r2, #0]
 800f802:	3b04      	subs	r3, #4
 800f804:	2a00      	cmp	r2, #0
 800f806:	d1f0      	bne.n	800f7ea <quorem+0xea>
 800f808:	3c01      	subs	r4, #1
 800f80a:	e7eb      	b.n	800f7e4 <quorem+0xe4>
 800f80c:	2000      	movs	r0, #0
 800f80e:	e7ee      	b.n	800f7ee <quorem+0xee>

0800f810 <_dtoa_r>:
 800f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f814:	ed2d 8b04 	vpush	{d8-d9}
 800f818:	69c5      	ldr	r5, [r0, #28]
 800f81a:	b093      	sub	sp, #76	; 0x4c
 800f81c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f820:	ec57 6b10 	vmov	r6, r7, d0
 800f824:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f828:	9107      	str	r1, [sp, #28]
 800f82a:	4604      	mov	r4, r0
 800f82c:	920a      	str	r2, [sp, #40]	; 0x28
 800f82e:	930d      	str	r3, [sp, #52]	; 0x34
 800f830:	b975      	cbnz	r5, 800f850 <_dtoa_r+0x40>
 800f832:	2010      	movs	r0, #16
 800f834:	f7ff f884 	bl	800e940 <malloc>
 800f838:	4602      	mov	r2, r0
 800f83a:	61e0      	str	r0, [r4, #28]
 800f83c:	b920      	cbnz	r0, 800f848 <_dtoa_r+0x38>
 800f83e:	4bae      	ldr	r3, [pc, #696]	; (800faf8 <_dtoa_r+0x2e8>)
 800f840:	21ef      	movs	r1, #239	; 0xef
 800f842:	48ae      	ldr	r0, [pc, #696]	; (800fafc <_dtoa_r+0x2ec>)
 800f844:	f001 fbbe 	bl	8010fc4 <__assert_func>
 800f848:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f84c:	6005      	str	r5, [r0, #0]
 800f84e:	60c5      	str	r5, [r0, #12]
 800f850:	69e3      	ldr	r3, [r4, #28]
 800f852:	6819      	ldr	r1, [r3, #0]
 800f854:	b151      	cbz	r1, 800f86c <_dtoa_r+0x5c>
 800f856:	685a      	ldr	r2, [r3, #4]
 800f858:	604a      	str	r2, [r1, #4]
 800f85a:	2301      	movs	r3, #1
 800f85c:	4093      	lsls	r3, r2
 800f85e:	608b      	str	r3, [r1, #8]
 800f860:	4620      	mov	r0, r4
 800f862:	f000 fe53 	bl	801050c <_Bfree>
 800f866:	69e3      	ldr	r3, [r4, #28]
 800f868:	2200      	movs	r2, #0
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	1e3b      	subs	r3, r7, #0
 800f86e:	bfbb      	ittet	lt
 800f870:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f874:	9303      	strlt	r3, [sp, #12]
 800f876:	2300      	movge	r3, #0
 800f878:	2201      	movlt	r2, #1
 800f87a:	bfac      	ite	ge
 800f87c:	f8c8 3000 	strge.w	r3, [r8]
 800f880:	f8c8 2000 	strlt.w	r2, [r8]
 800f884:	4b9e      	ldr	r3, [pc, #632]	; (800fb00 <_dtoa_r+0x2f0>)
 800f886:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f88a:	ea33 0308 	bics.w	r3, r3, r8
 800f88e:	d11b      	bne.n	800f8c8 <_dtoa_r+0xb8>
 800f890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f892:	f242 730f 	movw	r3, #9999	; 0x270f
 800f896:	6013      	str	r3, [r2, #0]
 800f898:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f89c:	4333      	orrs	r3, r6
 800f89e:	f000 8593 	beq.w	80103c8 <_dtoa_r+0xbb8>
 800f8a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8a4:	b963      	cbnz	r3, 800f8c0 <_dtoa_r+0xb0>
 800f8a6:	4b97      	ldr	r3, [pc, #604]	; (800fb04 <_dtoa_r+0x2f4>)
 800f8a8:	e027      	b.n	800f8fa <_dtoa_r+0xea>
 800f8aa:	4b97      	ldr	r3, [pc, #604]	; (800fb08 <_dtoa_r+0x2f8>)
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	3308      	adds	r3, #8
 800f8b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	9800      	ldr	r0, [sp, #0]
 800f8b6:	b013      	add	sp, #76	; 0x4c
 800f8b8:	ecbd 8b04 	vpop	{d8-d9}
 800f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c0:	4b90      	ldr	r3, [pc, #576]	; (800fb04 <_dtoa_r+0x2f4>)
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	3303      	adds	r3, #3
 800f8c6:	e7f3      	b.n	800f8b0 <_dtoa_r+0xa0>
 800f8c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	ec51 0b17 	vmov	r0, r1, d7
 800f8d2:	eeb0 8a47 	vmov.f32	s16, s14
 800f8d6:	eef0 8a67 	vmov.f32	s17, s15
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f7f1 f8fc 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8e0:	4681      	mov	r9, r0
 800f8e2:	b160      	cbz	r0, 800f8fe <_dtoa_r+0xee>
 800f8e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	6013      	str	r3, [r2, #0]
 800f8ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f000 8568 	beq.w	80103c2 <_dtoa_r+0xbb2>
 800f8f2:	4b86      	ldr	r3, [pc, #536]	; (800fb0c <_dtoa_r+0x2fc>)
 800f8f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f8f6:	6013      	str	r3, [r2, #0]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	e7da      	b.n	800f8b4 <_dtoa_r+0xa4>
 800f8fe:	aa10      	add	r2, sp, #64	; 0x40
 800f900:	a911      	add	r1, sp, #68	; 0x44
 800f902:	4620      	mov	r0, r4
 800f904:	eeb0 0a48 	vmov.f32	s0, s16
 800f908:	eef0 0a68 	vmov.f32	s1, s17
 800f90c:	f001 f8e0 	bl	8010ad0 <__d2b>
 800f910:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f914:	4682      	mov	sl, r0
 800f916:	2d00      	cmp	r5, #0
 800f918:	d07f      	beq.n	800fa1a <_dtoa_r+0x20a>
 800f91a:	ee18 3a90 	vmov	r3, s17
 800f91e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f922:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f926:	ec51 0b18 	vmov	r0, r1, d8
 800f92a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f92e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f932:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f936:	4619      	mov	r1, r3
 800f938:	2200      	movs	r2, #0
 800f93a:	4b75      	ldr	r3, [pc, #468]	; (800fb10 <_dtoa_r+0x300>)
 800f93c:	f7f0 fcac 	bl	8000298 <__aeabi_dsub>
 800f940:	a367      	add	r3, pc, #412	; (adr r3, 800fae0 <_dtoa_r+0x2d0>)
 800f942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f946:	f7f0 fe5f 	bl	8000608 <__aeabi_dmul>
 800f94a:	a367      	add	r3, pc, #412	; (adr r3, 800fae8 <_dtoa_r+0x2d8>)
 800f94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f950:	f7f0 fca4 	bl	800029c <__adddf3>
 800f954:	4606      	mov	r6, r0
 800f956:	4628      	mov	r0, r5
 800f958:	460f      	mov	r7, r1
 800f95a:	f7f0 fdeb 	bl	8000534 <__aeabi_i2d>
 800f95e:	a364      	add	r3, pc, #400	; (adr r3, 800faf0 <_dtoa_r+0x2e0>)
 800f960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f964:	f7f0 fe50 	bl	8000608 <__aeabi_dmul>
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4630      	mov	r0, r6
 800f96e:	4639      	mov	r1, r7
 800f970:	f7f0 fc94 	bl	800029c <__adddf3>
 800f974:	4606      	mov	r6, r0
 800f976:	460f      	mov	r7, r1
 800f978:	f7f1 f8f6 	bl	8000b68 <__aeabi_d2iz>
 800f97c:	2200      	movs	r2, #0
 800f97e:	4683      	mov	fp, r0
 800f980:	2300      	movs	r3, #0
 800f982:	4630      	mov	r0, r6
 800f984:	4639      	mov	r1, r7
 800f986:	f7f1 f8b1 	bl	8000aec <__aeabi_dcmplt>
 800f98a:	b148      	cbz	r0, 800f9a0 <_dtoa_r+0x190>
 800f98c:	4658      	mov	r0, fp
 800f98e:	f7f0 fdd1 	bl	8000534 <__aeabi_i2d>
 800f992:	4632      	mov	r2, r6
 800f994:	463b      	mov	r3, r7
 800f996:	f7f1 f89f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f99a:	b908      	cbnz	r0, 800f9a0 <_dtoa_r+0x190>
 800f99c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f9a0:	f1bb 0f16 	cmp.w	fp, #22
 800f9a4:	d857      	bhi.n	800fa56 <_dtoa_r+0x246>
 800f9a6:	4b5b      	ldr	r3, [pc, #364]	; (800fb14 <_dtoa_r+0x304>)
 800f9a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b0:	ec51 0b18 	vmov	r0, r1, d8
 800f9b4:	f7f1 f89a 	bl	8000aec <__aeabi_dcmplt>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d04e      	beq.n	800fa5a <_dtoa_r+0x24a>
 800f9bc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	930c      	str	r3, [sp, #48]	; 0x30
 800f9c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9c6:	1b5b      	subs	r3, r3, r5
 800f9c8:	1e5a      	subs	r2, r3, #1
 800f9ca:	bf45      	ittet	mi
 800f9cc:	f1c3 0301 	rsbmi	r3, r3, #1
 800f9d0:	9305      	strmi	r3, [sp, #20]
 800f9d2:	2300      	movpl	r3, #0
 800f9d4:	2300      	movmi	r3, #0
 800f9d6:	9206      	str	r2, [sp, #24]
 800f9d8:	bf54      	ite	pl
 800f9da:	9305      	strpl	r3, [sp, #20]
 800f9dc:	9306      	strmi	r3, [sp, #24]
 800f9de:	f1bb 0f00 	cmp.w	fp, #0
 800f9e2:	db3c      	blt.n	800fa5e <_dtoa_r+0x24e>
 800f9e4:	9b06      	ldr	r3, [sp, #24]
 800f9e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f9ea:	445b      	add	r3, fp
 800f9ec:	9306      	str	r3, [sp, #24]
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	9308      	str	r3, [sp, #32]
 800f9f2:	9b07      	ldr	r3, [sp, #28]
 800f9f4:	2b09      	cmp	r3, #9
 800f9f6:	d868      	bhi.n	800faca <_dtoa_r+0x2ba>
 800f9f8:	2b05      	cmp	r3, #5
 800f9fa:	bfc4      	itt	gt
 800f9fc:	3b04      	subgt	r3, #4
 800f9fe:	9307      	strgt	r3, [sp, #28]
 800fa00:	9b07      	ldr	r3, [sp, #28]
 800fa02:	f1a3 0302 	sub.w	r3, r3, #2
 800fa06:	bfcc      	ite	gt
 800fa08:	2500      	movgt	r5, #0
 800fa0a:	2501      	movle	r5, #1
 800fa0c:	2b03      	cmp	r3, #3
 800fa0e:	f200 8085 	bhi.w	800fb1c <_dtoa_r+0x30c>
 800fa12:	e8df f003 	tbb	[pc, r3]
 800fa16:	3b2e      	.short	0x3b2e
 800fa18:	5839      	.short	0x5839
 800fa1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fa1e:	441d      	add	r5, r3
 800fa20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fa24:	2b20      	cmp	r3, #32
 800fa26:	bfc1      	itttt	gt
 800fa28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fa2c:	fa08 f803 	lslgt.w	r8, r8, r3
 800fa30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fa34:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fa38:	bfd6      	itet	le
 800fa3a:	f1c3 0320 	rsble	r3, r3, #32
 800fa3e:	ea48 0003 	orrgt.w	r0, r8, r3
 800fa42:	fa06 f003 	lslle.w	r0, r6, r3
 800fa46:	f7f0 fd65 	bl	8000514 <__aeabi_ui2d>
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fa50:	3d01      	subs	r5, #1
 800fa52:	920e      	str	r2, [sp, #56]	; 0x38
 800fa54:	e76f      	b.n	800f936 <_dtoa_r+0x126>
 800fa56:	2301      	movs	r3, #1
 800fa58:	e7b3      	b.n	800f9c2 <_dtoa_r+0x1b2>
 800fa5a:	900c      	str	r0, [sp, #48]	; 0x30
 800fa5c:	e7b2      	b.n	800f9c4 <_dtoa_r+0x1b4>
 800fa5e:	9b05      	ldr	r3, [sp, #20]
 800fa60:	eba3 030b 	sub.w	r3, r3, fp
 800fa64:	9305      	str	r3, [sp, #20]
 800fa66:	f1cb 0300 	rsb	r3, fp, #0
 800fa6a:	9308      	str	r3, [sp, #32]
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa70:	e7bf      	b.n	800f9f2 <_dtoa_r+0x1e2>
 800fa72:	2300      	movs	r3, #0
 800fa74:	9309      	str	r3, [sp, #36]	; 0x24
 800fa76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	dc52      	bgt.n	800fb22 <_dtoa_r+0x312>
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	9304      	str	r3, [sp, #16]
 800fa82:	461a      	mov	r2, r3
 800fa84:	920a      	str	r2, [sp, #40]	; 0x28
 800fa86:	e00b      	b.n	800faa0 <_dtoa_r+0x290>
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e7f3      	b.n	800fa74 <_dtoa_r+0x264>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa92:	445b      	add	r3, fp
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	3301      	adds	r3, #1
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	9304      	str	r3, [sp, #16]
 800fa9c:	bfb8      	it	lt
 800fa9e:	2301      	movlt	r3, #1
 800faa0:	69e0      	ldr	r0, [r4, #28]
 800faa2:	2100      	movs	r1, #0
 800faa4:	2204      	movs	r2, #4
 800faa6:	f102 0614 	add.w	r6, r2, #20
 800faaa:	429e      	cmp	r6, r3
 800faac:	d93d      	bls.n	800fb2a <_dtoa_r+0x31a>
 800faae:	6041      	str	r1, [r0, #4]
 800fab0:	4620      	mov	r0, r4
 800fab2:	f000 fceb 	bl	801048c <_Balloc>
 800fab6:	9000      	str	r0, [sp, #0]
 800fab8:	2800      	cmp	r0, #0
 800faba:	d139      	bne.n	800fb30 <_dtoa_r+0x320>
 800fabc:	4b16      	ldr	r3, [pc, #88]	; (800fb18 <_dtoa_r+0x308>)
 800fabe:	4602      	mov	r2, r0
 800fac0:	f240 11af 	movw	r1, #431	; 0x1af
 800fac4:	e6bd      	b.n	800f842 <_dtoa_r+0x32>
 800fac6:	2301      	movs	r3, #1
 800fac8:	e7e1      	b.n	800fa8e <_dtoa_r+0x27e>
 800faca:	2501      	movs	r5, #1
 800facc:	2300      	movs	r3, #0
 800face:	9307      	str	r3, [sp, #28]
 800fad0:	9509      	str	r5, [sp, #36]	; 0x24
 800fad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fad6:	9301      	str	r3, [sp, #4]
 800fad8:	9304      	str	r3, [sp, #16]
 800fada:	2200      	movs	r2, #0
 800fadc:	2312      	movs	r3, #18
 800fade:	e7d1      	b.n	800fa84 <_dtoa_r+0x274>
 800fae0:	636f4361 	.word	0x636f4361
 800fae4:	3fd287a7 	.word	0x3fd287a7
 800fae8:	8b60c8b3 	.word	0x8b60c8b3
 800faec:	3fc68a28 	.word	0x3fc68a28
 800faf0:	509f79fb 	.word	0x509f79fb
 800faf4:	3fd34413 	.word	0x3fd34413
 800faf8:	080118d5 	.word	0x080118d5
 800fafc:	080118ec 	.word	0x080118ec
 800fb00:	7ff00000 	.word	0x7ff00000
 800fb04:	080118d1 	.word	0x080118d1
 800fb08:	080118c8 	.word	0x080118c8
 800fb0c:	080118a5 	.word	0x080118a5
 800fb10:	3ff80000 	.word	0x3ff80000
 800fb14:	080119d8 	.word	0x080119d8
 800fb18:	08011944 	.word	0x08011944
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800fb20:	e7d7      	b.n	800fad2 <_dtoa_r+0x2c2>
 800fb22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb24:	9301      	str	r3, [sp, #4]
 800fb26:	9304      	str	r3, [sp, #16]
 800fb28:	e7ba      	b.n	800faa0 <_dtoa_r+0x290>
 800fb2a:	3101      	adds	r1, #1
 800fb2c:	0052      	lsls	r2, r2, #1
 800fb2e:	e7ba      	b.n	800faa6 <_dtoa_r+0x296>
 800fb30:	69e3      	ldr	r3, [r4, #28]
 800fb32:	9a00      	ldr	r2, [sp, #0]
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	9b04      	ldr	r3, [sp, #16]
 800fb38:	2b0e      	cmp	r3, #14
 800fb3a:	f200 80a8 	bhi.w	800fc8e <_dtoa_r+0x47e>
 800fb3e:	2d00      	cmp	r5, #0
 800fb40:	f000 80a5 	beq.w	800fc8e <_dtoa_r+0x47e>
 800fb44:	f1bb 0f00 	cmp.w	fp, #0
 800fb48:	dd38      	ble.n	800fbbc <_dtoa_r+0x3ac>
 800fb4a:	4bc0      	ldr	r3, [pc, #768]	; (800fe4c <_dtoa_r+0x63c>)
 800fb4c:	f00b 020f 	and.w	r2, fp, #15
 800fb50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fb58:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fb5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fb60:	d019      	beq.n	800fb96 <_dtoa_r+0x386>
 800fb62:	4bbb      	ldr	r3, [pc, #748]	; (800fe50 <_dtoa_r+0x640>)
 800fb64:	ec51 0b18 	vmov	r0, r1, d8
 800fb68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fb6c:	f7f0 fe76 	bl	800085c <__aeabi_ddiv>
 800fb70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb74:	f008 080f 	and.w	r8, r8, #15
 800fb78:	2503      	movs	r5, #3
 800fb7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fe50 <_dtoa_r+0x640>
 800fb7e:	f1b8 0f00 	cmp.w	r8, #0
 800fb82:	d10a      	bne.n	800fb9a <_dtoa_r+0x38a>
 800fb84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb88:	4632      	mov	r2, r6
 800fb8a:	463b      	mov	r3, r7
 800fb8c:	f7f0 fe66 	bl	800085c <__aeabi_ddiv>
 800fb90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb94:	e02b      	b.n	800fbee <_dtoa_r+0x3de>
 800fb96:	2502      	movs	r5, #2
 800fb98:	e7ef      	b.n	800fb7a <_dtoa_r+0x36a>
 800fb9a:	f018 0f01 	tst.w	r8, #1
 800fb9e:	d008      	beq.n	800fbb2 <_dtoa_r+0x3a2>
 800fba0:	4630      	mov	r0, r6
 800fba2:	4639      	mov	r1, r7
 800fba4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fba8:	f7f0 fd2e 	bl	8000608 <__aeabi_dmul>
 800fbac:	3501      	adds	r5, #1
 800fbae:	4606      	mov	r6, r0
 800fbb0:	460f      	mov	r7, r1
 800fbb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fbb6:	f109 0908 	add.w	r9, r9, #8
 800fbba:	e7e0      	b.n	800fb7e <_dtoa_r+0x36e>
 800fbbc:	f000 809f 	beq.w	800fcfe <_dtoa_r+0x4ee>
 800fbc0:	f1cb 0600 	rsb	r6, fp, #0
 800fbc4:	4ba1      	ldr	r3, [pc, #644]	; (800fe4c <_dtoa_r+0x63c>)
 800fbc6:	4fa2      	ldr	r7, [pc, #648]	; (800fe50 <_dtoa_r+0x640>)
 800fbc8:	f006 020f 	and.w	r2, r6, #15
 800fbcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd4:	ec51 0b18 	vmov	r0, r1, d8
 800fbd8:	f7f0 fd16 	bl	8000608 <__aeabi_dmul>
 800fbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbe0:	1136      	asrs	r6, r6, #4
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	2502      	movs	r5, #2
 800fbe6:	2e00      	cmp	r6, #0
 800fbe8:	d17e      	bne.n	800fce8 <_dtoa_r+0x4d8>
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d1d0      	bne.n	800fb90 <_dtoa_r+0x380>
 800fbee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbf0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	f000 8084 	beq.w	800fd02 <_dtoa_r+0x4f2>
 800fbfa:	4b96      	ldr	r3, [pc, #600]	; (800fe54 <_dtoa_r+0x644>)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	4640      	mov	r0, r8
 800fc00:	4649      	mov	r1, r9
 800fc02:	f7f0 ff73 	bl	8000aec <__aeabi_dcmplt>
 800fc06:	2800      	cmp	r0, #0
 800fc08:	d07b      	beq.n	800fd02 <_dtoa_r+0x4f2>
 800fc0a:	9b04      	ldr	r3, [sp, #16]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d078      	beq.n	800fd02 <_dtoa_r+0x4f2>
 800fc10:	9b01      	ldr	r3, [sp, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	dd39      	ble.n	800fc8a <_dtoa_r+0x47a>
 800fc16:	4b90      	ldr	r3, [pc, #576]	; (800fe58 <_dtoa_r+0x648>)
 800fc18:	2200      	movs	r2, #0
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	4649      	mov	r1, r9
 800fc1e:	f7f0 fcf3 	bl	8000608 <__aeabi_dmul>
 800fc22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc26:	9e01      	ldr	r6, [sp, #4]
 800fc28:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800fc2c:	3501      	adds	r5, #1
 800fc2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fc32:	4628      	mov	r0, r5
 800fc34:	f7f0 fc7e 	bl	8000534 <__aeabi_i2d>
 800fc38:	4642      	mov	r2, r8
 800fc3a:	464b      	mov	r3, r9
 800fc3c:	f7f0 fce4 	bl	8000608 <__aeabi_dmul>
 800fc40:	4b86      	ldr	r3, [pc, #536]	; (800fe5c <_dtoa_r+0x64c>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	f7f0 fb2a 	bl	800029c <__adddf3>
 800fc48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fc4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc50:	9303      	str	r3, [sp, #12]
 800fc52:	2e00      	cmp	r6, #0
 800fc54:	d158      	bne.n	800fd08 <_dtoa_r+0x4f8>
 800fc56:	4b82      	ldr	r3, [pc, #520]	; (800fe60 <_dtoa_r+0x650>)
 800fc58:	2200      	movs	r2, #0
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	f7f0 fb1b 	bl	8000298 <__aeabi_dsub>
 800fc62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc66:	4680      	mov	r8, r0
 800fc68:	4689      	mov	r9, r1
 800fc6a:	f7f0 ff5d 	bl	8000b28 <__aeabi_dcmpgt>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	f040 8296 	bne.w	80101a0 <_dtoa_r+0x990>
 800fc74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fc78:	4640      	mov	r0, r8
 800fc7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc7e:	4649      	mov	r1, r9
 800fc80:	f7f0 ff34 	bl	8000aec <__aeabi_dcmplt>
 800fc84:	2800      	cmp	r0, #0
 800fc86:	f040 8289 	bne.w	801019c <_dtoa_r+0x98c>
 800fc8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fc8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	f2c0 814e 	blt.w	800ff32 <_dtoa_r+0x722>
 800fc96:	f1bb 0f0e 	cmp.w	fp, #14
 800fc9a:	f300 814a 	bgt.w	800ff32 <_dtoa_r+0x722>
 800fc9e:	4b6b      	ldr	r3, [pc, #428]	; (800fe4c <_dtoa_r+0x63c>)
 800fca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	f280 80dc 	bge.w	800fe68 <_dtoa_r+0x658>
 800fcb0:	9b04      	ldr	r3, [sp, #16]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f300 80d8 	bgt.w	800fe68 <_dtoa_r+0x658>
 800fcb8:	f040 826f 	bne.w	801019a <_dtoa_r+0x98a>
 800fcbc:	4b68      	ldr	r3, [pc, #416]	; (800fe60 <_dtoa_r+0x650>)
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	4640      	mov	r0, r8
 800fcc2:	4649      	mov	r1, r9
 800fcc4:	f7f0 fca0 	bl	8000608 <__aeabi_dmul>
 800fcc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fccc:	f7f0 ff22 	bl	8000b14 <__aeabi_dcmpge>
 800fcd0:	9e04      	ldr	r6, [sp, #16]
 800fcd2:	4637      	mov	r7, r6
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	f040 8245 	bne.w	8010164 <_dtoa_r+0x954>
 800fcda:	9d00      	ldr	r5, [sp, #0]
 800fcdc:	2331      	movs	r3, #49	; 0x31
 800fcde:	f805 3b01 	strb.w	r3, [r5], #1
 800fce2:	f10b 0b01 	add.w	fp, fp, #1
 800fce6:	e241      	b.n	801016c <_dtoa_r+0x95c>
 800fce8:	07f2      	lsls	r2, r6, #31
 800fcea:	d505      	bpl.n	800fcf8 <_dtoa_r+0x4e8>
 800fcec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcf0:	f7f0 fc8a 	bl	8000608 <__aeabi_dmul>
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	1076      	asrs	r6, r6, #1
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	e773      	b.n	800fbe6 <_dtoa_r+0x3d6>
 800fcfe:	2502      	movs	r5, #2
 800fd00:	e775      	b.n	800fbee <_dtoa_r+0x3de>
 800fd02:	9e04      	ldr	r6, [sp, #16]
 800fd04:	465f      	mov	r7, fp
 800fd06:	e792      	b.n	800fc2e <_dtoa_r+0x41e>
 800fd08:	9900      	ldr	r1, [sp, #0]
 800fd0a:	4b50      	ldr	r3, [pc, #320]	; (800fe4c <_dtoa_r+0x63c>)
 800fd0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd10:	4431      	add	r1, r6
 800fd12:	9102      	str	r1, [sp, #8]
 800fd14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd16:	eeb0 9a47 	vmov.f32	s18, s14
 800fd1a:	eef0 9a67 	vmov.f32	s19, s15
 800fd1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fd22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd26:	2900      	cmp	r1, #0
 800fd28:	d044      	beq.n	800fdb4 <_dtoa_r+0x5a4>
 800fd2a:	494e      	ldr	r1, [pc, #312]	; (800fe64 <_dtoa_r+0x654>)
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	f7f0 fd95 	bl	800085c <__aeabi_ddiv>
 800fd32:	ec53 2b19 	vmov	r2, r3, d9
 800fd36:	f7f0 faaf 	bl	8000298 <__aeabi_dsub>
 800fd3a:	9d00      	ldr	r5, [sp, #0]
 800fd3c:	ec41 0b19 	vmov	d9, r0, r1
 800fd40:	4649      	mov	r1, r9
 800fd42:	4640      	mov	r0, r8
 800fd44:	f7f0 ff10 	bl	8000b68 <__aeabi_d2iz>
 800fd48:	4606      	mov	r6, r0
 800fd4a:	f7f0 fbf3 	bl	8000534 <__aeabi_i2d>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	460b      	mov	r3, r1
 800fd52:	4640      	mov	r0, r8
 800fd54:	4649      	mov	r1, r9
 800fd56:	f7f0 fa9f 	bl	8000298 <__aeabi_dsub>
 800fd5a:	3630      	adds	r6, #48	; 0x30
 800fd5c:	f805 6b01 	strb.w	r6, [r5], #1
 800fd60:	ec53 2b19 	vmov	r2, r3, d9
 800fd64:	4680      	mov	r8, r0
 800fd66:	4689      	mov	r9, r1
 800fd68:	f7f0 fec0 	bl	8000aec <__aeabi_dcmplt>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d164      	bne.n	800fe3a <_dtoa_r+0x62a>
 800fd70:	4642      	mov	r2, r8
 800fd72:	464b      	mov	r3, r9
 800fd74:	4937      	ldr	r1, [pc, #220]	; (800fe54 <_dtoa_r+0x644>)
 800fd76:	2000      	movs	r0, #0
 800fd78:	f7f0 fa8e 	bl	8000298 <__aeabi_dsub>
 800fd7c:	ec53 2b19 	vmov	r2, r3, d9
 800fd80:	f7f0 feb4 	bl	8000aec <__aeabi_dcmplt>
 800fd84:	2800      	cmp	r0, #0
 800fd86:	f040 80b6 	bne.w	800fef6 <_dtoa_r+0x6e6>
 800fd8a:	9b02      	ldr	r3, [sp, #8]
 800fd8c:	429d      	cmp	r5, r3
 800fd8e:	f43f af7c 	beq.w	800fc8a <_dtoa_r+0x47a>
 800fd92:	4b31      	ldr	r3, [pc, #196]	; (800fe58 <_dtoa_r+0x648>)
 800fd94:	ec51 0b19 	vmov	r0, r1, d9
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f7f0 fc35 	bl	8000608 <__aeabi_dmul>
 800fd9e:	4b2e      	ldr	r3, [pc, #184]	; (800fe58 <_dtoa_r+0x648>)
 800fda0:	ec41 0b19 	vmov	d9, r0, r1
 800fda4:	2200      	movs	r2, #0
 800fda6:	4640      	mov	r0, r8
 800fda8:	4649      	mov	r1, r9
 800fdaa:	f7f0 fc2d 	bl	8000608 <__aeabi_dmul>
 800fdae:	4680      	mov	r8, r0
 800fdb0:	4689      	mov	r9, r1
 800fdb2:	e7c5      	b.n	800fd40 <_dtoa_r+0x530>
 800fdb4:	ec51 0b17 	vmov	r0, r1, d7
 800fdb8:	f7f0 fc26 	bl	8000608 <__aeabi_dmul>
 800fdbc:	9b02      	ldr	r3, [sp, #8]
 800fdbe:	9d00      	ldr	r5, [sp, #0]
 800fdc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdc2:	ec41 0b19 	vmov	d9, r0, r1
 800fdc6:	4649      	mov	r1, r9
 800fdc8:	4640      	mov	r0, r8
 800fdca:	f7f0 fecd 	bl	8000b68 <__aeabi_d2iz>
 800fdce:	4606      	mov	r6, r0
 800fdd0:	f7f0 fbb0 	bl	8000534 <__aeabi_i2d>
 800fdd4:	3630      	adds	r6, #48	; 0x30
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	460b      	mov	r3, r1
 800fdda:	4640      	mov	r0, r8
 800fddc:	4649      	mov	r1, r9
 800fdde:	f7f0 fa5b 	bl	8000298 <__aeabi_dsub>
 800fde2:	f805 6b01 	strb.w	r6, [r5], #1
 800fde6:	9b02      	ldr	r3, [sp, #8]
 800fde8:	429d      	cmp	r5, r3
 800fdea:	4680      	mov	r8, r0
 800fdec:	4689      	mov	r9, r1
 800fdee:	f04f 0200 	mov.w	r2, #0
 800fdf2:	d124      	bne.n	800fe3e <_dtoa_r+0x62e>
 800fdf4:	4b1b      	ldr	r3, [pc, #108]	; (800fe64 <_dtoa_r+0x654>)
 800fdf6:	ec51 0b19 	vmov	r0, r1, d9
 800fdfa:	f7f0 fa4f 	bl	800029c <__adddf3>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	4640      	mov	r0, r8
 800fe04:	4649      	mov	r1, r9
 800fe06:	f7f0 fe8f 	bl	8000b28 <__aeabi_dcmpgt>
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d173      	bne.n	800fef6 <_dtoa_r+0x6e6>
 800fe0e:	ec53 2b19 	vmov	r2, r3, d9
 800fe12:	4914      	ldr	r1, [pc, #80]	; (800fe64 <_dtoa_r+0x654>)
 800fe14:	2000      	movs	r0, #0
 800fe16:	f7f0 fa3f 	bl	8000298 <__aeabi_dsub>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	4640      	mov	r0, r8
 800fe20:	4649      	mov	r1, r9
 800fe22:	f7f0 fe63 	bl	8000aec <__aeabi_dcmplt>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	f43f af2f 	beq.w	800fc8a <_dtoa_r+0x47a>
 800fe2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fe2e:	1e6b      	subs	r3, r5, #1
 800fe30:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fe36:	2b30      	cmp	r3, #48	; 0x30
 800fe38:	d0f8      	beq.n	800fe2c <_dtoa_r+0x61c>
 800fe3a:	46bb      	mov	fp, r7
 800fe3c:	e04a      	b.n	800fed4 <_dtoa_r+0x6c4>
 800fe3e:	4b06      	ldr	r3, [pc, #24]	; (800fe58 <_dtoa_r+0x648>)
 800fe40:	f7f0 fbe2 	bl	8000608 <__aeabi_dmul>
 800fe44:	4680      	mov	r8, r0
 800fe46:	4689      	mov	r9, r1
 800fe48:	e7bd      	b.n	800fdc6 <_dtoa_r+0x5b6>
 800fe4a:	bf00      	nop
 800fe4c:	080119d8 	.word	0x080119d8
 800fe50:	080119b0 	.word	0x080119b0
 800fe54:	3ff00000 	.word	0x3ff00000
 800fe58:	40240000 	.word	0x40240000
 800fe5c:	401c0000 	.word	0x401c0000
 800fe60:	40140000 	.word	0x40140000
 800fe64:	3fe00000 	.word	0x3fe00000
 800fe68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fe6c:	9d00      	ldr	r5, [sp, #0]
 800fe6e:	4642      	mov	r2, r8
 800fe70:	464b      	mov	r3, r9
 800fe72:	4630      	mov	r0, r6
 800fe74:	4639      	mov	r1, r7
 800fe76:	f7f0 fcf1 	bl	800085c <__aeabi_ddiv>
 800fe7a:	f7f0 fe75 	bl	8000b68 <__aeabi_d2iz>
 800fe7e:	9001      	str	r0, [sp, #4]
 800fe80:	f7f0 fb58 	bl	8000534 <__aeabi_i2d>
 800fe84:	4642      	mov	r2, r8
 800fe86:	464b      	mov	r3, r9
 800fe88:	f7f0 fbbe 	bl	8000608 <__aeabi_dmul>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	4630      	mov	r0, r6
 800fe92:	4639      	mov	r1, r7
 800fe94:	f7f0 fa00 	bl	8000298 <__aeabi_dsub>
 800fe98:	9e01      	ldr	r6, [sp, #4]
 800fe9a:	9f04      	ldr	r7, [sp, #16]
 800fe9c:	3630      	adds	r6, #48	; 0x30
 800fe9e:	f805 6b01 	strb.w	r6, [r5], #1
 800fea2:	9e00      	ldr	r6, [sp, #0]
 800fea4:	1bae      	subs	r6, r5, r6
 800fea6:	42b7      	cmp	r7, r6
 800fea8:	4602      	mov	r2, r0
 800feaa:	460b      	mov	r3, r1
 800feac:	d134      	bne.n	800ff18 <_dtoa_r+0x708>
 800feae:	f7f0 f9f5 	bl	800029c <__adddf3>
 800feb2:	4642      	mov	r2, r8
 800feb4:	464b      	mov	r3, r9
 800feb6:	4606      	mov	r6, r0
 800feb8:	460f      	mov	r7, r1
 800feba:	f7f0 fe35 	bl	8000b28 <__aeabi_dcmpgt>
 800febe:	b9c8      	cbnz	r0, 800fef4 <_dtoa_r+0x6e4>
 800fec0:	4642      	mov	r2, r8
 800fec2:	464b      	mov	r3, r9
 800fec4:	4630      	mov	r0, r6
 800fec6:	4639      	mov	r1, r7
 800fec8:	f7f0 fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 800fecc:	b110      	cbz	r0, 800fed4 <_dtoa_r+0x6c4>
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	07db      	lsls	r3, r3, #31
 800fed2:	d40f      	bmi.n	800fef4 <_dtoa_r+0x6e4>
 800fed4:	4651      	mov	r1, sl
 800fed6:	4620      	mov	r0, r4
 800fed8:	f000 fb18 	bl	801050c <_Bfree>
 800fedc:	2300      	movs	r3, #0
 800fede:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fee0:	702b      	strb	r3, [r5, #0]
 800fee2:	f10b 0301 	add.w	r3, fp, #1
 800fee6:	6013      	str	r3, [r2, #0]
 800fee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800feea:	2b00      	cmp	r3, #0
 800feec:	f43f ace2 	beq.w	800f8b4 <_dtoa_r+0xa4>
 800fef0:	601d      	str	r5, [r3, #0]
 800fef2:	e4df      	b.n	800f8b4 <_dtoa_r+0xa4>
 800fef4:	465f      	mov	r7, fp
 800fef6:	462b      	mov	r3, r5
 800fef8:	461d      	mov	r5, r3
 800fefa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fefe:	2a39      	cmp	r2, #57	; 0x39
 800ff00:	d106      	bne.n	800ff10 <_dtoa_r+0x700>
 800ff02:	9a00      	ldr	r2, [sp, #0]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d1f7      	bne.n	800fef8 <_dtoa_r+0x6e8>
 800ff08:	9900      	ldr	r1, [sp, #0]
 800ff0a:	2230      	movs	r2, #48	; 0x30
 800ff0c:	3701      	adds	r7, #1
 800ff0e:	700a      	strb	r2, [r1, #0]
 800ff10:	781a      	ldrb	r2, [r3, #0]
 800ff12:	3201      	adds	r2, #1
 800ff14:	701a      	strb	r2, [r3, #0]
 800ff16:	e790      	b.n	800fe3a <_dtoa_r+0x62a>
 800ff18:	4ba3      	ldr	r3, [pc, #652]	; (80101a8 <_dtoa_r+0x998>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f7f0 fb74 	bl	8000608 <__aeabi_dmul>
 800ff20:	2200      	movs	r2, #0
 800ff22:	2300      	movs	r3, #0
 800ff24:	4606      	mov	r6, r0
 800ff26:	460f      	mov	r7, r1
 800ff28:	f7f0 fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d09e      	beq.n	800fe6e <_dtoa_r+0x65e>
 800ff30:	e7d0      	b.n	800fed4 <_dtoa_r+0x6c4>
 800ff32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff34:	2a00      	cmp	r2, #0
 800ff36:	f000 80ca 	beq.w	80100ce <_dtoa_r+0x8be>
 800ff3a:	9a07      	ldr	r2, [sp, #28]
 800ff3c:	2a01      	cmp	r2, #1
 800ff3e:	f300 80ad 	bgt.w	801009c <_dtoa_r+0x88c>
 800ff42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff44:	2a00      	cmp	r2, #0
 800ff46:	f000 80a5 	beq.w	8010094 <_dtoa_r+0x884>
 800ff4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ff4e:	9e08      	ldr	r6, [sp, #32]
 800ff50:	9d05      	ldr	r5, [sp, #20]
 800ff52:	9a05      	ldr	r2, [sp, #20]
 800ff54:	441a      	add	r2, r3
 800ff56:	9205      	str	r2, [sp, #20]
 800ff58:	9a06      	ldr	r2, [sp, #24]
 800ff5a:	2101      	movs	r1, #1
 800ff5c:	441a      	add	r2, r3
 800ff5e:	4620      	mov	r0, r4
 800ff60:	9206      	str	r2, [sp, #24]
 800ff62:	f000 fb89 	bl	8010678 <__i2b>
 800ff66:	4607      	mov	r7, r0
 800ff68:	b165      	cbz	r5, 800ff84 <_dtoa_r+0x774>
 800ff6a:	9b06      	ldr	r3, [sp, #24]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	dd09      	ble.n	800ff84 <_dtoa_r+0x774>
 800ff70:	42ab      	cmp	r3, r5
 800ff72:	9a05      	ldr	r2, [sp, #20]
 800ff74:	bfa8      	it	ge
 800ff76:	462b      	movge	r3, r5
 800ff78:	1ad2      	subs	r2, r2, r3
 800ff7a:	9205      	str	r2, [sp, #20]
 800ff7c:	9a06      	ldr	r2, [sp, #24]
 800ff7e:	1aed      	subs	r5, r5, r3
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	9306      	str	r3, [sp, #24]
 800ff84:	9b08      	ldr	r3, [sp, #32]
 800ff86:	b1f3      	cbz	r3, 800ffc6 <_dtoa_r+0x7b6>
 800ff88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	f000 80a3 	beq.w	80100d6 <_dtoa_r+0x8c6>
 800ff90:	2e00      	cmp	r6, #0
 800ff92:	dd10      	ble.n	800ffb6 <_dtoa_r+0x7a6>
 800ff94:	4639      	mov	r1, r7
 800ff96:	4632      	mov	r2, r6
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f000 fc2d 	bl	80107f8 <__pow5mult>
 800ff9e:	4652      	mov	r2, sl
 800ffa0:	4601      	mov	r1, r0
 800ffa2:	4607      	mov	r7, r0
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f000 fb7d 	bl	80106a4 <__multiply>
 800ffaa:	4651      	mov	r1, sl
 800ffac:	4680      	mov	r8, r0
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 faac 	bl	801050c <_Bfree>
 800ffb4:	46c2      	mov	sl, r8
 800ffb6:	9b08      	ldr	r3, [sp, #32]
 800ffb8:	1b9a      	subs	r2, r3, r6
 800ffba:	d004      	beq.n	800ffc6 <_dtoa_r+0x7b6>
 800ffbc:	4651      	mov	r1, sl
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f000 fc1a 	bl	80107f8 <__pow5mult>
 800ffc4:	4682      	mov	sl, r0
 800ffc6:	2101      	movs	r1, #1
 800ffc8:	4620      	mov	r0, r4
 800ffca:	f000 fb55 	bl	8010678 <__i2b>
 800ffce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	f340 8081 	ble.w	80100da <_dtoa_r+0x8ca>
 800ffd8:	461a      	mov	r2, r3
 800ffda:	4601      	mov	r1, r0
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f000 fc0b 	bl	80107f8 <__pow5mult>
 800ffe2:	9b07      	ldr	r3, [sp, #28]
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	dd7a      	ble.n	80100e0 <_dtoa_r+0x8d0>
 800ffea:	f04f 0800 	mov.w	r8, #0
 800ffee:	6933      	ldr	r3, [r6, #16]
 800fff0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fff4:	6918      	ldr	r0, [r3, #16]
 800fff6:	f000 faf1 	bl	80105dc <__hi0bits>
 800fffa:	f1c0 0020 	rsb	r0, r0, #32
 800fffe:	9b06      	ldr	r3, [sp, #24]
 8010000:	4418      	add	r0, r3
 8010002:	f010 001f 	ands.w	r0, r0, #31
 8010006:	f000 8094 	beq.w	8010132 <_dtoa_r+0x922>
 801000a:	f1c0 0320 	rsb	r3, r0, #32
 801000e:	2b04      	cmp	r3, #4
 8010010:	f340 8085 	ble.w	801011e <_dtoa_r+0x90e>
 8010014:	9b05      	ldr	r3, [sp, #20]
 8010016:	f1c0 001c 	rsb	r0, r0, #28
 801001a:	4403      	add	r3, r0
 801001c:	9305      	str	r3, [sp, #20]
 801001e:	9b06      	ldr	r3, [sp, #24]
 8010020:	4403      	add	r3, r0
 8010022:	4405      	add	r5, r0
 8010024:	9306      	str	r3, [sp, #24]
 8010026:	9b05      	ldr	r3, [sp, #20]
 8010028:	2b00      	cmp	r3, #0
 801002a:	dd05      	ble.n	8010038 <_dtoa_r+0x828>
 801002c:	4651      	mov	r1, sl
 801002e:	461a      	mov	r2, r3
 8010030:	4620      	mov	r0, r4
 8010032:	f000 fc3b 	bl	80108ac <__lshift>
 8010036:	4682      	mov	sl, r0
 8010038:	9b06      	ldr	r3, [sp, #24]
 801003a:	2b00      	cmp	r3, #0
 801003c:	dd05      	ble.n	801004a <_dtoa_r+0x83a>
 801003e:	4631      	mov	r1, r6
 8010040:	461a      	mov	r2, r3
 8010042:	4620      	mov	r0, r4
 8010044:	f000 fc32 	bl	80108ac <__lshift>
 8010048:	4606      	mov	r6, r0
 801004a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801004c:	2b00      	cmp	r3, #0
 801004e:	d072      	beq.n	8010136 <_dtoa_r+0x926>
 8010050:	4631      	mov	r1, r6
 8010052:	4650      	mov	r0, sl
 8010054:	f000 fc96 	bl	8010984 <__mcmp>
 8010058:	2800      	cmp	r0, #0
 801005a:	da6c      	bge.n	8010136 <_dtoa_r+0x926>
 801005c:	2300      	movs	r3, #0
 801005e:	4651      	mov	r1, sl
 8010060:	220a      	movs	r2, #10
 8010062:	4620      	mov	r0, r4
 8010064:	f000 fa74 	bl	8010550 <__multadd>
 8010068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801006a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801006e:	4682      	mov	sl, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	f000 81b0 	beq.w	80103d6 <_dtoa_r+0xbc6>
 8010076:	2300      	movs	r3, #0
 8010078:	4639      	mov	r1, r7
 801007a:	220a      	movs	r2, #10
 801007c:	4620      	mov	r0, r4
 801007e:	f000 fa67 	bl	8010550 <__multadd>
 8010082:	9b01      	ldr	r3, [sp, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	4607      	mov	r7, r0
 8010088:	f300 8096 	bgt.w	80101b8 <_dtoa_r+0x9a8>
 801008c:	9b07      	ldr	r3, [sp, #28]
 801008e:	2b02      	cmp	r3, #2
 8010090:	dc59      	bgt.n	8010146 <_dtoa_r+0x936>
 8010092:	e091      	b.n	80101b8 <_dtoa_r+0x9a8>
 8010094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801009a:	e758      	b.n	800ff4e <_dtoa_r+0x73e>
 801009c:	9b04      	ldr	r3, [sp, #16]
 801009e:	1e5e      	subs	r6, r3, #1
 80100a0:	9b08      	ldr	r3, [sp, #32]
 80100a2:	42b3      	cmp	r3, r6
 80100a4:	bfbf      	itttt	lt
 80100a6:	9b08      	ldrlt	r3, [sp, #32]
 80100a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80100aa:	9608      	strlt	r6, [sp, #32]
 80100ac:	1af3      	sublt	r3, r6, r3
 80100ae:	bfb4      	ite	lt
 80100b0:	18d2      	addlt	r2, r2, r3
 80100b2:	1b9e      	subge	r6, r3, r6
 80100b4:	9b04      	ldr	r3, [sp, #16]
 80100b6:	bfbc      	itt	lt
 80100b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80100ba:	2600      	movlt	r6, #0
 80100bc:	2b00      	cmp	r3, #0
 80100be:	bfb7      	itett	lt
 80100c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80100c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80100c8:	1a9d      	sublt	r5, r3, r2
 80100ca:	2300      	movlt	r3, #0
 80100cc:	e741      	b.n	800ff52 <_dtoa_r+0x742>
 80100ce:	9e08      	ldr	r6, [sp, #32]
 80100d0:	9d05      	ldr	r5, [sp, #20]
 80100d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80100d4:	e748      	b.n	800ff68 <_dtoa_r+0x758>
 80100d6:	9a08      	ldr	r2, [sp, #32]
 80100d8:	e770      	b.n	800ffbc <_dtoa_r+0x7ac>
 80100da:	9b07      	ldr	r3, [sp, #28]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	dc19      	bgt.n	8010114 <_dtoa_r+0x904>
 80100e0:	9b02      	ldr	r3, [sp, #8]
 80100e2:	b9bb      	cbnz	r3, 8010114 <_dtoa_r+0x904>
 80100e4:	9b03      	ldr	r3, [sp, #12]
 80100e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100ea:	b99b      	cbnz	r3, 8010114 <_dtoa_r+0x904>
 80100ec:	9b03      	ldr	r3, [sp, #12]
 80100ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80100f2:	0d1b      	lsrs	r3, r3, #20
 80100f4:	051b      	lsls	r3, r3, #20
 80100f6:	b183      	cbz	r3, 801011a <_dtoa_r+0x90a>
 80100f8:	9b05      	ldr	r3, [sp, #20]
 80100fa:	3301      	adds	r3, #1
 80100fc:	9305      	str	r3, [sp, #20]
 80100fe:	9b06      	ldr	r3, [sp, #24]
 8010100:	3301      	adds	r3, #1
 8010102:	9306      	str	r3, [sp, #24]
 8010104:	f04f 0801 	mov.w	r8, #1
 8010108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801010a:	2b00      	cmp	r3, #0
 801010c:	f47f af6f 	bne.w	800ffee <_dtoa_r+0x7de>
 8010110:	2001      	movs	r0, #1
 8010112:	e774      	b.n	800fffe <_dtoa_r+0x7ee>
 8010114:	f04f 0800 	mov.w	r8, #0
 8010118:	e7f6      	b.n	8010108 <_dtoa_r+0x8f8>
 801011a:	4698      	mov	r8, r3
 801011c:	e7f4      	b.n	8010108 <_dtoa_r+0x8f8>
 801011e:	d082      	beq.n	8010026 <_dtoa_r+0x816>
 8010120:	9a05      	ldr	r2, [sp, #20]
 8010122:	331c      	adds	r3, #28
 8010124:	441a      	add	r2, r3
 8010126:	9205      	str	r2, [sp, #20]
 8010128:	9a06      	ldr	r2, [sp, #24]
 801012a:	441a      	add	r2, r3
 801012c:	441d      	add	r5, r3
 801012e:	9206      	str	r2, [sp, #24]
 8010130:	e779      	b.n	8010026 <_dtoa_r+0x816>
 8010132:	4603      	mov	r3, r0
 8010134:	e7f4      	b.n	8010120 <_dtoa_r+0x910>
 8010136:	9b04      	ldr	r3, [sp, #16]
 8010138:	2b00      	cmp	r3, #0
 801013a:	dc37      	bgt.n	80101ac <_dtoa_r+0x99c>
 801013c:	9b07      	ldr	r3, [sp, #28]
 801013e:	2b02      	cmp	r3, #2
 8010140:	dd34      	ble.n	80101ac <_dtoa_r+0x99c>
 8010142:	9b04      	ldr	r3, [sp, #16]
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	9b01      	ldr	r3, [sp, #4]
 8010148:	b963      	cbnz	r3, 8010164 <_dtoa_r+0x954>
 801014a:	4631      	mov	r1, r6
 801014c:	2205      	movs	r2, #5
 801014e:	4620      	mov	r0, r4
 8010150:	f000 f9fe 	bl	8010550 <__multadd>
 8010154:	4601      	mov	r1, r0
 8010156:	4606      	mov	r6, r0
 8010158:	4650      	mov	r0, sl
 801015a:	f000 fc13 	bl	8010984 <__mcmp>
 801015e:	2800      	cmp	r0, #0
 8010160:	f73f adbb 	bgt.w	800fcda <_dtoa_r+0x4ca>
 8010164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010166:	9d00      	ldr	r5, [sp, #0]
 8010168:	ea6f 0b03 	mvn.w	fp, r3
 801016c:	f04f 0800 	mov.w	r8, #0
 8010170:	4631      	mov	r1, r6
 8010172:	4620      	mov	r0, r4
 8010174:	f000 f9ca 	bl	801050c <_Bfree>
 8010178:	2f00      	cmp	r7, #0
 801017a:	f43f aeab 	beq.w	800fed4 <_dtoa_r+0x6c4>
 801017e:	f1b8 0f00 	cmp.w	r8, #0
 8010182:	d005      	beq.n	8010190 <_dtoa_r+0x980>
 8010184:	45b8      	cmp	r8, r7
 8010186:	d003      	beq.n	8010190 <_dtoa_r+0x980>
 8010188:	4641      	mov	r1, r8
 801018a:	4620      	mov	r0, r4
 801018c:	f000 f9be 	bl	801050c <_Bfree>
 8010190:	4639      	mov	r1, r7
 8010192:	4620      	mov	r0, r4
 8010194:	f000 f9ba 	bl	801050c <_Bfree>
 8010198:	e69c      	b.n	800fed4 <_dtoa_r+0x6c4>
 801019a:	2600      	movs	r6, #0
 801019c:	4637      	mov	r7, r6
 801019e:	e7e1      	b.n	8010164 <_dtoa_r+0x954>
 80101a0:	46bb      	mov	fp, r7
 80101a2:	4637      	mov	r7, r6
 80101a4:	e599      	b.n	800fcda <_dtoa_r+0x4ca>
 80101a6:	bf00      	nop
 80101a8:	40240000 	.word	0x40240000
 80101ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	f000 80c8 	beq.w	8010344 <_dtoa_r+0xb34>
 80101b4:	9b04      	ldr	r3, [sp, #16]
 80101b6:	9301      	str	r3, [sp, #4]
 80101b8:	2d00      	cmp	r5, #0
 80101ba:	dd05      	ble.n	80101c8 <_dtoa_r+0x9b8>
 80101bc:	4639      	mov	r1, r7
 80101be:	462a      	mov	r2, r5
 80101c0:	4620      	mov	r0, r4
 80101c2:	f000 fb73 	bl	80108ac <__lshift>
 80101c6:	4607      	mov	r7, r0
 80101c8:	f1b8 0f00 	cmp.w	r8, #0
 80101cc:	d05b      	beq.n	8010286 <_dtoa_r+0xa76>
 80101ce:	6879      	ldr	r1, [r7, #4]
 80101d0:	4620      	mov	r0, r4
 80101d2:	f000 f95b 	bl	801048c <_Balloc>
 80101d6:	4605      	mov	r5, r0
 80101d8:	b928      	cbnz	r0, 80101e6 <_dtoa_r+0x9d6>
 80101da:	4b83      	ldr	r3, [pc, #524]	; (80103e8 <_dtoa_r+0xbd8>)
 80101dc:	4602      	mov	r2, r0
 80101de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80101e2:	f7ff bb2e 	b.w	800f842 <_dtoa_r+0x32>
 80101e6:	693a      	ldr	r2, [r7, #16]
 80101e8:	3202      	adds	r2, #2
 80101ea:	0092      	lsls	r2, r2, #2
 80101ec:	f107 010c 	add.w	r1, r7, #12
 80101f0:	300c      	adds	r0, #12
 80101f2:	f7ff fa77 	bl	800f6e4 <memcpy>
 80101f6:	2201      	movs	r2, #1
 80101f8:	4629      	mov	r1, r5
 80101fa:	4620      	mov	r0, r4
 80101fc:	f000 fb56 	bl	80108ac <__lshift>
 8010200:	9b00      	ldr	r3, [sp, #0]
 8010202:	3301      	adds	r3, #1
 8010204:	9304      	str	r3, [sp, #16]
 8010206:	e9dd 2300 	ldrd	r2, r3, [sp]
 801020a:	4413      	add	r3, r2
 801020c:	9308      	str	r3, [sp, #32]
 801020e:	9b02      	ldr	r3, [sp, #8]
 8010210:	f003 0301 	and.w	r3, r3, #1
 8010214:	46b8      	mov	r8, r7
 8010216:	9306      	str	r3, [sp, #24]
 8010218:	4607      	mov	r7, r0
 801021a:	9b04      	ldr	r3, [sp, #16]
 801021c:	4631      	mov	r1, r6
 801021e:	3b01      	subs	r3, #1
 8010220:	4650      	mov	r0, sl
 8010222:	9301      	str	r3, [sp, #4]
 8010224:	f7ff fa6c 	bl	800f700 <quorem>
 8010228:	4641      	mov	r1, r8
 801022a:	9002      	str	r0, [sp, #8]
 801022c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010230:	4650      	mov	r0, sl
 8010232:	f000 fba7 	bl	8010984 <__mcmp>
 8010236:	463a      	mov	r2, r7
 8010238:	9005      	str	r0, [sp, #20]
 801023a:	4631      	mov	r1, r6
 801023c:	4620      	mov	r0, r4
 801023e:	f000 fbbd 	bl	80109bc <__mdiff>
 8010242:	68c2      	ldr	r2, [r0, #12]
 8010244:	4605      	mov	r5, r0
 8010246:	bb02      	cbnz	r2, 801028a <_dtoa_r+0xa7a>
 8010248:	4601      	mov	r1, r0
 801024a:	4650      	mov	r0, sl
 801024c:	f000 fb9a 	bl	8010984 <__mcmp>
 8010250:	4602      	mov	r2, r0
 8010252:	4629      	mov	r1, r5
 8010254:	4620      	mov	r0, r4
 8010256:	9209      	str	r2, [sp, #36]	; 0x24
 8010258:	f000 f958 	bl	801050c <_Bfree>
 801025c:	9b07      	ldr	r3, [sp, #28]
 801025e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010260:	9d04      	ldr	r5, [sp, #16]
 8010262:	ea43 0102 	orr.w	r1, r3, r2
 8010266:	9b06      	ldr	r3, [sp, #24]
 8010268:	4319      	orrs	r1, r3
 801026a:	d110      	bne.n	801028e <_dtoa_r+0xa7e>
 801026c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010270:	d029      	beq.n	80102c6 <_dtoa_r+0xab6>
 8010272:	9b05      	ldr	r3, [sp, #20]
 8010274:	2b00      	cmp	r3, #0
 8010276:	dd02      	ble.n	801027e <_dtoa_r+0xa6e>
 8010278:	9b02      	ldr	r3, [sp, #8]
 801027a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801027e:	9b01      	ldr	r3, [sp, #4]
 8010280:	f883 9000 	strb.w	r9, [r3]
 8010284:	e774      	b.n	8010170 <_dtoa_r+0x960>
 8010286:	4638      	mov	r0, r7
 8010288:	e7ba      	b.n	8010200 <_dtoa_r+0x9f0>
 801028a:	2201      	movs	r2, #1
 801028c:	e7e1      	b.n	8010252 <_dtoa_r+0xa42>
 801028e:	9b05      	ldr	r3, [sp, #20]
 8010290:	2b00      	cmp	r3, #0
 8010292:	db04      	blt.n	801029e <_dtoa_r+0xa8e>
 8010294:	9907      	ldr	r1, [sp, #28]
 8010296:	430b      	orrs	r3, r1
 8010298:	9906      	ldr	r1, [sp, #24]
 801029a:	430b      	orrs	r3, r1
 801029c:	d120      	bne.n	80102e0 <_dtoa_r+0xad0>
 801029e:	2a00      	cmp	r2, #0
 80102a0:	dded      	ble.n	801027e <_dtoa_r+0xa6e>
 80102a2:	4651      	mov	r1, sl
 80102a4:	2201      	movs	r2, #1
 80102a6:	4620      	mov	r0, r4
 80102a8:	f000 fb00 	bl	80108ac <__lshift>
 80102ac:	4631      	mov	r1, r6
 80102ae:	4682      	mov	sl, r0
 80102b0:	f000 fb68 	bl	8010984 <__mcmp>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	dc03      	bgt.n	80102c0 <_dtoa_r+0xab0>
 80102b8:	d1e1      	bne.n	801027e <_dtoa_r+0xa6e>
 80102ba:	f019 0f01 	tst.w	r9, #1
 80102be:	d0de      	beq.n	801027e <_dtoa_r+0xa6e>
 80102c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80102c4:	d1d8      	bne.n	8010278 <_dtoa_r+0xa68>
 80102c6:	9a01      	ldr	r2, [sp, #4]
 80102c8:	2339      	movs	r3, #57	; 0x39
 80102ca:	7013      	strb	r3, [r2, #0]
 80102cc:	462b      	mov	r3, r5
 80102ce:	461d      	mov	r5, r3
 80102d0:	3b01      	subs	r3, #1
 80102d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80102d6:	2a39      	cmp	r2, #57	; 0x39
 80102d8:	d06c      	beq.n	80103b4 <_dtoa_r+0xba4>
 80102da:	3201      	adds	r2, #1
 80102dc:	701a      	strb	r2, [r3, #0]
 80102de:	e747      	b.n	8010170 <_dtoa_r+0x960>
 80102e0:	2a00      	cmp	r2, #0
 80102e2:	dd07      	ble.n	80102f4 <_dtoa_r+0xae4>
 80102e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80102e8:	d0ed      	beq.n	80102c6 <_dtoa_r+0xab6>
 80102ea:	9a01      	ldr	r2, [sp, #4]
 80102ec:	f109 0301 	add.w	r3, r9, #1
 80102f0:	7013      	strb	r3, [r2, #0]
 80102f2:	e73d      	b.n	8010170 <_dtoa_r+0x960>
 80102f4:	9b04      	ldr	r3, [sp, #16]
 80102f6:	9a08      	ldr	r2, [sp, #32]
 80102f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d043      	beq.n	8010388 <_dtoa_r+0xb78>
 8010300:	4651      	mov	r1, sl
 8010302:	2300      	movs	r3, #0
 8010304:	220a      	movs	r2, #10
 8010306:	4620      	mov	r0, r4
 8010308:	f000 f922 	bl	8010550 <__multadd>
 801030c:	45b8      	cmp	r8, r7
 801030e:	4682      	mov	sl, r0
 8010310:	f04f 0300 	mov.w	r3, #0
 8010314:	f04f 020a 	mov.w	r2, #10
 8010318:	4641      	mov	r1, r8
 801031a:	4620      	mov	r0, r4
 801031c:	d107      	bne.n	801032e <_dtoa_r+0xb1e>
 801031e:	f000 f917 	bl	8010550 <__multadd>
 8010322:	4680      	mov	r8, r0
 8010324:	4607      	mov	r7, r0
 8010326:	9b04      	ldr	r3, [sp, #16]
 8010328:	3301      	adds	r3, #1
 801032a:	9304      	str	r3, [sp, #16]
 801032c:	e775      	b.n	801021a <_dtoa_r+0xa0a>
 801032e:	f000 f90f 	bl	8010550 <__multadd>
 8010332:	4639      	mov	r1, r7
 8010334:	4680      	mov	r8, r0
 8010336:	2300      	movs	r3, #0
 8010338:	220a      	movs	r2, #10
 801033a:	4620      	mov	r0, r4
 801033c:	f000 f908 	bl	8010550 <__multadd>
 8010340:	4607      	mov	r7, r0
 8010342:	e7f0      	b.n	8010326 <_dtoa_r+0xb16>
 8010344:	9b04      	ldr	r3, [sp, #16]
 8010346:	9301      	str	r3, [sp, #4]
 8010348:	9d00      	ldr	r5, [sp, #0]
 801034a:	4631      	mov	r1, r6
 801034c:	4650      	mov	r0, sl
 801034e:	f7ff f9d7 	bl	800f700 <quorem>
 8010352:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010356:	9b00      	ldr	r3, [sp, #0]
 8010358:	f805 9b01 	strb.w	r9, [r5], #1
 801035c:	1aea      	subs	r2, r5, r3
 801035e:	9b01      	ldr	r3, [sp, #4]
 8010360:	4293      	cmp	r3, r2
 8010362:	dd07      	ble.n	8010374 <_dtoa_r+0xb64>
 8010364:	4651      	mov	r1, sl
 8010366:	2300      	movs	r3, #0
 8010368:	220a      	movs	r2, #10
 801036a:	4620      	mov	r0, r4
 801036c:	f000 f8f0 	bl	8010550 <__multadd>
 8010370:	4682      	mov	sl, r0
 8010372:	e7ea      	b.n	801034a <_dtoa_r+0xb3a>
 8010374:	9b01      	ldr	r3, [sp, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	bfc8      	it	gt
 801037a:	461d      	movgt	r5, r3
 801037c:	9b00      	ldr	r3, [sp, #0]
 801037e:	bfd8      	it	le
 8010380:	2501      	movle	r5, #1
 8010382:	441d      	add	r5, r3
 8010384:	f04f 0800 	mov.w	r8, #0
 8010388:	4651      	mov	r1, sl
 801038a:	2201      	movs	r2, #1
 801038c:	4620      	mov	r0, r4
 801038e:	f000 fa8d 	bl	80108ac <__lshift>
 8010392:	4631      	mov	r1, r6
 8010394:	4682      	mov	sl, r0
 8010396:	f000 faf5 	bl	8010984 <__mcmp>
 801039a:	2800      	cmp	r0, #0
 801039c:	dc96      	bgt.n	80102cc <_dtoa_r+0xabc>
 801039e:	d102      	bne.n	80103a6 <_dtoa_r+0xb96>
 80103a0:	f019 0f01 	tst.w	r9, #1
 80103a4:	d192      	bne.n	80102cc <_dtoa_r+0xabc>
 80103a6:	462b      	mov	r3, r5
 80103a8:	461d      	mov	r5, r3
 80103aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103ae:	2a30      	cmp	r2, #48	; 0x30
 80103b0:	d0fa      	beq.n	80103a8 <_dtoa_r+0xb98>
 80103b2:	e6dd      	b.n	8010170 <_dtoa_r+0x960>
 80103b4:	9a00      	ldr	r2, [sp, #0]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d189      	bne.n	80102ce <_dtoa_r+0xabe>
 80103ba:	f10b 0b01 	add.w	fp, fp, #1
 80103be:	2331      	movs	r3, #49	; 0x31
 80103c0:	e796      	b.n	80102f0 <_dtoa_r+0xae0>
 80103c2:	4b0a      	ldr	r3, [pc, #40]	; (80103ec <_dtoa_r+0xbdc>)
 80103c4:	f7ff ba99 	b.w	800f8fa <_dtoa_r+0xea>
 80103c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f47f aa6d 	bne.w	800f8aa <_dtoa_r+0x9a>
 80103d0:	4b07      	ldr	r3, [pc, #28]	; (80103f0 <_dtoa_r+0xbe0>)
 80103d2:	f7ff ba92 	b.w	800f8fa <_dtoa_r+0xea>
 80103d6:	9b01      	ldr	r3, [sp, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	dcb5      	bgt.n	8010348 <_dtoa_r+0xb38>
 80103dc:	9b07      	ldr	r3, [sp, #28]
 80103de:	2b02      	cmp	r3, #2
 80103e0:	f73f aeb1 	bgt.w	8010146 <_dtoa_r+0x936>
 80103e4:	e7b0      	b.n	8010348 <_dtoa_r+0xb38>
 80103e6:	bf00      	nop
 80103e8:	08011944 	.word	0x08011944
 80103ec:	080118a4 	.word	0x080118a4
 80103f0:	080118c8 	.word	0x080118c8

080103f4 <_free_r>:
 80103f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103f6:	2900      	cmp	r1, #0
 80103f8:	d044      	beq.n	8010484 <_free_r+0x90>
 80103fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103fe:	9001      	str	r0, [sp, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	f1a1 0404 	sub.w	r4, r1, #4
 8010406:	bfb8      	it	lt
 8010408:	18e4      	addlt	r4, r4, r3
 801040a:	f7fe fb49 	bl	800eaa0 <__malloc_lock>
 801040e:	4a1e      	ldr	r2, [pc, #120]	; (8010488 <_free_r+0x94>)
 8010410:	9801      	ldr	r0, [sp, #4]
 8010412:	6813      	ldr	r3, [r2, #0]
 8010414:	b933      	cbnz	r3, 8010424 <_free_r+0x30>
 8010416:	6063      	str	r3, [r4, #4]
 8010418:	6014      	str	r4, [r2, #0]
 801041a:	b003      	add	sp, #12
 801041c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010420:	f7fe bb44 	b.w	800eaac <__malloc_unlock>
 8010424:	42a3      	cmp	r3, r4
 8010426:	d908      	bls.n	801043a <_free_r+0x46>
 8010428:	6825      	ldr	r5, [r4, #0]
 801042a:	1961      	adds	r1, r4, r5
 801042c:	428b      	cmp	r3, r1
 801042e:	bf01      	itttt	eq
 8010430:	6819      	ldreq	r1, [r3, #0]
 8010432:	685b      	ldreq	r3, [r3, #4]
 8010434:	1949      	addeq	r1, r1, r5
 8010436:	6021      	streq	r1, [r4, #0]
 8010438:	e7ed      	b.n	8010416 <_free_r+0x22>
 801043a:	461a      	mov	r2, r3
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	b10b      	cbz	r3, 8010444 <_free_r+0x50>
 8010440:	42a3      	cmp	r3, r4
 8010442:	d9fa      	bls.n	801043a <_free_r+0x46>
 8010444:	6811      	ldr	r1, [r2, #0]
 8010446:	1855      	adds	r5, r2, r1
 8010448:	42a5      	cmp	r5, r4
 801044a:	d10b      	bne.n	8010464 <_free_r+0x70>
 801044c:	6824      	ldr	r4, [r4, #0]
 801044e:	4421      	add	r1, r4
 8010450:	1854      	adds	r4, r2, r1
 8010452:	42a3      	cmp	r3, r4
 8010454:	6011      	str	r1, [r2, #0]
 8010456:	d1e0      	bne.n	801041a <_free_r+0x26>
 8010458:	681c      	ldr	r4, [r3, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	6053      	str	r3, [r2, #4]
 801045e:	440c      	add	r4, r1
 8010460:	6014      	str	r4, [r2, #0]
 8010462:	e7da      	b.n	801041a <_free_r+0x26>
 8010464:	d902      	bls.n	801046c <_free_r+0x78>
 8010466:	230c      	movs	r3, #12
 8010468:	6003      	str	r3, [r0, #0]
 801046a:	e7d6      	b.n	801041a <_free_r+0x26>
 801046c:	6825      	ldr	r5, [r4, #0]
 801046e:	1961      	adds	r1, r4, r5
 8010470:	428b      	cmp	r3, r1
 8010472:	bf04      	itt	eq
 8010474:	6819      	ldreq	r1, [r3, #0]
 8010476:	685b      	ldreq	r3, [r3, #4]
 8010478:	6063      	str	r3, [r4, #4]
 801047a:	bf04      	itt	eq
 801047c:	1949      	addeq	r1, r1, r5
 801047e:	6021      	streq	r1, [r4, #0]
 8010480:	6054      	str	r4, [r2, #4]
 8010482:	e7ca      	b.n	801041a <_free_r+0x26>
 8010484:	b003      	add	sp, #12
 8010486:	bd30      	pop	{r4, r5, pc}
 8010488:	20002204 	.word	0x20002204

0801048c <_Balloc>:
 801048c:	b570      	push	{r4, r5, r6, lr}
 801048e:	69c6      	ldr	r6, [r0, #28]
 8010490:	4604      	mov	r4, r0
 8010492:	460d      	mov	r5, r1
 8010494:	b976      	cbnz	r6, 80104b4 <_Balloc+0x28>
 8010496:	2010      	movs	r0, #16
 8010498:	f7fe fa52 	bl	800e940 <malloc>
 801049c:	4602      	mov	r2, r0
 801049e:	61e0      	str	r0, [r4, #28]
 80104a0:	b920      	cbnz	r0, 80104ac <_Balloc+0x20>
 80104a2:	4b18      	ldr	r3, [pc, #96]	; (8010504 <_Balloc+0x78>)
 80104a4:	4818      	ldr	r0, [pc, #96]	; (8010508 <_Balloc+0x7c>)
 80104a6:	216b      	movs	r1, #107	; 0x6b
 80104a8:	f000 fd8c 	bl	8010fc4 <__assert_func>
 80104ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104b0:	6006      	str	r6, [r0, #0]
 80104b2:	60c6      	str	r6, [r0, #12]
 80104b4:	69e6      	ldr	r6, [r4, #28]
 80104b6:	68f3      	ldr	r3, [r6, #12]
 80104b8:	b183      	cbz	r3, 80104dc <_Balloc+0x50>
 80104ba:	69e3      	ldr	r3, [r4, #28]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104c2:	b9b8      	cbnz	r0, 80104f4 <_Balloc+0x68>
 80104c4:	2101      	movs	r1, #1
 80104c6:	fa01 f605 	lsl.w	r6, r1, r5
 80104ca:	1d72      	adds	r2, r6, #5
 80104cc:	0092      	lsls	r2, r2, #2
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 fd96 	bl	8011000 <_calloc_r>
 80104d4:	b160      	cbz	r0, 80104f0 <_Balloc+0x64>
 80104d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104da:	e00e      	b.n	80104fa <_Balloc+0x6e>
 80104dc:	2221      	movs	r2, #33	; 0x21
 80104de:	2104      	movs	r1, #4
 80104e0:	4620      	mov	r0, r4
 80104e2:	f000 fd8d 	bl	8011000 <_calloc_r>
 80104e6:	69e3      	ldr	r3, [r4, #28]
 80104e8:	60f0      	str	r0, [r6, #12]
 80104ea:	68db      	ldr	r3, [r3, #12]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d1e4      	bne.n	80104ba <_Balloc+0x2e>
 80104f0:	2000      	movs	r0, #0
 80104f2:	bd70      	pop	{r4, r5, r6, pc}
 80104f4:	6802      	ldr	r2, [r0, #0]
 80104f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80104fa:	2300      	movs	r3, #0
 80104fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010500:	e7f7      	b.n	80104f2 <_Balloc+0x66>
 8010502:	bf00      	nop
 8010504:	080118d5 	.word	0x080118d5
 8010508:	08011955 	.word	0x08011955

0801050c <_Bfree>:
 801050c:	b570      	push	{r4, r5, r6, lr}
 801050e:	69c6      	ldr	r6, [r0, #28]
 8010510:	4605      	mov	r5, r0
 8010512:	460c      	mov	r4, r1
 8010514:	b976      	cbnz	r6, 8010534 <_Bfree+0x28>
 8010516:	2010      	movs	r0, #16
 8010518:	f7fe fa12 	bl	800e940 <malloc>
 801051c:	4602      	mov	r2, r0
 801051e:	61e8      	str	r0, [r5, #28]
 8010520:	b920      	cbnz	r0, 801052c <_Bfree+0x20>
 8010522:	4b09      	ldr	r3, [pc, #36]	; (8010548 <_Bfree+0x3c>)
 8010524:	4809      	ldr	r0, [pc, #36]	; (801054c <_Bfree+0x40>)
 8010526:	218f      	movs	r1, #143	; 0x8f
 8010528:	f000 fd4c 	bl	8010fc4 <__assert_func>
 801052c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010530:	6006      	str	r6, [r0, #0]
 8010532:	60c6      	str	r6, [r0, #12]
 8010534:	b13c      	cbz	r4, 8010546 <_Bfree+0x3a>
 8010536:	69eb      	ldr	r3, [r5, #28]
 8010538:	6862      	ldr	r2, [r4, #4]
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010540:	6021      	str	r1, [r4, #0]
 8010542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010546:	bd70      	pop	{r4, r5, r6, pc}
 8010548:	080118d5 	.word	0x080118d5
 801054c:	08011955 	.word	0x08011955

08010550 <__multadd>:
 8010550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010554:	690d      	ldr	r5, [r1, #16]
 8010556:	4607      	mov	r7, r0
 8010558:	460c      	mov	r4, r1
 801055a:	461e      	mov	r6, r3
 801055c:	f101 0c14 	add.w	ip, r1, #20
 8010560:	2000      	movs	r0, #0
 8010562:	f8dc 3000 	ldr.w	r3, [ip]
 8010566:	b299      	uxth	r1, r3
 8010568:	fb02 6101 	mla	r1, r2, r1, r6
 801056c:	0c1e      	lsrs	r6, r3, #16
 801056e:	0c0b      	lsrs	r3, r1, #16
 8010570:	fb02 3306 	mla	r3, r2, r6, r3
 8010574:	b289      	uxth	r1, r1
 8010576:	3001      	adds	r0, #1
 8010578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801057c:	4285      	cmp	r5, r0
 801057e:	f84c 1b04 	str.w	r1, [ip], #4
 8010582:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010586:	dcec      	bgt.n	8010562 <__multadd+0x12>
 8010588:	b30e      	cbz	r6, 80105ce <__multadd+0x7e>
 801058a:	68a3      	ldr	r3, [r4, #8]
 801058c:	42ab      	cmp	r3, r5
 801058e:	dc19      	bgt.n	80105c4 <__multadd+0x74>
 8010590:	6861      	ldr	r1, [r4, #4]
 8010592:	4638      	mov	r0, r7
 8010594:	3101      	adds	r1, #1
 8010596:	f7ff ff79 	bl	801048c <_Balloc>
 801059a:	4680      	mov	r8, r0
 801059c:	b928      	cbnz	r0, 80105aa <__multadd+0x5a>
 801059e:	4602      	mov	r2, r0
 80105a0:	4b0c      	ldr	r3, [pc, #48]	; (80105d4 <__multadd+0x84>)
 80105a2:	480d      	ldr	r0, [pc, #52]	; (80105d8 <__multadd+0x88>)
 80105a4:	21ba      	movs	r1, #186	; 0xba
 80105a6:	f000 fd0d 	bl	8010fc4 <__assert_func>
 80105aa:	6922      	ldr	r2, [r4, #16]
 80105ac:	3202      	adds	r2, #2
 80105ae:	f104 010c 	add.w	r1, r4, #12
 80105b2:	0092      	lsls	r2, r2, #2
 80105b4:	300c      	adds	r0, #12
 80105b6:	f7ff f895 	bl	800f6e4 <memcpy>
 80105ba:	4621      	mov	r1, r4
 80105bc:	4638      	mov	r0, r7
 80105be:	f7ff ffa5 	bl	801050c <_Bfree>
 80105c2:	4644      	mov	r4, r8
 80105c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105c8:	3501      	adds	r5, #1
 80105ca:	615e      	str	r6, [r3, #20]
 80105cc:	6125      	str	r5, [r4, #16]
 80105ce:	4620      	mov	r0, r4
 80105d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d4:	08011944 	.word	0x08011944
 80105d8:	08011955 	.word	0x08011955

080105dc <__hi0bits>:
 80105dc:	0c03      	lsrs	r3, r0, #16
 80105de:	041b      	lsls	r3, r3, #16
 80105e0:	b9d3      	cbnz	r3, 8010618 <__hi0bits+0x3c>
 80105e2:	0400      	lsls	r0, r0, #16
 80105e4:	2310      	movs	r3, #16
 80105e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105ea:	bf04      	itt	eq
 80105ec:	0200      	lsleq	r0, r0, #8
 80105ee:	3308      	addeq	r3, #8
 80105f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80105f4:	bf04      	itt	eq
 80105f6:	0100      	lsleq	r0, r0, #4
 80105f8:	3304      	addeq	r3, #4
 80105fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80105fe:	bf04      	itt	eq
 8010600:	0080      	lsleq	r0, r0, #2
 8010602:	3302      	addeq	r3, #2
 8010604:	2800      	cmp	r0, #0
 8010606:	db05      	blt.n	8010614 <__hi0bits+0x38>
 8010608:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801060c:	f103 0301 	add.w	r3, r3, #1
 8010610:	bf08      	it	eq
 8010612:	2320      	moveq	r3, #32
 8010614:	4618      	mov	r0, r3
 8010616:	4770      	bx	lr
 8010618:	2300      	movs	r3, #0
 801061a:	e7e4      	b.n	80105e6 <__hi0bits+0xa>

0801061c <__lo0bits>:
 801061c:	6803      	ldr	r3, [r0, #0]
 801061e:	f013 0207 	ands.w	r2, r3, #7
 8010622:	d00c      	beq.n	801063e <__lo0bits+0x22>
 8010624:	07d9      	lsls	r1, r3, #31
 8010626:	d422      	bmi.n	801066e <__lo0bits+0x52>
 8010628:	079a      	lsls	r2, r3, #30
 801062a:	bf49      	itett	mi
 801062c:	085b      	lsrmi	r3, r3, #1
 801062e:	089b      	lsrpl	r3, r3, #2
 8010630:	6003      	strmi	r3, [r0, #0]
 8010632:	2201      	movmi	r2, #1
 8010634:	bf5c      	itt	pl
 8010636:	6003      	strpl	r3, [r0, #0]
 8010638:	2202      	movpl	r2, #2
 801063a:	4610      	mov	r0, r2
 801063c:	4770      	bx	lr
 801063e:	b299      	uxth	r1, r3
 8010640:	b909      	cbnz	r1, 8010646 <__lo0bits+0x2a>
 8010642:	0c1b      	lsrs	r3, r3, #16
 8010644:	2210      	movs	r2, #16
 8010646:	b2d9      	uxtb	r1, r3
 8010648:	b909      	cbnz	r1, 801064e <__lo0bits+0x32>
 801064a:	3208      	adds	r2, #8
 801064c:	0a1b      	lsrs	r3, r3, #8
 801064e:	0719      	lsls	r1, r3, #28
 8010650:	bf04      	itt	eq
 8010652:	091b      	lsreq	r3, r3, #4
 8010654:	3204      	addeq	r2, #4
 8010656:	0799      	lsls	r1, r3, #30
 8010658:	bf04      	itt	eq
 801065a:	089b      	lsreq	r3, r3, #2
 801065c:	3202      	addeq	r2, #2
 801065e:	07d9      	lsls	r1, r3, #31
 8010660:	d403      	bmi.n	801066a <__lo0bits+0x4e>
 8010662:	085b      	lsrs	r3, r3, #1
 8010664:	f102 0201 	add.w	r2, r2, #1
 8010668:	d003      	beq.n	8010672 <__lo0bits+0x56>
 801066a:	6003      	str	r3, [r0, #0]
 801066c:	e7e5      	b.n	801063a <__lo0bits+0x1e>
 801066e:	2200      	movs	r2, #0
 8010670:	e7e3      	b.n	801063a <__lo0bits+0x1e>
 8010672:	2220      	movs	r2, #32
 8010674:	e7e1      	b.n	801063a <__lo0bits+0x1e>
	...

08010678 <__i2b>:
 8010678:	b510      	push	{r4, lr}
 801067a:	460c      	mov	r4, r1
 801067c:	2101      	movs	r1, #1
 801067e:	f7ff ff05 	bl	801048c <_Balloc>
 8010682:	4602      	mov	r2, r0
 8010684:	b928      	cbnz	r0, 8010692 <__i2b+0x1a>
 8010686:	4b05      	ldr	r3, [pc, #20]	; (801069c <__i2b+0x24>)
 8010688:	4805      	ldr	r0, [pc, #20]	; (80106a0 <__i2b+0x28>)
 801068a:	f240 1145 	movw	r1, #325	; 0x145
 801068e:	f000 fc99 	bl	8010fc4 <__assert_func>
 8010692:	2301      	movs	r3, #1
 8010694:	6144      	str	r4, [r0, #20]
 8010696:	6103      	str	r3, [r0, #16]
 8010698:	bd10      	pop	{r4, pc}
 801069a:	bf00      	nop
 801069c:	08011944 	.word	0x08011944
 80106a0:	08011955 	.word	0x08011955

080106a4 <__multiply>:
 80106a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a8:	4691      	mov	r9, r2
 80106aa:	690a      	ldr	r2, [r1, #16]
 80106ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	bfb8      	it	lt
 80106b4:	460b      	movlt	r3, r1
 80106b6:	460c      	mov	r4, r1
 80106b8:	bfbc      	itt	lt
 80106ba:	464c      	movlt	r4, r9
 80106bc:	4699      	movlt	r9, r3
 80106be:	6927      	ldr	r7, [r4, #16]
 80106c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80106c4:	68a3      	ldr	r3, [r4, #8]
 80106c6:	6861      	ldr	r1, [r4, #4]
 80106c8:	eb07 060a 	add.w	r6, r7, sl
 80106cc:	42b3      	cmp	r3, r6
 80106ce:	b085      	sub	sp, #20
 80106d0:	bfb8      	it	lt
 80106d2:	3101      	addlt	r1, #1
 80106d4:	f7ff feda 	bl	801048c <_Balloc>
 80106d8:	b930      	cbnz	r0, 80106e8 <__multiply+0x44>
 80106da:	4602      	mov	r2, r0
 80106dc:	4b44      	ldr	r3, [pc, #272]	; (80107f0 <__multiply+0x14c>)
 80106de:	4845      	ldr	r0, [pc, #276]	; (80107f4 <__multiply+0x150>)
 80106e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80106e4:	f000 fc6e 	bl	8010fc4 <__assert_func>
 80106e8:	f100 0514 	add.w	r5, r0, #20
 80106ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80106f0:	462b      	mov	r3, r5
 80106f2:	2200      	movs	r2, #0
 80106f4:	4543      	cmp	r3, r8
 80106f6:	d321      	bcc.n	801073c <__multiply+0x98>
 80106f8:	f104 0314 	add.w	r3, r4, #20
 80106fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010700:	f109 0314 	add.w	r3, r9, #20
 8010704:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010708:	9202      	str	r2, [sp, #8]
 801070a:	1b3a      	subs	r2, r7, r4
 801070c:	3a15      	subs	r2, #21
 801070e:	f022 0203 	bic.w	r2, r2, #3
 8010712:	3204      	adds	r2, #4
 8010714:	f104 0115 	add.w	r1, r4, #21
 8010718:	428f      	cmp	r7, r1
 801071a:	bf38      	it	cc
 801071c:	2204      	movcc	r2, #4
 801071e:	9201      	str	r2, [sp, #4]
 8010720:	9a02      	ldr	r2, [sp, #8]
 8010722:	9303      	str	r3, [sp, #12]
 8010724:	429a      	cmp	r2, r3
 8010726:	d80c      	bhi.n	8010742 <__multiply+0x9e>
 8010728:	2e00      	cmp	r6, #0
 801072a:	dd03      	ble.n	8010734 <__multiply+0x90>
 801072c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010730:	2b00      	cmp	r3, #0
 8010732:	d05b      	beq.n	80107ec <__multiply+0x148>
 8010734:	6106      	str	r6, [r0, #16]
 8010736:	b005      	add	sp, #20
 8010738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073c:	f843 2b04 	str.w	r2, [r3], #4
 8010740:	e7d8      	b.n	80106f4 <__multiply+0x50>
 8010742:	f8b3 a000 	ldrh.w	sl, [r3]
 8010746:	f1ba 0f00 	cmp.w	sl, #0
 801074a:	d024      	beq.n	8010796 <__multiply+0xf2>
 801074c:	f104 0e14 	add.w	lr, r4, #20
 8010750:	46a9      	mov	r9, r5
 8010752:	f04f 0c00 	mov.w	ip, #0
 8010756:	f85e 2b04 	ldr.w	r2, [lr], #4
 801075a:	f8d9 1000 	ldr.w	r1, [r9]
 801075e:	fa1f fb82 	uxth.w	fp, r2
 8010762:	b289      	uxth	r1, r1
 8010764:	fb0a 110b 	mla	r1, sl, fp, r1
 8010768:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801076c:	f8d9 2000 	ldr.w	r2, [r9]
 8010770:	4461      	add	r1, ip
 8010772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010776:	fb0a c20b 	mla	r2, sl, fp, ip
 801077a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801077e:	b289      	uxth	r1, r1
 8010780:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010784:	4577      	cmp	r7, lr
 8010786:	f849 1b04 	str.w	r1, [r9], #4
 801078a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801078e:	d8e2      	bhi.n	8010756 <__multiply+0xb2>
 8010790:	9a01      	ldr	r2, [sp, #4]
 8010792:	f845 c002 	str.w	ip, [r5, r2]
 8010796:	9a03      	ldr	r2, [sp, #12]
 8010798:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801079c:	3304      	adds	r3, #4
 801079e:	f1b9 0f00 	cmp.w	r9, #0
 80107a2:	d021      	beq.n	80107e8 <__multiply+0x144>
 80107a4:	6829      	ldr	r1, [r5, #0]
 80107a6:	f104 0c14 	add.w	ip, r4, #20
 80107aa:	46ae      	mov	lr, r5
 80107ac:	f04f 0a00 	mov.w	sl, #0
 80107b0:	f8bc b000 	ldrh.w	fp, [ip]
 80107b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80107b8:	fb09 220b 	mla	r2, r9, fp, r2
 80107bc:	4452      	add	r2, sl
 80107be:	b289      	uxth	r1, r1
 80107c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80107c4:	f84e 1b04 	str.w	r1, [lr], #4
 80107c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80107cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80107d0:	f8be 1000 	ldrh.w	r1, [lr]
 80107d4:	fb09 110a 	mla	r1, r9, sl, r1
 80107d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80107dc:	4567      	cmp	r7, ip
 80107de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80107e2:	d8e5      	bhi.n	80107b0 <__multiply+0x10c>
 80107e4:	9a01      	ldr	r2, [sp, #4]
 80107e6:	50a9      	str	r1, [r5, r2]
 80107e8:	3504      	adds	r5, #4
 80107ea:	e799      	b.n	8010720 <__multiply+0x7c>
 80107ec:	3e01      	subs	r6, #1
 80107ee:	e79b      	b.n	8010728 <__multiply+0x84>
 80107f0:	08011944 	.word	0x08011944
 80107f4:	08011955 	.word	0x08011955

080107f8 <__pow5mult>:
 80107f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107fc:	4615      	mov	r5, r2
 80107fe:	f012 0203 	ands.w	r2, r2, #3
 8010802:	4606      	mov	r6, r0
 8010804:	460f      	mov	r7, r1
 8010806:	d007      	beq.n	8010818 <__pow5mult+0x20>
 8010808:	4c25      	ldr	r4, [pc, #148]	; (80108a0 <__pow5mult+0xa8>)
 801080a:	3a01      	subs	r2, #1
 801080c:	2300      	movs	r3, #0
 801080e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010812:	f7ff fe9d 	bl	8010550 <__multadd>
 8010816:	4607      	mov	r7, r0
 8010818:	10ad      	asrs	r5, r5, #2
 801081a:	d03d      	beq.n	8010898 <__pow5mult+0xa0>
 801081c:	69f4      	ldr	r4, [r6, #28]
 801081e:	b97c      	cbnz	r4, 8010840 <__pow5mult+0x48>
 8010820:	2010      	movs	r0, #16
 8010822:	f7fe f88d 	bl	800e940 <malloc>
 8010826:	4602      	mov	r2, r0
 8010828:	61f0      	str	r0, [r6, #28]
 801082a:	b928      	cbnz	r0, 8010838 <__pow5mult+0x40>
 801082c:	4b1d      	ldr	r3, [pc, #116]	; (80108a4 <__pow5mult+0xac>)
 801082e:	481e      	ldr	r0, [pc, #120]	; (80108a8 <__pow5mult+0xb0>)
 8010830:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010834:	f000 fbc6 	bl	8010fc4 <__assert_func>
 8010838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801083c:	6004      	str	r4, [r0, #0]
 801083e:	60c4      	str	r4, [r0, #12]
 8010840:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010848:	b94c      	cbnz	r4, 801085e <__pow5mult+0x66>
 801084a:	f240 2171 	movw	r1, #625	; 0x271
 801084e:	4630      	mov	r0, r6
 8010850:	f7ff ff12 	bl	8010678 <__i2b>
 8010854:	2300      	movs	r3, #0
 8010856:	f8c8 0008 	str.w	r0, [r8, #8]
 801085a:	4604      	mov	r4, r0
 801085c:	6003      	str	r3, [r0, #0]
 801085e:	f04f 0900 	mov.w	r9, #0
 8010862:	07eb      	lsls	r3, r5, #31
 8010864:	d50a      	bpl.n	801087c <__pow5mult+0x84>
 8010866:	4639      	mov	r1, r7
 8010868:	4622      	mov	r2, r4
 801086a:	4630      	mov	r0, r6
 801086c:	f7ff ff1a 	bl	80106a4 <__multiply>
 8010870:	4639      	mov	r1, r7
 8010872:	4680      	mov	r8, r0
 8010874:	4630      	mov	r0, r6
 8010876:	f7ff fe49 	bl	801050c <_Bfree>
 801087a:	4647      	mov	r7, r8
 801087c:	106d      	asrs	r5, r5, #1
 801087e:	d00b      	beq.n	8010898 <__pow5mult+0xa0>
 8010880:	6820      	ldr	r0, [r4, #0]
 8010882:	b938      	cbnz	r0, 8010894 <__pow5mult+0x9c>
 8010884:	4622      	mov	r2, r4
 8010886:	4621      	mov	r1, r4
 8010888:	4630      	mov	r0, r6
 801088a:	f7ff ff0b 	bl	80106a4 <__multiply>
 801088e:	6020      	str	r0, [r4, #0]
 8010890:	f8c0 9000 	str.w	r9, [r0]
 8010894:	4604      	mov	r4, r0
 8010896:	e7e4      	b.n	8010862 <__pow5mult+0x6a>
 8010898:	4638      	mov	r0, r7
 801089a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801089e:	bf00      	nop
 80108a0:	08011aa0 	.word	0x08011aa0
 80108a4:	080118d5 	.word	0x080118d5
 80108a8:	08011955 	.word	0x08011955

080108ac <__lshift>:
 80108ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b0:	460c      	mov	r4, r1
 80108b2:	6849      	ldr	r1, [r1, #4]
 80108b4:	6923      	ldr	r3, [r4, #16]
 80108b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108ba:	68a3      	ldr	r3, [r4, #8]
 80108bc:	4607      	mov	r7, r0
 80108be:	4691      	mov	r9, r2
 80108c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108c4:	f108 0601 	add.w	r6, r8, #1
 80108c8:	42b3      	cmp	r3, r6
 80108ca:	db0b      	blt.n	80108e4 <__lshift+0x38>
 80108cc:	4638      	mov	r0, r7
 80108ce:	f7ff fddd 	bl	801048c <_Balloc>
 80108d2:	4605      	mov	r5, r0
 80108d4:	b948      	cbnz	r0, 80108ea <__lshift+0x3e>
 80108d6:	4602      	mov	r2, r0
 80108d8:	4b28      	ldr	r3, [pc, #160]	; (801097c <__lshift+0xd0>)
 80108da:	4829      	ldr	r0, [pc, #164]	; (8010980 <__lshift+0xd4>)
 80108dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80108e0:	f000 fb70 	bl	8010fc4 <__assert_func>
 80108e4:	3101      	adds	r1, #1
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	e7ee      	b.n	80108c8 <__lshift+0x1c>
 80108ea:	2300      	movs	r3, #0
 80108ec:	f100 0114 	add.w	r1, r0, #20
 80108f0:	f100 0210 	add.w	r2, r0, #16
 80108f4:	4618      	mov	r0, r3
 80108f6:	4553      	cmp	r3, sl
 80108f8:	db33      	blt.n	8010962 <__lshift+0xb6>
 80108fa:	6920      	ldr	r0, [r4, #16]
 80108fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010900:	f104 0314 	add.w	r3, r4, #20
 8010904:	f019 091f 	ands.w	r9, r9, #31
 8010908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801090c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010910:	d02b      	beq.n	801096a <__lshift+0xbe>
 8010912:	f1c9 0e20 	rsb	lr, r9, #32
 8010916:	468a      	mov	sl, r1
 8010918:	2200      	movs	r2, #0
 801091a:	6818      	ldr	r0, [r3, #0]
 801091c:	fa00 f009 	lsl.w	r0, r0, r9
 8010920:	4310      	orrs	r0, r2
 8010922:	f84a 0b04 	str.w	r0, [sl], #4
 8010926:	f853 2b04 	ldr.w	r2, [r3], #4
 801092a:	459c      	cmp	ip, r3
 801092c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010930:	d8f3      	bhi.n	801091a <__lshift+0x6e>
 8010932:	ebac 0304 	sub.w	r3, ip, r4
 8010936:	3b15      	subs	r3, #21
 8010938:	f023 0303 	bic.w	r3, r3, #3
 801093c:	3304      	adds	r3, #4
 801093e:	f104 0015 	add.w	r0, r4, #21
 8010942:	4584      	cmp	ip, r0
 8010944:	bf38      	it	cc
 8010946:	2304      	movcc	r3, #4
 8010948:	50ca      	str	r2, [r1, r3]
 801094a:	b10a      	cbz	r2, 8010950 <__lshift+0xa4>
 801094c:	f108 0602 	add.w	r6, r8, #2
 8010950:	3e01      	subs	r6, #1
 8010952:	4638      	mov	r0, r7
 8010954:	612e      	str	r6, [r5, #16]
 8010956:	4621      	mov	r1, r4
 8010958:	f7ff fdd8 	bl	801050c <_Bfree>
 801095c:	4628      	mov	r0, r5
 801095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010962:	f842 0f04 	str.w	r0, [r2, #4]!
 8010966:	3301      	adds	r3, #1
 8010968:	e7c5      	b.n	80108f6 <__lshift+0x4a>
 801096a:	3904      	subs	r1, #4
 801096c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010970:	f841 2f04 	str.w	r2, [r1, #4]!
 8010974:	459c      	cmp	ip, r3
 8010976:	d8f9      	bhi.n	801096c <__lshift+0xc0>
 8010978:	e7ea      	b.n	8010950 <__lshift+0xa4>
 801097a:	bf00      	nop
 801097c:	08011944 	.word	0x08011944
 8010980:	08011955 	.word	0x08011955

08010984 <__mcmp>:
 8010984:	b530      	push	{r4, r5, lr}
 8010986:	6902      	ldr	r2, [r0, #16]
 8010988:	690c      	ldr	r4, [r1, #16]
 801098a:	1b12      	subs	r2, r2, r4
 801098c:	d10e      	bne.n	80109ac <__mcmp+0x28>
 801098e:	f100 0314 	add.w	r3, r0, #20
 8010992:	3114      	adds	r1, #20
 8010994:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010998:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801099c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109a4:	42a5      	cmp	r5, r4
 80109a6:	d003      	beq.n	80109b0 <__mcmp+0x2c>
 80109a8:	d305      	bcc.n	80109b6 <__mcmp+0x32>
 80109aa:	2201      	movs	r2, #1
 80109ac:	4610      	mov	r0, r2
 80109ae:	bd30      	pop	{r4, r5, pc}
 80109b0:	4283      	cmp	r3, r0
 80109b2:	d3f3      	bcc.n	801099c <__mcmp+0x18>
 80109b4:	e7fa      	b.n	80109ac <__mcmp+0x28>
 80109b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109ba:	e7f7      	b.n	80109ac <__mcmp+0x28>

080109bc <__mdiff>:
 80109bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c0:	460c      	mov	r4, r1
 80109c2:	4606      	mov	r6, r0
 80109c4:	4611      	mov	r1, r2
 80109c6:	4620      	mov	r0, r4
 80109c8:	4690      	mov	r8, r2
 80109ca:	f7ff ffdb 	bl	8010984 <__mcmp>
 80109ce:	1e05      	subs	r5, r0, #0
 80109d0:	d110      	bne.n	80109f4 <__mdiff+0x38>
 80109d2:	4629      	mov	r1, r5
 80109d4:	4630      	mov	r0, r6
 80109d6:	f7ff fd59 	bl	801048c <_Balloc>
 80109da:	b930      	cbnz	r0, 80109ea <__mdiff+0x2e>
 80109dc:	4b3a      	ldr	r3, [pc, #232]	; (8010ac8 <__mdiff+0x10c>)
 80109de:	4602      	mov	r2, r0
 80109e0:	f240 2137 	movw	r1, #567	; 0x237
 80109e4:	4839      	ldr	r0, [pc, #228]	; (8010acc <__mdiff+0x110>)
 80109e6:	f000 faed 	bl	8010fc4 <__assert_func>
 80109ea:	2301      	movs	r3, #1
 80109ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80109f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f4:	bfa4      	itt	ge
 80109f6:	4643      	movge	r3, r8
 80109f8:	46a0      	movge	r8, r4
 80109fa:	4630      	mov	r0, r6
 80109fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a00:	bfa6      	itte	ge
 8010a02:	461c      	movge	r4, r3
 8010a04:	2500      	movge	r5, #0
 8010a06:	2501      	movlt	r5, #1
 8010a08:	f7ff fd40 	bl	801048c <_Balloc>
 8010a0c:	b920      	cbnz	r0, 8010a18 <__mdiff+0x5c>
 8010a0e:	4b2e      	ldr	r3, [pc, #184]	; (8010ac8 <__mdiff+0x10c>)
 8010a10:	4602      	mov	r2, r0
 8010a12:	f240 2145 	movw	r1, #581	; 0x245
 8010a16:	e7e5      	b.n	80109e4 <__mdiff+0x28>
 8010a18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a1c:	6926      	ldr	r6, [r4, #16]
 8010a1e:	60c5      	str	r5, [r0, #12]
 8010a20:	f104 0914 	add.w	r9, r4, #20
 8010a24:	f108 0514 	add.w	r5, r8, #20
 8010a28:	f100 0e14 	add.w	lr, r0, #20
 8010a2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010a30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010a34:	f108 0210 	add.w	r2, r8, #16
 8010a38:	46f2      	mov	sl, lr
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a44:	fa11 f88b 	uxtah	r8, r1, fp
 8010a48:	b299      	uxth	r1, r3
 8010a4a:	0c1b      	lsrs	r3, r3, #16
 8010a4c:	eba8 0801 	sub.w	r8, r8, r1
 8010a50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a58:	fa1f f888 	uxth.w	r8, r8
 8010a5c:	1419      	asrs	r1, r3, #16
 8010a5e:	454e      	cmp	r6, r9
 8010a60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a64:	f84a 3b04 	str.w	r3, [sl], #4
 8010a68:	d8e8      	bhi.n	8010a3c <__mdiff+0x80>
 8010a6a:	1b33      	subs	r3, r6, r4
 8010a6c:	3b15      	subs	r3, #21
 8010a6e:	f023 0303 	bic.w	r3, r3, #3
 8010a72:	3304      	adds	r3, #4
 8010a74:	3415      	adds	r4, #21
 8010a76:	42a6      	cmp	r6, r4
 8010a78:	bf38      	it	cc
 8010a7a:	2304      	movcc	r3, #4
 8010a7c:	441d      	add	r5, r3
 8010a7e:	4473      	add	r3, lr
 8010a80:	469e      	mov	lr, r3
 8010a82:	462e      	mov	r6, r5
 8010a84:	4566      	cmp	r6, ip
 8010a86:	d30e      	bcc.n	8010aa6 <__mdiff+0xea>
 8010a88:	f10c 0203 	add.w	r2, ip, #3
 8010a8c:	1b52      	subs	r2, r2, r5
 8010a8e:	f022 0203 	bic.w	r2, r2, #3
 8010a92:	3d03      	subs	r5, #3
 8010a94:	45ac      	cmp	ip, r5
 8010a96:	bf38      	it	cc
 8010a98:	2200      	movcc	r2, #0
 8010a9a:	4413      	add	r3, r2
 8010a9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010aa0:	b17a      	cbz	r2, 8010ac2 <__mdiff+0x106>
 8010aa2:	6107      	str	r7, [r0, #16]
 8010aa4:	e7a4      	b.n	80109f0 <__mdiff+0x34>
 8010aa6:	f856 8b04 	ldr.w	r8, [r6], #4
 8010aaa:	fa11 f288 	uxtah	r2, r1, r8
 8010aae:	1414      	asrs	r4, r2, #16
 8010ab0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010ab4:	b292      	uxth	r2, r2
 8010ab6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010aba:	f84e 2b04 	str.w	r2, [lr], #4
 8010abe:	1421      	asrs	r1, r4, #16
 8010ac0:	e7e0      	b.n	8010a84 <__mdiff+0xc8>
 8010ac2:	3f01      	subs	r7, #1
 8010ac4:	e7ea      	b.n	8010a9c <__mdiff+0xe0>
 8010ac6:	bf00      	nop
 8010ac8:	08011944 	.word	0x08011944
 8010acc:	08011955 	.word	0x08011955

08010ad0 <__d2b>:
 8010ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ad4:	460f      	mov	r7, r1
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	ec59 8b10 	vmov	r8, r9, d0
 8010adc:	4616      	mov	r6, r2
 8010ade:	f7ff fcd5 	bl	801048c <_Balloc>
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	b930      	cbnz	r0, 8010af4 <__d2b+0x24>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	4b24      	ldr	r3, [pc, #144]	; (8010b7c <__d2b+0xac>)
 8010aea:	4825      	ldr	r0, [pc, #148]	; (8010b80 <__d2b+0xb0>)
 8010aec:	f240 310f 	movw	r1, #783	; 0x30f
 8010af0:	f000 fa68 	bl	8010fc4 <__assert_func>
 8010af4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010afc:	bb2d      	cbnz	r5, 8010b4a <__d2b+0x7a>
 8010afe:	9301      	str	r3, [sp, #4]
 8010b00:	f1b8 0300 	subs.w	r3, r8, #0
 8010b04:	d026      	beq.n	8010b54 <__d2b+0x84>
 8010b06:	4668      	mov	r0, sp
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	f7ff fd87 	bl	801061c <__lo0bits>
 8010b0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010b12:	b1e8      	cbz	r0, 8010b50 <__d2b+0x80>
 8010b14:	f1c0 0320 	rsb	r3, r0, #32
 8010b18:	fa02 f303 	lsl.w	r3, r2, r3
 8010b1c:	430b      	orrs	r3, r1
 8010b1e:	40c2      	lsrs	r2, r0
 8010b20:	6163      	str	r3, [r4, #20]
 8010b22:	9201      	str	r2, [sp, #4]
 8010b24:	9b01      	ldr	r3, [sp, #4]
 8010b26:	61a3      	str	r3, [r4, #24]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	bf14      	ite	ne
 8010b2c:	2202      	movne	r2, #2
 8010b2e:	2201      	moveq	r2, #1
 8010b30:	6122      	str	r2, [r4, #16]
 8010b32:	b1bd      	cbz	r5, 8010b64 <__d2b+0x94>
 8010b34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010b38:	4405      	add	r5, r0
 8010b3a:	603d      	str	r5, [r7, #0]
 8010b3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b40:	6030      	str	r0, [r6, #0]
 8010b42:	4620      	mov	r0, r4
 8010b44:	b003      	add	sp, #12
 8010b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b4e:	e7d6      	b.n	8010afe <__d2b+0x2e>
 8010b50:	6161      	str	r1, [r4, #20]
 8010b52:	e7e7      	b.n	8010b24 <__d2b+0x54>
 8010b54:	a801      	add	r0, sp, #4
 8010b56:	f7ff fd61 	bl	801061c <__lo0bits>
 8010b5a:	9b01      	ldr	r3, [sp, #4]
 8010b5c:	6163      	str	r3, [r4, #20]
 8010b5e:	3020      	adds	r0, #32
 8010b60:	2201      	movs	r2, #1
 8010b62:	e7e5      	b.n	8010b30 <__d2b+0x60>
 8010b64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b6c:	6038      	str	r0, [r7, #0]
 8010b6e:	6918      	ldr	r0, [r3, #16]
 8010b70:	f7ff fd34 	bl	80105dc <__hi0bits>
 8010b74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b78:	e7e2      	b.n	8010b40 <__d2b+0x70>
 8010b7a:	bf00      	nop
 8010b7c:	08011944 	.word	0x08011944
 8010b80:	08011955 	.word	0x08011955

08010b84 <__ssputs_r>:
 8010b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b88:	688e      	ldr	r6, [r1, #8]
 8010b8a:	461f      	mov	r7, r3
 8010b8c:	42be      	cmp	r6, r7
 8010b8e:	680b      	ldr	r3, [r1, #0]
 8010b90:	4682      	mov	sl, r0
 8010b92:	460c      	mov	r4, r1
 8010b94:	4690      	mov	r8, r2
 8010b96:	d82c      	bhi.n	8010bf2 <__ssputs_r+0x6e>
 8010b98:	898a      	ldrh	r2, [r1, #12]
 8010b9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b9e:	d026      	beq.n	8010bee <__ssputs_r+0x6a>
 8010ba0:	6965      	ldr	r5, [r4, #20]
 8010ba2:	6909      	ldr	r1, [r1, #16]
 8010ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ba8:	eba3 0901 	sub.w	r9, r3, r1
 8010bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bb0:	1c7b      	adds	r3, r7, #1
 8010bb2:	444b      	add	r3, r9
 8010bb4:	106d      	asrs	r5, r5, #1
 8010bb6:	429d      	cmp	r5, r3
 8010bb8:	bf38      	it	cc
 8010bba:	461d      	movcc	r5, r3
 8010bbc:	0553      	lsls	r3, r2, #21
 8010bbe:	d527      	bpl.n	8010c10 <__ssputs_r+0x8c>
 8010bc0:	4629      	mov	r1, r5
 8010bc2:	f7fd feed 	bl	800e9a0 <_malloc_r>
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	b360      	cbz	r0, 8010c24 <__ssputs_r+0xa0>
 8010bca:	6921      	ldr	r1, [r4, #16]
 8010bcc:	464a      	mov	r2, r9
 8010bce:	f7fe fd89 	bl	800f6e4 <memcpy>
 8010bd2:	89a3      	ldrh	r3, [r4, #12]
 8010bd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bdc:	81a3      	strh	r3, [r4, #12]
 8010bde:	6126      	str	r6, [r4, #16]
 8010be0:	6165      	str	r5, [r4, #20]
 8010be2:	444e      	add	r6, r9
 8010be4:	eba5 0509 	sub.w	r5, r5, r9
 8010be8:	6026      	str	r6, [r4, #0]
 8010bea:	60a5      	str	r5, [r4, #8]
 8010bec:	463e      	mov	r6, r7
 8010bee:	42be      	cmp	r6, r7
 8010bf0:	d900      	bls.n	8010bf4 <__ssputs_r+0x70>
 8010bf2:	463e      	mov	r6, r7
 8010bf4:	6820      	ldr	r0, [r4, #0]
 8010bf6:	4632      	mov	r2, r6
 8010bf8:	4641      	mov	r1, r8
 8010bfa:	f000 f9c9 	bl	8010f90 <memmove>
 8010bfe:	68a3      	ldr	r3, [r4, #8]
 8010c00:	1b9b      	subs	r3, r3, r6
 8010c02:	60a3      	str	r3, [r4, #8]
 8010c04:	6823      	ldr	r3, [r4, #0]
 8010c06:	4433      	add	r3, r6
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c10:	462a      	mov	r2, r5
 8010c12:	f000 fa1d 	bl	8011050 <_realloc_r>
 8010c16:	4606      	mov	r6, r0
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	d1e0      	bne.n	8010bde <__ssputs_r+0x5a>
 8010c1c:	6921      	ldr	r1, [r4, #16]
 8010c1e:	4650      	mov	r0, sl
 8010c20:	f7ff fbe8 	bl	80103f4 <_free_r>
 8010c24:	230c      	movs	r3, #12
 8010c26:	f8ca 3000 	str.w	r3, [sl]
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c30:	81a3      	strh	r3, [r4, #12]
 8010c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c36:	e7e9      	b.n	8010c0c <__ssputs_r+0x88>

08010c38 <_svfiprintf_r>:
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	4698      	mov	r8, r3
 8010c3e:	898b      	ldrh	r3, [r1, #12]
 8010c40:	061b      	lsls	r3, r3, #24
 8010c42:	b09d      	sub	sp, #116	; 0x74
 8010c44:	4607      	mov	r7, r0
 8010c46:	460d      	mov	r5, r1
 8010c48:	4614      	mov	r4, r2
 8010c4a:	d50e      	bpl.n	8010c6a <_svfiprintf_r+0x32>
 8010c4c:	690b      	ldr	r3, [r1, #16]
 8010c4e:	b963      	cbnz	r3, 8010c6a <_svfiprintf_r+0x32>
 8010c50:	2140      	movs	r1, #64	; 0x40
 8010c52:	f7fd fea5 	bl	800e9a0 <_malloc_r>
 8010c56:	6028      	str	r0, [r5, #0]
 8010c58:	6128      	str	r0, [r5, #16]
 8010c5a:	b920      	cbnz	r0, 8010c66 <_svfiprintf_r+0x2e>
 8010c5c:	230c      	movs	r3, #12
 8010c5e:	603b      	str	r3, [r7, #0]
 8010c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c64:	e0d0      	b.n	8010e08 <_svfiprintf_r+0x1d0>
 8010c66:	2340      	movs	r3, #64	; 0x40
 8010c68:	616b      	str	r3, [r5, #20]
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c6e:	2320      	movs	r3, #32
 8010c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c78:	2330      	movs	r3, #48	; 0x30
 8010c7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010e20 <_svfiprintf_r+0x1e8>
 8010c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c82:	f04f 0901 	mov.w	r9, #1
 8010c86:	4623      	mov	r3, r4
 8010c88:	469a      	mov	sl, r3
 8010c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c8e:	b10a      	cbz	r2, 8010c94 <_svfiprintf_r+0x5c>
 8010c90:	2a25      	cmp	r2, #37	; 0x25
 8010c92:	d1f9      	bne.n	8010c88 <_svfiprintf_r+0x50>
 8010c94:	ebba 0b04 	subs.w	fp, sl, r4
 8010c98:	d00b      	beq.n	8010cb2 <_svfiprintf_r+0x7a>
 8010c9a:	465b      	mov	r3, fp
 8010c9c:	4622      	mov	r2, r4
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f7ff ff6f 	bl	8010b84 <__ssputs_r>
 8010ca6:	3001      	adds	r0, #1
 8010ca8:	f000 80a9 	beq.w	8010dfe <_svfiprintf_r+0x1c6>
 8010cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cae:	445a      	add	r2, fp
 8010cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8010cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f000 80a1 	beq.w	8010dfe <_svfiprintf_r+0x1c6>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cc6:	f10a 0a01 	add.w	sl, sl, #1
 8010cca:	9304      	str	r3, [sp, #16]
 8010ccc:	9307      	str	r3, [sp, #28]
 8010cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8010cd4:	4654      	mov	r4, sl
 8010cd6:	2205      	movs	r2, #5
 8010cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cdc:	4850      	ldr	r0, [pc, #320]	; (8010e20 <_svfiprintf_r+0x1e8>)
 8010cde:	f7ef fa7f 	bl	80001e0 <memchr>
 8010ce2:	9a04      	ldr	r2, [sp, #16]
 8010ce4:	b9d8      	cbnz	r0, 8010d1e <_svfiprintf_r+0xe6>
 8010ce6:	06d0      	lsls	r0, r2, #27
 8010ce8:	bf44      	itt	mi
 8010cea:	2320      	movmi	r3, #32
 8010cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cf0:	0711      	lsls	r1, r2, #28
 8010cf2:	bf44      	itt	mi
 8010cf4:	232b      	movmi	r3, #43	; 0x2b
 8010cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8010cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8010d00:	d015      	beq.n	8010d2e <_svfiprintf_r+0xf6>
 8010d02:	9a07      	ldr	r2, [sp, #28]
 8010d04:	4654      	mov	r4, sl
 8010d06:	2000      	movs	r0, #0
 8010d08:	f04f 0c0a 	mov.w	ip, #10
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d12:	3b30      	subs	r3, #48	; 0x30
 8010d14:	2b09      	cmp	r3, #9
 8010d16:	d94d      	bls.n	8010db4 <_svfiprintf_r+0x17c>
 8010d18:	b1b0      	cbz	r0, 8010d48 <_svfiprintf_r+0x110>
 8010d1a:	9207      	str	r2, [sp, #28]
 8010d1c:	e014      	b.n	8010d48 <_svfiprintf_r+0x110>
 8010d1e:	eba0 0308 	sub.w	r3, r0, r8
 8010d22:	fa09 f303 	lsl.w	r3, r9, r3
 8010d26:	4313      	orrs	r3, r2
 8010d28:	9304      	str	r3, [sp, #16]
 8010d2a:	46a2      	mov	sl, r4
 8010d2c:	e7d2      	b.n	8010cd4 <_svfiprintf_r+0x9c>
 8010d2e:	9b03      	ldr	r3, [sp, #12]
 8010d30:	1d19      	adds	r1, r3, #4
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	9103      	str	r1, [sp, #12]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	bfbb      	ittet	lt
 8010d3a:	425b      	neglt	r3, r3
 8010d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8010d40:	9307      	strge	r3, [sp, #28]
 8010d42:	9307      	strlt	r3, [sp, #28]
 8010d44:	bfb8      	it	lt
 8010d46:	9204      	strlt	r2, [sp, #16]
 8010d48:	7823      	ldrb	r3, [r4, #0]
 8010d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8010d4c:	d10c      	bne.n	8010d68 <_svfiprintf_r+0x130>
 8010d4e:	7863      	ldrb	r3, [r4, #1]
 8010d50:	2b2a      	cmp	r3, #42	; 0x2a
 8010d52:	d134      	bne.n	8010dbe <_svfiprintf_r+0x186>
 8010d54:	9b03      	ldr	r3, [sp, #12]
 8010d56:	1d1a      	adds	r2, r3, #4
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	9203      	str	r2, [sp, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	bfb8      	it	lt
 8010d60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010d64:	3402      	adds	r4, #2
 8010d66:	9305      	str	r3, [sp, #20]
 8010d68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010e30 <_svfiprintf_r+0x1f8>
 8010d6c:	7821      	ldrb	r1, [r4, #0]
 8010d6e:	2203      	movs	r2, #3
 8010d70:	4650      	mov	r0, sl
 8010d72:	f7ef fa35 	bl	80001e0 <memchr>
 8010d76:	b138      	cbz	r0, 8010d88 <_svfiprintf_r+0x150>
 8010d78:	9b04      	ldr	r3, [sp, #16]
 8010d7a:	eba0 000a 	sub.w	r0, r0, sl
 8010d7e:	2240      	movs	r2, #64	; 0x40
 8010d80:	4082      	lsls	r2, r0
 8010d82:	4313      	orrs	r3, r2
 8010d84:	3401      	adds	r4, #1
 8010d86:	9304      	str	r3, [sp, #16]
 8010d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d8c:	4825      	ldr	r0, [pc, #148]	; (8010e24 <_svfiprintf_r+0x1ec>)
 8010d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d92:	2206      	movs	r2, #6
 8010d94:	f7ef fa24 	bl	80001e0 <memchr>
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	d038      	beq.n	8010e0e <_svfiprintf_r+0x1d6>
 8010d9c:	4b22      	ldr	r3, [pc, #136]	; (8010e28 <_svfiprintf_r+0x1f0>)
 8010d9e:	bb1b      	cbnz	r3, 8010de8 <_svfiprintf_r+0x1b0>
 8010da0:	9b03      	ldr	r3, [sp, #12]
 8010da2:	3307      	adds	r3, #7
 8010da4:	f023 0307 	bic.w	r3, r3, #7
 8010da8:	3308      	adds	r3, #8
 8010daa:	9303      	str	r3, [sp, #12]
 8010dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dae:	4433      	add	r3, r6
 8010db0:	9309      	str	r3, [sp, #36]	; 0x24
 8010db2:	e768      	b.n	8010c86 <_svfiprintf_r+0x4e>
 8010db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010db8:	460c      	mov	r4, r1
 8010dba:	2001      	movs	r0, #1
 8010dbc:	e7a6      	b.n	8010d0c <_svfiprintf_r+0xd4>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	3401      	adds	r4, #1
 8010dc2:	9305      	str	r3, [sp, #20]
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	f04f 0c0a 	mov.w	ip, #10
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dd0:	3a30      	subs	r2, #48	; 0x30
 8010dd2:	2a09      	cmp	r2, #9
 8010dd4:	d903      	bls.n	8010dde <_svfiprintf_r+0x1a6>
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d0c6      	beq.n	8010d68 <_svfiprintf_r+0x130>
 8010dda:	9105      	str	r1, [sp, #20]
 8010ddc:	e7c4      	b.n	8010d68 <_svfiprintf_r+0x130>
 8010dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8010de2:	4604      	mov	r4, r0
 8010de4:	2301      	movs	r3, #1
 8010de6:	e7f0      	b.n	8010dca <_svfiprintf_r+0x192>
 8010de8:	ab03      	add	r3, sp, #12
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	462a      	mov	r2, r5
 8010dee:	4b0f      	ldr	r3, [pc, #60]	; (8010e2c <_svfiprintf_r+0x1f4>)
 8010df0:	a904      	add	r1, sp, #16
 8010df2:	4638      	mov	r0, r7
 8010df4:	f7fd ff00 	bl	800ebf8 <_printf_float>
 8010df8:	1c42      	adds	r2, r0, #1
 8010dfa:	4606      	mov	r6, r0
 8010dfc:	d1d6      	bne.n	8010dac <_svfiprintf_r+0x174>
 8010dfe:	89ab      	ldrh	r3, [r5, #12]
 8010e00:	065b      	lsls	r3, r3, #25
 8010e02:	f53f af2d 	bmi.w	8010c60 <_svfiprintf_r+0x28>
 8010e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e08:	b01d      	add	sp, #116	; 0x74
 8010e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0e:	ab03      	add	r3, sp, #12
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	462a      	mov	r2, r5
 8010e14:	4b05      	ldr	r3, [pc, #20]	; (8010e2c <_svfiprintf_r+0x1f4>)
 8010e16:	a904      	add	r1, sp, #16
 8010e18:	4638      	mov	r0, r7
 8010e1a:	f7fe f991 	bl	800f140 <_printf_i>
 8010e1e:	e7eb      	b.n	8010df8 <_svfiprintf_r+0x1c0>
 8010e20:	08011aac 	.word	0x08011aac
 8010e24:	08011ab6 	.word	0x08011ab6
 8010e28:	0800ebf9 	.word	0x0800ebf9
 8010e2c:	08010b85 	.word	0x08010b85
 8010e30:	08011ab2 	.word	0x08011ab2

08010e34 <__sflush_r>:
 8010e34:	898a      	ldrh	r2, [r1, #12]
 8010e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3a:	4605      	mov	r5, r0
 8010e3c:	0710      	lsls	r0, r2, #28
 8010e3e:	460c      	mov	r4, r1
 8010e40:	d458      	bmi.n	8010ef4 <__sflush_r+0xc0>
 8010e42:	684b      	ldr	r3, [r1, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	dc05      	bgt.n	8010e54 <__sflush_r+0x20>
 8010e48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	dc02      	bgt.n	8010e54 <__sflush_r+0x20>
 8010e4e:	2000      	movs	r0, #0
 8010e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e56:	2e00      	cmp	r6, #0
 8010e58:	d0f9      	beq.n	8010e4e <__sflush_r+0x1a>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e60:	682f      	ldr	r7, [r5, #0]
 8010e62:	6a21      	ldr	r1, [r4, #32]
 8010e64:	602b      	str	r3, [r5, #0]
 8010e66:	d032      	beq.n	8010ece <__sflush_r+0x9a>
 8010e68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e6a:	89a3      	ldrh	r3, [r4, #12]
 8010e6c:	075a      	lsls	r2, r3, #29
 8010e6e:	d505      	bpl.n	8010e7c <__sflush_r+0x48>
 8010e70:	6863      	ldr	r3, [r4, #4]
 8010e72:	1ac0      	subs	r0, r0, r3
 8010e74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e76:	b10b      	cbz	r3, 8010e7c <__sflush_r+0x48>
 8010e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e7a:	1ac0      	subs	r0, r0, r3
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	4602      	mov	r2, r0
 8010e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e82:	6a21      	ldr	r1, [r4, #32]
 8010e84:	4628      	mov	r0, r5
 8010e86:	47b0      	blx	r6
 8010e88:	1c43      	adds	r3, r0, #1
 8010e8a:	89a3      	ldrh	r3, [r4, #12]
 8010e8c:	d106      	bne.n	8010e9c <__sflush_r+0x68>
 8010e8e:	6829      	ldr	r1, [r5, #0]
 8010e90:	291d      	cmp	r1, #29
 8010e92:	d82b      	bhi.n	8010eec <__sflush_r+0xb8>
 8010e94:	4a29      	ldr	r2, [pc, #164]	; (8010f3c <__sflush_r+0x108>)
 8010e96:	410a      	asrs	r2, r1
 8010e98:	07d6      	lsls	r6, r2, #31
 8010e9a:	d427      	bmi.n	8010eec <__sflush_r+0xb8>
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	6062      	str	r2, [r4, #4]
 8010ea0:	04d9      	lsls	r1, r3, #19
 8010ea2:	6922      	ldr	r2, [r4, #16]
 8010ea4:	6022      	str	r2, [r4, #0]
 8010ea6:	d504      	bpl.n	8010eb2 <__sflush_r+0x7e>
 8010ea8:	1c42      	adds	r2, r0, #1
 8010eaa:	d101      	bne.n	8010eb0 <__sflush_r+0x7c>
 8010eac:	682b      	ldr	r3, [r5, #0]
 8010eae:	b903      	cbnz	r3, 8010eb2 <__sflush_r+0x7e>
 8010eb0:	6560      	str	r0, [r4, #84]	; 0x54
 8010eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010eb4:	602f      	str	r7, [r5, #0]
 8010eb6:	2900      	cmp	r1, #0
 8010eb8:	d0c9      	beq.n	8010e4e <__sflush_r+0x1a>
 8010eba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ebe:	4299      	cmp	r1, r3
 8010ec0:	d002      	beq.n	8010ec8 <__sflush_r+0x94>
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f7ff fa96 	bl	80103f4 <_free_r>
 8010ec8:	2000      	movs	r0, #0
 8010eca:	6360      	str	r0, [r4, #52]	; 0x34
 8010ecc:	e7c0      	b.n	8010e50 <__sflush_r+0x1c>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	47b0      	blx	r6
 8010ed4:	1c41      	adds	r1, r0, #1
 8010ed6:	d1c8      	bne.n	8010e6a <__sflush_r+0x36>
 8010ed8:	682b      	ldr	r3, [r5, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d0c5      	beq.n	8010e6a <__sflush_r+0x36>
 8010ede:	2b1d      	cmp	r3, #29
 8010ee0:	d001      	beq.n	8010ee6 <__sflush_r+0xb2>
 8010ee2:	2b16      	cmp	r3, #22
 8010ee4:	d101      	bne.n	8010eea <__sflush_r+0xb6>
 8010ee6:	602f      	str	r7, [r5, #0]
 8010ee8:	e7b1      	b.n	8010e4e <__sflush_r+0x1a>
 8010eea:	89a3      	ldrh	r3, [r4, #12]
 8010eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ef0:	81a3      	strh	r3, [r4, #12]
 8010ef2:	e7ad      	b.n	8010e50 <__sflush_r+0x1c>
 8010ef4:	690f      	ldr	r7, [r1, #16]
 8010ef6:	2f00      	cmp	r7, #0
 8010ef8:	d0a9      	beq.n	8010e4e <__sflush_r+0x1a>
 8010efa:	0793      	lsls	r3, r2, #30
 8010efc:	680e      	ldr	r6, [r1, #0]
 8010efe:	bf08      	it	eq
 8010f00:	694b      	ldreq	r3, [r1, #20]
 8010f02:	600f      	str	r7, [r1, #0]
 8010f04:	bf18      	it	ne
 8010f06:	2300      	movne	r3, #0
 8010f08:	eba6 0807 	sub.w	r8, r6, r7
 8010f0c:	608b      	str	r3, [r1, #8]
 8010f0e:	f1b8 0f00 	cmp.w	r8, #0
 8010f12:	dd9c      	ble.n	8010e4e <__sflush_r+0x1a>
 8010f14:	6a21      	ldr	r1, [r4, #32]
 8010f16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f18:	4643      	mov	r3, r8
 8010f1a:	463a      	mov	r2, r7
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	47b0      	blx	r6
 8010f20:	2800      	cmp	r0, #0
 8010f22:	dc06      	bgt.n	8010f32 <__sflush_r+0xfe>
 8010f24:	89a3      	ldrh	r3, [r4, #12]
 8010f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f2a:	81a3      	strh	r3, [r4, #12]
 8010f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f30:	e78e      	b.n	8010e50 <__sflush_r+0x1c>
 8010f32:	4407      	add	r7, r0
 8010f34:	eba8 0800 	sub.w	r8, r8, r0
 8010f38:	e7e9      	b.n	8010f0e <__sflush_r+0xda>
 8010f3a:	bf00      	nop
 8010f3c:	dfbffffe 	.word	0xdfbffffe

08010f40 <_fflush_r>:
 8010f40:	b538      	push	{r3, r4, r5, lr}
 8010f42:	690b      	ldr	r3, [r1, #16]
 8010f44:	4605      	mov	r5, r0
 8010f46:	460c      	mov	r4, r1
 8010f48:	b913      	cbnz	r3, 8010f50 <_fflush_r+0x10>
 8010f4a:	2500      	movs	r5, #0
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	bd38      	pop	{r3, r4, r5, pc}
 8010f50:	b118      	cbz	r0, 8010f5a <_fflush_r+0x1a>
 8010f52:	6a03      	ldr	r3, [r0, #32]
 8010f54:	b90b      	cbnz	r3, 8010f5a <_fflush_r+0x1a>
 8010f56:	f7fe fa8f 	bl	800f478 <__sinit>
 8010f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d0f3      	beq.n	8010f4a <_fflush_r+0xa>
 8010f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f64:	07d0      	lsls	r0, r2, #31
 8010f66:	d404      	bmi.n	8010f72 <_fflush_r+0x32>
 8010f68:	0599      	lsls	r1, r3, #22
 8010f6a:	d402      	bmi.n	8010f72 <_fflush_r+0x32>
 8010f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f6e:	f7fe fbb7 	bl	800f6e0 <__retarget_lock_acquire_recursive>
 8010f72:	4628      	mov	r0, r5
 8010f74:	4621      	mov	r1, r4
 8010f76:	f7ff ff5d 	bl	8010e34 <__sflush_r>
 8010f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f7c:	07da      	lsls	r2, r3, #31
 8010f7e:	4605      	mov	r5, r0
 8010f80:	d4e4      	bmi.n	8010f4c <_fflush_r+0xc>
 8010f82:	89a3      	ldrh	r3, [r4, #12]
 8010f84:	059b      	lsls	r3, r3, #22
 8010f86:	d4e1      	bmi.n	8010f4c <_fflush_r+0xc>
 8010f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f8a:	f7fe fbaa 	bl	800f6e2 <__retarget_lock_release_recursive>
 8010f8e:	e7dd      	b.n	8010f4c <_fflush_r+0xc>

08010f90 <memmove>:
 8010f90:	4288      	cmp	r0, r1
 8010f92:	b510      	push	{r4, lr}
 8010f94:	eb01 0402 	add.w	r4, r1, r2
 8010f98:	d902      	bls.n	8010fa0 <memmove+0x10>
 8010f9a:	4284      	cmp	r4, r0
 8010f9c:	4623      	mov	r3, r4
 8010f9e:	d807      	bhi.n	8010fb0 <memmove+0x20>
 8010fa0:	1e43      	subs	r3, r0, #1
 8010fa2:	42a1      	cmp	r1, r4
 8010fa4:	d008      	beq.n	8010fb8 <memmove+0x28>
 8010fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fae:	e7f8      	b.n	8010fa2 <memmove+0x12>
 8010fb0:	4402      	add	r2, r0
 8010fb2:	4601      	mov	r1, r0
 8010fb4:	428a      	cmp	r2, r1
 8010fb6:	d100      	bne.n	8010fba <memmove+0x2a>
 8010fb8:	bd10      	pop	{r4, pc}
 8010fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fc2:	e7f7      	b.n	8010fb4 <memmove+0x24>

08010fc4 <__assert_func>:
 8010fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fc6:	4614      	mov	r4, r2
 8010fc8:	461a      	mov	r2, r3
 8010fca:	4b09      	ldr	r3, [pc, #36]	; (8010ff0 <__assert_func+0x2c>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4605      	mov	r5, r0
 8010fd0:	68d8      	ldr	r0, [r3, #12]
 8010fd2:	b14c      	cbz	r4, 8010fe8 <__assert_func+0x24>
 8010fd4:	4b07      	ldr	r3, [pc, #28]	; (8010ff4 <__assert_func+0x30>)
 8010fd6:	9100      	str	r1, [sp, #0]
 8010fd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fdc:	4906      	ldr	r1, [pc, #24]	; (8010ff8 <__assert_func+0x34>)
 8010fde:	462b      	mov	r3, r5
 8010fe0:	f000 f872 	bl	80110c8 <fiprintf>
 8010fe4:	f000 f882 	bl	80110ec <abort>
 8010fe8:	4b04      	ldr	r3, [pc, #16]	; (8010ffc <__assert_func+0x38>)
 8010fea:	461c      	mov	r4, r3
 8010fec:	e7f3      	b.n	8010fd6 <__assert_func+0x12>
 8010fee:	bf00      	nop
 8010ff0:	20000168 	.word	0x20000168
 8010ff4:	08011ac7 	.word	0x08011ac7
 8010ff8:	08011ad4 	.word	0x08011ad4
 8010ffc:	08011b02 	.word	0x08011b02

08011000 <_calloc_r>:
 8011000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011002:	fba1 2402 	umull	r2, r4, r1, r2
 8011006:	b94c      	cbnz	r4, 801101c <_calloc_r+0x1c>
 8011008:	4611      	mov	r1, r2
 801100a:	9201      	str	r2, [sp, #4]
 801100c:	f7fd fcc8 	bl	800e9a0 <_malloc_r>
 8011010:	9a01      	ldr	r2, [sp, #4]
 8011012:	4605      	mov	r5, r0
 8011014:	b930      	cbnz	r0, 8011024 <_calloc_r+0x24>
 8011016:	4628      	mov	r0, r5
 8011018:	b003      	add	sp, #12
 801101a:	bd30      	pop	{r4, r5, pc}
 801101c:	220c      	movs	r2, #12
 801101e:	6002      	str	r2, [r0, #0]
 8011020:	2500      	movs	r5, #0
 8011022:	e7f8      	b.n	8011016 <_calloc_r+0x16>
 8011024:	4621      	mov	r1, r4
 8011026:	f7fe fac0 	bl	800f5aa <memset>
 801102a:	e7f4      	b.n	8011016 <_calloc_r+0x16>

0801102c <__ascii_mbtowc>:
 801102c:	b082      	sub	sp, #8
 801102e:	b901      	cbnz	r1, 8011032 <__ascii_mbtowc+0x6>
 8011030:	a901      	add	r1, sp, #4
 8011032:	b142      	cbz	r2, 8011046 <__ascii_mbtowc+0x1a>
 8011034:	b14b      	cbz	r3, 801104a <__ascii_mbtowc+0x1e>
 8011036:	7813      	ldrb	r3, [r2, #0]
 8011038:	600b      	str	r3, [r1, #0]
 801103a:	7812      	ldrb	r2, [r2, #0]
 801103c:	1e10      	subs	r0, r2, #0
 801103e:	bf18      	it	ne
 8011040:	2001      	movne	r0, #1
 8011042:	b002      	add	sp, #8
 8011044:	4770      	bx	lr
 8011046:	4610      	mov	r0, r2
 8011048:	e7fb      	b.n	8011042 <__ascii_mbtowc+0x16>
 801104a:	f06f 0001 	mvn.w	r0, #1
 801104e:	e7f8      	b.n	8011042 <__ascii_mbtowc+0x16>

08011050 <_realloc_r>:
 8011050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	4680      	mov	r8, r0
 8011056:	4614      	mov	r4, r2
 8011058:	460e      	mov	r6, r1
 801105a:	b921      	cbnz	r1, 8011066 <_realloc_r+0x16>
 801105c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011060:	4611      	mov	r1, r2
 8011062:	f7fd bc9d 	b.w	800e9a0 <_malloc_r>
 8011066:	b92a      	cbnz	r2, 8011074 <_realloc_r+0x24>
 8011068:	f7ff f9c4 	bl	80103f4 <_free_r>
 801106c:	4625      	mov	r5, r4
 801106e:	4628      	mov	r0, r5
 8011070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011074:	f000 f841 	bl	80110fa <_malloc_usable_size_r>
 8011078:	4284      	cmp	r4, r0
 801107a:	4607      	mov	r7, r0
 801107c:	d802      	bhi.n	8011084 <_realloc_r+0x34>
 801107e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011082:	d812      	bhi.n	80110aa <_realloc_r+0x5a>
 8011084:	4621      	mov	r1, r4
 8011086:	4640      	mov	r0, r8
 8011088:	f7fd fc8a 	bl	800e9a0 <_malloc_r>
 801108c:	4605      	mov	r5, r0
 801108e:	2800      	cmp	r0, #0
 8011090:	d0ed      	beq.n	801106e <_realloc_r+0x1e>
 8011092:	42bc      	cmp	r4, r7
 8011094:	4622      	mov	r2, r4
 8011096:	4631      	mov	r1, r6
 8011098:	bf28      	it	cs
 801109a:	463a      	movcs	r2, r7
 801109c:	f7fe fb22 	bl	800f6e4 <memcpy>
 80110a0:	4631      	mov	r1, r6
 80110a2:	4640      	mov	r0, r8
 80110a4:	f7ff f9a6 	bl	80103f4 <_free_r>
 80110a8:	e7e1      	b.n	801106e <_realloc_r+0x1e>
 80110aa:	4635      	mov	r5, r6
 80110ac:	e7df      	b.n	801106e <_realloc_r+0x1e>

080110ae <__ascii_wctomb>:
 80110ae:	b149      	cbz	r1, 80110c4 <__ascii_wctomb+0x16>
 80110b0:	2aff      	cmp	r2, #255	; 0xff
 80110b2:	bf85      	ittet	hi
 80110b4:	238a      	movhi	r3, #138	; 0x8a
 80110b6:	6003      	strhi	r3, [r0, #0]
 80110b8:	700a      	strbls	r2, [r1, #0]
 80110ba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80110be:	bf98      	it	ls
 80110c0:	2001      	movls	r0, #1
 80110c2:	4770      	bx	lr
 80110c4:	4608      	mov	r0, r1
 80110c6:	4770      	bx	lr

080110c8 <fiprintf>:
 80110c8:	b40e      	push	{r1, r2, r3}
 80110ca:	b503      	push	{r0, r1, lr}
 80110cc:	4601      	mov	r1, r0
 80110ce:	ab03      	add	r3, sp, #12
 80110d0:	4805      	ldr	r0, [pc, #20]	; (80110e8 <fiprintf+0x20>)
 80110d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80110d6:	6800      	ldr	r0, [r0, #0]
 80110d8:	9301      	str	r3, [sp, #4]
 80110da:	f000 f83f 	bl	801115c <_vfiprintf_r>
 80110de:	b002      	add	sp, #8
 80110e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80110e4:	b003      	add	sp, #12
 80110e6:	4770      	bx	lr
 80110e8:	20000168 	.word	0x20000168

080110ec <abort>:
 80110ec:	b508      	push	{r3, lr}
 80110ee:	2006      	movs	r0, #6
 80110f0:	f000 fa0c 	bl	801150c <raise>
 80110f4:	2001      	movs	r0, #1
 80110f6:	f7f0 fe77 	bl	8001de8 <_exit>

080110fa <_malloc_usable_size_r>:
 80110fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110fe:	1f18      	subs	r0, r3, #4
 8011100:	2b00      	cmp	r3, #0
 8011102:	bfbc      	itt	lt
 8011104:	580b      	ldrlt	r3, [r1, r0]
 8011106:	18c0      	addlt	r0, r0, r3
 8011108:	4770      	bx	lr

0801110a <__sfputc_r>:
 801110a:	6893      	ldr	r3, [r2, #8]
 801110c:	3b01      	subs	r3, #1
 801110e:	2b00      	cmp	r3, #0
 8011110:	b410      	push	{r4}
 8011112:	6093      	str	r3, [r2, #8]
 8011114:	da08      	bge.n	8011128 <__sfputc_r+0x1e>
 8011116:	6994      	ldr	r4, [r2, #24]
 8011118:	42a3      	cmp	r3, r4
 801111a:	db01      	blt.n	8011120 <__sfputc_r+0x16>
 801111c:	290a      	cmp	r1, #10
 801111e:	d103      	bne.n	8011128 <__sfputc_r+0x1e>
 8011120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011124:	f000 b934 	b.w	8011390 <__swbuf_r>
 8011128:	6813      	ldr	r3, [r2, #0]
 801112a:	1c58      	adds	r0, r3, #1
 801112c:	6010      	str	r0, [r2, #0]
 801112e:	7019      	strb	r1, [r3, #0]
 8011130:	4608      	mov	r0, r1
 8011132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011136:	4770      	bx	lr

08011138 <__sfputs_r>:
 8011138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801113a:	4606      	mov	r6, r0
 801113c:	460f      	mov	r7, r1
 801113e:	4614      	mov	r4, r2
 8011140:	18d5      	adds	r5, r2, r3
 8011142:	42ac      	cmp	r4, r5
 8011144:	d101      	bne.n	801114a <__sfputs_r+0x12>
 8011146:	2000      	movs	r0, #0
 8011148:	e007      	b.n	801115a <__sfputs_r+0x22>
 801114a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801114e:	463a      	mov	r2, r7
 8011150:	4630      	mov	r0, r6
 8011152:	f7ff ffda 	bl	801110a <__sfputc_r>
 8011156:	1c43      	adds	r3, r0, #1
 8011158:	d1f3      	bne.n	8011142 <__sfputs_r+0xa>
 801115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801115c <_vfiprintf_r>:
 801115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011160:	460d      	mov	r5, r1
 8011162:	b09d      	sub	sp, #116	; 0x74
 8011164:	4614      	mov	r4, r2
 8011166:	4698      	mov	r8, r3
 8011168:	4606      	mov	r6, r0
 801116a:	b118      	cbz	r0, 8011174 <_vfiprintf_r+0x18>
 801116c:	6a03      	ldr	r3, [r0, #32]
 801116e:	b90b      	cbnz	r3, 8011174 <_vfiprintf_r+0x18>
 8011170:	f7fe f982 	bl	800f478 <__sinit>
 8011174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011176:	07d9      	lsls	r1, r3, #31
 8011178:	d405      	bmi.n	8011186 <_vfiprintf_r+0x2a>
 801117a:	89ab      	ldrh	r3, [r5, #12]
 801117c:	059a      	lsls	r2, r3, #22
 801117e:	d402      	bmi.n	8011186 <_vfiprintf_r+0x2a>
 8011180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011182:	f7fe faad 	bl	800f6e0 <__retarget_lock_acquire_recursive>
 8011186:	89ab      	ldrh	r3, [r5, #12]
 8011188:	071b      	lsls	r3, r3, #28
 801118a:	d501      	bpl.n	8011190 <_vfiprintf_r+0x34>
 801118c:	692b      	ldr	r3, [r5, #16]
 801118e:	b99b      	cbnz	r3, 80111b8 <_vfiprintf_r+0x5c>
 8011190:	4629      	mov	r1, r5
 8011192:	4630      	mov	r0, r6
 8011194:	f000 f93a 	bl	801140c <__swsetup_r>
 8011198:	b170      	cbz	r0, 80111b8 <_vfiprintf_r+0x5c>
 801119a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801119c:	07dc      	lsls	r4, r3, #31
 801119e:	d504      	bpl.n	80111aa <_vfiprintf_r+0x4e>
 80111a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111a4:	b01d      	add	sp, #116	; 0x74
 80111a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111aa:	89ab      	ldrh	r3, [r5, #12]
 80111ac:	0598      	lsls	r0, r3, #22
 80111ae:	d4f7      	bmi.n	80111a0 <_vfiprintf_r+0x44>
 80111b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111b2:	f7fe fa96 	bl	800f6e2 <__retarget_lock_release_recursive>
 80111b6:	e7f3      	b.n	80111a0 <_vfiprintf_r+0x44>
 80111b8:	2300      	movs	r3, #0
 80111ba:	9309      	str	r3, [sp, #36]	; 0x24
 80111bc:	2320      	movs	r3, #32
 80111be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80111c6:	2330      	movs	r3, #48	; 0x30
 80111c8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801137c <_vfiprintf_r+0x220>
 80111cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111d0:	f04f 0901 	mov.w	r9, #1
 80111d4:	4623      	mov	r3, r4
 80111d6:	469a      	mov	sl, r3
 80111d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111dc:	b10a      	cbz	r2, 80111e2 <_vfiprintf_r+0x86>
 80111de:	2a25      	cmp	r2, #37	; 0x25
 80111e0:	d1f9      	bne.n	80111d6 <_vfiprintf_r+0x7a>
 80111e2:	ebba 0b04 	subs.w	fp, sl, r4
 80111e6:	d00b      	beq.n	8011200 <_vfiprintf_r+0xa4>
 80111e8:	465b      	mov	r3, fp
 80111ea:	4622      	mov	r2, r4
 80111ec:	4629      	mov	r1, r5
 80111ee:	4630      	mov	r0, r6
 80111f0:	f7ff ffa2 	bl	8011138 <__sfputs_r>
 80111f4:	3001      	adds	r0, #1
 80111f6:	f000 80a9 	beq.w	801134c <_vfiprintf_r+0x1f0>
 80111fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111fc:	445a      	add	r2, fp
 80111fe:	9209      	str	r2, [sp, #36]	; 0x24
 8011200:	f89a 3000 	ldrb.w	r3, [sl]
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 80a1 	beq.w	801134c <_vfiprintf_r+0x1f0>
 801120a:	2300      	movs	r3, #0
 801120c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011214:	f10a 0a01 	add.w	sl, sl, #1
 8011218:	9304      	str	r3, [sp, #16]
 801121a:	9307      	str	r3, [sp, #28]
 801121c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011220:	931a      	str	r3, [sp, #104]	; 0x68
 8011222:	4654      	mov	r4, sl
 8011224:	2205      	movs	r2, #5
 8011226:	f814 1b01 	ldrb.w	r1, [r4], #1
 801122a:	4854      	ldr	r0, [pc, #336]	; (801137c <_vfiprintf_r+0x220>)
 801122c:	f7ee ffd8 	bl	80001e0 <memchr>
 8011230:	9a04      	ldr	r2, [sp, #16]
 8011232:	b9d8      	cbnz	r0, 801126c <_vfiprintf_r+0x110>
 8011234:	06d1      	lsls	r1, r2, #27
 8011236:	bf44      	itt	mi
 8011238:	2320      	movmi	r3, #32
 801123a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801123e:	0713      	lsls	r3, r2, #28
 8011240:	bf44      	itt	mi
 8011242:	232b      	movmi	r3, #43	; 0x2b
 8011244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011248:	f89a 3000 	ldrb.w	r3, [sl]
 801124c:	2b2a      	cmp	r3, #42	; 0x2a
 801124e:	d015      	beq.n	801127c <_vfiprintf_r+0x120>
 8011250:	9a07      	ldr	r2, [sp, #28]
 8011252:	4654      	mov	r4, sl
 8011254:	2000      	movs	r0, #0
 8011256:	f04f 0c0a 	mov.w	ip, #10
 801125a:	4621      	mov	r1, r4
 801125c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011260:	3b30      	subs	r3, #48	; 0x30
 8011262:	2b09      	cmp	r3, #9
 8011264:	d94d      	bls.n	8011302 <_vfiprintf_r+0x1a6>
 8011266:	b1b0      	cbz	r0, 8011296 <_vfiprintf_r+0x13a>
 8011268:	9207      	str	r2, [sp, #28]
 801126a:	e014      	b.n	8011296 <_vfiprintf_r+0x13a>
 801126c:	eba0 0308 	sub.w	r3, r0, r8
 8011270:	fa09 f303 	lsl.w	r3, r9, r3
 8011274:	4313      	orrs	r3, r2
 8011276:	9304      	str	r3, [sp, #16]
 8011278:	46a2      	mov	sl, r4
 801127a:	e7d2      	b.n	8011222 <_vfiprintf_r+0xc6>
 801127c:	9b03      	ldr	r3, [sp, #12]
 801127e:	1d19      	adds	r1, r3, #4
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	9103      	str	r1, [sp, #12]
 8011284:	2b00      	cmp	r3, #0
 8011286:	bfbb      	ittet	lt
 8011288:	425b      	neglt	r3, r3
 801128a:	f042 0202 	orrlt.w	r2, r2, #2
 801128e:	9307      	strge	r3, [sp, #28]
 8011290:	9307      	strlt	r3, [sp, #28]
 8011292:	bfb8      	it	lt
 8011294:	9204      	strlt	r2, [sp, #16]
 8011296:	7823      	ldrb	r3, [r4, #0]
 8011298:	2b2e      	cmp	r3, #46	; 0x2e
 801129a:	d10c      	bne.n	80112b6 <_vfiprintf_r+0x15a>
 801129c:	7863      	ldrb	r3, [r4, #1]
 801129e:	2b2a      	cmp	r3, #42	; 0x2a
 80112a0:	d134      	bne.n	801130c <_vfiprintf_r+0x1b0>
 80112a2:	9b03      	ldr	r3, [sp, #12]
 80112a4:	1d1a      	adds	r2, r3, #4
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	9203      	str	r2, [sp, #12]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	bfb8      	it	lt
 80112ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80112b2:	3402      	adds	r4, #2
 80112b4:	9305      	str	r3, [sp, #20]
 80112b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801138c <_vfiprintf_r+0x230>
 80112ba:	7821      	ldrb	r1, [r4, #0]
 80112bc:	2203      	movs	r2, #3
 80112be:	4650      	mov	r0, sl
 80112c0:	f7ee ff8e 	bl	80001e0 <memchr>
 80112c4:	b138      	cbz	r0, 80112d6 <_vfiprintf_r+0x17a>
 80112c6:	9b04      	ldr	r3, [sp, #16]
 80112c8:	eba0 000a 	sub.w	r0, r0, sl
 80112cc:	2240      	movs	r2, #64	; 0x40
 80112ce:	4082      	lsls	r2, r0
 80112d0:	4313      	orrs	r3, r2
 80112d2:	3401      	adds	r4, #1
 80112d4:	9304      	str	r3, [sp, #16]
 80112d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112da:	4829      	ldr	r0, [pc, #164]	; (8011380 <_vfiprintf_r+0x224>)
 80112dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112e0:	2206      	movs	r2, #6
 80112e2:	f7ee ff7d 	bl	80001e0 <memchr>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	d03f      	beq.n	801136a <_vfiprintf_r+0x20e>
 80112ea:	4b26      	ldr	r3, [pc, #152]	; (8011384 <_vfiprintf_r+0x228>)
 80112ec:	bb1b      	cbnz	r3, 8011336 <_vfiprintf_r+0x1da>
 80112ee:	9b03      	ldr	r3, [sp, #12]
 80112f0:	3307      	adds	r3, #7
 80112f2:	f023 0307 	bic.w	r3, r3, #7
 80112f6:	3308      	adds	r3, #8
 80112f8:	9303      	str	r3, [sp, #12]
 80112fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112fc:	443b      	add	r3, r7
 80112fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011300:	e768      	b.n	80111d4 <_vfiprintf_r+0x78>
 8011302:	fb0c 3202 	mla	r2, ip, r2, r3
 8011306:	460c      	mov	r4, r1
 8011308:	2001      	movs	r0, #1
 801130a:	e7a6      	b.n	801125a <_vfiprintf_r+0xfe>
 801130c:	2300      	movs	r3, #0
 801130e:	3401      	adds	r4, #1
 8011310:	9305      	str	r3, [sp, #20]
 8011312:	4619      	mov	r1, r3
 8011314:	f04f 0c0a 	mov.w	ip, #10
 8011318:	4620      	mov	r0, r4
 801131a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801131e:	3a30      	subs	r2, #48	; 0x30
 8011320:	2a09      	cmp	r2, #9
 8011322:	d903      	bls.n	801132c <_vfiprintf_r+0x1d0>
 8011324:	2b00      	cmp	r3, #0
 8011326:	d0c6      	beq.n	80112b6 <_vfiprintf_r+0x15a>
 8011328:	9105      	str	r1, [sp, #20]
 801132a:	e7c4      	b.n	80112b6 <_vfiprintf_r+0x15a>
 801132c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011330:	4604      	mov	r4, r0
 8011332:	2301      	movs	r3, #1
 8011334:	e7f0      	b.n	8011318 <_vfiprintf_r+0x1bc>
 8011336:	ab03      	add	r3, sp, #12
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	462a      	mov	r2, r5
 801133c:	4b12      	ldr	r3, [pc, #72]	; (8011388 <_vfiprintf_r+0x22c>)
 801133e:	a904      	add	r1, sp, #16
 8011340:	4630      	mov	r0, r6
 8011342:	f7fd fc59 	bl	800ebf8 <_printf_float>
 8011346:	4607      	mov	r7, r0
 8011348:	1c78      	adds	r0, r7, #1
 801134a:	d1d6      	bne.n	80112fa <_vfiprintf_r+0x19e>
 801134c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801134e:	07d9      	lsls	r1, r3, #31
 8011350:	d405      	bmi.n	801135e <_vfiprintf_r+0x202>
 8011352:	89ab      	ldrh	r3, [r5, #12]
 8011354:	059a      	lsls	r2, r3, #22
 8011356:	d402      	bmi.n	801135e <_vfiprintf_r+0x202>
 8011358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801135a:	f7fe f9c2 	bl	800f6e2 <__retarget_lock_release_recursive>
 801135e:	89ab      	ldrh	r3, [r5, #12]
 8011360:	065b      	lsls	r3, r3, #25
 8011362:	f53f af1d 	bmi.w	80111a0 <_vfiprintf_r+0x44>
 8011366:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011368:	e71c      	b.n	80111a4 <_vfiprintf_r+0x48>
 801136a:	ab03      	add	r3, sp, #12
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	462a      	mov	r2, r5
 8011370:	4b05      	ldr	r3, [pc, #20]	; (8011388 <_vfiprintf_r+0x22c>)
 8011372:	a904      	add	r1, sp, #16
 8011374:	4630      	mov	r0, r6
 8011376:	f7fd fee3 	bl	800f140 <_printf_i>
 801137a:	e7e4      	b.n	8011346 <_vfiprintf_r+0x1ea>
 801137c:	08011aac 	.word	0x08011aac
 8011380:	08011ab6 	.word	0x08011ab6
 8011384:	0800ebf9 	.word	0x0800ebf9
 8011388:	08011139 	.word	0x08011139
 801138c:	08011ab2 	.word	0x08011ab2

08011390 <__swbuf_r>:
 8011390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011392:	460e      	mov	r6, r1
 8011394:	4614      	mov	r4, r2
 8011396:	4605      	mov	r5, r0
 8011398:	b118      	cbz	r0, 80113a2 <__swbuf_r+0x12>
 801139a:	6a03      	ldr	r3, [r0, #32]
 801139c:	b90b      	cbnz	r3, 80113a2 <__swbuf_r+0x12>
 801139e:	f7fe f86b 	bl	800f478 <__sinit>
 80113a2:	69a3      	ldr	r3, [r4, #24]
 80113a4:	60a3      	str	r3, [r4, #8]
 80113a6:	89a3      	ldrh	r3, [r4, #12]
 80113a8:	071a      	lsls	r2, r3, #28
 80113aa:	d525      	bpl.n	80113f8 <__swbuf_r+0x68>
 80113ac:	6923      	ldr	r3, [r4, #16]
 80113ae:	b31b      	cbz	r3, 80113f8 <__swbuf_r+0x68>
 80113b0:	6823      	ldr	r3, [r4, #0]
 80113b2:	6922      	ldr	r2, [r4, #16]
 80113b4:	1a98      	subs	r0, r3, r2
 80113b6:	6963      	ldr	r3, [r4, #20]
 80113b8:	b2f6      	uxtb	r6, r6
 80113ba:	4283      	cmp	r3, r0
 80113bc:	4637      	mov	r7, r6
 80113be:	dc04      	bgt.n	80113ca <__swbuf_r+0x3a>
 80113c0:	4621      	mov	r1, r4
 80113c2:	4628      	mov	r0, r5
 80113c4:	f7ff fdbc 	bl	8010f40 <_fflush_r>
 80113c8:	b9e0      	cbnz	r0, 8011404 <__swbuf_r+0x74>
 80113ca:	68a3      	ldr	r3, [r4, #8]
 80113cc:	3b01      	subs	r3, #1
 80113ce:	60a3      	str	r3, [r4, #8]
 80113d0:	6823      	ldr	r3, [r4, #0]
 80113d2:	1c5a      	adds	r2, r3, #1
 80113d4:	6022      	str	r2, [r4, #0]
 80113d6:	701e      	strb	r6, [r3, #0]
 80113d8:	6962      	ldr	r2, [r4, #20]
 80113da:	1c43      	adds	r3, r0, #1
 80113dc:	429a      	cmp	r2, r3
 80113de:	d004      	beq.n	80113ea <__swbuf_r+0x5a>
 80113e0:	89a3      	ldrh	r3, [r4, #12]
 80113e2:	07db      	lsls	r3, r3, #31
 80113e4:	d506      	bpl.n	80113f4 <__swbuf_r+0x64>
 80113e6:	2e0a      	cmp	r6, #10
 80113e8:	d104      	bne.n	80113f4 <__swbuf_r+0x64>
 80113ea:	4621      	mov	r1, r4
 80113ec:	4628      	mov	r0, r5
 80113ee:	f7ff fda7 	bl	8010f40 <_fflush_r>
 80113f2:	b938      	cbnz	r0, 8011404 <__swbuf_r+0x74>
 80113f4:	4638      	mov	r0, r7
 80113f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113f8:	4621      	mov	r1, r4
 80113fa:	4628      	mov	r0, r5
 80113fc:	f000 f806 	bl	801140c <__swsetup_r>
 8011400:	2800      	cmp	r0, #0
 8011402:	d0d5      	beq.n	80113b0 <__swbuf_r+0x20>
 8011404:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011408:	e7f4      	b.n	80113f4 <__swbuf_r+0x64>
	...

0801140c <__swsetup_r>:
 801140c:	b538      	push	{r3, r4, r5, lr}
 801140e:	4b2a      	ldr	r3, [pc, #168]	; (80114b8 <__swsetup_r+0xac>)
 8011410:	4605      	mov	r5, r0
 8011412:	6818      	ldr	r0, [r3, #0]
 8011414:	460c      	mov	r4, r1
 8011416:	b118      	cbz	r0, 8011420 <__swsetup_r+0x14>
 8011418:	6a03      	ldr	r3, [r0, #32]
 801141a:	b90b      	cbnz	r3, 8011420 <__swsetup_r+0x14>
 801141c:	f7fe f82c 	bl	800f478 <__sinit>
 8011420:	89a3      	ldrh	r3, [r4, #12]
 8011422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011426:	0718      	lsls	r0, r3, #28
 8011428:	d422      	bmi.n	8011470 <__swsetup_r+0x64>
 801142a:	06d9      	lsls	r1, r3, #27
 801142c:	d407      	bmi.n	801143e <__swsetup_r+0x32>
 801142e:	2309      	movs	r3, #9
 8011430:	602b      	str	r3, [r5, #0]
 8011432:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011436:	81a3      	strh	r3, [r4, #12]
 8011438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801143c:	e034      	b.n	80114a8 <__swsetup_r+0x9c>
 801143e:	0758      	lsls	r0, r3, #29
 8011440:	d512      	bpl.n	8011468 <__swsetup_r+0x5c>
 8011442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011444:	b141      	cbz	r1, 8011458 <__swsetup_r+0x4c>
 8011446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801144a:	4299      	cmp	r1, r3
 801144c:	d002      	beq.n	8011454 <__swsetup_r+0x48>
 801144e:	4628      	mov	r0, r5
 8011450:	f7fe ffd0 	bl	80103f4 <_free_r>
 8011454:	2300      	movs	r3, #0
 8011456:	6363      	str	r3, [r4, #52]	; 0x34
 8011458:	89a3      	ldrh	r3, [r4, #12]
 801145a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801145e:	81a3      	strh	r3, [r4, #12]
 8011460:	2300      	movs	r3, #0
 8011462:	6063      	str	r3, [r4, #4]
 8011464:	6923      	ldr	r3, [r4, #16]
 8011466:	6023      	str	r3, [r4, #0]
 8011468:	89a3      	ldrh	r3, [r4, #12]
 801146a:	f043 0308 	orr.w	r3, r3, #8
 801146e:	81a3      	strh	r3, [r4, #12]
 8011470:	6923      	ldr	r3, [r4, #16]
 8011472:	b94b      	cbnz	r3, 8011488 <__swsetup_r+0x7c>
 8011474:	89a3      	ldrh	r3, [r4, #12]
 8011476:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801147a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801147e:	d003      	beq.n	8011488 <__swsetup_r+0x7c>
 8011480:	4621      	mov	r1, r4
 8011482:	4628      	mov	r0, r5
 8011484:	f000 f884 	bl	8011590 <__smakebuf_r>
 8011488:	89a0      	ldrh	r0, [r4, #12]
 801148a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801148e:	f010 0301 	ands.w	r3, r0, #1
 8011492:	d00a      	beq.n	80114aa <__swsetup_r+0x9e>
 8011494:	2300      	movs	r3, #0
 8011496:	60a3      	str	r3, [r4, #8]
 8011498:	6963      	ldr	r3, [r4, #20]
 801149a:	425b      	negs	r3, r3
 801149c:	61a3      	str	r3, [r4, #24]
 801149e:	6923      	ldr	r3, [r4, #16]
 80114a0:	b943      	cbnz	r3, 80114b4 <__swsetup_r+0xa8>
 80114a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80114a6:	d1c4      	bne.n	8011432 <__swsetup_r+0x26>
 80114a8:	bd38      	pop	{r3, r4, r5, pc}
 80114aa:	0781      	lsls	r1, r0, #30
 80114ac:	bf58      	it	pl
 80114ae:	6963      	ldrpl	r3, [r4, #20]
 80114b0:	60a3      	str	r3, [r4, #8]
 80114b2:	e7f4      	b.n	801149e <__swsetup_r+0x92>
 80114b4:	2000      	movs	r0, #0
 80114b6:	e7f7      	b.n	80114a8 <__swsetup_r+0x9c>
 80114b8:	20000168 	.word	0x20000168

080114bc <_raise_r>:
 80114bc:	291f      	cmp	r1, #31
 80114be:	b538      	push	{r3, r4, r5, lr}
 80114c0:	4604      	mov	r4, r0
 80114c2:	460d      	mov	r5, r1
 80114c4:	d904      	bls.n	80114d0 <_raise_r+0x14>
 80114c6:	2316      	movs	r3, #22
 80114c8:	6003      	str	r3, [r0, #0]
 80114ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114ce:	bd38      	pop	{r3, r4, r5, pc}
 80114d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80114d2:	b112      	cbz	r2, 80114da <_raise_r+0x1e>
 80114d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114d8:	b94b      	cbnz	r3, 80114ee <_raise_r+0x32>
 80114da:	4620      	mov	r0, r4
 80114dc:	f000 f830 	bl	8011540 <_getpid_r>
 80114e0:	462a      	mov	r2, r5
 80114e2:	4601      	mov	r1, r0
 80114e4:	4620      	mov	r0, r4
 80114e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114ea:	f000 b817 	b.w	801151c <_kill_r>
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d00a      	beq.n	8011508 <_raise_r+0x4c>
 80114f2:	1c59      	adds	r1, r3, #1
 80114f4:	d103      	bne.n	80114fe <_raise_r+0x42>
 80114f6:	2316      	movs	r3, #22
 80114f8:	6003      	str	r3, [r0, #0]
 80114fa:	2001      	movs	r0, #1
 80114fc:	e7e7      	b.n	80114ce <_raise_r+0x12>
 80114fe:	2400      	movs	r4, #0
 8011500:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011504:	4628      	mov	r0, r5
 8011506:	4798      	blx	r3
 8011508:	2000      	movs	r0, #0
 801150a:	e7e0      	b.n	80114ce <_raise_r+0x12>

0801150c <raise>:
 801150c:	4b02      	ldr	r3, [pc, #8]	; (8011518 <raise+0xc>)
 801150e:	4601      	mov	r1, r0
 8011510:	6818      	ldr	r0, [r3, #0]
 8011512:	f7ff bfd3 	b.w	80114bc <_raise_r>
 8011516:	bf00      	nop
 8011518:	20000168 	.word	0x20000168

0801151c <_kill_r>:
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	4d07      	ldr	r5, [pc, #28]	; (801153c <_kill_r+0x20>)
 8011520:	2300      	movs	r3, #0
 8011522:	4604      	mov	r4, r0
 8011524:	4608      	mov	r0, r1
 8011526:	4611      	mov	r1, r2
 8011528:	602b      	str	r3, [r5, #0]
 801152a:	f7f0 fc4d 	bl	8001dc8 <_kill>
 801152e:	1c43      	adds	r3, r0, #1
 8011530:	d102      	bne.n	8011538 <_kill_r+0x1c>
 8011532:	682b      	ldr	r3, [r5, #0]
 8011534:	b103      	cbz	r3, 8011538 <_kill_r+0x1c>
 8011536:	6023      	str	r3, [r4, #0]
 8011538:	bd38      	pop	{r3, r4, r5, pc}
 801153a:	bf00      	nop
 801153c:	20002348 	.word	0x20002348

08011540 <_getpid_r>:
 8011540:	f7f0 bc3a 	b.w	8001db8 <_getpid>

08011544 <__swhatbuf_r>:
 8011544:	b570      	push	{r4, r5, r6, lr}
 8011546:	460c      	mov	r4, r1
 8011548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801154c:	2900      	cmp	r1, #0
 801154e:	b096      	sub	sp, #88	; 0x58
 8011550:	4615      	mov	r5, r2
 8011552:	461e      	mov	r6, r3
 8011554:	da0d      	bge.n	8011572 <__swhatbuf_r+0x2e>
 8011556:	89a3      	ldrh	r3, [r4, #12]
 8011558:	f013 0f80 	tst.w	r3, #128	; 0x80
 801155c:	f04f 0100 	mov.w	r1, #0
 8011560:	bf0c      	ite	eq
 8011562:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011566:	2340      	movne	r3, #64	; 0x40
 8011568:	2000      	movs	r0, #0
 801156a:	6031      	str	r1, [r6, #0]
 801156c:	602b      	str	r3, [r5, #0]
 801156e:	b016      	add	sp, #88	; 0x58
 8011570:	bd70      	pop	{r4, r5, r6, pc}
 8011572:	466a      	mov	r2, sp
 8011574:	f000 f848 	bl	8011608 <_fstat_r>
 8011578:	2800      	cmp	r0, #0
 801157a:	dbec      	blt.n	8011556 <__swhatbuf_r+0x12>
 801157c:	9901      	ldr	r1, [sp, #4]
 801157e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011582:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011586:	4259      	negs	r1, r3
 8011588:	4159      	adcs	r1, r3
 801158a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801158e:	e7eb      	b.n	8011568 <__swhatbuf_r+0x24>

08011590 <__smakebuf_r>:
 8011590:	898b      	ldrh	r3, [r1, #12]
 8011592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011594:	079d      	lsls	r5, r3, #30
 8011596:	4606      	mov	r6, r0
 8011598:	460c      	mov	r4, r1
 801159a:	d507      	bpl.n	80115ac <__smakebuf_r+0x1c>
 801159c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115a0:	6023      	str	r3, [r4, #0]
 80115a2:	6123      	str	r3, [r4, #16]
 80115a4:	2301      	movs	r3, #1
 80115a6:	6163      	str	r3, [r4, #20]
 80115a8:	b002      	add	sp, #8
 80115aa:	bd70      	pop	{r4, r5, r6, pc}
 80115ac:	ab01      	add	r3, sp, #4
 80115ae:	466a      	mov	r2, sp
 80115b0:	f7ff ffc8 	bl	8011544 <__swhatbuf_r>
 80115b4:	9900      	ldr	r1, [sp, #0]
 80115b6:	4605      	mov	r5, r0
 80115b8:	4630      	mov	r0, r6
 80115ba:	f7fd f9f1 	bl	800e9a0 <_malloc_r>
 80115be:	b948      	cbnz	r0, 80115d4 <__smakebuf_r+0x44>
 80115c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115c4:	059a      	lsls	r2, r3, #22
 80115c6:	d4ef      	bmi.n	80115a8 <__smakebuf_r+0x18>
 80115c8:	f023 0303 	bic.w	r3, r3, #3
 80115cc:	f043 0302 	orr.w	r3, r3, #2
 80115d0:	81a3      	strh	r3, [r4, #12]
 80115d2:	e7e3      	b.n	801159c <__smakebuf_r+0xc>
 80115d4:	89a3      	ldrh	r3, [r4, #12]
 80115d6:	6020      	str	r0, [r4, #0]
 80115d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115dc:	81a3      	strh	r3, [r4, #12]
 80115de:	9b00      	ldr	r3, [sp, #0]
 80115e0:	6163      	str	r3, [r4, #20]
 80115e2:	9b01      	ldr	r3, [sp, #4]
 80115e4:	6120      	str	r0, [r4, #16]
 80115e6:	b15b      	cbz	r3, 8011600 <__smakebuf_r+0x70>
 80115e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ec:	4630      	mov	r0, r6
 80115ee:	f000 f81d 	bl	801162c <_isatty_r>
 80115f2:	b128      	cbz	r0, 8011600 <__smakebuf_r+0x70>
 80115f4:	89a3      	ldrh	r3, [r4, #12]
 80115f6:	f023 0303 	bic.w	r3, r3, #3
 80115fa:	f043 0301 	orr.w	r3, r3, #1
 80115fe:	81a3      	strh	r3, [r4, #12]
 8011600:	89a3      	ldrh	r3, [r4, #12]
 8011602:	431d      	orrs	r5, r3
 8011604:	81a5      	strh	r5, [r4, #12]
 8011606:	e7cf      	b.n	80115a8 <__smakebuf_r+0x18>

08011608 <_fstat_r>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4d07      	ldr	r5, [pc, #28]	; (8011628 <_fstat_r+0x20>)
 801160c:	2300      	movs	r3, #0
 801160e:	4604      	mov	r4, r0
 8011610:	4608      	mov	r0, r1
 8011612:	4611      	mov	r1, r2
 8011614:	602b      	str	r3, [r5, #0]
 8011616:	f7f0 fc36 	bl	8001e86 <_fstat>
 801161a:	1c43      	adds	r3, r0, #1
 801161c:	d102      	bne.n	8011624 <_fstat_r+0x1c>
 801161e:	682b      	ldr	r3, [r5, #0]
 8011620:	b103      	cbz	r3, 8011624 <_fstat_r+0x1c>
 8011622:	6023      	str	r3, [r4, #0]
 8011624:	bd38      	pop	{r3, r4, r5, pc}
 8011626:	bf00      	nop
 8011628:	20002348 	.word	0x20002348

0801162c <_isatty_r>:
 801162c:	b538      	push	{r3, r4, r5, lr}
 801162e:	4d06      	ldr	r5, [pc, #24]	; (8011648 <_isatty_r+0x1c>)
 8011630:	2300      	movs	r3, #0
 8011632:	4604      	mov	r4, r0
 8011634:	4608      	mov	r0, r1
 8011636:	602b      	str	r3, [r5, #0]
 8011638:	f7f0 fc35 	bl	8001ea6 <_isatty>
 801163c:	1c43      	adds	r3, r0, #1
 801163e:	d102      	bne.n	8011646 <_isatty_r+0x1a>
 8011640:	682b      	ldr	r3, [r5, #0]
 8011642:	b103      	cbz	r3, 8011646 <_isatty_r+0x1a>
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	20002348 	.word	0x20002348

0801164c <_init>:
 801164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164e:	bf00      	nop
 8011650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011652:	bc08      	pop	{r3}
 8011654:	469e      	mov	lr, r3
 8011656:	4770      	bx	lr

08011658 <_fini>:
 8011658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165a:	bf00      	nop
 801165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801165e:	bc08      	pop	{r3}
 8011660:	469e      	mov	lr, r3
 8011662:	4770      	bx	lr
