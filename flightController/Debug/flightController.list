
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001235c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08012500  08012500  00022500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b70  08012b70  000302e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012b70  08012b70  00022b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b78  08012b78  000302e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b78  08012b78  00022b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b7c  08012b7c  00022b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08012b80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020fc  200002e8  08012e68  000302e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  08012e68  000323e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026771  00000000  00000000  0003035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060c6  00000000  00000000  00056acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020c0  00000000  00000000  0005cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001937  00000000  00000000  0005ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002107d  00000000  00000000  0006058f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c917  00000000  00000000  0008160c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad8a3  00000000  00000000  000adf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a6c  00000000  00000000  0015b7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00165234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080124e4 	.word	0x080124e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	080124e4 	.word	0x080124e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 2UL), &FlightController_StartUp_Handle);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	4927      	ldr	r1, [pc, #156]	; (8001048 <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000faa:	4828      	ldr	r0, [pc, #160]	; (800104c <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000fac:	f00b fee5 	bl	800cd7a <xTaskCreate>
 8000fb0:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00a      	beq.n	8000fce <FreeRTOS_CreateStartUpTasks+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbc:	f383 8811 	msr	BASEPRI, r3
 8000fc0:	f3bf 8f6f 	isb	sy
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fca:	bf00      	nop
 8000fcc:	e7fe      	b.n	8000fcc <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d104      	bne.n	8000fe0 <FreeRTOS_CreateStartUpTasks+0x4c>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00b fffe 	bl	800cfdc <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_OnOffButton_Handle);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fee:	4919      	ldr	r1, [pc, #100]	; (8001054 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000ff2:	f00b fec2 	bl	800cd7a <xTaskCreate>
 8000ff6:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00a      	beq.n	8001014 <FreeRTOS_CreateStartUpTasks+0x80>
	__asm volatile
 8000ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	607b      	str	r3, [r7, #4]
}
 8001010:	bf00      	nop
 8001012:	e7fe      	b.n	8001012 <FreeRTOS_CreateStartUpTasks+0x7e>

    if (FlightController_OnOffButton_Handle == NULL) {
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <FreeRTOS_CreateStartUpTasks+0x92>
        vTaskDelete(FlightController_OnOffButton_Handle);
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f00b ffdb 	bl	800cfdc <vTaskDelete>
    }

    /* Timer: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <FreeRTOS_CreateStartUpTasks+0xc8>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2201      	movs	r2, #1
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001032:	f00c fe35 	bl	800dca0 <xTimerCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000304 	.word	0x20000304
 8001048:	08012500 	.word	0x08012500
 800104c:	08001319 	.word	0x08001319
 8001050:	20000318 	.word	0x20000318
 8001054:	0801251c 	.word	0x0801251c
 8001058:	08001611 	.word	0x08001611
 800105c:	080017a9 	.word	0x080017a9
 8001060:	0801253c 	.word	0x0801253c
 8001064:	2000032c 	.word	0x2000032c

08001068 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_ControlSystem_Handle);
 800106e:	4b8e      	ldr	r3, [pc, #568]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2303      	movs	r3, #3
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	498b      	ldr	r1, [pc, #556]	; (80012ac <FreeRTOS_CreateTasks+0x244>)
 800107e:	488c      	ldr	r0, [pc, #560]	; (80012b0 <FreeRTOS_CreateTasks+0x248>)
 8001080:	f00b fe7b 	bl	800cd7a <xTaskCreate>
 8001084:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00a      	beq.n	80010a2 <FreeRTOS_CreateTasks+0x3a>
	__asm volatile
 800108c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001090:	f383 8811 	msr	BASEPRI, r3
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	623b      	str	r3, [r7, #32]
}
 800109e:	bf00      	nop
 80010a0:	e7fe      	b.n	80010a0 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 80010a2:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <FreeRTOS_CreateTasks+0x4c>
        vTaskDelete(FlightController_ControlSystem_Handle);
 80010aa:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00b ff94 	bl	800cfdc <vTaskDelete>
    }

    /* Task 2: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_FSA8S_Handle);
 80010b4:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2303      	movs	r3, #3
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c2:	497d      	ldr	r1, [pc, #500]	; (80012b8 <FreeRTOS_CreateTasks+0x250>)
 80010c4:	487d      	ldr	r0, [pc, #500]	; (80012bc <FreeRTOS_CreateTasks+0x254>)
 80010c6:	f00b fe58 	bl	800cd7a <xTaskCreate>
 80010ca:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d00a      	beq.n	80010e8 <FreeRTOS_CreateTasks+0x80>
	__asm volatile
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	61fb      	str	r3, [r7, #28]
}
 80010e4:	bf00      	nop
 80010e6:	e7fe      	b.n	80010e6 <FreeRTOS_CreateTasks+0x7e>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 80010f0:	4b70      	ldr	r3, [pc, #448]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00b ff71 	bl	800cfdc <vTaskDelete>
    }

    /* Task 3: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_GY87_Handle);
 80010fa:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2303      	movs	r3, #3
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001108:	496e      	ldr	r1, [pc, #440]	; (80012c4 <FreeRTOS_CreateTasks+0x25c>)
 800110a:	486f      	ldr	r0, [pc, #444]	; (80012c8 <FreeRTOS_CreateTasks+0x260>)
 800110c:	f00b fe35 	bl	800cd7a <xTaskCreate>
 8001110:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00a      	beq.n	800112e <FreeRTOS_CreateTasks+0xc6>
	__asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	61bb      	str	r3, [r7, #24]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <FreeRTOS_CreateTasks+0xc4>

    if (FlightController_Read_GY87_Handle == NULL) {
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_GY87_Handle);
 8001136:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f00b ff4e 	bl	800cfdc <vTaskDelete>
    }

    /* Task 4: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Write_ESCs_Handle);
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2303      	movs	r3, #3
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	4960      	ldr	r1, [pc, #384]	; (80012d0 <FreeRTOS_CreateTasks+0x268>)
 8001150:	4860      	ldr	r0, [pc, #384]	; (80012d4 <FreeRTOS_CreateTasks+0x26c>)
 8001152:	f00b fe12 	bl	800cd7a <xTaskCreate>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b01      	cmp	r3, #1
 800115c:	d00a      	beq.n	8001174 <FreeRTOS_CreateTasks+0x10c>
	__asm volatile
 800115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	f3bf 8f6f 	isb	sy
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	617b      	str	r3, [r7, #20]
}
 8001170:	bf00      	nop
 8001172:	e7fe      	b.n	8001172 <FreeRTOS_CreateTasks+0x10a>

    if (FlightController_Write_ESCs_Handle == NULL) {
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00b ff2b 	bl	800cfdc <vTaskDelete>
    }

    /* Task 5: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryLevel_Handle);
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2301      	movs	r3, #1
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	4951      	ldr	r1, [pc, #324]	; (80012dc <FreeRTOS_CreateTasks+0x274>)
 8001196:	4852      	ldr	r0, [pc, #328]	; (80012e0 <FreeRTOS_CreateTasks+0x278>)
 8001198:	f00b fdef 	bl	800cd7a <xTaskCreate>
 800119c:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00a      	beq.n	80011ba <FreeRTOS_CreateTasks+0x152>
	__asm volatile
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	613b      	str	r3, [r7, #16]
}
 80011b6:	bf00      	nop
 80011b8:	e7fe      	b.n	80011b8 <FreeRTOS_CreateTasks+0x150>

    if (FlightController_BatteryLevel_Handle == NULL) {
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 80011c2:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00b ff08 	bl	800cfdc <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryAlarm_Handle);
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	4943      	ldr	r1, [pc, #268]	; (80012e8 <FreeRTOS_CreateTasks+0x280>)
 80011dc:	4843      	ldr	r0, [pc, #268]	; (80012ec <FreeRTOS_CreateTasks+0x284>)
 80011de:	f00b fdcc 	bl	800cd7a <xTaskCreate>
 80011e2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d00a      	beq.n	8001200 <FreeRTOS_CreateTasks+0x198>
	__asm volatile
 80011ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ee:	f383 8811 	msr	BASEPRI, r3
 80011f2:	f3bf 8f6f 	isb	sy
 80011f6:	f3bf 8f4f 	dsb	sy
 80011fa:	60fb      	str	r3, [r7, #12]
}
 80011fc:	bf00      	nop
 80011fe:	e7fe      	b.n	80011fe <FreeRTOS_CreateTasks+0x196>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <FreeRTOS_CreateTasks+0x1aa>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f00b fee5 	bl	800cfdc <vTaskDelete>
    }

    /* Task 7: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_HeartbeatLight_Handle);
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2303      	movs	r3, #3
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	4934      	ldr	r1, [pc, #208]	; (80012f4 <FreeRTOS_CreateTasks+0x28c>)
 8001222:	4835      	ldr	r0, [pc, #212]	; (80012f8 <FreeRTOS_CreateTasks+0x290>)
 8001224:	f00b fda9 	bl	800cd7a <xTaskCreate>
 8001228:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00a      	beq.n	8001246 <FreeRTOS_CreateTasks+0x1de>
	__asm volatile
 8001230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy
 8001240:	60bb      	str	r3, [r7, #8]
}
 8001242:	bf00      	nop
 8001244:	e7fe      	b.n	8001244 <FreeRTOS_CreateTasks+0x1dc>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <FreeRTOS_CreateTasks+0x1f0>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f00b fec2 	bl	800cfdc <vTaskDelete>
    }

    /* Task 8: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_FlightLights_Handle);
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2301      	movs	r3, #1
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001266:	4926      	ldr	r1, [pc, #152]	; (8001300 <FreeRTOS_CreateTasks+0x298>)
 8001268:	4826      	ldr	r0, [pc, #152]	; (8001304 <FreeRTOS_CreateTasks+0x29c>)
 800126a:	f00b fd86 	bl	800cd7a <xTaskCreate>
 800126e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	2b01      	cmp	r3, #1
 8001274:	d00a      	beq.n	800128c <FreeRTOS_CreateTasks+0x224>
	__asm volatile
 8001276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	607b      	str	r3, [r7, #4]
}
 8001288:	bf00      	nop
 800128a:	e7fe      	b.n	800128a <FreeRTOS_CreateTasks+0x222>

    if (FlightController_FlightLights_Handle == NULL) {
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d104      	bne.n	800129e <FreeRTOS_CreateTasks+0x236>
        vTaskDelete(FlightController_FlightLights_Handle);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f00b fe9f 	bl	800cfdc <vTaskDelete>
    }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000308 	.word	0x20000308
 80012ac:	0801254c 	.word	0x0801254c
 80012b0:	0800139d 	.word	0x0800139d
 80012b4:	2000030c 	.word	0x2000030c
 80012b8:	0801256c 	.word	0x0801256c
 80012bc:	08001405 	.word	0x08001405
 80012c0:	20000310 	.word	0x20000310
 80012c4:	08012588 	.word	0x08012588
 80012c8:	08001465 	.word	0x08001465
 80012cc:	20000314 	.word	0x20000314
 80012d0:	080125a4 	.word	0x080125a4
 80012d4:	0800156d 	.word	0x0800156d
 80012d8:	2000031c 	.word	0x2000031c
 80012dc:	080125c0 	.word	0x080125c0
 80012e0:	08001671 	.word	0x08001671
 80012e4:	20000320 	.word	0x20000320
 80012e8:	080125e0 	.word	0x080125e0
 80012ec:	08001745 	.word	0x08001745
 80012f0:	20000324 	.word	0x20000324
 80012f4:	08012600 	.word	0x08012600
 80012f8:	08001759 	.word	0x08001759
 80012fc:	20000328 	.word	0x20000328
 8001300:	08012620 	.word	0x08012620
 8001304:	08001795 	.word	0x08001795

08001308 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001320:	2314      	movs	r3, #20
 8001322:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED on */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <FlightController_StartUp+0x60>)
 800132c:	f003 fa56 	bl	80047dc <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <FlightController_StartUp+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01a      	beq.n	800136e <FlightController_StartUp+0x56>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001338:	f7ff fe96 	bl	8001068 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 800133c:	f7ff ffe4 	bl	8001308 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <FlightController_StartUp+0x68>)
 8001342:	f001 faf5 	bl	8002930 <FSA8S_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <FlightController_StartUp+0x6c>)
 800134a:	6013      	str	r3, [r2, #0]
            hgy87 = GY87_Init(&hi2c1);
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <FlightController_StartUp+0x70>)
 800134e:	f001 fecf 	bl	80030f0 <GY87_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <FlightController_StartUp+0x74>)
 8001356:	6013      	str	r3, [r2, #0]
            hesc = ESC_Init(&htim3);
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <FlightController_StartUp+0x78>)
 800135a:	f001 f965 	bl	8002628 <ESC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <FlightController_StartUp+0x7c>)
 8001362:	6013      	str	r3, [r2, #0]

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <FlightController_StartUp+0x80>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f00b fe37 	bl	800cfdc <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f00b fec4 	bl	800d0fc <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001374:	e7d6      	b.n	8001324 <FlightController_StartUp+0xc>
 8001376:	bf00      	nop
 8001378:	40020800 	.word	0x40020800
 800137c:	20000331 	.word	0x20000331
 8001380:	20000b50 	.word	0x20000b50
 8001384:	20000334 	.word	0x20000334
 8001388:	20000ab4 	.word	0x20000ab4
 800138c:	20000338 	.word	0x20000338
 8001390:	20000b08 	.word	0x20000b08
 8001394:	2000033c 	.word	0x2000033c
 8001398:	20000304 	.word	0x20000304

0800139c <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_CONTROL_SYSTEM
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80013a4:	2314      	movs	r3, #20
 80013a6:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Set ESCs speeds */
        ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013aa:	889b      	ldrh	r3, [r3, #4]
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013b8:	801a      	strh	r2, [r3, #0]
        ESC_speeds[1] = FSA8S_channelValues[2] / 10;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013bc:	889b      	ldrh	r3, [r3, #4]
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013ca:	805a      	strh	r2, [r3, #2]
        ESC_speeds[2] = FSA8S_channelValues[2] / 10;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013ce:	889b      	ldrh	r3, [r3, #4]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	08db      	lsrs	r3, r3, #3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013dc:	809a      	strh	r2, [r3, #4]
        ESC_speeds[3] = FSA8S_channelValues[2] / 10;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013e0:	889b      	ldrh	r3, [r3, #4]
 80013e2:	4a06      	ldr	r2, [pc, #24]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013ee:	80da      	strh	r2, [r3, #6]

        /* Set task time delay */
        vTaskDelay(xDelay);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f00b fe83 	bl	800d0fc <vTaskDelay>
        ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 80013f6:	e7d7      	b.n	80013a8 <FlightController_ControlSystem+0xc>
 80013f8:	20000340 	.word	0x20000340
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	20000368 	.word	0x20000368

08001404 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

    FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <FlightController_Read_FSA8S+0x54>)
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	ca07      	ldmia	r2, {r0, r1, r2}
 8001414:	c303      	stmia	r3!, {r0, r1}
 8001416:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001418:	2314      	movs	r3, #20
 800141a:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 800141c:	2300      	movs	r3, #0
 800141e:	77fb      	strb	r3, [r7, #31]
 8001420:	e013      	b.n	800144a <FlightController_Read_FSA8S+0x46>
            /* Read channels */
            FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <FlightController_Read_FSA8S+0x58>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	3320      	adds	r3, #32
 800142a:	443b      	add	r3, r7
 800142c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001430:	7ffc      	ldrb	r4, [r7, #31]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f001 fad5 	bl	80029e4 <FSA8S_ReadChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <FlightController_Read_FSA8S+0x5c>)
 8001440:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	3301      	adds	r3, #1
 8001448:	77fb      	strb	r3, [r7, #31]
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d9e8      	bls.n	8001422 <FlightController_Read_FSA8S+0x1e>
            LOG(loggingStr, LOG_INFORMATION);
#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001450:	69b8      	ldr	r0, [r7, #24]
 8001452:	f00b fe53 	bl	800d0fc <vTaskDelay>
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001456:	e7e1      	b.n	800141c <FlightController_Read_FSA8S+0x18>
 8001458:	08012640 	.word	0x08012640
 800145c:	20000334 	.word	0x20000334
 8001460:	20000340 	.word	0x20000340

08001464 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	; 0x38
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
#endif

    /* Change delay from time in [ms] to ticks */
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER ||                                                 \
    defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_PRESSURE || MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
 800146c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
#endif

    /* Allocate dynamic memory for the MPU6050 gyroscope values */
    GY87_gyroscopeValues = pvPortMalloc(sizeof(GY87_gyroscopeValues));
 8001472:	2004      	movs	r0, #4
 8001474:	f00d fa08 	bl	800e888 <pvPortMalloc>
 8001478:	4603      	mov	r3, r0
 800147a:	4a35      	ldr	r2, [pc, #212]	; (8001550 <FlightController_Read_GY87+0xec>)
 800147c:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_gyroscopeValues) {
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <FlightController_Read_GY87+0xec>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d104      	bne.n	8001490 <FlightController_Read_GY87+0x2c>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_gyroscopeValues);
 8001486:	4b32      	ldr	r3, [pc, #200]	; (8001550 <FlightController_Read_GY87+0xec>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f00d fa0e 	bl	800e8ac <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 accelerometer values */
    GY87_accelerometerValues = pvPortMalloc(sizeof(GY87_accelerometerValues));
 8001490:	2004      	movs	r0, #4
 8001492:	f00d f9f9 	bl	800e888 <pvPortMalloc>
 8001496:	4603      	mov	r3, r0
 8001498:	4a2e      	ldr	r2, [pc, #184]	; (8001554 <FlightController_Read_GY87+0xf0>)
 800149a:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_accelerometerValues) {
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <FlightController_Read_GY87+0xf0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d104      	bne.n	80014ae <FlightController_Read_GY87+0x4a>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_accelerometerValues);
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <FlightController_Read_GY87+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00d f9ff 	bl	800e8ac <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 magnetometer values */
    GY87_magnetometerValues = pvPortMalloc(sizeof(GY87_magnetometerValues));
 80014ae:	2004      	movs	r0, #4
 80014b0:	f00d f9ea 	bl	800e888 <pvPortMalloc>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4a28      	ldr	r2, [pc, #160]	; (8001558 <FlightController_Read_GY87+0xf4>)
 80014b8:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_magnetometerValues) {
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <FlightController_Read_GY87+0xf4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d104      	bne.n	80014cc <FlightController_Read_GY87+0x68>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_magnetometerValues);
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <FlightController_Read_GY87+0xf4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00d f9f0 	bl	800e8ac <vPortFree>
    }

    while (1) {

        /* Read GY87 gyroscope values */
        GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 80014cc:	4b23      	ldr	r3, [pc, #140]	; (800155c <FlightController_Read_GY87+0xf8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <FlightController_Read_GY87+0xec>)
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fe42 	bl	8003160 <GY87_ReadGyroscope>
        sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope Z: %d\r\n\n", GY87_gyroscopeValues->gyroscopeZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 accelerometer values */
        GY87_ReadAccelerometer(hgy87, GY87_accelerometerValues);
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <FlightController_Read_GY87+0xf8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <FlightController_Read_GY87+0xf0>)
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fea4 	bl	8003234 <GY87_ReadAccelerometer>
        sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer Z: %d\r\n\n", GY87_accelerometerValues->accelerometerZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 temperature value */
        GY87_temperature = GY87_ReadTemperatureSensor(hgy87);
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <FlightController_Read_GY87+0xf8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 ff0a 	bl	800330a <GY87_ReadTemperatureSensor>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <FlightController_Read_GY87+0xfc>)
 80014fc:	801a      	strh	r2, [r3, #0]
        sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d°C\r\n\n", GY87_temperature);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 magnetometer values */
        GY87_ReadMagnetometer(hgy87, GY87_magnetometerValues);
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <FlightController_Read_GY87+0xf8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <FlightController_Read_GY87+0xf4>)
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f001 ff2c 	bl	8003366 <GY87_ReadMagnetometer>
        sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer Z: %d\r\n\n", GY87_magnetometerValues->magnetometerZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 magnetometer heading */
        GY87_magnetometerHeadingValue = GY87_ReadMagnetometerHeading(hgy87);
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <FlightController_Read_GY87+0xf8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f001 ff94 	bl	8003440 <GY87_ReadMagnetometerHeading>
 8001518:	eef0 7a40 	vmov.f32	s15, s0
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <FlightController_Read_GY87+0x100>)
 800151e:	edc3 7a00 	vstr	s15, [r3]

        /* Log GY87 magnetometer heading value */
#ifdef MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING
        sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer Heading: %.2f°\r\n", GY87_magnetometerHeadingValue);
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <FlightController_Read_GY87+0x100>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f816 	bl	8000558 <__aeabi_f2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	f107 000c 	add.w	r0, r7, #12
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <FlightController_Read_GY87+0x104>)
 8001536:	f00e fcad 	bl	800fe94 <siprintf>
        LOG(loggingStr, LOG_INFORMATION);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fff9 	bl	8003538 <LOG>
        sprintf((char *)loggingStr, (const char *)"GY87 Barometer Altitude: %.2fDEFINE\r\n", GY87_barometerAltitudeValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001546:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001548:	f00b fdd8 	bl	800d0fc <vTaskDelay>
        GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 800154c:	e7be      	b.n	80014cc <FlightController_Read_GY87+0x68>
 800154e:	bf00      	nop
 8001550:	20000358 	.word	0x20000358
 8001554:	2000035c 	.word	0x2000035c
 8001558:	20000360 	.word	0x20000360
 800155c:	20000338 	.word	0x20000338
 8001560:	20000354 	.word	0x20000354
 8001564:	20000364 	.word	0x20000364
 8001568:	0801264c 	.word	0x0801264c

0800156c <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_ESC
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001574:	2314      	movs	r3, #20
 8001576:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <FlightController_Write_ESCs+0x9c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <FlightController_Write_ESCs+0x9c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	791b      	ldrb	r3, [r3, #4]
 8001582:	4922      	ldr	r1, [pc, #136]	; (800160c <FlightController_Write_ESCs+0xa0>)
 8001584:	8809      	ldrh	r1, [r1, #0]
 8001586:	ee07 1a90 	vmov	s15, r1
 800158a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	4619      	mov	r1, r3
 8001594:	4610      	mov	r0, r2
 8001596:	f001 f88b 	bl	80026b0 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[1]);
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <FlightController_Write_ESCs+0x9c>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <FlightController_Write_ESCs+0x9c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	795b      	ldrb	r3, [r3, #5]
 80015a4:	4919      	ldr	r1, [pc, #100]	; (800160c <FlightController_Write_ESCs+0xa0>)
 80015a6:	8849      	ldrh	r1, [r1, #2]
 80015a8:	ee07 1a90 	vmov	s15, r1
 80015ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b0:	eeb0 0a67 	vmov.f32	s0, s15
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f001 f87a 	bl	80026b0 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[2]);
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <FlightController_Write_ESCs+0x9c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <FlightController_Write_ESCs+0x9c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	799b      	ldrb	r3, [r3, #6]
 80015c6:	4911      	ldr	r1, [pc, #68]	; (800160c <FlightController_Write_ESCs+0xa0>)
 80015c8:	8889      	ldrh	r1, [r1, #4]
 80015ca:	ee07 1a90 	vmov	s15, r1
 80015ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f001 f869 	bl	80026b0 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[3]);
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <FlightController_Write_ESCs+0x9c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <FlightController_Write_ESCs+0x9c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	79db      	ldrb	r3, [r3, #7]
 80015e8:	4908      	ldr	r1, [pc, #32]	; (800160c <FlightController_Write_ESCs+0xa0>)
 80015ea:	88c9      	ldrh	r1, [r1, #6]
 80015ec:	ee07 1a90 	vmov	s15, r1
 80015f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	4619      	mov	r1, r3
 80015fa:	4610      	mov	r0, r2
 80015fc:	f001 f858 	bl	80026b0 <ESC_SetSpeed>
        sprintf((char *)loggingStr, (const char *)"PWM Channel 4 Speed: %d\r\n\n", ESC_speeds[3]);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f00b fd7b 	bl	800d0fc <vTaskDelay>
        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 8001606:	e7b7      	b.n	8001578 <FlightController_Write_ESCs+0xc>
 8001608:	2000033c 	.word	0x2000033c
 800160c:	20000368 	.word	0x20000368

08001610 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af02      	add	r7, sp, #8
 8001616:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001618:	2314      	movs	r3, #20
 800161a:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 800161c:	2120      	movs	r1, #32
 800161e:	4810      	ldr	r0, [pc, #64]	; (8001660 <FlightController_OnOffButton+0x50>)
 8001620:	f003 f8c4 	bl	80047ac <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d115      	bne.n	8001656 <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <FlightController_OnOffButton+0x54>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	f083 0301 	eor.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00e      	beq.n	8001656 <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <FlightController_OnOffButton+0x58>)
 800163a:	681c      	ldr	r4, [r3, #0]
 800163c:	f00b ff34 	bl	800d4a8 <xTaskGetTickCount>
 8001640:	4602      	mov	r2, r0
 8001642:	2300      	movs	r3, #0
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	2101      	movs	r1, #1
 800164a:	4620      	mov	r0, r4
 800164c:	f00c fb84 	bl	800dd58 <xTimerGenericCommand>
                Timer1_running = true;
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <FlightController_OnOffButton+0x54>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f00b fd50 	bl	800d0fc <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 800165c:	e7de      	b.n	800161c <FlightController_OnOffButton+0xc>
 800165e:	bf00      	nop
 8001660:	40020400 	.word	0x40020400
 8001664:	20000330 	.word	0x20000330
 8001668:	2000032c 	.word	0x2000032c
 800166c:	00000000 	.word	0x00000000

08001670 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001678:	2314      	movs	r3, #20
 800167a:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 800167c:	482e      	ldr	r0, [pc, #184]	; (8001738 <FlightController_BatteryLevel+0xc8>)
 800167e:	f002 f895 	bl	80037ac <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001682:	2101      	movs	r1, #1
 8001684:	482c      	ldr	r0, [pc, #176]	; (8001738 <FlightController_BatteryLevel+0xc8>)
 8001686:	f002 f945 	bl	8003914 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 800168a:	482b      	ldr	r0, [pc, #172]	; (8001738 <FlightController_BatteryLevel+0xc8>)
 800168c:	f002 f9cd 	bl	8003a2a <HAL_ADC_GetValue>
 8001690:	4603      	mov	r3, r0
 8001692:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevel = (adcValue * 3.3) / 4096;
 8001694:	897b      	ldrh	r3, [r7, #10]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff4c 	bl	8000534 <__aeabi_i2d>
 800169c:	a320      	add	r3, pc, #128	; (adr r3, 8001720 <FlightController_BatteryLevel+0xb0>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ffb1 	bl	8000608 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <FlightController_BatteryLevel+0xcc>)
 80016b4:	f7ff f8d2 	bl	800085c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa9a 	bl	8000bf8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <FlightController_BatteryLevel+0xd0>)
 80016c8:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevel = FlightController_batteryLevel * 1.046046;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <FlightController_BatteryLevel+0xd0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff42 	bl	8000558 <__aeabi_f2d>
 80016d4:	a314      	add	r3, pc, #80	; (adr r3, 8001728 <FlightController_BatteryLevel+0xb8>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7fe ff95 	bl	8000608 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa87 	bl	8000bf8 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <FlightController_BatteryLevel+0xd0>)
 80016ee:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevel = FlightController_batteryLevel * 3.363636;
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <FlightController_BatteryLevel+0xd0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff2f 	bl	8000558 <__aeabi_f2d>
 80016fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001730 <FlightController_BatteryLevel+0xc0>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff82 	bl	8000608 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fa74 	bl	8000bf8 <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <FlightController_BatteryLevel+0xd0>)
 8001714:	6013      	str	r3, [r2, #0]
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f[V]\r\n\n", FlightController_batteryLevel);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f00b fcf0 	bl	800d0fc <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 800171c:	e7ae      	b.n	800167c <FlightController_BatteryLevel+0xc>
 800171e:	bf00      	nop
 8001720:	66666666 	.word	0x66666666
 8001724:	400a6666 	.word	0x400a6666
 8001728:	bb01c92e 	.word	0xbb01c92e
 800172c:	3ff0bc9a 	.word	0x3ff0bc9a
 8001730:	fdbd2fa1 	.word	0xfdbd2fa1
 8001734:	400ae8b9 	.word	0x400ae8b9
 8001738:	20000a6c 	.word	0x20000a6c
 800173c:	40b00000 	.word	0x40b00000
 8001740:	20000370 	.word	0x20000370

08001744 <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800174c:	2314      	movs	r3, #20
 800174e:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f00b fcd3 	bl	800d0fc <vTaskDelay>
 8001756:	e7fb      	b.n	8001750 <FlightController_BatteryAlarm+0xc>

08001758 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001764:	23fa      	movs	r3, #250	; 0xfa
 8001766:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	461a      	mov	r2, r3
 800176c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <FlightController_HeartbeatLight+0x38>)
 8001772:	f003 f833 	bl	80047dc <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e001      	b.n	8001786 <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f00b fcb8 	bl	800d0fc <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 800178c:	e7ec      	b.n	8001768 <FlightController_HeartbeatLight+0x10>
 800178e:	bf00      	nop
 8001790:	40020800 	.word	0x40020800

08001794 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800179c:	2314      	movs	r3, #20
 800179e:	60fb      	str	r3, [r7, #12]
    while (1) {

    	// TODO

        /* Set task time delay */
        vTaskDelay(xDelay);
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f00b fcab 	bl	800d0fc <vTaskDelay>
 80017a6:	e7fb      	b.n	80017a0 <FlightController_FlightLights+0xc>

080017a8 <Timer1_Callback>:
    }
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f00c fdd7 	bl	800e364 <pvTimerGetTimerID>
 80017b6:	4603      	mov	r3, r0
 80017b8:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f00c fb1a 	bl	800ddf4 <xTimerGetPeriod>
 80017c0:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 80017c8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d33b      	bcc.n	8001850 <Timer1_Callback+0xa8>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80017d8:	2120      	movs	r1, #32
 80017da:	4822      	ldr	r0, [pc, #136]	; (8001864 <Timer1_Callback+0xbc>)
 80017dc:	f002 ffe6 	bl	80047ac <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d124      	bne.n	8001830 <Timer1_Callback+0x88>

            if (!FlightController_running) {
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <Timer1_Callback+0xc0>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <Timer1_Callback+0x5e>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2110      	movs	r1, #16
 80017f8:	481a      	ldr	r0, [pc, #104]	; (8001864 <Timer1_Callback+0xbc>)
 80017fa:	f002 ffef 	bl	80047dc <HAL_GPIO_WritePin>

                FlightController_running = true;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <Timer1_Callback+0xc0>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e014      	b.n	8001830 <Timer1_Callback+0x88>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <Timer1_Callback+0xc4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f00b fcaa 	bl	800d164 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001816:	4816      	ldr	r0, [pc, #88]	; (8001870 <Timer1_Callback+0xc8>)
 8001818:	f002 ffe0 	bl	80047dc <HAL_GPIO_WritePin>

                FlightController_running = false;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <Timer1_Callback+0xc0>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2110      	movs	r1, #16
 8001826:	480f      	ldr	r0, [pc, #60]	; (8001864 <Timer1_Callback+0xbc>)
 8001828:	f002 ffd8 	bl	80047dc <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 800182c:	f002 fc43 	bl	80040b6 <HAL_NVIC_SystemReset>
            }
        }

        /* Stop Timer1 */
        xTimerStop(xTimer, 0);
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	2200      	movs	r2, #0
 8001838:	2103      	movs	r1, #3
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f00c fa8c 	bl	800dd58 <xTimerGenericCommand>
        vTimerSetTimerID(xTimer, (void *)0);
 8001840:	2100      	movs	r1, #0
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f00c fdae 	bl	800e3a4 <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <Timer1_Callback+0xcc>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 800184e:	e004      	b.n	800185a <Timer1_Callback+0xb2>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4619      	mov	r1, r3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f00c fda5 	bl	800e3a4 <vTimerSetTimerID>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020400 	.word	0x40020400
 8001868:	20000331 	.word	0x20000331
 800186c:	20000324 	.word	0x20000324
 8001870:	40020800 	.word	0x40020800
 8001874:	20000330 	.word	0x20000330

08001878 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

    /* Welcome message */
    LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 800187c:	2100      	movs	r1, #0
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <FlightController_Init+0x14>)
 8001880:	f001 fe5a 	bl	8003538 <LOG>

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 8001884:	f7ff fb86 	bl	8000f94 <FreeRTOS_CreateStartUpTasks>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	08012670 	.word	0x08012670

08001890 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <vApplicationGetIdleTaskMemory+0x2c>)
 80018a0:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <vApplicationGetIdleTaskMemory+0x30>)
 80018a6:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000374 	.word	0x20000374
 80018c0:	200003f0 	.word	0x200003f0

080018c4 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80018d4:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <vApplicationGetTimerTaskMemory+0x30>)
 80018da:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e2:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	200005f0 	.word	0x200005f0
 80018f4:	2000066c 	.word	0x2000066c

080018f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018fe:	f001 fe7b 	bl	80035f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001902:	f000 f827 	bl	8001954 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001906:	f000 f9cd 	bl	8001ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 800190a:	f000 f9b1 	bl	8001c70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800190e:	f000 f985 	bl	8001c1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001912:	f000 f8db 	bl	8001acc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001916:	f000 f907 	bl	8001b28 <MX_TIM3_Init>
  MX_ADC1_Init();
 800191a:	f000 f885 	bl	8001a28 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 800191e:	f7ff ffab 	bl	8001878 <FlightController_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <main+0x54>)
 8001924:	1d3c      	adds	r4, r7, #4
 8001926:	461d      	mov	r5, r3
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f00a fbd2 	bl	800c0e2 <osThreadCreate>
 800193e:	4603      	mov	r3, r0
 8001940:	4a03      	ldr	r2, [pc, #12]	; (8001950 <main+0x58>)
 8001942:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001944:	f00a fbc6 	bl	800c0d4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 8001948:	e7fe      	b.n	8001948 <main+0x50>
 800194a:	bf00      	nop
 800194c:	080126a4 	.word	0x080126a4
 8001950:	20000bf4 	.word	0x20000bf4

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b094      	sub	sp, #80	; 0x50
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	2230      	movs	r2, #48	; 0x30
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f00e faf9 	bl	800ff5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <SystemClock_Config+0xcc>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <SystemClock_Config+0xcc>)
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	; 0x40
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <SystemClock_Config+0xcc>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <SystemClock_Config+0xd0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <SystemClock_Config+0xd0>)
 80019a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <SystemClock_Config+0xd0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b4:	2301      	movs	r3, #1
 80019b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019be:	2302      	movs	r3, #2
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019c8:	2319      	movs	r3, #25
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80019cc:	2390      	movs	r3, #144	; 0x90
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019d4:	2303      	movs	r3, #3
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d8:	f107 0320 	add.w	r3, r7, #32
 80019dc:	4618      	mov	r0, r3
 80019de:	f005 f953 	bl	8006c88 <HAL_RCC_OscConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019e8:	f000 f9ea 	bl	8001dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f0:	2302      	movs	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2102      	movs	r1, #2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f005 fbb5 	bl	8007178 <HAL_RCC_ClockConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a14:	f000 f9d4 	bl	8001dc0 <Error_Handler>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3750      	adds	r7, #80	; 0x50
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <MX_ADC1_Init+0x9c>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a68:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <MX_ADC1_Init+0xa0>)
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a86:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a88:	f001 fe4c 	bl	8003724 <HAL_ADC_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a92:	f000 f995 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001aa8:	f001 ffcc 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ab2:	f000 f985 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000a6c 	.word	0x20000a6c
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	0f000001 	.word	0x0f000001

08001acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001ad2:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <MX_I2C1_Init+0x54>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <MX_I2C1_Init+0x58>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_I2C1_Init+0x50>)
 8001b0a:	f002 fe81 	bl	8004810 <HAL_I2C_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b14:	f000 f954 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000ab4 	.word	0x20000ab4
 8001b20:	40005400 	.word	0x40005400
 8001b24:	000186a0 	.word	0x000186a0

08001b28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b4a:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001b4c:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <MX_TIM3_Init+0xf0>)
 8001b4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8001b50:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001b52:	2214      	movs	r2, #20
 8001b54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b70:	4828      	ldr	r0, [pc, #160]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001b72:	f005 fce1 	bl	8007538 <HAL_TIM_PWM_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b7c:	f000 f920 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4821      	ldr	r0, [pc, #132]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001b90:	f006 f8c6 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b9a:	f000 f911 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9e:	2360      	movs	r3, #96	; 0x60
 8001ba0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4817      	ldr	r0, [pc, #92]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001bb6:	f005 fdbf 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001bc0:	f000 f8fe 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4812      	ldr	r0, [pc, #72]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001bcc:	f005 fdb4 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bd6:	f000 f8f3 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2208      	movs	r2, #8
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001be2:	f005 fda9 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001bec:	f000 f8e8 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4807      	ldr	r0, [pc, #28]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001bf8:	f005 fd9e 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c02:	f000 f8dd 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <MX_TIM3_Init+0xec>)
 8001c08:	f000 f9bc 	bl	8001f84 <HAL_TIM_MspPostInit>

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000b08 	.word	0x20000b08
 8001c18:	40000400 	.word	0x40000400

08001c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_USART2_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c42:	2204      	movs	r2, #4
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f006 f8d2 	bl	8007dfc <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f000 f8af 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000b50 	.word	0x20000b50
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_DMA_Init+0x30>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <MX_DMA_Init+0x30>)
 8001c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_DMA_Init+0x30>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a37      	ldr	r2, [pc, #220]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b35      	ldr	r3, [pc, #212]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a30      	ldr	r2, [pc, #192]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <MX_GPIO_Init+0xfc>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d30:	481c      	ldr	r0, [pc, #112]	; (8001da4 <MX_GPIO_Init+0x100>)
 8001d32:	f002 fd53 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f241 1114 	movw	r1, #4372	; 0x1114
 8001d3c:	481a      	ldr	r0, [pc, #104]	; (8001da8 <MX_GPIO_Init+0x104>)
 8001d3e:	f002 fd4d 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED4_Pin;
 8001d42:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4812      	ldr	r0, [pc, #72]	; (8001da4 <MX_GPIO_Init+0x100>)
 8001d5c:	f002 fba2 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin;
 8001d60:	f241 1314 	movw	r3, #4372	; 0x1114
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	480b      	ldr	r0, [pc, #44]	; (8001da8 <MX_GPIO_Init+0x104>)
 8001d7a:	f002 fb93 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
  GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_GPIO_Init+0x104>)
 8001d92:	f002 fb87 	bl	80044a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020400 	.word	0x40020400

08001dac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001db4:	f00c fd8c 	bl	800e8d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f00a f9de 	bl	800c17a <osDelay>
 8001dbe:	e7fb      	b.n	8001db8 <StartDefaultTask+0xc>

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_MspInit+0x54>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_MspInit+0x54>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_MspInit+0x54>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_MspInit+0x54>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_MspInit+0x54>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_MspInit+0x54>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	210f      	movs	r1, #15
 8001e12:	f06f 0001 	mvn.w	r0, #1
 8001e16:	f002 f924 	bl	8004062 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_ADC_MspInit+0x7c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d127      	bne.n	8001e9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_ADC_MspInit+0x80>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <HAL_ADC_MspInit+0x80>)
 8001e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_ADC_MspInit+0x80>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_ADC_MspInit+0x80>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <HAL_ADC_MspInit+0x80>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_ADC_MspInit+0x80>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <HAL_ADC_MspInit+0x84>)
 8001e96:	f002 fb05 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40012000 	.word	0x40012000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000

08001eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_I2C_MspInit+0x84>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12b      	bne.n	8001f2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_I2C_MspInit+0x88>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_I2C_MspInit+0x88>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_I2C_MspInit+0x88>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef2:	2312      	movs	r3, #18
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001efe:	2304      	movs	r3, #4
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <HAL_I2C_MspInit+0x8c>)
 8001f0a:	f002 facb 	bl	80044a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_I2C_MspInit+0x88>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_I2C_MspInit+0x88>)
 8001f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_I2C_MspInit+0x88>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40005400 	.word	0x40005400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020400 	.word	0x40020400

08001f40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10d      	bne.n	8001f6e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_TIM_PWM_MspInit+0x40>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_TIM_PWM_MspInit+0x40>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_TIM_PWM_MspInit+0x40>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a21      	ldr	r2, [pc, #132]	; (8002028 <HAL_TIM_MspPostInit+0xa4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d13b      	bne.n	800201e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_TIM_MspPostInit+0xa8>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_TIM_MspPostInit+0xa8>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_TIM_MspPostInit+0xa8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_TIM_MspPostInit+0xa8>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_TIM_MspPostInit+0xa8>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_TIM_MspPostInit+0xa8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fde:	23c0      	movs	r3, #192	; 0xc0
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <HAL_TIM_MspPostInit+0xac>)
 8001ffa:	f002 fa53 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ffe:	2303      	movs	r3, #3
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800200e:	2302      	movs	r3, #2
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <HAL_TIM_MspPostInit+0xb0>)
 800201a:	f002 fa43 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40000400 	.word	0x40000400
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400

08002038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a31      	ldr	r2, [pc, #196]	; (800211c <HAL_UART_MspInit+0xe4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d15b      	bne.n	8002112 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_UART_MspInit+0xe8>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <HAL_UART_MspInit+0xe8>)
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_UART_MspInit+0xe8>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_UART_MspInit+0xe8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_UART_MspInit+0xe8>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_UART_MspInit+0xe8>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002092:	230c      	movs	r3, #12
 8002094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a2:	2307      	movs	r3, #7
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	481d      	ldr	r0, [pc, #116]	; (8002124 <HAL_UART_MspInit+0xec>)
 80020ae:	f002 f9f9 	bl	80044a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_UART_MspInit+0xf4>)
 80020b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020f8:	f001 ffee 	bl	80040d8 <HAL_DMA_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002102:	f7ff fe5d 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_UART_MspInit+0xf0>)
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_UART_MspInit+0xf0>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40004400 	.word	0x40004400
 8002120:	40023800 	.word	0x40023800
 8002124:	40020000 	.word	0x40020000
 8002128:	20000b94 	.word	0x20000b94
 800212c:	40026088 	.word	0x40026088

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002134:	e7fe      	b.n	8002134 <NMI_Handler+0x4>

08002136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <HardFault_Handler+0x4>

0800213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <MemManage_Handler+0x4>

08002142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <BusFault_Handler+0x4>

08002148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <UsageFault_Handler+0x4>

0800214e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002160:	f001 fa9c 	bl	800369c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002164:	f00c fb00 	bl	800e768 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}

0800216c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <OTG_FS_IRQHandler+0x10>)
 8002172:	f003 fc5c 	bl	8005a2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20001b6c 	.word	0x20001b6c

08002180 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
    return 1;
 8002184:	2301      	movs	r3, #1
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_kill>:

int _kill(int pid, int sig) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 800219a:	f00d ff4f 	bl	801003c <__errno>
 800219e:	4603      	mov	r3, r0
 80021a0:	2216      	movs	r2, #22
 80021a2:	601a      	str	r2, [r3, #0]
    return -1;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_exit>:

void _exit(int status) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ffe7 	bl	8002190 <_kill>
    while (1) {
 80021c2:	e7fe      	b.n	80021c2 <_exit+0x12>

080021c4 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	e00a      	b.n	80021ec <_read+0x28>
        *ptr++ = __io_getchar();
 80021d6:	f3af 8000 	nop.w
 80021da:	4601      	mov	r1, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	60ba      	str	r2, [r7, #8]
 80021e2:	b2ca      	uxtb	r2, r1
 80021e4:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dbf0      	blt.n	80021d6 <_read+0x12>
    }

    return len;
 80021f4:	687b      	ldr	r3, [r7, #4]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e009      	b.n	8002224 <_write+0x26>
        __io_putchar(*ptr++);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbf1      	blt.n	8002210 <_write+0x12>
    }
    return len;
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_close>:

int _close(int file) {
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_fstat>:

int _fstat(int file, struct stat * st) {
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800225e:	605a      	str	r2, [r3, #4]
    return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_isatty>:

int _isatty(int file) {
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <_sbrk+0x5c>)
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <_sbrk+0x60>)
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <_sbrk+0x64>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <_sbrk+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d207      	bcs.n	80022e0 <_sbrk+0x40>
        errno = ENOMEM;
 80022d0:	f00d feb4 	bl	801003c <__errno>
 80022d4:	4603      	mov	r3, r0
 80022d6:	220c      	movs	r2, #12
 80022d8:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022de:	e009      	b.n	80022f4 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <_sbrk+0x64>)
 80022f0:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20010000 	.word	0x20010000
 8002300:	00000400 	.word	0x00000400
 8002304:	20000bf8 	.word	0x20000bf8
 8002308:	200023e8 	.word	0x200023e8

0800230c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <SystemInit+0x20>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <SystemInit+0x20>)
 8002318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800231c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002336:	490e      	ldr	r1, [pc, #56]	; (8002370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800234c:	4c0b      	ldr	r4, [pc, #44]	; (800237c <LoopFillZerobss+0x26>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800235a:	f7ff ffd7 	bl	800230c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235e:	f00d fe73 	bl	8010048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002362:	f7ff fac9 	bl	80018f8 <main>
  bx  lr
 8002366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002368:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002374:	08012b80 	.word	0x08012b80
  ldr r2, =_sbss
 8002378:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 800237c:	200023e4 	.word	0x200023e4

08002380 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC_IRQHandler>

08002382 <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <PWM_Init+0x12>
        return false;
 8002390:	2300      	movs	r3, #0
 8002392:	e02c      	b.n	80023ee <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f005 f91c 	bl	80075d8 <HAL_TIM_PWM_Start>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e021      	b.n	80023ee <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2104      	movs	r1, #4
 80023b0:	4618      	mov	r0, r3
 80023b2:	f005 f911 	bl	80075d8 <HAL_TIM_PWM_Start>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 80023bc:	2300      	movs	r3, #0
 80023be:	e016      	b.n	80023ee <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2108      	movs	r1, #8
 80023c6:	4618      	mov	r0, r3
 80023c8:	f005 f906 	bl	80075d8 <HAL_TIM_PWM_Start>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e00b      	b.n	80023ee <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	210c      	movs	r1, #12
 80023dc:	4618      	mov	r0, r3
 80023de:	f005 f8fb 	bl	80075d8 <HAL_TIM_PWM_Start>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <PWM_Init+0x6c>
    }

    return true;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	460b      	mov	r3, r1
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <PWM_SetDutyCycle+0x18>
        return false;
 800240c:	2300      	movs	r3, #0
 800240e:	e02d      	b.n	800246c <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 8002410:	7afb      	ldrb	r3, [r7, #11]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d00a      	beq.n	800242c <PWM_SetDutyCycle+0x34>
 8002416:	7afb      	ldrb	r3, [r7, #11]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d007      	beq.n	800242c <PWM_SetDutyCycle+0x34>
 800241c:	7afb      	ldrb	r3, [r7, #11]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d004      	beq.n	800242c <PWM_SetDutyCycle+0x34>
 8002422:	7afb      	ldrb	r3, [r7, #11]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d001      	beq.n	800242c <PWM_SetDutyCycle+0x34>
        return false;
 8002428:	2300      	movs	r3, #0
 800242a:	e01f      	b.n	800246c <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d104      	bne.n	800243c <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	b29a      	uxth	r2, r3
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <PWM_SetDutyCycle+0x80>)
 8002438:	635a      	str	r2, [r3, #52]	; 0x34
 800243a:	e016      	b.n	800246a <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 800243c:	7afb      	ldrb	r3, [r7, #11]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d104      	bne.n	800244c <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <PWM_SetDutyCycle+0x80>)
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
 800244a:	e00e      	b.n	800246a <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 800244c:	7afb      	ldrb	r3, [r7, #11]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d104      	bne.n	800245c <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <PWM_SetDutyCycle+0x80>)
 8002458:	63da      	str	r2, [r3, #60]	; 0x3c
 800245a:	e006      	b.n	800246a <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	2b04      	cmp	r3, #4
 8002460:	d103      	bne.n	800246a <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <PWM_SetDutyCycle+0x80>)
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
        /* END MODIFY 13 */
    }

    return true;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40000400 	.word	0x40000400
 800247c:	00000000 	.word	0x00000000

08002480 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	ed87 0a01 	vstr	s0, [r7, #4]
 800248a:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 800248c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	d408      	bmi.n	80024ac <ESC_CalculatePWMDutyCycle+0x2c>
 800249a:	edd7 7a01 	vldr	s15, [r7, #4]
 800249e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002508 <ESC_CalculatePWMDutyCycle+0x88>
 80024a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	dd01      	ble.n	80024b0 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e021      	b.n	80024f4 <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);
 80024b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002508 <ESC_CalculatePWMDutyCycle+0x88>
 80024b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024bc:	ee16 0a90 	vmov	r0, s13
 80024c0:	f7fe f84a 	bl	8000558 <__aeabi_f2d>
 80024c4:	a30e      	add	r3, pc, #56	; (adr r3, 8002500 <ESC_CalculatePWMDutyCycle+0x80>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f89d 	bl	8000608 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	a30a      	add	r3, pc, #40	; (adr r3, 8002500 <ESC_CalculatePWMDutyCycle+0x80>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fd fede 	bl	800029c <__adddf3>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fb66 	bl	8000bb8 <__aeabi_d2uiz>
 80024ec:	4602      	mov	r2, r0
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	601a      	str	r2, [r3, #0]

    return true;
 80024f2:	2301      	movs	r3, #1
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	f3af 8000 	nop.w
 8002500:	00000000 	.word	0x00000000
 8002504:	40a99980 	.word	0x40a99980
 8002508:	42c80000 	.word	0x42c80000

0800250c <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <ESC_AutoCalibrate+0x12>
        return false;
 800251a:	2300      	movs	r3, #0
 800251c:	e080      	b.n	8002620 <ESC_AutoCalibrate+0x114>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MAX_ESC_SPEED)) {
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	791b      	ldrb	r3, [r3, #4]
 8002522:	f641 1299 	movw	r2, #6553	; 0x1999
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff65 	bl	80023f8 <PWM_SetDutyCycle>
 800252e:	4603      	mov	r3, r0
 8002530:	f083 0301 	eor.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <ESC_AutoCalibrate+0x32>
        return false;
 800253a:	2300      	movs	r3, #0
 800253c:	e070      	b.n	8002620 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MAX_ESC_SPEED)) {
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	795b      	ldrb	r3, [r3, #5]
 8002542:	f641 1299 	movw	r2, #6553	; 0x1999
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff55 	bl	80023f8 <PWM_SetDutyCycle>
 800254e:	4603      	mov	r3, r0
 8002550:	f083 0301 	eor.w	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <ESC_AutoCalibrate+0x52>
        return false;
 800255a:	2300      	movs	r3, #0
 800255c:	e060      	b.n	8002620 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MAX_ESC_SPEED)) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	799b      	ldrb	r3, [r3, #6]
 8002562:	f641 1299 	movw	r2, #6553	; 0x1999
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff45 	bl	80023f8 <PWM_SetDutyCycle>
 800256e:	4603      	mov	r3, r0
 8002570:	f083 0301 	eor.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <ESC_AutoCalibrate+0x72>
        return false;
 800257a:	2300      	movs	r3, #0
 800257c:	e050      	b.n	8002620 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	79db      	ldrb	r3, [r3, #7]
 8002582:	f641 1299 	movw	r2, #6553	; 0x1999
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff35 	bl	80023f8 <PWM_SetDutyCycle>
 800258e:	4603      	mov	r3, r0
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <ESC_AutoCalibrate+0x92>
        return false;
 800259a:	2300      	movs	r3, #0
 800259c:	e040      	b.n	8002620 <ESC_AutoCalibrate+0x114>
    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	f640 42cc 	movw	r2, #3276	; 0xccc
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff25 	bl	80023f8 <PWM_SetDutyCycle>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <ESC_AutoCalibrate+0xb2>
        return false;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e030      	b.n	8002620 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	795b      	ldrb	r3, [r3, #5]
 80025c2:	f640 42cc 	movw	r2, #3276	; 0xccc
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff15 	bl	80023f8 <PWM_SetDutyCycle>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f083 0301 	eor.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <ESC_AutoCalibrate+0xd2>
        return false;
 80025da:	2300      	movs	r3, #0
 80025dc:	e020      	b.n	8002620 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	799b      	ldrb	r3, [r3, #6]
 80025e2:	f640 42cc 	movw	r2, #3276	; 0xccc
 80025e6:	4619      	mov	r1, r3
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff05 	bl	80023f8 <PWM_SetDutyCycle>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <ESC_AutoCalibrate+0xf2>
        return false;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e010      	b.n	8002620 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	79db      	ldrb	r3, [r3, #7]
 8002602:	f640 42cc 	movw	r2, #3276	; 0xccc
 8002606:	4619      	mov	r1, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fef5 	bl	80023f8 <PWM_SetDutyCycle>
 800260e:	4603      	mov	r3, r0
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <ESC_AutoCalibrate+0x112>
        return false;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <ESC_AutoCalibrate+0x114>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <ESC_Init+0x12>
        return NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	e036      	b.n	80026a8 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 800263a:	2008      	movs	r0, #8
 800263c:	f00c f924 	bl	800e888 <pvPortMalloc>
 8002640:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00f      	beq.n	8002668 <ESC_Init+0x40>
        hesc->htim = htim;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_4;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2204      	movs	r2, #4
 8002652:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2202      	movs	r2, #2
 8002658:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2203      	movs	r2, #3
 800265e:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_1;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	71da      	strb	r2, [r3, #7]
 8002666:	e002      	b.n	800266e <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f00c f91f 	bl	800e8ac <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7ff fe87 	bl	8002382 <PWM_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f00c f913 	bl	800e8ac <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	e00e      	b.n	80026a8 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f7ff ff3e 	bl	800250c <ESC_AutoCalibrate>
 8002690:	4603      	mov	r3, r0
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f00c f905 	bl	800e8ac <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	460b      	mov	r3, r1
 80026ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80026be:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <ESC_SetSpeed+0x1c>
        return false;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e03d      	b.n	8002748 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80026cc:	7afb      	ldrb	r3, [r7, #11]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d00a      	beq.n	80026e8 <ESC_SetSpeed+0x38>
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d007      	beq.n	80026e8 <ESC_SetSpeed+0x38>
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d004      	beq.n	80026e8 <ESC_SetSpeed+0x38>
 80026de:	7afb      	ldrb	r3, [r7, #11]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d001      	beq.n	80026e8 <ESC_SetSpeed+0x38>
        return false;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e02f      	b.n	8002748 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 80026e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f4:	d408      	bmi.n	8002708 <ESC_SetSpeed+0x58>
 80026f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80026fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002750 <ESC_SetSpeed+0xa0>
 80026fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	dd01      	ble.n	800270c <ESC_SetSpeed+0x5c>
        return false;
 8002708:	2300      	movs	r3, #0
 800270a:	e01d      	b.n	8002748 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4618      	mov	r0, r3
 8002712:	ed97 0a01 	vldr	s0, [r7, #4]
 8002716:	f7ff feb3 	bl	8002480 <ESC_CalculatePWMDutyCycle>
 800271a:	4603      	mov	r3, r0
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <ESC_SetSpeed+0x7a>
        return false;
 8002726:	2300      	movs	r3, #0
 8002728:	e00e      	b.n	8002748 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	7afb      	ldrb	r3, [r7, #11]
 800272e:	4619      	mov	r1, r3
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff fe61 	bl	80023f8 <PWM_SetDutyCycle>
 8002736:	4603      	mov	r3, r0
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <ESC_SetSpeed+0x96>
        return false;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <ESC_SetSpeed+0x98>
    };

    return true;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	42c80000 	.word	0x42c80000

08002754 <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <IBUS_Init+0x12>
        return false;
 8002762:	2300      	movs	r3, #0
 8002764:	e00f      	b.n	8002786 <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7a1b      	ldrb	r3, [r3, #8]
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	f005 fb8e 	bl	8007e96 <HAL_UART_Receive_DMA>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8002784:	2301      	movs	r3, #1
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <FSA8S_CheckFirstBytes+0x12>
        return false;
 800279c:	2300      	movs	r3, #0
 800279e:	e00d      	b.n	80027bc <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d107      	bne.n	80027ba <FSA8S_CheckFirstBytes+0x2c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	3301      	adds	r3, #1
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d101      	bne.n	80027ba <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 80027ba:	2300      	movs	r3, #0
    }
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 80027d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d4:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <FSA8S_Checksum+0x18>
        return false;
 80027dc:	2300      	movs	r3, #0
 80027de:	e02c      	b.n	800283a <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7a1b      	ldrb	r3, [r3, #8]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7a1b      	ldrb	r3, [r3, #8]
 80027fa:	3b02      	subs	r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b21b      	sxth	r3, r3
 8002802:	4313      	orrs	r3, r2
 8002804:	b21b      	sxth	r3, r3
 8002806:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 8002808:	2300      	movs	r3, #0
 800280a:	737b      	strb	r3, [r7, #13]
 800280c:	e00b      	b.n	8002826 <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	7b7b      	ldrb	r3, [r7, #13]
 8002814:	4413      	add	r3, r2
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	89fa      	ldrh	r2, [r7, #14]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8002820:	7b7b      	ldrb	r3, [r7, #13]
 8002822:	3301      	adds	r3, #1
 8002824:	737b      	strb	r3, [r7, #13]
 8002826:	7b7b      	ldrb	r3, [r7, #13]
 8002828:	2b1d      	cmp	r3, #29
 800282a:	d9f0      	bls.n	800280e <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 800282c:	897a      	ldrh	r2, [r7, #10]
 800282e:	89fb      	ldrh	r3, [r7, #14]
 8002830:	429a      	cmp	r2, r3
 8002832:	d101      	bne.n	8002838 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 8002838:	2300      	movs	r3, #0
    }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d062      	beq.n	800291c <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8002856:	2302      	movs	r3, #2
 8002858:	737b      	strb	r3, [r7, #13]
 800285a:	e059      	b.n	8002910 <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	7b7b      	ldrb	r3, [r7, #13]
 8002866:	3301      	adds	r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	b21a      	sxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	7b7b      	ldrb	r3, [r7, #13]
 8002876:	440b      	add	r3, r1
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b21b      	sxth	r3, r3
 800287c:	4313      	orrs	r3, r2
 800287e:	b21b      	sxth	r3, r3
 8002880:	b29a      	uxth	r2, r3
 8002882:	7b7b      	ldrb	r3, [r7, #13]
 8002884:	3b02      	subs	r3, #2
 8002886:	0fd9      	lsrs	r1, r3, #31
 8002888:	440b      	add	r3, r1
 800288a:	105b      	asrs	r3, r3, #1
 800288c:	4619      	mov	r1, r3
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <FSA8S_AmendData+0xe0>)
 8002890:	5c5b      	ldrb	r3, [r3, r1]
 8002892:	b29b      	uxth	r3, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800289e:	d308      	bcc.n	80028b2 <FSA8S_AmendData+0x6a>
 80028a0:	89fb      	ldrh	r3, [r7, #14]
 80028a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028a6:	d804      	bhi.n	80028b2 <FSA8S_AmendData+0x6a>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 80028a8:	89fb      	ldrh	r3, [r7, #14]
 80028aa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80028ae:	81fb      	strh	r3, [r7, #14]
 80028b0:	e001      	b.n	80028b6 <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 80028b6:	89fb      	ldrh	r3, [r7, #14]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c0:	7b7b      	ldrb	r3, [r7, #13]
 80028c2:	3b02      	subs	r3, #2
 80028c4:	0fda      	lsrs	r2, r3, #31
 80028c6:	4413      	add	r3, r2
 80028c8:	105b      	asrs	r3, r3, #1
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <FSA8S_AmendData+0xe0>)
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800292c <FSA8S_AmendData+0xe4>
 80028dc:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80028e0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800292c <FSA8S_AmendData+0xe4>
 80028e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	7b7b      	ldrb	r3, [r7, #13]
 80028f2:	3b02      	subs	r3, #2
 80028f4:	0fd9      	lsrs	r1, r3, #31
 80028f6:	440b      	add	r3, r1
 80028f8:	105b      	asrs	r3, r3, #1
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002902:	ee17 2a90 	vmov	r2, s15
 8002906:	b292      	uxth	r2, r2
 8002908:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 800290a:	7b7b      	ldrb	r3, [r7, #13]
 800290c:	3302      	adds	r3, #2
 800290e:	737b      	strb	r3, [r7, #13]
 8002910:	7b7a      	ldrb	r2, [r7, #13]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7a1b      	ldrb	r3, [r3, #8]
 8002916:	3b02      	subs	r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	db9f      	blt.n	800285c <FSA8S_AmendData+0x14>
        }
    }
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	20000004 	.word	0x20000004
 800292c:	447a0000 	.word	0x447a0000

08002930 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <FSA8S_Init+0x12>
        return NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	e04a      	b.n	80029d8 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <FSA8S_Init+0xb0>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <FSA8S_Init+0x1e>
        return NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	e044      	b.n	80029d8 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 800294e:	2014      	movs	r0, #20
 8002950:	f00b ff9a 	bl	800e888 <pvPortMalloc>
 8002954:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 8002956:	2020      	movs	r0, #32
 8002958:	f00b ff96 	bl	800e888 <pvPortMalloc>
 800295c:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 800295e:	201c      	movs	r0, #28
 8002960:	f00b ff92 	bl	800e888 <pvPortMalloc>
 8002964:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00f      	beq.n	800298c <FSA8S_Init+0x5c>
        hibus->huart = huart;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2220      	movs	r2, #32
 800297c:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	220e      	movs	r2, #14
 8002988:	741a      	strb	r2, [r3, #16]
 800298a:	e00c      	b.n	80029a6 <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	f00b ff8b 	bl	800e8ac <vPortFree>
        vPortFree(hibus->data);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	f00b ff86 	bl	800e8ac <vPortFree>
        vPortFree(hibus);
 80029a0:	6978      	ldr	r0, [r7, #20]
 80029a2:	f00b ff83 	bl	800e8ac <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff fed4 	bl	8002754 <IBUS_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <FSA8S_Init+0xb0>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
        return hibus;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	e00d      	b.n	80029d8 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00b ff73 	bl	800e8ac <vPortFree>
        vPortFree(hibus->data);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f00b ff6e 	bl	800e8ac <vPortFree>
        vPortFree(hibus);
 80029d0:	6978      	ldr	r0, [r7, #20]
 80029d2:	f00b ff6b 	bl	800e8ac <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 80029d6:	2300      	movs	r3, #0
    }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000bfc 	.word	0x20000bfc

080029e4 <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e029      	b.n	8002a4e <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <FSA8S_ReadChannel+0x22>
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	2b0e      	cmp	r3, #14
 8002a04:	d901      	bls.n	8002a0a <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e021      	b.n	8002a4e <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002a0a:	bf00      	nop
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff febe 	bl	800278e <FSA8S_CheckFirstBytes>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f6      	bne.n	8002a0c <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fed2 	bl	80027c8 <FSA8S_Checksum>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f083 0301 	eor.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8002a30:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002a32:	e7ea      	b.n	8002a0a <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8002a34:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ff06 	bl	8002848 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002a46:	3b01      	subs	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	881b      	ldrh	r3, [r3, #0]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <I2C_Init+0x12>
        return false;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e014      	b.n	8002a94 <I2C_Init+0x3c>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6858      	ldr	r0, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7a19      	ldrb	r1, [r3, #8]
 8002a72:	f107 030f 	add.w	r3, r7, #15
 8002a76:	2201      	movs	r2, #1
 8002a78:	9200      	str	r2, [sp, #0]
 8002a7a:	2275      	movs	r2, #117	; 0x75
 8002a7c:	f000 f810 	bl	8002aa0 <I2C_Read>

    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b68      	cmp	r3, #104	; 0x68
 8002a84:	d101      	bne.n	8002a8a <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e004      	b.n	8002a94 <I2C_Init+0x3c>
    } else {
        /* Wrong IMU device ID */
    	LOG((uint8_t *)"ERROR\r\n\n", LOG_DEBUGGING);
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <I2C_Init+0x44>)
 8002a8e:	f000 fd53 	bl	8003538 <LOG>
        return false;
 8002a92:	2300      	movs	r3, #0
    }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	080126c0 	.word	0x080126c0

08002aa0 <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af04      	add	r7, sp, #16
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	72fb      	strb	r3, [r7, #11]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <I2C_Read+0x1c>
        return false;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e019      	b.n	8002af0 <I2C_Read+0x50>
    }
    if (NULL == data) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <I2C_Read+0x26>
        return false;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e014      	b.n	8002af0 <I2C_Read+0x50>
    }

    /* Read I2C device data by passing a data register */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	b299      	uxth	r1, r3
 8002aca:	7abb      	ldrb	r3, [r7, #10]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	7e3b      	ldrb	r3, [r7, #24]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2064      	movs	r0, #100	; 0x64
 8002ad4:	9002      	str	r0, [sp, #8]
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2301      	movs	r3, #1
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f002 f8d4 	bl	8004c8c <HAL_I2C_Mem_Read>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_Read+0x4e>
    	/* END MODIFY 1 */
        /* Data couldn't be read */
        return false;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <I2C_Read+0x50>
    } else {

        /* Data read successfully */
        return true;
 8002aee:	2301      	movs	r3, #1
    }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af04      	add	r7, sp, #16
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	72fb      	strb	r3, [r7, #11]
 8002b06:	4613      	mov	r3, r2
 8002b08:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <I2C_Write+0x1c>
        return false;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e018      	b.n	8002b46 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <I2C_Write+0x26>
        return false;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e013      	b.n	8002b46 <I2C_Write+0x4e>
    }

    /* Write to I2C device register */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	b299      	uxth	r1, r3
 8002b22:	7abb      	ldrb	r3, [r7, #10]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	2364      	movs	r3, #100	; 0x64
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2301      	movs	r3, #1
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f001 ffaf 	bl	8004a98 <HAL_I2C_Mem_Write>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <I2C_Write+0x4c>
    	/* END MODIFY 2 */
        /* Data couldn't be written */
        return false;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8002b44:	2301      	movs	r3, #1
    }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8002b58:	2014      	movs	r0, #20
 8002b5a:	f00b fe95 	bl	800e888 <pvPortMalloc>
 8002b5e:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8002b60:	2004      	movs	r0, #4
 8002b62:	f00b fe91 	bl	800e888 <pvPortMalloc>
 8002b66:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <GY87_InstanceInit+0x24>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f00b fe97 	bl	800e8ac <vPortFree>
        vPortFree(hgy87);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f00b fe94 	bl	800e8ac <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e01b      	b.n	8002bc0 <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <GY87_InstanceInit+0x78>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d106      	bne.n	8002b9e <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22d0      	movs	r2, #208	; 0xd0
 8002b9a:	721a      	strb	r2, [r3, #8]
 8002b9c:	e009      	b.n	8002bb2 <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <GY87_InstanceInit+0x78>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	22d1      	movs	r2, #209	; 0xd1
 8002bb0:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000bfd 	.word	0x20000bfd

08002bcc <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8002bd4:	2340      	movs	r3, #64	; 0x40
 8002bd6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6858      	ldr	r0, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7a19      	ldrb	r1, [r3, #8]
 8002be0:	f107 030f 	add.w	r3, r7, #15
 8002be4:	2200      	movs	r2, #0
 8002be6:	9200      	str	r2, [sp, #0]
 8002be8:	226b      	movs	r2, #107	; 0x6b
 8002bea:	f000 fa4d 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6858      	ldr	r0, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7a19      	ldrb	r1, [r3, #8]
 8002c0a:	f107 030f 	add.w	r3, r7, #15
 8002c0e:	2201      	movs	r2, #1
 8002c10:	9200      	str	r2, [sp, #0]
 8002c12:	226b      	movs	r2, #107	; 0x6b
 8002c14:	f000 fa38 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8002c28:	2318      	movs	r3, #24
 8002c2a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6858      	ldr	r0, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7a19      	ldrb	r1, [r3, #8]
 8002c34:	f107 030f 	add.w	r3, r7, #15
 8002c38:	2201      	movs	r2, #1
 8002c3a:	9200      	str	r2, [sp, #0]
 8002c3c:	2219      	movs	r2, #25
 8002c3e:	f000 fa23 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af02      	add	r7, sp, #8
 8002c50:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_0; // Full range
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6858      	ldr	r0, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7a19      	ldrb	r1, [r3, #8]
 8002c5e:	f107 030f 	add.w	r3, r7, #15
 8002c62:	2201      	movs	r2, #1
 8002c64:	9200      	str	r2, [sp, #0]
 8002c66:	221b      	movs	r2, #27
 8002c68:	f000 fa0e 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_0; // Full range
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6858      	ldr	r0, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7a19      	ldrb	r1, [r3, #8]
 8002c88:	f107 030f 	add.w	r3, r7, #15
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	9200      	str	r2, [sp, #0]
 8002c90:	221c      	movs	r2, #28
 8002c92:	f000 f9f9 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af02      	add	r7, sp, #8
 8002ca4:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = 0b00100010; // TODO
 8002ca6:	2322      	movs	r3, #34	; 0x22
 8002ca8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6858      	ldr	r0, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7a19      	ldrb	r1, [r3, #8]
 8002cb2:	f107 030f 	add.w	r3, r7, #15
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	9200      	str	r2, [sp, #0]
 8002cba:	226a      	movs	r2, #106	; 0x6a
 8002cbc:	f000 f9e4 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6858      	ldr	r0, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7a19      	ldrb	r1, [r3, #8]
 8002cdc:	f107 030f 	add.w	r3, r7, #15
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	9200      	str	r2, [sp, #0]
 8002ce4:	226a      	movs	r2, #106	; 0x6a
 8002ce6:	f000 f9cf 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af02      	add	r7, sp, #8
 8002cf8:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6858      	ldr	r0, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7a19      	ldrb	r1, [r3, #8]
 8002d06:	f107 030f 	add.w	r3, r7, #15
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	9200      	str	r2, [sp, #0]
 8002d0e:	2237      	movs	r2, #55	; 0x37
 8002d10:	f000 f9ba 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002d24:	2302      	movs	r3, #2
 8002d26:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6858      	ldr	r0, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7a19      	ldrb	r1, [r3, #8]
 8002d30:	f107 030f 	add.w	r3, r7, #15
 8002d34:	2201      	movs	r2, #1
 8002d36:	9200      	str	r2, [sp, #0]
 8002d38:	2237      	movs	r2, #55	; 0x37
 8002d3a:	f000 f9a5 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = 0b00001101; // 400 kHz TODO
 8002d4e:	230d      	movs	r3, #13
 8002d50:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6858      	ldr	r0, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7a19      	ldrb	r1, [r3, #8]
 8002d5a:	f107 030f 	add.w	r3, r7, #15
 8002d5e:	2201      	movs	r2, #1
 8002d60:	9200      	str	r2, [sp, #0]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f000 f990 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = QMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8002d78:	238d      	movs	r3, #141	; 0x8d
 8002d7a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6858      	ldr	r0, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7a19      	ldrb	r1, [r3, #8]
 8002d84:	f107 030f 	add.w	r3, r7, #15
 8002d88:	2201      	movs	r2, #1
 8002d8a:	9200      	str	r2, [sp, #0]
 8002d8c:	2225      	movs	r2, #37	; 0x25
 8002d8e:	f000 f97b 	bl	8003088 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6858      	ldr	r0, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7a19      	ldrb	r1, [r3, #8]
 8002d9e:	f107 030f 	add.w	r3, r7, #15
 8002da2:	2201      	movs	r2, #1
 8002da4:	9200      	str	r2, [sp, #0]
 8002da6:	2226      	movs	r2, #38	; 0x26
 8002da8:	f000 f96e 	bl	8003088 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8002dac:	2386      	movs	r3, #134	; 0x86
 8002dae:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6858      	ldr	r0, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7a19      	ldrb	r1, [r3, #8]
 8002db8:	f107 030f 	add.w	r3, r7, #15
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	9200      	str	r2, [sp, #0]
 8002dc0:	2227      	movs	r2, #39	; 0x27
 8002dc2:	f000 f961 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <GY87_Configure>:
    //    /* Set slave BMP180 barometer number of registers to read*/
    //    regData = 0x80 | 0x06; // TODO
    //    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
}

static bool_t GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fef8 	bl	8002bcc <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff0a 	bl	8002bf6 <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff1c 	bl	8002c20 <MPU6050_SetSampleDivider>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff2e 	bl	8002c4a <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ff40 	bl	8002c74 <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff67 	bl	8002cc8 <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff79 	bl	8002cf2 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f82a 	bl	8002e5a <QMC5883L_TestConnection>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <GY87_Configure+0x48>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer not detected.\r\n\n", LOG_ERROR);
#endif
        return false;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e01d      	b.n	8002e52 <GY87_Configure+0x84>
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f84f 	bl	8002eba <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f834 	bl	8002e8a <BMP180_TestConnection>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f083 0301 	eor.w	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <GY87_Configure+0x64>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer not detected.\r\n\n", LOG_ERROR);
#endif
        return false;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e00f      	b.n	8002e52 <GY87_Configure+0x84>
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f86d 	bl	8002f12 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff6f 	bl	8002d1c <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff2d 	bl	8002c9e <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff7e 	bl	8002d46 <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff90 	bl	8002d70 <MPU6050_Configure_QMC5883l>

    //    /* Configure slave BMP180 barometer in MPU6050 */
    //    MPU6050_Configure_BMP180(hgy87);

    return true;
 8002e50:	2301      	movs	r3, #1
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af02      	add	r7, sp, #8
 8002e60:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6858      	ldr	r0, [r3, #4]
 8002e66:	f107 030f 	add.w	r3, r7, #15
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	9200      	str	r2, [sp, #0]
 8002e6e:	220d      	movs	r2, #13
 8002e70:	211a      	movs	r1, #26
 8002e72:	f000 f8e1 	bl	8003038 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2bff      	cmp	r3, #255	; 0xff
 8002e7a:	d001      	beq.n	8002e80 <QMC5883L_TestConnection+0x26>
        return false;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 8002e80:	2301      	movs	r3, #1
    }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af02      	add	r7, sp, #8
 8002e90:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xD0, &regData, sizeof(regData));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6858      	ldr	r0, [r3, #4]
 8002e96:	f107 030f 	add.w	r3, r7, #15
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	9200      	str	r2, [sp, #0]
 8002e9e:	22d0      	movs	r2, #208	; 0xd0
 8002ea0:	21ee      	movs	r1, #238	; 0xee
 8002ea2:	f000 f8c9 	bl	8003038 <MPU6050_ReadRegister>

    if (0x55 != regData) { // TODO
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b55      	cmp	r3, #85	; 0x55
 8002eaa:	d001      	beq.n	8002eb0 <BMP180_TestConnection+0x26>
        return false;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <BMP180_TestConnection+0x28>
    } else {
        return true;
 8002eb0:	2301      	movs	r3, #1
    }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af02      	add	r7, sp, #8
 8002ec0:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6858      	ldr	r0, [r3, #4]
 8002eca:	f107 030f 	add.w	r3, r7, #15
 8002ece:	2201      	movs	r2, #1
 8002ed0:	9200      	str	r2, [sp, #0]
 8002ed2:	220b      	movs	r2, #11
 8002ed4:	211a      	movs	r1, #26
 8002ed6:	f000 f8d7 	bl	8003088 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8002eda:	231d      	movs	r3, #29
 8002edc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6858      	ldr	r0, [r3, #4]
 8002ee2:	f107 030f 	add.w	r3, r7, #15
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	9200      	str	r2, [sp, #0]
 8002eea:	2209      	movs	r2, #9
 8002eec:	211a      	movs	r1, #26
 8002eee:	f000 f8cb 	bl	8003088 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6858      	ldr	r0, [r3, #4]
 8002efa:	f107 030f 	add.w	r3, r7, #15
 8002efe:	2201      	movs	r2, #1
 8002f00:	9200      	str	r2, [sp, #0]
 8002f02:	220a      	movs	r2, #10
 8002f04:	211a      	movs	r1, #26
 8002f06:	f000 f8bf 	bl	8003088 <MPU6050_WriteRegisterBitmasked>
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    /* Read calibration data */
    BMP180_ReadCallibrationData(hgy87);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f804 	bl	8002f28 <BMP180_ReadCallibrationData>
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <BMP180_ReadCallibrationData>:

static void BMP180_ReadCallibrationData(GY87_HandleTypeDef_t * hgy87) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8002f44:	23aa      	movs	r3, #170	; 0xaa
 8002f46:	83fb      	strh	r3, [r7, #30]

    // HAL_I2C_Mem_Read(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, startRegisterAddress, 1, callibrationData, 22, HAL_MAX_DELAY);
    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, startRegisterAddress, callibrationData, sizeof(callibrationData));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6858      	ldr	r0, [r3, #4]
 8002f4c:	8bfb      	ldrh	r3, [r7, #30]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	2116      	movs	r1, #22
 8002f56:	9100      	str	r1, [sp, #0]
 8002f58:	2177      	movs	r1, #119	; 0x77
 8002f5a:	f000 f86d 	bl	8003038 <MPU6050_ReadRegister>

    BMP180_CallibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8002f5e:	7a3b      	ldrb	r3, [r7, #8]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	b21a      	sxth	r2, r3
 8002f64:	7a7b      	ldrb	r3, [r7, #9]
 8002f66:	b21b      	sxth	r3, r3
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	b21a      	sxth	r2, r3
 8002f6c:	4b31      	ldr	r3, [pc, #196]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8002f6e:	801a      	strh	r2, [r3, #0]
    BMP180_CallibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8002f70:	7abb      	ldrb	r3, [r7, #10]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	b21a      	sxth	r2, r3
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b21a      	sxth	r2, r3
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8002f80:	805a      	strh	r2, [r3, #2]
    BMP180_CallibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8002f82:	7b3b      	ldrb	r3, [r7, #12]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	b21a      	sxth	r2, r3
 8002f88:	7b7b      	ldrb	r3, [r7, #13]
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b21a      	sxth	r2, r3
 8002f90:	4b28      	ldr	r3, [pc, #160]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8002f92:	809a      	strh	r2, [r3, #4]
    BMP180_CallibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8002fa6:	80da      	strh	r2, [r3, #6]
    BMP180_CallibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 8002fa8:	7c3b      	ldrb	r3, [r7, #16]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	7c7b      	ldrb	r3, [r7, #17]
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b21b      	sxth	r3, r3
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8002fba:	811a      	strh	r2, [r3, #8]
    BMP180_CallibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 8002fbc:	7cbb      	ldrb	r3, [r7, #18]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	b21a      	sxth	r2, r3
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8002fce:	815a      	strh	r2, [r3, #10]
    BMP180_CallibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 8002fd0:	7d3b      	ldrb	r3, [r7, #20]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	b21a      	sxth	r2, r3
 8002fd6:	7d7b      	ldrb	r3, [r7, #21]
 8002fd8:	b21b      	sxth	r3, r3
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	b21a      	sxth	r2, r3
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8002fe0:	819a      	strh	r2, [r3, #12]
    BMP180_CallibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 8002fe2:	7dbb      	ldrb	r3, [r7, #22]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	b21b      	sxth	r3, r3
 8002fec:	4313      	orrs	r3, r2
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8002ff2:	81da      	strh	r2, [r3, #14]
    BMP180_CallibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 8002ff4:	7e3b      	ldrb	r3, [r7, #24]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	b21a      	sxth	r2, r3
 8002ffa:	7e7b      	ldrb	r3, [r7, #25]
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b21a      	sxth	r2, r3
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8003004:	821a      	strh	r2, [r3, #16]
    BMP180_CallibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 8003006:	7ebb      	ldrb	r3, [r7, #26]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	b21a      	sxth	r2, r3
 800300c:	7efb      	ldrb	r3, [r7, #27]
 800300e:	b21b      	sxth	r3, r3
 8003010:	4313      	orrs	r3, r2
 8003012:	b21a      	sxth	r2, r3
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8003016:	825a      	strh	r2, [r3, #18]
    BMP180_CallibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 8003018:	7f3b      	ldrb	r3, [r7, #28]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	b21a      	sxth	r2, r3
 800301e:	7f7b      	ldrb	r3, [r7, #29]
 8003020:	b21b      	sxth	r3, r3
 8003022:	4313      	orrs	r3, r2
 8003024:	b21a      	sxth	r2, r3
 8003026:	4b03      	ldr	r3, [pc, #12]	; (8003034 <BMP180_ReadCallibrationData+0x10c>)
 8003028:	829a      	strh	r2, [r3, #20]
}
 800302a:	bf00      	nop
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000c00 	.word	0x20000c00

08003038 <MPU6050_ReadRegister>:
    HAL_I2C_Mem_Read(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, 0xF6, 1, Temp_RAW, 2, 1000);

    return ((Temp_RAW[0] << 8) + Temp_RAW[1]);
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	72fb      	strb	r3, [r7, #11]
 8003046:	4613      	mov	r3, r2
 8003048:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 800304a:	7aba      	ldrb	r2, [r7, #10]
 800304c:	7af9      	ldrb	r1, [r7, #11]
 800304e:	7e3b      	ldrb	r3, [r7, #24]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff fd23 	bl	8002aa0 <I2C_Read>
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	72fb      	strb	r3, [r7, #11]
 8003070:	4613      	mov	r3, r2
 8003072:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8003074:	7aba      	ldrb	r2, [r7, #10]
 8003076:	7af9      	ldrb	r1, [r7, #11]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff fd3c 	bl	8002af8 <I2C_Write>
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	72fb      	strb	r3, [r7, #11]
 8003096:	4613      	mov	r3, r2
 8003098:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 800309a:	f107 0317 	add.w	r3, r7, #23
 800309e:	7aba      	ldrb	r2, [r7, #10]
 80030a0:	7af9      	ldrb	r1, [r7, #11]
 80030a2:	2001      	movs	r0, #1
 80030a4:	9000      	str	r0, [sp, #0]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff ffc6 	bl	8003038 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 80030ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	75bb      	strb	r3, [r7, #22]
 80030c0:	e00a      	b.n	80030d8 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	b25a      	sxtb	r2, r3
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	b25b      	sxtb	r3, r3
 80030d0:	4013      	ands	r3, r2
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 80030d8:	f107 0316 	add.w	r3, r7, #22
 80030dc:	7aba      	ldrb	r2, [r7, #10]
 80030de:	7af9      	ldrb	r1, [r7, #11]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff ffbe 	bl	8003062 <MPU6050_WriteRegister>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <GY87_Init+0x12>
        return NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	e028      	b.n	8003154 <GY87_Init+0x64>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <GY87_Init+0x6c>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d101      	bne.n	800310e <GY87_Init+0x1e>
        return NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	e022      	b.n	8003154 <GY87_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fd1e 	bl	8002b50 <GY87_InstanceInit>
 8003114:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01a      	beq.n	8003152 <GY87_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fc9b 	bl	8002a58 <I2C_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <GY87_Init+0x4e>
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff fe50 	bl	8002dce <GY87_Configure>

            instancesNumber++;
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <GY87_Init+0x6c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <GY87_Init+0x6c>)
 8003138:	701a      	strb	r2, [r3, #0]

            return hgy87;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	e00a      	b.n	8003154 <GY87_Init+0x64>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4618      	mov	r0, r3
 8003144:	f00b fbb2 	bl	800e8ac <vPortFree>
            vPortFree(hgy87);
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f00b fbaf 	bl	800e8ac <vPortFree>
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
#endif
            return NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <GY87_Init+0x64>

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
#endif
        return NULL;
 8003152:	2300      	movs	r3, #0
    }
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000bfd 	.word	0x20000bfd

08003160 <GY87_ReadGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af02      	add	r7, sp, #8
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0250;
 800316a:	23c3      	movs	r3, #195	; 0xc3
 800316c:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d051      	beq.n	8003218 <GY87_ReadGyroscope+0xb8>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d04e      	beq.n	8003218 <GY87_ReadGyroscope+0xb8>

        /* Read gyroscope in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6858      	ldr	r0, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7a19      	ldrb	r1, [r3, #8]
 8003182:	f107 030c 	add.w	r3, r7, #12
 8003186:	2202      	movs	r2, #2
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	2243      	movs	r2, #67	; 0x43
 800318c:	f7ff ff54 	bl	8003038 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8003190:	7b3b      	ldrb	r3, [r7, #12]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	b21a      	sxth	r2, r3
 8003196:	7b7b      	ldrb	r3, [r7, #13]
 8003198:	b21b      	sxth	r3, r3
 800319a:	4313      	orrs	r3, r2
 800319c:	b21b      	sxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80031a8:	b21a      	sxth	r2, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	801a      	strh	r2, [r3, #0]

        /* Read gyroscope in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6858      	ldr	r0, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7a19      	ldrb	r1, [r3, #8]
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	2202      	movs	r2, #2
 80031bc:	9200      	str	r2, [sp, #0]
 80031be:	2245      	movs	r2, #69	; 0x45
 80031c0:	f7ff ff3a 	bl	8003038 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 80031c4:	7b3b      	ldrb	r3, [r7, #12]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	7b7b      	ldrb	r3, [r7, #13]
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80031dc:	b21a      	sxth	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	805a      	strh	r2, [r3, #2]

        /* Read gyroscope in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6858      	ldr	r0, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7a19      	ldrb	r1, [r3, #8]
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	2202      	movs	r2, #2
 80031f0:	9200      	str	r2, [sp, #0]
 80031f2:	2247      	movs	r2, #71	; 0x47
 80031f4:	f7ff ff20 	bl	8003038 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 80031f8:	7b3b      	ldrb	r3, [r7, #12]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	b21a      	sxth	r2, r3
 80031fe:	7b7b      	ldrb	r3, [r7, #13]
 8003200:	b21b      	sxth	r3, r3
 8003202:	4313      	orrs	r3, r2
 8003204:	b21b      	sxth	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800320c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003210:	b21a      	sxth	r2, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	809a      	strh	r2, [r3, #4]
 8003216:	e009      	b.n	800322c <GY87_ReadGyroscope+0xcc>

    } else {

        /* Wrong parameters */
        gyroscopeValues->gyroscopeX = 0;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2200      	movs	r2, #0
 800321c:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->gyroscopeY = 0;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->gyroscopeZ = 0;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	809a      	strh	r2, [r3, #4]
    }
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af02      	add	r7, sp, #8
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_02;
 800323e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003242:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d051      	beq.n	80032ee <GY87_ReadAccelerometer+0xba>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d04e      	beq.n	80032ee <GY87_ReadAccelerometer+0xba>

        /* Read accelerometer in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6858      	ldr	r0, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7a19      	ldrb	r1, [r3, #8]
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	2202      	movs	r2, #2
 800325e:	9200      	str	r2, [sp, #0]
 8003260:	223b      	movs	r2, #59	; 0x3b
 8003262:	f7ff fee9 	bl	8003038 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8003266:	7b3b      	ldrb	r3, [r7, #12]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	b21a      	sxth	r2, r3
 800326c:	7b7b      	ldrb	r3, [r7, #13]
 800326e:	b21b      	sxth	r3, r3
 8003270:	4313      	orrs	r3, r2
 8003272:	b21b      	sxth	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800327a:	fb92 f3f3 	sdiv	r3, r2, r3
 800327e:	b21a      	sxth	r2, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	801a      	strh	r2, [r3, #0]

        /* Read accelerometer in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6858      	ldr	r0, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7a19      	ldrb	r1, [r3, #8]
 800328c:	f107 030c 	add.w	r3, r7, #12
 8003290:	2202      	movs	r2, #2
 8003292:	9200      	str	r2, [sp, #0]
 8003294:	223d      	movs	r2, #61	; 0x3d
 8003296:	f7ff fecf 	bl	8003038 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 800329a:	7b3b      	ldrb	r3, [r7, #12]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	b21a      	sxth	r2, r3
 80032a0:	7b7b      	ldrb	r3, [r7, #13]
 80032a2:	b21b      	sxth	r3, r3
 80032a4:	4313      	orrs	r3, r2
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	805a      	strh	r2, [r3, #2]

        /* Read accelerometer in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6858      	ldr	r0, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7a19      	ldrb	r1, [r3, #8]
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	2202      	movs	r2, #2
 80032c6:	9200      	str	r2, [sp, #0]
 80032c8:	223f      	movs	r2, #63	; 0x3f
 80032ca:	f7ff feb5 	bl	8003038 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80032ce:	7b3b      	ldrb	r3, [r7, #12]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	b21a      	sxth	r2, r3
 80032d4:	7b7b      	ldrb	r3, [r7, #13]
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b21b      	sxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80032e6:	b21a      	sxth	r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	809a      	strh	r2, [r3, #4]
 80032ec:	e009      	b.n	8003302 <GY87_ReadAccelerometer+0xce>

    } else {
        /* Wrong parameters */
        accelerometerValues->accelerometerX = 0;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2200      	movs	r2, #0
 80032f2:	801a      	strh	r2, [r3, #0]
        accelerometerValues->accelerometerY = 0;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	805a      	strh	r2, [r3, #2]
        accelerometerValues->accelerometerZ = 0;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	809a      	strh	r2, [r3, #4]
    }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <GY87_ReadTemperatureSensor>:

int16_t GY87_ReadTemperatureSensor(GY87_HandleTypeDef_t * hgy87) {
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af02      	add	r7, sp, #8
 8003310:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 8003312:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8003316:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8003318:	2324      	movs	r3, #36	; 0x24
 800331a:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hgy87) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <GY87_ReadTemperatureSensor+0x1c>
        return 0;
 8003322:	2300      	movs	r3, #0
 8003324:	e01b      	b.n	800335e <GY87_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6858      	ldr	r0, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7a19      	ldrb	r1, [r3, #8]
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	2202      	movs	r2, #2
 8003334:	9200      	str	r2, [sp, #0]
 8003336:	2241      	movs	r2, #65	; 0x41
 8003338:	f7ff fe7e 	bl	8003038 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 800333c:	7a3b      	ldrb	r3, [r7, #8]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	b21a      	sxth	r2, r3
 8003342:	7a7b      	ldrb	r3, [r7, #9]
 8003344:	b21b      	sxth	r3, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	b21b      	sxth	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003350:	fb92 f3f3 	sdiv	r3, r2, r3
 8003354:	b29a      	uxth	r2, r3
 8003356:	89bb      	ldrh	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	b21b      	sxth	r3, r3
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <GY87_ReadMagnetometer>:

void GY87_ReadMagnetometer(GY87_HandleTypeDef_t * hgy87, GY87_magnetometerValues_t * magnetometerValues) {
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af02      	add	r7, sp, #8
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 1;
 8003370:	2301      	movs	r3, #1
 8003372:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != magnetometerValues) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d051      	beq.n	800341e <GY87_ReadMagnetometer+0xb8>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d04e      	beq.n	800341e <GY87_ReadMagnetometer+0xb8>

        /* Read magnetometer in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6858      	ldr	r0, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7a19      	ldrb	r1, [r3, #8]
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	2202      	movs	r2, #2
 800338e:	9200      	str	r2, [sp, #0]
 8003390:	2249      	movs	r2, #73	; 0x49
 8003392:	f7ff fe51 	bl	8003038 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8003396:	7b7b      	ldrb	r3, [r7, #13]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	b21a      	sxth	r2, r3
 800339c:	7b3b      	ldrb	r3, [r7, #12]
 800339e:	b21b      	sxth	r3, r3
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80033ae:	b21a      	sxth	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	801a      	strh	r2, [r3, #0]

        /* Read magnetometer in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6858      	ldr	r0, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7a19      	ldrb	r1, [r3, #8]
 80033bc:	f107 030c 	add.w	r3, r7, #12
 80033c0:	2202      	movs	r2, #2
 80033c2:	9200      	str	r2, [sp, #0]
 80033c4:	224b      	movs	r2, #75	; 0x4b
 80033c6:	f7ff fe37 	bl	8003038 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 80033ca:	7b7b      	ldrb	r3, [r7, #13]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	b21a      	sxth	r2, r3
 80033d0:	7b3b      	ldrb	r3, [r7, #12]
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	4313      	orrs	r3, r2
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033de:	fb92 f3f3 	sdiv	r3, r2, r3
 80033e2:	b21a      	sxth	r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	805a      	strh	r2, [r3, #2]

        /* Read magnetometer in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6858      	ldr	r0, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7a19      	ldrb	r1, [r3, #8]
 80033f0:	f107 030c 	add.w	r3, r7, #12
 80033f4:	2202      	movs	r2, #2
 80033f6:	9200      	str	r2, [sp, #0]
 80033f8:	224d      	movs	r2, #77	; 0x4d
 80033fa:	f7ff fe1d 	bl	8003038 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 80033fe:	7b7b      	ldrb	r3, [r7, #13]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	b21a      	sxth	r2, r3
 8003404:	7b3b      	ldrb	r3, [r7, #12]
 8003406:	b21b      	sxth	r3, r3
 8003408:	4313      	orrs	r3, r2
 800340a:	b21b      	sxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003412:	fb92 f3f3 	sdiv	r3, r2, r3
 8003416:	b21a      	sxth	r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	809a      	strh	r2, [r3, #4]
 800341c:	e009      	b.n	8003432 <GY87_ReadMagnetometer+0xcc>

    } else {
        /* Wrong parameters */
        magnetometerValues->magnetometerX = 0;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2200      	movs	r2, #0
 8003422:	801a      	strh	r2, [r3, #0]
        magnetometerValues->magnetometerY = 0;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	805a      	strh	r2, [r3, #2]
        magnetometerValues->magnetometerZ = 0;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2200      	movs	r2, #0
 800342e:	809a      	strh	r2, [r3, #4]
    }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	0000      	movs	r0, r0
 800343c:	0000      	movs	r0, r0
	...

08003440 <GY87_ReadMagnetometerHeading>:

float GY87_ReadMagnetometerHeading(GY87_HandleTypeDef_t * hgy87) {
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameters */
    if (NULL != hgy87) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04d      	beq.n	80034ea <GY87_ReadMagnetometerHeading+0xaa>

        GY87_ReadMagnetometer(hgy87, &magnetometerValues);
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff86 	bl	8003366 <GY87_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(-magnetometerValues.magnetometerY, -magnetometerValues.magnetometerX) * QMC5883L_RADIANS_TO_DEGREES_CONST + QMC5883L_MAGNETIC_DECLINATION + QMC5883L_CALIBRATION_OFFSET;
 800345a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800345e:	425b      	negs	r3, r3
 8003460:	4618      	mov	r0, r3
 8003462:	f7fd f867 	bl	8000534 <__aeabi_i2d>
 8003466:	4604      	mov	r4, r0
 8003468:	460d      	mov	r5, r1
 800346a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800346e:	425b      	negs	r3, r3
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f85f 	bl	8000534 <__aeabi_i2d>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	ec43 2b11 	vmov	d1, r2, r3
 800347e:	ec45 4b10 	vmov	d0, r4, r5
 8003482:	f00e fdbb 	bl	8011ffc <atan2>
 8003486:	ec51 0b10 	vmov	r0, r1, d0
 800348a:	a320      	add	r3, pc, #128	; (adr r3, 800350c <GY87_ReadMagnetometerHeading+0xcc>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f7fd f8ba 	bl	8000608 <__aeabi_dmul>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	f7fc fefa 	bl	800029c <__adddf3>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <GY87_ReadMagnetometerHeading+0xc0>)
 80034b6:	f7fc fef1 	bl	800029c <__adddf3>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f7fd fb99 	bl	8000bf8 <__aeabi_d2f>
 80034c6:	4603      	mov	r3, r0
 80034c8:	617b      	str	r3, [r7, #20]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 80034ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	d50a      	bpl.n	80034ee <GY87_ReadMagnetometerHeading+0xae>
            heading += 360;
 80034d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80034dc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003504 <GY87_ReadMagnetometerHeading+0xc4>
 80034e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034e4:	edc7 7a05 	vstr	s15, [r7, #20]
 80034e8:	e001      	b.n	80034ee <GY87_ReadMagnetometerHeading+0xae>
        }

    } else {

        heading = -1;
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <GY87_ReadMagnetometerHeading+0xc8>)
 80034ec:	617b      	str	r3, [r7, #20]
    }

    return heading;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	ee07 3a90 	vmov	s15, r3
}
 80034f4:	eeb0 0a67 	vmov.f32	s0, s15
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bdb0      	pop	{r4, r5, r7, pc}
 80034fe:	bf00      	nop
 8003500:	403a0000 	.word	0x403a0000
 8003504:	43b40000 	.word	0x43b40000
 8003508:	bf800000 	.word	0xbf800000
 800350c:	1a63c1f8 	.word	0x1a63c1f8
 8003510:	404ca5dc 	.word	0x404ca5dc

08003514 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

	/* BEGIN MODIFY 1 */
	CDC_Transmit_FS(string, strlen((const char *)string));
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fc feaf 	bl	8000280 <strlen>
 8003522:	4603      	mov	r3, r0
 8003524:	b29b      	uxth	r3, r3
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f00b fa8f 	bl	800ea4c <CDC_Transmit_FS>
	/* END MODIFY 1 */
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b090      	sub	sp, #64	; 0x40
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <LOG+0x16>
        return false;
 800354a:	2300      	movs	r3, #0
 800354c:	e048      	b.n	80035e0 <LOG+0xa8>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d901      	bls.n	8003558 <LOG+0x20>
        return false;
 8003554:	2300      	movs	r3, #0
 8003556:	e043      	b.n	80035e0 <LOG+0xa8>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	222e      	movs	r2, #46	; 0x2e
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f00c fcf8 	bl	800ff5a <memset>

    if (LOG_INFORMATION == logType) {
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <LOG+0x4a>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <LOG+0xb0>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f00c fcf5 	bl	800ff6a <strcat>
 8003580:	e022      	b.n	80035c8 <LOG+0x90>
    } else if (LOG_DEBUGGING == logType) {
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d108      	bne.n	800359a <LOG+0x62>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <LOG+0xb4>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	f107 030c 	add.w	r3, r7, #12
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f00c fce9 	bl	800ff6a <strcat>
 8003598:	e016      	b.n	80035c8 <LOG+0x90>
    } else if (LOG_WARNING == logType) {
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d108      	bne.n	80035b2 <LOG+0x7a>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <LOG+0xb8>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f00c fcdd 	bl	800ff6a <strcat>
 80035b0:	e00a      	b.n	80035c8 <LOG+0x90>
    } else if (LOG_ERROR == logType) {
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d107      	bne.n	80035c8 <LOG+0x90>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <LOG+0xbc>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f00c fcd1 	bl	800ff6a <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f00c fccb 	bl	800ff6a <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff9b 	bl	8003514 <USB_Write>

    return true;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3740      	adds	r7, #64	; 0x40
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000014 	.word	0x20000014
 80035ec:	20000018 	.word	0x20000018
 80035f0:	2000001c 	.word	0x2000001c
 80035f4:	20000020 	.word	0x20000020

080035f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_Init+0x40>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <HAL_Init+0x40>)
 8003602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_Init+0x40>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <HAL_Init+0x40>)
 800360e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_Init+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a07      	ldr	r2, [pc, #28]	; (8003638 <HAL_Init+0x40>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003620:	2003      	movs	r0, #3
 8003622:	f000 fd13 	bl	800404c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003626:	200f      	movs	r0, #15
 8003628:	f000 f808 	bl	800363c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800362c:	f7fe fbd0 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023c00 	.word	0x40023c00

0800363c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_InitTick+0x54>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_InitTick+0x58>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4619      	mov	r1, r3
 800364e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003652:	fbb3 f3f1 	udiv	r3, r3, r1
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fd2f 	bl	80040be <HAL_SYSTICK_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00e      	b.n	8003688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0f      	cmp	r3, #15
 800366e:	d80a      	bhi.n	8003686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003670:	2200      	movs	r2, #0
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003678:	f000 fcf3 	bl	8004062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800367c:	4a06      	ldr	r2, [pc, #24]	; (8003698 <HAL_InitTick+0x5c>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000000 	.word	0x20000000
 8003694:	20000028 	.word	0x20000028
 8003698:	20000024 	.word	0x20000024

0800369c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_IncTick+0x20>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_IncTick+0x24>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_IncTick+0x24>)
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000028 	.word	0x20000028
 80036c0:	20000c18 	.word	0x20000c18

080036c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return uwTick;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_GetTick+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000c18 	.word	0x20000c18

080036dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e4:	f7ff ffee 	bl	80036c4 <HAL_GetTick>
 80036e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f4:	d005      	beq.n	8003702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_Delay+0x44>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003702:	bf00      	nop
 8003704:	f7ff ffde 	bl	80036c4 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	429a      	cmp	r2, r3
 8003712:	d8f7      	bhi.n	8003704 <HAL_Delay+0x28>
  {
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000028 	.word	0x20000028

08003724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e033      	b.n	80037a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fe fb70 	bl	8001e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800376a:	f023 0302 	bic.w	r3, r3, #2
 800376e:	f043 0202 	orr.w	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa86 	bl	8003c88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
 8003792:	e001      	b.n	8003798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_Start+0x1a>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e097      	b.n	80038f6 <HAL_ADC_Start+0x14a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d018      	beq.n	800380e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037ec:	4b45      	ldr	r3, [pc, #276]	; (8003904 <HAL_ADC_Start+0x158>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a45      	ldr	r2, [pc, #276]	; (8003908 <HAL_ADC_Start+0x15c>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0c9a      	lsrs	r2, r3, #18
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003800:	e002      	b.n	8003808 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3b01      	subs	r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f9      	bne.n	8003802 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d15f      	bne.n	80038dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	d106      	bne.n	800386a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f023 0206 	bic.w	r2, r3, #6
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
 8003868:	e002      	b.n	8003870 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <HAL_ADC_Start+0x160>)
 800387a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003884:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d129      	bne.n	80038f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	e020      	b.n	80038f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a16      	ldr	r2, [pc, #88]	; (8003910 <HAL_ADC_Start+0x164>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d11b      	bne.n	80038f4 <HAL_ADC_Start+0x148>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d114      	bne.n	80038f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	e00b      	b.n	80038f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f043 0210 	orr.w	r2, r3, #16
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000000 	.word	0x20000000
 8003908:	431bde83 	.word	0x431bde83
 800390c:	40012300 	.word	0x40012300
 8003910:	40012000 	.word	0x40012000

08003914 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003930:	d113      	bne.n	800395a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800393c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003940:	d10b      	bne.n	800395a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e063      	b.n	8003a22 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800395a:	f7ff feb3 	bl	80036c4 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003960:	e021      	b.n	80039a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003968:	d01d      	beq.n	80039a6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_ADC_PollForConversion+0x6c>
 8003970:	f7ff fea8 	bl	80036c4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d212      	bcs.n	80039a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d00b      	beq.n	80039a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0204 	orr.w	r2, r3, #4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e03d      	b.n	8003a22 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d1d6      	bne.n	8003962 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0212 	mvn.w	r2, #18
 80039bc:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d123      	bne.n	8003a20 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11f      	bne.n	8003a20 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d111      	bne.n	8003a20 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f043 0201 	orr.w	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e105      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x228>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d925      	bls.n	8003abc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68d9      	ldr	r1, [r3, #12]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	3b1e      	subs	r3, #30
 8003a86:	2207      	movs	r2, #7
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	400a      	ands	r2, r1
 8003a94:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68d9      	ldr	r1, [r3, #12]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4403      	add	r3, r0
 8003aae:	3b1e      	subs	r3, #30
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	e022      	b.n	8003b02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6919      	ldr	r1, [r3, #16]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	400a      	ands	r2, r1
 8003ade:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6919      	ldr	r1, [r3, #16]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4618      	mov	r0, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4403      	add	r3, r0
 8003af8:	409a      	lsls	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d824      	bhi.n	8003b54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	3b05      	subs	r3, #5
 8003b1c:	221f      	movs	r2, #31
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	400a      	ands	r2, r1
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4618      	mov	r0, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	3b05      	subs	r3, #5
 8003b46:	fa00 f203 	lsl.w	r2, r0, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34
 8003b52:	e04c      	b.n	8003bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b0c      	cmp	r3, #12
 8003b5a:	d824      	bhi.n	8003ba6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3b23      	subs	r3, #35	; 0x23
 8003b6e:	221f      	movs	r2, #31
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43da      	mvns	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	3b23      	subs	r3, #35	; 0x23
 8003b98:	fa00 f203 	lsl.w	r2, r0, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba4:	e023      	b.n	8003bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3b41      	subs	r3, #65	; 0x41
 8003bb8:	221f      	movs	r2, #31
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	3b41      	subs	r3, #65	; 0x41
 8003be2:	fa00 f203 	lsl.w	r2, r0, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_ADC_ConfigChannel+0x234>)
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <HAL_ADC_ConfigChannel+0x238>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d109      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x1cc>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b12      	cmp	r3, #18
 8003c02:	d105      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a19      	ldr	r2, [pc, #100]	; (8003c7c <HAL_ADC_ConfigChannel+0x238>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d123      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x21e>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d003      	beq.n	8003c2a <HAL_ADC_ConfigChannel+0x1e6>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b11      	cmp	r3, #17
 8003c28:	d11b      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d111      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_ADC_ConfigChannel+0x23c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <HAL_ADC_ConfigChannel+0x240>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	0c9a      	lsrs	r2, r3, #18
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c54:	e002      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f9      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40012300 	.word	0x40012300
 8003c7c:	40012000 	.word	0x40012000
 8003c80:	20000000 	.word	0x20000000
 8003c84:	431bde83 	.word	0x431bde83

08003c88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c90:	4b79      	ldr	r3, [pc, #484]	; (8003e78 <ADC_Init+0x1f0>)
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	4a58      	ldr	r2, [pc, #352]	; (8003e7c <ADC_Init+0x1f4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d022      	beq.n	8003d66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6899      	ldr	r1, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	e00f      	b.n	8003d86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d84:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0202 	bic.w	r2, r2, #2
 8003d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7e1b      	ldrb	r3, [r3, #24]
 8003da0:	005a      	lsls	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01b      	beq.n	8003dec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	3b01      	subs	r3, #1
 8003de0:	035a      	lsls	r2, r3, #13
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	e007      	b.n	8003dfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	051a      	lsls	r2, r3, #20
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6899      	ldr	r1, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e3e:	025a      	lsls	r2, r3, #9
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	029a      	lsls	r2, r3, #10
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40012300 	.word	0x40012300
 8003e7c:	0f000001 	.word	0x0f000001

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	; 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fe0:	f3bf 8f4f 	dsb	sy
}
 8003fe4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <__NVIC_SystemReset+0x24>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003fee:	4904      	ldr	r1, [pc, #16]	; (8004000 <__NVIC_SystemReset+0x24>)
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <__NVIC_SystemReset+0x28>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ff6:	f3bf 8f4f 	dsb	sy
}
 8003ffa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ffc:	bf00      	nop
 8003ffe:	e7fd      	b.n	8003ffc <__NVIC_SystemReset+0x20>
 8004000:	e000ed00 	.word	0xe000ed00
 8004004:	05fa0004 	.word	0x05fa0004

08004008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004018:	d301      	bcc.n	800401e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401a:	2301      	movs	r3, #1
 800401c:	e00f      	b.n	800403e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401e:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <SysTick_Config+0x40>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004026:	210f      	movs	r1, #15
 8004028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402c:	f7ff ff78 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <SysTick_Config+0x40>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <SysTick_Config+0x40>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000e010 	.word	0xe000e010

0800404c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff13 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004074:	f7ff ff28 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 8004078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff ff78 	bl	8003f74 <NVIC_EncodePriority>
 8004084:	4602      	mov	r2, r0
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff47 	bl	8003f20 <__NVIC_SetPriority>
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	4603      	mov	r3, r0
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ff1b 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80040ba:	f7ff ff8f 	bl	8003fdc <__NVIC_SystemReset>

080040be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ff9e 	bl	8004008 <SysTick_Config>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040e4:	f7ff faee 	bl	80036c4 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e099      	b.n	8004228 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004114:	e00f      	b.n	8004136 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004116:	f7ff fad5 	bl	80036c4 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b05      	cmp	r3, #5
 8004122:	d908      	bls.n	8004136 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2203      	movs	r2, #3
 800412e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e078      	b.n	8004228 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e8      	bne.n	8004116 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4b38      	ldr	r3, [pc, #224]	; (8004230 <HAL_DMA_Init+0x158>)
 8004150:	4013      	ands	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004162:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800417a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2b04      	cmp	r3, #4
 800418e:	d107      	bne.n	80041a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	4313      	orrs	r3, r2
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0307 	bic.w	r3, r3, #7
 80041b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d117      	bne.n	80041fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00e      	beq.n	80041fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8e5 	bl	80043ac <DMA_CheckFifoParam>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2240      	movs	r2, #64	; 0x40
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e016      	b.n	8004228 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f89c 	bl	8004340 <DMA_CalcBaseAndBitshift>
 8004208:	4603      	mov	r3, r0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	223f      	movs	r2, #63	; 0x3f
 8004212:	409a      	lsls	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	f010803f 	.word	0xf010803f

08004234 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_DMA_Start_IT+0x26>
 8004256:	2302      	movs	r3, #2
 8004258:	e040      	b.n	80042dc <HAL_DMA_Start_IT+0xa8>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d12f      	bne.n	80042ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f82e 	bl	80042e4 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428c:	223f      	movs	r2, #63	; 0x3f
 800428e:	409a      	lsls	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0216 	orr.w	r2, r2, #22
 80042a2:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0208 	orr.w	r2, r2, #8
 80042ba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e005      	b.n	80042da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 80042d6:	2302      	movs	r3, #2
 80042d8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042da:	7dfb      	ldrb	r3, [r7, #23]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d108      	bne.n	8004324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004322:	e007      	b.n	8004334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3b10      	subs	r3, #16
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <DMA_CalcBaseAndBitshift+0x64>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800435a:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <DMA_CalcBaseAndBitshift+0x68>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d909      	bls.n	8004382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	659a      	str	r2, [r3, #88]	; 0x58
 8004380:	e007      	b.n	8004392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	aaaaaaab 	.word	0xaaaaaaab
 80043a8:	08012784 	.word	0x08012784

080043ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11f      	bne.n	8004406 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d856      	bhi.n	800447a <DMA_CheckFifoParam+0xce>
 80043cc:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <DMA_CheckFifoParam+0x28>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043e5 	.word	0x080043e5
 80043d8:	080043f7 	.word	0x080043f7
 80043dc:	080043e5 	.word	0x080043e5
 80043e0:	0800447b 	.word	0x0800447b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d046      	beq.n	800447e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f4:	e043      	b.n	800447e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043fe:	d140      	bne.n	8004482 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004404:	e03d      	b.n	8004482 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440e:	d121      	bne.n	8004454 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d837      	bhi.n	8004486 <DMA_CheckFifoParam+0xda>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <DMA_CheckFifoParam+0x70>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	0800442d 	.word	0x0800442d
 8004420:	08004433 	.word	0x08004433
 8004424:	0800442d 	.word	0x0800442d
 8004428:	08004445 	.word	0x08004445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      break;
 8004430:	e030      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d025      	beq.n	800448a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004442:	e022      	b.n	800448a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800444c:	d11f      	bne.n	800448e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004452:	e01c      	b.n	800448e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d903      	bls.n	8004462 <DMA_CheckFifoParam+0xb6>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d003      	beq.n	8004468 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004460:	e018      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
      break;
 8004466:	e015      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e00b      	b.n	8004492 <DMA_CheckFifoParam+0xe6>
      break;
 800447a:	bf00      	nop
 800447c:	e00a      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 800447e:	bf00      	nop
 8004480:	e008      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004482:	bf00      	nop
 8004484:	e006      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004492:	bf00      	nop
    }
  }

  return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	e159      	b.n	8004774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044c0:	2201      	movs	r2, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8148 	bne.w	800476e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d005      	beq.n	80044f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d130      	bne.n	8004558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	2203      	movs	r2, #3
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 0201 	and.w	r2, r3, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d017      	beq.n	8004594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d123      	bne.n	80045e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	220f      	movs	r2, #15
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2203      	movs	r2, #3
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a2 	beq.w	800476e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	4b57      	ldr	r3, [pc, #348]	; (800478c <HAL_GPIO_Init+0x2e8>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	4a56      	ldr	r2, [pc, #344]	; (800478c <HAL_GPIO_Init+0x2e8>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004638:	6453      	str	r3, [r2, #68]	; 0x44
 800463a:	4b54      	ldr	r3, [pc, #336]	; (800478c <HAL_GPIO_Init+0x2e8>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004646:	4a52      	ldr	r2, [pc, #328]	; (8004790 <HAL_GPIO_Init+0x2ec>)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	220f      	movs	r2, #15
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a49      	ldr	r2, [pc, #292]	; (8004794 <HAL_GPIO_Init+0x2f0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d019      	beq.n	80046a6 <HAL_GPIO_Init+0x202>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a48      	ldr	r2, [pc, #288]	; (8004798 <HAL_GPIO_Init+0x2f4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0x1fe>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a47      	ldr	r2, [pc, #284]	; (800479c <HAL_GPIO_Init+0x2f8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00d      	beq.n	800469e <HAL_GPIO_Init+0x1fa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a46      	ldr	r2, [pc, #280]	; (80047a0 <HAL_GPIO_Init+0x2fc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <HAL_GPIO_Init+0x1f6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a45      	ldr	r2, [pc, #276]	; (80047a4 <HAL_GPIO_Init+0x300>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_GPIO_Init+0x1f2>
 8004692:	2304      	movs	r3, #4
 8004694:	e008      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 8004696:	2307      	movs	r3, #7
 8004698:	e006      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 800469a:	2303      	movs	r3, #3
 800469c:	e004      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 800469e:	2302      	movs	r3, #2
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 80046a6:	2300      	movs	r3, #0
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	f002 0203 	and.w	r2, r2, #3
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	4093      	lsls	r3, r2
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046b8:	4935      	ldr	r1, [pc, #212]	; (8004790 <HAL_GPIO_Init+0x2ec>)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	3302      	adds	r3, #2
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046c6:	4b38      	ldr	r3, [pc, #224]	; (80047a8 <HAL_GPIO_Init+0x304>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ea:	4a2f      	ldr	r2, [pc, #188]	; (80047a8 <HAL_GPIO_Init+0x304>)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f0:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <HAL_GPIO_Init+0x304>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004714:	4a24      	ldr	r2, [pc, #144]	; (80047a8 <HAL_GPIO_Init+0x304>)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800471a:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <HAL_GPIO_Init+0x304>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800473e:	4a1a      	ldr	r2, [pc, #104]	; (80047a8 <HAL_GPIO_Init+0x304>)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004744:	4b18      	ldr	r3, [pc, #96]	; (80047a8 <HAL_GPIO_Init+0x304>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004768:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <HAL_GPIO_Init+0x304>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3301      	adds	r3, #1
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b0f      	cmp	r3, #15
 8004778:	f67f aea2 	bls.w	80044c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	3724      	adds	r7, #36	; 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	40013800 	.word	0x40013800
 8004794:	40020000 	.word	0x40020000
 8004798:	40020400 	.word	0x40020400
 800479c:	40020800 	.word	0x40020800
 80047a0:	40020c00 	.word	0x40020c00
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40013c00 	.word	0x40013c00

080047ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e001      	b.n	80047ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
 80047e8:	4613      	mov	r3, r2
 80047ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047ec:	787b      	ldrb	r3, [r7, #1]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047f8:	e003      	b.n	8004802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	041a      	lsls	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	619a      	str	r2, [r3, #24]
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e12b      	b.n	8004a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd fb3a 	bl	8001eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	; 0x24
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004874:	f002 fe38 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 8004878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4a81      	ldr	r2, [pc, #516]	; (8004a84 <HAL_I2C_Init+0x274>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d807      	bhi.n	8004894 <HAL_I2C_Init+0x84>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a80      	ldr	r2, [pc, #512]	; (8004a88 <HAL_I2C_Init+0x278>)
 8004888:	4293      	cmp	r3, r2
 800488a:	bf94      	ite	ls
 800488c:	2301      	movls	r3, #1
 800488e:	2300      	movhi	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e006      	b.n	80048a2 <HAL_I2C_Init+0x92>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a7d      	ldr	r2, [pc, #500]	; (8004a8c <HAL_I2C_Init+0x27c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	bf94      	ite	ls
 800489c:	2301      	movls	r3, #1
 800489e:	2300      	movhi	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0e7      	b.n	8004a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a78      	ldr	r2, [pc, #480]	; (8004a90 <HAL_I2C_Init+0x280>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0c9b      	lsrs	r3, r3, #18
 80048b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a6a      	ldr	r2, [pc, #424]	; (8004a84 <HAL_I2C_Init+0x274>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d802      	bhi.n	80048e4 <HAL_I2C_Init+0xd4>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3301      	adds	r3, #1
 80048e2:	e009      	b.n	80048f8 <HAL_I2C_Init+0xe8>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	4a69      	ldr	r2, [pc, #420]	; (8004a94 <HAL_I2C_Init+0x284>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	3301      	adds	r3, #1
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800490a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	495c      	ldr	r1, [pc, #368]	; (8004a84 <HAL_I2C_Init+0x274>)
 8004914:	428b      	cmp	r3, r1
 8004916:	d819      	bhi.n	800494c <HAL_I2C_Init+0x13c>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e59      	subs	r1, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fbb1 f3f3 	udiv	r3, r1, r3
 8004926:	1c59      	adds	r1, r3, #1
 8004928:	f640 73fc 	movw	r3, #4092	; 0xffc
 800492c:	400b      	ands	r3, r1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_I2C_Init+0x138>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1e59      	subs	r1, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004946:	e051      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 8004948:	2304      	movs	r3, #4
 800494a:	e04f      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d111      	bne.n	8004978 <HAL_I2C_Init+0x168>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1e58      	subs	r0, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	440b      	add	r3, r1
 8004962:	fbb0 f3f3 	udiv	r3, r0, r3
 8004966:	3301      	adds	r3, #1
 8004968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e012      	b.n	800499e <HAL_I2C_Init+0x18e>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	0099      	lsls	r1, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	fbb0 f3f3 	udiv	r3, r0, r3
 800498e:	3301      	adds	r3, #1
 8004990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Init+0x196>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e022      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10e      	bne.n	80049cc <HAL_I2C_Init+0x1bc>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1e58      	subs	r0, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6859      	ldr	r1, [r3, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	440b      	add	r3, r1
 80049bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ca:	e00f      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1e58      	subs	r0, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	0099      	lsls	r1, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	6809      	ldr	r1, [r1, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6911      	ldr	r1, [r2, #16]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	4311      	orrs	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	000186a0 	.word	0x000186a0
 8004a88:	001e847f 	.word	0x001e847f
 8004a8c:	003d08ff 	.word	0x003d08ff
 8004a90:	431bde83 	.word	0x431bde83
 8004a94:	10624dd3 	.word	0x10624dd3

08004a98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	817b      	strh	r3, [r7, #10]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	813b      	strh	r3, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ab2:	f7fe fe07 	bl	80036c4 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	f040 80d9 	bne.w	8004c78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2319      	movs	r3, #25
 8004acc:	2201      	movs	r2, #1
 8004ace:	496d      	ldr	r1, [pc, #436]	; (8004c84 <HAL_I2C_Mem_Write+0x1ec>)
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fc7f 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
 8004ade:	e0cc      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_I2C_Mem_Write+0x56>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0c5      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d007      	beq.n	8004b14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2221      	movs	r2, #33	; 0x21
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2240      	movs	r2, #64	; 0x40
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a3a      	ldr	r2, [r7, #32]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a4d      	ldr	r2, [pc, #308]	; (8004c88 <HAL_I2C_Mem_Write+0x1f0>)
 8004b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b56:	88f8      	ldrh	r0, [r7, #6]
 8004b58:	893a      	ldrh	r2, [r7, #8]
 8004b5a:	8979      	ldrh	r1, [r7, #10]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4603      	mov	r3, r0
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fab6 	bl	80050d8 <I2C_RequestMemoryWrite>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d052      	beq.n	8004c18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e081      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fd00 	bl	8005580 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00d      	beq.n	8004ba2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d107      	bne.n	8004b9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e06b      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d11b      	bne.n	8004c18 <HAL_I2C_Mem_Write+0x180>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d017      	beq.n	8004c18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1aa      	bne.n	8004b76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fcec 	bl	8005602 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00d      	beq.n	8004c4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d107      	bne.n	8004c48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e016      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e000      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c78:	2302      	movs	r3, #2
  }
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	00100002 	.word	0x00100002
 8004c88:	ffff0000 	.word	0xffff0000

08004c8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08c      	sub	sp, #48	; 0x30
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	813b      	strh	r3, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ca6:	f7fe fd0d 	bl	80036c4 <HAL_GetTick>
 8004caa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	f040 8208 	bne.w	80050ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	2319      	movs	r3, #25
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	497b      	ldr	r1, [pc, #492]	; (8004eb0 <HAL_I2C_Mem_Read+0x224>)
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fb85 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e1fb      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_I2C_Mem_Read+0x56>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e1f4      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d007      	beq.n	8004d08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2222      	movs	r2, #34	; 0x22
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2240      	movs	r2, #64	; 0x40
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a5b      	ldr	r2, [pc, #364]	; (8004eb4 <HAL_I2C_Mem_Read+0x228>)
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d4a:	88f8      	ldrh	r0, [r7, #6]
 8004d4c:	893a      	ldrh	r2, [r7, #8]
 8004d4e:	8979      	ldrh	r1, [r7, #10]
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	4603      	mov	r3, r0
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 fa52 	bl	8005204 <I2C_RequestMemoryRead>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e1b0      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d113      	bne.n	8004d9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d72:	2300      	movs	r3, #0
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e184      	b.n	80050a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d11b      	bne.n	8004dda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e164      	b.n	80050a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d11b      	bne.n	8004e1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	e144      	b.n	80050a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e30:	e138      	b.n	80050a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	f200 80f1 	bhi.w	800501e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d123      	bne.n	8004e8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fc1b 	bl	8005684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e139      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e8a:	e10b      	b.n	80050a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d14e      	bne.n	8004f32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4906      	ldr	r1, [pc, #24]	; (8004eb8 <HAL_I2C_Mem_Read+0x22c>)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fa98 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e10e      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
 8004eae:	bf00      	nop
 8004eb0:	00100002 	.word	0x00100002
 8004eb4:	ffff0000 	.word	0xffff0000
 8004eb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f30:	e0b8      	b.n	80050a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4966      	ldr	r1, [pc, #408]	; (80050d4 <HAL_I2C_Mem_Read+0x448>)
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fa49 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0bf      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	2200      	movs	r2, #0
 8004f96:	494f      	ldr	r1, [pc, #316]	; (80050d4 <HAL_I2C_Mem_Read+0x448>)
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fa1b 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e091      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800501c:	e042      	b.n	80050a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fb2e 	bl	8005684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e04c      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b04      	cmp	r3, #4
 8005070:	d118      	bne.n	80050a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f aec2 	bne.w	8004e32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e000      	b.n	80050cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050ca:	2302      	movs	r3, #2
  }
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3728      	adds	r7, #40	; 0x28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	00010004 	.word	0x00010004

080050d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	4608      	mov	r0, r1
 80050e2:	4611      	mov	r1, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	817b      	strh	r3, [r7, #10]
 80050ea:	460b      	mov	r3, r1
 80050ec:	813b      	strh	r3, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005100:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	2200      	movs	r2, #0
 800510a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f960 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00d      	beq.n	8005136 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005128:	d103      	bne.n	8005132 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005130:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e05f      	b.n	80051f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005136:	897b      	ldrh	r3, [r7, #10]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005144:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	492d      	ldr	r1, [pc, #180]	; (8005200 <I2C_RequestMemoryWrite+0x128>)
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f998 	bl	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e04c      	b.n	80051f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005174:	6a39      	ldr	r1, [r7, #32]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fa02 	bl	8005580 <I2C_WaitOnTXEFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00d      	beq.n	800519e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	2b04      	cmp	r3, #4
 8005188:	d107      	bne.n	800519a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e02b      	b.n	80051f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d105      	bne.n	80051b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051a4:	893b      	ldrh	r3, [r7, #8]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	611a      	str	r2, [r3, #16]
 80051ae:	e021      	b.n	80051f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051b0:	893b      	ldrh	r3, [r7, #8]
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	6a39      	ldr	r1, [r7, #32]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f9dc 	bl	8005580 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d107      	bne.n	80051e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e005      	b.n	80051f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ea:	893b      	ldrh	r3, [r7, #8]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	00010002 	.word	0x00010002

08005204 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	817b      	strh	r3, [r7, #10]
 8005216:	460b      	mov	r3, r1
 8005218:	813b      	strh	r3, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800522c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	2200      	movs	r2, #0
 8005246:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8c2 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005264:	d103      	bne.n	800526e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0aa      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005272:	897b      	ldrh	r3, [r7, #10]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005280:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	4952      	ldr	r1, [pc, #328]	; (80053d0 <I2C_RequestMemoryRead+0x1cc>)
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f8fa 	bl	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e097      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	6a39      	ldr	r1, [r7, #32]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f964 	bl	8005580 <I2C_WaitOnTXEFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d107      	bne.n	80052d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e076      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d105      	bne.n	80052ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	611a      	str	r2, [r3, #16]
 80052ea:	e021      	b.n	8005330 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052ec:	893b      	ldrh	r3, [r7, #8]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	6a39      	ldr	r1, [r7, #32]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f93e 	bl	8005580 <I2C_WaitOnTXEFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b04      	cmp	r3, #4
 8005310:	d107      	bne.n	8005322 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005320:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e050      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005326:	893b      	ldrh	r3, [r7, #8]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005332:	6a39      	ldr	r1, [r7, #32]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f923 	bl	8005580 <I2C_WaitOnTXEFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	2b04      	cmp	r3, #4
 8005346:	d107      	bne.n	8005358 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005356:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e035      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2200      	movs	r2, #0
 8005374:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f82b 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00d      	beq.n	80053a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005392:	d103      	bne.n	800539c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e013      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053a0:	897b      	ldrh	r3, [r7, #10]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	4906      	ldr	r1, [pc, #24]	; (80053d0 <I2C_RequestMemoryRead+0x1cc>)
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f863 	bl	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	00010002 	.word	0x00010002

080053d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053e4:	e025      	b.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ec:	d021      	beq.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fe f969 	bl	80036c4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d116      	bne.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e023      	b.n	800547a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10d      	bne.n	8005458 <I2C_WaitOnFlagUntilTimeout+0x84>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	43da      	mvns	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4013      	ands	r3, r2
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	bf0c      	ite	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	2300      	movne	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	e00c      	b.n	8005472 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	43da      	mvns	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4013      	ands	r3, r2
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	429a      	cmp	r2, r3
 8005476:	d0b6      	beq.n	80053e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005490:	e051      	b.n	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a0:	d123      	bne.n	80054ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0204 	orr.w	r2, r3, #4
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e046      	b.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f0:	d021      	beq.n	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7fe f8e7 	bl	80036c4 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d116      	bne.n	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e020      	b.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d10c      	bne.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	43da      	mvns	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e00b      	b.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	43da      	mvns	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4013      	ands	r3, r2
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d18d      	bne.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800558c:	e02d      	b.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f8ce 	bl	8005730 <I2C_IsAcknowledgeFailed>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e02d      	b.n	80055fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a4:	d021      	beq.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7fe f88d 	bl	80036c4 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d116      	bne.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e007      	b.n	80055fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d1ca      	bne.n	800558e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800560e:	e02d      	b.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f88d 	bl	8005730 <I2C_IsAcknowledgeFailed>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e02d      	b.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005626:	d021      	beq.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005628:	f7fe f84c 	bl	80036c4 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d116      	bne.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	f043 0220 	orr.w	r2, r3, #32
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e007      	b.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b04      	cmp	r3, #4
 8005678:	d1ca      	bne.n	8005610 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005690:	e042      	b.n	8005718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b10      	cmp	r3, #16
 800569e:	d119      	bne.n	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0210 	mvn.w	r2, #16
 80056a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e029      	b.n	8005728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d4:	f7fd fff6 	bl	80036c4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d302      	bcc.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d116      	bne.n	8005718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e007      	b.n	8005728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d1b5      	bne.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005746:	d11b      	bne.n	8005780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	f043 0204 	orr.w	r2, r3, #4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800578e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005790:	b08f      	sub	sp, #60	; 0x3c
 8005792:	af0a      	add	r7, sp, #40	; 0x28
 8005794:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e10f      	b.n	80059c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f009 fa8e 	bl	800ecdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2203      	movs	r2, #3
 80057c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f003 f95f 	bl	8008aa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	687e      	ldr	r6, [r7, #4]
 80057ec:	466d      	mov	r5, sp
 80057ee:	f106 0410 	add.w	r4, r6, #16
 80057f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005802:	1d33      	adds	r3, r6, #4
 8005804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005806:	6838      	ldr	r0, [r7, #0]
 8005808:	f003 f836 	bl	8008878 <USB_CoreInit>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e0d0      	b.n	80059c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f003 f94d 	bl	8008ac4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
 800582e:	e04a      	b.n	80058c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005830:	7bfa      	ldrb	r2, [r7, #15]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	333d      	adds	r3, #61	; 0x3d
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005844:	7bfa      	ldrb	r2, [r7, #15]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	333c      	adds	r3, #60	; 0x3c
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005858:	7bfa      	ldrb	r2, [r7, #15]
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	b298      	uxth	r0, r3
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	3344      	adds	r3, #68	; 0x44
 800586c:	4602      	mov	r2, r0
 800586e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	3340      	adds	r3, #64	; 0x40
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005884:	7bfa      	ldrb	r2, [r7, #15]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	3348      	adds	r3, #72	; 0x48
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	334c      	adds	r3, #76	; 0x4c
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	3354      	adds	r3, #84	; 0x54
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	3301      	adds	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
 80058c6:	7bfa      	ldrb	r2, [r7, #15]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d3af      	bcc.n	8005830 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	e044      	b.n	8005960 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058d6:	7bfa      	ldrb	r2, [r7, #15]
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058ec:	7bfa      	ldrb	r2, [r7, #15]
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4613      	mov	r3, r2
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005918:	7bfa      	ldrb	r2, [r7, #15]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005944:	7bfa      	ldrb	r2, [r7, #15]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	3301      	adds	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	7bfa      	ldrb	r2, [r7, #15]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	d3b5      	bcc.n	80058d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	687e      	ldr	r6, [r7, #4]
 8005972:	466d      	mov	r5, sp
 8005974:	f106 0410 	add.w	r4, r6, #16
 8005978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800597a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800597c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800597e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005980:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005984:	e885 0003 	stmia.w	r5, {r0, r1}
 8005988:	1d33      	adds	r3, r6, #4
 800598a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800598c:	6838      	ldr	r0, [r7, #0]
 800598e:	f003 f8e5 	bl	8008b5c <USB_DevInit>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e00d      	b.n	80059c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f004 fa34 	bl	8009e26 <USB_DevDisconnect>

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_PCD_Start+0x1c>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e020      	b.n	8005a26 <HAL_PCD_Start+0x5e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d109      	bne.n	8005a08 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d005      	beq.n	8005a08 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f003 f837 	bl	8008a80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f004 f9e4 	bl	8009de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a2e:	b590      	push	{r4, r7, lr}
 8005a30:	b08d      	sub	sp, #52	; 0x34
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f004 faa2 	bl	8009f8e <USB_GetMode>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 848a 	bne.w	8006366 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f004 fa06 	bl	8009e68 <USB_ReadInterrupts>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8480 	beq.w	8006364 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	0a1b      	lsrs	r3, r3, #8
 8005a6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f004 f9f3 	bl	8009e68 <USB_ReadInterrupts>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d107      	bne.n	8005a9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f002 0202 	and.w	r2, r2, #2
 8005a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f004 f9e1 	bl	8009e68 <USB_ReadInterrupts>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d161      	bne.n	8005b74 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0210 	bic.w	r2, r2, #16
 8005abe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	3304      	adds	r3, #4
 8005ade:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	0c5b      	lsrs	r3, r3, #17
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d124      	bne.n	8005b36 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d035      	beq.n	8005b64 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6a38      	ldr	r0, [r7, #32]
 8005b0c:	f004 f818 	bl	8009b40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	091b      	lsrs	r3, r3, #4
 8005b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b1c:	441a      	add	r2, r3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b2e:	441a      	add	r2, r3
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	621a      	str	r2, [r3, #32]
 8005b34:	e016      	b.n	8005b64 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	0c5b      	lsrs	r3, r3, #17
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	2b06      	cmp	r3, #6
 8005b40:	d110      	bne.n	8005b64 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b48:	2208      	movs	r2, #8
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6a38      	ldr	r0, [r7, #32]
 8005b4e:	f003 fff7 	bl	8009b40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b5e:	441a      	add	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0210 	orr.w	r2, r2, #16
 8005b72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f004 f975 	bl	8009e68 <USB_ReadInterrupts>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b88:	f040 80a7 	bne.w	8005cda <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f004 f97a 	bl	8009e8e <USB_ReadDevAllOutEpInterrupt>
 8005b9a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005b9c:	e099      	b.n	8005cd2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 808e 	beq.w	8005cc6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f004 f99e 	bl	8009ef6 <USB_ReadDevOutEPInterrupt>
 8005bba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00c      	beq.n	8005be0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fec2 	bl	8006964 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00c      	beq.n	8005c04 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 ff98 	bl	8006b34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d030      	beq.n	8005c8c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d109      	bne.n	8005c4a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c48:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	78db      	ldrb	r3, [r3, #3]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d108      	bne.n	8005c7a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f009 f92d 	bl	800eed4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	461a      	mov	r2, r3
 8005c88:	2302      	movs	r3, #2
 8005c8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d008      	beq.n	8005ca8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	2320      	movs	r3, #32
 8005ca6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cc4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	3301      	adds	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f47f af62 	bne.w	8005b9e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f004 f8c2 	bl	8009e68 <USB_ReadInterrupts>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cee:	f040 80db 	bne.w	8005ea8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f004 f8e3 	bl	8009ec2 <USB_ReadDevAllInEpInterrupt>
 8005cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005d02:	e0cd      	b.n	8005ea0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80c2 	beq.w	8005e94 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f004 f909 	bl	8009f32 <USB_ReadDevInEPInterrupt>
 8005d20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d057      	beq.n	8005ddc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	2201      	movs	r2, #1
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69f9      	ldr	r1, [r7, #28]
 8005d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2301      	movs	r3, #1
 8005d60:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d132      	bne.n	8005dd0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	334c      	adds	r3, #76	; 0x4c
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4403      	add	r3, r0
 8005d8a:	3348      	adds	r3, #72	; 0x48
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4419      	add	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4403      	add	r3, r0
 8005d9e:	334c      	adds	r3, #76	; 0x4c
 8005da0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d113      	bne.n	8005dd0 <HAL_PCD_IRQHandler+0x3a2>
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	3354      	adds	r3, #84	; 0x54
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d108      	bne.n	8005dd0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2101      	movs	r1, #1
 8005dcc:	f004 f910 	bl	8009ff0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f009 f801 	bl	800edde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	461a      	mov	r2, r3
 8005df4:	2308      	movs	r3, #8
 8005df6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f003 0310 	and.w	r3, r3, #16
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	461a      	mov	r2, r3
 8005e10:	2310      	movs	r3, #16
 8005e12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d023      	beq.n	8005e82 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e3c:	6a38      	ldr	r0, [r7, #32]
 8005e3e:	f002 fff1 	bl	8008e24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e44:	4613      	mov	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	3338      	adds	r3, #56	; 0x38
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	3304      	adds	r3, #4
 8005e54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	78db      	ldrb	r3, [r3, #3]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d108      	bne.n	8005e70 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2200      	movs	r2, #0
 8005e62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f009 f844 	bl	800eef8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2302      	movs	r3, #2
 8005e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fcdb 	bl	800684a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	3301      	adds	r3, #1
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f47f af2e 	bne.w	8005d04 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f003 ffdb 	bl	8009e68 <USB_ReadInterrupts>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ebc:	d122      	bne.n	8005f04 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d108      	bne.n	8005eee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fec2 	bl	8006c70 <HAL_PCDEx_LPM_Callback>
 8005eec:	e002      	b.n	8005ef4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f008 ffe2 	bl	800eeb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695a      	ldr	r2, [r3, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f003 ffad 	bl	8009e68 <USB_ReadInterrupts>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f18:	d112      	bne.n	8005f40 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d102      	bne.n	8005f30 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f008 ff9e 	bl	800ee6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695a      	ldr	r2, [r3, #20]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f3e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f003 ff8f 	bl	8009e68 <USB_ReadInterrupts>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f54:	f040 80b7 	bne.w	80060c6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2110      	movs	r1, #16
 8005f72:	4618      	mov	r0, r3
 8005f74:	f002 ff56 	bl	8008e24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f7c:	e046      	b.n	800600c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fc4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fe4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006000:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006004:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	3301      	adds	r3, #1
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006012:	429a      	cmp	r2, r3
 8006014:	d3b3      	bcc.n	8005f7e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006024:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006028:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	2b00      	cmp	r3, #0
 8006030:	d016      	beq.n	8006060 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006042:	f043 030b 	orr.w	r3, r3, #11
 8006046:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006058:	f043 030b 	orr.w	r3, r3, #11
 800605c:	6453      	str	r3, [r2, #68]	; 0x44
 800605e:	e015      	b.n	800608c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800606e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006072:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006076:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006086:	f043 030b 	orr.w	r3, r3, #11
 800608a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800609a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800609e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060b0:	461a      	mov	r2, r3
 80060b2:	f003 ff9d 	bl	8009ff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80060c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f003 fecc 	bl	8009e68 <USB_ReadInterrupts>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060da:	d124      	bne.n	8006126 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f003 ff62 	bl	8009faa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f002 ff17 	bl	8008f1e <USB_GetDevSpeed>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681c      	ldr	r4, [r3, #0]
 80060fc:	f001 f9e8 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 8006100:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006106:	b2db      	uxtb	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	4620      	mov	r0, r4
 800610c:	f002 fc16 	bl	800893c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f008 fe8c 	bl	800ee2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006124:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f003 fe9c 	bl	8009e68 <USB_ReadInterrupts>
 8006130:	4603      	mov	r3, r0
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b08      	cmp	r3, #8
 8006138:	d10a      	bne.n	8006150 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f008 fe69 	bl	800ee12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f002 0208 	and.w	r2, r2, #8
 800614e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f003 fe87 	bl	8009e68 <USB_ReadInterrupts>
 800615a:	4603      	mov	r3, r0
 800615c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006160:	2b80      	cmp	r3, #128	; 0x80
 8006162:	d122      	bne.n	80061aa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006170:	2301      	movs	r3, #1
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
 8006174:	e014      	b.n	80061a0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	4613      	mov	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d105      	bne.n	800619a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	b2db      	uxtb	r3, r3
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fb27 	bl	80067e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	3301      	adds	r3, #1
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d3e5      	bcc.n	8006176 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f003 fe5a 	bl	8009e68 <USB_ReadInterrupts>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061be:	d13b      	bne.n	8006238 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061c0:	2301      	movs	r3, #1
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
 80061c4:	e02b      	b.n	800621e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	4613      	mov	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	3340      	adds	r3, #64	; 0x40
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d115      	bne.n	8006218 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80061ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da12      	bge.n	8006218 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	333f      	adds	r3, #63	; 0x3f
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800620e:	b2db      	uxtb	r3, r3
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fae8 	bl	80067e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	3301      	adds	r3, #1
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006224:	429a      	cmp	r2, r3
 8006226:	d3ce      	bcc.n	80061c6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f003 fe13 	bl	8009e68 <USB_ReadInterrupts>
 8006242:	4603      	mov	r3, r0
 8006244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800624c:	d155      	bne.n	80062fa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800624e:	2301      	movs	r3, #1
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
 8006252:	e045      	b.n	80062e0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006268:	4613      	mov	r3, r2
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d12e      	bne.n	80062da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800627c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800627e:	2b00      	cmp	r3, #0
 8006280:	da2b      	bge.n	80062da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800628e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006292:	429a      	cmp	r2, r3
 8006294:	d121      	bne.n	80062da <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	4613      	mov	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	440b      	add	r3, r1
 80062a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80062a8:	2201      	movs	r2, #1
 80062aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062d6:	6053      	str	r3, [r2, #4]
            break;
 80062d8:	e007      	b.n	80062ea <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	3301      	adds	r3, #1
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d3b4      	bcc.n	8006254 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80062f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f003 fdb2 	bl	8009e68 <USB_ReadInterrupts>
 8006304:	4603      	mov	r3, r0
 8006306:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d10a      	bne.n	8006326 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f008 fe03 	bl	800ef1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f003 fd9c 	bl	8009e68 <USB_ReadInterrupts>
 8006330:	4603      	mov	r3, r0
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b04      	cmp	r3, #4
 8006338:	d115      	bne.n	8006366 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f008 fdf3 	bl	800ef38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	e000      	b.n	8006366 <HAL_PCD_IRQHandler+0x938>
      return;
 8006364:	bf00      	nop
    }
  }
}
 8006366:	3734      	adds	r7, #52	; 0x34
 8006368:	46bd      	mov	sp, r7
 800636a:	bd90      	pop	{r4, r7, pc}

0800636c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_PCD_SetAddress+0x1a>
 8006382:	2302      	movs	r3, #2
 8006384:	e013      	b.n	80063ae <HAL_PCD_SetAddress+0x42>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	78fa      	ldrb	r2, [r7, #3]
 8006392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	78fa      	ldrb	r2, [r7, #3]
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f003 fcfa 	bl	8009d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	461a      	mov	r2, r3
 80063c4:	4603      	mov	r3, r0
 80063c6:	70fb      	strb	r3, [r7, #3]
 80063c8:	460b      	mov	r3, r1
 80063ca:	803b      	strh	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	da0f      	bge.n	80063fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	f003 020f 	and.w	r2, r3, #15
 80063e2:	4613      	mov	r3, r2
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	3338      	adds	r3, #56	; 0x38
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	4413      	add	r3, r2
 80063f0:	3304      	adds	r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	705a      	strb	r2, [r3, #1]
 80063fa:	e00f      	b.n	800641c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	f003 020f 	and.w	r2, r3, #15
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	4413      	add	r3, r2
 8006412:	3304      	adds	r3, #4
 8006414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006428:	883a      	ldrh	r2, [r7, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	78ba      	ldrb	r2, [r7, #2]
 8006432:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	785b      	ldrb	r3, [r3, #1]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006446:	78bb      	ldrb	r3, [r7, #2]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d102      	bne.n	8006452 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_PCD_EP_Open+0xaa>
 800645c:	2302      	movs	r3, #2
 800645e:	e00e      	b.n	800647e <HAL_PCD_EP_Open+0xc8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68f9      	ldr	r1, [r7, #12]
 800646e:	4618      	mov	r0, r3
 8006470:	f002 fd7a 	bl	8008f68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800647c:	7afb      	ldrb	r3, [r7, #11]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006496:	2b00      	cmp	r3, #0
 8006498:	da0f      	bge.n	80064ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	3338      	adds	r3, #56	; 0x38
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	3304      	adds	r3, #4
 80064b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	705a      	strb	r2, [r3, #1]
 80064b8:	e00f      	b.n	80064da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	f003 020f 	and.w	r2, r3, #15
 80064c0:	4613      	mov	r3, r2
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4413      	add	r3, r2
 80064d0:	3304      	adds	r3, #4
 80064d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_PCD_EP_Close+0x6e>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e00e      	b.n	8006512 <HAL_PCD_EP_Close+0x8c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68f9      	ldr	r1, [r7, #12]
 8006502:	4618      	mov	r0, r3
 8006504:	f002 fdb8 	bl	8009078 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	460b      	mov	r3, r1
 8006528:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800652a:	7afb      	ldrb	r3, [r7, #11]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	4613      	mov	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	3304      	adds	r3, #4
 8006542:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2200      	movs	r2, #0
 8006554:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2200      	movs	r2, #0
 800655a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	b2da      	uxtb	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d102      	bne.n	8006576 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	6979      	ldr	r1, [r7, #20]
 800658e:	f003 f897 	bl	80096c0 <USB_EP0StartXfer>
 8006592:	e008      	b.n	80065a6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	f002 fe45 	bl	8009230 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	f003 020f 	and.w	r2, r3, #15
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4613      	mov	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80065d2:	681b      	ldr	r3, [r3, #0]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	460b      	mov	r3, r1
 80065ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	f003 020f 	and.w	r2, r3, #15
 80065f6:	4613      	mov	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	3338      	adds	r3, #56	; 0x38
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	3304      	adds	r3, #4
 8006606:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2200      	movs	r2, #0
 8006618:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2201      	movs	r2, #1
 800661e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006620:	7afb      	ldrb	r3, [r7, #11]
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	b2da      	uxtb	r2, r3
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d102      	bne.n	800663a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	6979      	ldr	r1, [r7, #20]
 8006652:	f003 f835 	bl	80096c0 <USB_EP0StartXfer>
 8006656:	e008      	b.n	800666a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	6979      	ldr	r1, [r7, #20]
 8006666:	f002 fde3 	bl	8009230 <USB_EPStartXfer>
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	f003 020f 	and.w	r2, r3, #15
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	429a      	cmp	r2, r3
 800668c:	d901      	bls.n	8006692 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e050      	b.n	8006734 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006696:	2b00      	cmp	r3, #0
 8006698:	da0f      	bge.n	80066ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	f003 020f 	and.w	r2, r3, #15
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	3338      	adds	r3, #56	; 0x38
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	3304      	adds	r3, #4
 80066b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	705a      	strb	r2, [r3, #1]
 80066b8:	e00d      	b.n	80066d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	4613      	mov	r3, r2
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	3304      	adds	r3, #4
 80066ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_PCD_EP_SetStall+0x82>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e01e      	b.n	8006734 <HAL_PCD_EP_SetStall+0xc0>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	4618      	mov	r0, r3
 8006706:	f003 fa73 	bl	8009bf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	b2d9      	uxtb	r1, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006724:	461a      	mov	r2, r3
 8006726:	f003 fc63 	bl	8009ff0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 020f 	and.w	r2, r3, #15
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d901      	bls.n	800675a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e042      	b.n	80067e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800675a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800675e:	2b00      	cmp	r3, #0
 8006760:	da0f      	bge.n	8006782 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	f003 020f 	and.w	r2, r3, #15
 8006768:	4613      	mov	r3, r2
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	3338      	adds	r3, #56	; 0x38
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	4413      	add	r3, r2
 8006776:	3304      	adds	r3, #4
 8006778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	705a      	strb	r2, [r3, #1]
 8006780:	e00f      	b.n	80067a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	f003 020f 	and.w	r2, r3, #15
 8006788:	4613      	mov	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	4413      	add	r3, r2
 8006798:	3304      	adds	r3, #4
 800679a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_PCD_EP_ClrStall+0x86>
 80067be:	2302      	movs	r3, #2
 80067c0:	e00e      	b.n	80067e0 <HAL_PCD_EP_ClrStall+0xa4>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f003 fa7b 	bl	8009ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80067f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da0c      	bge.n	8006816 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	f003 020f 	and.w	r2, r3, #15
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	3338      	adds	r3, #56	; 0x38
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4413      	add	r3, r2
 8006810:	3304      	adds	r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e00c      	b.n	8006830 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	f003 020f 	and.w	r2, r3, #15
 800681c:	4613      	mov	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	4413      	add	r3, r2
 800682c:	3304      	adds	r3, #4
 800682e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68f9      	ldr	r1, [r7, #12]
 8006836:	4618      	mov	r0, r3
 8006838:	f003 f89a 	bl	8009970 <USB_EPStopXfer>
 800683c:	4603      	mov	r3, r0
 800683e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006840:	7afb      	ldrb	r3, [r7, #11]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b08a      	sub	sp, #40	; 0x28
 800684e:	af02      	add	r7, sp, #8
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	3338      	adds	r3, #56	; 0x38
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	3304      	adds	r3, #4
 8006870:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	429a      	cmp	r2, r3
 800687c:	d901      	bls.n	8006882 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e06c      	b.n	800695c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	429a      	cmp	r2, r3
 8006896:	d902      	bls.n	800689e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	3303      	adds	r3, #3
 80068a2:	089b      	lsrs	r3, r3, #2
 80068a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068a6:	e02b      	b.n	8006900 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	699a      	ldr	r2, [r3, #24]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d902      	bls.n	80068c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	3303      	adds	r3, #3
 80068c8:	089b      	lsrs	r3, r3, #2
 80068ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6919      	ldr	r1, [r3, #16]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	4603      	mov	r3, r0
 80068e2:	6978      	ldr	r0, [r7, #20]
 80068e4:	f003 f8ee 	bl	8009ac4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	441a      	add	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	441a      	add	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	429a      	cmp	r2, r3
 8006914:	d809      	bhi.n	800692a <PCD_WriteEmptyTxFifo+0xe0>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1a      	ldr	r2, [r3, #32]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1be      	bne.n	80068a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	429a      	cmp	r2, r3
 8006934:	d811      	bhi.n	800695a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	2201      	movs	r2, #1
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	43db      	mvns	r3, r3
 8006950:	6939      	ldr	r1, [r7, #16]
 8006952:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006956:	4013      	ands	r3, r2
 8006958:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	333c      	adds	r3, #60	; 0x3c
 800697c:	3304      	adds	r3, #4
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d17b      	bne.n	8006a92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d015      	beq.n	80069d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4a61      	ldr	r2, [pc, #388]	; (8006b2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	f240 80b9 	bls.w	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 80b3 	beq.w	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c6:	461a      	mov	r2, r3
 80069c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069cc:	6093      	str	r3, [r2, #8]
 80069ce:	e0a7      	b.n	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e6:	461a      	mov	r2, r3
 80069e8:	2320      	movs	r3, #32
 80069ea:	6093      	str	r3, [r2, #8]
 80069ec:	e098      	b.n	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f040 8093 	bne.w	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	4a4b      	ldr	r2, [pc, #300]	; (8006b2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d90f      	bls.n	8006a22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1e:	6093      	str	r3, [r2, #8]
 8006a20:	e07e      	b.n	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	4413      	add	r3, r2
 8006a34:	3304      	adds	r3, #4
 8006a36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	0159      	lsls	r1, r3, #5
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	440b      	add	r3, r1
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d114      	bne.n	8006a84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	2101      	movs	r1, #1
 8006a70:	f003 fabe 	bl	8009ff0 <USB_EP0_OutStart>
 8006a74:	e006      	b.n	8006a84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	441a      	add	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f008 f98c 	bl	800eda8 <HAL_PCD_DataOutStageCallback>
 8006a90:	e046      	b.n	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4a26      	ldr	r2, [pc, #152]	; (8006b30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d124      	bne.n	8006ae4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ab6:	6093      	str	r3, [r2, #8]
 8006ab8:	e032      	b.n	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f008 f963 	bl	800eda8 <HAL_PCD_DataOutStageCallback>
 8006ae2:	e01d      	b.n	8006b20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d114      	bne.n	8006b14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	4613      	mov	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d108      	bne.n	8006b14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2100      	movs	r1, #0
 8006b10:	f003 fa6e 	bl	8009ff0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f008 f944 	bl	800eda8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	4f54300a 	.word	0x4f54300a
 8006b30:	4f54310a 	.word	0x4f54310a

08006b34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	333c      	adds	r3, #60	; 0x3c
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d90e      	bls.n	8006b88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	461a      	mov	r2, r3
 8006b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f008 f8fb 	bl	800ed84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a0a      	ldr	r2, [pc, #40]	; (8006bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d90c      	bls.n	8006bb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d108      	bne.n	8006bb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ba8:	461a      	mov	r2, r3
 8006baa:	2101      	movs	r1, #1
 8006bac:	f003 fa20 	bl	8009ff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	4f54300a 	.word	0x4f54300a

08006bc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d107      	bne.n	8006bee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006bde:	883b      	ldrh	r3, [r7, #0]
 8006be0:	0419      	lsls	r1, r3, #16
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	629a      	str	r2, [r3, #40]	; 0x28
 8006bec:	e028      	b.n	8006c40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]
 8006c00:	e00d      	b.n	8006c1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	3340      	adds	r3, #64	; 0x40
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	4413      	add	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
 8006c1e:	7bfa      	ldrb	r2, [r7, #15]
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d3ec      	bcc.n	8006c02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c28:	883b      	ldrh	r3, [r7, #0]
 8006c2a:	0418      	lsls	r0, r3, #16
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4302      	orrs	r2, r0
 8006c38:	3340      	adds	r3, #64	; 0x40
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	460b      	mov	r3, r1
 8006c58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	887a      	ldrh	r2, [r7, #2]
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e267      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d075      	beq.n	8006d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ca6:	4b88      	ldr	r3, [pc, #544]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d00c      	beq.n	8006ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cb2:	4b85      	ldr	r3, [pc, #532]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d112      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cbe:	4b82      	ldr	r3, [pc, #520]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cca:	d10b      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ccc:	4b7e      	ldr	r3, [pc, #504]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05b      	beq.n	8006d90 <HAL_RCC_OscConfig+0x108>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d157      	bne.n	8006d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e242      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cec:	d106      	bne.n	8006cfc <HAL_RCC_OscConfig+0x74>
 8006cee:	4b76      	ldr	r3, [pc, #472]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a75      	ldr	r2, [pc, #468]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e01d      	b.n	8006d38 <HAL_RCC_OscConfig+0xb0>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d04:	d10c      	bne.n	8006d20 <HAL_RCC_OscConfig+0x98>
 8006d06:	4b70      	ldr	r3, [pc, #448]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6f      	ldr	r2, [pc, #444]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	4b6d      	ldr	r3, [pc, #436]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a6c      	ldr	r2, [pc, #432]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	e00b      	b.n	8006d38 <HAL_RCC_OscConfig+0xb0>
 8006d20:	4b69      	ldr	r3, [pc, #420]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a68      	ldr	r2, [pc, #416]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	4b66      	ldr	r3, [pc, #408]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a65      	ldr	r2, [pc, #404]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d013      	beq.n	8006d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d40:	f7fc fcc0 	bl	80036c4 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d48:	f7fc fcbc 	bl	80036c4 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b64      	cmp	r3, #100	; 0x64
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e207      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5a:	4b5b      	ldr	r3, [pc, #364]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0f0      	beq.n	8006d48 <HAL_RCC_OscConfig+0xc0>
 8006d66:	e014      	b.n	8006d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d68:	f7fc fcac 	bl	80036c4 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d70:	f7fc fca8 	bl	80036c4 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b64      	cmp	r3, #100	; 0x64
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e1f3      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d82:	4b51      	ldr	r3, [pc, #324]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1f0      	bne.n	8006d70 <HAL_RCC_OscConfig+0xe8>
 8006d8e:	e000      	b.n	8006d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d063      	beq.n	8006e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d9e:	4b4a      	ldr	r3, [pc, #296]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 030c 	and.w	r3, r3, #12
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006daa:	4b47      	ldr	r3, [pc, #284]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d11c      	bne.n	8006df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006db6:	4b44      	ldr	r3, [pc, #272]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d116      	bne.n	8006df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dc2:	4b41      	ldr	r3, [pc, #260]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d005      	beq.n	8006dda <HAL_RCC_OscConfig+0x152>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d001      	beq.n	8006dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e1c7      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dda:	4b3b      	ldr	r3, [pc, #236]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4937      	ldr	r1, [pc, #220]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dee:	e03a      	b.n	8006e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d020      	beq.n	8006e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006df8:	4b34      	ldr	r3, [pc, #208]	; (8006ecc <HAL_RCC_OscConfig+0x244>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfe:	f7fc fc61 	bl	80036c4 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e06:	f7fc fc5d 	bl	80036c4 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e1a8      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e18:	4b2b      	ldr	r3, [pc, #172]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f0      	beq.n	8006e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e24:	4b28      	ldr	r3, [pc, #160]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4925      	ldr	r1, [pc, #148]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	600b      	str	r3, [r1, #0]
 8006e38:	e015      	b.n	8006e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e3a:	4b24      	ldr	r3, [pc, #144]	; (8006ecc <HAL_RCC_OscConfig+0x244>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e40:	f7fc fc40 	bl	80036c4 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e48:	f7fc fc3c 	bl	80036c4 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e187      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e5a:	4b1b      	ldr	r3, [pc, #108]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f0      	bne.n	8006e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d036      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d016      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <HAL_RCC_OscConfig+0x248>)
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e80:	f7fc fc20 	bl	80036c4 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e88:	f7fc fc1c 	bl	80036c4 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e167      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <HAL_RCC_OscConfig+0x200>
 8006ea6:	e01b      	b.n	8006ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <HAL_RCC_OscConfig+0x248>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eae:	f7fc fc09 	bl	80036c4 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eb4:	e00e      	b.n	8006ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eb6:	f7fc fc05 	bl	80036c4 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d907      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e150      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	42470000 	.word	0x42470000
 8006ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ed4:	4b88      	ldr	r3, [pc, #544]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1ea      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 8097 	beq.w	800701c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ef2:	4b81      	ldr	r3, [pc, #516]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10f      	bne.n	8006f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]
 8006f02:	4b7d      	ldr	r3, [pc, #500]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	4a7c      	ldr	r2, [pc, #496]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0e:	4b7a      	ldr	r3, [pc, #488]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f1e:	4b77      	ldr	r3, [pc, #476]	; (80070fc <HAL_RCC_OscConfig+0x474>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d118      	bne.n	8006f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f2a:	4b74      	ldr	r3, [pc, #464]	; (80070fc <HAL_RCC_OscConfig+0x474>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a73      	ldr	r2, [pc, #460]	; (80070fc <HAL_RCC_OscConfig+0x474>)
 8006f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f36:	f7fc fbc5 	bl	80036c4 <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f3e:	f7fc fbc1 	bl	80036c4 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e10c      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f50:	4b6a      	ldr	r3, [pc, #424]	; (80070fc <HAL_RCC_OscConfig+0x474>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d106      	bne.n	8006f72 <HAL_RCC_OscConfig+0x2ea>
 8006f64:	4b64      	ldr	r3, [pc, #400]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f68:	4a63      	ldr	r2, [pc, #396]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f6a:	f043 0301 	orr.w	r3, r3, #1
 8006f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f70:	e01c      	b.n	8006fac <HAL_RCC_OscConfig+0x324>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2b05      	cmp	r3, #5
 8006f78:	d10c      	bne.n	8006f94 <HAL_RCC_OscConfig+0x30c>
 8006f7a:	4b5f      	ldr	r3, [pc, #380]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7e:	4a5e      	ldr	r2, [pc, #376]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f80:	f043 0304 	orr.w	r3, r3, #4
 8006f84:	6713      	str	r3, [r2, #112]	; 0x70
 8006f86:	4b5c      	ldr	r3, [pc, #368]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	4a5b      	ldr	r2, [pc, #364]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f8c:	f043 0301 	orr.w	r3, r3, #1
 8006f90:	6713      	str	r3, [r2, #112]	; 0x70
 8006f92:	e00b      	b.n	8006fac <HAL_RCC_OscConfig+0x324>
 8006f94:	4b58      	ldr	r3, [pc, #352]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f98:	4a57      	ldr	r2, [pc, #348]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa0:	4b55      	ldr	r3, [pc, #340]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa4:	4a54      	ldr	r2, [pc, #336]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006fa6:	f023 0304 	bic.w	r3, r3, #4
 8006faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d015      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb4:	f7fc fb86 	bl	80036c4 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fba:	e00a      	b.n	8006fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fbc:	f7fc fb82 	bl	80036c4 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e0cb      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd2:	4b49      	ldr	r3, [pc, #292]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0ee      	beq.n	8006fbc <HAL_RCC_OscConfig+0x334>
 8006fde:	e014      	b.n	800700a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fe0:	f7fc fb70 	bl	80036c4 <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fe6:	e00a      	b.n	8006ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe8:	f7fc fb6c 	bl	80036c4 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e0b5      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ffe:	4b3e      	ldr	r3, [pc, #248]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1ee      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d105      	bne.n	800701c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007010:	4b39      	ldr	r3, [pc, #228]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	4a38      	ldr	r2, [pc, #224]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8007016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800701a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80a1 	beq.w	8007168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007026:	4b34      	ldr	r3, [pc, #208]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 030c 	and.w	r3, r3, #12
 800702e:	2b08      	cmp	r3, #8
 8007030:	d05c      	beq.n	80070ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	2b02      	cmp	r3, #2
 8007038:	d141      	bne.n	80070be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800703a:	4b31      	ldr	r3, [pc, #196]	; (8007100 <HAL_RCC_OscConfig+0x478>)
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007040:	f7fc fb40 	bl	80036c4 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007048:	f7fc fb3c 	bl	80036c4 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e087      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800705a:	4b27      	ldr	r3, [pc, #156]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f0      	bne.n	8007048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69da      	ldr	r2, [r3, #28]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	019b      	lsls	r3, r3, #6
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	3b01      	subs	r3, #1
 8007080:	041b      	lsls	r3, r3, #16
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	061b      	lsls	r3, r3, #24
 800708a:	491b      	ldr	r1, [pc, #108]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 800708c:	4313      	orrs	r3, r2
 800708e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007090:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <HAL_RCC_OscConfig+0x478>)
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007096:	f7fc fb15 	bl	80036c4 <HAL_GetTick>
 800709a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800709c:	e008      	b.n	80070b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800709e:	f7fc fb11 	bl	80036c4 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e05c      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070b0:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0f0      	beq.n	800709e <HAL_RCC_OscConfig+0x416>
 80070bc:	e054      	b.n	8007168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070be:	4b10      	ldr	r3, [pc, #64]	; (8007100 <HAL_RCC_OscConfig+0x478>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c4:	f7fc fafe 	bl	80036c4 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070cc:	f7fc fafa 	bl	80036c4 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e045      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070de:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <HAL_RCC_OscConfig+0x470>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1f0      	bne.n	80070cc <HAL_RCC_OscConfig+0x444>
 80070ea:	e03d      	b.n	8007168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d107      	bne.n	8007104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e038      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
 80070f8:	40023800 	.word	0x40023800
 80070fc:	40007000 	.word	0x40007000
 8007100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007104:	4b1b      	ldr	r3, [pc, #108]	; (8007174 <HAL_RCC_OscConfig+0x4ec>)
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d028      	beq.n	8007164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800711c:	429a      	cmp	r2, r3
 800711e:	d121      	bne.n	8007164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d11a      	bne.n	8007164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007134:	4013      	ands	r3, r2
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800713a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800713c:	4293      	cmp	r3, r2
 800713e:	d111      	bne.n	8007164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	085b      	lsrs	r3, r3, #1
 800714c:	3b01      	subs	r3, #1
 800714e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007150:	429a      	cmp	r2, r3
 8007152:	d107      	bne.n	8007164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007160:	429a      	cmp	r2, r3
 8007162:	d001      	beq.n	8007168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40023800 	.word	0x40023800

08007178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e0cc      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800718c:	4b68      	ldr	r3, [pc, #416]	; (8007330 <HAL_RCC_ClockConfig+0x1b8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d90c      	bls.n	80071b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719a:	4b65      	ldr	r3, [pc, #404]	; (8007330 <HAL_RCC_ClockConfig+0x1b8>)
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a2:	4b63      	ldr	r3, [pc, #396]	; (8007330 <HAL_RCC_ClockConfig+0x1b8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d001      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0b8      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d020      	beq.n	8007202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071cc:	4b59      	ldr	r3, [pc, #356]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	4a58      	ldr	r2, [pc, #352]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80071d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071e4:	4b53      	ldr	r3, [pc, #332]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	4a52      	ldr	r2, [pc, #328]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80071ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071f0:	4b50      	ldr	r3, [pc, #320]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	494d      	ldr	r1, [pc, #308]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d044      	beq.n	8007298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d107      	bne.n	8007226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007216:	4b47      	ldr	r3, [pc, #284]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d119      	bne.n	8007256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e07f      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d003      	beq.n	8007236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007232:	2b03      	cmp	r3, #3
 8007234:	d107      	bne.n	8007246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007236:	4b3f      	ldr	r3, [pc, #252]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e06f      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007246:	4b3b      	ldr	r3, [pc, #236]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e067      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007256:	4b37      	ldr	r3, [pc, #220]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f023 0203 	bic.w	r2, r3, #3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	4934      	ldr	r1, [pc, #208]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 8007264:	4313      	orrs	r3, r2
 8007266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007268:	f7fc fa2c 	bl	80036c4 <HAL_GetTick>
 800726c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800726e:	e00a      	b.n	8007286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007270:	f7fc fa28 	bl	80036c4 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	f241 3288 	movw	r2, #5000	; 0x1388
 800727e:	4293      	cmp	r3, r2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e04f      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007286:	4b2b      	ldr	r3, [pc, #172]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 020c 	and.w	r2, r3, #12
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	429a      	cmp	r2, r3
 8007296:	d1eb      	bne.n	8007270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007298:	4b25      	ldr	r3, [pc, #148]	; (8007330 <HAL_RCC_ClockConfig+0x1b8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d20c      	bcs.n	80072c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a6:	4b22      	ldr	r3, [pc, #136]	; (8007330 <HAL_RCC_ClockConfig+0x1b8>)
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ae:	4b20      	ldr	r3, [pc, #128]	; (8007330 <HAL_RCC_ClockConfig+0x1b8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d001      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e032      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072cc:	4b19      	ldr	r3, [pc, #100]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	4916      	ldr	r1, [pc, #88]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d009      	beq.n	80072fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	490e      	ldr	r1, [pc, #56]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072fe:	f000 f821 	bl	8007344 <HAL_RCC_GetSysClockFreq>
 8007302:	4602      	mov	r2, r0
 8007304:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <HAL_RCC_ClockConfig+0x1bc>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	091b      	lsrs	r3, r3, #4
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	490a      	ldr	r1, [pc, #40]	; (8007338 <HAL_RCC_ClockConfig+0x1c0>)
 8007310:	5ccb      	ldrb	r3, [r1, r3]
 8007312:	fa22 f303 	lsr.w	r3, r2, r3
 8007316:	4a09      	ldr	r2, [pc, #36]	; (800733c <HAL_RCC_ClockConfig+0x1c4>)
 8007318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <HAL_RCC_ClockConfig+0x1c8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f7fc f98c 	bl	800363c <HAL_InitTick>

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	40023c00 	.word	0x40023c00
 8007334:	40023800 	.word	0x40023800
 8007338:	0801276c 	.word	0x0801276c
 800733c:	20000000 	.word	0x20000000
 8007340:	20000024 	.word	0x20000024

08007344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007348:	b090      	sub	sp, #64	; 0x40
 800734a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	637b      	str	r3, [r7, #52]	; 0x34
 8007350:	2300      	movs	r3, #0
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007354:	2300      	movs	r3, #0
 8007356:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800735c:	4b59      	ldr	r3, [pc, #356]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 030c 	and.w	r3, r3, #12
 8007364:	2b08      	cmp	r3, #8
 8007366:	d00d      	beq.n	8007384 <HAL_RCC_GetSysClockFreq+0x40>
 8007368:	2b08      	cmp	r3, #8
 800736a:	f200 80a1 	bhi.w	80074b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HAL_RCC_GetSysClockFreq+0x34>
 8007372:	2b04      	cmp	r3, #4
 8007374:	d003      	beq.n	800737e <HAL_RCC_GetSysClockFreq+0x3a>
 8007376:	e09b      	b.n	80074b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007378:	4b53      	ldr	r3, [pc, #332]	; (80074c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800737c:	e09b      	b.n	80074b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800737e:	4b53      	ldr	r3, [pc, #332]	; (80074cc <HAL_RCC_GetSysClockFreq+0x188>)
 8007380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007382:	e098      	b.n	80074b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007384:	4b4f      	ldr	r3, [pc, #316]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800738e:	4b4d      	ldr	r3, [pc, #308]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d028      	beq.n	80073ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800739a:	4b4a      	ldr	r3, [pc, #296]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	099b      	lsrs	r3, r3, #6
 80073a0:	2200      	movs	r2, #0
 80073a2:	623b      	str	r3, [r7, #32]
 80073a4:	627a      	str	r2, [r7, #36]	; 0x24
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80073ac:	2100      	movs	r1, #0
 80073ae:	4b47      	ldr	r3, [pc, #284]	; (80074cc <HAL_RCC_GetSysClockFreq+0x188>)
 80073b0:	fb03 f201 	mul.w	r2, r3, r1
 80073b4:	2300      	movs	r3, #0
 80073b6:	fb00 f303 	mul.w	r3, r0, r3
 80073ba:	4413      	add	r3, r2
 80073bc:	4a43      	ldr	r2, [pc, #268]	; (80074cc <HAL_RCC_GetSysClockFreq+0x188>)
 80073be:	fba0 1202 	umull	r1, r2, r0, r2
 80073c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073c4:	460a      	mov	r2, r1
 80073c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80073c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ca:	4413      	add	r3, r2
 80073cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d0:	2200      	movs	r2, #0
 80073d2:	61bb      	str	r3, [r7, #24]
 80073d4:	61fa      	str	r2, [r7, #28]
 80073d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80073de:	f7f9 fc5b 	bl	8000c98 <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4613      	mov	r3, r2
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ea:	e053      	b.n	8007494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073ec:	4b35      	ldr	r3, [pc, #212]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	099b      	lsrs	r3, r3, #6
 80073f2:	2200      	movs	r2, #0
 80073f4:	613b      	str	r3, [r7, #16]
 80073f6:	617a      	str	r2, [r7, #20]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80073fe:	f04f 0b00 	mov.w	fp, #0
 8007402:	4652      	mov	r2, sl
 8007404:	465b      	mov	r3, fp
 8007406:	f04f 0000 	mov.w	r0, #0
 800740a:	f04f 0100 	mov.w	r1, #0
 800740e:	0159      	lsls	r1, r3, #5
 8007410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007414:	0150      	lsls	r0, r2, #5
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	ebb2 080a 	subs.w	r8, r2, sl
 800741e:	eb63 090b 	sbc.w	r9, r3, fp
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800742e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007436:	ebb2 0408 	subs.w	r4, r2, r8
 800743a:	eb63 0509 	sbc.w	r5, r3, r9
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	f04f 0300 	mov.w	r3, #0
 8007446:	00eb      	lsls	r3, r5, #3
 8007448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800744c:	00e2      	lsls	r2, r4, #3
 800744e:	4614      	mov	r4, r2
 8007450:	461d      	mov	r5, r3
 8007452:	eb14 030a 	adds.w	r3, r4, sl
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	eb45 030b 	adc.w	r3, r5, fp
 800745c:	607b      	str	r3, [r7, #4]
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800746a:	4629      	mov	r1, r5
 800746c:	028b      	lsls	r3, r1, #10
 800746e:	4621      	mov	r1, r4
 8007470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007474:	4621      	mov	r1, r4
 8007476:	028a      	lsls	r2, r1, #10
 8007478:	4610      	mov	r0, r2
 800747a:	4619      	mov	r1, r3
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	2200      	movs	r2, #0
 8007480:	60bb      	str	r3, [r7, #8]
 8007482:	60fa      	str	r2, [r7, #12]
 8007484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007488:	f7f9 fc06 	bl	8000c98 <__aeabi_uldivmod>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4613      	mov	r3, r2
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007494:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	3301      	adds	r3, #1
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80074a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80074ae:	e002      	b.n	80074b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80074b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80074b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3740      	adds	r7, #64	; 0x40
 80074bc:	46bd      	mov	sp, r7
 80074be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074c2:	bf00      	nop
 80074c4:	40023800 	.word	0x40023800
 80074c8:	00f42400 	.word	0x00f42400
 80074cc:	017d7840 	.word	0x017d7840

080074d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074d4:	4b03      	ldr	r3, [pc, #12]	; (80074e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80074d6:	681b      	ldr	r3, [r3, #0]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000000 	.word	0x20000000

080074e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80074ec:	f7ff fff0 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 80074f0:	4602      	mov	r2, r0
 80074f2:	4b05      	ldr	r3, [pc, #20]	; (8007508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	0a9b      	lsrs	r3, r3, #10
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	4903      	ldr	r1, [pc, #12]	; (800750c <HAL_RCC_GetPCLK1Freq+0x24>)
 80074fe:	5ccb      	ldrb	r3, [r1, r3]
 8007500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007504:	4618      	mov	r0, r3
 8007506:	bd80      	pop	{r7, pc}
 8007508:	40023800 	.word	0x40023800
 800750c:	0801277c 	.word	0x0801277c

08007510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007514:	f7ff ffdc 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 8007518:	4602      	mov	r2, r0
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	0b5b      	lsrs	r3, r3, #13
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	4903      	ldr	r1, [pc, #12]	; (8007534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007526:	5ccb      	ldrb	r3, [r1, r3]
 8007528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800752c:	4618      	mov	r0, r3
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40023800 	.word	0x40023800
 8007534:	0801277c 	.word	0x0801277c

08007538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e041      	b.n	80075ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fa fcee 	bl	8001f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	4619      	mov	r1, r3
 8007576:	4610      	mov	r0, r2
 8007578:	f000 f9a0 	bl	80078bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d109      	bne.n	80075fc <HAL_TIM_PWM_Start+0x24>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	bf14      	ite	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	2300      	moveq	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e022      	b.n	8007642 <HAL_TIM_PWM_Start+0x6a>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d109      	bne.n	8007616 <HAL_TIM_PWM_Start+0x3e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b01      	cmp	r3, #1
 800760c:	bf14      	ite	ne
 800760e:	2301      	movne	r3, #1
 8007610:	2300      	moveq	r3, #0
 8007612:	b2db      	uxtb	r3, r3
 8007614:	e015      	b.n	8007642 <HAL_TIM_PWM_Start+0x6a>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b08      	cmp	r3, #8
 800761a:	d109      	bne.n	8007630 <HAL_TIM_PWM_Start+0x58>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	bf14      	ite	ne
 8007628:	2301      	movne	r3, #1
 800762a:	2300      	moveq	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	e008      	b.n	8007642 <HAL_TIM_PWM_Start+0x6a>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	bf14      	ite	ne
 800763c:	2301      	movne	r3, #1
 800763e:	2300      	moveq	r3, #0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e068      	b.n	800771c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_TIM_PWM_Start+0x82>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007658:	e013      	b.n	8007682 <HAL_TIM_PWM_Start+0xaa>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b04      	cmp	r3, #4
 800765e:	d104      	bne.n	800766a <HAL_TIM_PWM_Start+0x92>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007668:	e00b      	b.n	8007682 <HAL_TIM_PWM_Start+0xaa>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b08      	cmp	r3, #8
 800766e:	d104      	bne.n	800767a <HAL_TIM_PWM_Start+0xa2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007678:	e003      	b.n	8007682 <HAL_TIM_PWM_Start+0xaa>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2202      	movs	r2, #2
 800767e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2201      	movs	r2, #1
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fb22 	bl	8007cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a23      	ldr	r2, [pc, #140]	; (8007724 <HAL_TIM_PWM_Start+0x14c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d107      	bne.n	80076aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <HAL_TIM_PWM_Start+0x14c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d018      	beq.n	80076e6 <HAL_TIM_PWM_Start+0x10e>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076bc:	d013      	beq.n	80076e6 <HAL_TIM_PWM_Start+0x10e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a19      	ldr	r2, [pc, #100]	; (8007728 <HAL_TIM_PWM_Start+0x150>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00e      	beq.n	80076e6 <HAL_TIM_PWM_Start+0x10e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a17      	ldr	r2, [pc, #92]	; (800772c <HAL_TIM_PWM_Start+0x154>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d009      	beq.n	80076e6 <HAL_TIM_PWM_Start+0x10e>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a16      	ldr	r2, [pc, #88]	; (8007730 <HAL_TIM_PWM_Start+0x158>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d004      	beq.n	80076e6 <HAL_TIM_PWM_Start+0x10e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a14      	ldr	r2, [pc, #80]	; (8007734 <HAL_TIM_PWM_Start+0x15c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d111      	bne.n	800770a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b06      	cmp	r3, #6
 80076f6:	d010      	beq.n	800771a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0201 	orr.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007708:	e007      	b.n	800771a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0201 	orr.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40010000 	.word	0x40010000
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800
 8007730:	40000c00 	.word	0x40000c00
 8007734:	40014000 	.word	0x40014000

08007738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007752:	2302      	movs	r3, #2
 8007754:	e0ae      	b.n	80078b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b0c      	cmp	r3, #12
 8007762:	f200 809f 	bhi.w	80078a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007766:	a201      	add	r2, pc, #4	; (adr r2, 800776c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	080077a1 	.word	0x080077a1
 8007770:	080078a5 	.word	0x080078a5
 8007774:	080078a5 	.word	0x080078a5
 8007778:	080078a5 	.word	0x080078a5
 800777c:	080077e1 	.word	0x080077e1
 8007780:	080078a5 	.word	0x080078a5
 8007784:	080078a5 	.word	0x080078a5
 8007788:	080078a5 	.word	0x080078a5
 800778c:	08007823 	.word	0x08007823
 8007790:	080078a5 	.word	0x080078a5
 8007794:	080078a5 	.word	0x080078a5
 8007798:	080078a5 	.word	0x080078a5
 800779c:	08007863 	.word	0x08007863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f908 	bl	80079bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0208 	orr.w	r2, r2, #8
 80077ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0204 	bic.w	r2, r2, #4
 80077ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6999      	ldr	r1, [r3, #24]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	619a      	str	r2, [r3, #24]
      break;
 80077de:	e064      	b.n	80078aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f94e 	bl	8007a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6999      	ldr	r1, [r3, #24]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	021a      	lsls	r2, r3, #8
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	619a      	str	r2, [r3, #24]
      break;
 8007820:	e043      	b.n	80078aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f999 	bl	8007b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0208 	orr.w	r2, r2, #8
 800783c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69da      	ldr	r2, [r3, #28]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0204 	bic.w	r2, r2, #4
 800784c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69d9      	ldr	r1, [r3, #28]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	61da      	str	r2, [r3, #28]
      break;
 8007860:	e023      	b.n	80078aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f9e3 	bl	8007c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800787c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800788c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69d9      	ldr	r1, [r3, #28]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	021a      	lsls	r2, r3, #8
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	61da      	str	r2, [r3, #28]
      break;
 80078a2:	e002      	b.n	80078aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
      break;
 80078a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a34      	ldr	r2, [pc, #208]	; (80079a0 <TIM_Base_SetConfig+0xe4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00f      	beq.n	80078f4 <TIM_Base_SetConfig+0x38>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078da:	d00b      	beq.n	80078f4 <TIM_Base_SetConfig+0x38>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a31      	ldr	r2, [pc, #196]	; (80079a4 <TIM_Base_SetConfig+0xe8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d007      	beq.n	80078f4 <TIM_Base_SetConfig+0x38>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a30      	ldr	r2, [pc, #192]	; (80079a8 <TIM_Base_SetConfig+0xec>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d003      	beq.n	80078f4 <TIM_Base_SetConfig+0x38>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a2f      	ldr	r2, [pc, #188]	; (80079ac <TIM_Base_SetConfig+0xf0>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d108      	bne.n	8007906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a25      	ldr	r2, [pc, #148]	; (80079a0 <TIM_Base_SetConfig+0xe4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d01b      	beq.n	8007946 <TIM_Base_SetConfig+0x8a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007914:	d017      	beq.n	8007946 <TIM_Base_SetConfig+0x8a>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a22      	ldr	r2, [pc, #136]	; (80079a4 <TIM_Base_SetConfig+0xe8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d013      	beq.n	8007946 <TIM_Base_SetConfig+0x8a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a21      	ldr	r2, [pc, #132]	; (80079a8 <TIM_Base_SetConfig+0xec>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00f      	beq.n	8007946 <TIM_Base_SetConfig+0x8a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a20      	ldr	r2, [pc, #128]	; (80079ac <TIM_Base_SetConfig+0xf0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00b      	beq.n	8007946 <TIM_Base_SetConfig+0x8a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <TIM_Base_SetConfig+0xf4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d007      	beq.n	8007946 <TIM_Base_SetConfig+0x8a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a1e      	ldr	r2, [pc, #120]	; (80079b4 <TIM_Base_SetConfig+0xf8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d003      	beq.n	8007946 <TIM_Base_SetConfig+0x8a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a1d      	ldr	r2, [pc, #116]	; (80079b8 <TIM_Base_SetConfig+0xfc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d108      	bne.n	8007958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a08      	ldr	r2, [pc, #32]	; (80079a0 <TIM_Base_SetConfig+0xe4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d103      	bne.n	800798c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	615a      	str	r2, [r3, #20]
}
 8007992:	bf00      	nop
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40010000 	.word	0x40010000
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40000c00 	.word	0x40000c00
 80079b0:	40014000 	.word	0x40014000
 80079b4:	40014400 	.word	0x40014400
 80079b8:	40014800 	.word	0x40014800

080079bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f023 0201 	bic.w	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f023 0302 	bic.w	r3, r3, #2
 8007a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1c      	ldr	r2, [pc, #112]	; (8007a84 <TIM_OC1_SetConfig+0xc8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d10c      	bne.n	8007a32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f023 0308 	bic.w	r3, r3, #8
 8007a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f023 0304 	bic.w	r3, r3, #4
 8007a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a13      	ldr	r2, [pc, #76]	; (8007a84 <TIM_OC1_SetConfig+0xc8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d111      	bne.n	8007a5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	621a      	str	r2, [r3, #32]
}
 8007a78:	bf00      	nop
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	40010000 	.word	0x40010000

08007a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0210 	bic.w	r2, r3, #16
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f023 0320 	bic.w	r3, r3, #32
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <TIM_OC2_SetConfig+0xd4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d10d      	bne.n	8007b04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a15      	ldr	r2, [pc, #84]	; (8007b5c <TIM_OC2_SetConfig+0xd4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d113      	bne.n	8007b34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	621a      	str	r2, [r3, #32]
}
 8007b4e:	bf00      	nop
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40010000 	.word	0x40010000

08007b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <TIM_OC3_SetConfig+0xd0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d10d      	bne.n	8007bda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a14      	ldr	r2, [pc, #80]	; (8007c30 <TIM_OC3_SetConfig+0xd0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d113      	bne.n	8007c0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	621a      	str	r2, [r3, #32]
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	40010000 	.word	0x40010000

08007c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	031b      	lsls	r3, r3, #12
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a10      	ldr	r2, [pc, #64]	; (8007cd0 <TIM_OC4_SetConfig+0x9c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d109      	bne.n	8007ca8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	019b      	lsls	r3, r3, #6
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	621a      	str	r2, [r3, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40010000 	.word	0x40010000

08007cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f003 031f 	and.w	r3, r3, #31
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a1a      	ldr	r2, [r3, #32]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	401a      	ands	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	621a      	str	r2, [r3, #32]
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e050      	b.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d018      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d84:	d013      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a18      	ldr	r2, [pc, #96]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00e      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a16      	ldr	r2, [pc, #88]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d009      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a13      	ldr	r2, [pc, #76]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d10c      	bne.n	8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40000400 	.word	0x40000400
 8007df0:	40000800 	.word	0x40000800
 8007df4:	40000c00 	.word	0x40000c00
 8007df8:	40014000 	.word	0x40014000

08007dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e03f      	b.n	8007e8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d106      	bne.n	8007e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fa f908 	bl	8002038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2224      	movs	r2, #36	; 0x24
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 faa5 	bl	8008390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695a      	ldr	r2, [r3, #20]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d11d      	bne.n	8007eec <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <HAL_UART_Receive_DMA+0x26>
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e016      	b.n	8007eee <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_UART_Receive_DMA+0x38>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e00f      	b.n	8007eee <HAL_UART_Receive_DMA+0x58>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f92a 	bl	800813c <UART_Start_Receive_DMA>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	e000      	b.n	8007eee <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007eec:	2302      	movs	r3, #2
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b09c      	sub	sp, #112	; 0x70
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f56:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d172      	bne.n	800804c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f68:	2200      	movs	r2, #0
 8007f6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	330c      	adds	r3, #12
 8007f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f8e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e5      	bne.n	8007f6c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3314      	adds	r3, #20
 8007fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8007fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3314      	adds	r3, #20
 8007fbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fc0:	647a      	str	r2, [r7, #68]	; 0x44
 8007fc2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e5      	bne.n	8007fa0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3314      	adds	r3, #20
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fea:	663b      	str	r3, [r7, #96]	; 0x60
 8007fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3314      	adds	r3, #20
 8007ff2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ff4:	633a      	str	r2, [r7, #48]	; 0x30
 8007ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e5      	bne.n	8007fd4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800a:	2220      	movs	r2, #32
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008014:	2b01      	cmp	r3, #1
 8008016:	d119      	bne.n	800804c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	60fb      	str	r3, [r7, #12]
   return(result);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0310 	bic.w	r3, r3, #16
 800802e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	330c      	adds	r3, #12
 8008036:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008038:	61fa      	str	r2, [r7, #28]
 800803a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	69b9      	ldr	r1, [r7, #24]
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	617b      	str	r3, [r7, #20]
   return(result);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e5      	bne.n	8008018 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008050:	2b01      	cmp	r3, #1
 8008052:	d106      	bne.n	8008062 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008056:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008058:	4619      	mov	r1, r3
 800805a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800805c:	f7ff ff69 	bl	8007f32 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008060:	e002      	b.n	8008068 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008062:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008064:	f7ff ff47 	bl	8007ef6 <HAL_UART_RxCpltCallback>
}
 8008068:	bf00      	nop
 800806a:	3770      	adds	r7, #112	; 0x70
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008082:	2b01      	cmp	r3, #1
 8008084:	d108      	bne.n	8008098 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800808a:	085b      	lsrs	r3, r3, #1
 800808c:	b29b      	uxth	r3, r3
 800808e:	4619      	mov	r1, r3
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff ff4e 	bl	8007f32 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008096:	e002      	b.n	800809e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff ff36 	bl	8007f0a <HAL_UART_RxHalfCpltCallback>
}
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c2:	2b80      	cmp	r3, #128	; 0x80
 80080c4:	bf0c      	ite	eq
 80080c6:	2301      	moveq	r3, #1
 80080c8:	2300      	movne	r3, #0
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b21      	cmp	r3, #33	; 0x21
 80080d8:	d108      	bne.n	80080ec <UART_DMAError+0x46>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2200      	movs	r2, #0
 80080e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80080e6:	68b8      	ldr	r0, [r7, #8]
 80080e8:	f000 f8c6 	bl	8008278 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	bf0c      	ite	eq
 80080fa:	2301      	moveq	r3, #1
 80080fc:	2300      	movne	r3, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b22      	cmp	r3, #34	; 0x22
 800810c:	d108      	bne.n	8008120 <UART_DMAError+0x7a>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2200      	movs	r2, #0
 8008118:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800811a:	68b8      	ldr	r0, [r7, #8]
 800811c:	f000 f8d4 	bl	80082c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	f043 0210 	orr.w	r2, r3, #16
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800812c:	68b8      	ldr	r0, [r7, #8]
 800812e:	f7ff fef6 	bl	8007f1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b098      	sub	sp, #96	; 0x60
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	88fa      	ldrh	r2, [r7, #6]
 8008154:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2222      	movs	r2, #34	; 0x22
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	4a40      	ldr	r2, [pc, #256]	; (800826c <UART_Start_Receive_DMA+0x130>)
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	4a3f      	ldr	r2, [pc, #252]	; (8008270 <UART_Start_Receive_DMA+0x134>)
 8008172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	4a3e      	ldr	r2, [pc, #248]	; (8008274 <UART_Start_Receive_DMA+0x138>)
 800817a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	2200      	movs	r2, #0
 8008182:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008184:	f107 0308 	add.w	r3, r7, #8
 8008188:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3304      	adds	r3, #4
 8008194:	4619      	mov	r1, r3
 8008196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	f7fc f84a 	bl	8004234 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d019      	beq.n	80081fa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	330c      	adds	r3, #12
 80081cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	330c      	adds	r3, #12
 80081e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80081e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80081ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e5      	bne.n	80081c6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3314      	adds	r3, #20
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	657b      	str	r3, [r7, #84]	; 0x54
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3314      	adds	r3, #20
 8008218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800821a:	63ba      	str	r2, [r7, #56]	; 0x38
 800821c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3314      	adds	r3, #20
 8008234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	617b      	str	r3, [r7, #20]
   return(result);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008244:	653b      	str	r3, [r7, #80]	; 0x50
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3314      	adds	r3, #20
 800824c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800824e:	627a      	str	r2, [r7, #36]	; 0x24
 8008250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6a39      	ldr	r1, [r7, #32]
 8008254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	61fb      	str	r3, [r7, #28]
   return(result);
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e5      	bne.n	800822e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3760      	adds	r7, #96	; 0x60
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	08007f4b 	.word	0x08007f4b
 8008270:	08008071 	.word	0x08008071
 8008274:	080080a7 	.word	0x080080a7

08008278 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008278:	b480      	push	{r7}
 800827a:	b089      	sub	sp, #36	; 0x24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	330c      	adds	r3, #12
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	61ba      	str	r2, [r7, #24]
 80082a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6979      	ldr	r1, [r7, #20]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	613b      	str	r3, [r7, #16]
   return(result);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e5      	bne.n	8008280 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80082bc:	bf00      	nop
 80082be:	3724      	adds	r7, #36	; 0x24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b095      	sub	sp, #84	; 0x54
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	330c      	adds	r3, #12
 80082d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082f0:	643a      	str	r2, [r7, #64]	; 0x40
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e5      	bne.n	80082d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	61fb      	str	r3, [r7, #28]
   return(result);
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	64bb      	str	r3, [r7, #72]	; 0x48
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3314      	adds	r3, #20
 8008322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008324:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800832a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e5      	bne.n	8008304 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	2b01      	cmp	r3, #1
 800833e:	d119      	bne.n	8008374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	330c      	adds	r3, #12
 8008346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f023 0310 	bic.w	r3, r3, #16
 8008356:	647b      	str	r3, [r7, #68]	; 0x44
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008360:	61ba      	str	r2, [r7, #24]
 8008362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6979      	ldr	r1, [r7, #20]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	613b      	str	r3, [r7, #16]
   return(result);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e5      	bne.n	8008340 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008382:	bf00      	nop
 8008384:	3754      	adds	r7, #84	; 0x54
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008394:	b0c0      	sub	sp, #256	; 0x100
 8008396:	af00      	add	r7, sp, #0
 8008398:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	68d9      	ldr	r1, [r3, #12]
 80083ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	ea40 0301 	orr.w	r3, r0, r1
 80083b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	431a      	orrs	r2, r3
 80083c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	431a      	orrs	r2, r3
 80083d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80083e8:	f021 010c 	bic.w	r1, r1, #12
 80083ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083f6:	430b      	orrs	r3, r1
 80083f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840a:	6999      	ldr	r1, [r3, #24]
 800840c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	ea40 0301 	orr.w	r3, r0, r1
 8008416:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	4b8f      	ldr	r3, [pc, #572]	; (800865c <UART_SetConfig+0x2cc>)
 8008420:	429a      	cmp	r2, r3
 8008422:	d005      	beq.n	8008430 <UART_SetConfig+0xa0>
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b8d      	ldr	r3, [pc, #564]	; (8008660 <UART_SetConfig+0x2d0>)
 800842c:	429a      	cmp	r2, r3
 800842e:	d104      	bne.n	800843a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008430:	f7ff f86e 	bl	8007510 <HAL_RCC_GetPCLK2Freq>
 8008434:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008438:	e003      	b.n	8008442 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800843a:	f7ff f855 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 800843e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800844c:	f040 810c 	bne.w	8008668 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008454:	2200      	movs	r2, #0
 8008456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800845a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800845e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008462:	4622      	mov	r2, r4
 8008464:	462b      	mov	r3, r5
 8008466:	1891      	adds	r1, r2, r2
 8008468:	65b9      	str	r1, [r7, #88]	; 0x58
 800846a:	415b      	adcs	r3, r3
 800846c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800846e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008472:	4621      	mov	r1, r4
 8008474:	eb12 0801 	adds.w	r8, r2, r1
 8008478:	4629      	mov	r1, r5
 800847a:	eb43 0901 	adc.w	r9, r3, r1
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800848a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800848e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008492:	4690      	mov	r8, r2
 8008494:	4699      	mov	r9, r3
 8008496:	4623      	mov	r3, r4
 8008498:	eb18 0303 	adds.w	r3, r8, r3
 800849c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084a0:	462b      	mov	r3, r5
 80084a2:	eb49 0303 	adc.w	r3, r9, r3
 80084a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80084ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80084be:	460b      	mov	r3, r1
 80084c0:	18db      	adds	r3, r3, r3
 80084c2:	653b      	str	r3, [r7, #80]	; 0x50
 80084c4:	4613      	mov	r3, r2
 80084c6:	eb42 0303 	adc.w	r3, r2, r3
 80084ca:	657b      	str	r3, [r7, #84]	; 0x54
 80084cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80084d4:	f7f8 fbe0 	bl	8000c98 <__aeabi_uldivmod>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4b61      	ldr	r3, [pc, #388]	; (8008664 <UART_SetConfig+0x2d4>)
 80084de:	fba3 2302 	umull	r2, r3, r3, r2
 80084e2:	095b      	lsrs	r3, r3, #5
 80084e4:	011c      	lsls	r4, r3, #4
 80084e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80084f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80084f8:	4642      	mov	r2, r8
 80084fa:	464b      	mov	r3, r9
 80084fc:	1891      	adds	r1, r2, r2
 80084fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8008500:	415b      	adcs	r3, r3
 8008502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008508:	4641      	mov	r1, r8
 800850a:	eb12 0a01 	adds.w	sl, r2, r1
 800850e:	4649      	mov	r1, r9
 8008510:	eb43 0b01 	adc.w	fp, r3, r1
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008528:	4692      	mov	sl, r2
 800852a:	469b      	mov	fp, r3
 800852c:	4643      	mov	r3, r8
 800852e:	eb1a 0303 	adds.w	r3, sl, r3
 8008532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008536:	464b      	mov	r3, r9
 8008538:	eb4b 0303 	adc.w	r3, fp, r3
 800853c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800854c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008554:	460b      	mov	r3, r1
 8008556:	18db      	adds	r3, r3, r3
 8008558:	643b      	str	r3, [r7, #64]	; 0x40
 800855a:	4613      	mov	r3, r2
 800855c:	eb42 0303 	adc.w	r3, r2, r3
 8008560:	647b      	str	r3, [r7, #68]	; 0x44
 8008562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800856a:	f7f8 fb95 	bl	8000c98 <__aeabi_uldivmod>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4611      	mov	r1, r2
 8008574:	4b3b      	ldr	r3, [pc, #236]	; (8008664 <UART_SetConfig+0x2d4>)
 8008576:	fba3 2301 	umull	r2, r3, r3, r1
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	2264      	movs	r2, #100	; 0x64
 800857e:	fb02 f303 	mul.w	r3, r2, r3
 8008582:	1acb      	subs	r3, r1, r3
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800858a:	4b36      	ldr	r3, [pc, #216]	; (8008664 <UART_SetConfig+0x2d4>)
 800858c:	fba3 2302 	umull	r2, r3, r3, r2
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008598:	441c      	add	r4, r3
 800859a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80085a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80085ac:	4642      	mov	r2, r8
 80085ae:	464b      	mov	r3, r9
 80085b0:	1891      	adds	r1, r2, r2
 80085b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80085b4:	415b      	adcs	r3, r3
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085bc:	4641      	mov	r1, r8
 80085be:	1851      	adds	r1, r2, r1
 80085c0:	6339      	str	r1, [r7, #48]	; 0x30
 80085c2:	4649      	mov	r1, r9
 80085c4:	414b      	adcs	r3, r1
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80085d4:	4659      	mov	r1, fp
 80085d6:	00cb      	lsls	r3, r1, #3
 80085d8:	4651      	mov	r1, sl
 80085da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085de:	4651      	mov	r1, sl
 80085e0:	00ca      	lsls	r2, r1, #3
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	4642      	mov	r2, r8
 80085ea:	189b      	adds	r3, r3, r2
 80085ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085f0:	464b      	mov	r3, r9
 80085f2:	460a      	mov	r2, r1
 80085f4:	eb42 0303 	adc.w	r3, r2, r3
 80085f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008608:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800860c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008610:	460b      	mov	r3, r1
 8008612:	18db      	adds	r3, r3, r3
 8008614:	62bb      	str	r3, [r7, #40]	; 0x28
 8008616:	4613      	mov	r3, r2
 8008618:	eb42 0303 	adc.w	r3, r2, r3
 800861c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008622:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008626:	f7f8 fb37 	bl	8000c98 <__aeabi_uldivmod>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <UART_SetConfig+0x2d4>)
 8008630:	fba3 1302 	umull	r1, r3, r3, r2
 8008634:	095b      	lsrs	r3, r3, #5
 8008636:	2164      	movs	r1, #100	; 0x64
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	3332      	adds	r3, #50	; 0x32
 8008642:	4a08      	ldr	r2, [pc, #32]	; (8008664 <UART_SetConfig+0x2d4>)
 8008644:	fba2 2303 	umull	r2, r3, r2, r3
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	f003 0207 	and.w	r2, r3, #7
 800864e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4422      	add	r2, r4
 8008656:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008658:	e106      	b.n	8008868 <UART_SetConfig+0x4d8>
 800865a:	bf00      	nop
 800865c:	40011000 	.word	0x40011000
 8008660:	40011400 	.word	0x40011400
 8008664:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800866c:	2200      	movs	r2, #0
 800866e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008672:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008676:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800867a:	4642      	mov	r2, r8
 800867c:	464b      	mov	r3, r9
 800867e:	1891      	adds	r1, r2, r2
 8008680:	6239      	str	r1, [r7, #32]
 8008682:	415b      	adcs	r3, r3
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
 8008686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800868a:	4641      	mov	r1, r8
 800868c:	1854      	adds	r4, r2, r1
 800868e:	4649      	mov	r1, r9
 8008690:	eb43 0501 	adc.w	r5, r3, r1
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	f04f 0300 	mov.w	r3, #0
 800869c:	00eb      	lsls	r3, r5, #3
 800869e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086a2:	00e2      	lsls	r2, r4, #3
 80086a4:	4614      	mov	r4, r2
 80086a6:	461d      	mov	r5, r3
 80086a8:	4643      	mov	r3, r8
 80086aa:	18e3      	adds	r3, r4, r3
 80086ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086b0:	464b      	mov	r3, r9
 80086b2:	eb45 0303 	adc.w	r3, r5, r3
 80086b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	f04f 0300 	mov.w	r3, #0
 80086d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80086d6:	4629      	mov	r1, r5
 80086d8:	008b      	lsls	r3, r1, #2
 80086da:	4621      	mov	r1, r4
 80086dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086e0:	4621      	mov	r1, r4
 80086e2:	008a      	lsls	r2, r1, #2
 80086e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80086e8:	f7f8 fad6 	bl	8000c98 <__aeabi_uldivmod>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4b60      	ldr	r3, [pc, #384]	; (8008874 <UART_SetConfig+0x4e4>)
 80086f2:	fba3 2302 	umull	r2, r3, r3, r2
 80086f6:	095b      	lsrs	r3, r3, #5
 80086f8:	011c      	lsls	r4, r3, #4
 80086fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008704:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008708:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800870c:	4642      	mov	r2, r8
 800870e:	464b      	mov	r3, r9
 8008710:	1891      	adds	r1, r2, r2
 8008712:	61b9      	str	r1, [r7, #24]
 8008714:	415b      	adcs	r3, r3
 8008716:	61fb      	str	r3, [r7, #28]
 8008718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800871c:	4641      	mov	r1, r8
 800871e:	1851      	adds	r1, r2, r1
 8008720:	6139      	str	r1, [r7, #16]
 8008722:	4649      	mov	r1, r9
 8008724:	414b      	adcs	r3, r1
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	f04f 0200 	mov.w	r2, #0
 800872c:	f04f 0300 	mov.w	r3, #0
 8008730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008734:	4659      	mov	r1, fp
 8008736:	00cb      	lsls	r3, r1, #3
 8008738:	4651      	mov	r1, sl
 800873a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800873e:	4651      	mov	r1, sl
 8008740:	00ca      	lsls	r2, r1, #3
 8008742:	4610      	mov	r0, r2
 8008744:	4619      	mov	r1, r3
 8008746:	4603      	mov	r3, r0
 8008748:	4642      	mov	r2, r8
 800874a:	189b      	adds	r3, r3, r2
 800874c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008750:	464b      	mov	r3, r9
 8008752:	460a      	mov	r2, r1
 8008754:	eb42 0303 	adc.w	r3, r2, r3
 8008758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800875c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	67bb      	str	r3, [r7, #120]	; 0x78
 8008766:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008774:	4649      	mov	r1, r9
 8008776:	008b      	lsls	r3, r1, #2
 8008778:	4641      	mov	r1, r8
 800877a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800877e:	4641      	mov	r1, r8
 8008780:	008a      	lsls	r2, r1, #2
 8008782:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008786:	f7f8 fa87 	bl	8000c98 <__aeabi_uldivmod>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4611      	mov	r1, r2
 8008790:	4b38      	ldr	r3, [pc, #224]	; (8008874 <UART_SetConfig+0x4e4>)
 8008792:	fba3 2301 	umull	r2, r3, r3, r1
 8008796:	095b      	lsrs	r3, r3, #5
 8008798:	2264      	movs	r2, #100	; 0x64
 800879a:	fb02 f303 	mul.w	r3, r2, r3
 800879e:	1acb      	subs	r3, r1, r3
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	3332      	adds	r3, #50	; 0x32
 80087a4:	4a33      	ldr	r2, [pc, #204]	; (8008874 <UART_SetConfig+0x4e4>)
 80087a6:	fba2 2303 	umull	r2, r3, r2, r3
 80087aa:	095b      	lsrs	r3, r3, #5
 80087ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087b0:	441c      	add	r4, r3
 80087b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087b6:	2200      	movs	r2, #0
 80087b8:	673b      	str	r3, [r7, #112]	; 0x70
 80087ba:	677a      	str	r2, [r7, #116]	; 0x74
 80087bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80087c0:	4642      	mov	r2, r8
 80087c2:	464b      	mov	r3, r9
 80087c4:	1891      	adds	r1, r2, r2
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	415b      	adcs	r3, r3
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087d0:	4641      	mov	r1, r8
 80087d2:	1851      	adds	r1, r2, r1
 80087d4:	6039      	str	r1, [r7, #0]
 80087d6:	4649      	mov	r1, r9
 80087d8:	414b      	adcs	r3, r1
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087e8:	4659      	mov	r1, fp
 80087ea:	00cb      	lsls	r3, r1, #3
 80087ec:	4651      	mov	r1, sl
 80087ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087f2:	4651      	mov	r1, sl
 80087f4:	00ca      	lsls	r2, r1, #3
 80087f6:	4610      	mov	r0, r2
 80087f8:	4619      	mov	r1, r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	4642      	mov	r2, r8
 80087fe:	189b      	adds	r3, r3, r2
 8008800:	66bb      	str	r3, [r7, #104]	; 0x68
 8008802:	464b      	mov	r3, r9
 8008804:	460a      	mov	r2, r1
 8008806:	eb42 0303 	adc.w	r3, r2, r3
 800880a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800880c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	663b      	str	r3, [r7, #96]	; 0x60
 8008816:	667a      	str	r2, [r7, #100]	; 0x64
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	f04f 0300 	mov.w	r3, #0
 8008820:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008824:	4649      	mov	r1, r9
 8008826:	008b      	lsls	r3, r1, #2
 8008828:	4641      	mov	r1, r8
 800882a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800882e:	4641      	mov	r1, r8
 8008830:	008a      	lsls	r2, r1, #2
 8008832:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008836:	f7f8 fa2f 	bl	8000c98 <__aeabi_uldivmod>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <UART_SetConfig+0x4e4>)
 8008840:	fba3 1302 	umull	r1, r3, r3, r2
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	2164      	movs	r1, #100	; 0x64
 8008848:	fb01 f303 	mul.w	r3, r1, r3
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	3332      	adds	r3, #50	; 0x32
 8008852:	4a08      	ldr	r2, [pc, #32]	; (8008874 <UART_SetConfig+0x4e4>)
 8008854:	fba2 2303 	umull	r2, r3, r2, r3
 8008858:	095b      	lsrs	r3, r3, #5
 800885a:	f003 020f 	and.w	r2, r3, #15
 800885e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4422      	add	r2, r4
 8008866:	609a      	str	r2, [r3, #8]
}
 8008868:	bf00      	nop
 800886a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800886e:	46bd      	mov	sp, r7
 8008870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008874:	51eb851f 	.word	0x51eb851f

08008878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008878:	b084      	sub	sp, #16
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	f107 001c 	add.w	r0, r7, #28
 8008886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	2b01      	cmp	r3, #1
 800888e:	d122      	bne.n	80088d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d105      	bne.n	80088ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 fbee 	bl	800a0ac <USB_CoreReset>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]
 80088d4:	e01a      	b.n	800890c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 fbe2 	bl	800a0ac <USB_CoreReset>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80088ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d106      	bne.n	8008900 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
 80088fe:	e005      	b.n	800890c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	2b01      	cmp	r3, #1
 8008910:	d10b      	bne.n	800892a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f043 0206 	orr.w	r2, r3, #6
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f043 0220 	orr.w	r2, r3, #32
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008936:	b004      	add	sp, #16
 8008938:	4770      	bx	lr
	...

0800893c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4613      	mov	r3, r2
 8008948:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	2b02      	cmp	r3, #2
 800894e:	d165      	bne.n	8008a1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4a41      	ldr	r2, [pc, #260]	; (8008a58 <USB_SetTurnaroundTime+0x11c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d906      	bls.n	8008966 <USB_SetTurnaroundTime+0x2a>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4a40      	ldr	r2, [pc, #256]	; (8008a5c <USB_SetTurnaroundTime+0x120>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d202      	bcs.n	8008966 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008960:	230f      	movs	r3, #15
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e062      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	4a3c      	ldr	r2, [pc, #240]	; (8008a5c <USB_SetTurnaroundTime+0x120>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d306      	bcc.n	800897c <USB_SetTurnaroundTime+0x40>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	4a3b      	ldr	r2, [pc, #236]	; (8008a60 <USB_SetTurnaroundTime+0x124>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d202      	bcs.n	800897c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008976:	230e      	movs	r3, #14
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	e057      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4a38      	ldr	r2, [pc, #224]	; (8008a60 <USB_SetTurnaroundTime+0x124>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d306      	bcc.n	8008992 <USB_SetTurnaroundTime+0x56>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	4a37      	ldr	r2, [pc, #220]	; (8008a64 <USB_SetTurnaroundTime+0x128>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d202      	bcs.n	8008992 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800898c:	230d      	movs	r3, #13
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	e04c      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4a33      	ldr	r2, [pc, #204]	; (8008a64 <USB_SetTurnaroundTime+0x128>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d306      	bcc.n	80089a8 <USB_SetTurnaroundTime+0x6c>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	4a32      	ldr	r2, [pc, #200]	; (8008a68 <USB_SetTurnaroundTime+0x12c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d802      	bhi.n	80089a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089a2:	230c      	movs	r3, #12
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	e041      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4a2f      	ldr	r2, [pc, #188]	; (8008a68 <USB_SetTurnaroundTime+0x12c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d906      	bls.n	80089be <USB_SetTurnaroundTime+0x82>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	4a2e      	ldr	r2, [pc, #184]	; (8008a6c <USB_SetTurnaroundTime+0x130>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d802      	bhi.n	80089be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089b8:	230b      	movs	r3, #11
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	e036      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	4a2a      	ldr	r2, [pc, #168]	; (8008a6c <USB_SetTurnaroundTime+0x130>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d906      	bls.n	80089d4 <USB_SetTurnaroundTime+0x98>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	4a29      	ldr	r2, [pc, #164]	; (8008a70 <USB_SetTurnaroundTime+0x134>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d802      	bhi.n	80089d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089ce:	230a      	movs	r3, #10
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	e02b      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4a26      	ldr	r2, [pc, #152]	; (8008a70 <USB_SetTurnaroundTime+0x134>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d906      	bls.n	80089ea <USB_SetTurnaroundTime+0xae>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4a25      	ldr	r2, [pc, #148]	; (8008a74 <USB_SetTurnaroundTime+0x138>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d202      	bcs.n	80089ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80089e4:	2309      	movs	r3, #9
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	e020      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <USB_SetTurnaroundTime+0x138>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d306      	bcc.n	8008a00 <USB_SetTurnaroundTime+0xc4>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	4a20      	ldr	r2, [pc, #128]	; (8008a78 <USB_SetTurnaroundTime+0x13c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d802      	bhi.n	8008a00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80089fa:	2308      	movs	r3, #8
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	e015      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <USB_SetTurnaroundTime+0x13c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d906      	bls.n	8008a16 <USB_SetTurnaroundTime+0xda>
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	4a1c      	ldr	r2, [pc, #112]	; (8008a7c <USB_SetTurnaroundTime+0x140>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d202      	bcs.n	8008a16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a10:	2307      	movs	r3, #7
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	e00a      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a16:	2306      	movs	r3, #6
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	e007      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a22:	2309      	movs	r3, #9
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	e001      	b.n	8008a2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a28:	2309      	movs	r3, #9
 8008a2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	029b      	lsls	r3, r3, #10
 8008a40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a44:	431a      	orrs	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	00d8acbf 	.word	0x00d8acbf
 8008a5c:	00e4e1c0 	.word	0x00e4e1c0
 8008a60:	00f42400 	.word	0x00f42400
 8008a64:	01067380 	.word	0x01067380
 8008a68:	011a499f 	.word	0x011a499f
 8008a6c:	01312cff 	.word	0x01312cff
 8008a70:	014ca43f 	.word	0x014ca43f
 8008a74:	016e3600 	.word	0x016e3600
 8008a78:	01a6ab1f 	.word	0x01a6ab1f
 8008a7c:	01e84800 	.word	0x01e84800

08008a80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f043 0201 	orr.w	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f023 0201 	bic.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d115      	bne.n	8008b12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008af2:	2001      	movs	r0, #1
 8008af4:	f7fa fdf2 	bl	80036dc <HAL_Delay>
      ms++;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fa45 	bl	8009f8e <USB_GetMode>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d01e      	beq.n	8008b48 <USB_SetCurrentMode+0x84>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b31      	cmp	r3, #49	; 0x31
 8008b0e:	d9f0      	bls.n	8008af2 <USB_SetCurrentMode+0x2e>
 8008b10:	e01a      	b.n	8008b48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d115      	bne.n	8008b44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b24:	2001      	movs	r0, #1
 8008b26:	f7fa fdd9 	bl	80036dc <HAL_Delay>
      ms++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fa2c 	bl	8009f8e <USB_GetMode>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <USB_SetCurrentMode+0x84>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b31      	cmp	r3, #49	; 0x31
 8008b40:	d9f0      	bls.n	8008b24 <USB_SetCurrentMode+0x60>
 8008b42:	e001      	b.n	8008b48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e005      	b.n	8008b54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b32      	cmp	r3, #50	; 0x32
 8008b4c:	d101      	bne.n	8008b52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b76:	2300      	movs	r3, #0
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	e009      	b.n	8008b90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	3340      	adds	r3, #64	; 0x40
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	2200      	movs	r2, #0
 8008b88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b0e      	cmp	r3, #14
 8008b94:	d9f2      	bls.n	8008b7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11c      	bne.n	8008bd6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008baa:	f043 0302 	orr.w	r3, r3, #2
 8008bae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8008bd4:	e00b      	b.n	8008bee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c00:	4619      	mov	r1, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c08:	461a      	mov	r2, r3
 8008c0a:	680b      	ldr	r3, [r1, #0]
 8008c0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d10c      	bne.n	8008c2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f965 	bl	8008eec <USB_SetDevSpeed>
 8008c22:	e008      	b.n	8008c36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c24:	2101      	movs	r1, #1
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f960 	bl	8008eec <USB_SetDevSpeed>
 8008c2c:	e003      	b.n	8008c36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c2e:	2103      	movs	r1, #3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f95b 	bl	8008eec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c36:	2110      	movs	r1, #16
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f8f3 	bl	8008e24 <USB_FlushTxFifo>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f91f 	bl	8008e8c <USB_FlushRxFifo>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5e:	461a      	mov	r2, r3
 8008c60:	2300      	movs	r3, #0
 8008c62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c76:	461a      	mov	r2, r3
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	e043      	b.n	8008d0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c98:	d118      	bne.n	8008ccc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cac:	461a      	mov	r2, r3
 8008cae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	e013      	b.n	8008cde <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	e008      	b.n	8008cde <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd8:	461a      	mov	r2, r3
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cea:	461a      	mov	r2, r3
 8008cec:	2300      	movs	r3, #0
 8008cee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	3301      	adds	r3, #1
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d3b7      	bcc.n	8008c82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d12:	2300      	movs	r3, #0
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	e043      	b.n	8008da0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d2e:	d118      	bne.n	8008d62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d42:	461a      	mov	r2, r3
 8008d44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	e013      	b.n	8008d74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	e008      	b.n	8008d74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6e:	461a      	mov	r2, r3
 8008d70:	2300      	movs	r3, #0
 8008d72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d80:	461a      	mov	r2, r3
 8008d82:	2300      	movs	r3, #0
 8008d84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d92:	461a      	mov	r2, r3
 8008d94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	613b      	str	r3, [r7, #16]
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d3b7      	bcc.n	8008d18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008db6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008dc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d105      	bne.n	8008ddc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f043 0210 	orr.w	r2, r3, #16
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	699a      	ldr	r2, [r3, #24]
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <USB_DevInit+0x2c4>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f043 0208 	orr.w	r2, r3, #8
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d107      	bne.n	8008e10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e08:	f043 0304 	orr.w	r3, r3, #4
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e1c:	b004      	add	sp, #16
 8008e1e:	4770      	bx	lr
 8008e20:	803c3800 	.word	0x803c3800

08008e24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3301      	adds	r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4a13      	ldr	r2, [pc, #76]	; (8008e88 <USB_FlushTxFifo+0x64>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d901      	bls.n	8008e44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e01b      	b.n	8008e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	daf2      	bge.n	8008e32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	019b      	lsls	r3, r3, #6
 8008e54:	f043 0220 	orr.w	r2, r3, #32
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4a08      	ldr	r2, [pc, #32]	; (8008e88 <USB_FlushTxFifo+0x64>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d901      	bls.n	8008e6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e006      	b.n	8008e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f003 0320 	and.w	r3, r3, #32
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	d0f0      	beq.n	8008e5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	00030d40 	.word	0x00030d40

08008e8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4a11      	ldr	r2, [pc, #68]	; (8008ee8 <USB_FlushRxFifo+0x5c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d901      	bls.n	8008eaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e018      	b.n	8008edc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	daf2      	bge.n	8008e98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2210      	movs	r2, #16
 8008eba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	4a08      	ldr	r2, [pc, #32]	; (8008ee8 <USB_FlushRxFifo+0x5c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d901      	bls.n	8008ece <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e006      	b.n	8008edc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f003 0310 	and.w	r3, r3, #16
 8008ed6:	2b10      	cmp	r3, #16
 8008ed8:	d0f0      	beq.n	8008ebc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	00030d40 	.word	0x00030d40

08008eec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b087      	sub	sp, #28
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f003 0306 	and.w	r3, r3, #6
 8008f36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d102      	bne.n	8008f44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]
 8008f42:	e00a      	b.n	8008f5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d002      	beq.n	8008f50 <USB_GetDevSpeed+0x32>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b06      	cmp	r3, #6
 8008f4e:	d102      	bne.n	8008f56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f50:	2302      	movs	r3, #2
 8008f52:	75fb      	strb	r3, [r7, #23]
 8008f54:	e001      	b.n	8008f5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f56:	230f      	movs	r3, #15
 8008f58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	785b      	ldrb	r3, [r3, #1]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d13a      	bne.n	8008ffa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8a:	69da      	ldr	r2, [r3, #28]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	2101      	movs	r1, #1
 8008f96:	fa01 f303 	lsl.w	r3, r1, r3
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	68f9      	ldr	r1, [r7, #12]
 8008f9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d155      	bne.n	8009068 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	791b      	ldrb	r3, [r3, #4]
 8008fd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	059b      	lsls	r3, r3, #22
 8008fde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	0151      	lsls	r1, r2, #5
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	440a      	add	r2, r1
 8008fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	e036      	b.n	8009068 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009000:	69da      	ldr	r2, [r3, #28]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	2101      	movs	r1, #1
 800900c:	fa01 f303 	lsl.w	r3, r1, r3
 8009010:	041b      	lsls	r3, r3, #16
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009018:	4313      	orrs	r3, r2
 800901a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d11a      	bne.n	8009068 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	791b      	ldrb	r3, [r3, #4]
 800904c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800904e:	430b      	orrs	r3, r1
 8009050:	4313      	orrs	r3, r2
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	0151      	lsls	r1, r2, #5
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	440a      	add	r2, r1
 800905a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800905e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009066:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d161      	bne.n	8009158 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090aa:	d11f      	bne.n	80090ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	0151      	lsls	r1, r2, #5
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	440a      	add	r2, r1
 80090c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	0151      	lsls	r1, r2, #5
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	440a      	add	r2, r1
 80090e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	f003 030f 	and.w	r3, r3, #15
 80090fc:	2101      	movs	r1, #1
 80090fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009102:	b29b      	uxth	r3, r3
 8009104:	43db      	mvns	r3, r3
 8009106:	68f9      	ldr	r1, [r7, #12]
 8009108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800910c:	4013      	ands	r3, r2
 800910e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f303 	lsl.w	r3, r1, r3
 8009126:	b29b      	uxth	r3, r3
 8009128:	43db      	mvns	r3, r3
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009130:	4013      	ands	r3, r2
 8009132:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	0159      	lsls	r1, r3, #5
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	440b      	add	r3, r1
 800914a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914e:	4619      	mov	r1, r3
 8009150:	4b35      	ldr	r3, [pc, #212]	; (8009228 <USB_DeactivateEndpoint+0x1b0>)
 8009152:	4013      	ands	r3, r2
 8009154:	600b      	str	r3, [r1, #0]
 8009156:	e060      	b.n	800921a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800916a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800916e:	d11f      	bne.n	80091b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	0151      	lsls	r1, r2, #5
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	440a      	add	r2, r1
 8009186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800918a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800918e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	2101      	movs	r1, #1
 80091c2:	fa01 f303 	lsl.w	r3, r1, r3
 80091c6:	041b      	lsls	r3, r3, #16
 80091c8:	43db      	mvns	r3, r3
 80091ca:	68f9      	ldr	r1, [r7, #12]
 80091cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091d0:	4013      	ands	r3, r2
 80091d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091da:	69da      	ldr	r2, [r3, #28]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	2101      	movs	r1, #1
 80091e6:	fa01 f303 	lsl.w	r3, r1, r3
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	43db      	mvns	r3, r3
 80091ee:	68f9      	ldr	r1, [r7, #12]
 80091f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091f4:	4013      	ands	r3, r2
 80091f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	0159      	lsls	r1, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	440b      	add	r3, r1
 800920e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009212:	4619      	mov	r1, r3
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <USB_DeactivateEndpoint+0x1b4>)
 8009216:	4013      	ands	r3, r2
 8009218:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	ec337800 	.word	0xec337800
 800922c:	eff37800 	.word	0xeff37800

08009230 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08a      	sub	sp, #40	; 0x28
 8009234:	af02      	add	r7, sp, #8
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	785b      	ldrb	r3, [r3, #1]
 800924c:	2b01      	cmp	r3, #1
 800924e:	f040 815c 	bne.w	800950a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d132      	bne.n	80092c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	0151      	lsls	r1, r2, #5
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	440a      	add	r2, r1
 8009270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800927c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	0151      	lsls	r1, r2, #5
 8009290:	69fa      	ldr	r2, [r7, #28]
 8009292:	440a      	add	r2, r1
 8009294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800929c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	0151      	lsls	r1, r2, #5
 80092b0:	69fa      	ldr	r2, [r7, #28]
 80092b2:	440a      	add	r2, r1
 80092b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b8:	0cdb      	lsrs	r3, r3, #19
 80092ba:	04db      	lsls	r3, r3, #19
 80092bc:	6113      	str	r3, [r2, #16]
 80092be:	e074      	b.n	80093aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	0151      	lsls	r1, r2, #5
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	440a      	add	r2, r1
 80092d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092da:	0cdb      	lsrs	r3, r3, #19
 80092dc:	04db      	lsls	r3, r3, #19
 80092de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	0151      	lsls	r1, r2, #5
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	440a      	add	r2, r1
 80092f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009302:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009310:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6999      	ldr	r1, [r3, #24]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	440b      	add	r3, r1
 800931c:	1e59      	subs	r1, r3, #1
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	fbb1 f3f3 	udiv	r3, r1, r3
 8009326:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009328:	4b9d      	ldr	r3, [pc, #628]	; (80095a0 <USB_EPStartXfer+0x370>)
 800932a:	400b      	ands	r3, r1
 800932c:	69b9      	ldr	r1, [r7, #24]
 800932e:	0148      	lsls	r0, r1, #5
 8009330:	69f9      	ldr	r1, [r7, #28]
 8009332:	4401      	add	r1, r0
 8009334:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009338:	4313      	orrs	r3, r2
 800933a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	4413      	add	r3, r2
 8009344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009348:	691a      	ldr	r2, [r3, #16]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009352:	69b9      	ldr	r1, [r7, #24]
 8009354:	0148      	lsls	r0, r1, #5
 8009356:	69f9      	ldr	r1, [r7, #28]
 8009358:	4401      	add	r1, r0
 800935a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800935e:	4313      	orrs	r3, r2
 8009360:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	791b      	ldrb	r3, [r3, #4]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d11f      	bne.n	80093aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009384:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009388:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	0151      	lsls	r1, r2, #5
 800939c:	69fa      	ldr	r2, [r7, #28]
 800939e:	440a      	add	r2, r1
 80093a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d14b      	bne.n	8009448 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d009      	beq.n	80093cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c4:	461a      	mov	r2, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	791b      	ldrb	r3, [r3, #4]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d128      	bne.n	8009426 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d110      	bne.n	8009406 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	0151      	lsls	r1, r2, #5
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	440a      	add	r2, r1
 80093fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	e00f      	b.n	8009426 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	0151      	lsls	r1, r2, #5
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	440a      	add	r2, r1
 800941c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009424:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	e133      	b.n	80096b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	0151      	lsls	r1, r2, #5
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	440a      	add	r2, r1
 800945e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009466:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	791b      	ldrb	r3, [r3, #4]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d015      	beq.n	800949c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 811b 	beq.w	80096b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	f003 030f 	and.w	r3, r3, #15
 800948a:	2101      	movs	r1, #1
 800948c:	fa01 f303 	lsl.w	r3, r1, r3
 8009490:	69f9      	ldr	r1, [r7, #28]
 8009492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009496:	4313      	orrs	r3, r2
 8009498:	634b      	str	r3, [r1, #52]	; 0x34
 800949a:	e109      	b.n	80096b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d110      	bne.n	80094ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	0151      	lsls	r1, r2, #5
 80094be:	69fa      	ldr	r2, [r7, #28]
 80094c0:	440a      	add	r2, r1
 80094c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	e00f      	b.n	80094ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	0151      	lsls	r1, r2, #5
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	440a      	add	r2, r1
 80094e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	6919      	ldr	r1, [r3, #16]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	781a      	ldrb	r2, [r3, #0]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	b298      	uxth	r0, r3
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	4603      	mov	r3, r0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fade 	bl	8009ac4 <USB_WritePacket>
 8009508:	e0d2      	b.n	80096b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	69fa      	ldr	r2, [r7, #28]
 800951e:	440a      	add	r2, r1
 8009520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009524:	0cdb      	lsrs	r3, r3, #19
 8009526:	04db      	lsls	r3, r3, #19
 8009528:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	0151      	lsls	r1, r2, #5
 800953c:	69fa      	ldr	r2, [r7, #28]
 800953e:	440a      	add	r2, r1
 8009540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009544:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009548:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800954c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d126      	bne.n	80095a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800956c:	69b9      	ldr	r1, [r7, #24]
 800956e:	0148      	lsls	r0, r1, #5
 8009570:	69f9      	ldr	r1, [r7, #28]
 8009572:	4401      	add	r1, r0
 8009574:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009578:	4313      	orrs	r3, r2
 800957a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	0151      	lsls	r1, r2, #5
 800958e:	69fa      	ldr	r2, [r7, #28]
 8009590:	440a      	add	r2, r1
 8009592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800959a:	6113      	str	r3, [r2, #16]
 800959c:	e03a      	b.n	8009614 <USB_EPStartXfer+0x3e4>
 800959e:	bf00      	nop
 80095a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	699a      	ldr	r2, [r3, #24]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	4413      	add	r3, r2
 80095ae:	1e5a      	subs	r2, r3, #1
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	8afa      	ldrh	r2, [r7, #22]
 80095c0:	fb03 f202 	mul.w	r2, r3, r2
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	8afb      	ldrh	r3, [r7, #22]
 80095d8:	04d9      	lsls	r1, r3, #19
 80095da:	4b38      	ldr	r3, [pc, #224]	; (80096bc <USB_EPStartXfer+0x48c>)
 80095dc:	400b      	ands	r3, r1
 80095de:	69b9      	ldr	r1, [r7, #24]
 80095e0:	0148      	lsls	r0, r1, #5
 80095e2:	69f9      	ldr	r1, [r7, #28]
 80095e4:	4401      	add	r1, r0
 80095e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095ea:	4313      	orrs	r3, r2
 80095ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009604:	69b9      	ldr	r1, [r7, #24]
 8009606:	0148      	lsls	r0, r1, #5
 8009608:	69f9      	ldr	r1, [r7, #28]
 800960a:	4401      	add	r1, r0
 800960c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009610:	4313      	orrs	r3, r2
 8009612:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d10d      	bne.n	8009636 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d009      	beq.n	8009636 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6919      	ldr	r1, [r3, #16]
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	4413      	add	r3, r2
 800962e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009632:	460a      	mov	r2, r1
 8009634:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	791b      	ldrb	r3, [r3, #4]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d128      	bne.n	8009690 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964a:	2b00      	cmp	r3, #0
 800964c:	d110      	bne.n	8009670 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	4413      	add	r3, r2
 8009656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	0151      	lsls	r1, r2, #5
 8009660:	69fa      	ldr	r2, [r7, #28]
 8009662:	440a      	add	r2, r1
 8009664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	e00f      	b.n	8009690 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	4413      	add	r3, r2
 8009678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	0151      	lsls	r1, r2, #5
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	440a      	add	r2, r1
 8009686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800968a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800968e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	0151      	lsls	r1, r2, #5
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	440a      	add	r2, r1
 80096a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3720      	adds	r7, #32
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	1ff80000 	.word	0x1ff80000

080096c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	785b      	ldrb	r3, [r3, #1]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	f040 80ce 	bne.w	800987e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d132      	bne.n	8009750 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	0151      	lsls	r1, r2, #5
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	440a      	add	r2, r1
 8009700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009704:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009708:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800970c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	440a      	add	r2, r1
 8009724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800972c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009748:	0cdb      	lsrs	r3, r3, #19
 800974a:	04db      	lsls	r3, r3, #19
 800974c:	6113      	str	r3, [r2, #16]
 800974e:	e04e      	b.n	80097ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	0151      	lsls	r1, r2, #5
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	440a      	add	r2, r1
 8009766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976a:	0cdb      	lsrs	r3, r3, #19
 800976c:	04db      	lsls	r3, r3, #19
 800976e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	0151      	lsls	r1, r2, #5
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	440a      	add	r2, r1
 8009786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800978e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009792:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	699a      	ldr	r2, [r3, #24]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	429a      	cmp	r2, r3
 800979e:	d903      	bls.n	80097a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	68da      	ldr	r2, [r3, #12]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097de:	6939      	ldr	r1, [r7, #16]
 80097e0:	0148      	lsls	r0, r1, #5
 80097e2:	6979      	ldr	r1, [r7, #20]
 80097e4:	4401      	add	r1, r0
 80097e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80097ea:	4313      	orrs	r3, r2
 80097ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d11e      	bne.n	8009832 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009808:	461a      	mov	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	440a      	add	r2, r1
 8009826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	e097      	b.n	8009962 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	4413      	add	r3, r2
 800983a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	0151      	lsls	r1, r2, #5
 8009844:	697a      	ldr	r2, [r7, #20]
 8009846:	440a      	add	r2, r1
 8009848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800984c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009850:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 8083 	beq.w	8009962 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	f003 030f 	and.w	r3, r3, #15
 800986c:	2101      	movs	r1, #1
 800986e:	fa01 f303 	lsl.w	r3, r1, r3
 8009872:	6979      	ldr	r1, [r7, #20]
 8009874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009878:	4313      	orrs	r3, r2
 800987a:	634b      	str	r3, [r1, #52]	; 0x34
 800987c:	e071      	b.n	8009962 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	0151      	lsls	r1, r2, #5
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	440a      	add	r2, r1
 8009894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009898:	0cdb      	lsrs	r3, r3, #19
 800989a:	04db      	lsls	r3, r3, #19
 800989c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	0151      	lsls	r1, r2, #5
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	440a      	add	r2, r1
 80098b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	68da      	ldr	r2, [r3, #12]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	0151      	lsls	r1, r2, #5
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	440a      	add	r2, r1
 80098f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009910:	6939      	ldr	r1, [r7, #16]
 8009912:	0148      	lsls	r0, r1, #5
 8009914:	6979      	ldr	r1, [r7, #20]
 8009916:	4401      	add	r1, r0
 8009918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800991c:	4313      	orrs	r3, r2
 800991e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d10d      	bne.n	8009942 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6919      	ldr	r1, [r3, #16]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	460a      	mov	r2, r1
 8009940:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	0151      	lsls	r1, r2, #5
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	440a      	add	r2, r1
 8009958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009960:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	371c      	adds	r7, #28
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d14a      	bne.n	8009a24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099a6:	f040 8086 	bne.w	8009ab6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	7812      	ldrb	r2, [r2, #0]
 80099be:	0151      	lsls	r1, r2, #5
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	440a      	add	r2, r1
 80099c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	7812      	ldrb	r2, [r2, #0]
 80099e2:	0151      	lsls	r1, r2, #5
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	440a      	add	r2, r1
 80099e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3301      	adds	r3, #1
 80099f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d902      	bls.n	8009a08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	75fb      	strb	r3, [r7, #23]
          break;
 8009a06:	e056      	b.n	8009ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a20:	d0e7      	beq.n	80099f2 <USB_EPStopXfer+0x82>
 8009a22:	e048      	b.n	8009ab6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a3c:	d13b      	bne.n	8009ab6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	7812      	ldrb	r2, [r2, #0]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	7812      	ldrb	r2, [r2, #0]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d902      	bls.n	8009a9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	75fb      	strb	r3, [r7, #23]
          break;
 8009a9a:	e00c      	b.n	8009ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ab4:	d0e7      	beq.n	8009a86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	371c      	adds	r7, #28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b089      	sub	sp, #36	; 0x24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	4611      	mov	r1, r2
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	71fb      	strb	r3, [r7, #7]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d123      	bne.n	8009b32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009aea:	88bb      	ldrh	r3, [r7, #4]
 8009aec:	3303      	adds	r3, #3
 8009aee:	089b      	lsrs	r3, r3, #2
 8009af0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009af2:	2300      	movs	r3, #0
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	e018      	b.n	8009b2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	031a      	lsls	r2, r3, #12
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b04:	461a      	mov	r2, r3
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	3301      	adds	r3, #1
 8009b16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	3301      	adds	r3, #1
 8009b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	3301      	adds	r3, #1
 8009b28:	61bb      	str	r3, [r7, #24]
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d3e2      	bcc.n	8009af8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3724      	adds	r7, #36	; 0x24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b08b      	sub	sp, #44	; 0x2c
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	089b      	lsrs	r3, r3, #2
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b5e:	88fb      	ldrh	r3, [r7, #6]
 8009b60:	f003 0303 	and.w	r3, r3, #3
 8009b64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b66:	2300      	movs	r3, #0
 8009b68:	623b      	str	r3, [r7, #32]
 8009b6a:	e014      	b.n	8009b96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	3301      	adds	r3, #1
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	3301      	adds	r3, #1
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	3301      	adds	r3, #1
 8009b94:	623b      	str	r3, [r7, #32]
 8009b96:	6a3a      	ldr	r2, [r7, #32]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d3e6      	bcc.n	8009b6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b9e:	8bfb      	ldrh	r3, [r7, #30]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d01e      	beq.n	8009be2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f107 0310 	add.w	r3, r7, #16
 8009bb4:	6812      	ldr	r2, [r2, #0]
 8009bb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	701a      	strb	r2, [r3, #0]
      i++;
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	623b      	str	r3, [r7, #32]
      pDest++;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009bd6:	8bfb      	ldrh	r3, [r7, #30]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009bdc:	8bfb      	ldrh	r3, [r7, #30]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1ea      	bne.n	8009bb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	372c      	adds	r7, #44	; 0x2c
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	785b      	ldrb	r3, [r3, #1]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d12c      	bne.n	8009c66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	db12      	blt.n	8009c44 <USB_EPSetStall+0x54>
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00f      	beq.n	8009c44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	e02b      	b.n	8009cbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	db12      	blt.n	8009c9e <USB_EPSetStall+0xae>
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00f      	beq.n	8009c9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	0151      	lsls	r1, r2, #5
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	440a      	add	r2, r1
 8009c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	015a      	lsls	r2, r3, #5
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	0151      	lsls	r1, r2, #5
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	440a      	add	r2, r1
 8009cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d128      	bne.n	8009d3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	791b      	ldrb	r3, [r3, #4]
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d003      	beq.n	8009d18 <USB_EPClearStall+0x4c>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	791b      	ldrb	r3, [r3, #4]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d138      	bne.n	8009d8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	0151      	lsls	r1, r2, #5
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	440a      	add	r2, r1
 8009d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	e027      	b.n	8009d8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	0151      	lsls	r1, r2, #5
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	440a      	add	r2, r1
 8009d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	791b      	ldrb	r3, [r3, #4]
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d003      	beq.n	8009d6a <USB_EPClearStall+0x9e>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	791b      	ldrb	r3, [r3, #4]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d10f      	bne.n	8009d8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	0151      	lsls	r1, r2, #5
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	440a      	add	r2, r1
 8009d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009db6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	78fb      	ldrb	r3, [r7, #3]
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009dcc:	68f9      	ldr	r1, [r7, #12]
 8009dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e12:	f023 0302 	bic.w	r3, r3, #2
 8009e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b085      	sub	sp, #20
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e40:	f023 0303 	bic.w	r3, r3, #3
 8009e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e54:	f043 0302 	orr.w	r3, r3, #2
 8009e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e80:	68fb      	ldr	r3, [r7, #12]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	0c1b      	lsrs	r3, r3, #16
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b085      	sub	sp, #20
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	b29b      	uxth	r3, r3
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	4013      	ands	r3, r2
 8009f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f24:	68bb      	ldr	r3, [r7, #8]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b087      	sub	sp, #28
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f56:	78fb      	ldrb	r3, [r7, #3]
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f62:	01db      	lsls	r3, r3, #7
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f6c:	78fb      	ldrb	r3, [r7, #3]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f80:	68bb      	ldr	r3, [r7, #8]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009fc8:	f023 0307 	bic.w	r3, r3, #7
 8009fcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	333c      	adds	r3, #60	; 0x3c
 800a006:	3304      	adds	r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	4a26      	ldr	r2, [pc, #152]	; (800a0a8 <USB_EP0_OutStart+0xb8>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d90a      	bls.n	800a02a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a024:	d101      	bne.n	800a02a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	e037      	b.n	800a09a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a030:	461a      	mov	r2, r3
 800a032:	2300      	movs	r3, #0
 800a034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a058:	f043 0318 	orr.w	r3, r3, #24
 800a05c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a06c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d10f      	bne.n	800a098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a092:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	371c      	adds	r7, #28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	4f54300a 	.word	0x4f54300a

0800a0ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	4a13      	ldr	r2, [pc, #76]	; (800a110 <USB_CoreReset+0x64>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d901      	bls.n	800a0ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e01b      	b.n	800a102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	daf2      	bge.n	800a0b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f043 0201 	orr.w	r2, r3, #1
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4a09      	ldr	r2, [pc, #36]	; (800a110 <USB_CoreReset+0x64>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d901      	bls.n	800a0f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e006      	b.n	800a102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d0f0      	beq.n	800a0e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	00030d40 	.word	0x00030d40

0800a114 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a120:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a124:	f005 f8a0 	bl	800f268 <USBD_static_malloc>
 800a128:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d109      	bne.n	800a144 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	32b0      	adds	r2, #176	; 0xb0
 800a13a:	2100      	movs	r1, #0
 800a13c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a140:	2302      	movs	r3, #2
 800a142:	e0d4      	b.n	800a2ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a144:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a148:	2100      	movs	r1, #0
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f005 ff05 	bl	800ff5a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	32b0      	adds	r2, #176	; 0xb0
 800a15a:	68f9      	ldr	r1, [r7, #12]
 800a15c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	32b0      	adds	r2, #176	; 0xb0
 800a16a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	7c1b      	ldrb	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d138      	bne.n	800a1ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a17c:	4b5e      	ldr	r3, [pc, #376]	; (800a2f8 <USBD_CDC_Init+0x1e4>)
 800a17e:	7819      	ldrb	r1, [r3, #0]
 800a180:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a184:	2202      	movs	r2, #2
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f004 ff4b 	bl	800f022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a18c:	4b5a      	ldr	r3, [pc, #360]	; (800a2f8 <USBD_CDC_Init+0x1e4>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	f003 020f 	and.w	r2, r3, #15
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	3324      	adds	r3, #36	; 0x24
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a1a6:	4b55      	ldr	r3, [pc, #340]	; (800a2fc <USBD_CDC_Init+0x1e8>)
 800a1a8:	7819      	ldrb	r1, [r3, #0]
 800a1aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f004 ff36 	bl	800f022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a1b6:	4b51      	ldr	r3, [pc, #324]	; (800a2fc <USBD_CDC_Init+0x1e8>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	f003 020f 	and.w	r2, r3, #15
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	440b      	add	r3, r1
 800a1ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a1d2:	4b4b      	ldr	r3, [pc, #300]	; (800a300 <USBD_CDC_Init+0x1ec>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	f003 020f 	and.w	r2, r3, #15
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	3326      	adds	r3, #38	; 0x26
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	801a      	strh	r2, [r3, #0]
 800a1ec:	e035      	b.n	800a25a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a1ee:	4b42      	ldr	r3, [pc, #264]	; (800a2f8 <USBD_CDC_Init+0x1e4>)
 800a1f0:	7819      	ldrb	r1, [r3, #0]
 800a1f2:	2340      	movs	r3, #64	; 0x40
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f004 ff13 	bl	800f022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a1fc:	4b3e      	ldr	r3, [pc, #248]	; (800a2f8 <USBD_CDC_Init+0x1e4>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	f003 020f 	and.w	r2, r3, #15
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	440b      	add	r3, r1
 800a210:	3324      	adds	r3, #36	; 0x24
 800a212:	2201      	movs	r2, #1
 800a214:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a216:	4b39      	ldr	r3, [pc, #228]	; (800a2fc <USBD_CDC_Init+0x1e8>)
 800a218:	7819      	ldrb	r1, [r3, #0]
 800a21a:	2340      	movs	r3, #64	; 0x40
 800a21c:	2202      	movs	r2, #2
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f004 feff 	bl	800f022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a224:	4b35      	ldr	r3, [pc, #212]	; (800a2fc <USBD_CDC_Init+0x1e8>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f003 020f 	and.w	r2, r3, #15
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	440b      	add	r3, r1
 800a238:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a23c:	2201      	movs	r2, #1
 800a23e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a240:	4b2f      	ldr	r3, [pc, #188]	; (800a300 <USBD_CDC_Init+0x1ec>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	f003 020f 	and.w	r2, r3, #15
 800a248:	6879      	ldr	r1, [r7, #4]
 800a24a:	4613      	mov	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	440b      	add	r3, r1
 800a254:	3326      	adds	r3, #38	; 0x26
 800a256:	2210      	movs	r2, #16
 800a258:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a25a:	4b29      	ldr	r3, [pc, #164]	; (800a300 <USBD_CDC_Init+0x1ec>)
 800a25c:	7819      	ldrb	r1, [r3, #0]
 800a25e:	2308      	movs	r3, #8
 800a260:	2203      	movs	r2, #3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f004 fedd 	bl	800f022 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a268:	4b25      	ldr	r3, [pc, #148]	; (800a300 <USBD_CDC_Init+0x1ec>)
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	f003 020f 	and.w	r2, r3, #15
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	4613      	mov	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	440b      	add	r3, r1
 800a27c:	3324      	adds	r3, #36	; 0x24
 800a27e:	2201      	movs	r2, #1
 800a280:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	33b0      	adds	r3, #176	; 0xb0
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e018      	b.n	800a2ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	7c1b      	ldrb	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2c4:	4b0d      	ldr	r3, [pc, #52]	; (800a2fc <USBD_CDC_Init+0x1e8>)
 800a2c6:	7819      	ldrb	r1, [r3, #0]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f004 ff94 	bl	800f200 <USBD_LL_PrepareReceive>
 800a2d8:	e008      	b.n	800a2ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2da:	4b08      	ldr	r3, [pc, #32]	; (800a2fc <USBD_CDC_Init+0x1e8>)
 800a2dc:	7819      	ldrb	r1, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2e4:	2340      	movs	r3, #64	; 0x40
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f004 ff8a 	bl	800f200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200000b3 	.word	0x200000b3
 800a2fc:	200000b4 	.word	0x200000b4
 800a300:	200000b5 	.word	0x200000b5

0800a304 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a310:	4b3a      	ldr	r3, [pc, #232]	; (800a3fc <USBD_CDC_DeInit+0xf8>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	4619      	mov	r1, r3
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f004 fea9 	bl	800f06e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a31c:	4b37      	ldr	r3, [pc, #220]	; (800a3fc <USBD_CDC_DeInit+0xf8>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	f003 020f 	and.w	r2, r3, #15
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	440b      	add	r3, r1
 800a330:	3324      	adds	r3, #36	; 0x24
 800a332:	2200      	movs	r2, #0
 800a334:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a336:	4b32      	ldr	r3, [pc, #200]	; (800a400 <USBD_CDC_DeInit+0xfc>)
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	4619      	mov	r1, r3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f004 fe96 	bl	800f06e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a342:	4b2f      	ldr	r3, [pc, #188]	; (800a400 <USBD_CDC_DeInit+0xfc>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	f003 020f 	and.w	r2, r3, #15
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	440b      	add	r3, r1
 800a356:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a35a:	2200      	movs	r2, #0
 800a35c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a35e:	4b29      	ldr	r3, [pc, #164]	; (800a404 <USBD_CDC_DeInit+0x100>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f004 fe82 	bl	800f06e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a36a:	4b26      	ldr	r3, [pc, #152]	; (800a404 <USBD_CDC_DeInit+0x100>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f003 020f 	and.w	r2, r3, #15
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	4613      	mov	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	440b      	add	r3, r1
 800a37e:	3324      	adds	r3, #36	; 0x24
 800a380:	2200      	movs	r2, #0
 800a382:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a384:	4b1f      	ldr	r3, [pc, #124]	; (800a404 <USBD_CDC_DeInit+0x100>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	f003 020f 	and.w	r2, r3, #15
 800a38c:	6879      	ldr	r1, [r7, #4]
 800a38e:	4613      	mov	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	440b      	add	r3, r1
 800a398:	3326      	adds	r3, #38	; 0x26
 800a39a:	2200      	movs	r2, #0
 800a39c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	32b0      	adds	r2, #176	; 0xb0
 800a3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01f      	beq.n	800a3f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	33b0      	adds	r3, #176	; 0xb0
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	32b0      	adds	r2, #176	; 0xb0
 800a3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f004 ff56 	bl	800f284 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	32b0      	adds	r2, #176	; 0xb0
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	200000b3 	.word	0x200000b3
 800a400:	200000b4 	.word	0x200000b4
 800a404:	200000b5 	.word	0x200000b5

0800a408 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	32b0      	adds	r2, #176	; 0xb0
 800a41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a420:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a426:	2300      	movs	r3, #0
 800a428:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a434:	2303      	movs	r3, #3
 800a436:	e0bf      	b.n	800a5b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a440:	2b00      	cmp	r3, #0
 800a442:	d050      	beq.n	800a4e6 <USBD_CDC_Setup+0xde>
 800a444:	2b20      	cmp	r3, #32
 800a446:	f040 80af 	bne.w	800a5a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	88db      	ldrh	r3, [r3, #6]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d03a      	beq.n	800a4c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	b25b      	sxtb	r3, r3
 800a458:	2b00      	cmp	r3, #0
 800a45a:	da1b      	bge.n	800a494 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	33b0      	adds	r3, #176	; 0xb0
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a472:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	88d2      	ldrh	r2, [r2, #6]
 800a478:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	88db      	ldrh	r3, [r3, #6]
 800a47e:	2b07      	cmp	r3, #7
 800a480:	bf28      	it	cs
 800a482:	2307      	movcs	r3, #7
 800a484:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	89fa      	ldrh	r2, [r7, #14]
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 fd89 	bl	800bfa4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a492:	e090      	b.n	800a5b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	785a      	ldrb	r2, [r3, #1]
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	88db      	ldrh	r3, [r3, #6]
 800a4a2:	2b3f      	cmp	r3, #63	; 0x3f
 800a4a4:	d803      	bhi.n	800a4ae <USBD_CDC_Setup+0xa6>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	88db      	ldrh	r3, [r3, #6]
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	e000      	b.n	800a4b0 <USBD_CDC_Setup+0xa8>
 800a4ae:	2240      	movs	r2, #64	; 0x40
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a4b6:	6939      	ldr	r1, [r7, #16]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 fd9b 	bl	800bffc <USBD_CtlPrepareRx>
      break;
 800a4c6:	e076      	b.n	800a5b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	33b0      	adds	r3, #176	; 0xb0
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	7850      	ldrb	r0, [r2, #1]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	4798      	blx	r3
      break;
 800a4e4:	e067      	b.n	800a5b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	785b      	ldrb	r3, [r3, #1]
 800a4ea:	2b0b      	cmp	r3, #11
 800a4ec:	d851      	bhi.n	800a592 <USBD_CDC_Setup+0x18a>
 800a4ee:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <USBD_CDC_Setup+0xec>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a525 	.word	0x0800a525
 800a4f8:	0800a5a1 	.word	0x0800a5a1
 800a4fc:	0800a593 	.word	0x0800a593
 800a500:	0800a593 	.word	0x0800a593
 800a504:	0800a593 	.word	0x0800a593
 800a508:	0800a593 	.word	0x0800a593
 800a50c:	0800a593 	.word	0x0800a593
 800a510:	0800a593 	.word	0x0800a593
 800a514:	0800a593 	.word	0x0800a593
 800a518:	0800a593 	.word	0x0800a593
 800a51c:	0800a54f 	.word	0x0800a54f
 800a520:	0800a579 	.word	0x0800a579
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d107      	bne.n	800a540 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a530:	f107 030a 	add.w	r3, r7, #10
 800a534:	2202      	movs	r2, #2
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f001 fd33 	bl	800bfa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a53e:	e032      	b.n	800a5a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 fcbd 	bl	800bec2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a548:	2303      	movs	r3, #3
 800a54a:	75fb      	strb	r3, [r7, #23]
          break;
 800a54c:	e02b      	b.n	800a5a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b03      	cmp	r3, #3
 800a558:	d107      	bne.n	800a56a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a55a:	f107 030d 	add.w	r3, r7, #13
 800a55e:	2201      	movs	r2, #1
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f001 fd1e 	bl	800bfa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a568:	e01d      	b.n	800a5a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 fca8 	bl	800bec2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a572:	2303      	movs	r3, #3
 800a574:	75fb      	strb	r3, [r7, #23]
          break;
 800a576:	e016      	b.n	800a5a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b03      	cmp	r3, #3
 800a582:	d00f      	beq.n	800a5a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f001 fc9b 	bl	800bec2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a58c:	2303      	movs	r3, #3
 800a58e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a590:	e008      	b.n	800a5a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 fc94 	bl	800bec2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a59a:	2303      	movs	r3, #3
 800a59c:	75fb      	strb	r3, [r7, #23]
          break;
 800a59e:	e002      	b.n	800a5a6 <USBD_CDC_Setup+0x19e>
          break;
 800a5a0:	bf00      	nop
 800a5a2:	e008      	b.n	800a5b6 <USBD_CDC_Setup+0x1ae>
          break;
 800a5a4:	bf00      	nop
      }
      break;
 800a5a6:	e006      	b.n	800a5b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fc89 	bl	800bec2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	32b0      	adds	r2, #176	; 0xb0
 800a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e065      	b.n	800a6b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	32b0      	adds	r2, #176	; 0xb0
 800a5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	f003 020f 	and.w	r2, r3, #15
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	440b      	add	r3, r1
 800a60c:	3318      	adds	r3, #24
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d02f      	beq.n	800a674 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	f003 020f 	and.w	r2, r3, #15
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	3318      	adds	r3, #24
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	f003 010f 	and.w	r1, r3, #15
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	460b      	mov	r3, r1
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	440b      	add	r3, r1
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4403      	add	r3, r0
 800a63c:	3348      	adds	r3, #72	; 0x48
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	fbb2 f1f3 	udiv	r1, r2, r3
 800a644:	fb01 f303 	mul.w	r3, r1, r3
 800a648:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d112      	bne.n	800a674 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	f003 020f 	and.w	r2, r3, #15
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	3318      	adds	r3, #24
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a666:	78f9      	ldrb	r1, [r7, #3]
 800a668:	2300      	movs	r3, #0
 800a66a:	2200      	movs	r2, #0
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f004 fda6 	bl	800f1be <USBD_LL_Transmit>
 800a672:	e01f      	b.n	800a6b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2200      	movs	r2, #0
 800a678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	33b0      	adds	r3, #176	; 0xb0
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d010      	beq.n	800a6b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	33b0      	adds	r3, #176	; 0xb0
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a6b0:	78fa      	ldrb	r2, [r7, #3]
 800a6b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	32b0      	adds	r2, #176	; 0xb0
 800a6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	32b0      	adds	r2, #176	; 0xb0
 800a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e01a      	b.n	800a726 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6f0:	78fb      	ldrb	r3, [r7, #3]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f004 fda4 	bl	800f242 <USBD_LL_GetRxDataSize>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	33b0      	adds	r3, #176	; 0xb0
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a720:	4611      	mov	r1, r2
 800a722:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	32b0      	adds	r2, #176	; 0xb0
 800a740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e025      	b.n	800a79c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	33b0      	adds	r3, #176	; 0xb0
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d01a      	beq.n	800a79a <USBD_CDC_EP0_RxReady+0x6c>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a76a:	2bff      	cmp	r3, #255	; 0xff
 800a76c:	d015      	beq.n	800a79a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	33b0      	adds	r3, #176	; 0xb0
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a786:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a78e:	b292      	uxth	r2, r2
 800a790:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	22ff      	movs	r2, #255	; 0xff
 800a796:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7ac:	2182      	movs	r1, #130	; 0x82
 800a7ae:	4818      	ldr	r0, [pc, #96]	; (800a810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7b0:	f000 fd4f 	bl	800b252 <USBD_GetEpDesc>
 800a7b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4815      	ldr	r0, [pc, #84]	; (800a810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7ba:	f000 fd4a 	bl	800b252 <USBD_GetEpDesc>
 800a7be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7c0:	2181      	movs	r1, #129	; 0x81
 800a7c2:	4813      	ldr	r0, [pc, #76]	; (800a810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7c4:	f000 fd45 	bl	800b252 <USBD_GetEpDesc>
 800a7c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2210      	movs	r2, #16
 800a7d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d006      	beq.n	800a7ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7e4:	711a      	strb	r2, [r3, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7f8:	711a      	strb	r2, [r3, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2243      	movs	r2, #67	; 0x43
 800a802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a804:	4b02      	ldr	r3, [pc, #8]	; (800a810 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a806:	4618      	mov	r0, r3
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000070 	.word	0x20000070

0800a814 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a81c:	2182      	movs	r1, #130	; 0x82
 800a81e:	4818      	ldr	r0, [pc, #96]	; (800a880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a820:	f000 fd17 	bl	800b252 <USBD_GetEpDesc>
 800a824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a826:	2101      	movs	r1, #1
 800a828:	4815      	ldr	r0, [pc, #84]	; (800a880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a82a:	f000 fd12 	bl	800b252 <USBD_GetEpDesc>
 800a82e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a830:	2181      	movs	r1, #129	; 0x81
 800a832:	4813      	ldr	r0, [pc, #76]	; (800a880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a834:	f000 fd0d 	bl	800b252 <USBD_GetEpDesc>
 800a838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2210      	movs	r2, #16
 800a844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d006      	beq.n	800a85a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	2200      	movs	r2, #0
 800a850:	711a      	strb	r2, [r3, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f042 0202 	orr.w	r2, r2, #2
 800a858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d006      	beq.n	800a86e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	711a      	strb	r2, [r3, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f042 0202 	orr.w	r2, r2, #2
 800a86c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2243      	movs	r2, #67	; 0x43
 800a872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a874:	4b02      	ldr	r3, [pc, #8]	; (800a880 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20000070 	.word	0x20000070

0800a884 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a88c:	2182      	movs	r1, #130	; 0x82
 800a88e:	4818      	ldr	r0, [pc, #96]	; (800a8f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a890:	f000 fcdf 	bl	800b252 <USBD_GetEpDesc>
 800a894:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a896:	2101      	movs	r1, #1
 800a898:	4815      	ldr	r0, [pc, #84]	; (800a8f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a89a:	f000 fcda 	bl	800b252 <USBD_GetEpDesc>
 800a89e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8a0:	2181      	movs	r1, #129	; 0x81
 800a8a2:	4813      	ldr	r0, [pc, #76]	; (800a8f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a8a4:	f000 fcd5 	bl	800b252 <USBD_GetEpDesc>
 800a8a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2210      	movs	r2, #16
 800a8b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d006      	beq.n	800a8ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8c4:	711a      	strb	r2, [r3, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d006      	beq.n	800a8de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8d8:	711a      	strb	r2, [r3, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2243      	movs	r2, #67	; 0x43
 800a8e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a8e4:	4b02      	ldr	r3, [pc, #8]	; (800a8f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000070 	.word	0x20000070

0800a8f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	220a      	movs	r2, #10
 800a900:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a902:	4b03      	ldr	r3, [pc, #12]	; (800a910 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	2000002c 	.word	0x2000002c

0800a914 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a924:	2303      	movs	r3, #3
 800a926:	e009      	b.n	800a93c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	33b0      	adds	r3, #176	; 0xb0
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	32b0      	adds	r2, #176	; 0xb0
 800a95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a962:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e008      	b.n	800a980 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	371c      	adds	r7, #28
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	32b0      	adds	r2, #176	; 0xb0
 800a9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e004      	b.n	800a9ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
	...

0800a9c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	32b0      	adds	r2, #176	; 0xb0
 800a9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	32b0      	adds	r2, #176	; 0xb0
 800a9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e025      	b.n	800aa46 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d11f      	bne.n	800aa44 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aa0c:	4b10      	ldr	r3, [pc, #64]	; (800aa50 <USBD_CDC_TransmitPacket+0x88>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f003 020f 	and.w	r2, r3, #15
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4403      	add	r3, r0
 800aa26:	3318      	adds	r3, #24
 800aa28:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aa2a:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <USBD_CDC_TransmitPacket+0x88>)
 800aa2c:	7819      	ldrb	r1, [r3, #0]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f004 fbbf 	bl	800f1be <USBD_LL_Transmit>

    ret = USBD_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	200000b3 	.word	0x200000b3

0800aa54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	32b0      	adds	r2, #176	; 0xb0
 800aa66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	32b0      	adds	r2, #176	; 0xb0
 800aa76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e018      	b.n	800aab4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	7c1b      	ldrb	r3, [r3, #16]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10a      	bne.n	800aaa0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa8a:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <USBD_CDC_ReceivePacket+0x68>)
 800aa8c:	7819      	ldrb	r1, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f004 fbb1 	bl	800f200 <USBD_LL_PrepareReceive>
 800aa9e:	e008      	b.n	800aab2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aaa0:	4b06      	ldr	r3, [pc, #24]	; (800aabc <USBD_CDC_ReceivePacket+0x68>)
 800aaa2:	7819      	ldrb	r1, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aaaa:	2340      	movs	r3, #64	; 0x40
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f004 fba7 	bl	800f200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	200000b4 	.word	0x200000b4

0800aac0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	4613      	mov	r3, r2
 800aacc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e01f      	b.n	800ab18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d003      	beq.n	800aafe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	79fa      	ldrb	r2, [r7, #7]
 800ab0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f004 fa21 	bl	800ef54 <USBD_LL_Init>
 800ab12:	4603      	mov	r3, r0
 800ab14:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e025      	b.n	800ab84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	32ae      	adds	r2, #174	; 0xae
 800ab4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00f      	beq.n	800ab74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	32ae      	adds	r2, #174	; 0xae
 800ab5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	f107 020e 	add.w	r2, r7, #14
 800ab68:	4610      	mov	r0, r2
 800ab6a:	4798      	blx	r3
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f004 fa29 	bl	800efec <USBD_LL_Start>
 800ab9a:	4603      	mov	r3, r0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	460b      	mov	r3, r1
 800abc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d009      	beq.n	800abe8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	4611      	mov	r1, r2
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	460b      	mov	r3, r1
 800abfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	78fa      	ldrb	r2, [r7, #3]
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	4798      	blx	r3
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b084      	sub	sp, #16
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f001 f908 	bl	800be4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac5a:	f003 031f 	and.w	r3, r3, #31
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d01a      	beq.n	800ac98 <USBD_LL_SetupStage+0x72>
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d822      	bhi.n	800acac <USBD_LL_SetupStage+0x86>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <USBD_LL_SetupStage+0x4a>
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d00a      	beq.n	800ac84 <USBD_LL_SetupStage+0x5e>
 800ac6e:	e01d      	b.n	800acac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fb5f 	bl	800b33c <USBD_StdDevReq>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73fb      	strb	r3, [r7, #15]
      break;
 800ac82:	e020      	b.n	800acc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fbc7 	bl	800b420 <USBD_StdItfReq>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]
      break;
 800ac96:	e016      	b.n	800acc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fc29 	bl	800b4f8 <USBD_StdEPReq>
 800aca6:	4603      	mov	r3, r0
 800aca8:	73fb      	strb	r3, [r7, #15]
      break;
 800acaa:	e00c      	b.n	800acc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800acb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f004 f9f6 	bl	800f0ac <USBD_LL_StallEP>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]
      break;
 800acc4:	bf00      	nop
  }

  return ret;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	460b      	mov	r3, r1
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d16e      	bne.n	800adc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800acee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	f040 8098 	bne.w	800ae2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	689a      	ldr	r2, [r3, #8]
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d913      	bls.n	800ad30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	1ad2      	subs	r2, r2, r3
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	bf28      	it	cs
 800ad22:	4613      	movcs	r3, r2
 800ad24:	461a      	mov	r2, r3
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f001 f984 	bl	800c036 <USBD_CtlContinueRx>
 800ad2e:	e07d      	b.n	800ae2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad36:	f003 031f 	and.w	r3, r3, #31
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d014      	beq.n	800ad68 <USBD_LL_DataOutStage+0x98>
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d81d      	bhi.n	800ad7e <USBD_LL_DataOutStage+0xae>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <USBD_LL_DataOutStage+0x7c>
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d003      	beq.n	800ad52 <USBD_LL_DataOutStage+0x82>
 800ad4a:	e018      	b.n	800ad7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	75bb      	strb	r3, [r7, #22]
            break;
 800ad50:	e018      	b.n	800ad84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 fa5e 	bl	800b21e <USBD_CoreFindIF>
 800ad62:	4603      	mov	r3, r0
 800ad64:	75bb      	strb	r3, [r7, #22]
            break;
 800ad66:	e00d      	b.n	800ad84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	4619      	mov	r1, r3
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 fa60 	bl	800b238 <USBD_CoreFindEP>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	75bb      	strb	r3, [r7, #22]
            break;
 800ad7c:	e002      	b.n	800ad84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	75bb      	strb	r3, [r7, #22]
            break;
 800ad82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad84:	7dbb      	ldrb	r3, [r7, #22]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d119      	bne.n	800adbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d113      	bne.n	800adbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ad96:	7dba      	ldrb	r2, [r7, #22]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	32ae      	adds	r2, #174	; 0xae
 800ad9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ada6:	7dba      	ldrb	r2, [r7, #22]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800adae:	7dba      	ldrb	r2, [r7, #22]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	32ae      	adds	r2, #174	; 0xae
 800adb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f001 f94a 	bl	800c058 <USBD_CtlSendStatus>
 800adc4:	e032      	b.n	800ae2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800adc6:	7afb      	ldrb	r3, [r7, #11]
 800adc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	4619      	mov	r1, r3
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 fa31 	bl	800b238 <USBD_CoreFindEP>
 800add6:	4603      	mov	r3, r0
 800add8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adda:	7dbb      	ldrb	r3, [r7, #22]
 800addc:	2bff      	cmp	r3, #255	; 0xff
 800adde:	d025      	beq.n	800ae2c <USBD_LL_DataOutStage+0x15c>
 800ade0:	7dbb      	ldrb	r3, [r7, #22]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d122      	bne.n	800ae2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d117      	bne.n	800ae22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800adf2:	7dba      	ldrb	r2, [r7, #22]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	32ae      	adds	r2, #174	; 0xae
 800adf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00f      	beq.n	800ae22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ae02:	7dba      	ldrb	r2, [r7, #22]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ae0a:	7dba      	ldrb	r2, [r7, #22]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	32ae      	adds	r2, #174	; 0xae
 800ae10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	7afa      	ldrb	r2, [r7, #11]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	4798      	blx	r3
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
 800ae2a:	e000      	b.n	800ae2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b086      	sub	sp, #24
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ae44:	7afb      	ldrb	r3, [r7, #11]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d16f      	bne.n	800af2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3314      	adds	r3, #20
 800ae4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d15a      	bne.n	800af10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	689a      	ldr	r2, [r3, #8]
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d914      	bls.n	800ae90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	689a      	ldr	r2, [r3, #8]
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	1ad2      	subs	r2, r2, r3
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f001 f8ac 	bl	800bfda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae82:	2300      	movs	r3, #0
 800ae84:	2200      	movs	r2, #0
 800ae86:	2100      	movs	r1, #0
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f004 f9b9 	bl	800f200 <USBD_LL_PrepareReceive>
 800ae8e:	e03f      	b.n	800af10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	68da      	ldr	r2, [r3, #12]
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d11c      	bne.n	800aed6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d316      	bcc.n	800aed6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d20f      	bcs.n	800aed6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2100      	movs	r1, #0
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f001 f88d 	bl	800bfda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aec8:	2300      	movs	r3, #0
 800aeca:	2200      	movs	r2, #0
 800aecc:	2100      	movs	r1, #0
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f004 f996 	bl	800f200 <USBD_LL_PrepareReceive>
 800aed4:	e01c      	b.n	800af10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d10f      	bne.n	800af02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d009      	beq.n	800af02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af02:	2180      	movs	r1, #128	; 0x80
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f004 f8d1 	bl	800f0ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f001 f8b7 	bl	800c07e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d03a      	beq.n	800af90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7ff fe42 	bl	800aba4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800af28:	e032      	b.n	800af90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800af2a:	7afb      	ldrb	r3, [r7, #11]
 800af2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af30:	b2db      	uxtb	r3, r3
 800af32:	4619      	mov	r1, r3
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 f97f 	bl	800b238 <USBD_CoreFindEP>
 800af3a:	4603      	mov	r3, r0
 800af3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	2bff      	cmp	r3, #255	; 0xff
 800af42:	d025      	beq.n	800af90 <USBD_LL_DataInStage+0x15a>
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d122      	bne.n	800af90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b03      	cmp	r3, #3
 800af54:	d11c      	bne.n	800af90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af56:	7dfa      	ldrb	r2, [r7, #23]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	32ae      	adds	r2, #174	; 0xae
 800af5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d014      	beq.n	800af90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af66:	7dfa      	ldrb	r2, [r7, #23]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af6e:	7dfa      	ldrb	r2, [r7, #23]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	32ae      	adds	r2, #174	; 0xae
 800af74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	7afa      	ldrb	r2, [r7, #11]
 800af7c:	4611      	mov	r1, r2
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	4798      	blx	r3
 800af82:	4603      	mov	r3, r0
 800af84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800af86:	7dbb      	ldrb	r3, [r7, #22]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800af8c:	7dbb      	ldrb	r3, [r7, #22]
 800af8e:	e000      	b.n	800af92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b084      	sub	sp, #16
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d014      	beq.n	800b000 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00e      	beq.n	800b000 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	6852      	ldr	r2, [r2, #4]
 800afee:	b2d2      	uxtb	r2, r2
 800aff0:	4611      	mov	r1, r2
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	4798      	blx	r3
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800affc:	2303      	movs	r3, #3
 800affe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b000:	2340      	movs	r3, #64	; 0x40
 800b002:	2200      	movs	r2, #0
 800b004:	2100      	movs	r1, #0
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f004 f80b 	bl	800f022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2240      	movs	r2, #64	; 0x40
 800b018:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b01c:	2340      	movs	r3, #64	; 0x40
 800b01e:	2200      	movs	r2, #0
 800b020:	2180      	movs	r1, #128	; 0x80
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f003 fffd 	bl	800f022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2240      	movs	r2, #64	; 0x40
 800b032:	621a      	str	r2, [r3, #32]

  return ret;
 800b034:	7bfb      	ldrb	r3, [r7, #15]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b03e:	b480      	push	{r7}
 800b040:	b083      	sub	sp, #12
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	460b      	mov	r3, r1
 800b048:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	78fa      	ldrb	r2, [r7, #3]
 800b04e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2204      	movs	r2, #4
 800b078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b083      	sub	sp, #12
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	d106      	bne.n	800b0ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b082      	sub	sp, #8
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d110      	bne.n	800b0f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00b      	beq.n	800b0f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0de:	69db      	ldr	r3, [r3, #28]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d005      	beq.n	800b0f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ea:	69db      	ldr	r3, [r3, #28]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	460b      	mov	r3, r1
 800b104:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	32ae      	adds	r2, #174	; 0xae
 800b110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d101      	bne.n	800b11c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b118:	2303      	movs	r3, #3
 800b11a:	e01c      	b.n	800b156 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b03      	cmp	r3, #3
 800b126:	d115      	bne.n	800b154 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	32ae      	adds	r2, #174	; 0xae
 800b132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b136:	6a1b      	ldr	r3, [r3, #32]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	32ae      	adds	r2, #174	; 0xae
 800b146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	78fa      	ldrb	r2, [r7, #3]
 800b14e:	4611      	mov	r1, r2
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b082      	sub	sp, #8
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	460b      	mov	r3, r1
 800b168:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	32ae      	adds	r2, #174	; 0xae
 800b174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d101      	bne.n	800b180 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e01c      	b.n	800b1ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d115      	bne.n	800b1b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	32ae      	adds	r2, #174	; 0xae
 800b196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00b      	beq.n	800b1b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	32ae      	adds	r2, #174	; 0xae
 800b1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	78fa      	ldrb	r2, [r7, #3]
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b083      	sub	sp, #12
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00e      	beq.n	800b214 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	6852      	ldr	r2, [r2, #4]
 800b202:	b2d2      	uxtb	r2, r2
 800b204:	4611      	mov	r1, r2
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	4798      	blx	r3
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b210:	2303      	movs	r3, #3
 800b212:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	460b      	mov	r3, r1
 800b228:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b22a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b244:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b246:	4618      	mov	r0, r3
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b086      	sub	sp, #24
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	885b      	ldrh	r3, [r3, #2]
 800b26e:	b29a      	uxth	r2, r3
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	b29b      	uxth	r3, r3
 800b276:	429a      	cmp	r2, r3
 800b278:	d920      	bls.n	800b2bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b282:	e013      	b.n	800b2ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b284:	f107 030a 	add.w	r3, r7, #10
 800b288:	4619      	mov	r1, r3
 800b28a:	6978      	ldr	r0, [r7, #20]
 800b28c:	f000 f81b 	bl	800b2c6 <USBD_GetNextDesc>
 800b290:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	2b05      	cmp	r3, #5
 800b298:	d108      	bne.n	800b2ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	789b      	ldrb	r3, [r3, #2]
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d008      	beq.n	800b2ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	885b      	ldrh	r3, [r3, #2]
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	897b      	ldrh	r3, [r7, #10]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d8e5      	bhi.n	800b284 <USBD_GetEpDesc+0x32>
 800b2b8:	e000      	b.n	800b2bc <USBD_GetEpDesc+0x6a>
          break;
 800b2ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b2bc:	693b      	ldr	r3, [r7, #16]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3718      	adds	r7, #24
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b085      	sub	sp, #20
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	881a      	ldrh	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	4413      	add	r3, r2
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	3301      	adds	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b31e:	8a3b      	ldrh	r3, [r7, #16]
 800b320:	021b      	lsls	r3, r3, #8
 800b322:	b21a      	sxth	r2, r3
 800b324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b328:	4313      	orrs	r3, r2
 800b32a:	b21b      	sxth	r3, r3
 800b32c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b32e:	89fb      	ldrh	r3, [r7, #14]
}
 800b330:	4618      	mov	r0, r3
 800b332:	371c      	adds	r7, #28
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b352:	2b40      	cmp	r3, #64	; 0x40
 800b354:	d005      	beq.n	800b362 <USBD_StdDevReq+0x26>
 800b356:	2b40      	cmp	r3, #64	; 0x40
 800b358:	d857      	bhi.n	800b40a <USBD_StdDevReq+0xce>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00f      	beq.n	800b37e <USBD_StdDevReq+0x42>
 800b35e:	2b20      	cmp	r3, #32
 800b360:	d153      	bne.n	800b40a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	32ae      	adds	r2, #174	; 0xae
 800b36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	4798      	blx	r3
 800b378:	4603      	mov	r3, r0
 800b37a:	73fb      	strb	r3, [r7, #15]
      break;
 800b37c:	e04a      	b.n	800b414 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	785b      	ldrb	r3, [r3, #1]
 800b382:	2b09      	cmp	r3, #9
 800b384:	d83b      	bhi.n	800b3fe <USBD_StdDevReq+0xc2>
 800b386:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <USBD_StdDevReq+0x50>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b3e1 	.word	0x0800b3e1
 800b390:	0800b3f5 	.word	0x0800b3f5
 800b394:	0800b3ff 	.word	0x0800b3ff
 800b398:	0800b3eb 	.word	0x0800b3eb
 800b39c:	0800b3ff 	.word	0x0800b3ff
 800b3a0:	0800b3bf 	.word	0x0800b3bf
 800b3a4:	0800b3b5 	.word	0x0800b3b5
 800b3a8:	0800b3ff 	.word	0x0800b3ff
 800b3ac:	0800b3d7 	.word	0x0800b3d7
 800b3b0:	0800b3c9 	.word	0x0800b3c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa3c 	bl	800b834 <USBD_GetDescriptor>
          break;
 800b3bc:	e024      	b.n	800b408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fba1 	bl	800bb08 <USBD_SetAddress>
          break;
 800b3c6:	e01f      	b.n	800b408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fbe0 	bl	800bb90 <USBD_SetConfig>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73fb      	strb	r3, [r7, #15]
          break;
 800b3d4:	e018      	b.n	800b408 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fc83 	bl	800bce4 <USBD_GetConfig>
          break;
 800b3de:	e013      	b.n	800b408 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fcb4 	bl	800bd50 <USBD_GetStatus>
          break;
 800b3e8:	e00e      	b.n	800b408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fce3 	bl	800bdb8 <USBD_SetFeature>
          break;
 800b3f2:	e009      	b.n	800b408 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fd07 	bl	800be0a <USBD_ClrFeature>
          break;
 800b3fc:	e004      	b.n	800b408 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fd5e 	bl	800bec2 <USBD_CtlError>
          break;
 800b406:	bf00      	nop
      }
      break;
 800b408:	e004      	b.n	800b414 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b40a:	6839      	ldr	r1, [r7, #0]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fd58 	bl	800bec2 <USBD_CtlError>
      break;
 800b412:	bf00      	nop
  }

  return ret;
 800b414:	7bfb      	ldrb	r3, [r7, #15]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop

0800b420 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b436:	2b40      	cmp	r3, #64	; 0x40
 800b438:	d005      	beq.n	800b446 <USBD_StdItfReq+0x26>
 800b43a:	2b40      	cmp	r3, #64	; 0x40
 800b43c:	d852      	bhi.n	800b4e4 <USBD_StdItfReq+0xc4>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <USBD_StdItfReq+0x26>
 800b442:	2b20      	cmp	r3, #32
 800b444:	d14e      	bne.n	800b4e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	3b01      	subs	r3, #1
 800b450:	2b02      	cmp	r3, #2
 800b452:	d840      	bhi.n	800b4d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	889b      	ldrh	r3, [r3, #4]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d836      	bhi.n	800b4cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	889b      	ldrh	r3, [r3, #4]
 800b462:	b2db      	uxtb	r3, r3
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff fed9 	bl	800b21e <USBD_CoreFindIF>
 800b46c:	4603      	mov	r3, r0
 800b46e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	2bff      	cmp	r3, #255	; 0xff
 800b474:	d01d      	beq.n	800b4b2 <USBD_StdItfReq+0x92>
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d11a      	bne.n	800b4b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b47c:	7bba      	ldrb	r2, [r7, #14]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	32ae      	adds	r2, #174	; 0xae
 800b482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00f      	beq.n	800b4ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b48c:	7bba      	ldrb	r2, [r7, #14]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b494:	7bba      	ldrb	r2, [r7, #14]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	32ae      	adds	r2, #174	; 0xae
 800b49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	4798      	blx	r3
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4aa:	e004      	b.n	800b4b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4b0:	e001      	b.n	800b4b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	88db      	ldrh	r3, [r3, #6]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d110      	bne.n	800b4e0 <USBD_StdItfReq+0xc0>
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10d      	bne.n	800b4e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fdc7 	bl	800c058 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4ca:	e009      	b.n	800b4e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fcf7 	bl	800bec2 <USBD_CtlError>
          break;
 800b4d4:	e004      	b.n	800b4e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fcf2 	bl	800bec2 <USBD_CtlError>
          break;
 800b4de:	e000      	b.n	800b4e2 <USBD_StdItfReq+0xc2>
          break;
 800b4e0:	bf00      	nop
      }
      break;
 800b4e2:	e004      	b.n	800b4ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fceb 	bl	800bec2 <USBD_CtlError>
      break;
 800b4ec:	bf00      	nop
  }

  return ret;
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	889b      	ldrh	r3, [r3, #4]
 800b50a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b514:	2b40      	cmp	r3, #64	; 0x40
 800b516:	d007      	beq.n	800b528 <USBD_StdEPReq+0x30>
 800b518:	2b40      	cmp	r3, #64	; 0x40
 800b51a:	f200 817f 	bhi.w	800b81c <USBD_StdEPReq+0x324>
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d02a      	beq.n	800b578 <USBD_StdEPReq+0x80>
 800b522:	2b20      	cmp	r3, #32
 800b524:	f040 817a 	bne.w	800b81c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fe83 	bl	800b238 <USBD_CoreFindEP>
 800b532:	4603      	mov	r3, r0
 800b534:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b536:	7b7b      	ldrb	r3, [r7, #13]
 800b538:	2bff      	cmp	r3, #255	; 0xff
 800b53a:	f000 8174 	beq.w	800b826 <USBD_StdEPReq+0x32e>
 800b53e:	7b7b      	ldrb	r3, [r7, #13]
 800b540:	2b00      	cmp	r3, #0
 800b542:	f040 8170 	bne.w	800b826 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b546:	7b7a      	ldrb	r2, [r7, #13]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b54e:	7b7a      	ldrb	r2, [r7, #13]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	32ae      	adds	r2, #174	; 0xae
 800b554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f000 8163 	beq.w	800b826 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b560:	7b7a      	ldrb	r2, [r7, #13]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	32ae      	adds	r2, #174	; 0xae
 800b566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	4798      	blx	r3
 800b572:	4603      	mov	r3, r0
 800b574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b576:	e156      	b.n	800b826 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	785b      	ldrb	r3, [r3, #1]
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d008      	beq.n	800b592 <USBD_StdEPReq+0x9a>
 800b580:	2b03      	cmp	r3, #3
 800b582:	f300 8145 	bgt.w	800b810 <USBD_StdEPReq+0x318>
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 809b 	beq.w	800b6c2 <USBD_StdEPReq+0x1ca>
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d03c      	beq.n	800b60a <USBD_StdEPReq+0x112>
 800b590:	e13e      	b.n	800b810 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d002      	beq.n	800b5a4 <USBD_StdEPReq+0xac>
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d016      	beq.n	800b5d0 <USBD_StdEPReq+0xd8>
 800b5a2:	e02c      	b.n	800b5fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5a4:	7bbb      	ldrb	r3, [r7, #14]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00d      	beq.n	800b5c6 <USBD_StdEPReq+0xce>
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	2b80      	cmp	r3, #128	; 0x80
 800b5ae:	d00a      	beq.n	800b5c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5b0:	7bbb      	ldrb	r3, [r7, #14]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f003 fd79 	bl	800f0ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5ba:	2180      	movs	r1, #128	; 0x80
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f003 fd75 	bl	800f0ac <USBD_LL_StallEP>
 800b5c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5c4:	e020      	b.n	800b608 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fc7a 	bl	800bec2 <USBD_CtlError>
              break;
 800b5ce:	e01b      	b.n	800b608 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	885b      	ldrh	r3, [r3, #2]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10e      	bne.n	800b5f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00b      	beq.n	800b5f6 <USBD_StdEPReq+0xfe>
 800b5de:	7bbb      	ldrb	r3, [r7, #14]
 800b5e0:	2b80      	cmp	r3, #128	; 0x80
 800b5e2:	d008      	beq.n	800b5f6 <USBD_StdEPReq+0xfe>
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	88db      	ldrh	r3, [r3, #6]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d104      	bne.n	800b5f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5ec:	7bbb      	ldrb	r3, [r7, #14]
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f003 fd5b 	bl	800f0ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fd2e 	bl	800c058 <USBD_CtlSendStatus>

              break;
 800b5fc:	e004      	b.n	800b608 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fc5e 	bl	800bec2 <USBD_CtlError>
              break;
 800b606:	bf00      	nop
          }
          break;
 800b608:	e107      	b.n	800b81a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b02      	cmp	r3, #2
 800b614:	d002      	beq.n	800b61c <USBD_StdEPReq+0x124>
 800b616:	2b03      	cmp	r3, #3
 800b618:	d016      	beq.n	800b648 <USBD_StdEPReq+0x150>
 800b61a:	e04b      	b.n	800b6b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b61c:	7bbb      	ldrb	r3, [r7, #14]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00d      	beq.n	800b63e <USBD_StdEPReq+0x146>
 800b622:	7bbb      	ldrb	r3, [r7, #14]
 800b624:	2b80      	cmp	r3, #128	; 0x80
 800b626:	d00a      	beq.n	800b63e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b628:	7bbb      	ldrb	r3, [r7, #14]
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f003 fd3d 	bl	800f0ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b632:	2180      	movs	r1, #128	; 0x80
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f003 fd39 	bl	800f0ac <USBD_LL_StallEP>
 800b63a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b63c:	e040      	b.n	800b6c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fc3e 	bl	800bec2 <USBD_CtlError>
              break;
 800b646:	e03b      	b.n	800b6c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	885b      	ldrh	r3, [r3, #2]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d136      	bne.n	800b6be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b656:	2b00      	cmp	r3, #0
 800b658:	d004      	beq.n	800b664 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f003 fd43 	bl	800f0ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fcf7 	bl	800c058 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff fde2 	bl	800b238 <USBD_CoreFindEP>
 800b674:	4603      	mov	r3, r0
 800b676:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b678:	7b7b      	ldrb	r3, [r7, #13]
 800b67a:	2bff      	cmp	r3, #255	; 0xff
 800b67c:	d01f      	beq.n	800b6be <USBD_StdEPReq+0x1c6>
 800b67e:	7b7b      	ldrb	r3, [r7, #13]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d11c      	bne.n	800b6be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b684:	7b7a      	ldrb	r2, [r7, #13]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b68c:	7b7a      	ldrb	r2, [r7, #13]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	32ae      	adds	r2, #174	; 0xae
 800b692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d010      	beq.n	800b6be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b69c:	7b7a      	ldrb	r2, [r7, #13]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	32ae      	adds	r2, #174	; 0xae
 800b6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	4798      	blx	r3
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b6b2:	e004      	b.n	800b6be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fc03 	bl	800bec2 <USBD_CtlError>
              break;
 800b6bc:	e000      	b.n	800b6c0 <USBD_StdEPReq+0x1c8>
              break;
 800b6be:	bf00      	nop
          }
          break;
 800b6c0:	e0ab      	b.n	800b81a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d002      	beq.n	800b6d4 <USBD_StdEPReq+0x1dc>
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d032      	beq.n	800b738 <USBD_StdEPReq+0x240>
 800b6d2:	e097      	b.n	800b804 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d007      	beq.n	800b6ea <USBD_StdEPReq+0x1f2>
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
 800b6dc:	2b80      	cmp	r3, #128	; 0x80
 800b6de:	d004      	beq.n	800b6ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fbed 	bl	800bec2 <USBD_CtlError>
                break;
 800b6e8:	e091      	b.n	800b80e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	da0b      	bge.n	800b70a <USBD_StdEPReq+0x212>
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	3310      	adds	r3, #16
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	4413      	add	r3, r2
 800b706:	3304      	adds	r3, #4
 800b708:	e00b      	b.n	800b722 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b710:	4613      	mov	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4413      	add	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	4413      	add	r3, r2
 800b720:	3304      	adds	r3, #4
 800b722:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2202      	movs	r2, #2
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fc37 	bl	800bfa4 <USBD_CtlSendData>
              break;
 800b736:	e06a      	b.n	800b80e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	da11      	bge.n	800b764 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b740:	7bbb      	ldrb	r3, [r7, #14]
 800b742:	f003 020f 	and.w	r2, r3, #15
 800b746:	6879      	ldr	r1, [r7, #4]
 800b748:	4613      	mov	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	440b      	add	r3, r1
 800b752:	3324      	adds	r3, #36	; 0x24
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d117      	bne.n	800b78a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fbb0 	bl	800bec2 <USBD_CtlError>
                  break;
 800b762:	e054      	b.n	800b80e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	f003 020f 	and.w	r2, r3, #15
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	440b      	add	r3, r1
 800b776:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d104      	bne.n	800b78a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fb9d 	bl	800bec2 <USBD_CtlError>
                  break;
 800b788:	e041      	b.n	800b80e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b78a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	da0b      	bge.n	800b7aa <USBD_StdEPReq+0x2b2>
 800b792:	7bbb      	ldrb	r3, [r7, #14]
 800b794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b798:	4613      	mov	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	3310      	adds	r3, #16
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	e00b      	b.n	800b7c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	4413      	add	r3, r2
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d002      	beq.n	800b7d0 <USBD_StdEPReq+0x2d8>
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	2b80      	cmp	r3, #128	; 0x80
 800b7ce:	d103      	bne.n	800b7d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]
 800b7d6:	e00e      	b.n	800b7f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f003 fca3 	bl	800f128 <USBD_LL_IsStallEP>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d003      	beq.n	800b7f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	e002      	b.n	800b7f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fbd1 	bl	800bfa4 <USBD_CtlSendData>
              break;
 800b802:	e004      	b.n	800b80e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fb5b 	bl	800bec2 <USBD_CtlError>
              break;
 800b80c:	bf00      	nop
          }
          break;
 800b80e:	e004      	b.n	800b81a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fb55 	bl	800bec2 <USBD_CtlError>
          break;
 800b818:	bf00      	nop
      }
      break;
 800b81a:	e005      	b.n	800b828 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fb4f 	bl	800bec2 <USBD_CtlError>
      break;
 800b824:	e000      	b.n	800b828 <USBD_StdEPReq+0x330>
      break;
 800b826:	bf00      	nop
  }

  return ret;
 800b828:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
	...

0800b834 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b842:	2300      	movs	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b846:	2300      	movs	r3, #0
 800b848:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	885b      	ldrh	r3, [r3, #2]
 800b84e:	0a1b      	lsrs	r3, r3, #8
 800b850:	b29b      	uxth	r3, r3
 800b852:	3b01      	subs	r3, #1
 800b854:	2b06      	cmp	r3, #6
 800b856:	f200 8128 	bhi.w	800baaa <USBD_GetDescriptor+0x276>
 800b85a:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <USBD_GetDescriptor+0x2c>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b87d 	.word	0x0800b87d
 800b864:	0800b895 	.word	0x0800b895
 800b868:	0800b8d5 	.word	0x0800b8d5
 800b86c:	0800baab 	.word	0x0800baab
 800b870:	0800baab 	.word	0x0800baab
 800b874:	0800ba4b 	.word	0x0800ba4b
 800b878:	0800ba77 	.word	0x0800ba77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	7c12      	ldrb	r2, [r2, #16]
 800b888:	f107 0108 	add.w	r1, r7, #8
 800b88c:	4610      	mov	r0, r2
 800b88e:	4798      	blx	r3
 800b890:	60f8      	str	r0, [r7, #12]
      break;
 800b892:	e112      	b.n	800baba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	7c1b      	ldrb	r3, [r3, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10d      	bne.n	800b8b8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a4:	f107 0208 	add.w	r2, r7, #8
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	4798      	blx	r3
 800b8ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8b6:	e100      	b.n	800baba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c0:	f107 0208 	add.w	r2, r7, #8
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	701a      	strb	r2, [r3, #0]
      break;
 800b8d2:	e0f2      	b.n	800baba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	885b      	ldrh	r3, [r3, #2]
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b05      	cmp	r3, #5
 800b8dc:	f200 80ac 	bhi.w	800ba38 <USBD_GetDescriptor+0x204>
 800b8e0:	a201      	add	r2, pc, #4	; (adr r2, 800b8e8 <USBD_GetDescriptor+0xb4>)
 800b8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e6:	bf00      	nop
 800b8e8:	0800b901 	.word	0x0800b901
 800b8ec:	0800b935 	.word	0x0800b935
 800b8f0:	0800b969 	.word	0x0800b969
 800b8f4:	0800b99d 	.word	0x0800b99d
 800b8f8:	0800b9d1 	.word	0x0800b9d1
 800b8fc:	0800ba05 	.word	0x0800ba05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00b      	beq.n	800b924 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	7c12      	ldrb	r2, [r2, #16]
 800b918:	f107 0108 	add.w	r1, r7, #8
 800b91c:	4610      	mov	r0, r2
 800b91e:	4798      	blx	r3
 800b920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b922:	e091      	b.n	800ba48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 facb 	bl	800bec2 <USBD_CtlError>
            err++;
 800b92c:	7afb      	ldrb	r3, [r7, #11]
 800b92e:	3301      	adds	r3, #1
 800b930:	72fb      	strb	r3, [r7, #11]
          break;
 800b932:	e089      	b.n	800ba48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	7c12      	ldrb	r2, [r2, #16]
 800b94c:	f107 0108 	add.w	r1, r7, #8
 800b950:	4610      	mov	r0, r2
 800b952:	4798      	blx	r3
 800b954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b956:	e077      	b.n	800ba48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fab1 	bl	800bec2 <USBD_CtlError>
            err++;
 800b960:	7afb      	ldrb	r3, [r7, #11]
 800b962:	3301      	adds	r3, #1
 800b964:	72fb      	strb	r3, [r7, #11]
          break;
 800b966:	e06f      	b.n	800ba48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00b      	beq.n	800b98c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	7c12      	ldrb	r2, [r2, #16]
 800b980:	f107 0108 	add.w	r1, r7, #8
 800b984:	4610      	mov	r0, r2
 800b986:	4798      	blx	r3
 800b988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b98a:	e05d      	b.n	800ba48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fa97 	bl	800bec2 <USBD_CtlError>
            err++;
 800b994:	7afb      	ldrb	r3, [r7, #11]
 800b996:	3301      	adds	r3, #1
 800b998:	72fb      	strb	r3, [r7, #11]
          break;
 800b99a:	e055      	b.n	800ba48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00b      	beq.n	800b9c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	7c12      	ldrb	r2, [r2, #16]
 800b9b4:	f107 0108 	add.w	r1, r7, #8
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	4798      	blx	r3
 800b9bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9be:	e043      	b.n	800ba48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fa7d 	bl	800bec2 <USBD_CtlError>
            err++;
 800b9c8:	7afb      	ldrb	r3, [r7, #11]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ce:	e03b      	b.n	800ba48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00b      	beq.n	800b9f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	7c12      	ldrb	r2, [r2, #16]
 800b9e8:	f107 0108 	add.w	r1, r7, #8
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	4798      	blx	r3
 800b9f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9f2:	e029      	b.n	800ba48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fa63 	bl	800bec2 <USBD_CtlError>
            err++;
 800b9fc:	7afb      	ldrb	r3, [r7, #11]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	72fb      	strb	r3, [r7, #11]
          break;
 800ba02:	e021      	b.n	800ba48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	7c12      	ldrb	r2, [r2, #16]
 800ba1c:	f107 0108 	add.w	r1, r7, #8
 800ba20:	4610      	mov	r0, r2
 800ba22:	4798      	blx	r3
 800ba24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba26:	e00f      	b.n	800ba48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fa49 	bl	800bec2 <USBD_CtlError>
            err++;
 800ba30:	7afb      	ldrb	r3, [r7, #11]
 800ba32:	3301      	adds	r3, #1
 800ba34:	72fb      	strb	r3, [r7, #11]
          break;
 800ba36:	e007      	b.n	800ba48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fa41 	bl	800bec2 <USBD_CtlError>
          err++;
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	3301      	adds	r3, #1
 800ba44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba46:	bf00      	nop
      }
      break;
 800ba48:	e037      	b.n	800baba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	7c1b      	ldrb	r3, [r3, #16]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d109      	bne.n	800ba66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5a:	f107 0208 	add.w	r2, r7, #8
 800ba5e:	4610      	mov	r0, r2
 800ba60:	4798      	blx	r3
 800ba62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba64:	e029      	b.n	800baba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fa2a 	bl	800bec2 <USBD_CtlError>
        err++;
 800ba6e:	7afb      	ldrb	r3, [r7, #11]
 800ba70:	3301      	adds	r3, #1
 800ba72:	72fb      	strb	r3, [r7, #11]
      break;
 800ba74:	e021      	b.n	800baba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	7c1b      	ldrb	r3, [r3, #16]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10d      	bne.n	800ba9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba86:	f107 0208 	add.w	r2, r7, #8
 800ba8a:	4610      	mov	r0, r2
 800ba8c:	4798      	blx	r3
 800ba8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3301      	adds	r3, #1
 800ba94:	2207      	movs	r2, #7
 800ba96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba98:	e00f      	b.n	800baba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fa10 	bl	800bec2 <USBD_CtlError>
        err++;
 800baa2:	7afb      	ldrb	r3, [r7, #11]
 800baa4:	3301      	adds	r3, #1
 800baa6:	72fb      	strb	r3, [r7, #11]
      break;
 800baa8:	e007      	b.n	800baba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fa08 	bl	800bec2 <USBD_CtlError>
      err++;
 800bab2:	7afb      	ldrb	r3, [r7, #11]
 800bab4:	3301      	adds	r3, #1
 800bab6:	72fb      	strb	r3, [r7, #11]
      break;
 800bab8:	bf00      	nop
  }

  if (err != 0U)
 800baba:	7afb      	ldrb	r3, [r7, #11]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d11e      	bne.n	800bafe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	88db      	ldrh	r3, [r3, #6]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d016      	beq.n	800baf6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bac8:	893b      	ldrh	r3, [r7, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00e      	beq.n	800baec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	88da      	ldrh	r2, [r3, #6]
 800bad2:	893b      	ldrh	r3, [r7, #8]
 800bad4:	4293      	cmp	r3, r2
 800bad6:	bf28      	it	cs
 800bad8:	4613      	movcs	r3, r2
 800bada:	b29b      	uxth	r3, r3
 800badc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bade:	893b      	ldrh	r3, [r7, #8]
 800bae0:	461a      	mov	r2, r3
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fa5d 	bl	800bfa4 <USBD_CtlSendData>
 800baea:	e009      	b.n	800bb00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f9e7 	bl	800bec2 <USBD_CtlError>
 800baf4:	e004      	b.n	800bb00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 faae 	bl	800c058 <USBD_CtlSendStatus>
 800bafc:	e000      	b.n	800bb00 <USBD_GetDescriptor+0x2cc>
    return;
 800bafe:	bf00      	nop
  }
}
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop

0800bb08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	889b      	ldrh	r3, [r3, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d131      	bne.n	800bb7e <USBD_SetAddress+0x76>
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	88db      	ldrh	r3, [r3, #6]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d12d      	bne.n	800bb7e <USBD_SetAddress+0x76>
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	885b      	ldrh	r3, [r3, #2]
 800bb26:	2b7f      	cmp	r3, #127	; 0x7f
 800bb28:	d829      	bhi.n	800bb7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	885b      	ldrh	r3, [r3, #2]
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d104      	bne.n	800bb4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f9bc 	bl	800bec2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb4a:	e01d      	b.n	800bb88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	7bfa      	ldrb	r2, [r7, #15]
 800bb50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f003 fb11 	bl	800f180 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa7a 	bl	800c058 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d004      	beq.n	800bb74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb72:	e009      	b.n	800bb88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb7c:	e004      	b.n	800bb88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb7e:	6839      	ldr	r1, [r7, #0]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f99e 	bl	800bec2 <USBD_CtlError>
  }
}
 800bb86:	bf00      	nop
 800bb88:	bf00      	nop
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	885b      	ldrh	r3, [r3, #2]
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	4b4e      	ldr	r3, [pc, #312]	; (800bce0 <USBD_SetConfig+0x150>)
 800bba6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bba8:	4b4d      	ldr	r3, [pc, #308]	; (800bce0 <USBD_SetConfig+0x150>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d905      	bls.n	800bbbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f985 	bl	800bec2 <USBD_CtlError>
    return USBD_FAIL;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	e08c      	b.n	800bcd6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d002      	beq.n	800bbce <USBD_SetConfig+0x3e>
 800bbc8:	2b03      	cmp	r3, #3
 800bbca:	d029      	beq.n	800bc20 <USBD_SetConfig+0x90>
 800bbcc:	e075      	b.n	800bcba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bbce:	4b44      	ldr	r3, [pc, #272]	; (800bce0 <USBD_SetConfig+0x150>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d020      	beq.n	800bc18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bbd6:	4b42      	ldr	r3, [pc, #264]	; (800bce0 <USBD_SetConfig+0x150>)
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbe0:	4b3f      	ldr	r3, [pc, #252]	; (800bce0 <USBD_SetConfig+0x150>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7fe ffe7 	bl	800abba <USBD_SetClassConfig>
 800bbec:	4603      	mov	r3, r0
 800bbee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d008      	beq.n	800bc08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f962 	bl	800bec2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2202      	movs	r2, #2
 800bc02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc06:	e065      	b.n	800bcd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 fa25 	bl	800c058 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2203      	movs	r2, #3
 800bc12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc16:	e05d      	b.n	800bcd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fa1d 	bl	800c058 <USBD_CtlSendStatus>
      break;
 800bc1e:	e059      	b.n	800bcd4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc20:	4b2f      	ldr	r3, [pc, #188]	; (800bce0 <USBD_SetConfig+0x150>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d112      	bne.n	800bc4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bc30:	4b2b      	ldr	r3, [pc, #172]	; (800bce0 <USBD_SetConfig+0x150>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	461a      	mov	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc3a:	4b29      	ldr	r3, [pc, #164]	; (800bce0 <USBD_SetConfig+0x150>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7fe ffd6 	bl	800abf2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fa06 	bl	800c058 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc4c:	e042      	b.n	800bcd4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc4e:	4b24      	ldr	r3, [pc, #144]	; (800bce0 <USBD_SetConfig+0x150>)
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d02a      	beq.n	800bcb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7fe ffc4 	bl	800abf2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc6a:	4b1d      	ldr	r3, [pc, #116]	; (800bce0 <USBD_SetConfig+0x150>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc74:	4b1a      	ldr	r3, [pc, #104]	; (800bce0 <USBD_SetConfig+0x150>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7fe ff9d 	bl	800abba <USBD_SetClassConfig>
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00f      	beq.n	800bcaa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc8a:	6839      	ldr	r1, [r7, #0]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f918 	bl	800bec2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7fe ffa9 	bl	800abf2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bca8:	e014      	b.n	800bcd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f9d4 	bl	800c058 <USBD_CtlSendStatus>
      break;
 800bcb0:	e010      	b.n	800bcd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f9d0 	bl	800c058 <USBD_CtlSendStatus>
      break;
 800bcb8:	e00c      	b.n	800bcd4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 f900 	bl	800bec2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcc2:	4b07      	ldr	r3, [pc, #28]	; (800bce0 <USBD_SetConfig+0x150>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7fe ff92 	bl	800abf2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd2:	bf00      	nop
  }

  return ret;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20000c1c 	.word	0x20000c1c

0800bce4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	88db      	ldrh	r3, [r3, #6]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d004      	beq.n	800bd00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f8e2 	bl	800bec2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcfe:	e023      	b.n	800bd48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	dc02      	bgt.n	800bd12 <USBD_GetConfig+0x2e>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dc03      	bgt.n	800bd18 <USBD_GetConfig+0x34>
 800bd10:	e015      	b.n	800bd3e <USBD_GetConfig+0x5a>
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d00b      	beq.n	800bd2e <USBD_GetConfig+0x4a>
 800bd16:	e012      	b.n	800bd3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3308      	adds	r3, #8
 800bd22:	2201      	movs	r2, #1
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f93c 	bl	800bfa4 <USBD_CtlSendData>
        break;
 800bd2c:	e00c      	b.n	800bd48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3304      	adds	r3, #4
 800bd32:	2201      	movs	r2, #1
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f934 	bl	800bfa4 <USBD_CtlSendData>
        break;
 800bd3c:	e004      	b.n	800bd48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f8be 	bl	800bec2 <USBD_CtlError>
        break;
 800bd46:	bf00      	nop
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	3b01      	subs	r3, #1
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d81e      	bhi.n	800bda6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	88db      	ldrh	r3, [r3, #6]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d004      	beq.n	800bd7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd70:	6839      	ldr	r1, [r7, #0]
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f8a5 	bl	800bec2 <USBD_CtlError>
        break;
 800bd78:	e01a      	b.n	800bdb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d005      	beq.n	800bd96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	f043 0202 	orr.w	r2, r3, #2
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	330c      	adds	r3, #12
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f900 	bl	800bfa4 <USBD_CtlSendData>
      break;
 800bda4:	e004      	b.n	800bdb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f88a 	bl	800bec2 <USBD_CtlError>
      break;
 800bdae:	bf00      	nop
  }
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d107      	bne.n	800bdda <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f940 	bl	800c058 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bdd8:	e013      	b.n	800be02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	885b      	ldrh	r3, [r3, #2]
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d10b      	bne.n	800bdfa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	889b      	ldrh	r3, [r3, #4]
 800bde6:	0a1b      	lsrs	r3, r3, #8
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f930 	bl	800c058 <USBD_CtlSendStatus>
}
 800bdf8:	e003      	b.n	800be02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f860 	bl	800bec2 <USBD_CtlError>
}
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b082      	sub	sp, #8
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d80b      	bhi.n	800be3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	885b      	ldrh	r3, [r3, #2]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d10c      	bne.n	800be44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f910 	bl	800c058 <USBD_CtlSendStatus>
      }
      break;
 800be38:	e004      	b.n	800be44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f840 	bl	800bec2 <USBD_CtlError>
      break;
 800be42:	e000      	b.n	800be46 <USBD_ClrFeature+0x3c>
      break;
 800be44:	bf00      	nop
  }
}
 800be46:	bf00      	nop
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
 800be56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	781a      	ldrb	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3301      	adds	r3, #1
 800be68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	781a      	ldrb	r2, [r3, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3301      	adds	r3, #1
 800be76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f7ff fa41 	bl	800b300 <SWAPBYTE>
 800be7e:	4603      	mov	r3, r0
 800be80:	461a      	mov	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3301      	adds	r3, #1
 800be8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3301      	adds	r3, #1
 800be90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7ff fa34 	bl	800b300 <SWAPBYTE>
 800be98:	4603      	mov	r3, r0
 800be9a:	461a      	mov	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3301      	adds	r3, #1
 800bea4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3301      	adds	r3, #1
 800beaa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7ff fa27 	bl	800b300 <SWAPBYTE>
 800beb2:	4603      	mov	r3, r0
 800beb4:	461a      	mov	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	80da      	strh	r2, [r3, #6]
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b082      	sub	sp, #8
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800becc:	2180      	movs	r1, #128	; 0x80
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f003 f8ec 	bl	800f0ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bed4:	2100      	movs	r1, #0
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f003 f8e8 	bl	800f0ac <USBD_LL_StallEP>
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d036      	beq.n	800bf68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800befe:	6938      	ldr	r0, [r7, #16]
 800bf00:	f000 f836 	bl	800bf70 <USBD_GetLen>
 800bf04:	4603      	mov	r3, r0
 800bf06:	3301      	adds	r3, #1
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	005b      	lsls	r3, r3, #1
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	4413      	add	r3, r2
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	7812      	ldrb	r2, [r2, #0]
 800bf1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	3301      	adds	r3, #1
 800bf22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	4413      	add	r3, r2
 800bf2a:	2203      	movs	r2, #3
 800bf2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	3301      	adds	r3, #1
 800bf32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf34:	e013      	b.n	800bf5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	7812      	ldrb	r2, [r2, #0]
 800bf40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	3301      	adds	r3, #1
 800bf46:	613b      	str	r3, [r7, #16]
    idx++;
 800bf48:	7dfb      	ldrb	r3, [r7, #23]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	4413      	add	r3, r2
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1e7      	bne.n	800bf36 <USBD_GetString+0x52>
 800bf66:	e000      	b.n	800bf6a <USBD_GetString+0x86>
    return;
 800bf68:	bf00      	nop
  }
}
 800bf6a:	3718      	adds	r7, #24
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf80:	e005      	b.n	800bf8e <USBD_GetLen+0x1e>
  {
    len++;
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
 800bf84:	3301      	adds	r3, #1
 800bf86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1f5      	bne.n	800bf82 <USBD_GetLen+0x12>
  }

  return len;
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2202      	movs	r2, #2
 800bfb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	2100      	movs	r1, #0
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f003 f8f7 	bl	800f1be <USBD_LL_Transmit>

  return USBD_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	2100      	movs	r1, #0
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f003 f8e6 	bl	800f1be <USBD_LL_Transmit>

  return USBD_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2203      	movs	r2, #3
 800c00c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	2100      	movs	r1, #0
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f003 f8ea 	bl	800f200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b084      	sub	sp, #16
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	60f8      	str	r0, [r7, #12]
 800c03e:	60b9      	str	r1, [r7, #8]
 800c040:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	2100      	movs	r1, #0
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f003 f8d9 	bl	800f200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2204      	movs	r2, #4
 800c064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c068:	2300      	movs	r3, #0
 800c06a:	2200      	movs	r2, #0
 800c06c:	2100      	movs	r1, #0
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f003 f8a5 	bl	800f1be <USBD_LL_Transmit>

  return USBD_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b082      	sub	sp, #8
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2205      	movs	r2, #5
 800c08a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c08e:	2300      	movs	r3, #0
 800c090:	2200      	movs	r2, #0
 800c092:	2100      	movs	r1, #0
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f003 f8b3 	bl	800f200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 800c0b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0b6:	2b84      	cmp	r3, #132	; 0x84
 800c0b8:	d005      	beq.n	800c0c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c0ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	3303      	adds	r3, #3
 800c0c4:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3714      	adds	r7, #20
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c0d8:	f001 f8d6 	bl	800d288 <vTaskStartScheduler>

  return osOK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c0e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e4:	b089      	sub	sp, #36	; 0x24
 800c0e6:	af04      	add	r7, sp, #16
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d020      	beq.n	800c136 <osThreadCreate+0x54>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d01c      	beq.n	800c136 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685c      	ldr	r4, [r3, #4]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	691e      	ldr	r6, [r3, #16]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c10e:	4618      	mov	r0, r3
 800c110:	f7ff ffc8 	bl	800c0a4 <makeFreeRtosPriority>
 800c114:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c11e:	9202      	str	r2, [sp, #8]
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	9100      	str	r1, [sp, #0]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	4632      	mov	r2, r6
 800c128:	4629      	mov	r1, r5
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 fdc8 	bl	800ccc0 <xTaskCreateStatic>
 800c130:	4603      	mov	r3, r0
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e01c      	b.n	800c170 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	685c      	ldr	r4, [r3, #4]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c142:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff ffaa 	bl	800c0a4 <makeFreeRtosPriority>
 800c150:	4602      	mov	r2, r0
 800c152:	f107 030c 	add.w	r3, r7, #12
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	9200      	str	r2, [sp, #0]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	4632      	mov	r2, r6
 800c15e:	4629      	mov	r1, r5
 800c160:	4620      	mov	r0, r4
 800c162:	f000 fe0a 	bl	800cd7a <xTaskCreate>
 800c166:	4603      	mov	r3, r0
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d001      	beq.n	800c170 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c16c:	2300      	movs	r3, #0
 800c16e:	e000      	b.n	800c172 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 800c170:	68fb      	ldr	r3, [r7, #12]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c17a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b084      	sub	sp, #16
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <osDelay+0x16>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	e000      	b.n	800c192 <osDelay+0x18>
 800c190:	2301      	movs	r3, #1
 800c192:	4618      	mov	r0, r3
 800c194:	f000 ffb2 	bl	800d0fc <vTaskDelay>

  return osOK;
 800c198:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b083      	sub	sp, #12
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f103 0208 	add.w	r2, r3, #8
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f103 0208 	add.w	r2, r3, #8
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f103 0208 	add.w	r2, r3, #8
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b083      	sub	sp, #12
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	689a      	ldr	r2, [r3, #8]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	601a      	str	r2, [r3, #0]
}
 800c238:	bf00      	nop
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c25a:	d103      	bne.n	800c264 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	e00c      	b.n	800c27e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3308      	adds	r3, #8
 800c268:	60fb      	str	r3, [r7, #12]
 800c26a:	e002      	b.n	800c272 <vListInsert+0x2e>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d2f6      	bcs.n	800c26c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	1c5a      	adds	r2, r3, #1
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	601a      	str	r2, [r3, #0]
}
 800c2aa:	bf00      	nop
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b085      	sub	sp, #20
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	6892      	ldr	r2, [r2, #8]
 800c2cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6852      	ldr	r2, [r2, #4]
 800c2d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d103      	bne.n	800c2ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	689a      	ldr	r2, [r3, #8]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	1e5a      	subs	r2, r3, #1
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
	...

0800c30c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <xQueueGenericReset+0x2a>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	60bb      	str	r3, [r7, #8]
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c336:	f002 f985 	bl	800e644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	68f9      	ldr	r1, [r7, #12]
 800c344:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c346:	fb01 f303 	mul.w	r3, r1, r3
 800c34a:	441a      	add	r2, r3
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c366:	3b01      	subs	r3, #1
 800c368:	68f9      	ldr	r1, [r7, #12]
 800c36a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c36c:	fb01 f303 	mul.w	r3, r1, r3
 800c370:	441a      	add	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	22ff      	movs	r2, #255	; 0xff
 800c37a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	22ff      	movs	r2, #255	; 0xff
 800c382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d114      	bne.n	800c3b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d01a      	beq.n	800c3ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3310      	adds	r3, #16
 800c398:	4618      	mov	r0, r3
 800c39a:	f001 f9f9 	bl	800d790 <xTaskRemoveFromEventList>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d012      	beq.n	800c3ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3a4:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <xQueueGenericReset+0xcc>)
 800c3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	e009      	b.n	800c3ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3310      	adds	r3, #16
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff fef1 	bl	800c1a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3324      	adds	r3, #36	; 0x24
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff feec 	bl	800c1a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c3ca:	f002 f96b 	bl	800e6a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c3ce:	2301      	movs	r3, #1
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	e000ed04 	.word	0xe000ed04

0800c3dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b08e      	sub	sp, #56	; 0x38
 800c3e0:	af02      	add	r7, sp, #8
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10a      	bne.n	800c406 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10a      	bne.n	800c422 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c41e:	bf00      	nop
 800c420:	e7fe      	b.n	800c420 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <xQueueGenericCreateStatic+0x52>
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <xQueueGenericCreateStatic+0x56>
 800c42e:	2301      	movs	r3, #1
 800c430:	e000      	b.n	800c434 <xQueueGenericCreateStatic+0x58>
 800c432:	2300      	movs	r3, #0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	623b      	str	r3, [r7, #32]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d102      	bne.n	800c45a <xQueueGenericCreateStatic+0x7e>
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <xQueueGenericCreateStatic+0x82>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e000      	b.n	800c460 <xQueueGenericCreateStatic+0x84>
 800c45e:	2300      	movs	r3, #0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10a      	bne.n	800c47a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	61fb      	str	r3, [r7, #28]
}
 800c476:	bf00      	nop
 800c478:	e7fe      	b.n	800c478 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c47a:	2348      	movs	r3, #72	; 0x48
 800c47c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b48      	cmp	r3, #72	; 0x48
 800c482:	d00a      	beq.n	800c49a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	61bb      	str	r3, [r7, #24]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c49a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00d      	beq.n	800c4c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	68b9      	ldr	r1, [r7, #8]
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f000 f805 	bl	800c4cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3730      	adds	r7, #48	; 0x30
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d103      	bne.n	800c4e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	69ba      	ldr	r2, [r7, #24]
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	e002      	b.n	800c4ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	69b8      	ldr	r0, [r7, #24]
 800c4fe:	f7ff ff05 	bl	800c30c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b08e      	sub	sp, #56	; 0x38
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c51a:	2300      	movs	r3, #0
 800c51c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10a      	bne.n	800c53e <xQueueGenericSend+0x32>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c53a:	bf00      	nop
 800c53c:	e7fe      	b.n	800c53c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d103      	bne.n	800c54c <xQueueGenericSend+0x40>
 800c544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <xQueueGenericSend+0x44>
 800c54c:	2301      	movs	r3, #1
 800c54e:	e000      	b.n	800c552 <xQueueGenericSend+0x46>
 800c550:	2300      	movs	r3, #0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <xQueueGenericSend+0x60>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d103      	bne.n	800c57a <xQueueGenericSend+0x6e>
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c576:	2b01      	cmp	r3, #1
 800c578:	d101      	bne.n	800c57e <xQueueGenericSend+0x72>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <xQueueGenericSend+0x74>
 800c57e:	2300      	movs	r3, #0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10a      	bne.n	800c59a <xQueueGenericSend+0x8e>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	623b      	str	r3, [r7, #32]
}
 800c596:	bf00      	nop
 800c598:	e7fe      	b.n	800c598 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c59a:	f001 fab5 	bl	800db08 <xTaskGetSchedulerState>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d102      	bne.n	800c5aa <xQueueGenericSend+0x9e>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <xQueueGenericSend+0xa2>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e000      	b.n	800c5b0 <xQueueGenericSend+0xa4>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10a      	bne.n	800c5ca <xQueueGenericSend+0xbe>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	61fb      	str	r3, [r7, #28]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5ca:	f002 f83b 	bl	800e644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d302      	bcc.n	800c5e0 <xQueueGenericSend+0xd4>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d129      	bne.n	800c634 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e6:	f000 fa0b 	bl	800ca00 <prvCopyDataToQueue>
 800c5ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d010      	beq.n	800c616 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	3324      	adds	r3, #36	; 0x24
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f001 f8c9 	bl	800d790 <xTaskRemoveFromEventList>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d013      	beq.n	800c62c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c604:	4b3f      	ldr	r3, [pc, #252]	; (800c704 <xQueueGenericSend+0x1f8>)
 800c606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	e00a      	b.n	800c62c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d007      	beq.n	800c62c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c61c:	4b39      	ldr	r3, [pc, #228]	; (800c704 <xQueueGenericSend+0x1f8>)
 800c61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c62c:	f002 f83a 	bl	800e6a4 <vPortExitCritical>
				return pdPASS;
 800c630:	2301      	movs	r3, #1
 800c632:	e063      	b.n	800c6fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d103      	bne.n	800c642 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c63a:	f002 f833 	bl	800e6a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	e05c      	b.n	800c6fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c644:	2b00      	cmp	r3, #0
 800c646:	d106      	bne.n	800c656 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c648:	f107 0314 	add.w	r3, r7, #20
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 f901 	bl	800d854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c652:	2301      	movs	r3, #1
 800c654:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c656:	f002 f825 	bl	800e6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c65a:	f000 fe7b 	bl	800d354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c65e:	f001 fff1 	bl	800e644 <vPortEnterCritical>
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c668:	b25b      	sxtb	r3, r3
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c66e:	d103      	bne.n	800c678 <xQueueGenericSend+0x16c>
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	2200      	movs	r2, #0
 800c674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c67e:	b25b      	sxtb	r3, r3
 800c680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c684:	d103      	bne.n	800c68e <xQueueGenericSend+0x182>
 800c686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c68e:	f002 f809 	bl	800e6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c692:	1d3a      	adds	r2, r7, #4
 800c694:	f107 0314 	add.w	r3, r7, #20
 800c698:	4611      	mov	r1, r2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f001 f8f0 	bl	800d880 <xTaskCheckForTimeOut>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d124      	bne.n	800c6f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6a8:	f000 fa94 	bl	800cbd4 <prvIsQueueFull>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d018      	beq.n	800c6e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	3310      	adds	r3, #16
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f001 f818 	bl	800d6f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6c2:	f000 fa1f 	bl	800cb04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6c6:	f000 fe53 	bl	800d370 <xTaskResumeAll>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f47f af7c 	bne.w	800c5ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c6d2:	4b0c      	ldr	r3, [pc, #48]	; (800c704 <xQueueGenericSend+0x1f8>)
 800c6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	e772      	b.n	800c5ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6e6:	f000 fa0d 	bl	800cb04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6ea:	f000 fe41 	bl	800d370 <xTaskResumeAll>
 800c6ee:	e76c      	b.n	800c5ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6f2:	f000 fa07 	bl	800cb04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6f6:	f000 fe3b 	bl	800d370 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c6fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3738      	adds	r7, #56	; 0x38
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	e000ed04 	.word	0xe000ed04

0800c708 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b090      	sub	sp, #64	; 0x40
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10a      	bne.n	800c736 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c732:	bf00      	nop
 800c734:	e7fe      	b.n	800c734 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d103      	bne.n	800c744 <xQueueGenericSendFromISR+0x3c>
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <xQueueGenericSendFromISR+0x40>
 800c744:	2301      	movs	r3, #1
 800c746:	e000      	b.n	800c74a <xQueueGenericSendFromISR+0x42>
 800c748:	2300      	movs	r3, #0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	2b02      	cmp	r3, #2
 800c768:	d103      	bne.n	800c772 <xQueueGenericSendFromISR+0x6a>
 800c76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d101      	bne.n	800c776 <xQueueGenericSendFromISR+0x6e>
 800c772:	2301      	movs	r3, #1
 800c774:	e000      	b.n	800c778 <xQueueGenericSendFromISR+0x70>
 800c776:	2300      	movs	r3, #0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	623b      	str	r3, [r7, #32]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c792:	f002 f839 	bl	800e808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c796:	f3ef 8211 	mrs	r2, BASEPRI
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	61fa      	str	r2, [r7, #28]
 800c7ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c7ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d302      	bcc.n	800c7c4 <xQueueGenericSendFromISR+0xbc>
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d12f      	bne.n	800c824 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7d4:	683a      	ldr	r2, [r7, #0]
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7da:	f000 f911 	bl	800ca00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c7de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c7e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7e6:	d112      	bne.n	800c80e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d016      	beq.n	800c81e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	3324      	adds	r3, #36	; 0x24
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 ffcb 	bl	800d790 <xTaskRemoveFromEventList>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00e      	beq.n	800c81e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00b      	beq.n	800c81e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	e007      	b.n	800c81e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c80e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c812:	3301      	adds	r3, #1
 800c814:	b2db      	uxtb	r3, r3
 800c816:	b25a      	sxtb	r2, r3
 800c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c81e:	2301      	movs	r3, #1
 800c820:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c822:	e001      	b.n	800c828 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c824:	2300      	movs	r3, #0
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c832:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c836:	4618      	mov	r0, r3
 800c838:	3740      	adds	r7, #64	; 0x40
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
	...

0800c840 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b08c      	sub	sp, #48	; 0x30
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c84c:	2300      	movs	r3, #0
 800c84e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10a      	bne.n	800c870 <xQueueReceive+0x30>
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	623b      	str	r3, [r7, #32]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d103      	bne.n	800c87e <xQueueReceive+0x3e>
 800c876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <xQueueReceive+0x42>
 800c87e:	2301      	movs	r3, #1
 800c880:	e000      	b.n	800c884 <xQueueReceive+0x44>
 800c882:	2300      	movs	r3, #0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <xQueueReceive+0x5e>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	61fb      	str	r3, [r7, #28]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c89e:	f001 f933 	bl	800db08 <xTaskGetSchedulerState>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d102      	bne.n	800c8ae <xQueueReceive+0x6e>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <xQueueReceive+0x72>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e000      	b.n	800c8b4 <xQueueReceive+0x74>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10a      	bne.n	800c8ce <xQueueReceive+0x8e>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	61bb      	str	r3, [r7, #24]
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8ce:	f001 feb9 	bl	800e644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d01f      	beq.n	800c91e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8de:	68b9      	ldr	r1, [r7, #8]
 800c8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8e2:	f000 f8e9 	bl	800cab8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	1e5a      	subs	r2, r3, #1
 800c8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00f      	beq.n	800c916 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f8:	3310      	adds	r3, #16
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f000 ff48 	bl	800d790 <xTaskRemoveFromEventList>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d007      	beq.n	800c916 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c906:	4b3d      	ldr	r3, [pc, #244]	; (800c9fc <xQueueReceive+0x1bc>)
 800c908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c916:	f001 fec5 	bl	800e6a4 <vPortExitCritical>
				return pdPASS;
 800c91a:	2301      	movs	r3, #1
 800c91c:	e069      	b.n	800c9f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d103      	bne.n	800c92c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c924:	f001 febe 	bl	800e6a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c928:	2300      	movs	r3, #0
 800c92a:	e062      	b.n	800c9f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d106      	bne.n	800c940 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c932:	f107 0310 	add.w	r3, r7, #16
 800c936:	4618      	mov	r0, r3
 800c938:	f000 ff8c 	bl	800d854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c940:	f001 feb0 	bl	800e6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c944:	f000 fd06 	bl	800d354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c948:	f001 fe7c 	bl	800e644 <vPortEnterCritical>
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c952:	b25b      	sxtb	r3, r3
 800c954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c958:	d103      	bne.n	800c962 <xQueueReceive+0x122>
 800c95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c968:	b25b      	sxtb	r3, r3
 800c96a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c96e:	d103      	bne.n	800c978 <xQueueReceive+0x138>
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c972:	2200      	movs	r2, #0
 800c974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c978:	f001 fe94 	bl	800e6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c97c:	1d3a      	adds	r2, r7, #4
 800c97e:	f107 0310 	add.w	r3, r7, #16
 800c982:	4611      	mov	r1, r2
 800c984:	4618      	mov	r0, r3
 800c986:	f000 ff7b 	bl	800d880 <xTaskCheckForTimeOut>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d123      	bne.n	800c9d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c992:	f000 f909 	bl	800cba8 <prvIsQueueEmpty>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d017      	beq.n	800c9cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	3324      	adds	r3, #36	; 0x24
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 fea3 	bl	800d6f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ac:	f000 f8aa 	bl	800cb04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9b0:	f000 fcde 	bl	800d370 <xTaskResumeAll>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d189      	bne.n	800c8ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c9ba:	4b10      	ldr	r3, [pc, #64]	; (800c9fc <xQueueReceive+0x1bc>)
 800c9bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	e780      	b.n	800c8ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c9cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ce:	f000 f899 	bl	800cb04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9d2:	f000 fccd 	bl	800d370 <xTaskResumeAll>
 800c9d6:	e77a      	b.n	800c8ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9da:	f000 f893 	bl	800cb04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9de:	f000 fcc7 	bl	800d370 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9e4:	f000 f8e0 	bl	800cba8 <prvIsQueueEmpty>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f43f af6f 	beq.w	800c8ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3730      	adds	r7, #48	; 0x30
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	e000ed04 	.word	0xe000ed04

0800ca00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca14:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d043      	beq.n	800caa6 <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d119      	bne.n	800ca58 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6858      	ldr	r0, [r3, #4]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	68b9      	ldr	r1, [r7, #8]
 800ca30:	f003 fb30 	bl	8010094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	685a      	ldr	r2, [r3, #4]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca3c:	441a      	add	r2, r3
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	685a      	ldr	r2, [r3, #4]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d32b      	bcc.n	800caa6 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	605a      	str	r2, [r3, #4]
 800ca56:	e026      	b.n	800caa6 <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	68d8      	ldr	r0, [r3, #12]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca60:	461a      	mov	r2, r3
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	f003 fb16 	bl	8010094 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	68da      	ldr	r2, [r3, #12]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca70:	425b      	negs	r3, r3
 800ca72:	441a      	add	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	68da      	ldr	r2, [r3, #12]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d207      	bcs.n	800ca94 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	689a      	ldr	r2, [r3, #8]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8c:	425b      	negs	r3, r3
 800ca8e:	441a      	add	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b02      	cmp	r3, #2
 800ca98:	d105      	bne.n	800caa6 <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	3b01      	subs	r3, #1
 800caa4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	1c5a      	adds	r2, r3, #1
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800caae:	693b      	ldr	r3, [r7, #16]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d018      	beq.n	800cafc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68da      	ldr	r2, [r3, #12]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad2:	441a      	add	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68da      	ldr	r2, [r3, #12]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d303      	bcc.n	800caec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	68d9      	ldr	r1, [r3, #12]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf4:	461a      	mov	r2, r3
 800caf6:	6838      	ldr	r0, [r7, #0]
 800caf8:	f003 facc 	bl	8010094 <memcpy>
	}
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb0c:	f001 fd9a 	bl	800e644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb18:	e011      	b.n	800cb3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d012      	beq.n	800cb48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	3324      	adds	r3, #36	; 0x24
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 fe32 	bl	800d790 <xTaskRemoveFromEventList>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb32:	f000 ff07 	bl	800d944 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb36:	7bfb      	ldrb	r3, [r7, #15]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dce9      	bgt.n	800cb1a <prvUnlockQueue+0x16>
 800cb46:	e000      	b.n	800cb4a <prvUnlockQueue+0x46>
					break;
 800cb48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	22ff      	movs	r2, #255	; 0xff
 800cb4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cb52:	f001 fda7 	bl	800e6a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb56:	f001 fd75 	bl	800e644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb62:	e011      	b.n	800cb88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d012      	beq.n	800cb92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3310      	adds	r3, #16
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 fe0d 	bl	800d790 <xTaskRemoveFromEventList>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb7c:	f000 fee2 	bl	800d944 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb80:	7bbb      	ldrb	r3, [r7, #14]
 800cb82:	3b01      	subs	r3, #1
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	dce9      	bgt.n	800cb64 <prvUnlockQueue+0x60>
 800cb90:	e000      	b.n	800cb94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	22ff      	movs	r2, #255	; 0xff
 800cb98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb9c:	f001 fd82 	bl	800e6a4 <vPortExitCritical>
}
 800cba0:	bf00      	nop
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbb0:	f001 fd48 	bl	800e644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d102      	bne.n	800cbc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	e001      	b.n	800cbc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbc6:	f001 fd6d 	bl	800e6a4 <vPortExitCritical>

	return xReturn;
 800cbca:	68fb      	ldr	r3, [r7, #12]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbdc:	f001 fd32 	bl	800e644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d102      	bne.n	800cbf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	60fb      	str	r3, [r7, #12]
 800cbf0:	e001      	b.n	800cbf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbf6:	f001 fd55 	bl	800e6a4 <vPortExitCritical>

	return xReturn;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	e014      	b.n	800cc3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc14:	4a0f      	ldr	r2, [pc, #60]	; (800cc54 <vQueueAddToRegistry+0x50>)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10b      	bne.n	800cc38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc20:	490c      	ldr	r1, [pc, #48]	; (800cc54 <vQueueAddToRegistry+0x50>)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc2a:	4a0a      	ldr	r2, [pc, #40]	; (800cc54 <vQueueAddToRegistry+0x50>)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	00db      	lsls	r3, r3, #3
 800cc30:	4413      	add	r3, r2
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc36:	e006      	b.n	800cc46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	60fb      	str	r3, [r7, #12]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2b07      	cmp	r3, #7
 800cc42:	d9e7      	bls.n	800cc14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc44:	bf00      	nop
 800cc46:	bf00      	nop
 800cc48:	3714      	adds	r7, #20
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	20000c20 	.word	0x20000c20

0800cc58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc68:	f001 fcec 	bl	800e644 <vPortEnterCritical>
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc72:	b25b      	sxtb	r3, r3
 800cc74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc78:	d103      	bne.n	800cc82 <vQueueWaitForMessageRestricted+0x2a>
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc88:	b25b      	sxtb	r3, r3
 800cc8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc8e:	d103      	bne.n	800cc98 <vQueueWaitForMessageRestricted+0x40>
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc98:	f001 fd04 	bl	800e6a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d106      	bne.n	800ccb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	3324      	adds	r3, #36	; 0x24
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	68b9      	ldr	r1, [r7, #8]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 fd43 	bl	800d738 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccb2:	6978      	ldr	r0, [r7, #20]
 800ccb4:	f7ff ff26 	bl	800cb04 <prvUnlockQueue>
	}
 800ccb8:	bf00      	nop
 800ccba:	3718      	adds	r7, #24
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08e      	sub	sp, #56	; 0x38
 800ccc4:	af04      	add	r7, sp, #16
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ccce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10a      	bne.n	800ccea <xTaskCreateStatic+0x2a>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	623b      	str	r3, [r7, #32]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10a      	bne.n	800cd06 <xTaskCreateStatic+0x46>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	61fb      	str	r3, [r7, #28]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd06:	237c      	movs	r3, #124	; 0x7c
 800cd08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	2b7c      	cmp	r3, #124	; 0x7c
 800cd0e:	d00a      	beq.n	800cd26 <xTaskCreateStatic+0x66>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	61bb      	str	r3, [r7, #24]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d01e      	beq.n	800cd6c <xTaskCreateStatic+0xac>
 800cd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d01b      	beq.n	800cd6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	2202      	movs	r2, #2
 800cd42:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd46:	2300      	movs	r3, #0
 800cd48:	9303      	str	r3, [sp, #12]
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	9302      	str	r3, [sp, #8]
 800cd4e:	f107 0314 	add.w	r3, r7, #20
 800cd52:	9301      	str	r3, [sp, #4]
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	68b9      	ldr	r1, [r7, #8]
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f000 f850 	bl	800ce04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd66:	f000 f8cf 	bl	800cf08 <prvAddNewTaskToReadyList>
 800cd6a:	e001      	b.n	800cd70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd70:	697b      	ldr	r3, [r7, #20]
	}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3728      	adds	r7, #40	; 0x28
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b08c      	sub	sp, #48	; 0x30
 800cd7e:	af04      	add	r7, sp, #16
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	603b      	str	r3, [r7, #0]
 800cd86:	4613      	mov	r3, r2
 800cd88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd8a:	88fb      	ldrh	r3, [r7, #6]
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f001 fd7a 	bl	800e888 <pvPortMalloc>
 800cd94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00e      	beq.n	800cdba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd9c:	207c      	movs	r0, #124	; 0x7c
 800cd9e:	f001 fd73 	bl	800e888 <pvPortMalloc>
 800cda2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	697a      	ldr	r2, [r7, #20]
 800cdae:	631a      	str	r2, [r3, #48]	; 0x30
 800cdb0:	e005      	b.n	800cdbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cdb2:	6978      	ldr	r0, [r7, #20]
 800cdb4:	f001 fd7a 	bl	800e8ac <vPortFree>
 800cdb8:	e001      	b.n	800cdbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d017      	beq.n	800cdf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cdcc:	88fa      	ldrh	r2, [r7, #6]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	9303      	str	r3, [sp, #12]
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	9302      	str	r3, [sp, #8]
 800cdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd8:	9301      	str	r3, [sp, #4]
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	68b9      	ldr	r1, [r7, #8]
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f000 f80e 	bl	800ce04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cde8:	69f8      	ldr	r0, [r7, #28]
 800cdea:	f000 f88d 	bl	800cf08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	e002      	b.n	800cdfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cdfa:	69bb      	ldr	r3, [r7, #24]
	}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3720      	adds	r7, #32
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b088      	sub	sp, #32
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4413      	add	r3, r2
 800ce22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	f023 0307 	bic.w	r3, r3, #7
 800ce2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	f003 0307 	and.w	r3, r3, #7
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00a      	beq.n	800ce4c <prvInitialiseNewTask+0x48>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	617b      	str	r3, [r7, #20]
}
 800ce48:	bf00      	nop
 800ce4a:	e7fe      	b.n	800ce4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d01f      	beq.n	800ce92 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce52:	2300      	movs	r3, #0
 800ce54:	61fb      	str	r3, [r7, #28]
 800ce56:	e012      	b.n	800ce7e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	7819      	ldrb	r1, [r3, #0]
 800ce60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	4413      	add	r3, r2
 800ce66:	3334      	adds	r3, #52	; 0x34
 800ce68:	460a      	mov	r2, r1
 800ce6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	4413      	add	r3, r2
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d006      	beq.n	800ce86 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	61fb      	str	r3, [r7, #28]
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	2b3f      	cmp	r3, #63	; 0x3f
 800ce82:	d9e9      	bls.n	800ce58 <prvInitialiseNewTask+0x54>
 800ce84:	e000      	b.n	800ce88 <prvInitialiseNewTask+0x84>
			{
				break;
 800ce86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 800ce90:	e003      	b.n	800ce9a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	2b06      	cmp	r3, #6
 800ce9e:	d901      	bls.n	800cea4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cea0:	2306      	movs	r3, #6
 800cea2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cea8:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ceaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceac:	3304      	adds	r3, #4
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff f997 	bl	800c1e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	3318      	adds	r3, #24
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7ff f992 	bl	800c1e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec6:	f1c3 0207 	rsb	r2, r3, #7
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ced2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced6:	2200      	movs	r2, #0
 800ced8:	675a      	str	r2, [r3, #116]	; 0x74
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	68f9      	ldr	r1, [r7, #12]
 800cee6:	69b8      	ldr	r0, [r7, #24]
 800cee8:	f001 fa7c 	bl	800e3e4 <pxPortInitialiseStack>
 800ceec:	4602      	mov	r2, r0
 800ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <prvInitialiseNewTask+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cefc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cefe:	bf00      	nop
 800cf00:	3720      	adds	r7, #32
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf10:	f001 fb98 	bl	800e644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf14:	4b2a      	ldr	r3, [pc, #168]	; (800cfc0 <prvAddNewTaskToReadyList+0xb8>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	4a29      	ldr	r2, [pc, #164]	; (800cfc0 <prvAddNewTaskToReadyList+0xb8>)
 800cf1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf1e:	4b29      	ldr	r3, [pc, #164]	; (800cfc4 <prvAddNewTaskToReadyList+0xbc>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d109      	bne.n	800cf3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf26:	4a27      	ldr	r2, [pc, #156]	; (800cfc4 <prvAddNewTaskToReadyList+0xbc>)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf2c:	4b24      	ldr	r3, [pc, #144]	; (800cfc0 <prvAddNewTaskToReadyList+0xb8>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d110      	bne.n	800cf56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf34:	f000 fd2a 	bl	800d98c <prvInitialiseTaskLists>
 800cf38:	e00d      	b.n	800cf56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf3a:	4b23      	ldr	r3, [pc, #140]	; (800cfc8 <prvAddNewTaskToReadyList+0xc0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d109      	bne.n	800cf56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf42:	4b20      	ldr	r3, [pc, #128]	; (800cfc4 <prvAddNewTaskToReadyList+0xbc>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d802      	bhi.n	800cf56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf50:	4a1c      	ldr	r2, [pc, #112]	; (800cfc4 <prvAddNewTaskToReadyList+0xbc>)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf56:	4b1d      	ldr	r3, [pc, #116]	; (800cfcc <prvAddNewTaskToReadyList+0xc4>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	4a1b      	ldr	r2, [pc, #108]	; (800cfcc <prvAddNewTaskToReadyList+0xc4>)
 800cf5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	2201      	movs	r2, #1
 800cf66:	409a      	lsls	r2, r3
 800cf68:	4b19      	ldr	r3, [pc, #100]	; (800cfd0 <prvAddNewTaskToReadyList+0xc8>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	4a18      	ldr	r2, [pc, #96]	; (800cfd0 <prvAddNewTaskToReadyList+0xc8>)
 800cf70:	6013      	str	r3, [r2, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf76:	4613      	mov	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	4a15      	ldr	r2, [pc, #84]	; (800cfd4 <prvAddNewTaskToReadyList+0xcc>)
 800cf80:	441a      	add	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	3304      	adds	r3, #4
 800cf86:	4619      	mov	r1, r3
 800cf88:	4610      	mov	r0, r2
 800cf8a:	f7ff f937 	bl	800c1fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf8e:	f001 fb89 	bl	800e6a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf92:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <prvAddNewTaskToReadyList+0xc0>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00e      	beq.n	800cfb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf9a:	4b0a      	ldr	r3, [pc, #40]	; (800cfc4 <prvAddNewTaskToReadyList+0xbc>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d207      	bcs.n	800cfb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfa8:	4b0b      	ldr	r3, [pc, #44]	; (800cfd8 <prvAddNewTaskToReadyList+0xd0>)
 800cfaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfb8:	bf00      	nop
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20000d60 	.word	0x20000d60
 800cfc4:	20000c60 	.word	0x20000c60
 800cfc8:	20000d6c 	.word	0x20000d6c
 800cfcc:	20000d7c 	.word	0x20000d7c
 800cfd0:	20000d68 	.word	0x20000d68
 800cfd4:	20000c64 	.word	0x20000c64
 800cfd8:	e000ed04 	.word	0xe000ed04

0800cfdc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cfe4:	f001 fb2e 	bl	800e644 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d102      	bne.n	800cff4 <vTaskDelete+0x18>
 800cfee:	4b39      	ldr	r3, [pc, #228]	; (800d0d4 <vTaskDelete+0xf8>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	e000      	b.n	800cff6 <vTaskDelete+0x1a>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	3304      	adds	r3, #4
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7ff f95a 	bl	800c2b6 <uxListRemove>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d115      	bne.n	800d034 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00c:	4932      	ldr	r1, [pc, #200]	; (800d0d8 <vTaskDelete+0xfc>)
 800d00e:	4613      	mov	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4413      	add	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	440b      	add	r3, r1
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10a      	bne.n	800d034 <vTaskDelete+0x58>
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d022:	2201      	movs	r2, #1
 800d024:	fa02 f303 	lsl.w	r3, r2, r3
 800d028:	43da      	mvns	r2, r3
 800d02a:	4b2c      	ldr	r3, [pc, #176]	; (800d0dc <vTaskDelete+0x100>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4013      	ands	r3, r2
 800d030:	4a2a      	ldr	r2, [pc, #168]	; (800d0dc <vTaskDelete+0x100>)
 800d032:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d004      	beq.n	800d046 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	3318      	adds	r3, #24
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff f938 	bl	800c2b6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d046:	4b26      	ldr	r3, [pc, #152]	; (800d0e0 <vTaskDelete+0x104>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3301      	adds	r3, #1
 800d04c:	4a24      	ldr	r2, [pc, #144]	; (800d0e0 <vTaskDelete+0x104>)
 800d04e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d050:	4b20      	ldr	r3, [pc, #128]	; (800d0d4 <vTaskDelete+0xf8>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	429a      	cmp	r2, r3
 800d058:	d10b      	bne.n	800d072 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3304      	adds	r3, #4
 800d05e:	4619      	mov	r1, r3
 800d060:	4820      	ldr	r0, [pc, #128]	; (800d0e4 <vTaskDelete+0x108>)
 800d062:	f7ff f8cb 	bl	800c1fc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d066:	4b20      	ldr	r3, [pc, #128]	; (800d0e8 <vTaskDelete+0x10c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3301      	adds	r3, #1
 800d06c:	4a1e      	ldr	r2, [pc, #120]	; (800d0e8 <vTaskDelete+0x10c>)
 800d06e:	6013      	str	r3, [r2, #0]
 800d070:	e009      	b.n	800d086 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d072:	4b1e      	ldr	r3, [pc, #120]	; (800d0ec <vTaskDelete+0x110>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	3b01      	subs	r3, #1
 800d078:	4a1c      	ldr	r2, [pc, #112]	; (800d0ec <vTaskDelete+0x110>)
 800d07a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	f000 fcf3 	bl	800da68 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d082:	f000 fd21 	bl	800dac8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d086:	f001 fb0d 	bl	800e6a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d08a:	4b19      	ldr	r3, [pc, #100]	; (800d0f0 <vTaskDelete+0x114>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d01b      	beq.n	800d0ca <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800d092:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <vTaskDelete+0xf8>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d116      	bne.n	800d0ca <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d09c:	4b15      	ldr	r3, [pc, #84]	; (800d0f4 <vTaskDelete+0x118>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00a      	beq.n	800d0ba <vTaskDelete+0xde>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	60bb      	str	r3, [r7, #8]
}
 800d0b6:	bf00      	nop
 800d0b8:	e7fe      	b.n	800d0b8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800d0ba:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <vTaskDelete+0x11c>)
 800d0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c0:	601a      	str	r2, [r3, #0]
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0ca:	bf00      	nop
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20000c60 	.word	0x20000c60
 800d0d8:	20000c64 	.word	0x20000c64
 800d0dc:	20000d68 	.word	0x20000d68
 800d0e0:	20000d7c 	.word	0x20000d7c
 800d0e4:	20000d34 	.word	0x20000d34
 800d0e8:	20000d48 	.word	0x20000d48
 800d0ec:	20000d60 	.word	0x20000d60
 800d0f0:	20000d6c 	.word	0x20000d6c
 800d0f4:	20000d88 	.word	0x20000d88
 800d0f8:	e000ed04 	.word	0xe000ed04

0800d0fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d104:	2300      	movs	r3, #0
 800d106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d017      	beq.n	800d13e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d10e:	4b13      	ldr	r3, [pc, #76]	; (800d15c <vTaskDelay+0x60>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00a      	beq.n	800d12c <vTaskDelay+0x30>
	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	60bb      	str	r3, [r7, #8]
}
 800d128:	bf00      	nop
 800d12a:	e7fe      	b.n	800d12a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d12c:	f000 f912 	bl	800d354 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d130:	2100      	movs	r1, #0
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fd06 	bl	800db44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d138:	f000 f91a 	bl	800d370 <xTaskResumeAll>
 800d13c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d107      	bne.n	800d154 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d144:	4b06      	ldr	r3, [pc, #24]	; (800d160 <vTaskDelay+0x64>)
 800d146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d154:	bf00      	nop
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	20000d88 	.word	0x20000d88
 800d160:	e000ed04 	.word	0xe000ed04

0800d164 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d16c:	f001 fa6a 	bl	800e644 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d102      	bne.n	800d17c <vTaskSuspend+0x18>
 800d176:	4b3c      	ldr	r3, [pc, #240]	; (800d268 <vTaskSuspend+0x104>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	e000      	b.n	800d17e <vTaskSuspend+0x1a>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	3304      	adds	r3, #4
 800d184:	4618      	mov	r0, r3
 800d186:	f7ff f896 	bl	800c2b6 <uxListRemove>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d115      	bne.n	800d1bc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d194:	4935      	ldr	r1, [pc, #212]	; (800d26c <vTaskSuspend+0x108>)
 800d196:	4613      	mov	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	440b      	add	r3, r1
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10a      	bne.n	800d1bc <vTaskSuspend+0x58>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b0:	43da      	mvns	r2, r3
 800d1b2:	4b2f      	ldr	r3, [pc, #188]	; (800d270 <vTaskSuspend+0x10c>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4013      	ands	r3, r2
 800d1b8:	4a2d      	ldr	r2, [pc, #180]	; (800d270 <vTaskSuspend+0x10c>)
 800d1ba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d004      	beq.n	800d1ce <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	3318      	adds	r3, #24
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7ff f874 	bl	800c2b6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3304      	adds	r3, #4
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	4827      	ldr	r0, [pc, #156]	; (800d274 <vTaskSuspend+0x110>)
 800d1d6:	f7ff f811 	bl	800c1fc <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d103      	bne.n	800d1ee <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d1ee:	f001 fa59 	bl	800e6a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d1f2:	4b21      	ldr	r3, [pc, #132]	; (800d278 <vTaskSuspend+0x114>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d1fa:	f001 fa23 	bl	800e644 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d1fe:	f000 fc63 	bl	800dac8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d202:	f001 fa4f 	bl	800e6a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d206:	4b18      	ldr	r3, [pc, #96]	; (800d268 <vTaskSuspend+0x104>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d127      	bne.n	800d260 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800d210:	4b19      	ldr	r3, [pc, #100]	; (800d278 <vTaskSuspend+0x114>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d017      	beq.n	800d248 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d218:	4b18      	ldr	r3, [pc, #96]	; (800d27c <vTaskSuspend+0x118>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00a      	beq.n	800d236 <vTaskSuspend+0xd2>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	60bb      	str	r3, [r7, #8]
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800d236:	4b12      	ldr	r3, [pc, #72]	; (800d280 <vTaskSuspend+0x11c>)
 800d238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d246:	e00b      	b.n	800d260 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d248:	4b0a      	ldr	r3, [pc, #40]	; (800d274 <vTaskSuspend+0x110>)
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <vTaskSuspend+0x120>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	429a      	cmp	r2, r3
 800d252:	d103      	bne.n	800d25c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800d254:	4b04      	ldr	r3, [pc, #16]	; (800d268 <vTaskSuspend+0x104>)
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
	}
 800d25a:	e001      	b.n	800d260 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800d25c:	f000 f9ec 	bl	800d638 <vTaskSwitchContext>
	}
 800d260:	bf00      	nop
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	20000c60 	.word	0x20000c60
 800d26c:	20000c64 	.word	0x20000c64
 800d270:	20000d68 	.word	0x20000d68
 800d274:	20000d4c 	.word	0x20000d4c
 800d278:	20000d6c 	.word	0x20000d6c
 800d27c:	20000d88 	.word	0x20000d88
 800d280:	e000ed04 	.word	0xe000ed04
 800d284:	20000d60 	.word	0x20000d60

0800d288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08a      	sub	sp, #40	; 0x28
 800d28c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d28e:	2300      	movs	r3, #0
 800d290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d292:	2300      	movs	r3, #0
 800d294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d296:	463a      	mov	r2, r7
 800d298:	1d39      	adds	r1, r7, #4
 800d29a:	f107 0308 	add.w	r3, r7, #8
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f4 faf6 	bl	8001890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	9202      	str	r2, [sp, #8]
 800d2ac:	9301      	str	r3, [sp, #4]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	460a      	mov	r2, r1
 800d2b6:	4921      	ldr	r1, [pc, #132]	; (800d33c <vTaskStartScheduler+0xb4>)
 800d2b8:	4821      	ldr	r0, [pc, #132]	; (800d340 <vTaskStartScheduler+0xb8>)
 800d2ba:	f7ff fd01 	bl	800ccc0 <xTaskCreateStatic>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	4a20      	ldr	r2, [pc, #128]	; (800d344 <vTaskStartScheduler+0xbc>)
 800d2c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2c4:	4b1f      	ldr	r3, [pc, #124]	; (800d344 <vTaskStartScheduler+0xbc>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	617b      	str	r3, [r7, #20]
 800d2d0:	e001      	b.n	800d2d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d102      	bne.n	800d2e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2dc:	f000 fc98 	bl	800dc10 <xTimerCreateTimerTask>
 800d2e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d116      	bne.n	800d316 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	613b      	str	r3, [r7, #16]
}
 800d2fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2fc:	4b12      	ldr	r3, [pc, #72]	; (800d348 <vTaskStartScheduler+0xc0>)
 800d2fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d302:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d304:	4b11      	ldr	r3, [pc, #68]	; (800d34c <vTaskStartScheduler+0xc4>)
 800d306:	2201      	movs	r2, #1
 800d308:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d30a:	4b11      	ldr	r3, [pc, #68]	; (800d350 <vTaskStartScheduler+0xc8>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d310:	f001 f8f6 	bl	800e500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d314:	e00e      	b.n	800d334 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d31c:	d10a      	bne.n	800d334 <vTaskStartScheduler+0xac>
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	60fb      	str	r3, [r7, #12]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <vTaskStartScheduler+0xaa>
}
 800d334:	bf00      	nop
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	0801270c 	.word	0x0801270c
 800d340:	0800d95d 	.word	0x0800d95d
 800d344:	20000d84 	.word	0x20000d84
 800d348:	20000d80 	.word	0x20000d80
 800d34c:	20000d6c 	.word	0x20000d6c
 800d350:	20000d64 	.word	0x20000d64

0800d354 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d354:	b480      	push	{r7}
 800d356:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d358:	4b04      	ldr	r3, [pc, #16]	; (800d36c <vTaskSuspendAll+0x18>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3301      	adds	r3, #1
 800d35e:	4a03      	ldr	r2, [pc, #12]	; (800d36c <vTaskSuspendAll+0x18>)
 800d360:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d362:	bf00      	nop
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	20000d88 	.word	0x20000d88

0800d370 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d376:	2300      	movs	r3, #0
 800d378:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d37a:	2300      	movs	r3, #0
 800d37c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d37e:	4b41      	ldr	r3, [pc, #260]	; (800d484 <xTaskResumeAll+0x114>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10a      	bne.n	800d39c <xTaskResumeAll+0x2c>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	603b      	str	r3, [r7, #0]
}
 800d398:	bf00      	nop
 800d39a:	e7fe      	b.n	800d39a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d39c:	f001 f952 	bl	800e644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d3a0:	4b38      	ldr	r3, [pc, #224]	; (800d484 <xTaskResumeAll+0x114>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	4a37      	ldr	r2, [pc, #220]	; (800d484 <xTaskResumeAll+0x114>)
 800d3a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3aa:	4b36      	ldr	r3, [pc, #216]	; (800d484 <xTaskResumeAll+0x114>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d161      	bne.n	800d476 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3b2:	4b35      	ldr	r3, [pc, #212]	; (800d488 <xTaskResumeAll+0x118>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d05d      	beq.n	800d476 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3ba:	e02e      	b.n	800d41a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3bc:	4b33      	ldr	r3, [pc, #204]	; (800d48c <xTaskResumeAll+0x11c>)
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3318      	adds	r3, #24
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe ff74 	bl	800c2b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fe ff6f 	bl	800c2b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	2201      	movs	r2, #1
 800d3de:	409a      	lsls	r2, r3
 800d3e0:	4b2b      	ldr	r3, [pc, #172]	; (800d490 <xTaskResumeAll+0x120>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	4a2a      	ldr	r2, [pc, #168]	; (800d490 <xTaskResumeAll+0x120>)
 800d3e8:	6013      	str	r3, [r2, #0]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4a27      	ldr	r2, [pc, #156]	; (800d494 <xTaskResumeAll+0x124>)
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f7fe fefb 	bl	800c1fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d40a:	4b23      	ldr	r3, [pc, #140]	; (800d498 <xTaskResumeAll+0x128>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d410:	429a      	cmp	r2, r3
 800d412:	d302      	bcc.n	800d41a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d414:	4b21      	ldr	r3, [pc, #132]	; (800d49c <xTaskResumeAll+0x12c>)
 800d416:	2201      	movs	r2, #1
 800d418:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d41a:	4b1c      	ldr	r3, [pc, #112]	; (800d48c <xTaskResumeAll+0x11c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1cc      	bne.n	800d3bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d428:	f000 fb4e 	bl	800dac8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d42c:	4b1c      	ldr	r3, [pc, #112]	; (800d4a0 <xTaskResumeAll+0x130>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d010      	beq.n	800d45a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d438:	f000 f846 	bl	800d4c8 <xTaskIncrementTick>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d002      	beq.n	800d448 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d442:	4b16      	ldr	r3, [pc, #88]	; (800d49c <xTaskResumeAll+0x12c>)
 800d444:	2201      	movs	r2, #1
 800d446:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1f1      	bne.n	800d438 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d454:	4b12      	ldr	r3, [pc, #72]	; (800d4a0 <xTaskResumeAll+0x130>)
 800d456:	2200      	movs	r2, #0
 800d458:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d45a:	4b10      	ldr	r3, [pc, #64]	; (800d49c <xTaskResumeAll+0x12c>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d009      	beq.n	800d476 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d462:	2301      	movs	r3, #1
 800d464:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d466:	4b0f      	ldr	r3, [pc, #60]	; (800d4a4 <xTaskResumeAll+0x134>)
 800d468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d476:	f001 f915 	bl	800e6a4 <vPortExitCritical>

	return xAlreadyYielded;
 800d47a:	68bb      	ldr	r3, [r7, #8]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	20000d88 	.word	0x20000d88
 800d488:	20000d60 	.word	0x20000d60
 800d48c:	20000d20 	.word	0x20000d20
 800d490:	20000d68 	.word	0x20000d68
 800d494:	20000c64 	.word	0x20000c64
 800d498:	20000c60 	.word	0x20000c60
 800d49c:	20000d74 	.word	0x20000d74
 800d4a0:	20000d70 	.word	0x20000d70
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4ae:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <xTaskGetTickCount+0x1c>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4b4:	687b      	ldr	r3, [r7, #4]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	20000d64 	.word	0x20000d64

0800d4c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4d2:	4b4e      	ldr	r3, [pc, #312]	; (800d60c <xTaskIncrementTick+0x144>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f040 808e 	bne.w	800d5f8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4dc:	4b4c      	ldr	r3, [pc, #304]	; (800d610 <xTaskIncrementTick+0x148>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4e4:	4a4a      	ldr	r2, [pc, #296]	; (800d610 <xTaskIncrementTick+0x148>)
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d120      	bne.n	800d532 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4f0:	4b48      	ldr	r3, [pc, #288]	; (800d614 <xTaskIncrementTick+0x14c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00a      	beq.n	800d510 <xTaskIncrementTick+0x48>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	603b      	str	r3, [r7, #0]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <xTaskIncrementTick+0x46>
 800d510:	4b40      	ldr	r3, [pc, #256]	; (800d614 <xTaskIncrementTick+0x14c>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	60fb      	str	r3, [r7, #12]
 800d516:	4b40      	ldr	r3, [pc, #256]	; (800d618 <xTaskIncrementTick+0x150>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a3e      	ldr	r2, [pc, #248]	; (800d614 <xTaskIncrementTick+0x14c>)
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	4a3e      	ldr	r2, [pc, #248]	; (800d618 <xTaskIncrementTick+0x150>)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	4b3d      	ldr	r3, [pc, #244]	; (800d61c <xTaskIncrementTick+0x154>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3301      	adds	r3, #1
 800d52a:	4a3c      	ldr	r2, [pc, #240]	; (800d61c <xTaskIncrementTick+0x154>)
 800d52c:	6013      	str	r3, [r2, #0]
 800d52e:	f000 facb 	bl	800dac8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d532:	4b3b      	ldr	r3, [pc, #236]	; (800d620 <xTaskIncrementTick+0x158>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d348      	bcc.n	800d5ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d53c:	4b35      	ldr	r3, [pc, #212]	; (800d614 <xTaskIncrementTick+0x14c>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d104      	bne.n	800d550 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d546:	4b36      	ldr	r3, [pc, #216]	; (800d620 <xTaskIncrementTick+0x158>)
 800d548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d54c:	601a      	str	r2, [r3, #0]
					break;
 800d54e:	e03e      	b.n	800d5ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d550:	4b30      	ldr	r3, [pc, #192]	; (800d614 <xTaskIncrementTick+0x14c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	429a      	cmp	r2, r3
 800d566:	d203      	bcs.n	800d570 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d568:	4a2d      	ldr	r2, [pc, #180]	; (800d620 <xTaskIncrementTick+0x158>)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d56e:	e02e      	b.n	800d5ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	3304      	adds	r3, #4
 800d574:	4618      	mov	r0, r3
 800d576:	f7fe fe9e 	bl	800c2b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d004      	beq.n	800d58c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	3318      	adds	r3, #24
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe fe95 	bl	800c2b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d590:	2201      	movs	r2, #1
 800d592:	409a      	lsls	r2, r3
 800d594:	4b23      	ldr	r3, [pc, #140]	; (800d624 <xTaskIncrementTick+0x15c>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4313      	orrs	r3, r2
 800d59a:	4a22      	ldr	r2, [pc, #136]	; (800d624 <xTaskIncrementTick+0x15c>)
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	4413      	add	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	4a1f      	ldr	r2, [pc, #124]	; (800d628 <xTaskIncrementTick+0x160>)
 800d5ac:	441a      	add	r2, r3
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	f7fe fe21 	bl	800c1fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5be:	4b1b      	ldr	r3, [pc, #108]	; (800d62c <xTaskIncrementTick+0x164>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d3b9      	bcc.n	800d53c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5cc:	e7b6      	b.n	800d53c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5ce:	4b17      	ldr	r3, [pc, #92]	; (800d62c <xTaskIncrementTick+0x164>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d4:	4914      	ldr	r1, [pc, #80]	; (800d628 <xTaskIncrementTick+0x160>)
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4413      	add	r3, r2
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	440b      	add	r3, r1
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d901      	bls.n	800d5ea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5ea:	4b11      	ldr	r3, [pc, #68]	; (800d630 <xTaskIncrementTick+0x168>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d007      	beq.n	800d602 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	617b      	str	r3, [r7, #20]
 800d5f6:	e004      	b.n	800d602 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5f8:	4b0e      	ldr	r3, [pc, #56]	; (800d634 <xTaskIncrementTick+0x16c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	4a0d      	ldr	r2, [pc, #52]	; (800d634 <xTaskIncrementTick+0x16c>)
 800d600:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d602:	697b      	ldr	r3, [r7, #20]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20000d88 	.word	0x20000d88
 800d610:	20000d64 	.word	0x20000d64
 800d614:	20000d18 	.word	0x20000d18
 800d618:	20000d1c 	.word	0x20000d1c
 800d61c:	20000d78 	.word	0x20000d78
 800d620:	20000d80 	.word	0x20000d80
 800d624:	20000d68 	.word	0x20000d68
 800d628:	20000c64 	.word	0x20000c64
 800d62c:	20000c60 	.word	0x20000c60
 800d630:	20000d74 	.word	0x20000d74
 800d634:	20000d70 	.word	0x20000d70

0800d638 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d638:	b480      	push	{r7}
 800d63a:	b087      	sub	sp, #28
 800d63c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d63e:	4b27      	ldr	r3, [pc, #156]	; (800d6dc <vTaskSwitchContext+0xa4>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d003      	beq.n	800d64e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d646:	4b26      	ldr	r3, [pc, #152]	; (800d6e0 <vTaskSwitchContext+0xa8>)
 800d648:	2201      	movs	r2, #1
 800d64a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d64c:	e03f      	b.n	800d6ce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d64e:	4b24      	ldr	r3, [pc, #144]	; (800d6e0 <vTaskSwitchContext+0xa8>)
 800d650:	2200      	movs	r2, #0
 800d652:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d654:	4b23      	ldr	r3, [pc, #140]	; (800d6e4 <vTaskSwitchContext+0xac>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	fab3 f383 	clz	r3, r3
 800d660:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d662:	7afb      	ldrb	r3, [r7, #11]
 800d664:	f1c3 031f 	rsb	r3, r3, #31
 800d668:	617b      	str	r3, [r7, #20]
 800d66a:	491f      	ldr	r1, [pc, #124]	; (800d6e8 <vTaskSwitchContext+0xb0>)
 800d66c:	697a      	ldr	r2, [r7, #20]
 800d66e:	4613      	mov	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	440b      	add	r3, r1
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10a      	bne.n	800d694 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	607b      	str	r3, [r7, #4]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <vTaskSwitchContext+0x5a>
 800d694:	697a      	ldr	r2, [r7, #20]
 800d696:	4613      	mov	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4a12      	ldr	r2, [pc, #72]	; (800d6e8 <vTaskSwitchContext+0xb0>)
 800d6a0:	4413      	add	r3, r2
 800d6a2:	613b      	str	r3, [r7, #16]
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	605a      	str	r2, [r3, #4]
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	685a      	ldr	r2, [r3, #4]
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d104      	bne.n	800d6c4 <vTaskSwitchContext+0x8c>
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	605a      	str	r2, [r3, #4]
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	4a08      	ldr	r2, [pc, #32]	; (800d6ec <vTaskSwitchContext+0xb4>)
 800d6cc:	6013      	str	r3, [r2, #0]
}
 800d6ce:	bf00      	nop
 800d6d0:	371c      	adds	r7, #28
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	20000d88 	.word	0x20000d88
 800d6e0:	20000d74 	.word	0x20000d74
 800d6e4:	20000d68 	.word	0x20000d68
 800d6e8:	20000c64 	.word	0x20000c64
 800d6ec:	20000c60 	.word	0x20000c60

0800d6f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10a      	bne.n	800d716 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	60fb      	str	r3, [r7, #12]
}
 800d712:	bf00      	nop
 800d714:	e7fe      	b.n	800d714 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d716:	4b07      	ldr	r3, [pc, #28]	; (800d734 <vTaskPlaceOnEventList+0x44>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3318      	adds	r3, #24
 800d71c:	4619      	mov	r1, r3
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7fe fd90 	bl	800c244 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d724:	2101      	movs	r1, #1
 800d726:	6838      	ldr	r0, [r7, #0]
 800d728:	f000 fa0c 	bl	800db44 <prvAddCurrentTaskToDelayedList>
}
 800d72c:	bf00      	nop
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	20000c60 	.word	0x20000c60

0800d738 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b086      	sub	sp, #24
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10a      	bne.n	800d760 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	617b      	str	r3, [r7, #20]
}
 800d75c:	bf00      	nop
 800d75e:	e7fe      	b.n	800d75e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d760:	4b0a      	ldr	r3, [pc, #40]	; (800d78c <vTaskPlaceOnEventListRestricted+0x54>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3318      	adds	r3, #24
 800d766:	4619      	mov	r1, r3
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f7fe fd47 	bl	800c1fc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d002      	beq.n	800d77a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d778:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d77a:	6879      	ldr	r1, [r7, #4]
 800d77c:	68b8      	ldr	r0, [r7, #8]
 800d77e:	f000 f9e1 	bl	800db44 <prvAddCurrentTaskToDelayedList>
	}
 800d782:	bf00      	nop
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20000c60 	.word	0x20000c60

0800d790 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d10a      	bne.n	800d7bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	60fb      	str	r3, [r7, #12]
}
 800d7b8:	bf00      	nop
 800d7ba:	e7fe      	b.n	800d7ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	3318      	adds	r3, #24
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fe fd78 	bl	800c2b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7c6:	4b1d      	ldr	r3, [pc, #116]	; (800d83c <xTaskRemoveFromEventList+0xac>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d11c      	bne.n	800d808 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fe fd6f 	bl	800c2b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7dc:	2201      	movs	r2, #1
 800d7de:	409a      	lsls	r2, r3
 800d7e0:	4b17      	ldr	r3, [pc, #92]	; (800d840 <xTaskRemoveFromEventList+0xb0>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	4a16      	ldr	r2, [pc, #88]	; (800d840 <xTaskRemoveFromEventList+0xb0>)
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4a13      	ldr	r2, [pc, #76]	; (800d844 <xTaskRemoveFromEventList+0xb4>)
 800d7f8:	441a      	add	r2, r3
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	4619      	mov	r1, r3
 800d800:	4610      	mov	r0, r2
 800d802:	f7fe fcfb 	bl	800c1fc <vListInsertEnd>
 800d806:	e005      	b.n	800d814 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	3318      	adds	r3, #24
 800d80c:	4619      	mov	r1, r3
 800d80e:	480e      	ldr	r0, [pc, #56]	; (800d848 <xTaskRemoveFromEventList+0xb8>)
 800d810:	f7fe fcf4 	bl	800c1fc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d818:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <xTaskRemoveFromEventList+0xbc>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81e:	429a      	cmp	r2, r3
 800d820:	d905      	bls.n	800d82e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d822:	2301      	movs	r3, #1
 800d824:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d826:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <xTaskRemoveFromEventList+0xc0>)
 800d828:	2201      	movs	r2, #1
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	e001      	b.n	800d832 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d82e:	2300      	movs	r3, #0
 800d830:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d832:	697b      	ldr	r3, [r7, #20]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3718      	adds	r7, #24
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	20000d88 	.word	0x20000d88
 800d840:	20000d68 	.word	0x20000d68
 800d844:	20000c64 	.word	0x20000c64
 800d848:	20000d20 	.word	0x20000d20
 800d84c:	20000c60 	.word	0x20000c60
 800d850:	20000d74 	.word	0x20000d74

0800d854 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d85c:	4b06      	ldr	r3, [pc, #24]	; (800d878 <vTaskInternalSetTimeOutState+0x24>)
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d864:	4b05      	ldr	r3, [pc, #20]	; (800d87c <vTaskInternalSetTimeOutState+0x28>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	605a      	str	r2, [r3, #4]
}
 800d86c:	bf00      	nop
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	20000d78 	.word	0x20000d78
 800d87c:	20000d64 	.word	0x20000d64

0800d880 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	613b      	str	r3, [r7, #16]
}
 800d8a2:	bf00      	nop
 800d8a4:	e7fe      	b.n	800d8a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	60fb      	str	r3, [r7, #12]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8c2:	f000 febf 	bl	800e644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8c6:	4b1d      	ldr	r3, [pc, #116]	; (800d93c <xTaskCheckForTimeOut+0xbc>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	69ba      	ldr	r2, [r7, #24]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8de:	d102      	bne.n	800d8e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	61fb      	str	r3, [r7, #28]
 800d8e4:	e023      	b.n	800d92e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	4b15      	ldr	r3, [pc, #84]	; (800d940 <xTaskCheckForTimeOut+0xc0>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d007      	beq.n	800d902 <xTaskCheckForTimeOut+0x82>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	69ba      	ldr	r2, [r7, #24]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d302      	bcc.n	800d902 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	61fb      	str	r3, [r7, #28]
 800d900:	e015      	b.n	800d92e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d20b      	bcs.n	800d924 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	1ad2      	subs	r2, r2, r3
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ff9b 	bl	800d854 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d91e:	2300      	movs	r3, #0
 800d920:	61fb      	str	r3, [r7, #28]
 800d922:	e004      	b.n	800d92e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	2200      	movs	r2, #0
 800d928:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d92a:	2301      	movs	r3, #1
 800d92c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d92e:	f000 feb9 	bl	800e6a4 <vPortExitCritical>

	return xReturn;
 800d932:	69fb      	ldr	r3, [r7, #28]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3720      	adds	r7, #32
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	20000d64 	.word	0x20000d64
 800d940:	20000d78 	.word	0x20000d78

0800d944 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d944:	b480      	push	{r7}
 800d946:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d948:	4b03      	ldr	r3, [pc, #12]	; (800d958 <vTaskMissedYield+0x14>)
 800d94a:	2201      	movs	r2, #1
 800d94c:	601a      	str	r2, [r3, #0]
}
 800d94e:	bf00      	nop
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	20000d74 	.word	0x20000d74

0800d95c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d964:	f000 f852 	bl	800da0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d968:	4b06      	ldr	r3, [pc, #24]	; (800d984 <prvIdleTask+0x28>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d9f9      	bls.n	800d964 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d970:	4b05      	ldr	r3, [pc, #20]	; (800d988 <prvIdleTask+0x2c>)
 800d972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d980:	e7f0      	b.n	800d964 <prvIdleTask+0x8>
 800d982:	bf00      	nop
 800d984:	20000c64 	.word	0x20000c64
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d992:	2300      	movs	r3, #0
 800d994:	607b      	str	r3, [r7, #4]
 800d996:	e00c      	b.n	800d9b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	4613      	mov	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4a12      	ldr	r2, [pc, #72]	; (800d9ec <prvInitialiseTaskLists+0x60>)
 800d9a4:	4413      	add	r3, r2
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fbfb 	bl	800c1a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	607b      	str	r3, [r7, #4]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b06      	cmp	r3, #6
 800d9b6:	d9ef      	bls.n	800d998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9b8:	480d      	ldr	r0, [pc, #52]	; (800d9f0 <prvInitialiseTaskLists+0x64>)
 800d9ba:	f7fe fbf2 	bl	800c1a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9be:	480d      	ldr	r0, [pc, #52]	; (800d9f4 <prvInitialiseTaskLists+0x68>)
 800d9c0:	f7fe fbef 	bl	800c1a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9c4:	480c      	ldr	r0, [pc, #48]	; (800d9f8 <prvInitialiseTaskLists+0x6c>)
 800d9c6:	f7fe fbec 	bl	800c1a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9ca:	480c      	ldr	r0, [pc, #48]	; (800d9fc <prvInitialiseTaskLists+0x70>)
 800d9cc:	f7fe fbe9 	bl	800c1a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9d0:	480b      	ldr	r0, [pc, #44]	; (800da00 <prvInitialiseTaskLists+0x74>)
 800d9d2:	f7fe fbe6 	bl	800c1a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <prvInitialiseTaskLists+0x78>)
 800d9d8:	4a05      	ldr	r2, [pc, #20]	; (800d9f0 <prvInitialiseTaskLists+0x64>)
 800d9da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	; (800da08 <prvInitialiseTaskLists+0x7c>)
 800d9de:	4a05      	ldr	r2, [pc, #20]	; (800d9f4 <prvInitialiseTaskLists+0x68>)
 800d9e0:	601a      	str	r2, [r3, #0]
}
 800d9e2:	bf00      	nop
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000c64 	.word	0x20000c64
 800d9f0:	20000cf0 	.word	0x20000cf0
 800d9f4:	20000d04 	.word	0x20000d04
 800d9f8:	20000d20 	.word	0x20000d20
 800d9fc:	20000d34 	.word	0x20000d34
 800da00:	20000d4c 	.word	0x20000d4c
 800da04:	20000d18 	.word	0x20000d18
 800da08:	20000d1c 	.word	0x20000d1c

0800da0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da12:	e019      	b.n	800da48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da14:	f000 fe16 	bl	800e644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da18:	4b10      	ldr	r3, [pc, #64]	; (800da5c <prvCheckTasksWaitingTermination+0x50>)
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3304      	adds	r3, #4
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe fc46 	bl	800c2b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da2a:	4b0d      	ldr	r3, [pc, #52]	; (800da60 <prvCheckTasksWaitingTermination+0x54>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3b01      	subs	r3, #1
 800da30:	4a0b      	ldr	r2, [pc, #44]	; (800da60 <prvCheckTasksWaitingTermination+0x54>)
 800da32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da34:	4b0b      	ldr	r3, [pc, #44]	; (800da64 <prvCheckTasksWaitingTermination+0x58>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3b01      	subs	r3, #1
 800da3a:	4a0a      	ldr	r2, [pc, #40]	; (800da64 <prvCheckTasksWaitingTermination+0x58>)
 800da3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da3e:	f000 fe31 	bl	800e6a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f810 	bl	800da68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da48:	4b06      	ldr	r3, [pc, #24]	; (800da64 <prvCheckTasksWaitingTermination+0x58>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e1      	bne.n	800da14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20000d34 	.word	0x20000d34
 800da60:	20000d60 	.word	0x20000d60
 800da64:	20000d48 	.word	0x20000d48

0800da68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800da76:	2b00      	cmp	r3, #0
 800da78:	d108      	bne.n	800da8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 ff14 	bl	800e8ac <vPortFree>
				vPortFree( pxTCB );
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 ff11 	bl	800e8ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da8a:	e018      	b.n	800dabe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800da92:	2b01      	cmp	r3, #1
 800da94:	d103      	bne.n	800da9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 ff08 	bl	800e8ac <vPortFree>
	}
 800da9c:	e00f      	b.n	800dabe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d00a      	beq.n	800dabe <prvDeleteTCB+0x56>
	__asm volatile
 800daa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daac:	f383 8811 	msr	BASEPRI, r3
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	60fb      	str	r3, [r7, #12]
}
 800daba:	bf00      	nop
 800dabc:	e7fe      	b.n	800dabc <prvDeleteTCB+0x54>
	}
 800dabe:	bf00      	nop
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
	...

0800dac8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dace:	4b0c      	ldr	r3, [pc, #48]	; (800db00 <prvResetNextTaskUnblockTime+0x38>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d104      	bne.n	800dae2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dad8:	4b0a      	ldr	r3, [pc, #40]	; (800db04 <prvResetNextTaskUnblockTime+0x3c>)
 800dada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dade:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dae0:	e008      	b.n	800daf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae2:	4b07      	ldr	r3, [pc, #28]	; (800db00 <prvResetNextTaskUnblockTime+0x38>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	4a04      	ldr	r2, [pc, #16]	; (800db04 <prvResetNextTaskUnblockTime+0x3c>)
 800daf2:	6013      	str	r3, [r2, #0]
}
 800daf4:	bf00      	nop
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr
 800db00:	20000d18 	.word	0x20000d18
 800db04:	20000d80 	.word	0x20000d80

0800db08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db0e:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <xTaskGetSchedulerState+0x34>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d102      	bne.n	800db1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db16:	2301      	movs	r3, #1
 800db18:	607b      	str	r3, [r7, #4]
 800db1a:	e008      	b.n	800db2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db1c:	4b08      	ldr	r3, [pc, #32]	; (800db40 <xTaskGetSchedulerState+0x38>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d102      	bne.n	800db2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db24:	2302      	movs	r3, #2
 800db26:	607b      	str	r3, [r7, #4]
 800db28:	e001      	b.n	800db2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db2a:	2300      	movs	r3, #0
 800db2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db2e:	687b      	ldr	r3, [r7, #4]
	}
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	20000d6c 	.word	0x20000d6c
 800db40:	20000d88 	.word	0x20000d88

0800db44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db4e:	4b29      	ldr	r3, [pc, #164]	; (800dbf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db54:	4b28      	ldr	r3, [pc, #160]	; (800dbf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3304      	adds	r3, #4
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fe fbab 	bl	800c2b6 <uxListRemove>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10b      	bne.n	800db7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db66:	4b24      	ldr	r3, [pc, #144]	; (800dbf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6c:	2201      	movs	r2, #1
 800db6e:	fa02 f303 	lsl.w	r3, r2, r3
 800db72:	43da      	mvns	r2, r3
 800db74:	4b21      	ldr	r3, [pc, #132]	; (800dbfc <prvAddCurrentTaskToDelayedList+0xb8>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4013      	ands	r3, r2
 800db7a:	4a20      	ldr	r2, [pc, #128]	; (800dbfc <prvAddCurrentTaskToDelayedList+0xb8>)
 800db7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db84:	d10a      	bne.n	800db9c <prvAddCurrentTaskToDelayedList+0x58>
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d007      	beq.n	800db9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db8c:	4b1a      	ldr	r3, [pc, #104]	; (800dbf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3304      	adds	r3, #4
 800db92:	4619      	mov	r1, r3
 800db94:	481a      	ldr	r0, [pc, #104]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xbc>)
 800db96:	f7fe fb31 	bl	800c1fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db9a:	e026      	b.n	800dbea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db9c:	68fa      	ldr	r2, [r7, #12]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4413      	add	r3, r2
 800dba2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dba4:	4b14      	ldr	r3, [pc, #80]	; (800dbf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d209      	bcs.n	800dbc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbb4:	4b13      	ldr	r3, [pc, #76]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	4b0f      	ldr	r3, [pc, #60]	; (800dbf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	f7fe fb3f 	bl	800c244 <vListInsert>
}
 800dbc6:	e010      	b.n	800dbea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbc8:	4b0f      	ldr	r3, [pc, #60]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	4b0a      	ldr	r3, [pc, #40]	; (800dbf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	f7fe fb35 	bl	800c244 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbda:	4b0c      	ldr	r3, [pc, #48]	; (800dc0c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68ba      	ldr	r2, [r7, #8]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d202      	bcs.n	800dbea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dbe4:	4a09      	ldr	r2, [pc, #36]	; (800dc0c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	6013      	str	r3, [r2, #0]
}
 800dbea:	bf00      	nop
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20000d64 	.word	0x20000d64
 800dbf8:	20000c60 	.word	0x20000c60
 800dbfc:	20000d68 	.word	0x20000d68
 800dc00:	20000d4c 	.word	0x20000d4c
 800dc04:	20000d1c 	.word	0x20000d1c
 800dc08:	20000d18 	.word	0x20000d18
 800dc0c:	20000d80 	.word	0x20000d80

0800dc10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	; 0x28
 800dc14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc1a:	f000 fb63 	bl	800e2e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc1e:	4b1c      	ldr	r3, [pc, #112]	; (800dc90 <xTimerCreateTimerTask+0x80>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d021      	beq.n	800dc6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc26:	2300      	movs	r3, #0
 800dc28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc2e:	1d3a      	adds	r2, r7, #4
 800dc30:	f107 0108 	add.w	r1, r7, #8
 800dc34:	f107 030c 	add.w	r3, r7, #12
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7f3 fe43 	bl	80018c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	9202      	str	r2, [sp, #8]
 800dc46:	9301      	str	r3, [sp, #4]
 800dc48:	2302      	movs	r3, #2
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	460a      	mov	r2, r1
 800dc50:	4910      	ldr	r1, [pc, #64]	; (800dc94 <xTimerCreateTimerTask+0x84>)
 800dc52:	4811      	ldr	r0, [pc, #68]	; (800dc98 <xTimerCreateTimerTask+0x88>)
 800dc54:	f7ff f834 	bl	800ccc0 <xTaskCreateStatic>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	4a10      	ldr	r2, [pc, #64]	; (800dc9c <xTimerCreateTimerTask+0x8c>)
 800dc5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dc5e:	4b0f      	ldr	r3, [pc, #60]	; (800dc9c <xTimerCreateTimerTask+0x8c>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dc66:	2301      	movs	r3, #1
 800dc68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10a      	bne.n	800dc86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	613b      	str	r3, [r7, #16]
}
 800dc82:	bf00      	nop
 800dc84:	e7fe      	b.n	800dc84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dc86:	697b      	ldr	r3, [r7, #20]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	20000dbc 	.word	0x20000dbc
 800dc94:	08012714 	.word	0x08012714
 800dc98:	0800dec5 	.word	0x0800dec5
 800dc9c:	20000dc0 	.word	0x20000dc0

0800dca0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b088      	sub	sp, #32
 800dca4:	af02      	add	r7, sp, #8
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dcae:	2028      	movs	r0, #40	; 0x28
 800dcb0:	f000 fdea 	bl	800e888 <pvPortMalloc>
 800dcb4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00d      	beq.n	800dcd8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	68b9      	ldr	r1, [r7, #8]
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	f000 f805 	bl	800dce2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dcd8:	697b      	ldr	r3, [r7, #20]
	}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b086      	sub	sp, #24
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	60f8      	str	r0, [r7, #12]
 800dcea:	60b9      	str	r1, [r7, #8]
 800dcec:	607a      	str	r2, [r7, #4]
 800dcee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d10a      	bne.n	800dd0c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	617b      	str	r3, [r7, #20]
}
 800dd08:	bf00      	nop
 800dd0a:	e7fe      	b.n	800dd0a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d01e      	beq.n	800dd50 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dd12:	f000 fae7 	bl	800e2e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2a:	6a3a      	ldr	r2, [r7, #32]
 800dd2c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd30:	3304      	adds	r3, #4
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe fa55 	bl	800c1e2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d008      	beq.n	800dd50 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dd44:	f043 0304 	orr.w	r3, r3, #4
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800dd50:	bf00      	nop
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08a      	sub	sp, #40	; 0x28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10a      	bne.n	800dd86 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	623b      	str	r3, [r7, #32]
}
 800dd82:	bf00      	nop
 800dd84:	e7fe      	b.n	800dd84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd86:	4b1a      	ldr	r3, [pc, #104]	; (800ddf0 <xTimerGenericCommand+0x98>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d02a      	beq.n	800dde4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b05      	cmp	r3, #5
 800dd9e:	dc18      	bgt.n	800ddd2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dda0:	f7ff feb2 	bl	800db08 <xTaskGetSchedulerState>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d109      	bne.n	800ddbe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddaa:	4b11      	ldr	r3, [pc, #68]	; (800ddf0 <xTimerGenericCommand+0x98>)
 800ddac:	6818      	ldr	r0, [r3, #0]
 800ddae:	f107 0114 	add.w	r1, r7, #20
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddb6:	f7fe fba9 	bl	800c50c <xQueueGenericSend>
 800ddba:	6278      	str	r0, [r7, #36]	; 0x24
 800ddbc:	e012      	b.n	800dde4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddbe:	4b0c      	ldr	r3, [pc, #48]	; (800ddf0 <xTimerGenericCommand+0x98>)
 800ddc0:	6818      	ldr	r0, [r3, #0]
 800ddc2:	f107 0114 	add.w	r1, r7, #20
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f7fe fb9f 	bl	800c50c <xQueueGenericSend>
 800ddce:	6278      	str	r0, [r7, #36]	; 0x24
 800ddd0:	e008      	b.n	800dde4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddd2:	4b07      	ldr	r3, [pc, #28]	; (800ddf0 <xTimerGenericCommand+0x98>)
 800ddd4:	6818      	ldr	r0, [r3, #0]
 800ddd6:	f107 0114 	add.w	r1, r7, #20
 800ddda:	2300      	movs	r3, #0
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	f7fe fc93 	bl	800c708 <xQueueGenericSendFromISR>
 800dde2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3728      	adds	r7, #40	; 0x28
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	20000dbc 	.word	0x20000dbc

0800ddf4 <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10a      	bne.n	800de1c <xTimerGetPeriod+0x28>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	60bb      	str	r3, [r7, #8]
}
 800de18:	bf00      	nop
 800de1a:	e7fe      	b.n	800de1a <xTimerGetPeriod+0x26>
	return pxTimer->xTimerPeriodInTicks;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	699b      	ldr	r3, [r3, #24]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3714      	adds	r7, #20
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b088      	sub	sp, #32
 800de30:	af02      	add	r7, sp, #8
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de36:	4b22      	ldr	r3, [pc, #136]	; (800dec0 <prvProcessExpiredTimer+0x94>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	3304      	adds	r3, #4
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe fa36 	bl	800c2b6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de50:	f003 0304 	and.w	r3, r3, #4
 800de54:	2b00      	cmp	r3, #0
 800de56:	d022      	beq.n	800de9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	699a      	ldr	r2, [r3, #24]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	18d1      	adds	r1, r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	6978      	ldr	r0, [r7, #20]
 800de66:	f000 f8d1 	bl	800e00c <prvInsertTimerInActiveList>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d01f      	beq.n	800deb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de70:	2300      	movs	r3, #0
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	2300      	movs	r3, #0
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	2100      	movs	r1, #0
 800de7a:	6978      	ldr	r0, [r7, #20]
 800de7c:	f7ff ff6c 	bl	800dd58 <xTimerGenericCommand>
 800de80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d113      	bne.n	800deb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	60fb      	str	r3, [r7, #12]
}
 800de9a:	bf00      	nop
 800de9c:	e7fe      	b.n	800de9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dea4:	f023 0301 	bic.w	r3, r3, #1
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	6a1b      	ldr	r3, [r3, #32]
 800deb4:	6978      	ldr	r0, [r7, #20]
 800deb6:	4798      	blx	r3
}
 800deb8:	bf00      	nop
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	20000db4 	.word	0x20000db4

0800dec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800decc:	f107 0308 	add.w	r3, r7, #8
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 f857 	bl	800df84 <prvGetNextExpireTime>
 800ded6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	4619      	mov	r1, r3
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	f000 f803 	bl	800dee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dee2:	f000 f8d5 	bl	800e090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dee6:	e7f1      	b.n	800decc <prvTimerTask+0x8>

0800dee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800def2:	f7ff fa2f 	bl	800d354 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800def6:	f107 0308 	add.w	r3, r7, #8
 800defa:	4618      	mov	r0, r3
 800defc:	f000 f866 	bl	800dfcc <prvSampleTimeNow>
 800df00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d130      	bne.n	800df6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10a      	bne.n	800df24 <prvProcessTimerOrBlockTask+0x3c>
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	429a      	cmp	r2, r3
 800df14:	d806      	bhi.n	800df24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df16:	f7ff fa2b 	bl	800d370 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df1a:	68f9      	ldr	r1, [r7, #12]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7ff ff85 	bl	800de2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df22:	e024      	b.n	800df6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d008      	beq.n	800df3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df2a:	4b13      	ldr	r3, [pc, #76]	; (800df78 <prvProcessTimerOrBlockTask+0x90>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <prvProcessTimerOrBlockTask+0x50>
 800df34:	2301      	movs	r3, #1
 800df36:	e000      	b.n	800df3a <prvProcessTimerOrBlockTask+0x52>
 800df38:	2300      	movs	r3, #0
 800df3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df3c:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <prvProcessTimerOrBlockTask+0x94>)
 800df3e:	6818      	ldr	r0, [r3, #0]
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4619      	mov	r1, r3
 800df4a:	f7fe fe85 	bl	800cc58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df4e:	f7ff fa0f 	bl	800d370 <xTaskResumeAll>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10a      	bne.n	800df6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df58:	4b09      	ldr	r3, [pc, #36]	; (800df80 <prvProcessTimerOrBlockTask+0x98>)
 800df5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df5e:	601a      	str	r2, [r3, #0]
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	f3bf 8f6f 	isb	sy
}
 800df68:	e001      	b.n	800df6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df6a:	f7ff fa01 	bl	800d370 <xTaskResumeAll>
}
 800df6e:	bf00      	nop
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	20000db8 	.word	0x20000db8
 800df7c:	20000dbc 	.word	0x20000dbc
 800df80:	e000ed04 	.word	0xe000ed04

0800df84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df8c:	4b0e      	ldr	r3, [pc, #56]	; (800dfc8 <prvGetNextExpireTime+0x44>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d101      	bne.n	800df9a <prvGetNextExpireTime+0x16>
 800df96:	2201      	movs	r2, #1
 800df98:	e000      	b.n	800df9c <prvGetNextExpireTime+0x18>
 800df9a:	2200      	movs	r2, #0
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d105      	bne.n	800dfb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfa8:	4b07      	ldr	r3, [pc, #28]	; (800dfc8 <prvGetNextExpireTime+0x44>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	e001      	b.n	800dfb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	20000db4 	.word	0x20000db4

0800dfcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfd4:	f7ff fa68 	bl	800d4a8 <xTaskGetTickCount>
 800dfd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfda:	4b0b      	ldr	r3, [pc, #44]	; (800e008 <prvSampleTimeNow+0x3c>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68fa      	ldr	r2, [r7, #12]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d205      	bcs.n	800dff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfe4:	f000 f91a 	bl	800e21c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	e002      	b.n	800dff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dff6:	4a04      	ldr	r2, [pc, #16]	; (800e008 <prvSampleTimeNow+0x3c>)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dffc:	68fb      	ldr	r3, [r7, #12]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20000dc4 	.word	0x20000dc4

0800e00c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
 800e018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e01a:	2300      	movs	r3, #0
 800e01c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d812      	bhi.n	800e058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	1ad2      	subs	r2, r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d302      	bcc.n	800e046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e040:	2301      	movs	r3, #1
 800e042:	617b      	str	r3, [r7, #20]
 800e044:	e01b      	b.n	800e07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e046:	4b10      	ldr	r3, [pc, #64]	; (800e088 <prvInsertTimerInActiveList+0x7c>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	3304      	adds	r3, #4
 800e04e:	4619      	mov	r1, r3
 800e050:	4610      	mov	r0, r2
 800e052:	f7fe f8f7 	bl	800c244 <vListInsert>
 800e056:	e012      	b.n	800e07e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d206      	bcs.n	800e06e <prvInsertTimerInActiveList+0x62>
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	429a      	cmp	r2, r3
 800e066:	d302      	bcc.n	800e06e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e068:	2301      	movs	r3, #1
 800e06a:	617b      	str	r3, [r7, #20]
 800e06c:	e007      	b.n	800e07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e06e:	4b07      	ldr	r3, [pc, #28]	; (800e08c <prvInsertTimerInActiveList+0x80>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	3304      	adds	r3, #4
 800e076:	4619      	mov	r1, r3
 800e078:	4610      	mov	r0, r2
 800e07a:	f7fe f8e3 	bl	800c244 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e07e:	697b      	ldr	r3, [r7, #20]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	20000db8 	.word	0x20000db8
 800e08c:	20000db4 	.word	0x20000db4

0800e090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b08c      	sub	sp, #48	; 0x30
 800e094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e096:	e0ae      	b.n	800e1f6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f2c0 80ab 	blt.w	800e1f6 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	695b      	ldr	r3, [r3, #20]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d004      	beq.n	800e0b6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7fe f900 	bl	800c2b6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0b6:	1d3b      	adds	r3, r7, #4
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff ff87 	bl	800dfcc <prvSampleTimeNow>
 800e0be:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	2b09      	cmp	r3, #9
 800e0c4:	f200 8096 	bhi.w	800e1f4 <prvProcessReceivedCommands+0x164>
 800e0c8:	a201      	add	r2, pc, #4	; (adr r2, 800e0d0 <prvProcessReceivedCommands+0x40>)
 800e0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ce:	bf00      	nop
 800e0d0:	0800e0f9 	.word	0x0800e0f9
 800e0d4:	0800e0f9 	.word	0x0800e0f9
 800e0d8:	0800e0f9 	.word	0x0800e0f9
 800e0dc:	0800e16d 	.word	0x0800e16d
 800e0e0:	0800e181 	.word	0x0800e181
 800e0e4:	0800e1cb 	.word	0x0800e1cb
 800e0e8:	0800e0f9 	.word	0x0800e0f9
 800e0ec:	0800e0f9 	.word	0x0800e0f9
 800e0f0:	0800e16d 	.word	0x0800e16d
 800e0f4:	0800e181 	.word	0x0800e181
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e0fe:	f043 0301 	orr.w	r3, r3, #1
 800e102:	b2da      	uxtb	r2, r3
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	18d1      	adds	r1, r2, r3
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	6a3a      	ldr	r2, [r7, #32]
 800e116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e118:	f7ff ff78 	bl	800e00c <prvInsertTimerInActiveList>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d069      	beq.n	800e1f6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	6a1b      	ldr	r3, [r3, #32]
 800e126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e128:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e130:	f003 0304 	and.w	r3, r3, #4
 800e134:	2b00      	cmp	r3, #0
 800e136:	d05e      	beq.n	800e1f6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	699b      	ldr	r3, [r3, #24]
 800e13e:	441a      	add	r2, r3
 800e140:	2300      	movs	r3, #0
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	2300      	movs	r3, #0
 800e146:	2100      	movs	r1, #0
 800e148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e14a:	f7ff fe05 	bl	800dd58 <xTimerGenericCommand>
 800e14e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d14f      	bne.n	800e1f6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	61bb      	str	r3, [r7, #24]
}
 800e168:	bf00      	nop
 800e16a:	e7fe      	b.n	800e16a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e172:	f023 0301 	bic.w	r3, r3, #1
 800e176:	b2da      	uxtb	r2, r3
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e17e:	e03a      	b.n	800e1f6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e186:	f043 0301 	orr.w	r3, r3, #1
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19a:	699b      	ldr	r3, [r3, #24]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d10a      	bne.n	800e1b6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800e1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	617b      	str	r3, [r7, #20]
}
 800e1b2:	bf00      	nop
 800e1b4:	e7fe      	b.n	800e1b4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	699a      	ldr	r2, [r3, #24]
 800e1ba:	6a3b      	ldr	r3, [r7, #32]
 800e1bc:	18d1      	adds	r1, r2, r3
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	6a3a      	ldr	r2, [r7, #32]
 800e1c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1c4:	f7ff ff22 	bl	800e00c <prvInsertTimerInActiveList>
					break;
 800e1c8:	e015      	b.n	800e1f6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1d0:	f003 0302 	and.w	r3, r3, #2
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d103      	bne.n	800e1e0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1da:	f000 fb67 	bl	800e8ac <vPortFree>
 800e1de:	e00a      	b.n	800e1f6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1e6:	f023 0301 	bic.w	r3, r3, #1
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1f2:	e000      	b.n	800e1f6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800e1f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1f6:	4b08      	ldr	r3, [pc, #32]	; (800e218 <prvProcessReceivedCommands+0x188>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f107 0108 	add.w	r1, r7, #8
 800e1fe:	2200      	movs	r2, #0
 800e200:	4618      	mov	r0, r3
 800e202:	f7fe fb1d 	bl	800c840 <xQueueReceive>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f47f af45 	bne.w	800e098 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e20e:	bf00      	nop
 800e210:	bf00      	nop
 800e212:	3728      	adds	r7, #40	; 0x28
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	20000dbc 	.word	0x20000dbc

0800e21c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b088      	sub	sp, #32
 800e220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e222:	e048      	b.n	800e2b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e224:	4b2d      	ldr	r3, [pc, #180]	; (800e2dc <prvSwitchTimerLists+0xc0>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e22e:	4b2b      	ldr	r3, [pc, #172]	; (800e2dc <prvSwitchTimerLists+0xc0>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	3304      	adds	r3, #4
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fe f83a 	bl	800c2b6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6a1b      	ldr	r3, [r3, #32]
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e250:	f003 0304 	and.w	r3, r3, #4
 800e254:	2b00      	cmp	r3, #0
 800e256:	d02e      	beq.n	800e2b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	699b      	ldr	r3, [r3, #24]
 800e25c:	693a      	ldr	r2, [r7, #16]
 800e25e:	4413      	add	r3, r2
 800e260:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	429a      	cmp	r2, r3
 800e268:	d90e      	bls.n	800e288 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e276:	4b19      	ldr	r3, [pc, #100]	; (800e2dc <prvSwitchTimerLists+0xc0>)
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	3304      	adds	r3, #4
 800e27e:	4619      	mov	r1, r3
 800e280:	4610      	mov	r0, r2
 800e282:	f7fd ffdf 	bl	800c244 <vListInsert>
 800e286:	e016      	b.n	800e2b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e288:	2300      	movs	r3, #0
 800e28a:	9300      	str	r3, [sp, #0]
 800e28c:	2300      	movs	r3, #0
 800e28e:	693a      	ldr	r2, [r7, #16]
 800e290:	2100      	movs	r1, #0
 800e292:	68f8      	ldr	r0, [r7, #12]
 800e294:	f7ff fd60 	bl	800dd58 <xTimerGenericCommand>
 800e298:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10a      	bne.n	800e2b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	603b      	str	r3, [r7, #0]
}
 800e2b2:	bf00      	nop
 800e2b4:	e7fe      	b.n	800e2b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2b6:	4b09      	ldr	r3, [pc, #36]	; (800e2dc <prvSwitchTimerLists+0xc0>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1b1      	bne.n	800e224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2c0:	4b06      	ldr	r3, [pc, #24]	; (800e2dc <prvSwitchTimerLists+0xc0>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2c6:	4b06      	ldr	r3, [pc, #24]	; (800e2e0 <prvSwitchTimerLists+0xc4>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a04      	ldr	r2, [pc, #16]	; (800e2dc <prvSwitchTimerLists+0xc0>)
 800e2cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2ce:	4a04      	ldr	r2, [pc, #16]	; (800e2e0 <prvSwitchTimerLists+0xc4>)
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	6013      	str	r3, [r2, #0]
}
 800e2d4:	bf00      	nop
 800e2d6:	3718      	adds	r7, #24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20000db4 	.word	0x20000db4
 800e2e0:	20000db8 	.word	0x20000db8

0800e2e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2ea:	f000 f9ab 	bl	800e644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2ee:	4b15      	ldr	r3, [pc, #84]	; (800e344 <prvCheckForValidListAndQueue+0x60>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d120      	bne.n	800e338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e2f6:	4814      	ldr	r0, [pc, #80]	; (800e348 <prvCheckForValidListAndQueue+0x64>)
 800e2f8:	f7fd ff53 	bl	800c1a2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e2fc:	4813      	ldr	r0, [pc, #76]	; (800e34c <prvCheckForValidListAndQueue+0x68>)
 800e2fe:	f7fd ff50 	bl	800c1a2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e302:	4b13      	ldr	r3, [pc, #76]	; (800e350 <prvCheckForValidListAndQueue+0x6c>)
 800e304:	4a10      	ldr	r2, [pc, #64]	; (800e348 <prvCheckForValidListAndQueue+0x64>)
 800e306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e308:	4b12      	ldr	r3, [pc, #72]	; (800e354 <prvCheckForValidListAndQueue+0x70>)
 800e30a:	4a10      	ldr	r2, [pc, #64]	; (800e34c <prvCheckForValidListAndQueue+0x68>)
 800e30c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e30e:	2300      	movs	r3, #0
 800e310:	9300      	str	r3, [sp, #0]
 800e312:	4b11      	ldr	r3, [pc, #68]	; (800e358 <prvCheckForValidListAndQueue+0x74>)
 800e314:	4a11      	ldr	r2, [pc, #68]	; (800e35c <prvCheckForValidListAndQueue+0x78>)
 800e316:	210c      	movs	r1, #12
 800e318:	200a      	movs	r0, #10
 800e31a:	f7fe f85f 	bl	800c3dc <xQueueGenericCreateStatic>
 800e31e:	4603      	mov	r3, r0
 800e320:	4a08      	ldr	r2, [pc, #32]	; (800e344 <prvCheckForValidListAndQueue+0x60>)
 800e322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e324:	4b07      	ldr	r3, [pc, #28]	; (800e344 <prvCheckForValidListAndQueue+0x60>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d005      	beq.n	800e338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e32c:	4b05      	ldr	r3, [pc, #20]	; (800e344 <prvCheckForValidListAndQueue+0x60>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	490b      	ldr	r1, [pc, #44]	; (800e360 <prvCheckForValidListAndQueue+0x7c>)
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe fc66 	bl	800cc04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e338:	f000 f9b4 	bl	800e6a4 <vPortExitCritical>
}
 800e33c:	bf00      	nop
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	20000dbc 	.word	0x20000dbc
 800e348:	20000d8c 	.word	0x20000d8c
 800e34c:	20000da0 	.word	0x20000da0
 800e350:	20000db4 	.word	0x20000db4
 800e354:	20000db8 	.word	0x20000db8
 800e358:	20000e40 	.word	0x20000e40
 800e35c:	20000dc8 	.word	0x20000dc8
 800e360:	0801271c 	.word	0x0801271c

0800e364 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b086      	sub	sp, #24
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d10a      	bne.n	800e38c <pvTimerGetTimerID+0x28>
	__asm volatile
 800e376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37a:	f383 8811 	msr	BASEPRI, r3
 800e37e:	f3bf 8f6f 	isb	sy
 800e382:	f3bf 8f4f 	dsb	sy
 800e386:	60fb      	str	r3, [r7, #12]
}
 800e388:	bf00      	nop
 800e38a:	e7fe      	b.n	800e38a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e38c:	f000 f95a 	bl	800e644 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	69db      	ldr	r3, [r3, #28]
 800e394:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e396:	f000 f985 	bl	800e6a4 <vPortExitCritical>

	return pvReturn;
 800e39a:	693b      	ldr	r3, [r7, #16]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10a      	bne.n	800e3ce <vTimerSetTimerID+0x2a>
	__asm volatile
 800e3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3bc:	f383 8811 	msr	BASEPRI, r3
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	60bb      	str	r3, [r7, #8]
}
 800e3ca:	bf00      	nop
 800e3cc:	e7fe      	b.n	800e3cc <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800e3ce:	f000 f939 	bl	800e644 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800e3d8:	f000 f964 	bl	800e6a4 <vPortExitCritical>
}
 800e3dc:	bf00      	nop
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	3b04      	subs	r3, #4
 800e3f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3b04      	subs	r3, #4
 800e402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	f023 0201 	bic.w	r2, r3, #1
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	3b04      	subs	r3, #4
 800e412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e414:	4a0c      	ldr	r2, [pc, #48]	; (800e448 <pxPortInitialiseStack+0x64>)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	3b14      	subs	r3, #20
 800e41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	3b04      	subs	r3, #4
 800e42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f06f 0202 	mvn.w	r2, #2
 800e432:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3b20      	subs	r3, #32
 800e438:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e43a:	68fb      	ldr	r3, [r7, #12]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3714      	adds	r7, #20
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	0800e44d 	.word	0x0800e44d

0800e44c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e452:	2300      	movs	r3, #0
 800e454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e456:	4b12      	ldr	r3, [pc, #72]	; (800e4a0 <prvTaskExitError+0x54>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e45e:	d00a      	beq.n	800e476 <prvTaskExitError+0x2a>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	60fb      	str	r3, [r7, #12]
}
 800e472:	bf00      	nop
 800e474:	e7fe      	b.n	800e474 <prvTaskExitError+0x28>
	__asm volatile
 800e476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47a:	f383 8811 	msr	BASEPRI, r3
 800e47e:	f3bf 8f6f 	isb	sy
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	60bb      	str	r3, [r7, #8]
}
 800e488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e48a:	bf00      	nop
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0fc      	beq.n	800e48c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e492:	bf00      	nop
 800e494:	bf00      	nop
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr
 800e4a0:	200000b8 	.word	0x200000b8
	...

0800e4b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e4b0:	4b07      	ldr	r3, [pc, #28]	; (800e4d0 <pxCurrentTCBConst2>)
 800e4b2:	6819      	ldr	r1, [r3, #0]
 800e4b4:	6808      	ldr	r0, [r1, #0]
 800e4b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ba:	f380 8809 	msr	PSP, r0
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f04f 0000 	mov.w	r0, #0
 800e4c6:	f380 8811 	msr	BASEPRI, r0
 800e4ca:	4770      	bx	lr
 800e4cc:	f3af 8000 	nop.w

0800e4d0 <pxCurrentTCBConst2>:
 800e4d0:	20000c60 	.word	0x20000c60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4d4:	bf00      	nop
 800e4d6:	bf00      	nop

0800e4d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4d8:	4808      	ldr	r0, [pc, #32]	; (800e4fc <prvPortStartFirstTask+0x24>)
 800e4da:	6800      	ldr	r0, [r0, #0]
 800e4dc:	6800      	ldr	r0, [r0, #0]
 800e4de:	f380 8808 	msr	MSP, r0
 800e4e2:	f04f 0000 	mov.w	r0, #0
 800e4e6:	f380 8814 	msr	CONTROL, r0
 800e4ea:	b662      	cpsie	i
 800e4ec:	b661      	cpsie	f
 800e4ee:	f3bf 8f4f 	dsb	sy
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	df00      	svc	0
 800e4f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4fa:	bf00      	nop
 800e4fc:	e000ed08 	.word	0xe000ed08

0800e500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b086      	sub	sp, #24
 800e504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e506:	4b46      	ldr	r3, [pc, #280]	; (800e620 <xPortStartScheduler+0x120>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a46      	ldr	r2, [pc, #280]	; (800e624 <xPortStartScheduler+0x124>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d10a      	bne.n	800e526 <xPortStartScheduler+0x26>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	613b      	str	r3, [r7, #16]
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e526:	4b3e      	ldr	r3, [pc, #248]	; (800e620 <xPortStartScheduler+0x120>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a3f      	ldr	r2, [pc, #252]	; (800e628 <xPortStartScheduler+0x128>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d10a      	bne.n	800e546 <xPortStartScheduler+0x46>
	__asm volatile
 800e530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e534:	f383 8811 	msr	BASEPRI, r3
 800e538:	f3bf 8f6f 	isb	sy
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	60fb      	str	r3, [r7, #12]
}
 800e542:	bf00      	nop
 800e544:	e7fe      	b.n	800e544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e546:	4b39      	ldr	r3, [pc, #228]	; (800e62c <xPortStartScheduler+0x12c>)
 800e548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	22ff      	movs	r2, #255	; 0xff
 800e556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	4b31      	ldr	r3, [pc, #196]	; (800e630 <xPortStartScheduler+0x130>)
 800e56c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e56e:	4b31      	ldr	r3, [pc, #196]	; (800e634 <xPortStartScheduler+0x134>)
 800e570:	2207      	movs	r2, #7
 800e572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e574:	e009      	b.n	800e58a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e576:	4b2f      	ldr	r3, [pc, #188]	; (800e634 <xPortStartScheduler+0x134>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3b01      	subs	r3, #1
 800e57c:	4a2d      	ldr	r2, [pc, #180]	; (800e634 <xPortStartScheduler+0x134>)
 800e57e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e580:	78fb      	ldrb	r3, [r7, #3]
 800e582:	b2db      	uxtb	r3, r3
 800e584:	005b      	lsls	r3, r3, #1
 800e586:	b2db      	uxtb	r3, r3
 800e588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e58a:	78fb      	ldrb	r3, [r7, #3]
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e592:	2b80      	cmp	r3, #128	; 0x80
 800e594:	d0ef      	beq.n	800e576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e596:	4b27      	ldr	r3, [pc, #156]	; (800e634 <xPortStartScheduler+0x134>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f1c3 0307 	rsb	r3, r3, #7
 800e59e:	2b04      	cmp	r3, #4
 800e5a0:	d00a      	beq.n	800e5b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	60bb      	str	r3, [r7, #8]
}
 800e5b4:	bf00      	nop
 800e5b6:	e7fe      	b.n	800e5b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e5b8:	4b1e      	ldr	r3, [pc, #120]	; (800e634 <xPortStartScheduler+0x134>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	021b      	lsls	r3, r3, #8
 800e5be:	4a1d      	ldr	r2, [pc, #116]	; (800e634 <xPortStartScheduler+0x134>)
 800e5c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e5c2:	4b1c      	ldr	r3, [pc, #112]	; (800e634 <xPortStartScheduler+0x134>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e5ca:	4a1a      	ldr	r2, [pc, #104]	; (800e634 <xPortStartScheduler+0x134>)
 800e5cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	b2da      	uxtb	r2, r3
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5d6:	4b18      	ldr	r3, [pc, #96]	; (800e638 <xPortStartScheduler+0x138>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a17      	ldr	r2, [pc, #92]	; (800e638 <xPortStartScheduler+0x138>)
 800e5dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5e2:	4b15      	ldr	r3, [pc, #84]	; (800e638 <xPortStartScheduler+0x138>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a14      	ldr	r2, [pc, #80]	; (800e638 <xPortStartScheduler+0x138>)
 800e5e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e5ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5ee:	f000 f8dd 	bl	800e7ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5f2:	4b12      	ldr	r3, [pc, #72]	; (800e63c <xPortStartScheduler+0x13c>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5f8:	f000 f8fc 	bl	800e7f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5fc:	4b10      	ldr	r3, [pc, #64]	; (800e640 <xPortStartScheduler+0x140>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a0f      	ldr	r2, [pc, #60]	; (800e640 <xPortStartScheduler+0x140>)
 800e602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e608:	f7ff ff66 	bl	800e4d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e60c:	f7ff f814 	bl	800d638 <vTaskSwitchContext>
	prvTaskExitError();
 800e610:	f7ff ff1c 	bl	800e44c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	e000ed00 	.word	0xe000ed00
 800e624:	410fc271 	.word	0x410fc271
 800e628:	410fc270 	.word	0x410fc270
 800e62c:	e000e400 	.word	0xe000e400
 800e630:	20000e88 	.word	0x20000e88
 800e634:	20000e8c 	.word	0x20000e8c
 800e638:	e000ed20 	.word	0xe000ed20
 800e63c:	200000b8 	.word	0x200000b8
 800e640:	e000ef34 	.word	0xe000ef34

0800e644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
	__asm volatile
 800e64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	607b      	str	r3, [r7, #4]
}
 800e65c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e65e:	4b0f      	ldr	r3, [pc, #60]	; (800e69c <vPortEnterCritical+0x58>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3301      	adds	r3, #1
 800e664:	4a0d      	ldr	r2, [pc, #52]	; (800e69c <vPortEnterCritical+0x58>)
 800e666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e668:	4b0c      	ldr	r3, [pc, #48]	; (800e69c <vPortEnterCritical+0x58>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d10f      	bne.n	800e690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e670:	4b0b      	ldr	r3, [pc, #44]	; (800e6a0 <vPortEnterCritical+0x5c>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	b2db      	uxtb	r3, r3
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00a      	beq.n	800e690 <vPortEnterCritical+0x4c>
	__asm volatile
 800e67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67e:	f383 8811 	msr	BASEPRI, r3
 800e682:	f3bf 8f6f 	isb	sy
 800e686:	f3bf 8f4f 	dsb	sy
 800e68a:	603b      	str	r3, [r7, #0]
}
 800e68c:	bf00      	nop
 800e68e:	e7fe      	b.n	800e68e <vPortEnterCritical+0x4a>
	}
}
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	200000b8 	.word	0x200000b8
 800e6a0:	e000ed04 	.word	0xe000ed04

0800e6a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e6aa:	4b12      	ldr	r3, [pc, #72]	; (800e6f4 <vPortExitCritical+0x50>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10a      	bne.n	800e6c8 <vPortExitCritical+0x24>
	__asm volatile
 800e6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b6:	f383 8811 	msr	BASEPRI, r3
 800e6ba:	f3bf 8f6f 	isb	sy
 800e6be:	f3bf 8f4f 	dsb	sy
 800e6c2:	607b      	str	r3, [r7, #4]
}
 800e6c4:	bf00      	nop
 800e6c6:	e7fe      	b.n	800e6c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e6c8:	4b0a      	ldr	r3, [pc, #40]	; (800e6f4 <vPortExitCritical+0x50>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	4a09      	ldr	r2, [pc, #36]	; (800e6f4 <vPortExitCritical+0x50>)
 800e6d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6d2:	4b08      	ldr	r3, [pc, #32]	; (800e6f4 <vPortExitCritical+0x50>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d105      	bne.n	800e6e6 <vPortExitCritical+0x42>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	f383 8811 	msr	BASEPRI, r3
}
 800e6e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6e6:	bf00      	nop
 800e6e8:	370c      	adds	r7, #12
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	200000b8 	.word	0x200000b8
	...

0800e700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e700:	f3ef 8009 	mrs	r0, PSP
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	4b15      	ldr	r3, [pc, #84]	; (800e760 <pxCurrentTCBConst>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	f01e 0f10 	tst.w	lr, #16
 800e710:	bf08      	it	eq
 800e712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71a:	6010      	str	r0, [r2, #0]
 800e71c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e720:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e724:	f380 8811 	msr	BASEPRI, r0
 800e728:	f3bf 8f4f 	dsb	sy
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f7fe ff82 	bl	800d638 <vTaskSwitchContext>
 800e734:	f04f 0000 	mov.w	r0, #0
 800e738:	f380 8811 	msr	BASEPRI, r0
 800e73c:	bc09      	pop	{r0, r3}
 800e73e:	6819      	ldr	r1, [r3, #0]
 800e740:	6808      	ldr	r0, [r1, #0]
 800e742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e746:	f01e 0f10 	tst.w	lr, #16
 800e74a:	bf08      	it	eq
 800e74c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e750:	f380 8809 	msr	PSP, r0
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	f3af 8000 	nop.w

0800e760 <pxCurrentTCBConst>:
 800e760:	20000c60 	.word	0x20000c60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e764:	bf00      	nop
 800e766:	bf00      	nop

0800e768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	607b      	str	r3, [r7, #4]
}
 800e780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e782:	f7fe fea1 	bl	800d4c8 <xTaskIncrementTick>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d003      	beq.n	800e794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e78c:	4b06      	ldr	r3, [pc, #24]	; (800e7a8 <xPortSysTickHandler+0x40>)
 800e78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	2300      	movs	r3, #0
 800e796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	f383 8811 	msr	BASEPRI, r3
}
 800e79e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e7a0:	bf00      	nop
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	e000ed04 	.word	0xe000ed04

0800e7ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e7b0:	4b0b      	ldr	r3, [pc, #44]	; (800e7e0 <vPortSetupTimerInterrupt+0x34>)
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e7b6:	4b0b      	ldr	r3, [pc, #44]	; (800e7e4 <vPortSetupTimerInterrupt+0x38>)
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e7bc:	4b0a      	ldr	r3, [pc, #40]	; (800e7e8 <vPortSetupTimerInterrupt+0x3c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a0a      	ldr	r2, [pc, #40]	; (800e7ec <vPortSetupTimerInterrupt+0x40>)
 800e7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7c6:	099b      	lsrs	r3, r3, #6
 800e7c8:	4a09      	ldr	r2, [pc, #36]	; (800e7f0 <vPortSetupTimerInterrupt+0x44>)
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e7ce:	4b04      	ldr	r3, [pc, #16]	; (800e7e0 <vPortSetupTimerInterrupt+0x34>)
 800e7d0:	2207      	movs	r2, #7
 800e7d2:	601a      	str	r2, [r3, #0]
}
 800e7d4:	bf00      	nop
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop
 800e7e0:	e000e010 	.word	0xe000e010
 800e7e4:	e000e018 	.word	0xe000e018
 800e7e8:	20000000 	.word	0x20000000
 800e7ec:	10624dd3 	.word	0x10624dd3
 800e7f0:	e000e014 	.word	0xe000e014

0800e7f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e804 <vPortEnableVFP+0x10>
 800e7f8:	6801      	ldr	r1, [r0, #0]
 800e7fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7fe:	6001      	str	r1, [r0, #0]
 800e800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e802:	bf00      	nop
 800e804:	e000ed88 	.word	0xe000ed88

0800e808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e808:	b480      	push	{r7}
 800e80a:	b085      	sub	sp, #20
 800e80c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e80e:	f3ef 8305 	mrs	r3, IPSR
 800e812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b0f      	cmp	r3, #15
 800e818:	d914      	bls.n	800e844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e81a:	4a17      	ldr	r2, [pc, #92]	; (800e878 <vPortValidateInterruptPriority+0x70>)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	4413      	add	r3, r2
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e824:	4b15      	ldr	r3, [pc, #84]	; (800e87c <vPortValidateInterruptPriority+0x74>)
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	7afa      	ldrb	r2, [r7, #11]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d20a      	bcs.n	800e844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	607b      	str	r3, [r7, #4]
}
 800e840:	bf00      	nop
 800e842:	e7fe      	b.n	800e842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e844:	4b0e      	ldr	r3, [pc, #56]	; (800e880 <vPortValidateInterruptPriority+0x78>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e84c:	4b0d      	ldr	r3, [pc, #52]	; (800e884 <vPortValidateInterruptPriority+0x7c>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	429a      	cmp	r2, r3
 800e852:	d90a      	bls.n	800e86a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e858:	f383 8811 	msr	BASEPRI, r3
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	603b      	str	r3, [r7, #0]
}
 800e866:	bf00      	nop
 800e868:	e7fe      	b.n	800e868 <vPortValidateInterruptPriority+0x60>
	}
 800e86a:	bf00      	nop
 800e86c:	3714      	adds	r7, #20
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	e000e3f0 	.word	0xe000e3f0
 800e87c:	20000e88 	.word	0x20000e88
 800e880:	e000ed0c 	.word	0xe000ed0c
 800e884:	20000e8c 	.word	0x20000e8c

0800e888 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800e890:	f7fe fd60 	bl	800d354 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 fd2b 	bl	800f2f0 <malloc>
 800e89a:	4603      	mov	r3, r0
 800e89c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e89e:	f7fe fd67 	bl	800d370 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3710      	adds	r7, #16
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
	if( pv )
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d006      	beq.n	800e8c8 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800e8ba:	f7fe fd4b 	bl	800d354 <vTaskSuspendAll>
		{
			free( pv );
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 fd1e 	bl	800f300 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800e8c4:	f7fe fd54 	bl	800d370 <xTaskResumeAll>
	}
}
 800e8c8:	bf00      	nop
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	4912      	ldr	r1, [pc, #72]	; (800e920 <MX_USB_DEVICE_Init+0x50>)
 800e8d8:	4812      	ldr	r0, [pc, #72]	; (800e924 <MX_USB_DEVICE_Init+0x54>)
 800e8da:	f7fc f8f1 	bl	800aac0 <USBD_Init>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d001      	beq.n	800e8e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8e4:	f7f3 fa6c 	bl	8001dc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8e8:	490f      	ldr	r1, [pc, #60]	; (800e928 <MX_USB_DEVICE_Init+0x58>)
 800e8ea:	480e      	ldr	r0, [pc, #56]	; (800e924 <MX_USB_DEVICE_Init+0x54>)
 800e8ec:	f7fc f918 	bl	800ab20 <USBD_RegisterClass>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d001      	beq.n	800e8fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8f6:	f7f3 fa63 	bl	8001dc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8fa:	490c      	ldr	r1, [pc, #48]	; (800e92c <MX_USB_DEVICE_Init+0x5c>)
 800e8fc:	4809      	ldr	r0, [pc, #36]	; (800e924 <MX_USB_DEVICE_Init+0x54>)
 800e8fe:	f7fc f809 	bl	800a914 <USBD_CDC_RegisterInterface>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e908:	f7f3 fa5a 	bl	8001dc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e90c:	4805      	ldr	r0, [pc, #20]	; (800e924 <MX_USB_DEVICE_Init+0x54>)
 800e90e:	f7fc f93d 	bl	800ab8c <USBD_Start>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e918:	f7f3 fa52 	bl	8001dc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e91c:	bf00      	nop
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	200000d0 	.word	0x200000d0
 800e924:	20000e90 	.word	0x20000e90
 800e928:	20000038 	.word	0x20000038
 800e92c:	200000bc 	.word	0x200000bc

0800e930 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e934:	2200      	movs	r2, #0
 800e936:	4905      	ldr	r1, [pc, #20]	; (800e94c <CDC_Init_FS+0x1c>)
 800e938:	4805      	ldr	r0, [pc, #20]	; (800e950 <CDC_Init_FS+0x20>)
 800e93a:	f7fc f805 	bl	800a948 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e93e:	4905      	ldr	r1, [pc, #20]	; (800e954 <CDC_Init_FS+0x24>)
 800e940:	4803      	ldr	r0, [pc, #12]	; (800e950 <CDC_Init_FS+0x20>)
 800e942:	f7fc f823 	bl	800a98c <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800e946:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e948:	4618      	mov	r0, r3
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	2000156c 	.word	0x2000156c
 800e950:	20000e90 	.word	0x20000e90
 800e954:	2000116c 	.word	0x2000116c

0800e958 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e958:	b480      	push	{r7}
 800e95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800e95c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e95e:	4618      	mov	r0, r3
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	4603      	mov	r3, r0
 800e970:	6039      	str	r1, [r7, #0]
 800e972:	71fb      	strb	r3, [r7, #7]
 800e974:	4613      	mov	r3, r2
 800e976:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800e978:	79fb      	ldrb	r3, [r7, #7]
 800e97a:	2b23      	cmp	r3, #35	; 0x23
 800e97c:	d84a      	bhi.n	800ea14 <CDC_Control_FS+0xac>
 800e97e:	a201      	add	r2, pc, #4	; (adr r2, 800e984 <CDC_Control_FS+0x1c>)
 800e980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e984:	0800ea15 	.word	0x0800ea15
 800e988:	0800ea15 	.word	0x0800ea15
 800e98c:	0800ea15 	.word	0x0800ea15
 800e990:	0800ea15 	.word	0x0800ea15
 800e994:	0800ea15 	.word	0x0800ea15
 800e998:	0800ea15 	.word	0x0800ea15
 800e99c:	0800ea15 	.word	0x0800ea15
 800e9a0:	0800ea15 	.word	0x0800ea15
 800e9a4:	0800ea15 	.word	0x0800ea15
 800e9a8:	0800ea15 	.word	0x0800ea15
 800e9ac:	0800ea15 	.word	0x0800ea15
 800e9b0:	0800ea15 	.word	0x0800ea15
 800e9b4:	0800ea15 	.word	0x0800ea15
 800e9b8:	0800ea15 	.word	0x0800ea15
 800e9bc:	0800ea15 	.word	0x0800ea15
 800e9c0:	0800ea15 	.word	0x0800ea15
 800e9c4:	0800ea15 	.word	0x0800ea15
 800e9c8:	0800ea15 	.word	0x0800ea15
 800e9cc:	0800ea15 	.word	0x0800ea15
 800e9d0:	0800ea15 	.word	0x0800ea15
 800e9d4:	0800ea15 	.word	0x0800ea15
 800e9d8:	0800ea15 	.word	0x0800ea15
 800e9dc:	0800ea15 	.word	0x0800ea15
 800e9e0:	0800ea15 	.word	0x0800ea15
 800e9e4:	0800ea15 	.word	0x0800ea15
 800e9e8:	0800ea15 	.word	0x0800ea15
 800e9ec:	0800ea15 	.word	0x0800ea15
 800e9f0:	0800ea15 	.word	0x0800ea15
 800e9f4:	0800ea15 	.word	0x0800ea15
 800e9f8:	0800ea15 	.word	0x0800ea15
 800e9fc:	0800ea15 	.word	0x0800ea15
 800ea00:	0800ea15 	.word	0x0800ea15
 800ea04:	0800ea15 	.word	0x0800ea15
 800ea08:	0800ea15 	.word	0x0800ea15
 800ea0c:	0800ea15 	.word	0x0800ea15
 800ea10:	0800ea15 	.word	0x0800ea15
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800ea14:	bf00      	nop
    }

    return (USBD_OK);
 800ea16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea2e:	6879      	ldr	r1, [r7, #4]
 800ea30:	4805      	ldr	r0, [pc, #20]	; (800ea48 <CDC_Receive_FS+0x24>)
 800ea32:	f7fb ffab 	bl	800a98c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea36:	4804      	ldr	r0, [pc, #16]	; (800ea48 <CDC_Receive_FS+0x24>)
 800ea38:	f7fc f80c 	bl	800aa54 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800ea3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	20000e90 	.word	0x20000e90

0800ea4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800ea5c:	4b0d      	ldr	r3, [pc, #52]	; (800ea94 <CDC_Transmit_FS+0x48>)
 800ea5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea62:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d001      	beq.n	800ea72 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e00b      	b.n	800ea8a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea72:	887b      	ldrh	r3, [r7, #2]
 800ea74:	461a      	mov	r2, r3
 800ea76:	6879      	ldr	r1, [r7, #4]
 800ea78:	4806      	ldr	r0, [pc, #24]	; (800ea94 <CDC_Transmit_FS+0x48>)
 800ea7a:	f7fb ff65 	bl	800a948 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea7e:	4805      	ldr	r0, [pc, #20]	; (800ea94 <CDC_Transmit_FS+0x48>)
 800ea80:	f7fb ffa2 	bl	800a9c8 <USBD_CDC_TransmitPacket>
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	20000e90 	.word	0x20000e90

0800ea98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b087      	sub	sp, #28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eaaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	371c      	adds	r7, #28
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
	...

0800eabc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	4603      	mov	r3, r0
 800eac4:	6039      	str	r1, [r7, #0]
 800eac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2212      	movs	r2, #18
 800eacc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eace:	4b03      	ldr	r3, [pc, #12]	; (800eadc <USBD_FS_DeviceDescriptor+0x20>)
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	200000ec 	.word	0x200000ec

0800eae0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	4603      	mov	r3, r0
 800eae8:	6039      	str	r1, [r7, #0]
 800eaea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	2204      	movs	r2, #4
 800eaf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eaf2:	4b03      	ldr	r3, [pc, #12]	; (800eb00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	20000100 	.word	0x20000100

0800eb04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	6039      	str	r1, [r7, #0]
 800eb0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb10:	79fb      	ldrb	r3, [r7, #7]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d105      	bne.n	800eb22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	4907      	ldr	r1, [pc, #28]	; (800eb38 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb1a:	4808      	ldr	r0, [pc, #32]	; (800eb3c <USBD_FS_ProductStrDescriptor+0x38>)
 800eb1c:	f7fd f9e2 	bl	800bee4 <USBD_GetString>
 800eb20:	e004      	b.n	800eb2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb22:	683a      	ldr	r2, [r7, #0]
 800eb24:	4904      	ldr	r1, [pc, #16]	; (800eb38 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb26:	4805      	ldr	r0, [pc, #20]	; (800eb3c <USBD_FS_ProductStrDescriptor+0x38>)
 800eb28:	f7fd f9dc 	bl	800bee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb2c:	4b02      	ldr	r3, [pc, #8]	; (800eb38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	2000196c 	.word	0x2000196c
 800eb3c:	08012724 	.word	0x08012724

0800eb40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	4603      	mov	r3, r0
 800eb48:	6039      	str	r1, [r7, #0]
 800eb4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb4c:	683a      	ldr	r2, [r7, #0]
 800eb4e:	4904      	ldr	r1, [pc, #16]	; (800eb60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb50:	4804      	ldr	r0, [pc, #16]	; (800eb64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb52:	f7fd f9c7 	bl	800bee4 <USBD_GetString>
  return USBD_StrDesc;
 800eb56:	4b02      	ldr	r3, [pc, #8]	; (800eb60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	2000196c 	.word	0x2000196c
 800eb64:	0801273c 	.word	0x0801273c

0800eb68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	6039      	str	r1, [r7, #0]
 800eb72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	221a      	movs	r2, #26
 800eb78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb7a:	f000 f843 	bl	800ec04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb7e:	4b02      	ldr	r3, [pc, #8]	; (800eb88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	20000104 	.word	0x20000104

0800eb8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	6039      	str	r1, [r7, #0]
 800eb96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb98:	79fb      	ldrb	r3, [r7, #7]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d105      	bne.n	800ebaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb9e:	683a      	ldr	r2, [r7, #0]
 800eba0:	4907      	ldr	r1, [pc, #28]	; (800ebc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eba2:	4808      	ldr	r0, [pc, #32]	; (800ebc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eba4:	f7fd f99e 	bl	800bee4 <USBD_GetString>
 800eba8:	e004      	b.n	800ebb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	4904      	ldr	r1, [pc, #16]	; (800ebc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebae:	4805      	ldr	r0, [pc, #20]	; (800ebc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebb0:	f7fd f998 	bl	800bee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebb4:	4b02      	ldr	r3, [pc, #8]	; (800ebc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	2000196c 	.word	0x2000196c
 800ebc4:	08012750 	.word	0x08012750

0800ebc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	4603      	mov	r3, r0
 800ebd0:	6039      	str	r1, [r7, #0]
 800ebd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d105      	bne.n	800ebe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	4907      	ldr	r1, [pc, #28]	; (800ebfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebde:	4808      	ldr	r0, [pc, #32]	; (800ec00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebe0:	f7fd f980 	bl	800bee4 <USBD_GetString>
 800ebe4:	e004      	b.n	800ebf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebe6:	683a      	ldr	r2, [r7, #0]
 800ebe8:	4904      	ldr	r1, [pc, #16]	; (800ebfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebea:	4805      	ldr	r0, [pc, #20]	; (800ec00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebec:	f7fd f97a 	bl	800bee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebf0:	4b02      	ldr	r3, [pc, #8]	; (800ebfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	2000196c 	.word	0x2000196c
 800ec00:	0801275c 	.word	0x0801275c

0800ec04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec0a:	4b0f      	ldr	r3, [pc, #60]	; (800ec48 <Get_SerialNum+0x44>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec10:	4b0e      	ldr	r3, [pc, #56]	; (800ec4c <Get_SerialNum+0x48>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec16:	4b0e      	ldr	r3, [pc, #56]	; (800ec50 <Get_SerialNum+0x4c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4413      	add	r3, r2
 800ec22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d009      	beq.n	800ec3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec2a:	2208      	movs	r2, #8
 800ec2c:	4909      	ldr	r1, [pc, #36]	; (800ec54 <Get_SerialNum+0x50>)
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f000 f814 	bl	800ec5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec34:	2204      	movs	r2, #4
 800ec36:	4908      	ldr	r1, [pc, #32]	; (800ec58 <Get_SerialNum+0x54>)
 800ec38:	68b8      	ldr	r0, [r7, #8]
 800ec3a:	f000 f80f 	bl	800ec5c <IntToUnicode>
  }
}
 800ec3e:	bf00      	nop
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	1fff7a10 	.word	0x1fff7a10
 800ec4c:	1fff7a14 	.word	0x1fff7a14
 800ec50:	1fff7a18 	.word	0x1fff7a18
 800ec54:	20000106 	.word	0x20000106
 800ec58:	20000116 	.word	0x20000116

0800ec5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b087      	sub	sp, #28
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	4613      	mov	r3, r2
 800ec68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec6e:	2300      	movs	r3, #0
 800ec70:	75fb      	strb	r3, [r7, #23]
 800ec72:	e027      	b.n	800ecc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	0f1b      	lsrs	r3, r3, #28
 800ec78:	2b09      	cmp	r3, #9
 800ec7a:	d80b      	bhi.n	800ec94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	0f1b      	lsrs	r3, r3, #28
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	7dfb      	ldrb	r3, [r7, #23]
 800ec84:	005b      	lsls	r3, r3, #1
 800ec86:	4619      	mov	r1, r3
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	440b      	add	r3, r1
 800ec8c:	3230      	adds	r2, #48	; 0x30
 800ec8e:	b2d2      	uxtb	r2, r2
 800ec90:	701a      	strb	r2, [r3, #0]
 800ec92:	e00a      	b.n	800ecaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	0f1b      	lsrs	r3, r3, #28
 800ec98:	b2da      	uxtb	r2, r3
 800ec9a:	7dfb      	ldrb	r3, [r7, #23]
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4619      	mov	r1, r3
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	440b      	add	r3, r1
 800eca4:	3237      	adds	r2, #55	; 0x37
 800eca6:	b2d2      	uxtb	r2, r2
 800eca8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	011b      	lsls	r3, r3, #4
 800ecae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
 800ecb2:	005b      	lsls	r3, r3, #1
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	68ba      	ldr	r2, [r7, #8]
 800ecb8:	4413      	add	r3, r2
 800ecba:	2200      	movs	r2, #0
 800ecbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecbe:	7dfb      	ldrb	r3, [r7, #23]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	75fb      	strb	r3, [r7, #23]
 800ecc4:	7dfa      	ldrb	r2, [r7, #23]
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d3d3      	bcc.n	800ec74 <IntToUnicode+0x18>
  }
}
 800eccc:	bf00      	nop
 800ecce:	bf00      	nop
 800ecd0:	371c      	adds	r7, #28
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
	...

0800ecdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	; 0x28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ece4:	f107 0314 	add.w	r3, r7, #20
 800ece8:	2200      	movs	r2, #0
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	605a      	str	r2, [r3, #4]
 800ecee:	609a      	str	r2, [r3, #8]
 800ecf0:	60da      	str	r2, [r3, #12]
 800ecf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ecfc:	d13a      	bne.n	800ed74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecfe:	2300      	movs	r3, #0
 800ed00:	613b      	str	r3, [r7, #16]
 800ed02:	4b1e      	ldr	r3, [pc, #120]	; (800ed7c <HAL_PCD_MspInit+0xa0>)
 800ed04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed06:	4a1d      	ldr	r2, [pc, #116]	; (800ed7c <HAL_PCD_MspInit+0xa0>)
 800ed08:	f043 0301 	orr.w	r3, r3, #1
 800ed0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ed0e:	4b1b      	ldr	r3, [pc, #108]	; (800ed7c <HAL_PCD_MspInit+0xa0>)
 800ed10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed12:	f003 0301 	and.w	r3, r3, #1
 800ed16:	613b      	str	r3, [r7, #16]
 800ed18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed20:	2302      	movs	r3, #2
 800ed22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed24:	2300      	movs	r3, #0
 800ed26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed28:	2303      	movs	r3, #3
 800ed2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed2c:	230a      	movs	r3, #10
 800ed2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed30:	f107 0314 	add.w	r3, r7, #20
 800ed34:	4619      	mov	r1, r3
 800ed36:	4812      	ldr	r0, [pc, #72]	; (800ed80 <HAL_PCD_MspInit+0xa4>)
 800ed38:	f7f5 fbb4 	bl	80044a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed3c:	4b0f      	ldr	r3, [pc, #60]	; (800ed7c <HAL_PCD_MspInit+0xa0>)
 800ed3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed40:	4a0e      	ldr	r2, [pc, #56]	; (800ed7c <HAL_PCD_MspInit+0xa0>)
 800ed42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed46:	6353      	str	r3, [r2, #52]	; 0x34
 800ed48:	2300      	movs	r3, #0
 800ed4a:	60fb      	str	r3, [r7, #12]
 800ed4c:	4b0b      	ldr	r3, [pc, #44]	; (800ed7c <HAL_PCD_MspInit+0xa0>)
 800ed4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed50:	4a0a      	ldr	r2, [pc, #40]	; (800ed7c <HAL_PCD_MspInit+0xa0>)
 800ed52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed56:	6453      	str	r3, [r2, #68]	; 0x44
 800ed58:	4b08      	ldr	r3, [pc, #32]	; (800ed7c <HAL_PCD_MspInit+0xa0>)
 800ed5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed60:	60fb      	str	r3, [r7, #12]
 800ed62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ed64:	2200      	movs	r2, #0
 800ed66:	2105      	movs	r1, #5
 800ed68:	2043      	movs	r0, #67	; 0x43
 800ed6a:	f7f5 f97a 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed6e:	2043      	movs	r0, #67	; 0x43
 800ed70:	f7f5 f993 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed74:	bf00      	nop
 800ed76:	3728      	adds	r7, #40	; 0x28
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	40023800 	.word	0x40023800
 800ed80:	40020000 	.word	0x40020000

0800ed84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ed98:	4619      	mov	r1, r3
 800ed9a:	4610      	mov	r0, r2
 800ed9c:	f7fb ff43 	bl	800ac26 <USBD_LL_SetupStage>
}
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	460b      	mov	r3, r1
 800edb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800edba:	78fa      	ldrb	r2, [r7, #3]
 800edbc:	6879      	ldr	r1, [r7, #4]
 800edbe:	4613      	mov	r3, r2
 800edc0:	00db      	lsls	r3, r3, #3
 800edc2:	4413      	add	r3, r2
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	440b      	add	r3, r1
 800edc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	78fb      	ldrb	r3, [r7, #3]
 800edd0:	4619      	mov	r1, r3
 800edd2:	f7fb ff7d 	bl	800acd0 <USBD_LL_DataOutStage>
}
 800edd6:	bf00      	nop
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b082      	sub	sp, #8
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	460b      	mov	r3, r1
 800ede8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800edf0:	78fa      	ldrb	r2, [r7, #3]
 800edf2:	6879      	ldr	r1, [r7, #4]
 800edf4:	4613      	mov	r3, r2
 800edf6:	00db      	lsls	r3, r3, #3
 800edf8:	4413      	add	r3, r2
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	440b      	add	r3, r1
 800edfe:	334c      	adds	r3, #76	; 0x4c
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	78fb      	ldrb	r3, [r7, #3]
 800ee04:	4619      	mov	r1, r3
 800ee06:	f7fc f816 	bl	800ae36 <USBD_LL_DataInStage>
}
 800ee0a:	bf00      	nop
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b082      	sub	sp, #8
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fc f94a 	bl	800b0ba <USBD_LL_SOF>
}
 800ee26:	bf00      	nop
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b084      	sub	sp, #16
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee36:	2301      	movs	r3, #1
 800ee38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	d001      	beq.n	800ee46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee42:	f7f2 ffbd 	bl	8001dc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee4c:	7bfa      	ldrb	r2, [r7, #15]
 800ee4e:	4611      	mov	r1, r2
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fc f8f4 	bl	800b03e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fc f89c 	bl	800af9a <USBD_LL_Reset>
}
 800ee62:	bf00      	nop
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
	...

0800ee6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fc f8ef 	bl	800b05e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	6812      	ldr	r2, [r2, #0]
 800ee8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee92:	f043 0301 	orr.w	r3, r3, #1
 800ee96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6a1b      	ldr	r3, [r3, #32]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d005      	beq.n	800eeac <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eea0:	4b04      	ldr	r3, [pc, #16]	; (800eeb4 <HAL_PCD_SuspendCallback+0x48>)
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	4a03      	ldr	r2, [pc, #12]	; (800eeb4 <HAL_PCD_SuspendCallback+0x48>)
 800eea6:	f043 0306 	orr.w	r3, r3, #6
 800eeaa:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	e000ed00 	.word	0xe000ed00

0800eeb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fc f8df 	bl	800b08a <USBD_LL_Resume>
}
 800eecc:	bf00      	nop
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	460b      	mov	r3, r1
 800eede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eee6:	78fa      	ldrb	r2, [r7, #3]
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fc f937 	bl	800b15e <USBD_LL_IsoOUTIncomplete>
}
 800eef0:	bf00      	nop
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	460b      	mov	r3, r1
 800ef02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef0a:	78fa      	ldrb	r2, [r7, #3]
 800ef0c:	4611      	mov	r1, r2
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7fc f8f3 	bl	800b0fa <USBD_LL_IsoINIncomplete>
}
 800ef14:	bf00      	nop
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fc f949 	bl	800b1c2 <USBD_LL_DevConnected>
}
 800ef30:	bf00      	nop
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fc f946 	bl	800b1d8 <USBD_LL_DevDisconnected>
}
 800ef4c:	bf00      	nop
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d13c      	bne.n	800efde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef64:	4a20      	ldr	r2, [pc, #128]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4a1e      	ldr	r2, [pc, #120]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef74:	4b1c      	ldr	r3, [pc, #112]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef7c:	4b1a      	ldr	r3, [pc, #104]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef7e:	2204      	movs	r2, #4
 800ef80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef82:	4b19      	ldr	r3, [pc, #100]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef84:	2202      	movs	r2, #2
 800ef86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef88:	4b17      	ldr	r3, [pc, #92]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef8e:	4b16      	ldr	r3, [pc, #88]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef90:	2202      	movs	r2, #2
 800ef92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef94:	4b14      	ldr	r3, [pc, #80]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ef9a:	4b13      	ldr	r3, [pc, #76]	; (800efe8 <USBD_LL_Init+0x94>)
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800efa0:	4b11      	ldr	r3, [pc, #68]	; (800efe8 <USBD_LL_Init+0x94>)
 800efa2:	2200      	movs	r2, #0
 800efa4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800efa6:	4b10      	ldr	r3, [pc, #64]	; (800efe8 <USBD_LL_Init+0x94>)
 800efa8:	2200      	movs	r2, #0
 800efaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800efac:	4b0e      	ldr	r3, [pc, #56]	; (800efe8 <USBD_LL_Init+0x94>)
 800efae:	2200      	movs	r2, #0
 800efb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800efb2:	480d      	ldr	r0, [pc, #52]	; (800efe8 <USBD_LL_Init+0x94>)
 800efb4:	f7f6 fbeb 	bl	800578e <HAL_PCD_Init>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d001      	beq.n	800efc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800efbe:	f7f2 feff 	bl	8001dc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800efc2:	2180      	movs	r1, #128	; 0x80
 800efc4:	4808      	ldr	r0, [pc, #32]	; (800efe8 <USBD_LL_Init+0x94>)
 800efc6:	f7f7 fe42 	bl	8006c4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800efca:	2240      	movs	r2, #64	; 0x40
 800efcc:	2100      	movs	r1, #0
 800efce:	4806      	ldr	r0, [pc, #24]	; (800efe8 <USBD_LL_Init+0x94>)
 800efd0:	f7f7 fdf6 	bl	8006bc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800efd4:	2280      	movs	r2, #128	; 0x80
 800efd6:	2101      	movs	r1, #1
 800efd8:	4803      	ldr	r0, [pc, #12]	; (800efe8 <USBD_LL_Init+0x94>)
 800efda:	f7f7 fdf1 	bl	8006bc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	20001b6c 	.word	0x20001b6c

0800efec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eff8:	2300      	movs	r3, #0
 800effa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f002:	4618      	mov	r0, r3
 800f004:	f7f6 fce0 	bl	80059c8 <HAL_PCD_Start>
 800f008:	4603      	mov	r3, r0
 800f00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 f942 	bl	800f298 <USBD_Get_USB_Status>
 800f014:	4603      	mov	r3, r0
 800f016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f018:	7bbb      	ldrb	r3, [r7, #14]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b084      	sub	sp, #16
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	4608      	mov	r0, r1
 800f02c:	4611      	mov	r1, r2
 800f02e:	461a      	mov	r2, r3
 800f030:	4603      	mov	r3, r0
 800f032:	70fb      	strb	r3, [r7, #3]
 800f034:	460b      	mov	r3, r1
 800f036:	70bb      	strb	r3, [r7, #2]
 800f038:	4613      	mov	r3, r2
 800f03a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f040:	2300      	movs	r3, #0
 800f042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f04a:	78bb      	ldrb	r3, [r7, #2]
 800f04c:	883a      	ldrh	r2, [r7, #0]
 800f04e:	78f9      	ldrb	r1, [r7, #3]
 800f050:	f7f7 f9b1 	bl	80063b6 <HAL_PCD_EP_Open>
 800f054:	4603      	mov	r3, r0
 800f056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f058:	7bfb      	ldrb	r3, [r7, #15]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f000 f91c 	bl	800f298 <USBD_Get_USB_Status>
 800f060:	4603      	mov	r3, r0
 800f062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f064:	7bbb      	ldrb	r3, [r7, #14]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b084      	sub	sp, #16
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	460b      	mov	r3, r1
 800f078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f07a:	2300      	movs	r3, #0
 800f07c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f07e:	2300      	movs	r3, #0
 800f080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f088:	78fa      	ldrb	r2, [r7, #3]
 800f08a:	4611      	mov	r1, r2
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7f7 f9fa 	bl	8006486 <HAL_PCD_EP_Close>
 800f092:	4603      	mov	r3, r0
 800f094:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f096:	7bfb      	ldrb	r3, [r7, #15]
 800f098:	4618      	mov	r0, r3
 800f09a:	f000 f8fd 	bl	800f298 <USBD_Get_USB_Status>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0c6:	78fa      	ldrb	r2, [r7, #3]
 800f0c8:	4611      	mov	r1, r2
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f7 fad2 	bl	8006674 <HAL_PCD_EP_SetStall>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d4:	7bfb      	ldrb	r3, [r7, #15]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 f8de 	bl	800f298 <USBD_Get_USB_Status>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b084      	sub	sp, #16
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f104:	78fa      	ldrb	r2, [r7, #3]
 800f106:	4611      	mov	r1, r2
 800f108:	4618      	mov	r0, r3
 800f10a:	f7f7 fb17 	bl	800673c <HAL_PCD_EP_ClrStall>
 800f10e:	4603      	mov	r3, r0
 800f110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f112:	7bfb      	ldrb	r3, [r7, #15]
 800f114:	4618      	mov	r0, r3
 800f116:	f000 f8bf 	bl	800f298 <USBD_Get_USB_Status>
 800f11a:	4603      	mov	r3, r0
 800f11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f11e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3710      	adds	r7, #16
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	460b      	mov	r3, r1
 800f132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f13a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f13c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f140:	2b00      	cmp	r3, #0
 800f142:	da0b      	bge.n	800f15c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f144:	78fb      	ldrb	r3, [r7, #3]
 800f146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f14a:	68f9      	ldr	r1, [r7, #12]
 800f14c:	4613      	mov	r3, r2
 800f14e:	00db      	lsls	r3, r3, #3
 800f150:	4413      	add	r3, r2
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	440b      	add	r3, r1
 800f156:	333e      	adds	r3, #62	; 0x3e
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	e00b      	b.n	800f174 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f15c:	78fb      	ldrb	r3, [r7, #3]
 800f15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f162:	68f9      	ldr	r1, [r7, #12]
 800f164:	4613      	mov	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	4413      	add	r3, r2
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	440b      	add	r3, r1
 800f16e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f172:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f174:	4618      	mov	r0, r3
 800f176:	3714      	adds	r7, #20
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	460b      	mov	r3, r1
 800f18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f190:	2300      	movs	r3, #0
 800f192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f19a:	78fa      	ldrb	r2, [r7, #3]
 800f19c:	4611      	mov	r1, r2
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7f7 f8e4 	bl	800636c <HAL_PCD_SetAddress>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1a8:	7bfb      	ldrb	r3, [r7, #15]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f000 f874 	bl	800f298 <USBD_Get_USB_Status>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b086      	sub	sp, #24
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	60f8      	str	r0, [r7, #12]
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	603b      	str	r3, [r7, #0]
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f1dc:	7af9      	ldrb	r1, [r7, #11]
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	f7f7 f9fd 	bl	80065e0 <HAL_PCD_EP_Transmit>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1ea:	7dfb      	ldrb	r3, [r7, #23]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f000 f853 	bl	800f298 <USBD_Get_USB_Status>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3718      	adds	r7, #24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	607a      	str	r2, [r7, #4]
 800f20a:	603b      	str	r3, [r7, #0]
 800f20c:	460b      	mov	r3, r1
 800f20e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f214:	2300      	movs	r3, #0
 800f216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f21e:	7af9      	ldrb	r1, [r7, #11]
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	f7f7 f979 	bl	800651a <HAL_PCD_EP_Receive>
 800f228:	4603      	mov	r3, r0
 800f22a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f22c:	7dfb      	ldrb	r3, [r7, #23]
 800f22e:	4618      	mov	r0, r3
 800f230:	f000 f832 	bl	800f298 <USBD_Get_USB_Status>
 800f234:	4603      	mov	r3, r0
 800f236:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f238:	7dbb      	ldrb	r3, [r7, #22]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3718      	adds	r7, #24
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}

0800f242 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b082      	sub	sp, #8
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
 800f24a:	460b      	mov	r3, r1
 800f24c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f254:	78fa      	ldrb	r2, [r7, #3]
 800f256:	4611      	mov	r1, r2
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f7 f9a9 	bl	80065b0 <HAL_PCD_EP_GetRxCount>
 800f25e:	4603      	mov	r3, r0
}
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f270:	4b03      	ldr	r3, [pc, #12]	; (800f280 <USBD_static_malloc+0x18>)
}
 800f272:	4618      	mov	r0, r3
 800f274:	370c      	adds	r7, #12
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	20002078 	.word	0x20002078

0800f284 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]

}
 800f28c:	bf00      	nop
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2a6:	79fb      	ldrb	r3, [r7, #7]
 800f2a8:	2b03      	cmp	r3, #3
 800f2aa:	d817      	bhi.n	800f2dc <USBD_Get_USB_Status+0x44>
 800f2ac:	a201      	add	r2, pc, #4	; (adr r2, 800f2b4 <USBD_Get_USB_Status+0x1c>)
 800f2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b2:	bf00      	nop
 800f2b4:	0800f2c5 	.word	0x0800f2c5
 800f2b8:	0800f2cb 	.word	0x0800f2cb
 800f2bc:	0800f2d1 	.word	0x0800f2d1
 800f2c0:	0800f2d7 	.word	0x0800f2d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c8:	e00b      	b.n	800f2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2ca:	2303      	movs	r3, #3
 800f2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ce:	e008      	b.n	800f2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d4:	e005      	b.n	800f2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f2da:	e002      	b.n	800f2e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2dc:	2303      	movs	r3, #3
 800f2de:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e0:	bf00      	nop
  }
  return usb_status;
 800f2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3714      	adds	r7, #20
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <malloc>:
 800f2f0:	4b02      	ldr	r3, [pc, #8]	; (800f2fc <malloc+0xc>)
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	6818      	ldr	r0, [r3, #0]
 800f2f6:	f000 b82b 	b.w	800f350 <_malloc_r>
 800f2fa:	bf00      	nop
 800f2fc:	20000178 	.word	0x20000178

0800f300 <free>:
 800f300:	4b02      	ldr	r3, [pc, #8]	; (800f30c <free+0xc>)
 800f302:	4601      	mov	r1, r0
 800f304:	6818      	ldr	r0, [r3, #0]
 800f306:	f001 bd4d 	b.w	8010da4 <_free_r>
 800f30a:	bf00      	nop
 800f30c:	20000178 	.word	0x20000178

0800f310 <sbrk_aligned>:
 800f310:	b570      	push	{r4, r5, r6, lr}
 800f312:	4e0e      	ldr	r6, [pc, #56]	; (800f34c <sbrk_aligned+0x3c>)
 800f314:	460c      	mov	r4, r1
 800f316:	6831      	ldr	r1, [r6, #0]
 800f318:	4605      	mov	r5, r0
 800f31a:	b911      	cbnz	r1, 800f322 <sbrk_aligned+0x12>
 800f31c:	f000 fe6c 	bl	800fff8 <_sbrk_r>
 800f320:	6030      	str	r0, [r6, #0]
 800f322:	4621      	mov	r1, r4
 800f324:	4628      	mov	r0, r5
 800f326:	f000 fe67 	bl	800fff8 <_sbrk_r>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	d00a      	beq.n	800f344 <sbrk_aligned+0x34>
 800f32e:	1cc4      	adds	r4, r0, #3
 800f330:	f024 0403 	bic.w	r4, r4, #3
 800f334:	42a0      	cmp	r0, r4
 800f336:	d007      	beq.n	800f348 <sbrk_aligned+0x38>
 800f338:	1a21      	subs	r1, r4, r0
 800f33a:	4628      	mov	r0, r5
 800f33c:	f000 fe5c 	bl	800fff8 <_sbrk_r>
 800f340:	3001      	adds	r0, #1
 800f342:	d101      	bne.n	800f348 <sbrk_aligned+0x38>
 800f344:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f348:	4620      	mov	r0, r4
 800f34a:	bd70      	pop	{r4, r5, r6, pc}
 800f34c:	2000229c 	.word	0x2000229c

0800f350 <_malloc_r>:
 800f350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f354:	1ccd      	adds	r5, r1, #3
 800f356:	f025 0503 	bic.w	r5, r5, #3
 800f35a:	3508      	adds	r5, #8
 800f35c:	2d0c      	cmp	r5, #12
 800f35e:	bf38      	it	cc
 800f360:	250c      	movcc	r5, #12
 800f362:	2d00      	cmp	r5, #0
 800f364:	4607      	mov	r7, r0
 800f366:	db01      	blt.n	800f36c <_malloc_r+0x1c>
 800f368:	42a9      	cmp	r1, r5
 800f36a:	d905      	bls.n	800f378 <_malloc_r+0x28>
 800f36c:	230c      	movs	r3, #12
 800f36e:	603b      	str	r3, [r7, #0]
 800f370:	2600      	movs	r6, #0
 800f372:	4630      	mov	r0, r6
 800f374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f378:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f44c <_malloc_r+0xfc>
 800f37c:	f000 f868 	bl	800f450 <__malloc_lock>
 800f380:	f8d8 3000 	ldr.w	r3, [r8]
 800f384:	461c      	mov	r4, r3
 800f386:	bb5c      	cbnz	r4, 800f3e0 <_malloc_r+0x90>
 800f388:	4629      	mov	r1, r5
 800f38a:	4638      	mov	r0, r7
 800f38c:	f7ff ffc0 	bl	800f310 <sbrk_aligned>
 800f390:	1c43      	adds	r3, r0, #1
 800f392:	4604      	mov	r4, r0
 800f394:	d155      	bne.n	800f442 <_malloc_r+0xf2>
 800f396:	f8d8 4000 	ldr.w	r4, [r8]
 800f39a:	4626      	mov	r6, r4
 800f39c:	2e00      	cmp	r6, #0
 800f39e:	d145      	bne.n	800f42c <_malloc_r+0xdc>
 800f3a0:	2c00      	cmp	r4, #0
 800f3a2:	d048      	beq.n	800f436 <_malloc_r+0xe6>
 800f3a4:	6823      	ldr	r3, [r4, #0]
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4638      	mov	r0, r7
 800f3aa:	eb04 0903 	add.w	r9, r4, r3
 800f3ae:	f000 fe23 	bl	800fff8 <_sbrk_r>
 800f3b2:	4581      	cmp	r9, r0
 800f3b4:	d13f      	bne.n	800f436 <_malloc_r+0xe6>
 800f3b6:	6821      	ldr	r1, [r4, #0]
 800f3b8:	1a6d      	subs	r5, r5, r1
 800f3ba:	4629      	mov	r1, r5
 800f3bc:	4638      	mov	r0, r7
 800f3be:	f7ff ffa7 	bl	800f310 <sbrk_aligned>
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	d037      	beq.n	800f436 <_malloc_r+0xe6>
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	442b      	add	r3, r5
 800f3ca:	6023      	str	r3, [r4, #0]
 800f3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d038      	beq.n	800f446 <_malloc_r+0xf6>
 800f3d4:	685a      	ldr	r2, [r3, #4]
 800f3d6:	42a2      	cmp	r2, r4
 800f3d8:	d12b      	bne.n	800f432 <_malloc_r+0xe2>
 800f3da:	2200      	movs	r2, #0
 800f3dc:	605a      	str	r2, [r3, #4]
 800f3de:	e00f      	b.n	800f400 <_malloc_r+0xb0>
 800f3e0:	6822      	ldr	r2, [r4, #0]
 800f3e2:	1b52      	subs	r2, r2, r5
 800f3e4:	d41f      	bmi.n	800f426 <_malloc_r+0xd6>
 800f3e6:	2a0b      	cmp	r2, #11
 800f3e8:	d917      	bls.n	800f41a <_malloc_r+0xca>
 800f3ea:	1961      	adds	r1, r4, r5
 800f3ec:	42a3      	cmp	r3, r4
 800f3ee:	6025      	str	r5, [r4, #0]
 800f3f0:	bf18      	it	ne
 800f3f2:	6059      	strne	r1, [r3, #4]
 800f3f4:	6863      	ldr	r3, [r4, #4]
 800f3f6:	bf08      	it	eq
 800f3f8:	f8c8 1000 	streq.w	r1, [r8]
 800f3fc:	5162      	str	r2, [r4, r5]
 800f3fe:	604b      	str	r3, [r1, #4]
 800f400:	4638      	mov	r0, r7
 800f402:	f104 060b 	add.w	r6, r4, #11
 800f406:	f000 f829 	bl	800f45c <__malloc_unlock>
 800f40a:	f026 0607 	bic.w	r6, r6, #7
 800f40e:	1d23      	adds	r3, r4, #4
 800f410:	1af2      	subs	r2, r6, r3
 800f412:	d0ae      	beq.n	800f372 <_malloc_r+0x22>
 800f414:	1b9b      	subs	r3, r3, r6
 800f416:	50a3      	str	r3, [r4, r2]
 800f418:	e7ab      	b.n	800f372 <_malloc_r+0x22>
 800f41a:	42a3      	cmp	r3, r4
 800f41c:	6862      	ldr	r2, [r4, #4]
 800f41e:	d1dd      	bne.n	800f3dc <_malloc_r+0x8c>
 800f420:	f8c8 2000 	str.w	r2, [r8]
 800f424:	e7ec      	b.n	800f400 <_malloc_r+0xb0>
 800f426:	4623      	mov	r3, r4
 800f428:	6864      	ldr	r4, [r4, #4]
 800f42a:	e7ac      	b.n	800f386 <_malloc_r+0x36>
 800f42c:	4634      	mov	r4, r6
 800f42e:	6876      	ldr	r6, [r6, #4]
 800f430:	e7b4      	b.n	800f39c <_malloc_r+0x4c>
 800f432:	4613      	mov	r3, r2
 800f434:	e7cc      	b.n	800f3d0 <_malloc_r+0x80>
 800f436:	230c      	movs	r3, #12
 800f438:	603b      	str	r3, [r7, #0]
 800f43a:	4638      	mov	r0, r7
 800f43c:	f000 f80e 	bl	800f45c <__malloc_unlock>
 800f440:	e797      	b.n	800f372 <_malloc_r+0x22>
 800f442:	6025      	str	r5, [r4, #0]
 800f444:	e7dc      	b.n	800f400 <_malloc_r+0xb0>
 800f446:	605b      	str	r3, [r3, #4]
 800f448:	deff      	udf	#255	; 0xff
 800f44a:	bf00      	nop
 800f44c:	20002298 	.word	0x20002298

0800f450 <__malloc_lock>:
 800f450:	4801      	ldr	r0, [pc, #4]	; (800f458 <__malloc_lock+0x8>)
 800f452:	f000 be1d 	b.w	8010090 <__retarget_lock_acquire_recursive>
 800f456:	bf00      	nop
 800f458:	200023e0 	.word	0x200023e0

0800f45c <__malloc_unlock>:
 800f45c:	4801      	ldr	r0, [pc, #4]	; (800f464 <__malloc_unlock+0x8>)
 800f45e:	f000 be18 	b.w	8010092 <__retarget_lock_release_recursive>
 800f462:	bf00      	nop
 800f464:	200023e0 	.word	0x200023e0

0800f468 <__cvt>:
 800f468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f46c:	ec55 4b10 	vmov	r4, r5, d0
 800f470:	2d00      	cmp	r5, #0
 800f472:	460e      	mov	r6, r1
 800f474:	4619      	mov	r1, r3
 800f476:	462b      	mov	r3, r5
 800f478:	bfbb      	ittet	lt
 800f47a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f47e:	461d      	movlt	r5, r3
 800f480:	2300      	movge	r3, #0
 800f482:	232d      	movlt	r3, #45	; 0x2d
 800f484:	700b      	strb	r3, [r1, #0]
 800f486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f488:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f48c:	4691      	mov	r9, r2
 800f48e:	f023 0820 	bic.w	r8, r3, #32
 800f492:	bfbc      	itt	lt
 800f494:	4622      	movlt	r2, r4
 800f496:	4614      	movlt	r4, r2
 800f498:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f49c:	d005      	beq.n	800f4aa <__cvt+0x42>
 800f49e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f4a2:	d100      	bne.n	800f4a6 <__cvt+0x3e>
 800f4a4:	3601      	adds	r6, #1
 800f4a6:	2102      	movs	r1, #2
 800f4a8:	e000      	b.n	800f4ac <__cvt+0x44>
 800f4aa:	2103      	movs	r1, #3
 800f4ac:	ab03      	add	r3, sp, #12
 800f4ae:	9301      	str	r3, [sp, #4]
 800f4b0:	ab02      	add	r3, sp, #8
 800f4b2:	9300      	str	r3, [sp, #0]
 800f4b4:	ec45 4b10 	vmov	d0, r4, r5
 800f4b8:	4653      	mov	r3, sl
 800f4ba:	4632      	mov	r2, r6
 800f4bc:	f000 fe80 	bl	80101c0 <_dtoa_r>
 800f4c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f4c4:	4607      	mov	r7, r0
 800f4c6:	d102      	bne.n	800f4ce <__cvt+0x66>
 800f4c8:	f019 0f01 	tst.w	r9, #1
 800f4cc:	d022      	beq.n	800f514 <__cvt+0xac>
 800f4ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f4d2:	eb07 0906 	add.w	r9, r7, r6
 800f4d6:	d110      	bne.n	800f4fa <__cvt+0x92>
 800f4d8:	783b      	ldrb	r3, [r7, #0]
 800f4da:	2b30      	cmp	r3, #48	; 0x30
 800f4dc:	d10a      	bne.n	800f4f4 <__cvt+0x8c>
 800f4de:	2200      	movs	r2, #0
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	4629      	mov	r1, r5
 800f4e6:	f7f1 faf7 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4ea:	b918      	cbnz	r0, 800f4f4 <__cvt+0x8c>
 800f4ec:	f1c6 0601 	rsb	r6, r6, #1
 800f4f0:	f8ca 6000 	str.w	r6, [sl]
 800f4f4:	f8da 3000 	ldr.w	r3, [sl]
 800f4f8:	4499      	add	r9, r3
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4620      	mov	r0, r4
 800f500:	4629      	mov	r1, r5
 800f502:	f7f1 fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f506:	b108      	cbz	r0, 800f50c <__cvt+0xa4>
 800f508:	f8cd 900c 	str.w	r9, [sp, #12]
 800f50c:	2230      	movs	r2, #48	; 0x30
 800f50e:	9b03      	ldr	r3, [sp, #12]
 800f510:	454b      	cmp	r3, r9
 800f512:	d307      	bcc.n	800f524 <__cvt+0xbc>
 800f514:	9b03      	ldr	r3, [sp, #12]
 800f516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f518:	1bdb      	subs	r3, r3, r7
 800f51a:	4638      	mov	r0, r7
 800f51c:	6013      	str	r3, [r2, #0]
 800f51e:	b004      	add	sp, #16
 800f520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f524:	1c59      	adds	r1, r3, #1
 800f526:	9103      	str	r1, [sp, #12]
 800f528:	701a      	strb	r2, [r3, #0]
 800f52a:	e7f0      	b.n	800f50e <__cvt+0xa6>

0800f52c <__exponent>:
 800f52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f52e:	4603      	mov	r3, r0
 800f530:	2900      	cmp	r1, #0
 800f532:	bfb8      	it	lt
 800f534:	4249      	neglt	r1, r1
 800f536:	f803 2b02 	strb.w	r2, [r3], #2
 800f53a:	bfb4      	ite	lt
 800f53c:	222d      	movlt	r2, #45	; 0x2d
 800f53e:	222b      	movge	r2, #43	; 0x2b
 800f540:	2909      	cmp	r1, #9
 800f542:	7042      	strb	r2, [r0, #1]
 800f544:	dd2a      	ble.n	800f59c <__exponent+0x70>
 800f546:	f10d 0207 	add.w	r2, sp, #7
 800f54a:	4617      	mov	r7, r2
 800f54c:	260a      	movs	r6, #10
 800f54e:	4694      	mov	ip, r2
 800f550:	fb91 f5f6 	sdiv	r5, r1, r6
 800f554:	fb06 1415 	mls	r4, r6, r5, r1
 800f558:	3430      	adds	r4, #48	; 0x30
 800f55a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f55e:	460c      	mov	r4, r1
 800f560:	2c63      	cmp	r4, #99	; 0x63
 800f562:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f566:	4629      	mov	r1, r5
 800f568:	dcf1      	bgt.n	800f54e <__exponent+0x22>
 800f56a:	3130      	adds	r1, #48	; 0x30
 800f56c:	f1ac 0402 	sub.w	r4, ip, #2
 800f570:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f574:	1c41      	adds	r1, r0, #1
 800f576:	4622      	mov	r2, r4
 800f578:	42ba      	cmp	r2, r7
 800f57a:	d30a      	bcc.n	800f592 <__exponent+0x66>
 800f57c:	f10d 0209 	add.w	r2, sp, #9
 800f580:	eba2 020c 	sub.w	r2, r2, ip
 800f584:	42bc      	cmp	r4, r7
 800f586:	bf88      	it	hi
 800f588:	2200      	movhi	r2, #0
 800f58a:	4413      	add	r3, r2
 800f58c:	1a18      	subs	r0, r3, r0
 800f58e:	b003      	add	sp, #12
 800f590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f592:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f596:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f59a:	e7ed      	b.n	800f578 <__exponent+0x4c>
 800f59c:	2330      	movs	r3, #48	; 0x30
 800f59e:	3130      	adds	r1, #48	; 0x30
 800f5a0:	7083      	strb	r3, [r0, #2]
 800f5a2:	70c1      	strb	r1, [r0, #3]
 800f5a4:	1d03      	adds	r3, r0, #4
 800f5a6:	e7f1      	b.n	800f58c <__exponent+0x60>

0800f5a8 <_printf_float>:
 800f5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ac:	ed2d 8b02 	vpush	{d8}
 800f5b0:	b08d      	sub	sp, #52	; 0x34
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f5b8:	4616      	mov	r6, r2
 800f5ba:	461f      	mov	r7, r3
 800f5bc:	4605      	mov	r5, r0
 800f5be:	f000 fce3 	bl	800ff88 <_localeconv_r>
 800f5c2:	f8d0 a000 	ldr.w	sl, [r0]
 800f5c6:	4650      	mov	r0, sl
 800f5c8:	f7f0 fe5a 	bl	8000280 <strlen>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f5d0:	6823      	ldr	r3, [r4, #0]
 800f5d2:	9305      	str	r3, [sp, #20]
 800f5d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f5d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f5dc:	3307      	adds	r3, #7
 800f5de:	f023 0307 	bic.w	r3, r3, #7
 800f5e2:	f103 0208 	add.w	r2, r3, #8
 800f5e6:	f8c8 2000 	str.w	r2, [r8]
 800f5ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5f2:	9307      	str	r3, [sp, #28]
 800f5f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5f8:	ee08 0a10 	vmov	s16, r0
 800f5fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f604:	4b9e      	ldr	r3, [pc, #632]	; (800f880 <_printf_float+0x2d8>)
 800f606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f60a:	f7f1 fa97 	bl	8000b3c <__aeabi_dcmpun>
 800f60e:	bb88      	cbnz	r0, 800f674 <_printf_float+0xcc>
 800f610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f614:	4b9a      	ldr	r3, [pc, #616]	; (800f880 <_printf_float+0x2d8>)
 800f616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f61a:	f7f1 fa71 	bl	8000b00 <__aeabi_dcmple>
 800f61e:	bb48      	cbnz	r0, 800f674 <_printf_float+0xcc>
 800f620:	2200      	movs	r2, #0
 800f622:	2300      	movs	r3, #0
 800f624:	4640      	mov	r0, r8
 800f626:	4649      	mov	r1, r9
 800f628:	f7f1 fa60 	bl	8000aec <__aeabi_dcmplt>
 800f62c:	b110      	cbz	r0, 800f634 <_printf_float+0x8c>
 800f62e:	232d      	movs	r3, #45	; 0x2d
 800f630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f634:	4a93      	ldr	r2, [pc, #588]	; (800f884 <_printf_float+0x2dc>)
 800f636:	4b94      	ldr	r3, [pc, #592]	; (800f888 <_printf_float+0x2e0>)
 800f638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f63c:	bf94      	ite	ls
 800f63e:	4690      	movls	r8, r2
 800f640:	4698      	movhi	r8, r3
 800f642:	2303      	movs	r3, #3
 800f644:	6123      	str	r3, [r4, #16]
 800f646:	9b05      	ldr	r3, [sp, #20]
 800f648:	f023 0304 	bic.w	r3, r3, #4
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	f04f 0900 	mov.w	r9, #0
 800f652:	9700      	str	r7, [sp, #0]
 800f654:	4633      	mov	r3, r6
 800f656:	aa0b      	add	r2, sp, #44	; 0x2c
 800f658:	4621      	mov	r1, r4
 800f65a:	4628      	mov	r0, r5
 800f65c:	f000 f9da 	bl	800fa14 <_printf_common>
 800f660:	3001      	adds	r0, #1
 800f662:	f040 8090 	bne.w	800f786 <_printf_float+0x1de>
 800f666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f66a:	b00d      	add	sp, #52	; 0x34
 800f66c:	ecbd 8b02 	vpop	{d8}
 800f670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f674:	4642      	mov	r2, r8
 800f676:	464b      	mov	r3, r9
 800f678:	4640      	mov	r0, r8
 800f67a:	4649      	mov	r1, r9
 800f67c:	f7f1 fa5e 	bl	8000b3c <__aeabi_dcmpun>
 800f680:	b140      	cbz	r0, 800f694 <_printf_float+0xec>
 800f682:	464b      	mov	r3, r9
 800f684:	2b00      	cmp	r3, #0
 800f686:	bfbc      	itt	lt
 800f688:	232d      	movlt	r3, #45	; 0x2d
 800f68a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f68e:	4a7f      	ldr	r2, [pc, #508]	; (800f88c <_printf_float+0x2e4>)
 800f690:	4b7f      	ldr	r3, [pc, #508]	; (800f890 <_printf_float+0x2e8>)
 800f692:	e7d1      	b.n	800f638 <_printf_float+0x90>
 800f694:	6863      	ldr	r3, [r4, #4]
 800f696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f69a:	9206      	str	r2, [sp, #24]
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	d13f      	bne.n	800f720 <_printf_float+0x178>
 800f6a0:	2306      	movs	r3, #6
 800f6a2:	6063      	str	r3, [r4, #4]
 800f6a4:	9b05      	ldr	r3, [sp, #20]
 800f6a6:	6861      	ldr	r1, [r4, #4]
 800f6a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	9303      	str	r3, [sp, #12]
 800f6b0:	ab0a      	add	r3, sp, #40	; 0x28
 800f6b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f6b6:	ab09      	add	r3, sp, #36	; 0x24
 800f6b8:	ec49 8b10 	vmov	d0, r8, r9
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	6022      	str	r2, [r4, #0]
 800f6c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f7ff fecf 	bl	800f468 <__cvt>
 800f6ca:	9b06      	ldr	r3, [sp, #24]
 800f6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6ce:	2b47      	cmp	r3, #71	; 0x47
 800f6d0:	4680      	mov	r8, r0
 800f6d2:	d108      	bne.n	800f6e6 <_printf_float+0x13e>
 800f6d4:	1cc8      	adds	r0, r1, #3
 800f6d6:	db02      	blt.n	800f6de <_printf_float+0x136>
 800f6d8:	6863      	ldr	r3, [r4, #4]
 800f6da:	4299      	cmp	r1, r3
 800f6dc:	dd41      	ble.n	800f762 <_printf_float+0x1ba>
 800f6de:	f1ab 0302 	sub.w	r3, fp, #2
 800f6e2:	fa5f fb83 	uxtb.w	fp, r3
 800f6e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6ea:	d820      	bhi.n	800f72e <_printf_float+0x186>
 800f6ec:	3901      	subs	r1, #1
 800f6ee:	465a      	mov	r2, fp
 800f6f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6f4:	9109      	str	r1, [sp, #36]	; 0x24
 800f6f6:	f7ff ff19 	bl	800f52c <__exponent>
 800f6fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6fc:	1813      	adds	r3, r2, r0
 800f6fe:	2a01      	cmp	r2, #1
 800f700:	4681      	mov	r9, r0
 800f702:	6123      	str	r3, [r4, #16]
 800f704:	dc02      	bgt.n	800f70c <_printf_float+0x164>
 800f706:	6822      	ldr	r2, [r4, #0]
 800f708:	07d2      	lsls	r2, r2, #31
 800f70a:	d501      	bpl.n	800f710 <_printf_float+0x168>
 800f70c:	3301      	adds	r3, #1
 800f70e:	6123      	str	r3, [r4, #16]
 800f710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f714:	2b00      	cmp	r3, #0
 800f716:	d09c      	beq.n	800f652 <_printf_float+0xaa>
 800f718:	232d      	movs	r3, #45	; 0x2d
 800f71a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f71e:	e798      	b.n	800f652 <_printf_float+0xaa>
 800f720:	9a06      	ldr	r2, [sp, #24]
 800f722:	2a47      	cmp	r2, #71	; 0x47
 800f724:	d1be      	bne.n	800f6a4 <_printf_float+0xfc>
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1bc      	bne.n	800f6a4 <_printf_float+0xfc>
 800f72a:	2301      	movs	r3, #1
 800f72c:	e7b9      	b.n	800f6a2 <_printf_float+0xfa>
 800f72e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f732:	d118      	bne.n	800f766 <_printf_float+0x1be>
 800f734:	2900      	cmp	r1, #0
 800f736:	6863      	ldr	r3, [r4, #4]
 800f738:	dd0b      	ble.n	800f752 <_printf_float+0x1aa>
 800f73a:	6121      	str	r1, [r4, #16]
 800f73c:	b913      	cbnz	r3, 800f744 <_printf_float+0x19c>
 800f73e:	6822      	ldr	r2, [r4, #0]
 800f740:	07d0      	lsls	r0, r2, #31
 800f742:	d502      	bpl.n	800f74a <_printf_float+0x1a2>
 800f744:	3301      	adds	r3, #1
 800f746:	440b      	add	r3, r1
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f74c:	f04f 0900 	mov.w	r9, #0
 800f750:	e7de      	b.n	800f710 <_printf_float+0x168>
 800f752:	b913      	cbnz	r3, 800f75a <_printf_float+0x1b2>
 800f754:	6822      	ldr	r2, [r4, #0]
 800f756:	07d2      	lsls	r2, r2, #31
 800f758:	d501      	bpl.n	800f75e <_printf_float+0x1b6>
 800f75a:	3302      	adds	r3, #2
 800f75c:	e7f4      	b.n	800f748 <_printf_float+0x1a0>
 800f75e:	2301      	movs	r3, #1
 800f760:	e7f2      	b.n	800f748 <_printf_float+0x1a0>
 800f762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f768:	4299      	cmp	r1, r3
 800f76a:	db05      	blt.n	800f778 <_printf_float+0x1d0>
 800f76c:	6823      	ldr	r3, [r4, #0]
 800f76e:	6121      	str	r1, [r4, #16]
 800f770:	07d8      	lsls	r0, r3, #31
 800f772:	d5ea      	bpl.n	800f74a <_printf_float+0x1a2>
 800f774:	1c4b      	adds	r3, r1, #1
 800f776:	e7e7      	b.n	800f748 <_printf_float+0x1a0>
 800f778:	2900      	cmp	r1, #0
 800f77a:	bfd4      	ite	le
 800f77c:	f1c1 0202 	rsble	r2, r1, #2
 800f780:	2201      	movgt	r2, #1
 800f782:	4413      	add	r3, r2
 800f784:	e7e0      	b.n	800f748 <_printf_float+0x1a0>
 800f786:	6823      	ldr	r3, [r4, #0]
 800f788:	055a      	lsls	r2, r3, #21
 800f78a:	d407      	bmi.n	800f79c <_printf_float+0x1f4>
 800f78c:	6923      	ldr	r3, [r4, #16]
 800f78e:	4642      	mov	r2, r8
 800f790:	4631      	mov	r1, r6
 800f792:	4628      	mov	r0, r5
 800f794:	47b8      	blx	r7
 800f796:	3001      	adds	r0, #1
 800f798:	d12c      	bne.n	800f7f4 <_printf_float+0x24c>
 800f79a:	e764      	b.n	800f666 <_printf_float+0xbe>
 800f79c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f7a0:	f240 80e0 	bls.w	800f964 <_printf_float+0x3bc>
 800f7a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f7f1 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d034      	beq.n	800f81e <_printf_float+0x276>
 800f7b4:	4a37      	ldr	r2, [pc, #220]	; (800f894 <_printf_float+0x2ec>)
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	4631      	mov	r1, r6
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	47b8      	blx	r7
 800f7be:	3001      	adds	r0, #1
 800f7c0:	f43f af51 	beq.w	800f666 <_printf_float+0xbe>
 800f7c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	db02      	blt.n	800f7d2 <_printf_float+0x22a>
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	07d8      	lsls	r0, r3, #31
 800f7d0:	d510      	bpl.n	800f7f4 <_printf_float+0x24c>
 800f7d2:	ee18 3a10 	vmov	r3, s16
 800f7d6:	4652      	mov	r2, sl
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4628      	mov	r0, r5
 800f7dc:	47b8      	blx	r7
 800f7de:	3001      	adds	r0, #1
 800f7e0:	f43f af41 	beq.w	800f666 <_printf_float+0xbe>
 800f7e4:	f04f 0800 	mov.w	r8, #0
 800f7e8:	f104 091a 	add.w	r9, r4, #26
 800f7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	4543      	cmp	r3, r8
 800f7f2:	dc09      	bgt.n	800f808 <_printf_float+0x260>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	079b      	lsls	r3, r3, #30
 800f7f8:	f100 8107 	bmi.w	800fa0a <_printf_float+0x462>
 800f7fc:	68e0      	ldr	r0, [r4, #12]
 800f7fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f800:	4298      	cmp	r0, r3
 800f802:	bfb8      	it	lt
 800f804:	4618      	movlt	r0, r3
 800f806:	e730      	b.n	800f66a <_printf_float+0xc2>
 800f808:	2301      	movs	r3, #1
 800f80a:	464a      	mov	r2, r9
 800f80c:	4631      	mov	r1, r6
 800f80e:	4628      	mov	r0, r5
 800f810:	47b8      	blx	r7
 800f812:	3001      	adds	r0, #1
 800f814:	f43f af27 	beq.w	800f666 <_printf_float+0xbe>
 800f818:	f108 0801 	add.w	r8, r8, #1
 800f81c:	e7e6      	b.n	800f7ec <_printf_float+0x244>
 800f81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f820:	2b00      	cmp	r3, #0
 800f822:	dc39      	bgt.n	800f898 <_printf_float+0x2f0>
 800f824:	4a1b      	ldr	r2, [pc, #108]	; (800f894 <_printf_float+0x2ec>)
 800f826:	2301      	movs	r3, #1
 800f828:	4631      	mov	r1, r6
 800f82a:	4628      	mov	r0, r5
 800f82c:	47b8      	blx	r7
 800f82e:	3001      	adds	r0, #1
 800f830:	f43f af19 	beq.w	800f666 <_printf_float+0xbe>
 800f834:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f838:	4313      	orrs	r3, r2
 800f83a:	d102      	bne.n	800f842 <_printf_float+0x29a>
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	07d9      	lsls	r1, r3, #31
 800f840:	d5d8      	bpl.n	800f7f4 <_printf_float+0x24c>
 800f842:	ee18 3a10 	vmov	r3, s16
 800f846:	4652      	mov	r2, sl
 800f848:	4631      	mov	r1, r6
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b8      	blx	r7
 800f84e:	3001      	adds	r0, #1
 800f850:	f43f af09 	beq.w	800f666 <_printf_float+0xbe>
 800f854:	f04f 0900 	mov.w	r9, #0
 800f858:	f104 0a1a 	add.w	sl, r4, #26
 800f85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f85e:	425b      	negs	r3, r3
 800f860:	454b      	cmp	r3, r9
 800f862:	dc01      	bgt.n	800f868 <_printf_float+0x2c0>
 800f864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f866:	e792      	b.n	800f78e <_printf_float+0x1e6>
 800f868:	2301      	movs	r3, #1
 800f86a:	4652      	mov	r2, sl
 800f86c:	4631      	mov	r1, r6
 800f86e:	4628      	mov	r0, r5
 800f870:	47b8      	blx	r7
 800f872:	3001      	adds	r0, #1
 800f874:	f43f aef7 	beq.w	800f666 <_printf_float+0xbe>
 800f878:	f109 0901 	add.w	r9, r9, #1
 800f87c:	e7ee      	b.n	800f85c <_printf_float+0x2b4>
 800f87e:	bf00      	nop
 800f880:	7fefffff 	.word	0x7fefffff
 800f884:	0801278c 	.word	0x0801278c
 800f888:	08012790 	.word	0x08012790
 800f88c:	08012794 	.word	0x08012794
 800f890:	08012798 	.word	0x08012798
 800f894:	0801279c 	.word	0x0801279c
 800f898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f89a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f89c:	429a      	cmp	r2, r3
 800f89e:	bfa8      	it	ge
 800f8a0:	461a      	movge	r2, r3
 800f8a2:	2a00      	cmp	r2, #0
 800f8a4:	4691      	mov	r9, r2
 800f8a6:	dc37      	bgt.n	800f918 <_printf_float+0x370>
 800f8a8:	f04f 0b00 	mov.w	fp, #0
 800f8ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8b0:	f104 021a 	add.w	r2, r4, #26
 800f8b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f8b6:	9305      	str	r3, [sp, #20]
 800f8b8:	eba3 0309 	sub.w	r3, r3, r9
 800f8bc:	455b      	cmp	r3, fp
 800f8be:	dc33      	bgt.n	800f928 <_printf_float+0x380>
 800f8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	db3b      	blt.n	800f940 <_printf_float+0x398>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	07da      	lsls	r2, r3, #31
 800f8cc:	d438      	bmi.n	800f940 <_printf_float+0x398>
 800f8ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f8d2:	eba2 0903 	sub.w	r9, r2, r3
 800f8d6:	9b05      	ldr	r3, [sp, #20]
 800f8d8:	1ad2      	subs	r2, r2, r3
 800f8da:	4591      	cmp	r9, r2
 800f8dc:	bfa8      	it	ge
 800f8de:	4691      	movge	r9, r2
 800f8e0:	f1b9 0f00 	cmp.w	r9, #0
 800f8e4:	dc35      	bgt.n	800f952 <_printf_float+0x3aa>
 800f8e6:	f04f 0800 	mov.w	r8, #0
 800f8ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8ee:	f104 0a1a 	add.w	sl, r4, #26
 800f8f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8f6:	1a9b      	subs	r3, r3, r2
 800f8f8:	eba3 0309 	sub.w	r3, r3, r9
 800f8fc:	4543      	cmp	r3, r8
 800f8fe:	f77f af79 	ble.w	800f7f4 <_printf_float+0x24c>
 800f902:	2301      	movs	r3, #1
 800f904:	4652      	mov	r2, sl
 800f906:	4631      	mov	r1, r6
 800f908:	4628      	mov	r0, r5
 800f90a:	47b8      	blx	r7
 800f90c:	3001      	adds	r0, #1
 800f90e:	f43f aeaa 	beq.w	800f666 <_printf_float+0xbe>
 800f912:	f108 0801 	add.w	r8, r8, #1
 800f916:	e7ec      	b.n	800f8f2 <_printf_float+0x34a>
 800f918:	4613      	mov	r3, r2
 800f91a:	4631      	mov	r1, r6
 800f91c:	4642      	mov	r2, r8
 800f91e:	4628      	mov	r0, r5
 800f920:	47b8      	blx	r7
 800f922:	3001      	adds	r0, #1
 800f924:	d1c0      	bne.n	800f8a8 <_printf_float+0x300>
 800f926:	e69e      	b.n	800f666 <_printf_float+0xbe>
 800f928:	2301      	movs	r3, #1
 800f92a:	4631      	mov	r1, r6
 800f92c:	4628      	mov	r0, r5
 800f92e:	9205      	str	r2, [sp, #20]
 800f930:	47b8      	blx	r7
 800f932:	3001      	adds	r0, #1
 800f934:	f43f ae97 	beq.w	800f666 <_printf_float+0xbe>
 800f938:	9a05      	ldr	r2, [sp, #20]
 800f93a:	f10b 0b01 	add.w	fp, fp, #1
 800f93e:	e7b9      	b.n	800f8b4 <_printf_float+0x30c>
 800f940:	ee18 3a10 	vmov	r3, s16
 800f944:	4652      	mov	r2, sl
 800f946:	4631      	mov	r1, r6
 800f948:	4628      	mov	r0, r5
 800f94a:	47b8      	blx	r7
 800f94c:	3001      	adds	r0, #1
 800f94e:	d1be      	bne.n	800f8ce <_printf_float+0x326>
 800f950:	e689      	b.n	800f666 <_printf_float+0xbe>
 800f952:	9a05      	ldr	r2, [sp, #20]
 800f954:	464b      	mov	r3, r9
 800f956:	4442      	add	r2, r8
 800f958:	4631      	mov	r1, r6
 800f95a:	4628      	mov	r0, r5
 800f95c:	47b8      	blx	r7
 800f95e:	3001      	adds	r0, #1
 800f960:	d1c1      	bne.n	800f8e6 <_printf_float+0x33e>
 800f962:	e680      	b.n	800f666 <_printf_float+0xbe>
 800f964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f966:	2a01      	cmp	r2, #1
 800f968:	dc01      	bgt.n	800f96e <_printf_float+0x3c6>
 800f96a:	07db      	lsls	r3, r3, #31
 800f96c:	d53a      	bpl.n	800f9e4 <_printf_float+0x43c>
 800f96e:	2301      	movs	r3, #1
 800f970:	4642      	mov	r2, r8
 800f972:	4631      	mov	r1, r6
 800f974:	4628      	mov	r0, r5
 800f976:	47b8      	blx	r7
 800f978:	3001      	adds	r0, #1
 800f97a:	f43f ae74 	beq.w	800f666 <_printf_float+0xbe>
 800f97e:	ee18 3a10 	vmov	r3, s16
 800f982:	4652      	mov	r2, sl
 800f984:	4631      	mov	r1, r6
 800f986:	4628      	mov	r0, r5
 800f988:	47b8      	blx	r7
 800f98a:	3001      	adds	r0, #1
 800f98c:	f43f ae6b 	beq.w	800f666 <_printf_float+0xbe>
 800f990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f994:	2200      	movs	r2, #0
 800f996:	2300      	movs	r3, #0
 800f998:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f99c:	f7f1 f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f9a0:	b9d8      	cbnz	r0, 800f9da <_printf_float+0x432>
 800f9a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f9a6:	f108 0201 	add.w	r2, r8, #1
 800f9aa:	4631      	mov	r1, r6
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	47b8      	blx	r7
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	d10e      	bne.n	800f9d2 <_printf_float+0x42a>
 800f9b4:	e657      	b.n	800f666 <_printf_float+0xbe>
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	4652      	mov	r2, sl
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	4628      	mov	r0, r5
 800f9be:	47b8      	blx	r7
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	f43f ae50 	beq.w	800f666 <_printf_float+0xbe>
 800f9c6:	f108 0801 	add.w	r8, r8, #1
 800f9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	4543      	cmp	r3, r8
 800f9d0:	dcf1      	bgt.n	800f9b6 <_printf_float+0x40e>
 800f9d2:	464b      	mov	r3, r9
 800f9d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9d8:	e6da      	b.n	800f790 <_printf_float+0x1e8>
 800f9da:	f04f 0800 	mov.w	r8, #0
 800f9de:	f104 0a1a 	add.w	sl, r4, #26
 800f9e2:	e7f2      	b.n	800f9ca <_printf_float+0x422>
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	4642      	mov	r2, r8
 800f9e8:	e7df      	b.n	800f9aa <_printf_float+0x402>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	464a      	mov	r2, r9
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	47b8      	blx	r7
 800f9f4:	3001      	adds	r0, #1
 800f9f6:	f43f ae36 	beq.w	800f666 <_printf_float+0xbe>
 800f9fa:	f108 0801 	add.w	r8, r8, #1
 800f9fe:	68e3      	ldr	r3, [r4, #12]
 800fa00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa02:	1a5b      	subs	r3, r3, r1
 800fa04:	4543      	cmp	r3, r8
 800fa06:	dcf0      	bgt.n	800f9ea <_printf_float+0x442>
 800fa08:	e6f8      	b.n	800f7fc <_printf_float+0x254>
 800fa0a:	f04f 0800 	mov.w	r8, #0
 800fa0e:	f104 0919 	add.w	r9, r4, #25
 800fa12:	e7f4      	b.n	800f9fe <_printf_float+0x456>

0800fa14 <_printf_common>:
 800fa14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa18:	4616      	mov	r6, r2
 800fa1a:	4699      	mov	r9, r3
 800fa1c:	688a      	ldr	r2, [r1, #8]
 800fa1e:	690b      	ldr	r3, [r1, #16]
 800fa20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa24:	4293      	cmp	r3, r2
 800fa26:	bfb8      	it	lt
 800fa28:	4613      	movlt	r3, r2
 800fa2a:	6033      	str	r3, [r6, #0]
 800fa2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa30:	4607      	mov	r7, r0
 800fa32:	460c      	mov	r4, r1
 800fa34:	b10a      	cbz	r2, 800fa3a <_printf_common+0x26>
 800fa36:	3301      	adds	r3, #1
 800fa38:	6033      	str	r3, [r6, #0]
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	0699      	lsls	r1, r3, #26
 800fa3e:	bf42      	ittt	mi
 800fa40:	6833      	ldrmi	r3, [r6, #0]
 800fa42:	3302      	addmi	r3, #2
 800fa44:	6033      	strmi	r3, [r6, #0]
 800fa46:	6825      	ldr	r5, [r4, #0]
 800fa48:	f015 0506 	ands.w	r5, r5, #6
 800fa4c:	d106      	bne.n	800fa5c <_printf_common+0x48>
 800fa4e:	f104 0a19 	add.w	sl, r4, #25
 800fa52:	68e3      	ldr	r3, [r4, #12]
 800fa54:	6832      	ldr	r2, [r6, #0]
 800fa56:	1a9b      	subs	r3, r3, r2
 800fa58:	42ab      	cmp	r3, r5
 800fa5a:	dc26      	bgt.n	800faaa <_printf_common+0x96>
 800fa5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa60:	1e13      	subs	r3, r2, #0
 800fa62:	6822      	ldr	r2, [r4, #0]
 800fa64:	bf18      	it	ne
 800fa66:	2301      	movne	r3, #1
 800fa68:	0692      	lsls	r2, r2, #26
 800fa6a:	d42b      	bmi.n	800fac4 <_printf_common+0xb0>
 800fa6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa70:	4649      	mov	r1, r9
 800fa72:	4638      	mov	r0, r7
 800fa74:	47c0      	blx	r8
 800fa76:	3001      	adds	r0, #1
 800fa78:	d01e      	beq.n	800fab8 <_printf_common+0xa4>
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	6922      	ldr	r2, [r4, #16]
 800fa7e:	f003 0306 	and.w	r3, r3, #6
 800fa82:	2b04      	cmp	r3, #4
 800fa84:	bf02      	ittt	eq
 800fa86:	68e5      	ldreq	r5, [r4, #12]
 800fa88:	6833      	ldreq	r3, [r6, #0]
 800fa8a:	1aed      	subeq	r5, r5, r3
 800fa8c:	68a3      	ldr	r3, [r4, #8]
 800fa8e:	bf0c      	ite	eq
 800fa90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa94:	2500      	movne	r5, #0
 800fa96:	4293      	cmp	r3, r2
 800fa98:	bfc4      	itt	gt
 800fa9a:	1a9b      	subgt	r3, r3, r2
 800fa9c:	18ed      	addgt	r5, r5, r3
 800fa9e:	2600      	movs	r6, #0
 800faa0:	341a      	adds	r4, #26
 800faa2:	42b5      	cmp	r5, r6
 800faa4:	d11a      	bne.n	800fadc <_printf_common+0xc8>
 800faa6:	2000      	movs	r0, #0
 800faa8:	e008      	b.n	800fabc <_printf_common+0xa8>
 800faaa:	2301      	movs	r3, #1
 800faac:	4652      	mov	r2, sl
 800faae:	4649      	mov	r1, r9
 800fab0:	4638      	mov	r0, r7
 800fab2:	47c0      	blx	r8
 800fab4:	3001      	adds	r0, #1
 800fab6:	d103      	bne.n	800fac0 <_printf_common+0xac>
 800fab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac0:	3501      	adds	r5, #1
 800fac2:	e7c6      	b.n	800fa52 <_printf_common+0x3e>
 800fac4:	18e1      	adds	r1, r4, r3
 800fac6:	1c5a      	adds	r2, r3, #1
 800fac8:	2030      	movs	r0, #48	; 0x30
 800faca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800face:	4422      	add	r2, r4
 800fad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fad8:	3302      	adds	r3, #2
 800fada:	e7c7      	b.n	800fa6c <_printf_common+0x58>
 800fadc:	2301      	movs	r3, #1
 800fade:	4622      	mov	r2, r4
 800fae0:	4649      	mov	r1, r9
 800fae2:	4638      	mov	r0, r7
 800fae4:	47c0      	blx	r8
 800fae6:	3001      	adds	r0, #1
 800fae8:	d0e6      	beq.n	800fab8 <_printf_common+0xa4>
 800faea:	3601      	adds	r6, #1
 800faec:	e7d9      	b.n	800faa2 <_printf_common+0x8e>
	...

0800faf0 <_printf_i>:
 800faf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800faf4:	7e0f      	ldrb	r7, [r1, #24]
 800faf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800faf8:	2f78      	cmp	r7, #120	; 0x78
 800fafa:	4691      	mov	r9, r2
 800fafc:	4680      	mov	r8, r0
 800fafe:	460c      	mov	r4, r1
 800fb00:	469a      	mov	sl, r3
 800fb02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb06:	d807      	bhi.n	800fb18 <_printf_i+0x28>
 800fb08:	2f62      	cmp	r7, #98	; 0x62
 800fb0a:	d80a      	bhi.n	800fb22 <_printf_i+0x32>
 800fb0c:	2f00      	cmp	r7, #0
 800fb0e:	f000 80d4 	beq.w	800fcba <_printf_i+0x1ca>
 800fb12:	2f58      	cmp	r7, #88	; 0x58
 800fb14:	f000 80c0 	beq.w	800fc98 <_printf_i+0x1a8>
 800fb18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb20:	e03a      	b.n	800fb98 <_printf_i+0xa8>
 800fb22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb26:	2b15      	cmp	r3, #21
 800fb28:	d8f6      	bhi.n	800fb18 <_printf_i+0x28>
 800fb2a:	a101      	add	r1, pc, #4	; (adr r1, 800fb30 <_printf_i+0x40>)
 800fb2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb30:	0800fb89 	.word	0x0800fb89
 800fb34:	0800fb9d 	.word	0x0800fb9d
 800fb38:	0800fb19 	.word	0x0800fb19
 800fb3c:	0800fb19 	.word	0x0800fb19
 800fb40:	0800fb19 	.word	0x0800fb19
 800fb44:	0800fb19 	.word	0x0800fb19
 800fb48:	0800fb9d 	.word	0x0800fb9d
 800fb4c:	0800fb19 	.word	0x0800fb19
 800fb50:	0800fb19 	.word	0x0800fb19
 800fb54:	0800fb19 	.word	0x0800fb19
 800fb58:	0800fb19 	.word	0x0800fb19
 800fb5c:	0800fca1 	.word	0x0800fca1
 800fb60:	0800fbc9 	.word	0x0800fbc9
 800fb64:	0800fc5b 	.word	0x0800fc5b
 800fb68:	0800fb19 	.word	0x0800fb19
 800fb6c:	0800fb19 	.word	0x0800fb19
 800fb70:	0800fcc3 	.word	0x0800fcc3
 800fb74:	0800fb19 	.word	0x0800fb19
 800fb78:	0800fbc9 	.word	0x0800fbc9
 800fb7c:	0800fb19 	.word	0x0800fb19
 800fb80:	0800fb19 	.word	0x0800fb19
 800fb84:	0800fc63 	.word	0x0800fc63
 800fb88:	682b      	ldr	r3, [r5, #0]
 800fb8a:	1d1a      	adds	r2, r3, #4
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	602a      	str	r2, [r5, #0]
 800fb90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb98:	2301      	movs	r3, #1
 800fb9a:	e09f      	b.n	800fcdc <_printf_i+0x1ec>
 800fb9c:	6820      	ldr	r0, [r4, #0]
 800fb9e:	682b      	ldr	r3, [r5, #0]
 800fba0:	0607      	lsls	r7, r0, #24
 800fba2:	f103 0104 	add.w	r1, r3, #4
 800fba6:	6029      	str	r1, [r5, #0]
 800fba8:	d501      	bpl.n	800fbae <_printf_i+0xbe>
 800fbaa:	681e      	ldr	r6, [r3, #0]
 800fbac:	e003      	b.n	800fbb6 <_printf_i+0xc6>
 800fbae:	0646      	lsls	r6, r0, #25
 800fbb0:	d5fb      	bpl.n	800fbaa <_printf_i+0xba>
 800fbb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fbb6:	2e00      	cmp	r6, #0
 800fbb8:	da03      	bge.n	800fbc2 <_printf_i+0xd2>
 800fbba:	232d      	movs	r3, #45	; 0x2d
 800fbbc:	4276      	negs	r6, r6
 800fbbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbc2:	485a      	ldr	r0, [pc, #360]	; (800fd2c <_printf_i+0x23c>)
 800fbc4:	230a      	movs	r3, #10
 800fbc6:	e012      	b.n	800fbee <_printf_i+0xfe>
 800fbc8:	682b      	ldr	r3, [r5, #0]
 800fbca:	6820      	ldr	r0, [r4, #0]
 800fbcc:	1d19      	adds	r1, r3, #4
 800fbce:	6029      	str	r1, [r5, #0]
 800fbd0:	0605      	lsls	r5, r0, #24
 800fbd2:	d501      	bpl.n	800fbd8 <_printf_i+0xe8>
 800fbd4:	681e      	ldr	r6, [r3, #0]
 800fbd6:	e002      	b.n	800fbde <_printf_i+0xee>
 800fbd8:	0641      	lsls	r1, r0, #25
 800fbda:	d5fb      	bpl.n	800fbd4 <_printf_i+0xe4>
 800fbdc:	881e      	ldrh	r6, [r3, #0]
 800fbde:	4853      	ldr	r0, [pc, #332]	; (800fd2c <_printf_i+0x23c>)
 800fbe0:	2f6f      	cmp	r7, #111	; 0x6f
 800fbe2:	bf0c      	ite	eq
 800fbe4:	2308      	moveq	r3, #8
 800fbe6:	230a      	movne	r3, #10
 800fbe8:	2100      	movs	r1, #0
 800fbea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbee:	6865      	ldr	r5, [r4, #4]
 800fbf0:	60a5      	str	r5, [r4, #8]
 800fbf2:	2d00      	cmp	r5, #0
 800fbf4:	bfa2      	ittt	ge
 800fbf6:	6821      	ldrge	r1, [r4, #0]
 800fbf8:	f021 0104 	bicge.w	r1, r1, #4
 800fbfc:	6021      	strge	r1, [r4, #0]
 800fbfe:	b90e      	cbnz	r6, 800fc04 <_printf_i+0x114>
 800fc00:	2d00      	cmp	r5, #0
 800fc02:	d04b      	beq.n	800fc9c <_printf_i+0x1ac>
 800fc04:	4615      	mov	r5, r2
 800fc06:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc0a:	fb03 6711 	mls	r7, r3, r1, r6
 800fc0e:	5dc7      	ldrb	r7, [r0, r7]
 800fc10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc14:	4637      	mov	r7, r6
 800fc16:	42bb      	cmp	r3, r7
 800fc18:	460e      	mov	r6, r1
 800fc1a:	d9f4      	bls.n	800fc06 <_printf_i+0x116>
 800fc1c:	2b08      	cmp	r3, #8
 800fc1e:	d10b      	bne.n	800fc38 <_printf_i+0x148>
 800fc20:	6823      	ldr	r3, [r4, #0]
 800fc22:	07de      	lsls	r6, r3, #31
 800fc24:	d508      	bpl.n	800fc38 <_printf_i+0x148>
 800fc26:	6923      	ldr	r3, [r4, #16]
 800fc28:	6861      	ldr	r1, [r4, #4]
 800fc2a:	4299      	cmp	r1, r3
 800fc2c:	bfde      	ittt	le
 800fc2e:	2330      	movle	r3, #48	; 0x30
 800fc30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fc38:	1b52      	subs	r2, r2, r5
 800fc3a:	6122      	str	r2, [r4, #16]
 800fc3c:	f8cd a000 	str.w	sl, [sp]
 800fc40:	464b      	mov	r3, r9
 800fc42:	aa03      	add	r2, sp, #12
 800fc44:	4621      	mov	r1, r4
 800fc46:	4640      	mov	r0, r8
 800fc48:	f7ff fee4 	bl	800fa14 <_printf_common>
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d14a      	bne.n	800fce6 <_printf_i+0x1f6>
 800fc50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc54:	b004      	add	sp, #16
 800fc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	f043 0320 	orr.w	r3, r3, #32
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	4833      	ldr	r0, [pc, #204]	; (800fd30 <_printf_i+0x240>)
 800fc64:	2778      	movs	r7, #120	; 0x78
 800fc66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc6a:	6823      	ldr	r3, [r4, #0]
 800fc6c:	6829      	ldr	r1, [r5, #0]
 800fc6e:	061f      	lsls	r7, r3, #24
 800fc70:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc74:	d402      	bmi.n	800fc7c <_printf_i+0x18c>
 800fc76:	065f      	lsls	r7, r3, #25
 800fc78:	bf48      	it	mi
 800fc7a:	b2b6      	uxthmi	r6, r6
 800fc7c:	07df      	lsls	r7, r3, #31
 800fc7e:	bf48      	it	mi
 800fc80:	f043 0320 	orrmi.w	r3, r3, #32
 800fc84:	6029      	str	r1, [r5, #0]
 800fc86:	bf48      	it	mi
 800fc88:	6023      	strmi	r3, [r4, #0]
 800fc8a:	b91e      	cbnz	r6, 800fc94 <_printf_i+0x1a4>
 800fc8c:	6823      	ldr	r3, [r4, #0]
 800fc8e:	f023 0320 	bic.w	r3, r3, #32
 800fc92:	6023      	str	r3, [r4, #0]
 800fc94:	2310      	movs	r3, #16
 800fc96:	e7a7      	b.n	800fbe8 <_printf_i+0xf8>
 800fc98:	4824      	ldr	r0, [pc, #144]	; (800fd2c <_printf_i+0x23c>)
 800fc9a:	e7e4      	b.n	800fc66 <_printf_i+0x176>
 800fc9c:	4615      	mov	r5, r2
 800fc9e:	e7bd      	b.n	800fc1c <_printf_i+0x12c>
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	6826      	ldr	r6, [r4, #0]
 800fca4:	6961      	ldr	r1, [r4, #20]
 800fca6:	1d18      	adds	r0, r3, #4
 800fca8:	6028      	str	r0, [r5, #0]
 800fcaa:	0635      	lsls	r5, r6, #24
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	d501      	bpl.n	800fcb4 <_printf_i+0x1c4>
 800fcb0:	6019      	str	r1, [r3, #0]
 800fcb2:	e002      	b.n	800fcba <_printf_i+0x1ca>
 800fcb4:	0670      	lsls	r0, r6, #25
 800fcb6:	d5fb      	bpl.n	800fcb0 <_printf_i+0x1c0>
 800fcb8:	8019      	strh	r1, [r3, #0]
 800fcba:	2300      	movs	r3, #0
 800fcbc:	6123      	str	r3, [r4, #16]
 800fcbe:	4615      	mov	r5, r2
 800fcc0:	e7bc      	b.n	800fc3c <_printf_i+0x14c>
 800fcc2:	682b      	ldr	r3, [r5, #0]
 800fcc4:	1d1a      	adds	r2, r3, #4
 800fcc6:	602a      	str	r2, [r5, #0]
 800fcc8:	681d      	ldr	r5, [r3, #0]
 800fcca:	6862      	ldr	r2, [r4, #4]
 800fccc:	2100      	movs	r1, #0
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f7f0 fa86 	bl	80001e0 <memchr>
 800fcd4:	b108      	cbz	r0, 800fcda <_printf_i+0x1ea>
 800fcd6:	1b40      	subs	r0, r0, r5
 800fcd8:	6060      	str	r0, [r4, #4]
 800fcda:	6863      	ldr	r3, [r4, #4]
 800fcdc:	6123      	str	r3, [r4, #16]
 800fcde:	2300      	movs	r3, #0
 800fce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fce4:	e7aa      	b.n	800fc3c <_printf_i+0x14c>
 800fce6:	6923      	ldr	r3, [r4, #16]
 800fce8:	462a      	mov	r2, r5
 800fcea:	4649      	mov	r1, r9
 800fcec:	4640      	mov	r0, r8
 800fcee:	47d0      	blx	sl
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	d0ad      	beq.n	800fc50 <_printf_i+0x160>
 800fcf4:	6823      	ldr	r3, [r4, #0]
 800fcf6:	079b      	lsls	r3, r3, #30
 800fcf8:	d413      	bmi.n	800fd22 <_printf_i+0x232>
 800fcfa:	68e0      	ldr	r0, [r4, #12]
 800fcfc:	9b03      	ldr	r3, [sp, #12]
 800fcfe:	4298      	cmp	r0, r3
 800fd00:	bfb8      	it	lt
 800fd02:	4618      	movlt	r0, r3
 800fd04:	e7a6      	b.n	800fc54 <_printf_i+0x164>
 800fd06:	2301      	movs	r3, #1
 800fd08:	4632      	mov	r2, r6
 800fd0a:	4649      	mov	r1, r9
 800fd0c:	4640      	mov	r0, r8
 800fd0e:	47d0      	blx	sl
 800fd10:	3001      	adds	r0, #1
 800fd12:	d09d      	beq.n	800fc50 <_printf_i+0x160>
 800fd14:	3501      	adds	r5, #1
 800fd16:	68e3      	ldr	r3, [r4, #12]
 800fd18:	9903      	ldr	r1, [sp, #12]
 800fd1a:	1a5b      	subs	r3, r3, r1
 800fd1c:	42ab      	cmp	r3, r5
 800fd1e:	dcf2      	bgt.n	800fd06 <_printf_i+0x216>
 800fd20:	e7eb      	b.n	800fcfa <_printf_i+0x20a>
 800fd22:	2500      	movs	r5, #0
 800fd24:	f104 0619 	add.w	r6, r4, #25
 800fd28:	e7f5      	b.n	800fd16 <_printf_i+0x226>
 800fd2a:	bf00      	nop
 800fd2c:	0801279e 	.word	0x0801279e
 800fd30:	080127af 	.word	0x080127af

0800fd34 <std>:
 800fd34:	2300      	movs	r3, #0
 800fd36:	b510      	push	{r4, lr}
 800fd38:	4604      	mov	r4, r0
 800fd3a:	e9c0 3300 	strd	r3, r3, [r0]
 800fd3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd42:	6083      	str	r3, [r0, #8]
 800fd44:	8181      	strh	r1, [r0, #12]
 800fd46:	6643      	str	r3, [r0, #100]	; 0x64
 800fd48:	81c2      	strh	r2, [r0, #14]
 800fd4a:	6183      	str	r3, [r0, #24]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	2208      	movs	r2, #8
 800fd50:	305c      	adds	r0, #92	; 0x5c
 800fd52:	f000 f902 	bl	800ff5a <memset>
 800fd56:	4b05      	ldr	r3, [pc, #20]	; (800fd6c <std+0x38>)
 800fd58:	6263      	str	r3, [r4, #36]	; 0x24
 800fd5a:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <std+0x3c>)
 800fd5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd5e:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <std+0x40>)
 800fd60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd62:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <std+0x44>)
 800fd64:	6224      	str	r4, [r4, #32]
 800fd66:	6323      	str	r3, [r4, #48]	; 0x30
 800fd68:	bd10      	pop	{r4, pc}
 800fd6a:	bf00      	nop
 800fd6c:	0800fed5 	.word	0x0800fed5
 800fd70:	0800fef7 	.word	0x0800fef7
 800fd74:	0800ff2f 	.word	0x0800ff2f
 800fd78:	0800ff53 	.word	0x0800ff53

0800fd7c <stdio_exit_handler>:
 800fd7c:	4a02      	ldr	r2, [pc, #8]	; (800fd88 <stdio_exit_handler+0xc>)
 800fd7e:	4903      	ldr	r1, [pc, #12]	; (800fd8c <stdio_exit_handler+0x10>)
 800fd80:	4803      	ldr	r0, [pc, #12]	; (800fd90 <stdio_exit_handler+0x14>)
 800fd82:	f000 b869 	b.w	800fe58 <_fwalk_sglue>
 800fd86:	bf00      	nop
 800fd88:	20000120 	.word	0x20000120
 800fd8c:	080118f1 	.word	0x080118f1
 800fd90:	2000012c 	.word	0x2000012c

0800fd94 <cleanup_stdio>:
 800fd94:	6841      	ldr	r1, [r0, #4]
 800fd96:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <cleanup_stdio+0x34>)
 800fd98:	4299      	cmp	r1, r3
 800fd9a:	b510      	push	{r4, lr}
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	d001      	beq.n	800fda4 <cleanup_stdio+0x10>
 800fda0:	f001 fda6 	bl	80118f0 <_fflush_r>
 800fda4:	68a1      	ldr	r1, [r4, #8]
 800fda6:	4b09      	ldr	r3, [pc, #36]	; (800fdcc <cleanup_stdio+0x38>)
 800fda8:	4299      	cmp	r1, r3
 800fdaa:	d002      	beq.n	800fdb2 <cleanup_stdio+0x1e>
 800fdac:	4620      	mov	r0, r4
 800fdae:	f001 fd9f 	bl	80118f0 <_fflush_r>
 800fdb2:	68e1      	ldr	r1, [r4, #12]
 800fdb4:	4b06      	ldr	r3, [pc, #24]	; (800fdd0 <cleanup_stdio+0x3c>)
 800fdb6:	4299      	cmp	r1, r3
 800fdb8:	d004      	beq.n	800fdc4 <cleanup_stdio+0x30>
 800fdba:	4620      	mov	r0, r4
 800fdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdc0:	f001 bd96 	b.w	80118f0 <_fflush_r>
 800fdc4:	bd10      	pop	{r4, pc}
 800fdc6:	bf00      	nop
 800fdc8:	200022a0 	.word	0x200022a0
 800fdcc:	20002308 	.word	0x20002308
 800fdd0:	20002370 	.word	0x20002370

0800fdd4 <global_stdio_init.part.0>:
 800fdd4:	b510      	push	{r4, lr}
 800fdd6:	4b0b      	ldr	r3, [pc, #44]	; (800fe04 <global_stdio_init.part.0+0x30>)
 800fdd8:	4c0b      	ldr	r4, [pc, #44]	; (800fe08 <global_stdio_init.part.0+0x34>)
 800fdda:	4a0c      	ldr	r2, [pc, #48]	; (800fe0c <global_stdio_init.part.0+0x38>)
 800fddc:	601a      	str	r2, [r3, #0]
 800fdde:	4620      	mov	r0, r4
 800fde0:	2200      	movs	r2, #0
 800fde2:	2104      	movs	r1, #4
 800fde4:	f7ff ffa6 	bl	800fd34 <std>
 800fde8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fdec:	2201      	movs	r2, #1
 800fdee:	2109      	movs	r1, #9
 800fdf0:	f7ff ffa0 	bl	800fd34 <std>
 800fdf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fdf8:	2202      	movs	r2, #2
 800fdfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdfe:	2112      	movs	r1, #18
 800fe00:	f7ff bf98 	b.w	800fd34 <std>
 800fe04:	200023d8 	.word	0x200023d8
 800fe08:	200022a0 	.word	0x200022a0
 800fe0c:	0800fd7d 	.word	0x0800fd7d

0800fe10 <__sfp_lock_acquire>:
 800fe10:	4801      	ldr	r0, [pc, #4]	; (800fe18 <__sfp_lock_acquire+0x8>)
 800fe12:	f000 b93d 	b.w	8010090 <__retarget_lock_acquire_recursive>
 800fe16:	bf00      	nop
 800fe18:	200023e1 	.word	0x200023e1

0800fe1c <__sfp_lock_release>:
 800fe1c:	4801      	ldr	r0, [pc, #4]	; (800fe24 <__sfp_lock_release+0x8>)
 800fe1e:	f000 b938 	b.w	8010092 <__retarget_lock_release_recursive>
 800fe22:	bf00      	nop
 800fe24:	200023e1 	.word	0x200023e1

0800fe28 <__sinit>:
 800fe28:	b510      	push	{r4, lr}
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	f7ff fff0 	bl	800fe10 <__sfp_lock_acquire>
 800fe30:	6a23      	ldr	r3, [r4, #32]
 800fe32:	b11b      	cbz	r3, 800fe3c <__sinit+0x14>
 800fe34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe38:	f7ff bff0 	b.w	800fe1c <__sfp_lock_release>
 800fe3c:	4b04      	ldr	r3, [pc, #16]	; (800fe50 <__sinit+0x28>)
 800fe3e:	6223      	str	r3, [r4, #32]
 800fe40:	4b04      	ldr	r3, [pc, #16]	; (800fe54 <__sinit+0x2c>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d1f5      	bne.n	800fe34 <__sinit+0xc>
 800fe48:	f7ff ffc4 	bl	800fdd4 <global_stdio_init.part.0>
 800fe4c:	e7f2      	b.n	800fe34 <__sinit+0xc>
 800fe4e:	bf00      	nop
 800fe50:	0800fd95 	.word	0x0800fd95
 800fe54:	200023d8 	.word	0x200023d8

0800fe58 <_fwalk_sglue>:
 800fe58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe5c:	4607      	mov	r7, r0
 800fe5e:	4688      	mov	r8, r1
 800fe60:	4614      	mov	r4, r2
 800fe62:	2600      	movs	r6, #0
 800fe64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe68:	f1b9 0901 	subs.w	r9, r9, #1
 800fe6c:	d505      	bpl.n	800fe7a <_fwalk_sglue+0x22>
 800fe6e:	6824      	ldr	r4, [r4, #0]
 800fe70:	2c00      	cmp	r4, #0
 800fe72:	d1f7      	bne.n	800fe64 <_fwalk_sglue+0xc>
 800fe74:	4630      	mov	r0, r6
 800fe76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe7a:	89ab      	ldrh	r3, [r5, #12]
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d907      	bls.n	800fe90 <_fwalk_sglue+0x38>
 800fe80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe84:	3301      	adds	r3, #1
 800fe86:	d003      	beq.n	800fe90 <_fwalk_sglue+0x38>
 800fe88:	4629      	mov	r1, r5
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	47c0      	blx	r8
 800fe8e:	4306      	orrs	r6, r0
 800fe90:	3568      	adds	r5, #104	; 0x68
 800fe92:	e7e9      	b.n	800fe68 <_fwalk_sglue+0x10>

0800fe94 <siprintf>:
 800fe94:	b40e      	push	{r1, r2, r3}
 800fe96:	b500      	push	{lr}
 800fe98:	b09c      	sub	sp, #112	; 0x70
 800fe9a:	ab1d      	add	r3, sp, #116	; 0x74
 800fe9c:	9002      	str	r0, [sp, #8]
 800fe9e:	9006      	str	r0, [sp, #24]
 800fea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fea4:	4809      	ldr	r0, [pc, #36]	; (800fecc <siprintf+0x38>)
 800fea6:	9107      	str	r1, [sp, #28]
 800fea8:	9104      	str	r1, [sp, #16]
 800feaa:	4909      	ldr	r1, [pc, #36]	; (800fed0 <siprintf+0x3c>)
 800feac:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb0:	9105      	str	r1, [sp, #20]
 800feb2:	6800      	ldr	r0, [r0, #0]
 800feb4:	9301      	str	r3, [sp, #4]
 800feb6:	a902      	add	r1, sp, #8
 800feb8:	f001 fb96 	bl	80115e8 <_svfiprintf_r>
 800febc:	9b02      	ldr	r3, [sp, #8]
 800febe:	2200      	movs	r2, #0
 800fec0:	701a      	strb	r2, [r3, #0]
 800fec2:	b01c      	add	sp, #112	; 0x70
 800fec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fec8:	b003      	add	sp, #12
 800feca:	4770      	bx	lr
 800fecc:	20000178 	.word	0x20000178
 800fed0:	ffff0208 	.word	0xffff0208

0800fed4 <__sread>:
 800fed4:	b510      	push	{r4, lr}
 800fed6:	460c      	mov	r4, r1
 800fed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fedc:	f000 f87a 	bl	800ffd4 <_read_r>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	bfab      	itete	ge
 800fee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fee6:	89a3      	ldrhlt	r3, [r4, #12]
 800fee8:	181b      	addge	r3, r3, r0
 800feea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800feee:	bfac      	ite	ge
 800fef0:	6563      	strge	r3, [r4, #84]	; 0x54
 800fef2:	81a3      	strhlt	r3, [r4, #12]
 800fef4:	bd10      	pop	{r4, pc}

0800fef6 <__swrite>:
 800fef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefa:	461f      	mov	r7, r3
 800fefc:	898b      	ldrh	r3, [r1, #12]
 800fefe:	05db      	lsls	r3, r3, #23
 800ff00:	4605      	mov	r5, r0
 800ff02:	460c      	mov	r4, r1
 800ff04:	4616      	mov	r6, r2
 800ff06:	d505      	bpl.n	800ff14 <__swrite+0x1e>
 800ff08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff0c:	2302      	movs	r3, #2
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f000 f84e 	bl	800ffb0 <_lseek_r>
 800ff14:	89a3      	ldrh	r3, [r4, #12]
 800ff16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	4632      	mov	r2, r6
 800ff22:	463b      	mov	r3, r7
 800ff24:	4628      	mov	r0, r5
 800ff26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff2a:	f000 b875 	b.w	8010018 <_write_r>

0800ff2e <__sseek>:
 800ff2e:	b510      	push	{r4, lr}
 800ff30:	460c      	mov	r4, r1
 800ff32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff36:	f000 f83b 	bl	800ffb0 <_lseek_r>
 800ff3a:	1c43      	adds	r3, r0, #1
 800ff3c:	89a3      	ldrh	r3, [r4, #12]
 800ff3e:	bf15      	itete	ne
 800ff40:	6560      	strne	r0, [r4, #84]	; 0x54
 800ff42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ff46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ff4a:	81a3      	strheq	r3, [r4, #12]
 800ff4c:	bf18      	it	ne
 800ff4e:	81a3      	strhne	r3, [r4, #12]
 800ff50:	bd10      	pop	{r4, pc}

0800ff52 <__sclose>:
 800ff52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff56:	f000 b81b 	b.w	800ff90 <_close_r>

0800ff5a <memset>:
 800ff5a:	4402      	add	r2, r0
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d100      	bne.n	800ff64 <memset+0xa>
 800ff62:	4770      	bx	lr
 800ff64:	f803 1b01 	strb.w	r1, [r3], #1
 800ff68:	e7f9      	b.n	800ff5e <memset+0x4>

0800ff6a <strcat>:
 800ff6a:	b510      	push	{r4, lr}
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	7814      	ldrb	r4, [r2, #0]
 800ff70:	4613      	mov	r3, r2
 800ff72:	3201      	adds	r2, #1
 800ff74:	2c00      	cmp	r4, #0
 800ff76:	d1fa      	bne.n	800ff6e <strcat+0x4>
 800ff78:	3b01      	subs	r3, #1
 800ff7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff82:	2a00      	cmp	r2, #0
 800ff84:	d1f9      	bne.n	800ff7a <strcat+0x10>
 800ff86:	bd10      	pop	{r4, pc}

0800ff88 <_localeconv_r>:
 800ff88:	4800      	ldr	r0, [pc, #0]	; (800ff8c <_localeconv_r+0x4>)
 800ff8a:	4770      	bx	lr
 800ff8c:	2000026c 	.word	0x2000026c

0800ff90 <_close_r>:
 800ff90:	b538      	push	{r3, r4, r5, lr}
 800ff92:	4d06      	ldr	r5, [pc, #24]	; (800ffac <_close_r+0x1c>)
 800ff94:	2300      	movs	r3, #0
 800ff96:	4604      	mov	r4, r0
 800ff98:	4608      	mov	r0, r1
 800ff9a:	602b      	str	r3, [r5, #0]
 800ff9c:	f7f2 f94b 	bl	8002236 <_close>
 800ffa0:	1c43      	adds	r3, r0, #1
 800ffa2:	d102      	bne.n	800ffaa <_close_r+0x1a>
 800ffa4:	682b      	ldr	r3, [r5, #0]
 800ffa6:	b103      	cbz	r3, 800ffaa <_close_r+0x1a>
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	200023dc 	.word	0x200023dc

0800ffb0 <_lseek_r>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	4d07      	ldr	r5, [pc, #28]	; (800ffd0 <_lseek_r+0x20>)
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	4608      	mov	r0, r1
 800ffb8:	4611      	mov	r1, r2
 800ffba:	2200      	movs	r2, #0
 800ffbc:	602a      	str	r2, [r5, #0]
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	f7f2 f960 	bl	8002284 <_lseek>
 800ffc4:	1c43      	adds	r3, r0, #1
 800ffc6:	d102      	bne.n	800ffce <_lseek_r+0x1e>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	b103      	cbz	r3, 800ffce <_lseek_r+0x1e>
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	bd38      	pop	{r3, r4, r5, pc}
 800ffd0:	200023dc 	.word	0x200023dc

0800ffd4 <_read_r>:
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	4d07      	ldr	r5, [pc, #28]	; (800fff4 <_read_r+0x20>)
 800ffd8:	4604      	mov	r4, r0
 800ffda:	4608      	mov	r0, r1
 800ffdc:	4611      	mov	r1, r2
 800ffde:	2200      	movs	r2, #0
 800ffe0:	602a      	str	r2, [r5, #0]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	f7f2 f8ee 	bl	80021c4 <_read>
 800ffe8:	1c43      	adds	r3, r0, #1
 800ffea:	d102      	bne.n	800fff2 <_read_r+0x1e>
 800ffec:	682b      	ldr	r3, [r5, #0]
 800ffee:	b103      	cbz	r3, 800fff2 <_read_r+0x1e>
 800fff0:	6023      	str	r3, [r4, #0]
 800fff2:	bd38      	pop	{r3, r4, r5, pc}
 800fff4:	200023dc 	.word	0x200023dc

0800fff8 <_sbrk_r>:
 800fff8:	b538      	push	{r3, r4, r5, lr}
 800fffa:	4d06      	ldr	r5, [pc, #24]	; (8010014 <_sbrk_r+0x1c>)
 800fffc:	2300      	movs	r3, #0
 800fffe:	4604      	mov	r4, r0
 8010000:	4608      	mov	r0, r1
 8010002:	602b      	str	r3, [r5, #0]
 8010004:	f7f2 f94c 	bl	80022a0 <_sbrk>
 8010008:	1c43      	adds	r3, r0, #1
 801000a:	d102      	bne.n	8010012 <_sbrk_r+0x1a>
 801000c:	682b      	ldr	r3, [r5, #0]
 801000e:	b103      	cbz	r3, 8010012 <_sbrk_r+0x1a>
 8010010:	6023      	str	r3, [r4, #0]
 8010012:	bd38      	pop	{r3, r4, r5, pc}
 8010014:	200023dc 	.word	0x200023dc

08010018 <_write_r>:
 8010018:	b538      	push	{r3, r4, r5, lr}
 801001a:	4d07      	ldr	r5, [pc, #28]	; (8010038 <_write_r+0x20>)
 801001c:	4604      	mov	r4, r0
 801001e:	4608      	mov	r0, r1
 8010020:	4611      	mov	r1, r2
 8010022:	2200      	movs	r2, #0
 8010024:	602a      	str	r2, [r5, #0]
 8010026:	461a      	mov	r2, r3
 8010028:	f7f2 f8e9 	bl	80021fe <_write>
 801002c:	1c43      	adds	r3, r0, #1
 801002e:	d102      	bne.n	8010036 <_write_r+0x1e>
 8010030:	682b      	ldr	r3, [r5, #0]
 8010032:	b103      	cbz	r3, 8010036 <_write_r+0x1e>
 8010034:	6023      	str	r3, [r4, #0]
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	200023dc 	.word	0x200023dc

0801003c <__errno>:
 801003c:	4b01      	ldr	r3, [pc, #4]	; (8010044 <__errno+0x8>)
 801003e:	6818      	ldr	r0, [r3, #0]
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	20000178 	.word	0x20000178

08010048 <__libc_init_array>:
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	4d0d      	ldr	r5, [pc, #52]	; (8010080 <__libc_init_array+0x38>)
 801004c:	4c0d      	ldr	r4, [pc, #52]	; (8010084 <__libc_init_array+0x3c>)
 801004e:	1b64      	subs	r4, r4, r5
 8010050:	10a4      	asrs	r4, r4, #2
 8010052:	2600      	movs	r6, #0
 8010054:	42a6      	cmp	r6, r4
 8010056:	d109      	bne.n	801006c <__libc_init_array+0x24>
 8010058:	4d0b      	ldr	r5, [pc, #44]	; (8010088 <__libc_init_array+0x40>)
 801005a:	4c0c      	ldr	r4, [pc, #48]	; (801008c <__libc_init_array+0x44>)
 801005c:	f002 fa42 	bl	80124e4 <_init>
 8010060:	1b64      	subs	r4, r4, r5
 8010062:	10a4      	asrs	r4, r4, #2
 8010064:	2600      	movs	r6, #0
 8010066:	42a6      	cmp	r6, r4
 8010068:	d105      	bne.n	8010076 <__libc_init_array+0x2e>
 801006a:	bd70      	pop	{r4, r5, r6, pc}
 801006c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010070:	4798      	blx	r3
 8010072:	3601      	adds	r6, #1
 8010074:	e7ee      	b.n	8010054 <__libc_init_array+0xc>
 8010076:	f855 3b04 	ldr.w	r3, [r5], #4
 801007a:	4798      	blx	r3
 801007c:	3601      	adds	r6, #1
 801007e:	e7f2      	b.n	8010066 <__libc_init_array+0x1e>
 8010080:	08012b78 	.word	0x08012b78
 8010084:	08012b78 	.word	0x08012b78
 8010088:	08012b78 	.word	0x08012b78
 801008c:	08012b7c 	.word	0x08012b7c

08010090 <__retarget_lock_acquire_recursive>:
 8010090:	4770      	bx	lr

08010092 <__retarget_lock_release_recursive>:
 8010092:	4770      	bx	lr

08010094 <memcpy>:
 8010094:	440a      	add	r2, r1
 8010096:	4291      	cmp	r1, r2
 8010098:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801009c:	d100      	bne.n	80100a0 <memcpy+0xc>
 801009e:	4770      	bx	lr
 80100a0:	b510      	push	{r4, lr}
 80100a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100aa:	4291      	cmp	r1, r2
 80100ac:	d1f9      	bne.n	80100a2 <memcpy+0xe>
 80100ae:	bd10      	pop	{r4, pc}

080100b0 <quorem>:
 80100b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	6903      	ldr	r3, [r0, #16]
 80100b6:	690c      	ldr	r4, [r1, #16]
 80100b8:	42a3      	cmp	r3, r4
 80100ba:	4607      	mov	r7, r0
 80100bc:	db7e      	blt.n	80101bc <quorem+0x10c>
 80100be:	3c01      	subs	r4, #1
 80100c0:	f101 0814 	add.w	r8, r1, #20
 80100c4:	f100 0514 	add.w	r5, r0, #20
 80100c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100cc:	9301      	str	r3, [sp, #4]
 80100ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100d6:	3301      	adds	r3, #1
 80100d8:	429a      	cmp	r2, r3
 80100da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80100de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80100e6:	d331      	bcc.n	801014c <quorem+0x9c>
 80100e8:	f04f 0e00 	mov.w	lr, #0
 80100ec:	4640      	mov	r0, r8
 80100ee:	46ac      	mov	ip, r5
 80100f0:	46f2      	mov	sl, lr
 80100f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80100f6:	b293      	uxth	r3, r2
 80100f8:	fb06 e303 	mla	r3, r6, r3, lr
 80100fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010100:	0c1a      	lsrs	r2, r3, #16
 8010102:	b29b      	uxth	r3, r3
 8010104:	ebaa 0303 	sub.w	r3, sl, r3
 8010108:	f8dc a000 	ldr.w	sl, [ip]
 801010c:	fa13 f38a 	uxtah	r3, r3, sl
 8010110:	fb06 220e 	mla	r2, r6, lr, r2
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	9b00      	ldr	r3, [sp, #0]
 8010118:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801011c:	b292      	uxth	r2, r2
 801011e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010122:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010126:	f8bd 3000 	ldrh.w	r3, [sp]
 801012a:	4581      	cmp	r9, r0
 801012c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010130:	f84c 3b04 	str.w	r3, [ip], #4
 8010134:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010138:	d2db      	bcs.n	80100f2 <quorem+0x42>
 801013a:	f855 300b 	ldr.w	r3, [r5, fp]
 801013e:	b92b      	cbnz	r3, 801014c <quorem+0x9c>
 8010140:	9b01      	ldr	r3, [sp, #4]
 8010142:	3b04      	subs	r3, #4
 8010144:	429d      	cmp	r5, r3
 8010146:	461a      	mov	r2, r3
 8010148:	d32c      	bcc.n	80101a4 <quorem+0xf4>
 801014a:	613c      	str	r4, [r7, #16]
 801014c:	4638      	mov	r0, r7
 801014e:	f001 f8f1 	bl	8011334 <__mcmp>
 8010152:	2800      	cmp	r0, #0
 8010154:	db22      	blt.n	801019c <quorem+0xec>
 8010156:	3601      	adds	r6, #1
 8010158:	4629      	mov	r1, r5
 801015a:	2000      	movs	r0, #0
 801015c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010160:	f8d1 c000 	ldr.w	ip, [r1]
 8010164:	b293      	uxth	r3, r2
 8010166:	1ac3      	subs	r3, r0, r3
 8010168:	0c12      	lsrs	r2, r2, #16
 801016a:	fa13 f38c 	uxtah	r3, r3, ip
 801016e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010172:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010176:	b29b      	uxth	r3, r3
 8010178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801017c:	45c1      	cmp	r9, r8
 801017e:	f841 3b04 	str.w	r3, [r1], #4
 8010182:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010186:	d2e9      	bcs.n	801015c <quorem+0xac>
 8010188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801018c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010190:	b922      	cbnz	r2, 801019c <quorem+0xec>
 8010192:	3b04      	subs	r3, #4
 8010194:	429d      	cmp	r5, r3
 8010196:	461a      	mov	r2, r3
 8010198:	d30a      	bcc.n	80101b0 <quorem+0x100>
 801019a:	613c      	str	r4, [r7, #16]
 801019c:	4630      	mov	r0, r6
 801019e:	b003      	add	sp, #12
 80101a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a4:	6812      	ldr	r2, [r2, #0]
 80101a6:	3b04      	subs	r3, #4
 80101a8:	2a00      	cmp	r2, #0
 80101aa:	d1ce      	bne.n	801014a <quorem+0x9a>
 80101ac:	3c01      	subs	r4, #1
 80101ae:	e7c9      	b.n	8010144 <quorem+0x94>
 80101b0:	6812      	ldr	r2, [r2, #0]
 80101b2:	3b04      	subs	r3, #4
 80101b4:	2a00      	cmp	r2, #0
 80101b6:	d1f0      	bne.n	801019a <quorem+0xea>
 80101b8:	3c01      	subs	r4, #1
 80101ba:	e7eb      	b.n	8010194 <quorem+0xe4>
 80101bc:	2000      	movs	r0, #0
 80101be:	e7ee      	b.n	801019e <quorem+0xee>

080101c0 <_dtoa_r>:
 80101c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c4:	ed2d 8b04 	vpush	{d8-d9}
 80101c8:	69c5      	ldr	r5, [r0, #28]
 80101ca:	b093      	sub	sp, #76	; 0x4c
 80101cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101d0:	ec57 6b10 	vmov	r6, r7, d0
 80101d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80101d8:	9107      	str	r1, [sp, #28]
 80101da:	4604      	mov	r4, r0
 80101dc:	920a      	str	r2, [sp, #40]	; 0x28
 80101de:	930d      	str	r3, [sp, #52]	; 0x34
 80101e0:	b975      	cbnz	r5, 8010200 <_dtoa_r+0x40>
 80101e2:	2010      	movs	r0, #16
 80101e4:	f7ff f884 	bl	800f2f0 <malloc>
 80101e8:	4602      	mov	r2, r0
 80101ea:	61e0      	str	r0, [r4, #28]
 80101ec:	b920      	cbnz	r0, 80101f8 <_dtoa_r+0x38>
 80101ee:	4bae      	ldr	r3, [pc, #696]	; (80104a8 <_dtoa_r+0x2e8>)
 80101f0:	21ef      	movs	r1, #239	; 0xef
 80101f2:	48ae      	ldr	r0, [pc, #696]	; (80104ac <_dtoa_r+0x2ec>)
 80101f4:	f001 fbbe 	bl	8011974 <__assert_func>
 80101f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101fc:	6005      	str	r5, [r0, #0]
 80101fe:	60c5      	str	r5, [r0, #12]
 8010200:	69e3      	ldr	r3, [r4, #28]
 8010202:	6819      	ldr	r1, [r3, #0]
 8010204:	b151      	cbz	r1, 801021c <_dtoa_r+0x5c>
 8010206:	685a      	ldr	r2, [r3, #4]
 8010208:	604a      	str	r2, [r1, #4]
 801020a:	2301      	movs	r3, #1
 801020c:	4093      	lsls	r3, r2
 801020e:	608b      	str	r3, [r1, #8]
 8010210:	4620      	mov	r0, r4
 8010212:	f000 fe53 	bl	8010ebc <_Bfree>
 8010216:	69e3      	ldr	r3, [r4, #28]
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]
 801021c:	1e3b      	subs	r3, r7, #0
 801021e:	bfbb      	ittet	lt
 8010220:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010224:	9303      	strlt	r3, [sp, #12]
 8010226:	2300      	movge	r3, #0
 8010228:	2201      	movlt	r2, #1
 801022a:	bfac      	ite	ge
 801022c:	f8c8 3000 	strge.w	r3, [r8]
 8010230:	f8c8 2000 	strlt.w	r2, [r8]
 8010234:	4b9e      	ldr	r3, [pc, #632]	; (80104b0 <_dtoa_r+0x2f0>)
 8010236:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801023a:	ea33 0308 	bics.w	r3, r3, r8
 801023e:	d11b      	bne.n	8010278 <_dtoa_r+0xb8>
 8010240:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010242:	f242 730f 	movw	r3, #9999	; 0x270f
 8010246:	6013      	str	r3, [r2, #0]
 8010248:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801024c:	4333      	orrs	r3, r6
 801024e:	f000 8593 	beq.w	8010d78 <_dtoa_r+0xbb8>
 8010252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010254:	b963      	cbnz	r3, 8010270 <_dtoa_r+0xb0>
 8010256:	4b97      	ldr	r3, [pc, #604]	; (80104b4 <_dtoa_r+0x2f4>)
 8010258:	e027      	b.n	80102aa <_dtoa_r+0xea>
 801025a:	4b97      	ldr	r3, [pc, #604]	; (80104b8 <_dtoa_r+0x2f8>)
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	3308      	adds	r3, #8
 8010260:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010262:	6013      	str	r3, [r2, #0]
 8010264:	9800      	ldr	r0, [sp, #0]
 8010266:	b013      	add	sp, #76	; 0x4c
 8010268:	ecbd 8b04 	vpop	{d8-d9}
 801026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010270:	4b90      	ldr	r3, [pc, #576]	; (80104b4 <_dtoa_r+0x2f4>)
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	3303      	adds	r3, #3
 8010276:	e7f3      	b.n	8010260 <_dtoa_r+0xa0>
 8010278:	ed9d 7b02 	vldr	d7, [sp, #8]
 801027c:	2200      	movs	r2, #0
 801027e:	ec51 0b17 	vmov	r0, r1, d7
 8010282:	eeb0 8a47 	vmov.f32	s16, s14
 8010286:	eef0 8a67 	vmov.f32	s17, s15
 801028a:	2300      	movs	r3, #0
 801028c:	f7f0 fc24 	bl	8000ad8 <__aeabi_dcmpeq>
 8010290:	4681      	mov	r9, r0
 8010292:	b160      	cbz	r0, 80102ae <_dtoa_r+0xee>
 8010294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010296:	2301      	movs	r3, #1
 8010298:	6013      	str	r3, [r2, #0]
 801029a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801029c:	2b00      	cmp	r3, #0
 801029e:	f000 8568 	beq.w	8010d72 <_dtoa_r+0xbb2>
 80102a2:	4b86      	ldr	r3, [pc, #536]	; (80104bc <_dtoa_r+0x2fc>)
 80102a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80102a6:	6013      	str	r3, [r2, #0]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	9300      	str	r3, [sp, #0]
 80102ac:	e7da      	b.n	8010264 <_dtoa_r+0xa4>
 80102ae:	aa10      	add	r2, sp, #64	; 0x40
 80102b0:	a911      	add	r1, sp, #68	; 0x44
 80102b2:	4620      	mov	r0, r4
 80102b4:	eeb0 0a48 	vmov.f32	s0, s16
 80102b8:	eef0 0a68 	vmov.f32	s1, s17
 80102bc:	f001 f8e0 	bl	8011480 <__d2b>
 80102c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80102c4:	4682      	mov	sl, r0
 80102c6:	2d00      	cmp	r5, #0
 80102c8:	d07f      	beq.n	80103ca <_dtoa_r+0x20a>
 80102ca:	ee18 3a90 	vmov	r3, s17
 80102ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80102d6:	ec51 0b18 	vmov	r0, r1, d8
 80102da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80102de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80102e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80102e6:	4619      	mov	r1, r3
 80102e8:	2200      	movs	r2, #0
 80102ea:	4b75      	ldr	r3, [pc, #468]	; (80104c0 <_dtoa_r+0x300>)
 80102ec:	f7ef ffd4 	bl	8000298 <__aeabi_dsub>
 80102f0:	a367      	add	r3, pc, #412	; (adr r3, 8010490 <_dtoa_r+0x2d0>)
 80102f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f6:	f7f0 f987 	bl	8000608 <__aeabi_dmul>
 80102fa:	a367      	add	r3, pc, #412	; (adr r3, 8010498 <_dtoa_r+0x2d8>)
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	f7ef ffcc 	bl	800029c <__adddf3>
 8010304:	4606      	mov	r6, r0
 8010306:	4628      	mov	r0, r5
 8010308:	460f      	mov	r7, r1
 801030a:	f7f0 f913 	bl	8000534 <__aeabi_i2d>
 801030e:	a364      	add	r3, pc, #400	; (adr r3, 80104a0 <_dtoa_r+0x2e0>)
 8010310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010314:	f7f0 f978 	bl	8000608 <__aeabi_dmul>
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	4630      	mov	r0, r6
 801031e:	4639      	mov	r1, r7
 8010320:	f7ef ffbc 	bl	800029c <__adddf3>
 8010324:	4606      	mov	r6, r0
 8010326:	460f      	mov	r7, r1
 8010328:	f7f0 fc1e 	bl	8000b68 <__aeabi_d2iz>
 801032c:	2200      	movs	r2, #0
 801032e:	4683      	mov	fp, r0
 8010330:	2300      	movs	r3, #0
 8010332:	4630      	mov	r0, r6
 8010334:	4639      	mov	r1, r7
 8010336:	f7f0 fbd9 	bl	8000aec <__aeabi_dcmplt>
 801033a:	b148      	cbz	r0, 8010350 <_dtoa_r+0x190>
 801033c:	4658      	mov	r0, fp
 801033e:	f7f0 f8f9 	bl	8000534 <__aeabi_i2d>
 8010342:	4632      	mov	r2, r6
 8010344:	463b      	mov	r3, r7
 8010346:	f7f0 fbc7 	bl	8000ad8 <__aeabi_dcmpeq>
 801034a:	b908      	cbnz	r0, 8010350 <_dtoa_r+0x190>
 801034c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010350:	f1bb 0f16 	cmp.w	fp, #22
 8010354:	d857      	bhi.n	8010406 <_dtoa_r+0x246>
 8010356:	4b5b      	ldr	r3, [pc, #364]	; (80104c4 <_dtoa_r+0x304>)
 8010358:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801035c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010360:	ec51 0b18 	vmov	r0, r1, d8
 8010364:	f7f0 fbc2 	bl	8000aec <__aeabi_dcmplt>
 8010368:	2800      	cmp	r0, #0
 801036a:	d04e      	beq.n	801040a <_dtoa_r+0x24a>
 801036c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010370:	2300      	movs	r3, #0
 8010372:	930c      	str	r3, [sp, #48]	; 0x30
 8010374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010376:	1b5b      	subs	r3, r3, r5
 8010378:	1e5a      	subs	r2, r3, #1
 801037a:	bf45      	ittet	mi
 801037c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010380:	9305      	strmi	r3, [sp, #20]
 8010382:	2300      	movpl	r3, #0
 8010384:	2300      	movmi	r3, #0
 8010386:	9206      	str	r2, [sp, #24]
 8010388:	bf54      	ite	pl
 801038a:	9305      	strpl	r3, [sp, #20]
 801038c:	9306      	strmi	r3, [sp, #24]
 801038e:	f1bb 0f00 	cmp.w	fp, #0
 8010392:	db3c      	blt.n	801040e <_dtoa_r+0x24e>
 8010394:	9b06      	ldr	r3, [sp, #24]
 8010396:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801039a:	445b      	add	r3, fp
 801039c:	9306      	str	r3, [sp, #24]
 801039e:	2300      	movs	r3, #0
 80103a0:	9308      	str	r3, [sp, #32]
 80103a2:	9b07      	ldr	r3, [sp, #28]
 80103a4:	2b09      	cmp	r3, #9
 80103a6:	d868      	bhi.n	801047a <_dtoa_r+0x2ba>
 80103a8:	2b05      	cmp	r3, #5
 80103aa:	bfc4      	itt	gt
 80103ac:	3b04      	subgt	r3, #4
 80103ae:	9307      	strgt	r3, [sp, #28]
 80103b0:	9b07      	ldr	r3, [sp, #28]
 80103b2:	f1a3 0302 	sub.w	r3, r3, #2
 80103b6:	bfcc      	ite	gt
 80103b8:	2500      	movgt	r5, #0
 80103ba:	2501      	movle	r5, #1
 80103bc:	2b03      	cmp	r3, #3
 80103be:	f200 8085 	bhi.w	80104cc <_dtoa_r+0x30c>
 80103c2:	e8df f003 	tbb	[pc, r3]
 80103c6:	3b2e      	.short	0x3b2e
 80103c8:	5839      	.short	0x5839
 80103ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80103ce:	441d      	add	r5, r3
 80103d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80103d4:	2b20      	cmp	r3, #32
 80103d6:	bfc1      	itttt	gt
 80103d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80103dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80103e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80103e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80103e8:	bfd6      	itet	le
 80103ea:	f1c3 0320 	rsble	r3, r3, #32
 80103ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80103f2:	fa06 f003 	lslle.w	r0, r6, r3
 80103f6:	f7f0 f88d 	bl	8000514 <__aeabi_ui2d>
 80103fa:	2201      	movs	r2, #1
 80103fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010400:	3d01      	subs	r5, #1
 8010402:	920e      	str	r2, [sp, #56]	; 0x38
 8010404:	e76f      	b.n	80102e6 <_dtoa_r+0x126>
 8010406:	2301      	movs	r3, #1
 8010408:	e7b3      	b.n	8010372 <_dtoa_r+0x1b2>
 801040a:	900c      	str	r0, [sp, #48]	; 0x30
 801040c:	e7b2      	b.n	8010374 <_dtoa_r+0x1b4>
 801040e:	9b05      	ldr	r3, [sp, #20]
 8010410:	eba3 030b 	sub.w	r3, r3, fp
 8010414:	9305      	str	r3, [sp, #20]
 8010416:	f1cb 0300 	rsb	r3, fp, #0
 801041a:	9308      	str	r3, [sp, #32]
 801041c:	2300      	movs	r3, #0
 801041e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010420:	e7bf      	b.n	80103a2 <_dtoa_r+0x1e2>
 8010422:	2300      	movs	r3, #0
 8010424:	9309      	str	r3, [sp, #36]	; 0x24
 8010426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010428:	2b00      	cmp	r3, #0
 801042a:	dc52      	bgt.n	80104d2 <_dtoa_r+0x312>
 801042c:	2301      	movs	r3, #1
 801042e:	9301      	str	r3, [sp, #4]
 8010430:	9304      	str	r3, [sp, #16]
 8010432:	461a      	mov	r2, r3
 8010434:	920a      	str	r2, [sp, #40]	; 0x28
 8010436:	e00b      	b.n	8010450 <_dtoa_r+0x290>
 8010438:	2301      	movs	r3, #1
 801043a:	e7f3      	b.n	8010424 <_dtoa_r+0x264>
 801043c:	2300      	movs	r3, #0
 801043e:	9309      	str	r3, [sp, #36]	; 0x24
 8010440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010442:	445b      	add	r3, fp
 8010444:	9301      	str	r3, [sp, #4]
 8010446:	3301      	adds	r3, #1
 8010448:	2b01      	cmp	r3, #1
 801044a:	9304      	str	r3, [sp, #16]
 801044c:	bfb8      	it	lt
 801044e:	2301      	movlt	r3, #1
 8010450:	69e0      	ldr	r0, [r4, #28]
 8010452:	2100      	movs	r1, #0
 8010454:	2204      	movs	r2, #4
 8010456:	f102 0614 	add.w	r6, r2, #20
 801045a:	429e      	cmp	r6, r3
 801045c:	d93d      	bls.n	80104da <_dtoa_r+0x31a>
 801045e:	6041      	str	r1, [r0, #4]
 8010460:	4620      	mov	r0, r4
 8010462:	f000 fceb 	bl	8010e3c <_Balloc>
 8010466:	9000      	str	r0, [sp, #0]
 8010468:	2800      	cmp	r0, #0
 801046a:	d139      	bne.n	80104e0 <_dtoa_r+0x320>
 801046c:	4b16      	ldr	r3, [pc, #88]	; (80104c8 <_dtoa_r+0x308>)
 801046e:	4602      	mov	r2, r0
 8010470:	f240 11af 	movw	r1, #431	; 0x1af
 8010474:	e6bd      	b.n	80101f2 <_dtoa_r+0x32>
 8010476:	2301      	movs	r3, #1
 8010478:	e7e1      	b.n	801043e <_dtoa_r+0x27e>
 801047a:	2501      	movs	r5, #1
 801047c:	2300      	movs	r3, #0
 801047e:	9307      	str	r3, [sp, #28]
 8010480:	9509      	str	r5, [sp, #36]	; 0x24
 8010482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010486:	9301      	str	r3, [sp, #4]
 8010488:	9304      	str	r3, [sp, #16]
 801048a:	2200      	movs	r2, #0
 801048c:	2312      	movs	r3, #18
 801048e:	e7d1      	b.n	8010434 <_dtoa_r+0x274>
 8010490:	636f4361 	.word	0x636f4361
 8010494:	3fd287a7 	.word	0x3fd287a7
 8010498:	8b60c8b3 	.word	0x8b60c8b3
 801049c:	3fc68a28 	.word	0x3fc68a28
 80104a0:	509f79fb 	.word	0x509f79fb
 80104a4:	3fd34413 	.word	0x3fd34413
 80104a8:	080127cd 	.word	0x080127cd
 80104ac:	080127e4 	.word	0x080127e4
 80104b0:	7ff00000 	.word	0x7ff00000
 80104b4:	080127c9 	.word	0x080127c9
 80104b8:	080127c0 	.word	0x080127c0
 80104bc:	0801279d 	.word	0x0801279d
 80104c0:	3ff80000 	.word	0x3ff80000
 80104c4:	080128d0 	.word	0x080128d0
 80104c8:	0801283c 	.word	0x0801283c
 80104cc:	2301      	movs	r3, #1
 80104ce:	9309      	str	r3, [sp, #36]	; 0x24
 80104d0:	e7d7      	b.n	8010482 <_dtoa_r+0x2c2>
 80104d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104d4:	9301      	str	r3, [sp, #4]
 80104d6:	9304      	str	r3, [sp, #16]
 80104d8:	e7ba      	b.n	8010450 <_dtoa_r+0x290>
 80104da:	3101      	adds	r1, #1
 80104dc:	0052      	lsls	r2, r2, #1
 80104de:	e7ba      	b.n	8010456 <_dtoa_r+0x296>
 80104e0:	69e3      	ldr	r3, [r4, #28]
 80104e2:	9a00      	ldr	r2, [sp, #0]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	9b04      	ldr	r3, [sp, #16]
 80104e8:	2b0e      	cmp	r3, #14
 80104ea:	f200 80a8 	bhi.w	801063e <_dtoa_r+0x47e>
 80104ee:	2d00      	cmp	r5, #0
 80104f0:	f000 80a5 	beq.w	801063e <_dtoa_r+0x47e>
 80104f4:	f1bb 0f00 	cmp.w	fp, #0
 80104f8:	dd38      	ble.n	801056c <_dtoa_r+0x3ac>
 80104fa:	4bc0      	ldr	r3, [pc, #768]	; (80107fc <_dtoa_r+0x63c>)
 80104fc:	f00b 020f 	and.w	r2, fp, #15
 8010500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010504:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010508:	e9d3 6700 	ldrd	r6, r7, [r3]
 801050c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010510:	d019      	beq.n	8010546 <_dtoa_r+0x386>
 8010512:	4bbb      	ldr	r3, [pc, #748]	; (8010800 <_dtoa_r+0x640>)
 8010514:	ec51 0b18 	vmov	r0, r1, d8
 8010518:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801051c:	f7f0 f99e 	bl	800085c <__aeabi_ddiv>
 8010520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010524:	f008 080f 	and.w	r8, r8, #15
 8010528:	2503      	movs	r5, #3
 801052a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010800 <_dtoa_r+0x640>
 801052e:	f1b8 0f00 	cmp.w	r8, #0
 8010532:	d10a      	bne.n	801054a <_dtoa_r+0x38a>
 8010534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010538:	4632      	mov	r2, r6
 801053a:	463b      	mov	r3, r7
 801053c:	f7f0 f98e 	bl	800085c <__aeabi_ddiv>
 8010540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010544:	e02b      	b.n	801059e <_dtoa_r+0x3de>
 8010546:	2502      	movs	r5, #2
 8010548:	e7ef      	b.n	801052a <_dtoa_r+0x36a>
 801054a:	f018 0f01 	tst.w	r8, #1
 801054e:	d008      	beq.n	8010562 <_dtoa_r+0x3a2>
 8010550:	4630      	mov	r0, r6
 8010552:	4639      	mov	r1, r7
 8010554:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010558:	f7f0 f856 	bl	8000608 <__aeabi_dmul>
 801055c:	3501      	adds	r5, #1
 801055e:	4606      	mov	r6, r0
 8010560:	460f      	mov	r7, r1
 8010562:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010566:	f109 0908 	add.w	r9, r9, #8
 801056a:	e7e0      	b.n	801052e <_dtoa_r+0x36e>
 801056c:	f000 809f 	beq.w	80106ae <_dtoa_r+0x4ee>
 8010570:	f1cb 0600 	rsb	r6, fp, #0
 8010574:	4ba1      	ldr	r3, [pc, #644]	; (80107fc <_dtoa_r+0x63c>)
 8010576:	4fa2      	ldr	r7, [pc, #648]	; (8010800 <_dtoa_r+0x640>)
 8010578:	f006 020f 	and.w	r2, r6, #15
 801057c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010584:	ec51 0b18 	vmov	r0, r1, d8
 8010588:	f7f0 f83e 	bl	8000608 <__aeabi_dmul>
 801058c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010590:	1136      	asrs	r6, r6, #4
 8010592:	2300      	movs	r3, #0
 8010594:	2502      	movs	r5, #2
 8010596:	2e00      	cmp	r6, #0
 8010598:	d17e      	bne.n	8010698 <_dtoa_r+0x4d8>
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1d0      	bne.n	8010540 <_dtoa_r+0x380>
 801059e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 8084 	beq.w	80106b2 <_dtoa_r+0x4f2>
 80105aa:	4b96      	ldr	r3, [pc, #600]	; (8010804 <_dtoa_r+0x644>)
 80105ac:	2200      	movs	r2, #0
 80105ae:	4640      	mov	r0, r8
 80105b0:	4649      	mov	r1, r9
 80105b2:	f7f0 fa9b 	bl	8000aec <__aeabi_dcmplt>
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d07b      	beq.n	80106b2 <_dtoa_r+0x4f2>
 80105ba:	9b04      	ldr	r3, [sp, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d078      	beq.n	80106b2 <_dtoa_r+0x4f2>
 80105c0:	9b01      	ldr	r3, [sp, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	dd39      	ble.n	801063a <_dtoa_r+0x47a>
 80105c6:	4b90      	ldr	r3, [pc, #576]	; (8010808 <_dtoa_r+0x648>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	4640      	mov	r0, r8
 80105cc:	4649      	mov	r1, r9
 80105ce:	f7f0 f81b 	bl	8000608 <__aeabi_dmul>
 80105d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105d6:	9e01      	ldr	r6, [sp, #4]
 80105d8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80105dc:	3501      	adds	r5, #1
 80105de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80105e2:	4628      	mov	r0, r5
 80105e4:	f7ef ffa6 	bl	8000534 <__aeabi_i2d>
 80105e8:	4642      	mov	r2, r8
 80105ea:	464b      	mov	r3, r9
 80105ec:	f7f0 f80c 	bl	8000608 <__aeabi_dmul>
 80105f0:	4b86      	ldr	r3, [pc, #536]	; (801080c <_dtoa_r+0x64c>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	f7ef fe52 	bl	800029c <__adddf3>
 80105f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80105fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010600:	9303      	str	r3, [sp, #12]
 8010602:	2e00      	cmp	r6, #0
 8010604:	d158      	bne.n	80106b8 <_dtoa_r+0x4f8>
 8010606:	4b82      	ldr	r3, [pc, #520]	; (8010810 <_dtoa_r+0x650>)
 8010608:	2200      	movs	r2, #0
 801060a:	4640      	mov	r0, r8
 801060c:	4649      	mov	r1, r9
 801060e:	f7ef fe43 	bl	8000298 <__aeabi_dsub>
 8010612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010616:	4680      	mov	r8, r0
 8010618:	4689      	mov	r9, r1
 801061a:	f7f0 fa85 	bl	8000b28 <__aeabi_dcmpgt>
 801061e:	2800      	cmp	r0, #0
 8010620:	f040 8296 	bne.w	8010b50 <_dtoa_r+0x990>
 8010624:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010628:	4640      	mov	r0, r8
 801062a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801062e:	4649      	mov	r1, r9
 8010630:	f7f0 fa5c 	bl	8000aec <__aeabi_dcmplt>
 8010634:	2800      	cmp	r0, #0
 8010636:	f040 8289 	bne.w	8010b4c <_dtoa_r+0x98c>
 801063a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801063e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010640:	2b00      	cmp	r3, #0
 8010642:	f2c0 814e 	blt.w	80108e2 <_dtoa_r+0x722>
 8010646:	f1bb 0f0e 	cmp.w	fp, #14
 801064a:	f300 814a 	bgt.w	80108e2 <_dtoa_r+0x722>
 801064e:	4b6b      	ldr	r3, [pc, #428]	; (80107fc <_dtoa_r+0x63c>)
 8010650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010654:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801065a:	2b00      	cmp	r3, #0
 801065c:	f280 80dc 	bge.w	8010818 <_dtoa_r+0x658>
 8010660:	9b04      	ldr	r3, [sp, #16]
 8010662:	2b00      	cmp	r3, #0
 8010664:	f300 80d8 	bgt.w	8010818 <_dtoa_r+0x658>
 8010668:	f040 826f 	bne.w	8010b4a <_dtoa_r+0x98a>
 801066c:	4b68      	ldr	r3, [pc, #416]	; (8010810 <_dtoa_r+0x650>)
 801066e:	2200      	movs	r2, #0
 8010670:	4640      	mov	r0, r8
 8010672:	4649      	mov	r1, r9
 8010674:	f7ef ffc8 	bl	8000608 <__aeabi_dmul>
 8010678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801067c:	f7f0 fa4a 	bl	8000b14 <__aeabi_dcmpge>
 8010680:	9e04      	ldr	r6, [sp, #16]
 8010682:	4637      	mov	r7, r6
 8010684:	2800      	cmp	r0, #0
 8010686:	f040 8245 	bne.w	8010b14 <_dtoa_r+0x954>
 801068a:	9d00      	ldr	r5, [sp, #0]
 801068c:	2331      	movs	r3, #49	; 0x31
 801068e:	f805 3b01 	strb.w	r3, [r5], #1
 8010692:	f10b 0b01 	add.w	fp, fp, #1
 8010696:	e241      	b.n	8010b1c <_dtoa_r+0x95c>
 8010698:	07f2      	lsls	r2, r6, #31
 801069a:	d505      	bpl.n	80106a8 <_dtoa_r+0x4e8>
 801069c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106a0:	f7ef ffb2 	bl	8000608 <__aeabi_dmul>
 80106a4:	3501      	adds	r5, #1
 80106a6:	2301      	movs	r3, #1
 80106a8:	1076      	asrs	r6, r6, #1
 80106aa:	3708      	adds	r7, #8
 80106ac:	e773      	b.n	8010596 <_dtoa_r+0x3d6>
 80106ae:	2502      	movs	r5, #2
 80106b0:	e775      	b.n	801059e <_dtoa_r+0x3de>
 80106b2:	9e04      	ldr	r6, [sp, #16]
 80106b4:	465f      	mov	r7, fp
 80106b6:	e792      	b.n	80105de <_dtoa_r+0x41e>
 80106b8:	9900      	ldr	r1, [sp, #0]
 80106ba:	4b50      	ldr	r3, [pc, #320]	; (80107fc <_dtoa_r+0x63c>)
 80106bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106c0:	4431      	add	r1, r6
 80106c2:	9102      	str	r1, [sp, #8]
 80106c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106c6:	eeb0 9a47 	vmov.f32	s18, s14
 80106ca:	eef0 9a67 	vmov.f32	s19, s15
 80106ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80106d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106d6:	2900      	cmp	r1, #0
 80106d8:	d044      	beq.n	8010764 <_dtoa_r+0x5a4>
 80106da:	494e      	ldr	r1, [pc, #312]	; (8010814 <_dtoa_r+0x654>)
 80106dc:	2000      	movs	r0, #0
 80106de:	f7f0 f8bd 	bl	800085c <__aeabi_ddiv>
 80106e2:	ec53 2b19 	vmov	r2, r3, d9
 80106e6:	f7ef fdd7 	bl	8000298 <__aeabi_dsub>
 80106ea:	9d00      	ldr	r5, [sp, #0]
 80106ec:	ec41 0b19 	vmov	d9, r0, r1
 80106f0:	4649      	mov	r1, r9
 80106f2:	4640      	mov	r0, r8
 80106f4:	f7f0 fa38 	bl	8000b68 <__aeabi_d2iz>
 80106f8:	4606      	mov	r6, r0
 80106fa:	f7ef ff1b 	bl	8000534 <__aeabi_i2d>
 80106fe:	4602      	mov	r2, r0
 8010700:	460b      	mov	r3, r1
 8010702:	4640      	mov	r0, r8
 8010704:	4649      	mov	r1, r9
 8010706:	f7ef fdc7 	bl	8000298 <__aeabi_dsub>
 801070a:	3630      	adds	r6, #48	; 0x30
 801070c:	f805 6b01 	strb.w	r6, [r5], #1
 8010710:	ec53 2b19 	vmov	r2, r3, d9
 8010714:	4680      	mov	r8, r0
 8010716:	4689      	mov	r9, r1
 8010718:	f7f0 f9e8 	bl	8000aec <__aeabi_dcmplt>
 801071c:	2800      	cmp	r0, #0
 801071e:	d164      	bne.n	80107ea <_dtoa_r+0x62a>
 8010720:	4642      	mov	r2, r8
 8010722:	464b      	mov	r3, r9
 8010724:	4937      	ldr	r1, [pc, #220]	; (8010804 <_dtoa_r+0x644>)
 8010726:	2000      	movs	r0, #0
 8010728:	f7ef fdb6 	bl	8000298 <__aeabi_dsub>
 801072c:	ec53 2b19 	vmov	r2, r3, d9
 8010730:	f7f0 f9dc 	bl	8000aec <__aeabi_dcmplt>
 8010734:	2800      	cmp	r0, #0
 8010736:	f040 80b6 	bne.w	80108a6 <_dtoa_r+0x6e6>
 801073a:	9b02      	ldr	r3, [sp, #8]
 801073c:	429d      	cmp	r5, r3
 801073e:	f43f af7c 	beq.w	801063a <_dtoa_r+0x47a>
 8010742:	4b31      	ldr	r3, [pc, #196]	; (8010808 <_dtoa_r+0x648>)
 8010744:	ec51 0b19 	vmov	r0, r1, d9
 8010748:	2200      	movs	r2, #0
 801074a:	f7ef ff5d 	bl	8000608 <__aeabi_dmul>
 801074e:	4b2e      	ldr	r3, [pc, #184]	; (8010808 <_dtoa_r+0x648>)
 8010750:	ec41 0b19 	vmov	d9, r0, r1
 8010754:	2200      	movs	r2, #0
 8010756:	4640      	mov	r0, r8
 8010758:	4649      	mov	r1, r9
 801075a:	f7ef ff55 	bl	8000608 <__aeabi_dmul>
 801075e:	4680      	mov	r8, r0
 8010760:	4689      	mov	r9, r1
 8010762:	e7c5      	b.n	80106f0 <_dtoa_r+0x530>
 8010764:	ec51 0b17 	vmov	r0, r1, d7
 8010768:	f7ef ff4e 	bl	8000608 <__aeabi_dmul>
 801076c:	9b02      	ldr	r3, [sp, #8]
 801076e:	9d00      	ldr	r5, [sp, #0]
 8010770:	930f      	str	r3, [sp, #60]	; 0x3c
 8010772:	ec41 0b19 	vmov	d9, r0, r1
 8010776:	4649      	mov	r1, r9
 8010778:	4640      	mov	r0, r8
 801077a:	f7f0 f9f5 	bl	8000b68 <__aeabi_d2iz>
 801077e:	4606      	mov	r6, r0
 8010780:	f7ef fed8 	bl	8000534 <__aeabi_i2d>
 8010784:	3630      	adds	r6, #48	; 0x30
 8010786:	4602      	mov	r2, r0
 8010788:	460b      	mov	r3, r1
 801078a:	4640      	mov	r0, r8
 801078c:	4649      	mov	r1, r9
 801078e:	f7ef fd83 	bl	8000298 <__aeabi_dsub>
 8010792:	f805 6b01 	strb.w	r6, [r5], #1
 8010796:	9b02      	ldr	r3, [sp, #8]
 8010798:	429d      	cmp	r5, r3
 801079a:	4680      	mov	r8, r0
 801079c:	4689      	mov	r9, r1
 801079e:	f04f 0200 	mov.w	r2, #0
 80107a2:	d124      	bne.n	80107ee <_dtoa_r+0x62e>
 80107a4:	4b1b      	ldr	r3, [pc, #108]	; (8010814 <_dtoa_r+0x654>)
 80107a6:	ec51 0b19 	vmov	r0, r1, d9
 80107aa:	f7ef fd77 	bl	800029c <__adddf3>
 80107ae:	4602      	mov	r2, r0
 80107b0:	460b      	mov	r3, r1
 80107b2:	4640      	mov	r0, r8
 80107b4:	4649      	mov	r1, r9
 80107b6:	f7f0 f9b7 	bl	8000b28 <__aeabi_dcmpgt>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d173      	bne.n	80108a6 <_dtoa_r+0x6e6>
 80107be:	ec53 2b19 	vmov	r2, r3, d9
 80107c2:	4914      	ldr	r1, [pc, #80]	; (8010814 <_dtoa_r+0x654>)
 80107c4:	2000      	movs	r0, #0
 80107c6:	f7ef fd67 	bl	8000298 <__aeabi_dsub>
 80107ca:	4602      	mov	r2, r0
 80107cc:	460b      	mov	r3, r1
 80107ce:	4640      	mov	r0, r8
 80107d0:	4649      	mov	r1, r9
 80107d2:	f7f0 f98b 	bl	8000aec <__aeabi_dcmplt>
 80107d6:	2800      	cmp	r0, #0
 80107d8:	f43f af2f 	beq.w	801063a <_dtoa_r+0x47a>
 80107dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80107de:	1e6b      	subs	r3, r5, #1
 80107e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80107e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80107e6:	2b30      	cmp	r3, #48	; 0x30
 80107e8:	d0f8      	beq.n	80107dc <_dtoa_r+0x61c>
 80107ea:	46bb      	mov	fp, r7
 80107ec:	e04a      	b.n	8010884 <_dtoa_r+0x6c4>
 80107ee:	4b06      	ldr	r3, [pc, #24]	; (8010808 <_dtoa_r+0x648>)
 80107f0:	f7ef ff0a 	bl	8000608 <__aeabi_dmul>
 80107f4:	4680      	mov	r8, r0
 80107f6:	4689      	mov	r9, r1
 80107f8:	e7bd      	b.n	8010776 <_dtoa_r+0x5b6>
 80107fa:	bf00      	nop
 80107fc:	080128d0 	.word	0x080128d0
 8010800:	080128a8 	.word	0x080128a8
 8010804:	3ff00000 	.word	0x3ff00000
 8010808:	40240000 	.word	0x40240000
 801080c:	401c0000 	.word	0x401c0000
 8010810:	40140000 	.word	0x40140000
 8010814:	3fe00000 	.word	0x3fe00000
 8010818:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801081c:	9d00      	ldr	r5, [sp, #0]
 801081e:	4642      	mov	r2, r8
 8010820:	464b      	mov	r3, r9
 8010822:	4630      	mov	r0, r6
 8010824:	4639      	mov	r1, r7
 8010826:	f7f0 f819 	bl	800085c <__aeabi_ddiv>
 801082a:	f7f0 f99d 	bl	8000b68 <__aeabi_d2iz>
 801082e:	9001      	str	r0, [sp, #4]
 8010830:	f7ef fe80 	bl	8000534 <__aeabi_i2d>
 8010834:	4642      	mov	r2, r8
 8010836:	464b      	mov	r3, r9
 8010838:	f7ef fee6 	bl	8000608 <__aeabi_dmul>
 801083c:	4602      	mov	r2, r0
 801083e:	460b      	mov	r3, r1
 8010840:	4630      	mov	r0, r6
 8010842:	4639      	mov	r1, r7
 8010844:	f7ef fd28 	bl	8000298 <__aeabi_dsub>
 8010848:	9e01      	ldr	r6, [sp, #4]
 801084a:	9f04      	ldr	r7, [sp, #16]
 801084c:	3630      	adds	r6, #48	; 0x30
 801084e:	f805 6b01 	strb.w	r6, [r5], #1
 8010852:	9e00      	ldr	r6, [sp, #0]
 8010854:	1bae      	subs	r6, r5, r6
 8010856:	42b7      	cmp	r7, r6
 8010858:	4602      	mov	r2, r0
 801085a:	460b      	mov	r3, r1
 801085c:	d134      	bne.n	80108c8 <_dtoa_r+0x708>
 801085e:	f7ef fd1d 	bl	800029c <__adddf3>
 8010862:	4642      	mov	r2, r8
 8010864:	464b      	mov	r3, r9
 8010866:	4606      	mov	r6, r0
 8010868:	460f      	mov	r7, r1
 801086a:	f7f0 f95d 	bl	8000b28 <__aeabi_dcmpgt>
 801086e:	b9c8      	cbnz	r0, 80108a4 <_dtoa_r+0x6e4>
 8010870:	4642      	mov	r2, r8
 8010872:	464b      	mov	r3, r9
 8010874:	4630      	mov	r0, r6
 8010876:	4639      	mov	r1, r7
 8010878:	f7f0 f92e 	bl	8000ad8 <__aeabi_dcmpeq>
 801087c:	b110      	cbz	r0, 8010884 <_dtoa_r+0x6c4>
 801087e:	9b01      	ldr	r3, [sp, #4]
 8010880:	07db      	lsls	r3, r3, #31
 8010882:	d40f      	bmi.n	80108a4 <_dtoa_r+0x6e4>
 8010884:	4651      	mov	r1, sl
 8010886:	4620      	mov	r0, r4
 8010888:	f000 fb18 	bl	8010ebc <_Bfree>
 801088c:	2300      	movs	r3, #0
 801088e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010890:	702b      	strb	r3, [r5, #0]
 8010892:	f10b 0301 	add.w	r3, fp, #1
 8010896:	6013      	str	r3, [r2, #0]
 8010898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801089a:	2b00      	cmp	r3, #0
 801089c:	f43f ace2 	beq.w	8010264 <_dtoa_r+0xa4>
 80108a0:	601d      	str	r5, [r3, #0]
 80108a2:	e4df      	b.n	8010264 <_dtoa_r+0xa4>
 80108a4:	465f      	mov	r7, fp
 80108a6:	462b      	mov	r3, r5
 80108a8:	461d      	mov	r5, r3
 80108aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108ae:	2a39      	cmp	r2, #57	; 0x39
 80108b0:	d106      	bne.n	80108c0 <_dtoa_r+0x700>
 80108b2:	9a00      	ldr	r2, [sp, #0]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d1f7      	bne.n	80108a8 <_dtoa_r+0x6e8>
 80108b8:	9900      	ldr	r1, [sp, #0]
 80108ba:	2230      	movs	r2, #48	; 0x30
 80108bc:	3701      	adds	r7, #1
 80108be:	700a      	strb	r2, [r1, #0]
 80108c0:	781a      	ldrb	r2, [r3, #0]
 80108c2:	3201      	adds	r2, #1
 80108c4:	701a      	strb	r2, [r3, #0]
 80108c6:	e790      	b.n	80107ea <_dtoa_r+0x62a>
 80108c8:	4ba3      	ldr	r3, [pc, #652]	; (8010b58 <_dtoa_r+0x998>)
 80108ca:	2200      	movs	r2, #0
 80108cc:	f7ef fe9c 	bl	8000608 <__aeabi_dmul>
 80108d0:	2200      	movs	r2, #0
 80108d2:	2300      	movs	r3, #0
 80108d4:	4606      	mov	r6, r0
 80108d6:	460f      	mov	r7, r1
 80108d8:	f7f0 f8fe 	bl	8000ad8 <__aeabi_dcmpeq>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d09e      	beq.n	801081e <_dtoa_r+0x65e>
 80108e0:	e7d0      	b.n	8010884 <_dtoa_r+0x6c4>
 80108e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108e4:	2a00      	cmp	r2, #0
 80108e6:	f000 80ca 	beq.w	8010a7e <_dtoa_r+0x8be>
 80108ea:	9a07      	ldr	r2, [sp, #28]
 80108ec:	2a01      	cmp	r2, #1
 80108ee:	f300 80ad 	bgt.w	8010a4c <_dtoa_r+0x88c>
 80108f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108f4:	2a00      	cmp	r2, #0
 80108f6:	f000 80a5 	beq.w	8010a44 <_dtoa_r+0x884>
 80108fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80108fe:	9e08      	ldr	r6, [sp, #32]
 8010900:	9d05      	ldr	r5, [sp, #20]
 8010902:	9a05      	ldr	r2, [sp, #20]
 8010904:	441a      	add	r2, r3
 8010906:	9205      	str	r2, [sp, #20]
 8010908:	9a06      	ldr	r2, [sp, #24]
 801090a:	2101      	movs	r1, #1
 801090c:	441a      	add	r2, r3
 801090e:	4620      	mov	r0, r4
 8010910:	9206      	str	r2, [sp, #24]
 8010912:	f000 fb89 	bl	8011028 <__i2b>
 8010916:	4607      	mov	r7, r0
 8010918:	b165      	cbz	r5, 8010934 <_dtoa_r+0x774>
 801091a:	9b06      	ldr	r3, [sp, #24]
 801091c:	2b00      	cmp	r3, #0
 801091e:	dd09      	ble.n	8010934 <_dtoa_r+0x774>
 8010920:	42ab      	cmp	r3, r5
 8010922:	9a05      	ldr	r2, [sp, #20]
 8010924:	bfa8      	it	ge
 8010926:	462b      	movge	r3, r5
 8010928:	1ad2      	subs	r2, r2, r3
 801092a:	9205      	str	r2, [sp, #20]
 801092c:	9a06      	ldr	r2, [sp, #24]
 801092e:	1aed      	subs	r5, r5, r3
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	9306      	str	r3, [sp, #24]
 8010934:	9b08      	ldr	r3, [sp, #32]
 8010936:	b1f3      	cbz	r3, 8010976 <_dtoa_r+0x7b6>
 8010938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801093a:	2b00      	cmp	r3, #0
 801093c:	f000 80a3 	beq.w	8010a86 <_dtoa_r+0x8c6>
 8010940:	2e00      	cmp	r6, #0
 8010942:	dd10      	ble.n	8010966 <_dtoa_r+0x7a6>
 8010944:	4639      	mov	r1, r7
 8010946:	4632      	mov	r2, r6
 8010948:	4620      	mov	r0, r4
 801094a:	f000 fc2d 	bl	80111a8 <__pow5mult>
 801094e:	4652      	mov	r2, sl
 8010950:	4601      	mov	r1, r0
 8010952:	4607      	mov	r7, r0
 8010954:	4620      	mov	r0, r4
 8010956:	f000 fb7d 	bl	8011054 <__multiply>
 801095a:	4651      	mov	r1, sl
 801095c:	4680      	mov	r8, r0
 801095e:	4620      	mov	r0, r4
 8010960:	f000 faac 	bl	8010ebc <_Bfree>
 8010964:	46c2      	mov	sl, r8
 8010966:	9b08      	ldr	r3, [sp, #32]
 8010968:	1b9a      	subs	r2, r3, r6
 801096a:	d004      	beq.n	8010976 <_dtoa_r+0x7b6>
 801096c:	4651      	mov	r1, sl
 801096e:	4620      	mov	r0, r4
 8010970:	f000 fc1a 	bl	80111a8 <__pow5mult>
 8010974:	4682      	mov	sl, r0
 8010976:	2101      	movs	r1, #1
 8010978:	4620      	mov	r0, r4
 801097a:	f000 fb55 	bl	8011028 <__i2b>
 801097e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010980:	2b00      	cmp	r3, #0
 8010982:	4606      	mov	r6, r0
 8010984:	f340 8081 	ble.w	8010a8a <_dtoa_r+0x8ca>
 8010988:	461a      	mov	r2, r3
 801098a:	4601      	mov	r1, r0
 801098c:	4620      	mov	r0, r4
 801098e:	f000 fc0b 	bl	80111a8 <__pow5mult>
 8010992:	9b07      	ldr	r3, [sp, #28]
 8010994:	2b01      	cmp	r3, #1
 8010996:	4606      	mov	r6, r0
 8010998:	dd7a      	ble.n	8010a90 <_dtoa_r+0x8d0>
 801099a:	f04f 0800 	mov.w	r8, #0
 801099e:	6933      	ldr	r3, [r6, #16]
 80109a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80109a4:	6918      	ldr	r0, [r3, #16]
 80109a6:	f000 faf1 	bl	8010f8c <__hi0bits>
 80109aa:	f1c0 0020 	rsb	r0, r0, #32
 80109ae:	9b06      	ldr	r3, [sp, #24]
 80109b0:	4418      	add	r0, r3
 80109b2:	f010 001f 	ands.w	r0, r0, #31
 80109b6:	f000 8094 	beq.w	8010ae2 <_dtoa_r+0x922>
 80109ba:	f1c0 0320 	rsb	r3, r0, #32
 80109be:	2b04      	cmp	r3, #4
 80109c0:	f340 8085 	ble.w	8010ace <_dtoa_r+0x90e>
 80109c4:	9b05      	ldr	r3, [sp, #20]
 80109c6:	f1c0 001c 	rsb	r0, r0, #28
 80109ca:	4403      	add	r3, r0
 80109cc:	9305      	str	r3, [sp, #20]
 80109ce:	9b06      	ldr	r3, [sp, #24]
 80109d0:	4403      	add	r3, r0
 80109d2:	4405      	add	r5, r0
 80109d4:	9306      	str	r3, [sp, #24]
 80109d6:	9b05      	ldr	r3, [sp, #20]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	dd05      	ble.n	80109e8 <_dtoa_r+0x828>
 80109dc:	4651      	mov	r1, sl
 80109de:	461a      	mov	r2, r3
 80109e0:	4620      	mov	r0, r4
 80109e2:	f000 fc3b 	bl	801125c <__lshift>
 80109e6:	4682      	mov	sl, r0
 80109e8:	9b06      	ldr	r3, [sp, #24]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	dd05      	ble.n	80109fa <_dtoa_r+0x83a>
 80109ee:	4631      	mov	r1, r6
 80109f0:	461a      	mov	r2, r3
 80109f2:	4620      	mov	r0, r4
 80109f4:	f000 fc32 	bl	801125c <__lshift>
 80109f8:	4606      	mov	r6, r0
 80109fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d072      	beq.n	8010ae6 <_dtoa_r+0x926>
 8010a00:	4631      	mov	r1, r6
 8010a02:	4650      	mov	r0, sl
 8010a04:	f000 fc96 	bl	8011334 <__mcmp>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	da6c      	bge.n	8010ae6 <_dtoa_r+0x926>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	4651      	mov	r1, sl
 8010a10:	220a      	movs	r2, #10
 8010a12:	4620      	mov	r0, r4
 8010a14:	f000 fa74 	bl	8010f00 <__multadd>
 8010a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010a1e:	4682      	mov	sl, r0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 81b0 	beq.w	8010d86 <_dtoa_r+0xbc6>
 8010a26:	2300      	movs	r3, #0
 8010a28:	4639      	mov	r1, r7
 8010a2a:	220a      	movs	r2, #10
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f000 fa67 	bl	8010f00 <__multadd>
 8010a32:	9b01      	ldr	r3, [sp, #4]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	4607      	mov	r7, r0
 8010a38:	f300 8096 	bgt.w	8010b68 <_dtoa_r+0x9a8>
 8010a3c:	9b07      	ldr	r3, [sp, #28]
 8010a3e:	2b02      	cmp	r3, #2
 8010a40:	dc59      	bgt.n	8010af6 <_dtoa_r+0x936>
 8010a42:	e091      	b.n	8010b68 <_dtoa_r+0x9a8>
 8010a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a4a:	e758      	b.n	80108fe <_dtoa_r+0x73e>
 8010a4c:	9b04      	ldr	r3, [sp, #16]
 8010a4e:	1e5e      	subs	r6, r3, #1
 8010a50:	9b08      	ldr	r3, [sp, #32]
 8010a52:	42b3      	cmp	r3, r6
 8010a54:	bfbf      	itttt	lt
 8010a56:	9b08      	ldrlt	r3, [sp, #32]
 8010a58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010a5a:	9608      	strlt	r6, [sp, #32]
 8010a5c:	1af3      	sublt	r3, r6, r3
 8010a5e:	bfb4      	ite	lt
 8010a60:	18d2      	addlt	r2, r2, r3
 8010a62:	1b9e      	subge	r6, r3, r6
 8010a64:	9b04      	ldr	r3, [sp, #16]
 8010a66:	bfbc      	itt	lt
 8010a68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010a6a:	2600      	movlt	r6, #0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	bfb7      	itett	lt
 8010a70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010a74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010a78:	1a9d      	sublt	r5, r3, r2
 8010a7a:	2300      	movlt	r3, #0
 8010a7c:	e741      	b.n	8010902 <_dtoa_r+0x742>
 8010a7e:	9e08      	ldr	r6, [sp, #32]
 8010a80:	9d05      	ldr	r5, [sp, #20]
 8010a82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010a84:	e748      	b.n	8010918 <_dtoa_r+0x758>
 8010a86:	9a08      	ldr	r2, [sp, #32]
 8010a88:	e770      	b.n	801096c <_dtoa_r+0x7ac>
 8010a8a:	9b07      	ldr	r3, [sp, #28]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	dc19      	bgt.n	8010ac4 <_dtoa_r+0x904>
 8010a90:	9b02      	ldr	r3, [sp, #8]
 8010a92:	b9bb      	cbnz	r3, 8010ac4 <_dtoa_r+0x904>
 8010a94:	9b03      	ldr	r3, [sp, #12]
 8010a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a9a:	b99b      	cbnz	r3, 8010ac4 <_dtoa_r+0x904>
 8010a9c:	9b03      	ldr	r3, [sp, #12]
 8010a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010aa2:	0d1b      	lsrs	r3, r3, #20
 8010aa4:	051b      	lsls	r3, r3, #20
 8010aa6:	b183      	cbz	r3, 8010aca <_dtoa_r+0x90a>
 8010aa8:	9b05      	ldr	r3, [sp, #20]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	9305      	str	r3, [sp, #20]
 8010aae:	9b06      	ldr	r3, [sp, #24]
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	9306      	str	r3, [sp, #24]
 8010ab4:	f04f 0801 	mov.w	r8, #1
 8010ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f47f af6f 	bne.w	801099e <_dtoa_r+0x7de>
 8010ac0:	2001      	movs	r0, #1
 8010ac2:	e774      	b.n	80109ae <_dtoa_r+0x7ee>
 8010ac4:	f04f 0800 	mov.w	r8, #0
 8010ac8:	e7f6      	b.n	8010ab8 <_dtoa_r+0x8f8>
 8010aca:	4698      	mov	r8, r3
 8010acc:	e7f4      	b.n	8010ab8 <_dtoa_r+0x8f8>
 8010ace:	d082      	beq.n	80109d6 <_dtoa_r+0x816>
 8010ad0:	9a05      	ldr	r2, [sp, #20]
 8010ad2:	331c      	adds	r3, #28
 8010ad4:	441a      	add	r2, r3
 8010ad6:	9205      	str	r2, [sp, #20]
 8010ad8:	9a06      	ldr	r2, [sp, #24]
 8010ada:	441a      	add	r2, r3
 8010adc:	441d      	add	r5, r3
 8010ade:	9206      	str	r2, [sp, #24]
 8010ae0:	e779      	b.n	80109d6 <_dtoa_r+0x816>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	e7f4      	b.n	8010ad0 <_dtoa_r+0x910>
 8010ae6:	9b04      	ldr	r3, [sp, #16]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	dc37      	bgt.n	8010b5c <_dtoa_r+0x99c>
 8010aec:	9b07      	ldr	r3, [sp, #28]
 8010aee:	2b02      	cmp	r3, #2
 8010af0:	dd34      	ble.n	8010b5c <_dtoa_r+0x99c>
 8010af2:	9b04      	ldr	r3, [sp, #16]
 8010af4:	9301      	str	r3, [sp, #4]
 8010af6:	9b01      	ldr	r3, [sp, #4]
 8010af8:	b963      	cbnz	r3, 8010b14 <_dtoa_r+0x954>
 8010afa:	4631      	mov	r1, r6
 8010afc:	2205      	movs	r2, #5
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 f9fe 	bl	8010f00 <__multadd>
 8010b04:	4601      	mov	r1, r0
 8010b06:	4606      	mov	r6, r0
 8010b08:	4650      	mov	r0, sl
 8010b0a:	f000 fc13 	bl	8011334 <__mcmp>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	f73f adbb 	bgt.w	801068a <_dtoa_r+0x4ca>
 8010b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b16:	9d00      	ldr	r5, [sp, #0]
 8010b18:	ea6f 0b03 	mvn.w	fp, r3
 8010b1c:	f04f 0800 	mov.w	r8, #0
 8010b20:	4631      	mov	r1, r6
 8010b22:	4620      	mov	r0, r4
 8010b24:	f000 f9ca 	bl	8010ebc <_Bfree>
 8010b28:	2f00      	cmp	r7, #0
 8010b2a:	f43f aeab 	beq.w	8010884 <_dtoa_r+0x6c4>
 8010b2e:	f1b8 0f00 	cmp.w	r8, #0
 8010b32:	d005      	beq.n	8010b40 <_dtoa_r+0x980>
 8010b34:	45b8      	cmp	r8, r7
 8010b36:	d003      	beq.n	8010b40 <_dtoa_r+0x980>
 8010b38:	4641      	mov	r1, r8
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f000 f9be 	bl	8010ebc <_Bfree>
 8010b40:	4639      	mov	r1, r7
 8010b42:	4620      	mov	r0, r4
 8010b44:	f000 f9ba 	bl	8010ebc <_Bfree>
 8010b48:	e69c      	b.n	8010884 <_dtoa_r+0x6c4>
 8010b4a:	2600      	movs	r6, #0
 8010b4c:	4637      	mov	r7, r6
 8010b4e:	e7e1      	b.n	8010b14 <_dtoa_r+0x954>
 8010b50:	46bb      	mov	fp, r7
 8010b52:	4637      	mov	r7, r6
 8010b54:	e599      	b.n	801068a <_dtoa_r+0x4ca>
 8010b56:	bf00      	nop
 8010b58:	40240000 	.word	0x40240000
 8010b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f000 80c8 	beq.w	8010cf4 <_dtoa_r+0xb34>
 8010b64:	9b04      	ldr	r3, [sp, #16]
 8010b66:	9301      	str	r3, [sp, #4]
 8010b68:	2d00      	cmp	r5, #0
 8010b6a:	dd05      	ble.n	8010b78 <_dtoa_r+0x9b8>
 8010b6c:	4639      	mov	r1, r7
 8010b6e:	462a      	mov	r2, r5
 8010b70:	4620      	mov	r0, r4
 8010b72:	f000 fb73 	bl	801125c <__lshift>
 8010b76:	4607      	mov	r7, r0
 8010b78:	f1b8 0f00 	cmp.w	r8, #0
 8010b7c:	d05b      	beq.n	8010c36 <_dtoa_r+0xa76>
 8010b7e:	6879      	ldr	r1, [r7, #4]
 8010b80:	4620      	mov	r0, r4
 8010b82:	f000 f95b 	bl	8010e3c <_Balloc>
 8010b86:	4605      	mov	r5, r0
 8010b88:	b928      	cbnz	r0, 8010b96 <_dtoa_r+0x9d6>
 8010b8a:	4b83      	ldr	r3, [pc, #524]	; (8010d98 <_dtoa_r+0xbd8>)
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010b92:	f7ff bb2e 	b.w	80101f2 <_dtoa_r+0x32>
 8010b96:	693a      	ldr	r2, [r7, #16]
 8010b98:	3202      	adds	r2, #2
 8010b9a:	0092      	lsls	r2, r2, #2
 8010b9c:	f107 010c 	add.w	r1, r7, #12
 8010ba0:	300c      	adds	r0, #12
 8010ba2:	f7ff fa77 	bl	8010094 <memcpy>
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	4629      	mov	r1, r5
 8010baa:	4620      	mov	r0, r4
 8010bac:	f000 fb56 	bl	801125c <__lshift>
 8010bb0:	9b00      	ldr	r3, [sp, #0]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	9304      	str	r3, [sp, #16]
 8010bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bba:	4413      	add	r3, r2
 8010bbc:	9308      	str	r3, [sp, #32]
 8010bbe:	9b02      	ldr	r3, [sp, #8]
 8010bc0:	f003 0301 	and.w	r3, r3, #1
 8010bc4:	46b8      	mov	r8, r7
 8010bc6:	9306      	str	r3, [sp, #24]
 8010bc8:	4607      	mov	r7, r0
 8010bca:	9b04      	ldr	r3, [sp, #16]
 8010bcc:	4631      	mov	r1, r6
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	4650      	mov	r0, sl
 8010bd2:	9301      	str	r3, [sp, #4]
 8010bd4:	f7ff fa6c 	bl	80100b0 <quorem>
 8010bd8:	4641      	mov	r1, r8
 8010bda:	9002      	str	r0, [sp, #8]
 8010bdc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010be0:	4650      	mov	r0, sl
 8010be2:	f000 fba7 	bl	8011334 <__mcmp>
 8010be6:	463a      	mov	r2, r7
 8010be8:	9005      	str	r0, [sp, #20]
 8010bea:	4631      	mov	r1, r6
 8010bec:	4620      	mov	r0, r4
 8010bee:	f000 fbbd 	bl	801136c <__mdiff>
 8010bf2:	68c2      	ldr	r2, [r0, #12]
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	bb02      	cbnz	r2, 8010c3a <_dtoa_r+0xa7a>
 8010bf8:	4601      	mov	r1, r0
 8010bfa:	4650      	mov	r0, sl
 8010bfc:	f000 fb9a 	bl	8011334 <__mcmp>
 8010c00:	4602      	mov	r2, r0
 8010c02:	4629      	mov	r1, r5
 8010c04:	4620      	mov	r0, r4
 8010c06:	9209      	str	r2, [sp, #36]	; 0x24
 8010c08:	f000 f958 	bl	8010ebc <_Bfree>
 8010c0c:	9b07      	ldr	r3, [sp, #28]
 8010c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c10:	9d04      	ldr	r5, [sp, #16]
 8010c12:	ea43 0102 	orr.w	r1, r3, r2
 8010c16:	9b06      	ldr	r3, [sp, #24]
 8010c18:	4319      	orrs	r1, r3
 8010c1a:	d110      	bne.n	8010c3e <_dtoa_r+0xa7e>
 8010c1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010c20:	d029      	beq.n	8010c76 <_dtoa_r+0xab6>
 8010c22:	9b05      	ldr	r3, [sp, #20]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	dd02      	ble.n	8010c2e <_dtoa_r+0xa6e>
 8010c28:	9b02      	ldr	r3, [sp, #8]
 8010c2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	f883 9000 	strb.w	r9, [r3]
 8010c34:	e774      	b.n	8010b20 <_dtoa_r+0x960>
 8010c36:	4638      	mov	r0, r7
 8010c38:	e7ba      	b.n	8010bb0 <_dtoa_r+0x9f0>
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	e7e1      	b.n	8010c02 <_dtoa_r+0xa42>
 8010c3e:	9b05      	ldr	r3, [sp, #20]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	db04      	blt.n	8010c4e <_dtoa_r+0xa8e>
 8010c44:	9907      	ldr	r1, [sp, #28]
 8010c46:	430b      	orrs	r3, r1
 8010c48:	9906      	ldr	r1, [sp, #24]
 8010c4a:	430b      	orrs	r3, r1
 8010c4c:	d120      	bne.n	8010c90 <_dtoa_r+0xad0>
 8010c4e:	2a00      	cmp	r2, #0
 8010c50:	dded      	ble.n	8010c2e <_dtoa_r+0xa6e>
 8010c52:	4651      	mov	r1, sl
 8010c54:	2201      	movs	r2, #1
 8010c56:	4620      	mov	r0, r4
 8010c58:	f000 fb00 	bl	801125c <__lshift>
 8010c5c:	4631      	mov	r1, r6
 8010c5e:	4682      	mov	sl, r0
 8010c60:	f000 fb68 	bl	8011334 <__mcmp>
 8010c64:	2800      	cmp	r0, #0
 8010c66:	dc03      	bgt.n	8010c70 <_dtoa_r+0xab0>
 8010c68:	d1e1      	bne.n	8010c2e <_dtoa_r+0xa6e>
 8010c6a:	f019 0f01 	tst.w	r9, #1
 8010c6e:	d0de      	beq.n	8010c2e <_dtoa_r+0xa6e>
 8010c70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010c74:	d1d8      	bne.n	8010c28 <_dtoa_r+0xa68>
 8010c76:	9a01      	ldr	r2, [sp, #4]
 8010c78:	2339      	movs	r3, #57	; 0x39
 8010c7a:	7013      	strb	r3, [r2, #0]
 8010c7c:	462b      	mov	r3, r5
 8010c7e:	461d      	mov	r5, r3
 8010c80:	3b01      	subs	r3, #1
 8010c82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010c86:	2a39      	cmp	r2, #57	; 0x39
 8010c88:	d06c      	beq.n	8010d64 <_dtoa_r+0xba4>
 8010c8a:	3201      	adds	r2, #1
 8010c8c:	701a      	strb	r2, [r3, #0]
 8010c8e:	e747      	b.n	8010b20 <_dtoa_r+0x960>
 8010c90:	2a00      	cmp	r2, #0
 8010c92:	dd07      	ble.n	8010ca4 <_dtoa_r+0xae4>
 8010c94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010c98:	d0ed      	beq.n	8010c76 <_dtoa_r+0xab6>
 8010c9a:	9a01      	ldr	r2, [sp, #4]
 8010c9c:	f109 0301 	add.w	r3, r9, #1
 8010ca0:	7013      	strb	r3, [r2, #0]
 8010ca2:	e73d      	b.n	8010b20 <_dtoa_r+0x960>
 8010ca4:	9b04      	ldr	r3, [sp, #16]
 8010ca6:	9a08      	ldr	r2, [sp, #32]
 8010ca8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d043      	beq.n	8010d38 <_dtoa_r+0xb78>
 8010cb0:	4651      	mov	r1, sl
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	220a      	movs	r2, #10
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f000 f922 	bl	8010f00 <__multadd>
 8010cbc:	45b8      	cmp	r8, r7
 8010cbe:	4682      	mov	sl, r0
 8010cc0:	f04f 0300 	mov.w	r3, #0
 8010cc4:	f04f 020a 	mov.w	r2, #10
 8010cc8:	4641      	mov	r1, r8
 8010cca:	4620      	mov	r0, r4
 8010ccc:	d107      	bne.n	8010cde <_dtoa_r+0xb1e>
 8010cce:	f000 f917 	bl	8010f00 <__multadd>
 8010cd2:	4680      	mov	r8, r0
 8010cd4:	4607      	mov	r7, r0
 8010cd6:	9b04      	ldr	r3, [sp, #16]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	9304      	str	r3, [sp, #16]
 8010cdc:	e775      	b.n	8010bca <_dtoa_r+0xa0a>
 8010cde:	f000 f90f 	bl	8010f00 <__multadd>
 8010ce2:	4639      	mov	r1, r7
 8010ce4:	4680      	mov	r8, r0
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	220a      	movs	r2, #10
 8010cea:	4620      	mov	r0, r4
 8010cec:	f000 f908 	bl	8010f00 <__multadd>
 8010cf0:	4607      	mov	r7, r0
 8010cf2:	e7f0      	b.n	8010cd6 <_dtoa_r+0xb16>
 8010cf4:	9b04      	ldr	r3, [sp, #16]
 8010cf6:	9301      	str	r3, [sp, #4]
 8010cf8:	9d00      	ldr	r5, [sp, #0]
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4650      	mov	r0, sl
 8010cfe:	f7ff f9d7 	bl	80100b0 <quorem>
 8010d02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010d06:	9b00      	ldr	r3, [sp, #0]
 8010d08:	f805 9b01 	strb.w	r9, [r5], #1
 8010d0c:	1aea      	subs	r2, r5, r3
 8010d0e:	9b01      	ldr	r3, [sp, #4]
 8010d10:	4293      	cmp	r3, r2
 8010d12:	dd07      	ble.n	8010d24 <_dtoa_r+0xb64>
 8010d14:	4651      	mov	r1, sl
 8010d16:	2300      	movs	r3, #0
 8010d18:	220a      	movs	r2, #10
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f000 f8f0 	bl	8010f00 <__multadd>
 8010d20:	4682      	mov	sl, r0
 8010d22:	e7ea      	b.n	8010cfa <_dtoa_r+0xb3a>
 8010d24:	9b01      	ldr	r3, [sp, #4]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	bfc8      	it	gt
 8010d2a:	461d      	movgt	r5, r3
 8010d2c:	9b00      	ldr	r3, [sp, #0]
 8010d2e:	bfd8      	it	le
 8010d30:	2501      	movle	r5, #1
 8010d32:	441d      	add	r5, r3
 8010d34:	f04f 0800 	mov.w	r8, #0
 8010d38:	4651      	mov	r1, sl
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	f000 fa8d 	bl	801125c <__lshift>
 8010d42:	4631      	mov	r1, r6
 8010d44:	4682      	mov	sl, r0
 8010d46:	f000 faf5 	bl	8011334 <__mcmp>
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	dc96      	bgt.n	8010c7c <_dtoa_r+0xabc>
 8010d4e:	d102      	bne.n	8010d56 <_dtoa_r+0xb96>
 8010d50:	f019 0f01 	tst.w	r9, #1
 8010d54:	d192      	bne.n	8010c7c <_dtoa_r+0xabc>
 8010d56:	462b      	mov	r3, r5
 8010d58:	461d      	mov	r5, r3
 8010d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d5e:	2a30      	cmp	r2, #48	; 0x30
 8010d60:	d0fa      	beq.n	8010d58 <_dtoa_r+0xb98>
 8010d62:	e6dd      	b.n	8010b20 <_dtoa_r+0x960>
 8010d64:	9a00      	ldr	r2, [sp, #0]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d189      	bne.n	8010c7e <_dtoa_r+0xabe>
 8010d6a:	f10b 0b01 	add.w	fp, fp, #1
 8010d6e:	2331      	movs	r3, #49	; 0x31
 8010d70:	e796      	b.n	8010ca0 <_dtoa_r+0xae0>
 8010d72:	4b0a      	ldr	r3, [pc, #40]	; (8010d9c <_dtoa_r+0xbdc>)
 8010d74:	f7ff ba99 	b.w	80102aa <_dtoa_r+0xea>
 8010d78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f47f aa6d 	bne.w	801025a <_dtoa_r+0x9a>
 8010d80:	4b07      	ldr	r3, [pc, #28]	; (8010da0 <_dtoa_r+0xbe0>)
 8010d82:	f7ff ba92 	b.w	80102aa <_dtoa_r+0xea>
 8010d86:	9b01      	ldr	r3, [sp, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	dcb5      	bgt.n	8010cf8 <_dtoa_r+0xb38>
 8010d8c:	9b07      	ldr	r3, [sp, #28]
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	f73f aeb1 	bgt.w	8010af6 <_dtoa_r+0x936>
 8010d94:	e7b0      	b.n	8010cf8 <_dtoa_r+0xb38>
 8010d96:	bf00      	nop
 8010d98:	0801283c 	.word	0x0801283c
 8010d9c:	0801279c 	.word	0x0801279c
 8010da0:	080127c0 	.word	0x080127c0

08010da4 <_free_r>:
 8010da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010da6:	2900      	cmp	r1, #0
 8010da8:	d044      	beq.n	8010e34 <_free_r+0x90>
 8010daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dae:	9001      	str	r0, [sp, #4]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f1a1 0404 	sub.w	r4, r1, #4
 8010db6:	bfb8      	it	lt
 8010db8:	18e4      	addlt	r4, r4, r3
 8010dba:	f7fe fb49 	bl	800f450 <__malloc_lock>
 8010dbe:	4a1e      	ldr	r2, [pc, #120]	; (8010e38 <_free_r+0x94>)
 8010dc0:	9801      	ldr	r0, [sp, #4]
 8010dc2:	6813      	ldr	r3, [r2, #0]
 8010dc4:	b933      	cbnz	r3, 8010dd4 <_free_r+0x30>
 8010dc6:	6063      	str	r3, [r4, #4]
 8010dc8:	6014      	str	r4, [r2, #0]
 8010dca:	b003      	add	sp, #12
 8010dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dd0:	f7fe bb44 	b.w	800f45c <__malloc_unlock>
 8010dd4:	42a3      	cmp	r3, r4
 8010dd6:	d908      	bls.n	8010dea <_free_r+0x46>
 8010dd8:	6825      	ldr	r5, [r4, #0]
 8010dda:	1961      	adds	r1, r4, r5
 8010ddc:	428b      	cmp	r3, r1
 8010dde:	bf01      	itttt	eq
 8010de0:	6819      	ldreq	r1, [r3, #0]
 8010de2:	685b      	ldreq	r3, [r3, #4]
 8010de4:	1949      	addeq	r1, r1, r5
 8010de6:	6021      	streq	r1, [r4, #0]
 8010de8:	e7ed      	b.n	8010dc6 <_free_r+0x22>
 8010dea:	461a      	mov	r2, r3
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	b10b      	cbz	r3, 8010df4 <_free_r+0x50>
 8010df0:	42a3      	cmp	r3, r4
 8010df2:	d9fa      	bls.n	8010dea <_free_r+0x46>
 8010df4:	6811      	ldr	r1, [r2, #0]
 8010df6:	1855      	adds	r5, r2, r1
 8010df8:	42a5      	cmp	r5, r4
 8010dfa:	d10b      	bne.n	8010e14 <_free_r+0x70>
 8010dfc:	6824      	ldr	r4, [r4, #0]
 8010dfe:	4421      	add	r1, r4
 8010e00:	1854      	adds	r4, r2, r1
 8010e02:	42a3      	cmp	r3, r4
 8010e04:	6011      	str	r1, [r2, #0]
 8010e06:	d1e0      	bne.n	8010dca <_free_r+0x26>
 8010e08:	681c      	ldr	r4, [r3, #0]
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	6053      	str	r3, [r2, #4]
 8010e0e:	440c      	add	r4, r1
 8010e10:	6014      	str	r4, [r2, #0]
 8010e12:	e7da      	b.n	8010dca <_free_r+0x26>
 8010e14:	d902      	bls.n	8010e1c <_free_r+0x78>
 8010e16:	230c      	movs	r3, #12
 8010e18:	6003      	str	r3, [r0, #0]
 8010e1a:	e7d6      	b.n	8010dca <_free_r+0x26>
 8010e1c:	6825      	ldr	r5, [r4, #0]
 8010e1e:	1961      	adds	r1, r4, r5
 8010e20:	428b      	cmp	r3, r1
 8010e22:	bf04      	itt	eq
 8010e24:	6819      	ldreq	r1, [r3, #0]
 8010e26:	685b      	ldreq	r3, [r3, #4]
 8010e28:	6063      	str	r3, [r4, #4]
 8010e2a:	bf04      	itt	eq
 8010e2c:	1949      	addeq	r1, r1, r5
 8010e2e:	6021      	streq	r1, [r4, #0]
 8010e30:	6054      	str	r4, [r2, #4]
 8010e32:	e7ca      	b.n	8010dca <_free_r+0x26>
 8010e34:	b003      	add	sp, #12
 8010e36:	bd30      	pop	{r4, r5, pc}
 8010e38:	20002298 	.word	0x20002298

08010e3c <_Balloc>:
 8010e3c:	b570      	push	{r4, r5, r6, lr}
 8010e3e:	69c6      	ldr	r6, [r0, #28]
 8010e40:	4604      	mov	r4, r0
 8010e42:	460d      	mov	r5, r1
 8010e44:	b976      	cbnz	r6, 8010e64 <_Balloc+0x28>
 8010e46:	2010      	movs	r0, #16
 8010e48:	f7fe fa52 	bl	800f2f0 <malloc>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	61e0      	str	r0, [r4, #28]
 8010e50:	b920      	cbnz	r0, 8010e5c <_Balloc+0x20>
 8010e52:	4b18      	ldr	r3, [pc, #96]	; (8010eb4 <_Balloc+0x78>)
 8010e54:	4818      	ldr	r0, [pc, #96]	; (8010eb8 <_Balloc+0x7c>)
 8010e56:	216b      	movs	r1, #107	; 0x6b
 8010e58:	f000 fd8c 	bl	8011974 <__assert_func>
 8010e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e60:	6006      	str	r6, [r0, #0]
 8010e62:	60c6      	str	r6, [r0, #12]
 8010e64:	69e6      	ldr	r6, [r4, #28]
 8010e66:	68f3      	ldr	r3, [r6, #12]
 8010e68:	b183      	cbz	r3, 8010e8c <_Balloc+0x50>
 8010e6a:	69e3      	ldr	r3, [r4, #28]
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e72:	b9b8      	cbnz	r0, 8010ea4 <_Balloc+0x68>
 8010e74:	2101      	movs	r1, #1
 8010e76:	fa01 f605 	lsl.w	r6, r1, r5
 8010e7a:	1d72      	adds	r2, r6, #5
 8010e7c:	0092      	lsls	r2, r2, #2
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f000 fd96 	bl	80119b0 <_calloc_r>
 8010e84:	b160      	cbz	r0, 8010ea0 <_Balloc+0x64>
 8010e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e8a:	e00e      	b.n	8010eaa <_Balloc+0x6e>
 8010e8c:	2221      	movs	r2, #33	; 0x21
 8010e8e:	2104      	movs	r1, #4
 8010e90:	4620      	mov	r0, r4
 8010e92:	f000 fd8d 	bl	80119b0 <_calloc_r>
 8010e96:	69e3      	ldr	r3, [r4, #28]
 8010e98:	60f0      	str	r0, [r6, #12]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1e4      	bne.n	8010e6a <_Balloc+0x2e>
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	bd70      	pop	{r4, r5, r6, pc}
 8010ea4:	6802      	ldr	r2, [r0, #0]
 8010ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010eaa:	2300      	movs	r3, #0
 8010eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010eb0:	e7f7      	b.n	8010ea2 <_Balloc+0x66>
 8010eb2:	bf00      	nop
 8010eb4:	080127cd 	.word	0x080127cd
 8010eb8:	0801284d 	.word	0x0801284d

08010ebc <_Bfree>:
 8010ebc:	b570      	push	{r4, r5, r6, lr}
 8010ebe:	69c6      	ldr	r6, [r0, #28]
 8010ec0:	4605      	mov	r5, r0
 8010ec2:	460c      	mov	r4, r1
 8010ec4:	b976      	cbnz	r6, 8010ee4 <_Bfree+0x28>
 8010ec6:	2010      	movs	r0, #16
 8010ec8:	f7fe fa12 	bl	800f2f0 <malloc>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	61e8      	str	r0, [r5, #28]
 8010ed0:	b920      	cbnz	r0, 8010edc <_Bfree+0x20>
 8010ed2:	4b09      	ldr	r3, [pc, #36]	; (8010ef8 <_Bfree+0x3c>)
 8010ed4:	4809      	ldr	r0, [pc, #36]	; (8010efc <_Bfree+0x40>)
 8010ed6:	218f      	movs	r1, #143	; 0x8f
 8010ed8:	f000 fd4c 	bl	8011974 <__assert_func>
 8010edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ee0:	6006      	str	r6, [r0, #0]
 8010ee2:	60c6      	str	r6, [r0, #12]
 8010ee4:	b13c      	cbz	r4, 8010ef6 <_Bfree+0x3a>
 8010ee6:	69eb      	ldr	r3, [r5, #28]
 8010ee8:	6862      	ldr	r2, [r4, #4]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ef0:	6021      	str	r1, [r4, #0]
 8010ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ef6:	bd70      	pop	{r4, r5, r6, pc}
 8010ef8:	080127cd 	.word	0x080127cd
 8010efc:	0801284d 	.word	0x0801284d

08010f00 <__multadd>:
 8010f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f04:	690d      	ldr	r5, [r1, #16]
 8010f06:	4607      	mov	r7, r0
 8010f08:	460c      	mov	r4, r1
 8010f0a:	461e      	mov	r6, r3
 8010f0c:	f101 0c14 	add.w	ip, r1, #20
 8010f10:	2000      	movs	r0, #0
 8010f12:	f8dc 3000 	ldr.w	r3, [ip]
 8010f16:	b299      	uxth	r1, r3
 8010f18:	fb02 6101 	mla	r1, r2, r1, r6
 8010f1c:	0c1e      	lsrs	r6, r3, #16
 8010f1e:	0c0b      	lsrs	r3, r1, #16
 8010f20:	fb02 3306 	mla	r3, r2, r6, r3
 8010f24:	b289      	uxth	r1, r1
 8010f26:	3001      	adds	r0, #1
 8010f28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f2c:	4285      	cmp	r5, r0
 8010f2e:	f84c 1b04 	str.w	r1, [ip], #4
 8010f32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f36:	dcec      	bgt.n	8010f12 <__multadd+0x12>
 8010f38:	b30e      	cbz	r6, 8010f7e <__multadd+0x7e>
 8010f3a:	68a3      	ldr	r3, [r4, #8]
 8010f3c:	42ab      	cmp	r3, r5
 8010f3e:	dc19      	bgt.n	8010f74 <__multadd+0x74>
 8010f40:	6861      	ldr	r1, [r4, #4]
 8010f42:	4638      	mov	r0, r7
 8010f44:	3101      	adds	r1, #1
 8010f46:	f7ff ff79 	bl	8010e3c <_Balloc>
 8010f4a:	4680      	mov	r8, r0
 8010f4c:	b928      	cbnz	r0, 8010f5a <__multadd+0x5a>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	4b0c      	ldr	r3, [pc, #48]	; (8010f84 <__multadd+0x84>)
 8010f52:	480d      	ldr	r0, [pc, #52]	; (8010f88 <__multadd+0x88>)
 8010f54:	21ba      	movs	r1, #186	; 0xba
 8010f56:	f000 fd0d 	bl	8011974 <__assert_func>
 8010f5a:	6922      	ldr	r2, [r4, #16]
 8010f5c:	3202      	adds	r2, #2
 8010f5e:	f104 010c 	add.w	r1, r4, #12
 8010f62:	0092      	lsls	r2, r2, #2
 8010f64:	300c      	adds	r0, #12
 8010f66:	f7ff f895 	bl	8010094 <memcpy>
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	4638      	mov	r0, r7
 8010f6e:	f7ff ffa5 	bl	8010ebc <_Bfree>
 8010f72:	4644      	mov	r4, r8
 8010f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f78:	3501      	adds	r5, #1
 8010f7a:	615e      	str	r6, [r3, #20]
 8010f7c:	6125      	str	r5, [r4, #16]
 8010f7e:	4620      	mov	r0, r4
 8010f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f84:	0801283c 	.word	0x0801283c
 8010f88:	0801284d 	.word	0x0801284d

08010f8c <__hi0bits>:
 8010f8c:	0c03      	lsrs	r3, r0, #16
 8010f8e:	041b      	lsls	r3, r3, #16
 8010f90:	b9d3      	cbnz	r3, 8010fc8 <__hi0bits+0x3c>
 8010f92:	0400      	lsls	r0, r0, #16
 8010f94:	2310      	movs	r3, #16
 8010f96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010f9a:	bf04      	itt	eq
 8010f9c:	0200      	lsleq	r0, r0, #8
 8010f9e:	3308      	addeq	r3, #8
 8010fa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010fa4:	bf04      	itt	eq
 8010fa6:	0100      	lsleq	r0, r0, #4
 8010fa8:	3304      	addeq	r3, #4
 8010faa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010fae:	bf04      	itt	eq
 8010fb0:	0080      	lsleq	r0, r0, #2
 8010fb2:	3302      	addeq	r3, #2
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	db05      	blt.n	8010fc4 <__hi0bits+0x38>
 8010fb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010fbc:	f103 0301 	add.w	r3, r3, #1
 8010fc0:	bf08      	it	eq
 8010fc2:	2320      	moveq	r3, #32
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	4770      	bx	lr
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e7e4      	b.n	8010f96 <__hi0bits+0xa>

08010fcc <__lo0bits>:
 8010fcc:	6803      	ldr	r3, [r0, #0]
 8010fce:	f013 0207 	ands.w	r2, r3, #7
 8010fd2:	d00c      	beq.n	8010fee <__lo0bits+0x22>
 8010fd4:	07d9      	lsls	r1, r3, #31
 8010fd6:	d422      	bmi.n	801101e <__lo0bits+0x52>
 8010fd8:	079a      	lsls	r2, r3, #30
 8010fda:	bf49      	itett	mi
 8010fdc:	085b      	lsrmi	r3, r3, #1
 8010fde:	089b      	lsrpl	r3, r3, #2
 8010fe0:	6003      	strmi	r3, [r0, #0]
 8010fe2:	2201      	movmi	r2, #1
 8010fe4:	bf5c      	itt	pl
 8010fe6:	6003      	strpl	r3, [r0, #0]
 8010fe8:	2202      	movpl	r2, #2
 8010fea:	4610      	mov	r0, r2
 8010fec:	4770      	bx	lr
 8010fee:	b299      	uxth	r1, r3
 8010ff0:	b909      	cbnz	r1, 8010ff6 <__lo0bits+0x2a>
 8010ff2:	0c1b      	lsrs	r3, r3, #16
 8010ff4:	2210      	movs	r2, #16
 8010ff6:	b2d9      	uxtb	r1, r3
 8010ff8:	b909      	cbnz	r1, 8010ffe <__lo0bits+0x32>
 8010ffa:	3208      	adds	r2, #8
 8010ffc:	0a1b      	lsrs	r3, r3, #8
 8010ffe:	0719      	lsls	r1, r3, #28
 8011000:	bf04      	itt	eq
 8011002:	091b      	lsreq	r3, r3, #4
 8011004:	3204      	addeq	r2, #4
 8011006:	0799      	lsls	r1, r3, #30
 8011008:	bf04      	itt	eq
 801100a:	089b      	lsreq	r3, r3, #2
 801100c:	3202      	addeq	r2, #2
 801100e:	07d9      	lsls	r1, r3, #31
 8011010:	d403      	bmi.n	801101a <__lo0bits+0x4e>
 8011012:	085b      	lsrs	r3, r3, #1
 8011014:	f102 0201 	add.w	r2, r2, #1
 8011018:	d003      	beq.n	8011022 <__lo0bits+0x56>
 801101a:	6003      	str	r3, [r0, #0]
 801101c:	e7e5      	b.n	8010fea <__lo0bits+0x1e>
 801101e:	2200      	movs	r2, #0
 8011020:	e7e3      	b.n	8010fea <__lo0bits+0x1e>
 8011022:	2220      	movs	r2, #32
 8011024:	e7e1      	b.n	8010fea <__lo0bits+0x1e>
	...

08011028 <__i2b>:
 8011028:	b510      	push	{r4, lr}
 801102a:	460c      	mov	r4, r1
 801102c:	2101      	movs	r1, #1
 801102e:	f7ff ff05 	bl	8010e3c <_Balloc>
 8011032:	4602      	mov	r2, r0
 8011034:	b928      	cbnz	r0, 8011042 <__i2b+0x1a>
 8011036:	4b05      	ldr	r3, [pc, #20]	; (801104c <__i2b+0x24>)
 8011038:	4805      	ldr	r0, [pc, #20]	; (8011050 <__i2b+0x28>)
 801103a:	f240 1145 	movw	r1, #325	; 0x145
 801103e:	f000 fc99 	bl	8011974 <__assert_func>
 8011042:	2301      	movs	r3, #1
 8011044:	6144      	str	r4, [r0, #20]
 8011046:	6103      	str	r3, [r0, #16]
 8011048:	bd10      	pop	{r4, pc}
 801104a:	bf00      	nop
 801104c:	0801283c 	.word	0x0801283c
 8011050:	0801284d 	.word	0x0801284d

08011054 <__multiply>:
 8011054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011058:	4691      	mov	r9, r2
 801105a:	690a      	ldr	r2, [r1, #16]
 801105c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011060:	429a      	cmp	r2, r3
 8011062:	bfb8      	it	lt
 8011064:	460b      	movlt	r3, r1
 8011066:	460c      	mov	r4, r1
 8011068:	bfbc      	itt	lt
 801106a:	464c      	movlt	r4, r9
 801106c:	4699      	movlt	r9, r3
 801106e:	6927      	ldr	r7, [r4, #16]
 8011070:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011074:	68a3      	ldr	r3, [r4, #8]
 8011076:	6861      	ldr	r1, [r4, #4]
 8011078:	eb07 060a 	add.w	r6, r7, sl
 801107c:	42b3      	cmp	r3, r6
 801107e:	b085      	sub	sp, #20
 8011080:	bfb8      	it	lt
 8011082:	3101      	addlt	r1, #1
 8011084:	f7ff feda 	bl	8010e3c <_Balloc>
 8011088:	b930      	cbnz	r0, 8011098 <__multiply+0x44>
 801108a:	4602      	mov	r2, r0
 801108c:	4b44      	ldr	r3, [pc, #272]	; (80111a0 <__multiply+0x14c>)
 801108e:	4845      	ldr	r0, [pc, #276]	; (80111a4 <__multiply+0x150>)
 8011090:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011094:	f000 fc6e 	bl	8011974 <__assert_func>
 8011098:	f100 0514 	add.w	r5, r0, #20
 801109c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80110a0:	462b      	mov	r3, r5
 80110a2:	2200      	movs	r2, #0
 80110a4:	4543      	cmp	r3, r8
 80110a6:	d321      	bcc.n	80110ec <__multiply+0x98>
 80110a8:	f104 0314 	add.w	r3, r4, #20
 80110ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80110b0:	f109 0314 	add.w	r3, r9, #20
 80110b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80110b8:	9202      	str	r2, [sp, #8]
 80110ba:	1b3a      	subs	r2, r7, r4
 80110bc:	3a15      	subs	r2, #21
 80110be:	f022 0203 	bic.w	r2, r2, #3
 80110c2:	3204      	adds	r2, #4
 80110c4:	f104 0115 	add.w	r1, r4, #21
 80110c8:	428f      	cmp	r7, r1
 80110ca:	bf38      	it	cc
 80110cc:	2204      	movcc	r2, #4
 80110ce:	9201      	str	r2, [sp, #4]
 80110d0:	9a02      	ldr	r2, [sp, #8]
 80110d2:	9303      	str	r3, [sp, #12]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d80c      	bhi.n	80110f2 <__multiply+0x9e>
 80110d8:	2e00      	cmp	r6, #0
 80110da:	dd03      	ble.n	80110e4 <__multiply+0x90>
 80110dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d05b      	beq.n	801119c <__multiply+0x148>
 80110e4:	6106      	str	r6, [r0, #16]
 80110e6:	b005      	add	sp, #20
 80110e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ec:	f843 2b04 	str.w	r2, [r3], #4
 80110f0:	e7d8      	b.n	80110a4 <__multiply+0x50>
 80110f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80110f6:	f1ba 0f00 	cmp.w	sl, #0
 80110fa:	d024      	beq.n	8011146 <__multiply+0xf2>
 80110fc:	f104 0e14 	add.w	lr, r4, #20
 8011100:	46a9      	mov	r9, r5
 8011102:	f04f 0c00 	mov.w	ip, #0
 8011106:	f85e 2b04 	ldr.w	r2, [lr], #4
 801110a:	f8d9 1000 	ldr.w	r1, [r9]
 801110e:	fa1f fb82 	uxth.w	fp, r2
 8011112:	b289      	uxth	r1, r1
 8011114:	fb0a 110b 	mla	r1, sl, fp, r1
 8011118:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801111c:	f8d9 2000 	ldr.w	r2, [r9]
 8011120:	4461      	add	r1, ip
 8011122:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011126:	fb0a c20b 	mla	r2, sl, fp, ip
 801112a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801112e:	b289      	uxth	r1, r1
 8011130:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011134:	4577      	cmp	r7, lr
 8011136:	f849 1b04 	str.w	r1, [r9], #4
 801113a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801113e:	d8e2      	bhi.n	8011106 <__multiply+0xb2>
 8011140:	9a01      	ldr	r2, [sp, #4]
 8011142:	f845 c002 	str.w	ip, [r5, r2]
 8011146:	9a03      	ldr	r2, [sp, #12]
 8011148:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801114c:	3304      	adds	r3, #4
 801114e:	f1b9 0f00 	cmp.w	r9, #0
 8011152:	d021      	beq.n	8011198 <__multiply+0x144>
 8011154:	6829      	ldr	r1, [r5, #0]
 8011156:	f104 0c14 	add.w	ip, r4, #20
 801115a:	46ae      	mov	lr, r5
 801115c:	f04f 0a00 	mov.w	sl, #0
 8011160:	f8bc b000 	ldrh.w	fp, [ip]
 8011164:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011168:	fb09 220b 	mla	r2, r9, fp, r2
 801116c:	4452      	add	r2, sl
 801116e:	b289      	uxth	r1, r1
 8011170:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011174:	f84e 1b04 	str.w	r1, [lr], #4
 8011178:	f85c 1b04 	ldr.w	r1, [ip], #4
 801117c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011180:	f8be 1000 	ldrh.w	r1, [lr]
 8011184:	fb09 110a 	mla	r1, r9, sl, r1
 8011188:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801118c:	4567      	cmp	r7, ip
 801118e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011192:	d8e5      	bhi.n	8011160 <__multiply+0x10c>
 8011194:	9a01      	ldr	r2, [sp, #4]
 8011196:	50a9      	str	r1, [r5, r2]
 8011198:	3504      	adds	r5, #4
 801119a:	e799      	b.n	80110d0 <__multiply+0x7c>
 801119c:	3e01      	subs	r6, #1
 801119e:	e79b      	b.n	80110d8 <__multiply+0x84>
 80111a0:	0801283c 	.word	0x0801283c
 80111a4:	0801284d 	.word	0x0801284d

080111a8 <__pow5mult>:
 80111a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111ac:	4615      	mov	r5, r2
 80111ae:	f012 0203 	ands.w	r2, r2, #3
 80111b2:	4606      	mov	r6, r0
 80111b4:	460f      	mov	r7, r1
 80111b6:	d007      	beq.n	80111c8 <__pow5mult+0x20>
 80111b8:	4c25      	ldr	r4, [pc, #148]	; (8011250 <__pow5mult+0xa8>)
 80111ba:	3a01      	subs	r2, #1
 80111bc:	2300      	movs	r3, #0
 80111be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111c2:	f7ff fe9d 	bl	8010f00 <__multadd>
 80111c6:	4607      	mov	r7, r0
 80111c8:	10ad      	asrs	r5, r5, #2
 80111ca:	d03d      	beq.n	8011248 <__pow5mult+0xa0>
 80111cc:	69f4      	ldr	r4, [r6, #28]
 80111ce:	b97c      	cbnz	r4, 80111f0 <__pow5mult+0x48>
 80111d0:	2010      	movs	r0, #16
 80111d2:	f7fe f88d 	bl	800f2f0 <malloc>
 80111d6:	4602      	mov	r2, r0
 80111d8:	61f0      	str	r0, [r6, #28]
 80111da:	b928      	cbnz	r0, 80111e8 <__pow5mult+0x40>
 80111dc:	4b1d      	ldr	r3, [pc, #116]	; (8011254 <__pow5mult+0xac>)
 80111de:	481e      	ldr	r0, [pc, #120]	; (8011258 <__pow5mult+0xb0>)
 80111e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80111e4:	f000 fbc6 	bl	8011974 <__assert_func>
 80111e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111ec:	6004      	str	r4, [r0, #0]
 80111ee:	60c4      	str	r4, [r0, #12]
 80111f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80111f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111f8:	b94c      	cbnz	r4, 801120e <__pow5mult+0x66>
 80111fa:	f240 2171 	movw	r1, #625	; 0x271
 80111fe:	4630      	mov	r0, r6
 8011200:	f7ff ff12 	bl	8011028 <__i2b>
 8011204:	2300      	movs	r3, #0
 8011206:	f8c8 0008 	str.w	r0, [r8, #8]
 801120a:	4604      	mov	r4, r0
 801120c:	6003      	str	r3, [r0, #0]
 801120e:	f04f 0900 	mov.w	r9, #0
 8011212:	07eb      	lsls	r3, r5, #31
 8011214:	d50a      	bpl.n	801122c <__pow5mult+0x84>
 8011216:	4639      	mov	r1, r7
 8011218:	4622      	mov	r2, r4
 801121a:	4630      	mov	r0, r6
 801121c:	f7ff ff1a 	bl	8011054 <__multiply>
 8011220:	4639      	mov	r1, r7
 8011222:	4680      	mov	r8, r0
 8011224:	4630      	mov	r0, r6
 8011226:	f7ff fe49 	bl	8010ebc <_Bfree>
 801122a:	4647      	mov	r7, r8
 801122c:	106d      	asrs	r5, r5, #1
 801122e:	d00b      	beq.n	8011248 <__pow5mult+0xa0>
 8011230:	6820      	ldr	r0, [r4, #0]
 8011232:	b938      	cbnz	r0, 8011244 <__pow5mult+0x9c>
 8011234:	4622      	mov	r2, r4
 8011236:	4621      	mov	r1, r4
 8011238:	4630      	mov	r0, r6
 801123a:	f7ff ff0b 	bl	8011054 <__multiply>
 801123e:	6020      	str	r0, [r4, #0]
 8011240:	f8c0 9000 	str.w	r9, [r0]
 8011244:	4604      	mov	r4, r0
 8011246:	e7e4      	b.n	8011212 <__pow5mult+0x6a>
 8011248:	4638      	mov	r0, r7
 801124a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801124e:	bf00      	nop
 8011250:	08012998 	.word	0x08012998
 8011254:	080127cd 	.word	0x080127cd
 8011258:	0801284d 	.word	0x0801284d

0801125c <__lshift>:
 801125c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011260:	460c      	mov	r4, r1
 8011262:	6849      	ldr	r1, [r1, #4]
 8011264:	6923      	ldr	r3, [r4, #16]
 8011266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801126a:	68a3      	ldr	r3, [r4, #8]
 801126c:	4607      	mov	r7, r0
 801126e:	4691      	mov	r9, r2
 8011270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011274:	f108 0601 	add.w	r6, r8, #1
 8011278:	42b3      	cmp	r3, r6
 801127a:	db0b      	blt.n	8011294 <__lshift+0x38>
 801127c:	4638      	mov	r0, r7
 801127e:	f7ff fddd 	bl	8010e3c <_Balloc>
 8011282:	4605      	mov	r5, r0
 8011284:	b948      	cbnz	r0, 801129a <__lshift+0x3e>
 8011286:	4602      	mov	r2, r0
 8011288:	4b28      	ldr	r3, [pc, #160]	; (801132c <__lshift+0xd0>)
 801128a:	4829      	ldr	r0, [pc, #164]	; (8011330 <__lshift+0xd4>)
 801128c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011290:	f000 fb70 	bl	8011974 <__assert_func>
 8011294:	3101      	adds	r1, #1
 8011296:	005b      	lsls	r3, r3, #1
 8011298:	e7ee      	b.n	8011278 <__lshift+0x1c>
 801129a:	2300      	movs	r3, #0
 801129c:	f100 0114 	add.w	r1, r0, #20
 80112a0:	f100 0210 	add.w	r2, r0, #16
 80112a4:	4618      	mov	r0, r3
 80112a6:	4553      	cmp	r3, sl
 80112a8:	db33      	blt.n	8011312 <__lshift+0xb6>
 80112aa:	6920      	ldr	r0, [r4, #16]
 80112ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112b0:	f104 0314 	add.w	r3, r4, #20
 80112b4:	f019 091f 	ands.w	r9, r9, #31
 80112b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112c0:	d02b      	beq.n	801131a <__lshift+0xbe>
 80112c2:	f1c9 0e20 	rsb	lr, r9, #32
 80112c6:	468a      	mov	sl, r1
 80112c8:	2200      	movs	r2, #0
 80112ca:	6818      	ldr	r0, [r3, #0]
 80112cc:	fa00 f009 	lsl.w	r0, r0, r9
 80112d0:	4310      	orrs	r0, r2
 80112d2:	f84a 0b04 	str.w	r0, [sl], #4
 80112d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80112da:	459c      	cmp	ip, r3
 80112dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80112e0:	d8f3      	bhi.n	80112ca <__lshift+0x6e>
 80112e2:	ebac 0304 	sub.w	r3, ip, r4
 80112e6:	3b15      	subs	r3, #21
 80112e8:	f023 0303 	bic.w	r3, r3, #3
 80112ec:	3304      	adds	r3, #4
 80112ee:	f104 0015 	add.w	r0, r4, #21
 80112f2:	4584      	cmp	ip, r0
 80112f4:	bf38      	it	cc
 80112f6:	2304      	movcc	r3, #4
 80112f8:	50ca      	str	r2, [r1, r3]
 80112fa:	b10a      	cbz	r2, 8011300 <__lshift+0xa4>
 80112fc:	f108 0602 	add.w	r6, r8, #2
 8011300:	3e01      	subs	r6, #1
 8011302:	4638      	mov	r0, r7
 8011304:	612e      	str	r6, [r5, #16]
 8011306:	4621      	mov	r1, r4
 8011308:	f7ff fdd8 	bl	8010ebc <_Bfree>
 801130c:	4628      	mov	r0, r5
 801130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011312:	f842 0f04 	str.w	r0, [r2, #4]!
 8011316:	3301      	adds	r3, #1
 8011318:	e7c5      	b.n	80112a6 <__lshift+0x4a>
 801131a:	3904      	subs	r1, #4
 801131c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011320:	f841 2f04 	str.w	r2, [r1, #4]!
 8011324:	459c      	cmp	ip, r3
 8011326:	d8f9      	bhi.n	801131c <__lshift+0xc0>
 8011328:	e7ea      	b.n	8011300 <__lshift+0xa4>
 801132a:	bf00      	nop
 801132c:	0801283c 	.word	0x0801283c
 8011330:	0801284d 	.word	0x0801284d

08011334 <__mcmp>:
 8011334:	b530      	push	{r4, r5, lr}
 8011336:	6902      	ldr	r2, [r0, #16]
 8011338:	690c      	ldr	r4, [r1, #16]
 801133a:	1b12      	subs	r2, r2, r4
 801133c:	d10e      	bne.n	801135c <__mcmp+0x28>
 801133e:	f100 0314 	add.w	r3, r0, #20
 8011342:	3114      	adds	r1, #20
 8011344:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011348:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801134c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011350:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011354:	42a5      	cmp	r5, r4
 8011356:	d003      	beq.n	8011360 <__mcmp+0x2c>
 8011358:	d305      	bcc.n	8011366 <__mcmp+0x32>
 801135a:	2201      	movs	r2, #1
 801135c:	4610      	mov	r0, r2
 801135e:	bd30      	pop	{r4, r5, pc}
 8011360:	4283      	cmp	r3, r0
 8011362:	d3f3      	bcc.n	801134c <__mcmp+0x18>
 8011364:	e7fa      	b.n	801135c <__mcmp+0x28>
 8011366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801136a:	e7f7      	b.n	801135c <__mcmp+0x28>

0801136c <__mdiff>:
 801136c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011370:	460c      	mov	r4, r1
 8011372:	4606      	mov	r6, r0
 8011374:	4611      	mov	r1, r2
 8011376:	4620      	mov	r0, r4
 8011378:	4690      	mov	r8, r2
 801137a:	f7ff ffdb 	bl	8011334 <__mcmp>
 801137e:	1e05      	subs	r5, r0, #0
 8011380:	d110      	bne.n	80113a4 <__mdiff+0x38>
 8011382:	4629      	mov	r1, r5
 8011384:	4630      	mov	r0, r6
 8011386:	f7ff fd59 	bl	8010e3c <_Balloc>
 801138a:	b930      	cbnz	r0, 801139a <__mdiff+0x2e>
 801138c:	4b3a      	ldr	r3, [pc, #232]	; (8011478 <__mdiff+0x10c>)
 801138e:	4602      	mov	r2, r0
 8011390:	f240 2137 	movw	r1, #567	; 0x237
 8011394:	4839      	ldr	r0, [pc, #228]	; (801147c <__mdiff+0x110>)
 8011396:	f000 faed 	bl	8011974 <__assert_func>
 801139a:	2301      	movs	r3, #1
 801139c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a4:	bfa4      	itt	ge
 80113a6:	4643      	movge	r3, r8
 80113a8:	46a0      	movge	r8, r4
 80113aa:	4630      	mov	r0, r6
 80113ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80113b0:	bfa6      	itte	ge
 80113b2:	461c      	movge	r4, r3
 80113b4:	2500      	movge	r5, #0
 80113b6:	2501      	movlt	r5, #1
 80113b8:	f7ff fd40 	bl	8010e3c <_Balloc>
 80113bc:	b920      	cbnz	r0, 80113c8 <__mdiff+0x5c>
 80113be:	4b2e      	ldr	r3, [pc, #184]	; (8011478 <__mdiff+0x10c>)
 80113c0:	4602      	mov	r2, r0
 80113c2:	f240 2145 	movw	r1, #581	; 0x245
 80113c6:	e7e5      	b.n	8011394 <__mdiff+0x28>
 80113c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80113cc:	6926      	ldr	r6, [r4, #16]
 80113ce:	60c5      	str	r5, [r0, #12]
 80113d0:	f104 0914 	add.w	r9, r4, #20
 80113d4:	f108 0514 	add.w	r5, r8, #20
 80113d8:	f100 0e14 	add.w	lr, r0, #20
 80113dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80113e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80113e4:	f108 0210 	add.w	r2, r8, #16
 80113e8:	46f2      	mov	sl, lr
 80113ea:	2100      	movs	r1, #0
 80113ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80113f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80113f4:	fa11 f88b 	uxtah	r8, r1, fp
 80113f8:	b299      	uxth	r1, r3
 80113fa:	0c1b      	lsrs	r3, r3, #16
 80113fc:	eba8 0801 	sub.w	r8, r8, r1
 8011400:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011404:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011408:	fa1f f888 	uxth.w	r8, r8
 801140c:	1419      	asrs	r1, r3, #16
 801140e:	454e      	cmp	r6, r9
 8011410:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011414:	f84a 3b04 	str.w	r3, [sl], #4
 8011418:	d8e8      	bhi.n	80113ec <__mdiff+0x80>
 801141a:	1b33      	subs	r3, r6, r4
 801141c:	3b15      	subs	r3, #21
 801141e:	f023 0303 	bic.w	r3, r3, #3
 8011422:	3304      	adds	r3, #4
 8011424:	3415      	adds	r4, #21
 8011426:	42a6      	cmp	r6, r4
 8011428:	bf38      	it	cc
 801142a:	2304      	movcc	r3, #4
 801142c:	441d      	add	r5, r3
 801142e:	4473      	add	r3, lr
 8011430:	469e      	mov	lr, r3
 8011432:	462e      	mov	r6, r5
 8011434:	4566      	cmp	r6, ip
 8011436:	d30e      	bcc.n	8011456 <__mdiff+0xea>
 8011438:	f10c 0203 	add.w	r2, ip, #3
 801143c:	1b52      	subs	r2, r2, r5
 801143e:	f022 0203 	bic.w	r2, r2, #3
 8011442:	3d03      	subs	r5, #3
 8011444:	45ac      	cmp	ip, r5
 8011446:	bf38      	it	cc
 8011448:	2200      	movcc	r2, #0
 801144a:	4413      	add	r3, r2
 801144c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011450:	b17a      	cbz	r2, 8011472 <__mdiff+0x106>
 8011452:	6107      	str	r7, [r0, #16]
 8011454:	e7a4      	b.n	80113a0 <__mdiff+0x34>
 8011456:	f856 8b04 	ldr.w	r8, [r6], #4
 801145a:	fa11 f288 	uxtah	r2, r1, r8
 801145e:	1414      	asrs	r4, r2, #16
 8011460:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011464:	b292      	uxth	r2, r2
 8011466:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801146a:	f84e 2b04 	str.w	r2, [lr], #4
 801146e:	1421      	asrs	r1, r4, #16
 8011470:	e7e0      	b.n	8011434 <__mdiff+0xc8>
 8011472:	3f01      	subs	r7, #1
 8011474:	e7ea      	b.n	801144c <__mdiff+0xe0>
 8011476:	bf00      	nop
 8011478:	0801283c 	.word	0x0801283c
 801147c:	0801284d 	.word	0x0801284d

08011480 <__d2b>:
 8011480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011484:	460f      	mov	r7, r1
 8011486:	2101      	movs	r1, #1
 8011488:	ec59 8b10 	vmov	r8, r9, d0
 801148c:	4616      	mov	r6, r2
 801148e:	f7ff fcd5 	bl	8010e3c <_Balloc>
 8011492:	4604      	mov	r4, r0
 8011494:	b930      	cbnz	r0, 80114a4 <__d2b+0x24>
 8011496:	4602      	mov	r2, r0
 8011498:	4b24      	ldr	r3, [pc, #144]	; (801152c <__d2b+0xac>)
 801149a:	4825      	ldr	r0, [pc, #148]	; (8011530 <__d2b+0xb0>)
 801149c:	f240 310f 	movw	r1, #783	; 0x30f
 80114a0:	f000 fa68 	bl	8011974 <__assert_func>
 80114a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114ac:	bb2d      	cbnz	r5, 80114fa <__d2b+0x7a>
 80114ae:	9301      	str	r3, [sp, #4]
 80114b0:	f1b8 0300 	subs.w	r3, r8, #0
 80114b4:	d026      	beq.n	8011504 <__d2b+0x84>
 80114b6:	4668      	mov	r0, sp
 80114b8:	9300      	str	r3, [sp, #0]
 80114ba:	f7ff fd87 	bl	8010fcc <__lo0bits>
 80114be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80114c2:	b1e8      	cbz	r0, 8011500 <__d2b+0x80>
 80114c4:	f1c0 0320 	rsb	r3, r0, #32
 80114c8:	fa02 f303 	lsl.w	r3, r2, r3
 80114cc:	430b      	orrs	r3, r1
 80114ce:	40c2      	lsrs	r2, r0
 80114d0:	6163      	str	r3, [r4, #20]
 80114d2:	9201      	str	r2, [sp, #4]
 80114d4:	9b01      	ldr	r3, [sp, #4]
 80114d6:	61a3      	str	r3, [r4, #24]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	bf14      	ite	ne
 80114dc:	2202      	movne	r2, #2
 80114de:	2201      	moveq	r2, #1
 80114e0:	6122      	str	r2, [r4, #16]
 80114e2:	b1bd      	cbz	r5, 8011514 <__d2b+0x94>
 80114e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80114e8:	4405      	add	r5, r0
 80114ea:	603d      	str	r5, [r7, #0]
 80114ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114f0:	6030      	str	r0, [r6, #0]
 80114f2:	4620      	mov	r0, r4
 80114f4:	b003      	add	sp, #12
 80114f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114fe:	e7d6      	b.n	80114ae <__d2b+0x2e>
 8011500:	6161      	str	r1, [r4, #20]
 8011502:	e7e7      	b.n	80114d4 <__d2b+0x54>
 8011504:	a801      	add	r0, sp, #4
 8011506:	f7ff fd61 	bl	8010fcc <__lo0bits>
 801150a:	9b01      	ldr	r3, [sp, #4]
 801150c:	6163      	str	r3, [r4, #20]
 801150e:	3020      	adds	r0, #32
 8011510:	2201      	movs	r2, #1
 8011512:	e7e5      	b.n	80114e0 <__d2b+0x60>
 8011514:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011518:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801151c:	6038      	str	r0, [r7, #0]
 801151e:	6918      	ldr	r0, [r3, #16]
 8011520:	f7ff fd34 	bl	8010f8c <__hi0bits>
 8011524:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011528:	e7e2      	b.n	80114f0 <__d2b+0x70>
 801152a:	bf00      	nop
 801152c:	0801283c 	.word	0x0801283c
 8011530:	0801284d 	.word	0x0801284d

08011534 <__ssputs_r>:
 8011534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011538:	688e      	ldr	r6, [r1, #8]
 801153a:	461f      	mov	r7, r3
 801153c:	42be      	cmp	r6, r7
 801153e:	680b      	ldr	r3, [r1, #0]
 8011540:	4682      	mov	sl, r0
 8011542:	460c      	mov	r4, r1
 8011544:	4690      	mov	r8, r2
 8011546:	d82c      	bhi.n	80115a2 <__ssputs_r+0x6e>
 8011548:	898a      	ldrh	r2, [r1, #12]
 801154a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801154e:	d026      	beq.n	801159e <__ssputs_r+0x6a>
 8011550:	6965      	ldr	r5, [r4, #20]
 8011552:	6909      	ldr	r1, [r1, #16]
 8011554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011558:	eba3 0901 	sub.w	r9, r3, r1
 801155c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011560:	1c7b      	adds	r3, r7, #1
 8011562:	444b      	add	r3, r9
 8011564:	106d      	asrs	r5, r5, #1
 8011566:	429d      	cmp	r5, r3
 8011568:	bf38      	it	cc
 801156a:	461d      	movcc	r5, r3
 801156c:	0553      	lsls	r3, r2, #21
 801156e:	d527      	bpl.n	80115c0 <__ssputs_r+0x8c>
 8011570:	4629      	mov	r1, r5
 8011572:	f7fd feed 	bl	800f350 <_malloc_r>
 8011576:	4606      	mov	r6, r0
 8011578:	b360      	cbz	r0, 80115d4 <__ssputs_r+0xa0>
 801157a:	6921      	ldr	r1, [r4, #16]
 801157c:	464a      	mov	r2, r9
 801157e:	f7fe fd89 	bl	8010094 <memcpy>
 8011582:	89a3      	ldrh	r3, [r4, #12]
 8011584:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801158c:	81a3      	strh	r3, [r4, #12]
 801158e:	6126      	str	r6, [r4, #16]
 8011590:	6165      	str	r5, [r4, #20]
 8011592:	444e      	add	r6, r9
 8011594:	eba5 0509 	sub.w	r5, r5, r9
 8011598:	6026      	str	r6, [r4, #0]
 801159a:	60a5      	str	r5, [r4, #8]
 801159c:	463e      	mov	r6, r7
 801159e:	42be      	cmp	r6, r7
 80115a0:	d900      	bls.n	80115a4 <__ssputs_r+0x70>
 80115a2:	463e      	mov	r6, r7
 80115a4:	6820      	ldr	r0, [r4, #0]
 80115a6:	4632      	mov	r2, r6
 80115a8:	4641      	mov	r1, r8
 80115aa:	f000 f9c9 	bl	8011940 <memmove>
 80115ae:	68a3      	ldr	r3, [r4, #8]
 80115b0:	1b9b      	subs	r3, r3, r6
 80115b2:	60a3      	str	r3, [r4, #8]
 80115b4:	6823      	ldr	r3, [r4, #0]
 80115b6:	4433      	add	r3, r6
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	2000      	movs	r0, #0
 80115bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115c0:	462a      	mov	r2, r5
 80115c2:	f000 fa1d 	bl	8011a00 <_realloc_r>
 80115c6:	4606      	mov	r6, r0
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d1e0      	bne.n	801158e <__ssputs_r+0x5a>
 80115cc:	6921      	ldr	r1, [r4, #16]
 80115ce:	4650      	mov	r0, sl
 80115d0:	f7ff fbe8 	bl	8010da4 <_free_r>
 80115d4:	230c      	movs	r3, #12
 80115d6:	f8ca 3000 	str.w	r3, [sl]
 80115da:	89a3      	ldrh	r3, [r4, #12]
 80115dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115e0:	81a3      	strh	r3, [r4, #12]
 80115e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115e6:	e7e9      	b.n	80115bc <__ssputs_r+0x88>

080115e8 <_svfiprintf_r>:
 80115e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ec:	4698      	mov	r8, r3
 80115ee:	898b      	ldrh	r3, [r1, #12]
 80115f0:	061b      	lsls	r3, r3, #24
 80115f2:	b09d      	sub	sp, #116	; 0x74
 80115f4:	4607      	mov	r7, r0
 80115f6:	460d      	mov	r5, r1
 80115f8:	4614      	mov	r4, r2
 80115fa:	d50e      	bpl.n	801161a <_svfiprintf_r+0x32>
 80115fc:	690b      	ldr	r3, [r1, #16]
 80115fe:	b963      	cbnz	r3, 801161a <_svfiprintf_r+0x32>
 8011600:	2140      	movs	r1, #64	; 0x40
 8011602:	f7fd fea5 	bl	800f350 <_malloc_r>
 8011606:	6028      	str	r0, [r5, #0]
 8011608:	6128      	str	r0, [r5, #16]
 801160a:	b920      	cbnz	r0, 8011616 <_svfiprintf_r+0x2e>
 801160c:	230c      	movs	r3, #12
 801160e:	603b      	str	r3, [r7, #0]
 8011610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011614:	e0d0      	b.n	80117b8 <_svfiprintf_r+0x1d0>
 8011616:	2340      	movs	r3, #64	; 0x40
 8011618:	616b      	str	r3, [r5, #20]
 801161a:	2300      	movs	r3, #0
 801161c:	9309      	str	r3, [sp, #36]	; 0x24
 801161e:	2320      	movs	r3, #32
 8011620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011624:	f8cd 800c 	str.w	r8, [sp, #12]
 8011628:	2330      	movs	r3, #48	; 0x30
 801162a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80117d0 <_svfiprintf_r+0x1e8>
 801162e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011632:	f04f 0901 	mov.w	r9, #1
 8011636:	4623      	mov	r3, r4
 8011638:	469a      	mov	sl, r3
 801163a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801163e:	b10a      	cbz	r2, 8011644 <_svfiprintf_r+0x5c>
 8011640:	2a25      	cmp	r2, #37	; 0x25
 8011642:	d1f9      	bne.n	8011638 <_svfiprintf_r+0x50>
 8011644:	ebba 0b04 	subs.w	fp, sl, r4
 8011648:	d00b      	beq.n	8011662 <_svfiprintf_r+0x7a>
 801164a:	465b      	mov	r3, fp
 801164c:	4622      	mov	r2, r4
 801164e:	4629      	mov	r1, r5
 8011650:	4638      	mov	r0, r7
 8011652:	f7ff ff6f 	bl	8011534 <__ssputs_r>
 8011656:	3001      	adds	r0, #1
 8011658:	f000 80a9 	beq.w	80117ae <_svfiprintf_r+0x1c6>
 801165c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801165e:	445a      	add	r2, fp
 8011660:	9209      	str	r2, [sp, #36]	; 0x24
 8011662:	f89a 3000 	ldrb.w	r3, [sl]
 8011666:	2b00      	cmp	r3, #0
 8011668:	f000 80a1 	beq.w	80117ae <_svfiprintf_r+0x1c6>
 801166c:	2300      	movs	r3, #0
 801166e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011676:	f10a 0a01 	add.w	sl, sl, #1
 801167a:	9304      	str	r3, [sp, #16]
 801167c:	9307      	str	r3, [sp, #28]
 801167e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011682:	931a      	str	r3, [sp, #104]	; 0x68
 8011684:	4654      	mov	r4, sl
 8011686:	2205      	movs	r2, #5
 8011688:	f814 1b01 	ldrb.w	r1, [r4], #1
 801168c:	4850      	ldr	r0, [pc, #320]	; (80117d0 <_svfiprintf_r+0x1e8>)
 801168e:	f7ee fda7 	bl	80001e0 <memchr>
 8011692:	9a04      	ldr	r2, [sp, #16]
 8011694:	b9d8      	cbnz	r0, 80116ce <_svfiprintf_r+0xe6>
 8011696:	06d0      	lsls	r0, r2, #27
 8011698:	bf44      	itt	mi
 801169a:	2320      	movmi	r3, #32
 801169c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116a0:	0711      	lsls	r1, r2, #28
 80116a2:	bf44      	itt	mi
 80116a4:	232b      	movmi	r3, #43	; 0x2b
 80116a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116aa:	f89a 3000 	ldrb.w	r3, [sl]
 80116ae:	2b2a      	cmp	r3, #42	; 0x2a
 80116b0:	d015      	beq.n	80116de <_svfiprintf_r+0xf6>
 80116b2:	9a07      	ldr	r2, [sp, #28]
 80116b4:	4654      	mov	r4, sl
 80116b6:	2000      	movs	r0, #0
 80116b8:	f04f 0c0a 	mov.w	ip, #10
 80116bc:	4621      	mov	r1, r4
 80116be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116c2:	3b30      	subs	r3, #48	; 0x30
 80116c4:	2b09      	cmp	r3, #9
 80116c6:	d94d      	bls.n	8011764 <_svfiprintf_r+0x17c>
 80116c8:	b1b0      	cbz	r0, 80116f8 <_svfiprintf_r+0x110>
 80116ca:	9207      	str	r2, [sp, #28]
 80116cc:	e014      	b.n	80116f8 <_svfiprintf_r+0x110>
 80116ce:	eba0 0308 	sub.w	r3, r0, r8
 80116d2:	fa09 f303 	lsl.w	r3, r9, r3
 80116d6:	4313      	orrs	r3, r2
 80116d8:	9304      	str	r3, [sp, #16]
 80116da:	46a2      	mov	sl, r4
 80116dc:	e7d2      	b.n	8011684 <_svfiprintf_r+0x9c>
 80116de:	9b03      	ldr	r3, [sp, #12]
 80116e0:	1d19      	adds	r1, r3, #4
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	9103      	str	r1, [sp, #12]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	bfbb      	ittet	lt
 80116ea:	425b      	neglt	r3, r3
 80116ec:	f042 0202 	orrlt.w	r2, r2, #2
 80116f0:	9307      	strge	r3, [sp, #28]
 80116f2:	9307      	strlt	r3, [sp, #28]
 80116f4:	bfb8      	it	lt
 80116f6:	9204      	strlt	r2, [sp, #16]
 80116f8:	7823      	ldrb	r3, [r4, #0]
 80116fa:	2b2e      	cmp	r3, #46	; 0x2e
 80116fc:	d10c      	bne.n	8011718 <_svfiprintf_r+0x130>
 80116fe:	7863      	ldrb	r3, [r4, #1]
 8011700:	2b2a      	cmp	r3, #42	; 0x2a
 8011702:	d134      	bne.n	801176e <_svfiprintf_r+0x186>
 8011704:	9b03      	ldr	r3, [sp, #12]
 8011706:	1d1a      	adds	r2, r3, #4
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	9203      	str	r2, [sp, #12]
 801170c:	2b00      	cmp	r3, #0
 801170e:	bfb8      	it	lt
 8011710:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011714:	3402      	adds	r4, #2
 8011716:	9305      	str	r3, [sp, #20]
 8011718:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80117e0 <_svfiprintf_r+0x1f8>
 801171c:	7821      	ldrb	r1, [r4, #0]
 801171e:	2203      	movs	r2, #3
 8011720:	4650      	mov	r0, sl
 8011722:	f7ee fd5d 	bl	80001e0 <memchr>
 8011726:	b138      	cbz	r0, 8011738 <_svfiprintf_r+0x150>
 8011728:	9b04      	ldr	r3, [sp, #16]
 801172a:	eba0 000a 	sub.w	r0, r0, sl
 801172e:	2240      	movs	r2, #64	; 0x40
 8011730:	4082      	lsls	r2, r0
 8011732:	4313      	orrs	r3, r2
 8011734:	3401      	adds	r4, #1
 8011736:	9304      	str	r3, [sp, #16]
 8011738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801173c:	4825      	ldr	r0, [pc, #148]	; (80117d4 <_svfiprintf_r+0x1ec>)
 801173e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011742:	2206      	movs	r2, #6
 8011744:	f7ee fd4c 	bl	80001e0 <memchr>
 8011748:	2800      	cmp	r0, #0
 801174a:	d038      	beq.n	80117be <_svfiprintf_r+0x1d6>
 801174c:	4b22      	ldr	r3, [pc, #136]	; (80117d8 <_svfiprintf_r+0x1f0>)
 801174e:	bb1b      	cbnz	r3, 8011798 <_svfiprintf_r+0x1b0>
 8011750:	9b03      	ldr	r3, [sp, #12]
 8011752:	3307      	adds	r3, #7
 8011754:	f023 0307 	bic.w	r3, r3, #7
 8011758:	3308      	adds	r3, #8
 801175a:	9303      	str	r3, [sp, #12]
 801175c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801175e:	4433      	add	r3, r6
 8011760:	9309      	str	r3, [sp, #36]	; 0x24
 8011762:	e768      	b.n	8011636 <_svfiprintf_r+0x4e>
 8011764:	fb0c 3202 	mla	r2, ip, r2, r3
 8011768:	460c      	mov	r4, r1
 801176a:	2001      	movs	r0, #1
 801176c:	e7a6      	b.n	80116bc <_svfiprintf_r+0xd4>
 801176e:	2300      	movs	r3, #0
 8011770:	3401      	adds	r4, #1
 8011772:	9305      	str	r3, [sp, #20]
 8011774:	4619      	mov	r1, r3
 8011776:	f04f 0c0a 	mov.w	ip, #10
 801177a:	4620      	mov	r0, r4
 801177c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011780:	3a30      	subs	r2, #48	; 0x30
 8011782:	2a09      	cmp	r2, #9
 8011784:	d903      	bls.n	801178e <_svfiprintf_r+0x1a6>
 8011786:	2b00      	cmp	r3, #0
 8011788:	d0c6      	beq.n	8011718 <_svfiprintf_r+0x130>
 801178a:	9105      	str	r1, [sp, #20]
 801178c:	e7c4      	b.n	8011718 <_svfiprintf_r+0x130>
 801178e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011792:	4604      	mov	r4, r0
 8011794:	2301      	movs	r3, #1
 8011796:	e7f0      	b.n	801177a <_svfiprintf_r+0x192>
 8011798:	ab03      	add	r3, sp, #12
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	462a      	mov	r2, r5
 801179e:	4b0f      	ldr	r3, [pc, #60]	; (80117dc <_svfiprintf_r+0x1f4>)
 80117a0:	a904      	add	r1, sp, #16
 80117a2:	4638      	mov	r0, r7
 80117a4:	f7fd ff00 	bl	800f5a8 <_printf_float>
 80117a8:	1c42      	adds	r2, r0, #1
 80117aa:	4606      	mov	r6, r0
 80117ac:	d1d6      	bne.n	801175c <_svfiprintf_r+0x174>
 80117ae:	89ab      	ldrh	r3, [r5, #12]
 80117b0:	065b      	lsls	r3, r3, #25
 80117b2:	f53f af2d 	bmi.w	8011610 <_svfiprintf_r+0x28>
 80117b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117b8:	b01d      	add	sp, #116	; 0x74
 80117ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117be:	ab03      	add	r3, sp, #12
 80117c0:	9300      	str	r3, [sp, #0]
 80117c2:	462a      	mov	r2, r5
 80117c4:	4b05      	ldr	r3, [pc, #20]	; (80117dc <_svfiprintf_r+0x1f4>)
 80117c6:	a904      	add	r1, sp, #16
 80117c8:	4638      	mov	r0, r7
 80117ca:	f7fe f991 	bl	800faf0 <_printf_i>
 80117ce:	e7eb      	b.n	80117a8 <_svfiprintf_r+0x1c0>
 80117d0:	080129a4 	.word	0x080129a4
 80117d4:	080129ae 	.word	0x080129ae
 80117d8:	0800f5a9 	.word	0x0800f5a9
 80117dc:	08011535 	.word	0x08011535
 80117e0:	080129aa 	.word	0x080129aa

080117e4 <__sflush_r>:
 80117e4:	898a      	ldrh	r2, [r1, #12]
 80117e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ea:	4605      	mov	r5, r0
 80117ec:	0710      	lsls	r0, r2, #28
 80117ee:	460c      	mov	r4, r1
 80117f0:	d458      	bmi.n	80118a4 <__sflush_r+0xc0>
 80117f2:	684b      	ldr	r3, [r1, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	dc05      	bgt.n	8011804 <__sflush_r+0x20>
 80117f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	dc02      	bgt.n	8011804 <__sflush_r+0x20>
 80117fe:	2000      	movs	r0, #0
 8011800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011806:	2e00      	cmp	r6, #0
 8011808:	d0f9      	beq.n	80117fe <__sflush_r+0x1a>
 801180a:	2300      	movs	r3, #0
 801180c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011810:	682f      	ldr	r7, [r5, #0]
 8011812:	6a21      	ldr	r1, [r4, #32]
 8011814:	602b      	str	r3, [r5, #0]
 8011816:	d032      	beq.n	801187e <__sflush_r+0x9a>
 8011818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801181a:	89a3      	ldrh	r3, [r4, #12]
 801181c:	075a      	lsls	r2, r3, #29
 801181e:	d505      	bpl.n	801182c <__sflush_r+0x48>
 8011820:	6863      	ldr	r3, [r4, #4]
 8011822:	1ac0      	subs	r0, r0, r3
 8011824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011826:	b10b      	cbz	r3, 801182c <__sflush_r+0x48>
 8011828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801182a:	1ac0      	subs	r0, r0, r3
 801182c:	2300      	movs	r3, #0
 801182e:	4602      	mov	r2, r0
 8011830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011832:	6a21      	ldr	r1, [r4, #32]
 8011834:	4628      	mov	r0, r5
 8011836:	47b0      	blx	r6
 8011838:	1c43      	adds	r3, r0, #1
 801183a:	89a3      	ldrh	r3, [r4, #12]
 801183c:	d106      	bne.n	801184c <__sflush_r+0x68>
 801183e:	6829      	ldr	r1, [r5, #0]
 8011840:	291d      	cmp	r1, #29
 8011842:	d82b      	bhi.n	801189c <__sflush_r+0xb8>
 8011844:	4a29      	ldr	r2, [pc, #164]	; (80118ec <__sflush_r+0x108>)
 8011846:	410a      	asrs	r2, r1
 8011848:	07d6      	lsls	r6, r2, #31
 801184a:	d427      	bmi.n	801189c <__sflush_r+0xb8>
 801184c:	2200      	movs	r2, #0
 801184e:	6062      	str	r2, [r4, #4]
 8011850:	04d9      	lsls	r1, r3, #19
 8011852:	6922      	ldr	r2, [r4, #16]
 8011854:	6022      	str	r2, [r4, #0]
 8011856:	d504      	bpl.n	8011862 <__sflush_r+0x7e>
 8011858:	1c42      	adds	r2, r0, #1
 801185a:	d101      	bne.n	8011860 <__sflush_r+0x7c>
 801185c:	682b      	ldr	r3, [r5, #0]
 801185e:	b903      	cbnz	r3, 8011862 <__sflush_r+0x7e>
 8011860:	6560      	str	r0, [r4, #84]	; 0x54
 8011862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011864:	602f      	str	r7, [r5, #0]
 8011866:	2900      	cmp	r1, #0
 8011868:	d0c9      	beq.n	80117fe <__sflush_r+0x1a>
 801186a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801186e:	4299      	cmp	r1, r3
 8011870:	d002      	beq.n	8011878 <__sflush_r+0x94>
 8011872:	4628      	mov	r0, r5
 8011874:	f7ff fa96 	bl	8010da4 <_free_r>
 8011878:	2000      	movs	r0, #0
 801187a:	6360      	str	r0, [r4, #52]	; 0x34
 801187c:	e7c0      	b.n	8011800 <__sflush_r+0x1c>
 801187e:	2301      	movs	r3, #1
 8011880:	4628      	mov	r0, r5
 8011882:	47b0      	blx	r6
 8011884:	1c41      	adds	r1, r0, #1
 8011886:	d1c8      	bne.n	801181a <__sflush_r+0x36>
 8011888:	682b      	ldr	r3, [r5, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d0c5      	beq.n	801181a <__sflush_r+0x36>
 801188e:	2b1d      	cmp	r3, #29
 8011890:	d001      	beq.n	8011896 <__sflush_r+0xb2>
 8011892:	2b16      	cmp	r3, #22
 8011894:	d101      	bne.n	801189a <__sflush_r+0xb6>
 8011896:	602f      	str	r7, [r5, #0]
 8011898:	e7b1      	b.n	80117fe <__sflush_r+0x1a>
 801189a:	89a3      	ldrh	r3, [r4, #12]
 801189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118a0:	81a3      	strh	r3, [r4, #12]
 80118a2:	e7ad      	b.n	8011800 <__sflush_r+0x1c>
 80118a4:	690f      	ldr	r7, [r1, #16]
 80118a6:	2f00      	cmp	r7, #0
 80118a8:	d0a9      	beq.n	80117fe <__sflush_r+0x1a>
 80118aa:	0793      	lsls	r3, r2, #30
 80118ac:	680e      	ldr	r6, [r1, #0]
 80118ae:	bf08      	it	eq
 80118b0:	694b      	ldreq	r3, [r1, #20]
 80118b2:	600f      	str	r7, [r1, #0]
 80118b4:	bf18      	it	ne
 80118b6:	2300      	movne	r3, #0
 80118b8:	eba6 0807 	sub.w	r8, r6, r7
 80118bc:	608b      	str	r3, [r1, #8]
 80118be:	f1b8 0f00 	cmp.w	r8, #0
 80118c2:	dd9c      	ble.n	80117fe <__sflush_r+0x1a>
 80118c4:	6a21      	ldr	r1, [r4, #32]
 80118c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118c8:	4643      	mov	r3, r8
 80118ca:	463a      	mov	r2, r7
 80118cc:	4628      	mov	r0, r5
 80118ce:	47b0      	blx	r6
 80118d0:	2800      	cmp	r0, #0
 80118d2:	dc06      	bgt.n	80118e2 <__sflush_r+0xfe>
 80118d4:	89a3      	ldrh	r3, [r4, #12]
 80118d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118da:	81a3      	strh	r3, [r4, #12]
 80118dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118e0:	e78e      	b.n	8011800 <__sflush_r+0x1c>
 80118e2:	4407      	add	r7, r0
 80118e4:	eba8 0800 	sub.w	r8, r8, r0
 80118e8:	e7e9      	b.n	80118be <__sflush_r+0xda>
 80118ea:	bf00      	nop
 80118ec:	dfbffffe 	.word	0xdfbffffe

080118f0 <_fflush_r>:
 80118f0:	b538      	push	{r3, r4, r5, lr}
 80118f2:	690b      	ldr	r3, [r1, #16]
 80118f4:	4605      	mov	r5, r0
 80118f6:	460c      	mov	r4, r1
 80118f8:	b913      	cbnz	r3, 8011900 <_fflush_r+0x10>
 80118fa:	2500      	movs	r5, #0
 80118fc:	4628      	mov	r0, r5
 80118fe:	bd38      	pop	{r3, r4, r5, pc}
 8011900:	b118      	cbz	r0, 801190a <_fflush_r+0x1a>
 8011902:	6a03      	ldr	r3, [r0, #32]
 8011904:	b90b      	cbnz	r3, 801190a <_fflush_r+0x1a>
 8011906:	f7fe fa8f 	bl	800fe28 <__sinit>
 801190a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d0f3      	beq.n	80118fa <_fflush_r+0xa>
 8011912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011914:	07d0      	lsls	r0, r2, #31
 8011916:	d404      	bmi.n	8011922 <_fflush_r+0x32>
 8011918:	0599      	lsls	r1, r3, #22
 801191a:	d402      	bmi.n	8011922 <_fflush_r+0x32>
 801191c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801191e:	f7fe fbb7 	bl	8010090 <__retarget_lock_acquire_recursive>
 8011922:	4628      	mov	r0, r5
 8011924:	4621      	mov	r1, r4
 8011926:	f7ff ff5d 	bl	80117e4 <__sflush_r>
 801192a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801192c:	07da      	lsls	r2, r3, #31
 801192e:	4605      	mov	r5, r0
 8011930:	d4e4      	bmi.n	80118fc <_fflush_r+0xc>
 8011932:	89a3      	ldrh	r3, [r4, #12]
 8011934:	059b      	lsls	r3, r3, #22
 8011936:	d4e1      	bmi.n	80118fc <_fflush_r+0xc>
 8011938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801193a:	f7fe fbaa 	bl	8010092 <__retarget_lock_release_recursive>
 801193e:	e7dd      	b.n	80118fc <_fflush_r+0xc>

08011940 <memmove>:
 8011940:	4288      	cmp	r0, r1
 8011942:	b510      	push	{r4, lr}
 8011944:	eb01 0402 	add.w	r4, r1, r2
 8011948:	d902      	bls.n	8011950 <memmove+0x10>
 801194a:	4284      	cmp	r4, r0
 801194c:	4623      	mov	r3, r4
 801194e:	d807      	bhi.n	8011960 <memmove+0x20>
 8011950:	1e43      	subs	r3, r0, #1
 8011952:	42a1      	cmp	r1, r4
 8011954:	d008      	beq.n	8011968 <memmove+0x28>
 8011956:	f811 2b01 	ldrb.w	r2, [r1], #1
 801195a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801195e:	e7f8      	b.n	8011952 <memmove+0x12>
 8011960:	4402      	add	r2, r0
 8011962:	4601      	mov	r1, r0
 8011964:	428a      	cmp	r2, r1
 8011966:	d100      	bne.n	801196a <memmove+0x2a>
 8011968:	bd10      	pop	{r4, pc}
 801196a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801196e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011972:	e7f7      	b.n	8011964 <memmove+0x24>

08011974 <__assert_func>:
 8011974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011976:	4614      	mov	r4, r2
 8011978:	461a      	mov	r2, r3
 801197a:	4b09      	ldr	r3, [pc, #36]	; (80119a0 <__assert_func+0x2c>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	4605      	mov	r5, r0
 8011980:	68d8      	ldr	r0, [r3, #12]
 8011982:	b14c      	cbz	r4, 8011998 <__assert_func+0x24>
 8011984:	4b07      	ldr	r3, [pc, #28]	; (80119a4 <__assert_func+0x30>)
 8011986:	9100      	str	r1, [sp, #0]
 8011988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801198c:	4906      	ldr	r1, [pc, #24]	; (80119a8 <__assert_func+0x34>)
 801198e:	462b      	mov	r3, r5
 8011990:	f000 f872 	bl	8011a78 <fiprintf>
 8011994:	f000 f882 	bl	8011a9c <abort>
 8011998:	4b04      	ldr	r3, [pc, #16]	; (80119ac <__assert_func+0x38>)
 801199a:	461c      	mov	r4, r3
 801199c:	e7f3      	b.n	8011986 <__assert_func+0x12>
 801199e:	bf00      	nop
 80119a0:	20000178 	.word	0x20000178
 80119a4:	080129bf 	.word	0x080129bf
 80119a8:	080129cc 	.word	0x080129cc
 80119ac:	080129fa 	.word	0x080129fa

080119b0 <_calloc_r>:
 80119b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119b2:	fba1 2402 	umull	r2, r4, r1, r2
 80119b6:	b94c      	cbnz	r4, 80119cc <_calloc_r+0x1c>
 80119b8:	4611      	mov	r1, r2
 80119ba:	9201      	str	r2, [sp, #4]
 80119bc:	f7fd fcc8 	bl	800f350 <_malloc_r>
 80119c0:	9a01      	ldr	r2, [sp, #4]
 80119c2:	4605      	mov	r5, r0
 80119c4:	b930      	cbnz	r0, 80119d4 <_calloc_r+0x24>
 80119c6:	4628      	mov	r0, r5
 80119c8:	b003      	add	sp, #12
 80119ca:	bd30      	pop	{r4, r5, pc}
 80119cc:	220c      	movs	r2, #12
 80119ce:	6002      	str	r2, [r0, #0]
 80119d0:	2500      	movs	r5, #0
 80119d2:	e7f8      	b.n	80119c6 <_calloc_r+0x16>
 80119d4:	4621      	mov	r1, r4
 80119d6:	f7fe fac0 	bl	800ff5a <memset>
 80119da:	e7f4      	b.n	80119c6 <_calloc_r+0x16>

080119dc <__ascii_mbtowc>:
 80119dc:	b082      	sub	sp, #8
 80119de:	b901      	cbnz	r1, 80119e2 <__ascii_mbtowc+0x6>
 80119e0:	a901      	add	r1, sp, #4
 80119e2:	b142      	cbz	r2, 80119f6 <__ascii_mbtowc+0x1a>
 80119e4:	b14b      	cbz	r3, 80119fa <__ascii_mbtowc+0x1e>
 80119e6:	7813      	ldrb	r3, [r2, #0]
 80119e8:	600b      	str	r3, [r1, #0]
 80119ea:	7812      	ldrb	r2, [r2, #0]
 80119ec:	1e10      	subs	r0, r2, #0
 80119ee:	bf18      	it	ne
 80119f0:	2001      	movne	r0, #1
 80119f2:	b002      	add	sp, #8
 80119f4:	4770      	bx	lr
 80119f6:	4610      	mov	r0, r2
 80119f8:	e7fb      	b.n	80119f2 <__ascii_mbtowc+0x16>
 80119fa:	f06f 0001 	mvn.w	r0, #1
 80119fe:	e7f8      	b.n	80119f2 <__ascii_mbtowc+0x16>

08011a00 <_realloc_r>:
 8011a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a04:	4680      	mov	r8, r0
 8011a06:	4614      	mov	r4, r2
 8011a08:	460e      	mov	r6, r1
 8011a0a:	b921      	cbnz	r1, 8011a16 <_realloc_r+0x16>
 8011a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a10:	4611      	mov	r1, r2
 8011a12:	f7fd bc9d 	b.w	800f350 <_malloc_r>
 8011a16:	b92a      	cbnz	r2, 8011a24 <_realloc_r+0x24>
 8011a18:	f7ff f9c4 	bl	8010da4 <_free_r>
 8011a1c:	4625      	mov	r5, r4
 8011a1e:	4628      	mov	r0, r5
 8011a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a24:	f000 f841 	bl	8011aaa <_malloc_usable_size_r>
 8011a28:	4284      	cmp	r4, r0
 8011a2a:	4607      	mov	r7, r0
 8011a2c:	d802      	bhi.n	8011a34 <_realloc_r+0x34>
 8011a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a32:	d812      	bhi.n	8011a5a <_realloc_r+0x5a>
 8011a34:	4621      	mov	r1, r4
 8011a36:	4640      	mov	r0, r8
 8011a38:	f7fd fc8a 	bl	800f350 <_malloc_r>
 8011a3c:	4605      	mov	r5, r0
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d0ed      	beq.n	8011a1e <_realloc_r+0x1e>
 8011a42:	42bc      	cmp	r4, r7
 8011a44:	4622      	mov	r2, r4
 8011a46:	4631      	mov	r1, r6
 8011a48:	bf28      	it	cs
 8011a4a:	463a      	movcs	r2, r7
 8011a4c:	f7fe fb22 	bl	8010094 <memcpy>
 8011a50:	4631      	mov	r1, r6
 8011a52:	4640      	mov	r0, r8
 8011a54:	f7ff f9a6 	bl	8010da4 <_free_r>
 8011a58:	e7e1      	b.n	8011a1e <_realloc_r+0x1e>
 8011a5a:	4635      	mov	r5, r6
 8011a5c:	e7df      	b.n	8011a1e <_realloc_r+0x1e>

08011a5e <__ascii_wctomb>:
 8011a5e:	b149      	cbz	r1, 8011a74 <__ascii_wctomb+0x16>
 8011a60:	2aff      	cmp	r2, #255	; 0xff
 8011a62:	bf85      	ittet	hi
 8011a64:	238a      	movhi	r3, #138	; 0x8a
 8011a66:	6003      	strhi	r3, [r0, #0]
 8011a68:	700a      	strbls	r2, [r1, #0]
 8011a6a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011a6e:	bf98      	it	ls
 8011a70:	2001      	movls	r0, #1
 8011a72:	4770      	bx	lr
 8011a74:	4608      	mov	r0, r1
 8011a76:	4770      	bx	lr

08011a78 <fiprintf>:
 8011a78:	b40e      	push	{r1, r2, r3}
 8011a7a:	b503      	push	{r0, r1, lr}
 8011a7c:	4601      	mov	r1, r0
 8011a7e:	ab03      	add	r3, sp, #12
 8011a80:	4805      	ldr	r0, [pc, #20]	; (8011a98 <fiprintf+0x20>)
 8011a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a86:	6800      	ldr	r0, [r0, #0]
 8011a88:	9301      	str	r3, [sp, #4]
 8011a8a:	f000 f83f 	bl	8011b0c <_vfiprintf_r>
 8011a8e:	b002      	add	sp, #8
 8011a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a94:	b003      	add	sp, #12
 8011a96:	4770      	bx	lr
 8011a98:	20000178 	.word	0x20000178

08011a9c <abort>:
 8011a9c:	b508      	push	{r3, lr}
 8011a9e:	2006      	movs	r0, #6
 8011aa0:	f000 fa0c 	bl	8011ebc <raise>
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	f7f0 fb83 	bl	80021b0 <_exit>

08011aaa <_malloc_usable_size_r>:
 8011aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011aae:	1f18      	subs	r0, r3, #4
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	bfbc      	itt	lt
 8011ab4:	580b      	ldrlt	r3, [r1, r0]
 8011ab6:	18c0      	addlt	r0, r0, r3
 8011ab8:	4770      	bx	lr

08011aba <__sfputc_r>:
 8011aba:	6893      	ldr	r3, [r2, #8]
 8011abc:	3b01      	subs	r3, #1
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	b410      	push	{r4}
 8011ac2:	6093      	str	r3, [r2, #8]
 8011ac4:	da08      	bge.n	8011ad8 <__sfputc_r+0x1e>
 8011ac6:	6994      	ldr	r4, [r2, #24]
 8011ac8:	42a3      	cmp	r3, r4
 8011aca:	db01      	blt.n	8011ad0 <__sfputc_r+0x16>
 8011acc:	290a      	cmp	r1, #10
 8011ace:	d103      	bne.n	8011ad8 <__sfputc_r+0x1e>
 8011ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ad4:	f000 b934 	b.w	8011d40 <__swbuf_r>
 8011ad8:	6813      	ldr	r3, [r2, #0]
 8011ada:	1c58      	adds	r0, r3, #1
 8011adc:	6010      	str	r0, [r2, #0]
 8011ade:	7019      	strb	r1, [r3, #0]
 8011ae0:	4608      	mov	r0, r1
 8011ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ae6:	4770      	bx	lr

08011ae8 <__sfputs_r>:
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	4606      	mov	r6, r0
 8011aec:	460f      	mov	r7, r1
 8011aee:	4614      	mov	r4, r2
 8011af0:	18d5      	adds	r5, r2, r3
 8011af2:	42ac      	cmp	r4, r5
 8011af4:	d101      	bne.n	8011afa <__sfputs_r+0x12>
 8011af6:	2000      	movs	r0, #0
 8011af8:	e007      	b.n	8011b0a <__sfputs_r+0x22>
 8011afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011afe:	463a      	mov	r2, r7
 8011b00:	4630      	mov	r0, r6
 8011b02:	f7ff ffda 	bl	8011aba <__sfputc_r>
 8011b06:	1c43      	adds	r3, r0, #1
 8011b08:	d1f3      	bne.n	8011af2 <__sfputs_r+0xa>
 8011b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b0c <_vfiprintf_r>:
 8011b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b10:	460d      	mov	r5, r1
 8011b12:	b09d      	sub	sp, #116	; 0x74
 8011b14:	4614      	mov	r4, r2
 8011b16:	4698      	mov	r8, r3
 8011b18:	4606      	mov	r6, r0
 8011b1a:	b118      	cbz	r0, 8011b24 <_vfiprintf_r+0x18>
 8011b1c:	6a03      	ldr	r3, [r0, #32]
 8011b1e:	b90b      	cbnz	r3, 8011b24 <_vfiprintf_r+0x18>
 8011b20:	f7fe f982 	bl	800fe28 <__sinit>
 8011b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b26:	07d9      	lsls	r1, r3, #31
 8011b28:	d405      	bmi.n	8011b36 <_vfiprintf_r+0x2a>
 8011b2a:	89ab      	ldrh	r3, [r5, #12]
 8011b2c:	059a      	lsls	r2, r3, #22
 8011b2e:	d402      	bmi.n	8011b36 <_vfiprintf_r+0x2a>
 8011b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b32:	f7fe faad 	bl	8010090 <__retarget_lock_acquire_recursive>
 8011b36:	89ab      	ldrh	r3, [r5, #12]
 8011b38:	071b      	lsls	r3, r3, #28
 8011b3a:	d501      	bpl.n	8011b40 <_vfiprintf_r+0x34>
 8011b3c:	692b      	ldr	r3, [r5, #16]
 8011b3e:	b99b      	cbnz	r3, 8011b68 <_vfiprintf_r+0x5c>
 8011b40:	4629      	mov	r1, r5
 8011b42:	4630      	mov	r0, r6
 8011b44:	f000 f93a 	bl	8011dbc <__swsetup_r>
 8011b48:	b170      	cbz	r0, 8011b68 <_vfiprintf_r+0x5c>
 8011b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b4c:	07dc      	lsls	r4, r3, #31
 8011b4e:	d504      	bpl.n	8011b5a <_vfiprintf_r+0x4e>
 8011b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b54:	b01d      	add	sp, #116	; 0x74
 8011b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b5a:	89ab      	ldrh	r3, [r5, #12]
 8011b5c:	0598      	lsls	r0, r3, #22
 8011b5e:	d4f7      	bmi.n	8011b50 <_vfiprintf_r+0x44>
 8011b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b62:	f7fe fa96 	bl	8010092 <__retarget_lock_release_recursive>
 8011b66:	e7f3      	b.n	8011b50 <_vfiprintf_r+0x44>
 8011b68:	2300      	movs	r3, #0
 8011b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b6c:	2320      	movs	r3, #32
 8011b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b76:	2330      	movs	r3, #48	; 0x30
 8011b78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011d2c <_vfiprintf_r+0x220>
 8011b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b80:	f04f 0901 	mov.w	r9, #1
 8011b84:	4623      	mov	r3, r4
 8011b86:	469a      	mov	sl, r3
 8011b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b8c:	b10a      	cbz	r2, 8011b92 <_vfiprintf_r+0x86>
 8011b8e:	2a25      	cmp	r2, #37	; 0x25
 8011b90:	d1f9      	bne.n	8011b86 <_vfiprintf_r+0x7a>
 8011b92:	ebba 0b04 	subs.w	fp, sl, r4
 8011b96:	d00b      	beq.n	8011bb0 <_vfiprintf_r+0xa4>
 8011b98:	465b      	mov	r3, fp
 8011b9a:	4622      	mov	r2, r4
 8011b9c:	4629      	mov	r1, r5
 8011b9e:	4630      	mov	r0, r6
 8011ba0:	f7ff ffa2 	bl	8011ae8 <__sfputs_r>
 8011ba4:	3001      	adds	r0, #1
 8011ba6:	f000 80a9 	beq.w	8011cfc <_vfiprintf_r+0x1f0>
 8011baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bac:	445a      	add	r2, fp
 8011bae:	9209      	str	r2, [sp, #36]	; 0x24
 8011bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f000 80a1 	beq.w	8011cfc <_vfiprintf_r+0x1f0>
 8011bba:	2300      	movs	r3, #0
 8011bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bc4:	f10a 0a01 	add.w	sl, sl, #1
 8011bc8:	9304      	str	r3, [sp, #16]
 8011bca:	9307      	str	r3, [sp, #28]
 8011bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8011bd2:	4654      	mov	r4, sl
 8011bd4:	2205      	movs	r2, #5
 8011bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bda:	4854      	ldr	r0, [pc, #336]	; (8011d2c <_vfiprintf_r+0x220>)
 8011bdc:	f7ee fb00 	bl	80001e0 <memchr>
 8011be0:	9a04      	ldr	r2, [sp, #16]
 8011be2:	b9d8      	cbnz	r0, 8011c1c <_vfiprintf_r+0x110>
 8011be4:	06d1      	lsls	r1, r2, #27
 8011be6:	bf44      	itt	mi
 8011be8:	2320      	movmi	r3, #32
 8011bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bee:	0713      	lsls	r3, r2, #28
 8011bf0:	bf44      	itt	mi
 8011bf2:	232b      	movmi	r3, #43	; 0x2b
 8011bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8011bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8011bfe:	d015      	beq.n	8011c2c <_vfiprintf_r+0x120>
 8011c00:	9a07      	ldr	r2, [sp, #28]
 8011c02:	4654      	mov	r4, sl
 8011c04:	2000      	movs	r0, #0
 8011c06:	f04f 0c0a 	mov.w	ip, #10
 8011c0a:	4621      	mov	r1, r4
 8011c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c10:	3b30      	subs	r3, #48	; 0x30
 8011c12:	2b09      	cmp	r3, #9
 8011c14:	d94d      	bls.n	8011cb2 <_vfiprintf_r+0x1a6>
 8011c16:	b1b0      	cbz	r0, 8011c46 <_vfiprintf_r+0x13a>
 8011c18:	9207      	str	r2, [sp, #28]
 8011c1a:	e014      	b.n	8011c46 <_vfiprintf_r+0x13a>
 8011c1c:	eba0 0308 	sub.w	r3, r0, r8
 8011c20:	fa09 f303 	lsl.w	r3, r9, r3
 8011c24:	4313      	orrs	r3, r2
 8011c26:	9304      	str	r3, [sp, #16]
 8011c28:	46a2      	mov	sl, r4
 8011c2a:	e7d2      	b.n	8011bd2 <_vfiprintf_r+0xc6>
 8011c2c:	9b03      	ldr	r3, [sp, #12]
 8011c2e:	1d19      	adds	r1, r3, #4
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	9103      	str	r1, [sp, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	bfbb      	ittet	lt
 8011c38:	425b      	neglt	r3, r3
 8011c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8011c3e:	9307      	strge	r3, [sp, #28]
 8011c40:	9307      	strlt	r3, [sp, #28]
 8011c42:	bfb8      	it	lt
 8011c44:	9204      	strlt	r2, [sp, #16]
 8011c46:	7823      	ldrb	r3, [r4, #0]
 8011c48:	2b2e      	cmp	r3, #46	; 0x2e
 8011c4a:	d10c      	bne.n	8011c66 <_vfiprintf_r+0x15a>
 8011c4c:	7863      	ldrb	r3, [r4, #1]
 8011c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8011c50:	d134      	bne.n	8011cbc <_vfiprintf_r+0x1b0>
 8011c52:	9b03      	ldr	r3, [sp, #12]
 8011c54:	1d1a      	adds	r2, r3, #4
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	9203      	str	r2, [sp, #12]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	bfb8      	it	lt
 8011c5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011c62:	3402      	adds	r4, #2
 8011c64:	9305      	str	r3, [sp, #20]
 8011c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011d3c <_vfiprintf_r+0x230>
 8011c6a:	7821      	ldrb	r1, [r4, #0]
 8011c6c:	2203      	movs	r2, #3
 8011c6e:	4650      	mov	r0, sl
 8011c70:	f7ee fab6 	bl	80001e0 <memchr>
 8011c74:	b138      	cbz	r0, 8011c86 <_vfiprintf_r+0x17a>
 8011c76:	9b04      	ldr	r3, [sp, #16]
 8011c78:	eba0 000a 	sub.w	r0, r0, sl
 8011c7c:	2240      	movs	r2, #64	; 0x40
 8011c7e:	4082      	lsls	r2, r0
 8011c80:	4313      	orrs	r3, r2
 8011c82:	3401      	adds	r4, #1
 8011c84:	9304      	str	r3, [sp, #16]
 8011c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c8a:	4829      	ldr	r0, [pc, #164]	; (8011d30 <_vfiprintf_r+0x224>)
 8011c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c90:	2206      	movs	r2, #6
 8011c92:	f7ee faa5 	bl	80001e0 <memchr>
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d03f      	beq.n	8011d1a <_vfiprintf_r+0x20e>
 8011c9a:	4b26      	ldr	r3, [pc, #152]	; (8011d34 <_vfiprintf_r+0x228>)
 8011c9c:	bb1b      	cbnz	r3, 8011ce6 <_vfiprintf_r+0x1da>
 8011c9e:	9b03      	ldr	r3, [sp, #12]
 8011ca0:	3307      	adds	r3, #7
 8011ca2:	f023 0307 	bic.w	r3, r3, #7
 8011ca6:	3308      	adds	r3, #8
 8011ca8:	9303      	str	r3, [sp, #12]
 8011caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cac:	443b      	add	r3, r7
 8011cae:	9309      	str	r3, [sp, #36]	; 0x24
 8011cb0:	e768      	b.n	8011b84 <_vfiprintf_r+0x78>
 8011cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cb6:	460c      	mov	r4, r1
 8011cb8:	2001      	movs	r0, #1
 8011cba:	e7a6      	b.n	8011c0a <_vfiprintf_r+0xfe>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	3401      	adds	r4, #1
 8011cc0:	9305      	str	r3, [sp, #20]
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	f04f 0c0a 	mov.w	ip, #10
 8011cc8:	4620      	mov	r0, r4
 8011cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cce:	3a30      	subs	r2, #48	; 0x30
 8011cd0:	2a09      	cmp	r2, #9
 8011cd2:	d903      	bls.n	8011cdc <_vfiprintf_r+0x1d0>
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d0c6      	beq.n	8011c66 <_vfiprintf_r+0x15a>
 8011cd8:	9105      	str	r1, [sp, #20]
 8011cda:	e7c4      	b.n	8011c66 <_vfiprintf_r+0x15a>
 8011cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e7f0      	b.n	8011cc8 <_vfiprintf_r+0x1bc>
 8011ce6:	ab03      	add	r3, sp, #12
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	462a      	mov	r2, r5
 8011cec:	4b12      	ldr	r3, [pc, #72]	; (8011d38 <_vfiprintf_r+0x22c>)
 8011cee:	a904      	add	r1, sp, #16
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	f7fd fc59 	bl	800f5a8 <_printf_float>
 8011cf6:	4607      	mov	r7, r0
 8011cf8:	1c78      	adds	r0, r7, #1
 8011cfa:	d1d6      	bne.n	8011caa <_vfiprintf_r+0x19e>
 8011cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cfe:	07d9      	lsls	r1, r3, #31
 8011d00:	d405      	bmi.n	8011d0e <_vfiprintf_r+0x202>
 8011d02:	89ab      	ldrh	r3, [r5, #12]
 8011d04:	059a      	lsls	r2, r3, #22
 8011d06:	d402      	bmi.n	8011d0e <_vfiprintf_r+0x202>
 8011d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d0a:	f7fe f9c2 	bl	8010092 <__retarget_lock_release_recursive>
 8011d0e:	89ab      	ldrh	r3, [r5, #12]
 8011d10:	065b      	lsls	r3, r3, #25
 8011d12:	f53f af1d 	bmi.w	8011b50 <_vfiprintf_r+0x44>
 8011d16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d18:	e71c      	b.n	8011b54 <_vfiprintf_r+0x48>
 8011d1a:	ab03      	add	r3, sp, #12
 8011d1c:	9300      	str	r3, [sp, #0]
 8011d1e:	462a      	mov	r2, r5
 8011d20:	4b05      	ldr	r3, [pc, #20]	; (8011d38 <_vfiprintf_r+0x22c>)
 8011d22:	a904      	add	r1, sp, #16
 8011d24:	4630      	mov	r0, r6
 8011d26:	f7fd fee3 	bl	800faf0 <_printf_i>
 8011d2a:	e7e4      	b.n	8011cf6 <_vfiprintf_r+0x1ea>
 8011d2c:	080129a4 	.word	0x080129a4
 8011d30:	080129ae 	.word	0x080129ae
 8011d34:	0800f5a9 	.word	0x0800f5a9
 8011d38:	08011ae9 	.word	0x08011ae9
 8011d3c:	080129aa 	.word	0x080129aa

08011d40 <__swbuf_r>:
 8011d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d42:	460e      	mov	r6, r1
 8011d44:	4614      	mov	r4, r2
 8011d46:	4605      	mov	r5, r0
 8011d48:	b118      	cbz	r0, 8011d52 <__swbuf_r+0x12>
 8011d4a:	6a03      	ldr	r3, [r0, #32]
 8011d4c:	b90b      	cbnz	r3, 8011d52 <__swbuf_r+0x12>
 8011d4e:	f7fe f86b 	bl	800fe28 <__sinit>
 8011d52:	69a3      	ldr	r3, [r4, #24]
 8011d54:	60a3      	str	r3, [r4, #8]
 8011d56:	89a3      	ldrh	r3, [r4, #12]
 8011d58:	071a      	lsls	r2, r3, #28
 8011d5a:	d525      	bpl.n	8011da8 <__swbuf_r+0x68>
 8011d5c:	6923      	ldr	r3, [r4, #16]
 8011d5e:	b31b      	cbz	r3, 8011da8 <__swbuf_r+0x68>
 8011d60:	6823      	ldr	r3, [r4, #0]
 8011d62:	6922      	ldr	r2, [r4, #16]
 8011d64:	1a98      	subs	r0, r3, r2
 8011d66:	6963      	ldr	r3, [r4, #20]
 8011d68:	b2f6      	uxtb	r6, r6
 8011d6a:	4283      	cmp	r3, r0
 8011d6c:	4637      	mov	r7, r6
 8011d6e:	dc04      	bgt.n	8011d7a <__swbuf_r+0x3a>
 8011d70:	4621      	mov	r1, r4
 8011d72:	4628      	mov	r0, r5
 8011d74:	f7ff fdbc 	bl	80118f0 <_fflush_r>
 8011d78:	b9e0      	cbnz	r0, 8011db4 <__swbuf_r+0x74>
 8011d7a:	68a3      	ldr	r3, [r4, #8]
 8011d7c:	3b01      	subs	r3, #1
 8011d7e:	60a3      	str	r3, [r4, #8]
 8011d80:	6823      	ldr	r3, [r4, #0]
 8011d82:	1c5a      	adds	r2, r3, #1
 8011d84:	6022      	str	r2, [r4, #0]
 8011d86:	701e      	strb	r6, [r3, #0]
 8011d88:	6962      	ldr	r2, [r4, #20]
 8011d8a:	1c43      	adds	r3, r0, #1
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d004      	beq.n	8011d9a <__swbuf_r+0x5a>
 8011d90:	89a3      	ldrh	r3, [r4, #12]
 8011d92:	07db      	lsls	r3, r3, #31
 8011d94:	d506      	bpl.n	8011da4 <__swbuf_r+0x64>
 8011d96:	2e0a      	cmp	r6, #10
 8011d98:	d104      	bne.n	8011da4 <__swbuf_r+0x64>
 8011d9a:	4621      	mov	r1, r4
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f7ff fda7 	bl	80118f0 <_fflush_r>
 8011da2:	b938      	cbnz	r0, 8011db4 <__swbuf_r+0x74>
 8011da4:	4638      	mov	r0, r7
 8011da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011da8:	4621      	mov	r1, r4
 8011daa:	4628      	mov	r0, r5
 8011dac:	f000 f806 	bl	8011dbc <__swsetup_r>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d0d5      	beq.n	8011d60 <__swbuf_r+0x20>
 8011db4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011db8:	e7f4      	b.n	8011da4 <__swbuf_r+0x64>
	...

08011dbc <__swsetup_r>:
 8011dbc:	b538      	push	{r3, r4, r5, lr}
 8011dbe:	4b2a      	ldr	r3, [pc, #168]	; (8011e68 <__swsetup_r+0xac>)
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	6818      	ldr	r0, [r3, #0]
 8011dc4:	460c      	mov	r4, r1
 8011dc6:	b118      	cbz	r0, 8011dd0 <__swsetup_r+0x14>
 8011dc8:	6a03      	ldr	r3, [r0, #32]
 8011dca:	b90b      	cbnz	r3, 8011dd0 <__swsetup_r+0x14>
 8011dcc:	f7fe f82c 	bl	800fe28 <__sinit>
 8011dd0:	89a3      	ldrh	r3, [r4, #12]
 8011dd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011dd6:	0718      	lsls	r0, r3, #28
 8011dd8:	d422      	bmi.n	8011e20 <__swsetup_r+0x64>
 8011dda:	06d9      	lsls	r1, r3, #27
 8011ddc:	d407      	bmi.n	8011dee <__swsetup_r+0x32>
 8011dde:	2309      	movs	r3, #9
 8011de0:	602b      	str	r3, [r5, #0]
 8011de2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011de6:	81a3      	strh	r3, [r4, #12]
 8011de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011dec:	e034      	b.n	8011e58 <__swsetup_r+0x9c>
 8011dee:	0758      	lsls	r0, r3, #29
 8011df0:	d512      	bpl.n	8011e18 <__swsetup_r+0x5c>
 8011df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011df4:	b141      	cbz	r1, 8011e08 <__swsetup_r+0x4c>
 8011df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dfa:	4299      	cmp	r1, r3
 8011dfc:	d002      	beq.n	8011e04 <__swsetup_r+0x48>
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f7fe ffd0 	bl	8010da4 <_free_r>
 8011e04:	2300      	movs	r3, #0
 8011e06:	6363      	str	r3, [r4, #52]	; 0x34
 8011e08:	89a3      	ldrh	r3, [r4, #12]
 8011e0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e0e:	81a3      	strh	r3, [r4, #12]
 8011e10:	2300      	movs	r3, #0
 8011e12:	6063      	str	r3, [r4, #4]
 8011e14:	6923      	ldr	r3, [r4, #16]
 8011e16:	6023      	str	r3, [r4, #0]
 8011e18:	89a3      	ldrh	r3, [r4, #12]
 8011e1a:	f043 0308 	orr.w	r3, r3, #8
 8011e1e:	81a3      	strh	r3, [r4, #12]
 8011e20:	6923      	ldr	r3, [r4, #16]
 8011e22:	b94b      	cbnz	r3, 8011e38 <__swsetup_r+0x7c>
 8011e24:	89a3      	ldrh	r3, [r4, #12]
 8011e26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e2e:	d003      	beq.n	8011e38 <__swsetup_r+0x7c>
 8011e30:	4621      	mov	r1, r4
 8011e32:	4628      	mov	r0, r5
 8011e34:	f000 f884 	bl	8011f40 <__smakebuf_r>
 8011e38:	89a0      	ldrh	r0, [r4, #12]
 8011e3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e3e:	f010 0301 	ands.w	r3, r0, #1
 8011e42:	d00a      	beq.n	8011e5a <__swsetup_r+0x9e>
 8011e44:	2300      	movs	r3, #0
 8011e46:	60a3      	str	r3, [r4, #8]
 8011e48:	6963      	ldr	r3, [r4, #20]
 8011e4a:	425b      	negs	r3, r3
 8011e4c:	61a3      	str	r3, [r4, #24]
 8011e4e:	6923      	ldr	r3, [r4, #16]
 8011e50:	b943      	cbnz	r3, 8011e64 <__swsetup_r+0xa8>
 8011e52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e56:	d1c4      	bne.n	8011de2 <__swsetup_r+0x26>
 8011e58:	bd38      	pop	{r3, r4, r5, pc}
 8011e5a:	0781      	lsls	r1, r0, #30
 8011e5c:	bf58      	it	pl
 8011e5e:	6963      	ldrpl	r3, [r4, #20]
 8011e60:	60a3      	str	r3, [r4, #8]
 8011e62:	e7f4      	b.n	8011e4e <__swsetup_r+0x92>
 8011e64:	2000      	movs	r0, #0
 8011e66:	e7f7      	b.n	8011e58 <__swsetup_r+0x9c>
 8011e68:	20000178 	.word	0x20000178

08011e6c <_raise_r>:
 8011e6c:	291f      	cmp	r1, #31
 8011e6e:	b538      	push	{r3, r4, r5, lr}
 8011e70:	4604      	mov	r4, r0
 8011e72:	460d      	mov	r5, r1
 8011e74:	d904      	bls.n	8011e80 <_raise_r+0x14>
 8011e76:	2316      	movs	r3, #22
 8011e78:	6003      	str	r3, [r0, #0]
 8011e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e7e:	bd38      	pop	{r3, r4, r5, pc}
 8011e80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011e82:	b112      	cbz	r2, 8011e8a <_raise_r+0x1e>
 8011e84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e88:	b94b      	cbnz	r3, 8011e9e <_raise_r+0x32>
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	f000 f830 	bl	8011ef0 <_getpid_r>
 8011e90:	462a      	mov	r2, r5
 8011e92:	4601      	mov	r1, r0
 8011e94:	4620      	mov	r0, r4
 8011e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e9a:	f000 b817 	b.w	8011ecc <_kill_r>
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d00a      	beq.n	8011eb8 <_raise_r+0x4c>
 8011ea2:	1c59      	adds	r1, r3, #1
 8011ea4:	d103      	bne.n	8011eae <_raise_r+0x42>
 8011ea6:	2316      	movs	r3, #22
 8011ea8:	6003      	str	r3, [r0, #0]
 8011eaa:	2001      	movs	r0, #1
 8011eac:	e7e7      	b.n	8011e7e <_raise_r+0x12>
 8011eae:	2400      	movs	r4, #0
 8011eb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	4798      	blx	r3
 8011eb8:	2000      	movs	r0, #0
 8011eba:	e7e0      	b.n	8011e7e <_raise_r+0x12>

08011ebc <raise>:
 8011ebc:	4b02      	ldr	r3, [pc, #8]	; (8011ec8 <raise+0xc>)
 8011ebe:	4601      	mov	r1, r0
 8011ec0:	6818      	ldr	r0, [r3, #0]
 8011ec2:	f7ff bfd3 	b.w	8011e6c <_raise_r>
 8011ec6:	bf00      	nop
 8011ec8:	20000178 	.word	0x20000178

08011ecc <_kill_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4d07      	ldr	r5, [pc, #28]	; (8011eec <_kill_r+0x20>)
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	4608      	mov	r0, r1
 8011ed6:	4611      	mov	r1, r2
 8011ed8:	602b      	str	r3, [r5, #0]
 8011eda:	f7f0 f959 	bl	8002190 <_kill>
 8011ede:	1c43      	adds	r3, r0, #1
 8011ee0:	d102      	bne.n	8011ee8 <_kill_r+0x1c>
 8011ee2:	682b      	ldr	r3, [r5, #0]
 8011ee4:	b103      	cbz	r3, 8011ee8 <_kill_r+0x1c>
 8011ee6:	6023      	str	r3, [r4, #0]
 8011ee8:	bd38      	pop	{r3, r4, r5, pc}
 8011eea:	bf00      	nop
 8011eec:	200023dc 	.word	0x200023dc

08011ef0 <_getpid_r>:
 8011ef0:	f7f0 b946 	b.w	8002180 <_getpid>

08011ef4 <__swhatbuf_r>:
 8011ef4:	b570      	push	{r4, r5, r6, lr}
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011efc:	2900      	cmp	r1, #0
 8011efe:	b096      	sub	sp, #88	; 0x58
 8011f00:	4615      	mov	r5, r2
 8011f02:	461e      	mov	r6, r3
 8011f04:	da0d      	bge.n	8011f22 <__swhatbuf_r+0x2e>
 8011f06:	89a3      	ldrh	r3, [r4, #12]
 8011f08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011f0c:	f04f 0100 	mov.w	r1, #0
 8011f10:	bf0c      	ite	eq
 8011f12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011f16:	2340      	movne	r3, #64	; 0x40
 8011f18:	2000      	movs	r0, #0
 8011f1a:	6031      	str	r1, [r6, #0]
 8011f1c:	602b      	str	r3, [r5, #0]
 8011f1e:	b016      	add	sp, #88	; 0x58
 8011f20:	bd70      	pop	{r4, r5, r6, pc}
 8011f22:	466a      	mov	r2, sp
 8011f24:	f000 f848 	bl	8011fb8 <_fstat_r>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	dbec      	blt.n	8011f06 <__swhatbuf_r+0x12>
 8011f2c:	9901      	ldr	r1, [sp, #4]
 8011f2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011f32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011f36:	4259      	negs	r1, r3
 8011f38:	4159      	adcs	r1, r3
 8011f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f3e:	e7eb      	b.n	8011f18 <__swhatbuf_r+0x24>

08011f40 <__smakebuf_r>:
 8011f40:	898b      	ldrh	r3, [r1, #12]
 8011f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f44:	079d      	lsls	r5, r3, #30
 8011f46:	4606      	mov	r6, r0
 8011f48:	460c      	mov	r4, r1
 8011f4a:	d507      	bpl.n	8011f5c <__smakebuf_r+0x1c>
 8011f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	6123      	str	r3, [r4, #16]
 8011f54:	2301      	movs	r3, #1
 8011f56:	6163      	str	r3, [r4, #20]
 8011f58:	b002      	add	sp, #8
 8011f5a:	bd70      	pop	{r4, r5, r6, pc}
 8011f5c:	ab01      	add	r3, sp, #4
 8011f5e:	466a      	mov	r2, sp
 8011f60:	f7ff ffc8 	bl	8011ef4 <__swhatbuf_r>
 8011f64:	9900      	ldr	r1, [sp, #0]
 8011f66:	4605      	mov	r5, r0
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f7fd f9f1 	bl	800f350 <_malloc_r>
 8011f6e:	b948      	cbnz	r0, 8011f84 <__smakebuf_r+0x44>
 8011f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f74:	059a      	lsls	r2, r3, #22
 8011f76:	d4ef      	bmi.n	8011f58 <__smakebuf_r+0x18>
 8011f78:	f023 0303 	bic.w	r3, r3, #3
 8011f7c:	f043 0302 	orr.w	r3, r3, #2
 8011f80:	81a3      	strh	r3, [r4, #12]
 8011f82:	e7e3      	b.n	8011f4c <__smakebuf_r+0xc>
 8011f84:	89a3      	ldrh	r3, [r4, #12]
 8011f86:	6020      	str	r0, [r4, #0]
 8011f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f8c:	81a3      	strh	r3, [r4, #12]
 8011f8e:	9b00      	ldr	r3, [sp, #0]
 8011f90:	6163      	str	r3, [r4, #20]
 8011f92:	9b01      	ldr	r3, [sp, #4]
 8011f94:	6120      	str	r0, [r4, #16]
 8011f96:	b15b      	cbz	r3, 8011fb0 <__smakebuf_r+0x70>
 8011f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f000 f81d 	bl	8011fdc <_isatty_r>
 8011fa2:	b128      	cbz	r0, 8011fb0 <__smakebuf_r+0x70>
 8011fa4:	89a3      	ldrh	r3, [r4, #12]
 8011fa6:	f023 0303 	bic.w	r3, r3, #3
 8011faa:	f043 0301 	orr.w	r3, r3, #1
 8011fae:	81a3      	strh	r3, [r4, #12]
 8011fb0:	89a3      	ldrh	r3, [r4, #12]
 8011fb2:	431d      	orrs	r5, r3
 8011fb4:	81a5      	strh	r5, [r4, #12]
 8011fb6:	e7cf      	b.n	8011f58 <__smakebuf_r+0x18>

08011fb8 <_fstat_r>:
 8011fb8:	b538      	push	{r3, r4, r5, lr}
 8011fba:	4d07      	ldr	r5, [pc, #28]	; (8011fd8 <_fstat_r+0x20>)
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	4608      	mov	r0, r1
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	602b      	str	r3, [r5, #0]
 8011fc6:	f7f0 f942 	bl	800224e <_fstat>
 8011fca:	1c43      	adds	r3, r0, #1
 8011fcc:	d102      	bne.n	8011fd4 <_fstat_r+0x1c>
 8011fce:	682b      	ldr	r3, [r5, #0]
 8011fd0:	b103      	cbz	r3, 8011fd4 <_fstat_r+0x1c>
 8011fd2:	6023      	str	r3, [r4, #0]
 8011fd4:	bd38      	pop	{r3, r4, r5, pc}
 8011fd6:	bf00      	nop
 8011fd8:	200023dc 	.word	0x200023dc

08011fdc <_isatty_r>:
 8011fdc:	b538      	push	{r3, r4, r5, lr}
 8011fde:	4d06      	ldr	r5, [pc, #24]	; (8011ff8 <_isatty_r+0x1c>)
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	4608      	mov	r0, r1
 8011fe6:	602b      	str	r3, [r5, #0]
 8011fe8:	f7f0 f941 	bl	800226e <_isatty>
 8011fec:	1c43      	adds	r3, r0, #1
 8011fee:	d102      	bne.n	8011ff6 <_isatty_r+0x1a>
 8011ff0:	682b      	ldr	r3, [r5, #0]
 8011ff2:	b103      	cbz	r3, 8011ff6 <_isatty_r+0x1a>
 8011ff4:	6023      	str	r3, [r4, #0]
 8011ff6:	bd38      	pop	{r3, r4, r5, pc}
 8011ff8:	200023dc 	.word	0x200023dc

08011ffc <atan2>:
 8011ffc:	f000 b800 	b.w	8012000 <__ieee754_atan2>

08012000 <__ieee754_atan2>:
 8012000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012004:	ec57 6b11 	vmov	r6, r7, d1
 8012008:	4273      	negs	r3, r6
 801200a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8012188 <__ieee754_atan2+0x188>
 801200e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012012:	4333      	orrs	r3, r6
 8012014:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012018:	4543      	cmp	r3, r8
 801201a:	ec51 0b10 	vmov	r0, r1, d0
 801201e:	ee11 5a10 	vmov	r5, s2
 8012022:	d80a      	bhi.n	801203a <__ieee754_atan2+0x3a>
 8012024:	4244      	negs	r4, r0
 8012026:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801202a:	4304      	orrs	r4, r0
 801202c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012030:	4544      	cmp	r4, r8
 8012032:	ee10 9a10 	vmov	r9, s0
 8012036:	468e      	mov	lr, r1
 8012038:	d907      	bls.n	801204a <__ieee754_atan2+0x4a>
 801203a:	4632      	mov	r2, r6
 801203c:	463b      	mov	r3, r7
 801203e:	f7ee f92d 	bl	800029c <__adddf3>
 8012042:	ec41 0b10 	vmov	d0, r0, r1
 8012046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801204a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801204e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012052:	4334      	orrs	r4, r6
 8012054:	d103      	bne.n	801205e <__ieee754_atan2+0x5e>
 8012056:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801205a:	f000 b899 	b.w	8012190 <atan>
 801205e:	17bc      	asrs	r4, r7, #30
 8012060:	f004 0402 	and.w	r4, r4, #2
 8012064:	ea53 0909 	orrs.w	r9, r3, r9
 8012068:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801206c:	d107      	bne.n	801207e <__ieee754_atan2+0x7e>
 801206e:	2c02      	cmp	r4, #2
 8012070:	d05f      	beq.n	8012132 <__ieee754_atan2+0x132>
 8012072:	2c03      	cmp	r4, #3
 8012074:	d1e5      	bne.n	8012042 <__ieee754_atan2+0x42>
 8012076:	a140      	add	r1, pc, #256	; (adr r1, 8012178 <__ieee754_atan2+0x178>)
 8012078:	e9d1 0100 	ldrd	r0, r1, [r1]
 801207c:	e7e1      	b.n	8012042 <__ieee754_atan2+0x42>
 801207e:	4315      	orrs	r5, r2
 8012080:	d106      	bne.n	8012090 <__ieee754_atan2+0x90>
 8012082:	f1be 0f00 	cmp.w	lr, #0
 8012086:	da5f      	bge.n	8012148 <__ieee754_atan2+0x148>
 8012088:	a13d      	add	r1, pc, #244	; (adr r1, 8012180 <__ieee754_atan2+0x180>)
 801208a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801208e:	e7d8      	b.n	8012042 <__ieee754_atan2+0x42>
 8012090:	4542      	cmp	r2, r8
 8012092:	d10f      	bne.n	80120b4 <__ieee754_atan2+0xb4>
 8012094:	4293      	cmp	r3, r2
 8012096:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801209a:	d107      	bne.n	80120ac <__ieee754_atan2+0xac>
 801209c:	2c02      	cmp	r4, #2
 801209e:	d84c      	bhi.n	801213a <__ieee754_atan2+0x13a>
 80120a0:	4b33      	ldr	r3, [pc, #204]	; (8012170 <__ieee754_atan2+0x170>)
 80120a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80120a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80120aa:	e7ca      	b.n	8012042 <__ieee754_atan2+0x42>
 80120ac:	2c02      	cmp	r4, #2
 80120ae:	d848      	bhi.n	8012142 <__ieee754_atan2+0x142>
 80120b0:	4b30      	ldr	r3, [pc, #192]	; (8012174 <__ieee754_atan2+0x174>)
 80120b2:	e7f6      	b.n	80120a2 <__ieee754_atan2+0xa2>
 80120b4:	4543      	cmp	r3, r8
 80120b6:	d0e4      	beq.n	8012082 <__ieee754_atan2+0x82>
 80120b8:	1a9b      	subs	r3, r3, r2
 80120ba:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80120be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80120c2:	da1e      	bge.n	8012102 <__ieee754_atan2+0x102>
 80120c4:	2f00      	cmp	r7, #0
 80120c6:	da01      	bge.n	80120cc <__ieee754_atan2+0xcc>
 80120c8:	323c      	adds	r2, #60	; 0x3c
 80120ca:	db1e      	blt.n	801210a <__ieee754_atan2+0x10a>
 80120cc:	4632      	mov	r2, r6
 80120ce:	463b      	mov	r3, r7
 80120d0:	f7ee fbc4 	bl	800085c <__aeabi_ddiv>
 80120d4:	ec41 0b10 	vmov	d0, r0, r1
 80120d8:	f000 f9fa 	bl	80124d0 <fabs>
 80120dc:	f000 f858 	bl	8012190 <atan>
 80120e0:	ec51 0b10 	vmov	r0, r1, d0
 80120e4:	2c01      	cmp	r4, #1
 80120e6:	d013      	beq.n	8012110 <__ieee754_atan2+0x110>
 80120e8:	2c02      	cmp	r4, #2
 80120ea:	d015      	beq.n	8012118 <__ieee754_atan2+0x118>
 80120ec:	2c00      	cmp	r4, #0
 80120ee:	d0a8      	beq.n	8012042 <__ieee754_atan2+0x42>
 80120f0:	a317      	add	r3, pc, #92	; (adr r3, 8012150 <__ieee754_atan2+0x150>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	f7ee f8cf 	bl	8000298 <__aeabi_dsub>
 80120fa:	a317      	add	r3, pc, #92	; (adr r3, 8012158 <__ieee754_atan2+0x158>)
 80120fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012100:	e014      	b.n	801212c <__ieee754_atan2+0x12c>
 8012102:	a117      	add	r1, pc, #92	; (adr r1, 8012160 <__ieee754_atan2+0x160>)
 8012104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012108:	e7ec      	b.n	80120e4 <__ieee754_atan2+0xe4>
 801210a:	2000      	movs	r0, #0
 801210c:	2100      	movs	r1, #0
 801210e:	e7e9      	b.n	80120e4 <__ieee754_atan2+0xe4>
 8012110:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012114:	4619      	mov	r1, r3
 8012116:	e794      	b.n	8012042 <__ieee754_atan2+0x42>
 8012118:	a30d      	add	r3, pc, #52	; (adr r3, 8012150 <__ieee754_atan2+0x150>)
 801211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211e:	f7ee f8bb 	bl	8000298 <__aeabi_dsub>
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	a10c      	add	r1, pc, #48	; (adr r1, 8012158 <__ieee754_atan2+0x158>)
 8012128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801212c:	f7ee f8b4 	bl	8000298 <__aeabi_dsub>
 8012130:	e787      	b.n	8012042 <__ieee754_atan2+0x42>
 8012132:	a109      	add	r1, pc, #36	; (adr r1, 8012158 <__ieee754_atan2+0x158>)
 8012134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012138:	e783      	b.n	8012042 <__ieee754_atan2+0x42>
 801213a:	a10b      	add	r1, pc, #44	; (adr r1, 8012168 <__ieee754_atan2+0x168>)
 801213c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012140:	e77f      	b.n	8012042 <__ieee754_atan2+0x42>
 8012142:	2000      	movs	r0, #0
 8012144:	2100      	movs	r1, #0
 8012146:	e77c      	b.n	8012042 <__ieee754_atan2+0x42>
 8012148:	a105      	add	r1, pc, #20	; (adr r1, 8012160 <__ieee754_atan2+0x160>)
 801214a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801214e:	e778      	b.n	8012042 <__ieee754_atan2+0x42>
 8012150:	33145c07 	.word	0x33145c07
 8012154:	3ca1a626 	.word	0x3ca1a626
 8012158:	54442d18 	.word	0x54442d18
 801215c:	400921fb 	.word	0x400921fb
 8012160:	54442d18 	.word	0x54442d18
 8012164:	3ff921fb 	.word	0x3ff921fb
 8012168:	54442d18 	.word	0x54442d18
 801216c:	3fe921fb 	.word	0x3fe921fb
 8012170:	08012b00 	.word	0x08012b00
 8012174:	08012b18 	.word	0x08012b18
 8012178:	54442d18 	.word	0x54442d18
 801217c:	c00921fb 	.word	0xc00921fb
 8012180:	54442d18 	.word	0x54442d18
 8012184:	bff921fb 	.word	0xbff921fb
 8012188:	7ff00000 	.word	0x7ff00000
 801218c:	00000000 	.word	0x00000000

08012190 <atan>:
 8012190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012194:	ec55 4b10 	vmov	r4, r5, d0
 8012198:	4bc3      	ldr	r3, [pc, #780]	; (80124a8 <atan+0x318>)
 801219a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801219e:	429e      	cmp	r6, r3
 80121a0:	46ab      	mov	fp, r5
 80121a2:	dd18      	ble.n	80121d6 <atan+0x46>
 80121a4:	4bc1      	ldr	r3, [pc, #772]	; (80124ac <atan+0x31c>)
 80121a6:	429e      	cmp	r6, r3
 80121a8:	dc01      	bgt.n	80121ae <atan+0x1e>
 80121aa:	d109      	bne.n	80121c0 <atan+0x30>
 80121ac:	b144      	cbz	r4, 80121c0 <atan+0x30>
 80121ae:	4622      	mov	r2, r4
 80121b0:	462b      	mov	r3, r5
 80121b2:	4620      	mov	r0, r4
 80121b4:	4629      	mov	r1, r5
 80121b6:	f7ee f871 	bl	800029c <__adddf3>
 80121ba:	4604      	mov	r4, r0
 80121bc:	460d      	mov	r5, r1
 80121be:	e006      	b.n	80121ce <atan+0x3e>
 80121c0:	f1bb 0f00 	cmp.w	fp, #0
 80121c4:	f300 8131 	bgt.w	801242a <atan+0x29a>
 80121c8:	a59b      	add	r5, pc, #620	; (adr r5, 8012438 <atan+0x2a8>)
 80121ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80121ce:	ec45 4b10 	vmov	d0, r4, r5
 80121d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d6:	4bb6      	ldr	r3, [pc, #728]	; (80124b0 <atan+0x320>)
 80121d8:	429e      	cmp	r6, r3
 80121da:	dc14      	bgt.n	8012206 <atan+0x76>
 80121dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80121e0:	429e      	cmp	r6, r3
 80121e2:	dc0d      	bgt.n	8012200 <atan+0x70>
 80121e4:	a396      	add	r3, pc, #600	; (adr r3, 8012440 <atan+0x2b0>)
 80121e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ea:	ee10 0a10 	vmov	r0, s0
 80121ee:	4629      	mov	r1, r5
 80121f0:	f7ee f854 	bl	800029c <__adddf3>
 80121f4:	4baf      	ldr	r3, [pc, #700]	; (80124b4 <atan+0x324>)
 80121f6:	2200      	movs	r2, #0
 80121f8:	f7ee fc96 	bl	8000b28 <__aeabi_dcmpgt>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d1e6      	bne.n	80121ce <atan+0x3e>
 8012200:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012204:	e02b      	b.n	801225e <atan+0xce>
 8012206:	f000 f963 	bl	80124d0 <fabs>
 801220a:	4bab      	ldr	r3, [pc, #684]	; (80124b8 <atan+0x328>)
 801220c:	429e      	cmp	r6, r3
 801220e:	ec55 4b10 	vmov	r4, r5, d0
 8012212:	f300 80bf 	bgt.w	8012394 <atan+0x204>
 8012216:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801221a:	429e      	cmp	r6, r3
 801221c:	f300 80a0 	bgt.w	8012360 <atan+0x1d0>
 8012220:	ee10 2a10 	vmov	r2, s0
 8012224:	ee10 0a10 	vmov	r0, s0
 8012228:	462b      	mov	r3, r5
 801222a:	4629      	mov	r1, r5
 801222c:	f7ee f836 	bl	800029c <__adddf3>
 8012230:	4ba0      	ldr	r3, [pc, #640]	; (80124b4 <atan+0x324>)
 8012232:	2200      	movs	r2, #0
 8012234:	f7ee f830 	bl	8000298 <__aeabi_dsub>
 8012238:	2200      	movs	r2, #0
 801223a:	4606      	mov	r6, r0
 801223c:	460f      	mov	r7, r1
 801223e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012242:	4620      	mov	r0, r4
 8012244:	4629      	mov	r1, r5
 8012246:	f7ee f829 	bl	800029c <__adddf3>
 801224a:	4602      	mov	r2, r0
 801224c:	460b      	mov	r3, r1
 801224e:	4630      	mov	r0, r6
 8012250:	4639      	mov	r1, r7
 8012252:	f7ee fb03 	bl	800085c <__aeabi_ddiv>
 8012256:	f04f 0a00 	mov.w	sl, #0
 801225a:	4604      	mov	r4, r0
 801225c:	460d      	mov	r5, r1
 801225e:	4622      	mov	r2, r4
 8012260:	462b      	mov	r3, r5
 8012262:	4620      	mov	r0, r4
 8012264:	4629      	mov	r1, r5
 8012266:	f7ee f9cf 	bl	8000608 <__aeabi_dmul>
 801226a:	4602      	mov	r2, r0
 801226c:	460b      	mov	r3, r1
 801226e:	4680      	mov	r8, r0
 8012270:	4689      	mov	r9, r1
 8012272:	f7ee f9c9 	bl	8000608 <__aeabi_dmul>
 8012276:	a374      	add	r3, pc, #464	; (adr r3, 8012448 <atan+0x2b8>)
 8012278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227c:	4606      	mov	r6, r0
 801227e:	460f      	mov	r7, r1
 8012280:	f7ee f9c2 	bl	8000608 <__aeabi_dmul>
 8012284:	a372      	add	r3, pc, #456	; (adr r3, 8012450 <atan+0x2c0>)
 8012286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228a:	f7ee f807 	bl	800029c <__adddf3>
 801228e:	4632      	mov	r2, r6
 8012290:	463b      	mov	r3, r7
 8012292:	f7ee f9b9 	bl	8000608 <__aeabi_dmul>
 8012296:	a370      	add	r3, pc, #448	; (adr r3, 8012458 <atan+0x2c8>)
 8012298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229c:	f7ed fffe 	bl	800029c <__adddf3>
 80122a0:	4632      	mov	r2, r6
 80122a2:	463b      	mov	r3, r7
 80122a4:	f7ee f9b0 	bl	8000608 <__aeabi_dmul>
 80122a8:	a36d      	add	r3, pc, #436	; (adr r3, 8012460 <atan+0x2d0>)
 80122aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ae:	f7ed fff5 	bl	800029c <__adddf3>
 80122b2:	4632      	mov	r2, r6
 80122b4:	463b      	mov	r3, r7
 80122b6:	f7ee f9a7 	bl	8000608 <__aeabi_dmul>
 80122ba:	a36b      	add	r3, pc, #428	; (adr r3, 8012468 <atan+0x2d8>)
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	f7ed ffec 	bl	800029c <__adddf3>
 80122c4:	4632      	mov	r2, r6
 80122c6:	463b      	mov	r3, r7
 80122c8:	f7ee f99e 	bl	8000608 <__aeabi_dmul>
 80122cc:	a368      	add	r3, pc, #416	; (adr r3, 8012470 <atan+0x2e0>)
 80122ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d2:	f7ed ffe3 	bl	800029c <__adddf3>
 80122d6:	4642      	mov	r2, r8
 80122d8:	464b      	mov	r3, r9
 80122da:	f7ee f995 	bl	8000608 <__aeabi_dmul>
 80122de:	a366      	add	r3, pc, #408	; (adr r3, 8012478 <atan+0x2e8>)
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	4680      	mov	r8, r0
 80122e6:	4689      	mov	r9, r1
 80122e8:	4630      	mov	r0, r6
 80122ea:	4639      	mov	r1, r7
 80122ec:	f7ee f98c 	bl	8000608 <__aeabi_dmul>
 80122f0:	a363      	add	r3, pc, #396	; (adr r3, 8012480 <atan+0x2f0>)
 80122f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f6:	f7ed ffcf 	bl	8000298 <__aeabi_dsub>
 80122fa:	4632      	mov	r2, r6
 80122fc:	463b      	mov	r3, r7
 80122fe:	f7ee f983 	bl	8000608 <__aeabi_dmul>
 8012302:	a361      	add	r3, pc, #388	; (adr r3, 8012488 <atan+0x2f8>)
 8012304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012308:	f7ed ffc6 	bl	8000298 <__aeabi_dsub>
 801230c:	4632      	mov	r2, r6
 801230e:	463b      	mov	r3, r7
 8012310:	f7ee f97a 	bl	8000608 <__aeabi_dmul>
 8012314:	a35e      	add	r3, pc, #376	; (adr r3, 8012490 <atan+0x300>)
 8012316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231a:	f7ed ffbd 	bl	8000298 <__aeabi_dsub>
 801231e:	4632      	mov	r2, r6
 8012320:	463b      	mov	r3, r7
 8012322:	f7ee f971 	bl	8000608 <__aeabi_dmul>
 8012326:	a35c      	add	r3, pc, #368	; (adr r3, 8012498 <atan+0x308>)
 8012328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232c:	f7ed ffb4 	bl	8000298 <__aeabi_dsub>
 8012330:	4632      	mov	r2, r6
 8012332:	463b      	mov	r3, r7
 8012334:	f7ee f968 	bl	8000608 <__aeabi_dmul>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4640      	mov	r0, r8
 801233e:	4649      	mov	r1, r9
 8012340:	f7ed ffac 	bl	800029c <__adddf3>
 8012344:	4622      	mov	r2, r4
 8012346:	462b      	mov	r3, r5
 8012348:	f7ee f95e 	bl	8000608 <__aeabi_dmul>
 801234c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012350:	4602      	mov	r2, r0
 8012352:	460b      	mov	r3, r1
 8012354:	d14b      	bne.n	80123ee <atan+0x25e>
 8012356:	4620      	mov	r0, r4
 8012358:	4629      	mov	r1, r5
 801235a:	f7ed ff9d 	bl	8000298 <__aeabi_dsub>
 801235e:	e72c      	b.n	80121ba <atan+0x2a>
 8012360:	ee10 0a10 	vmov	r0, s0
 8012364:	4b53      	ldr	r3, [pc, #332]	; (80124b4 <atan+0x324>)
 8012366:	2200      	movs	r2, #0
 8012368:	4629      	mov	r1, r5
 801236a:	f7ed ff95 	bl	8000298 <__aeabi_dsub>
 801236e:	4b51      	ldr	r3, [pc, #324]	; (80124b4 <atan+0x324>)
 8012370:	4606      	mov	r6, r0
 8012372:	460f      	mov	r7, r1
 8012374:	2200      	movs	r2, #0
 8012376:	4620      	mov	r0, r4
 8012378:	4629      	mov	r1, r5
 801237a:	f7ed ff8f 	bl	800029c <__adddf3>
 801237e:	4602      	mov	r2, r0
 8012380:	460b      	mov	r3, r1
 8012382:	4630      	mov	r0, r6
 8012384:	4639      	mov	r1, r7
 8012386:	f7ee fa69 	bl	800085c <__aeabi_ddiv>
 801238a:	f04f 0a01 	mov.w	sl, #1
 801238e:	4604      	mov	r4, r0
 8012390:	460d      	mov	r5, r1
 8012392:	e764      	b.n	801225e <atan+0xce>
 8012394:	4b49      	ldr	r3, [pc, #292]	; (80124bc <atan+0x32c>)
 8012396:	429e      	cmp	r6, r3
 8012398:	da1d      	bge.n	80123d6 <atan+0x246>
 801239a:	ee10 0a10 	vmov	r0, s0
 801239e:	4b48      	ldr	r3, [pc, #288]	; (80124c0 <atan+0x330>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	4629      	mov	r1, r5
 80123a4:	f7ed ff78 	bl	8000298 <__aeabi_dsub>
 80123a8:	4b45      	ldr	r3, [pc, #276]	; (80124c0 <atan+0x330>)
 80123aa:	4606      	mov	r6, r0
 80123ac:	460f      	mov	r7, r1
 80123ae:	2200      	movs	r2, #0
 80123b0:	4620      	mov	r0, r4
 80123b2:	4629      	mov	r1, r5
 80123b4:	f7ee f928 	bl	8000608 <__aeabi_dmul>
 80123b8:	4b3e      	ldr	r3, [pc, #248]	; (80124b4 <atan+0x324>)
 80123ba:	2200      	movs	r2, #0
 80123bc:	f7ed ff6e 	bl	800029c <__adddf3>
 80123c0:	4602      	mov	r2, r0
 80123c2:	460b      	mov	r3, r1
 80123c4:	4630      	mov	r0, r6
 80123c6:	4639      	mov	r1, r7
 80123c8:	f7ee fa48 	bl	800085c <__aeabi_ddiv>
 80123cc:	f04f 0a02 	mov.w	sl, #2
 80123d0:	4604      	mov	r4, r0
 80123d2:	460d      	mov	r5, r1
 80123d4:	e743      	b.n	801225e <atan+0xce>
 80123d6:	462b      	mov	r3, r5
 80123d8:	ee10 2a10 	vmov	r2, s0
 80123dc:	4939      	ldr	r1, [pc, #228]	; (80124c4 <atan+0x334>)
 80123de:	2000      	movs	r0, #0
 80123e0:	f7ee fa3c 	bl	800085c <__aeabi_ddiv>
 80123e4:	f04f 0a03 	mov.w	sl, #3
 80123e8:	4604      	mov	r4, r0
 80123ea:	460d      	mov	r5, r1
 80123ec:	e737      	b.n	801225e <atan+0xce>
 80123ee:	4b36      	ldr	r3, [pc, #216]	; (80124c8 <atan+0x338>)
 80123f0:	4e36      	ldr	r6, [pc, #216]	; (80124cc <atan+0x33c>)
 80123f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80123f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fa:	f7ed ff4d 	bl	8000298 <__aeabi_dsub>
 80123fe:	4622      	mov	r2, r4
 8012400:	462b      	mov	r3, r5
 8012402:	f7ed ff49 	bl	8000298 <__aeabi_dsub>
 8012406:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801240a:	4602      	mov	r2, r0
 801240c:	460b      	mov	r3, r1
 801240e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012412:	f7ed ff41 	bl	8000298 <__aeabi_dsub>
 8012416:	f1bb 0f00 	cmp.w	fp, #0
 801241a:	4604      	mov	r4, r0
 801241c:	460d      	mov	r5, r1
 801241e:	f6bf aed6 	bge.w	80121ce <atan+0x3e>
 8012422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012426:	461d      	mov	r5, r3
 8012428:	e6d1      	b.n	80121ce <atan+0x3e>
 801242a:	a51d      	add	r5, pc, #116	; (adr r5, 80124a0 <atan+0x310>)
 801242c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012430:	e6cd      	b.n	80121ce <atan+0x3e>
 8012432:	bf00      	nop
 8012434:	f3af 8000 	nop.w
 8012438:	54442d18 	.word	0x54442d18
 801243c:	bff921fb 	.word	0xbff921fb
 8012440:	8800759c 	.word	0x8800759c
 8012444:	7e37e43c 	.word	0x7e37e43c
 8012448:	e322da11 	.word	0xe322da11
 801244c:	3f90ad3a 	.word	0x3f90ad3a
 8012450:	24760deb 	.word	0x24760deb
 8012454:	3fa97b4b 	.word	0x3fa97b4b
 8012458:	a0d03d51 	.word	0xa0d03d51
 801245c:	3fb10d66 	.word	0x3fb10d66
 8012460:	c54c206e 	.word	0xc54c206e
 8012464:	3fb745cd 	.word	0x3fb745cd
 8012468:	920083ff 	.word	0x920083ff
 801246c:	3fc24924 	.word	0x3fc24924
 8012470:	5555550d 	.word	0x5555550d
 8012474:	3fd55555 	.word	0x3fd55555
 8012478:	2c6a6c2f 	.word	0x2c6a6c2f
 801247c:	bfa2b444 	.word	0xbfa2b444
 8012480:	52defd9a 	.word	0x52defd9a
 8012484:	3fadde2d 	.word	0x3fadde2d
 8012488:	af749a6d 	.word	0xaf749a6d
 801248c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012490:	fe231671 	.word	0xfe231671
 8012494:	3fbc71c6 	.word	0x3fbc71c6
 8012498:	9998ebc4 	.word	0x9998ebc4
 801249c:	3fc99999 	.word	0x3fc99999
 80124a0:	54442d18 	.word	0x54442d18
 80124a4:	3ff921fb 	.word	0x3ff921fb
 80124a8:	440fffff 	.word	0x440fffff
 80124ac:	7ff00000 	.word	0x7ff00000
 80124b0:	3fdbffff 	.word	0x3fdbffff
 80124b4:	3ff00000 	.word	0x3ff00000
 80124b8:	3ff2ffff 	.word	0x3ff2ffff
 80124bc:	40038000 	.word	0x40038000
 80124c0:	3ff80000 	.word	0x3ff80000
 80124c4:	bff00000 	.word	0xbff00000
 80124c8:	08012b50 	.word	0x08012b50
 80124cc:	08012b30 	.word	0x08012b30

080124d0 <fabs>:
 80124d0:	ec51 0b10 	vmov	r0, r1, d0
 80124d4:	ee10 2a10 	vmov	r2, s0
 80124d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80124dc:	ec43 2b10 	vmov	d0, r2, r3
 80124e0:	4770      	bx	lr
	...

080124e4 <_init>:
 80124e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e6:	bf00      	nop
 80124e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ea:	bc08      	pop	{r3}
 80124ec:	469e      	mov	lr, r3
 80124ee:	4770      	bx	lr

080124f0 <_fini>:
 80124f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124f2:	bf00      	nop
 80124f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124f6:	bc08      	pop	{r3}
 80124f8:	469e      	mov	lr, r3
 80124fa:	4770      	bx	lr
