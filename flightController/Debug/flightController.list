
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b50  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d3c  08006d3c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d44  08006d44  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000142c  200000fc  08006e48  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001528  08006e48  00021528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d74a  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a7c  00000000  00000000  0002d8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  00030338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000851  00000000  00000000  00030e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017df9  00000000  00000000  000316d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee20  00000000  00000000  000494ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087ec7  00000000  00000000  000582ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cb4  00000000  00000000  000e01b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000e2e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006ccc 	.word	0x08006ccc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08006ccc 	.word	0x08006ccc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80004d4:	f000 f93a 	bl	800074c <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80004d8:	f000 f806 	bl	80004e8 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80004dc:	f000 f86e 	bl	80005bc <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 80004e0:	f005 fede 	bl	80062a0 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    while (1) {
 80004e4:	e7fe      	b.n	80004e4 <main+0x14>
	...

080004e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	; 0x50
 80004ec:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	; 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 fbbc 	bl	8006c74 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <SystemClock_Config+0xcc>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000534:	4a20      	ldr	r2, [pc, #128]	; (80005b8 <SystemClock_Config+0xd0>)
 8000536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 800055c:	230f      	movs	r3, #15
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8000560:	2390      	movs	r3, #144	; 0x90
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000564:	2304      	movs	r3, #4
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8000568:	2305      	movs	r3, #5
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fe95 	bl	80022a0 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x98>
        Error_Handler();
 800057c:	f000 f846 	bl	800060c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000590:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f8f7 	bl	8002790 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc4>
        Error_Handler();
 80005a8:	f000 f830 	bl	800060c <Error_Handler>
    }
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	; 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_GPIO_Init+0x4c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_MspInit+0x4c>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <HAL_MspInit+0x4c>)
 800062c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000630:	6453      	str	r3, [r2, #68]	; 0x44
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <HAL_MspInit+0x4c>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_MspInit+0x4c>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_MspInit+0x4c>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6413      	str	r3, [r2, #64]	; 0x40
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x4c>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000670:	e7fe      	b.n	8000670 <NMI_Handler+0x4>

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <MemManage_Handler+0x4>

0800067e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <UsageFault_Handler+0x4>

0800068a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 f89a 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <OTG_FS_IRQHandler+0x10>)
 80006c6:	f000 fcbd 	bl	8001044 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000dfc 	.word	0x20000dfc

080006d4 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SystemInit+0x20>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <SystemInit+0x20>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006fe:	490e      	ldr	r1, [pc, #56]	; (8000738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000700:	4a0e      	ldr	r2, [pc, #56]	; (800073c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000714:	4c0b      	ldr	r4, [pc, #44]	; (8000744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000722:	f7ff ffd7 	bl	80006d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000726:	f006 faad 	bl	8006c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072a:	f7ff fed1 	bl	80004d0 <main>
  bx  lr
 800072e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000730:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800073c:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 8000740:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000744:	20001528 	.word	0x20001528

08000748 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC_IRQHandler>
	...

0800074c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_Init+0x40>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <HAL_Init+0x40>)
 8000756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_Init+0x40>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_Init+0x40>)
 8000762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x40>)
 800076e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f94f 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	200f      	movs	r0, #15
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff ff4c 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023c00 	.word	0x40023c00

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f967 	bl	8000a82 <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	f000 f92f 	bl	8000a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_IncTick+0x20>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x24>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <HAL_IncTick+0x24>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000008 	.word	0x20000008
 8000814:	20000118 	.word	0x20000118

08000818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_GetTick+0x14>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000118 	.word	0x20000118

08000830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000838:	f7ff ffee 	bl	8000818 <HAL_GetTick>
 800083c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000848:	d005      	beq.n	8000856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_Delay+0x44>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4413      	add	r3, r2
 8000854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000856:	bf00      	nop
 8000858:	f7ff ffde 	bl	8000818 <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	429a      	cmp	r2, r3
 8000866:	d8f7      	bhi.n	8000858 <HAL_Delay+0x28>
  {
  }
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4907      	ldr	r1, [pc, #28]	; (8000914 <__NVIC_EnableIRQ+0x38>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	db0a      	blt.n	8000942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	490c      	ldr	r1, [pc, #48]	; (8000964 <__NVIC_SetPriority+0x4c>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	440b      	add	r3, r1
 800093c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000940:	e00a      	b.n	8000958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4908      	ldr	r1, [pc, #32]	; (8000968 <__NVIC_SetPriority+0x50>)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	3b04      	subs	r3, #4
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	440b      	add	r3, r1
 8000956:	761a      	strb	r2, [r3, #24]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000e100 	.word	0xe000e100
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096c:	b480      	push	{r7}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f1c3 0307 	rsb	r3, r3, #7
 8000986:	2b04      	cmp	r3, #4
 8000988:	bf28      	it	cs
 800098a:	2304      	movcs	r3, #4
 800098c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3304      	adds	r3, #4
 8000992:	2b06      	cmp	r3, #6
 8000994:	d902      	bls.n	800099c <NVIC_EncodePriority+0x30>
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3b03      	subs	r3, #3
 800099a:	e000      	b.n	800099e <NVIC_EncodePriority+0x32>
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43da      	mvns	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	401a      	ands	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43d9      	mvns	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	4313      	orrs	r3, r2
         );
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3724      	adds	r7, #36	; 0x24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e4:	d301      	bcc.n	80009ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00f      	b.n	8000a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <SysTick_Config+0x40>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f2:	210f      	movs	r1, #15
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f8:	f7ff ff8e 	bl	8000918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <SysTick_Config+0x40>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <SysTick_Config+0x40>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	e000e010 	.word	0xe000e010

08000a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff29 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a40:	f7ff ff3e 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6978      	ldr	r0, [r7, #20]
 8000a4c:	f7ff ff8e 	bl	800096c <NVIC_EncodePriority>
 8000a50:	4602      	mov	r2, r0
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff5d 	bl	8000918 <__NVIC_SetPriority>
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff31 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffa2 	bl	80009d4 <SysTick_Config>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	e159      	b.n	8000d6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ab8:	2201      	movs	r2, #1
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	f040 8148 	bne.w	8000d66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0303 	and.w	r3, r3, #3
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d005      	beq.n	8000aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d130      	bne.n	8000b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4013      	ands	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b24:	2201      	movs	r2, #1
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	091b      	lsrs	r3, r3, #4
 8000b3a:	f003 0201 	and.w	r2, r3, #1
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d017      	beq.n	8000b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2203      	movs	r2, #3
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d123      	bne.n	8000be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	220f      	movs	r2, #15
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	08da      	lsrs	r2, r3, #3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3208      	adds	r2, #8
 8000bda:	69b9      	ldr	r1, [r7, #24]
 8000bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0203 	and.w	r2, r3, #3
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 80a2 	beq.w	8000d66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b57      	ldr	r3, [pc, #348]	; (8000d84 <HAL_GPIO_Init+0x2e8>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a56      	ldr	r2, [pc, #344]	; (8000d84 <HAL_GPIO_Init+0x2e8>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <HAL_GPIO_Init+0x2e8>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c3e:	4a52      	ldr	r2, [pc, #328]	; (8000d88 <HAL_GPIO_Init+0x2ec>)
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d019      	beq.n	8000c9e <HAL_GPIO_Init+0x202>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_GPIO_Init+0x2f4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d013      	beq.n	8000c9a <HAL_GPIO_Init+0x1fe>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a47      	ldr	r2, [pc, #284]	; (8000d94 <HAL_GPIO_Init+0x2f8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d00d      	beq.n	8000c96 <HAL_GPIO_Init+0x1fa>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a46      	ldr	r2, [pc, #280]	; (8000d98 <HAL_GPIO_Init+0x2fc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d007      	beq.n	8000c92 <HAL_GPIO_Init+0x1f6>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <HAL_GPIO_Init+0x300>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_GPIO_Init+0x1f2>
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	e008      	b.n	8000ca0 <HAL_GPIO_Init+0x204>
 8000c8e:	2307      	movs	r3, #7
 8000c90:	e006      	b.n	8000ca0 <HAL_GPIO_Init+0x204>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e004      	b.n	8000ca0 <HAL_GPIO_Init+0x204>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e002      	b.n	8000ca0 <HAL_GPIO_Init+0x204>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_GPIO_Init+0x204>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	f002 0203 	and.w	r2, r2, #3
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	4093      	lsls	r3, r2
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb0:	4935      	ldr	r1, [pc, #212]	; (8000d88 <HAL_GPIO_Init+0x2ec>)
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d0c:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	f67f aea2 	bls.w	8000ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40013800 	.word	0x40013800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40020800 	.word	0x40020800
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40013c00 	.word	0x40013c00

08000da4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da6:	b08f      	sub	sp, #60	; 0x3c
 8000da8:	af0a      	add	r7, sp, #40	; 0x28
 8000daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e10f      	b.n	8000fd6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d106      	bne.n	8000dd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f005 fc45 	bl	8006660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 ff98 	bl	8002d2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	687e      	ldr	r6, [r7, #4]
 8000e02:	466d      	mov	r5, sp
 8000e04:	f106 0410 	add.w	r4, r6, #16
 8000e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e14:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e18:	1d33      	adds	r3, r6, #4
 8000e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f001 fe6f 	bl	8002b00 <USB_CoreInit>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e0d0      	b.n	8000fd6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 ff86 	bl	8002d4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e04a      	b.n	8000edc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	333d      	adds	r3, #61	; 0x3d
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	333c      	adds	r3, #60	; 0x3c
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	b298      	uxth	r0, r3
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	3344      	adds	r3, #68	; 0x44
 8000e82:	4602      	mov	r2, r0
 8000e84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4413      	add	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	3340      	adds	r3, #64	; 0x40
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3348      	adds	r3, #72	; 0x48
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	334c      	adds	r3, #76	; 0x4c
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3354      	adds	r3, #84	; 0x54
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d3af      	bcc.n	8000e46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e044      	b.n	8000f76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000eec:	7bfa      	ldrb	r2, [r7, #15]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	440b      	add	r3, r1
 8000efa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d3b5      	bcc.n	8000eec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	687e      	ldr	r6, [r7, #4]
 8000f88:	466d      	mov	r5, sp
 8000f8a:	f106 0410 	add.w	r4, r6, #16
 8000f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f9e:	1d33      	adds	r3, r6, #4
 8000fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa2:	6838      	ldr	r0, [r7, #0]
 8000fa4:	f001 ff1e 	bl	8002de4 <USB_DevInit>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00d      	b.n	8000fd6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 f86d 	bl	80040ae <USB_DevDisconnect>

  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_PCD_Start+0x1c>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e020      	b.n	800103c <HAL_PCD_Start+0x5e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	2b01      	cmp	r3, #1
 8001008:	d109      	bne.n	800101e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001016:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fe70 	bl	8002d08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f003 f81d 	bl	800406c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08d      	sub	sp, #52	; 0x34
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f003 f8db 	bl	8004216 <USB_GetMode>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 848a 	bne.w	800197c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f003 f83f 	bl	80040f0 <USB_ReadInterrupts>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 8480 	beq.w	800197a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f003 f82c 	bl	80040f0 <USB_ReadInterrupts>
 8001098:	4603      	mov	r3, r0
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d107      	bne.n	80010b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f002 0202 	and.w	r2, r2, #2
 80010b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 f81a 	bl	80040f0 <USB_ReadInterrupts>
 80010bc:	4603      	mov	r3, r0
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d161      	bne.n	800118a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0210 	bic.w	r2, r2, #16
 80010d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 020f 	and.w	r2, r3, #15
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	3304      	adds	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	0c5b      	lsrs	r3, r3, #17
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d124      	bne.n	800114c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d035      	beq.n	800117a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	6a38      	ldr	r0, [r7, #32]
 8001122:	f002 fe51 	bl	8003dc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001132:	441a      	add	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	6a1a      	ldr	r2, [r3, #32]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001144:	441a      	add	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	621a      	str	r2, [r3, #32]
 800114a:	e016      	b.n	800117a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	0c5b      	lsrs	r3, r3, #17
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	2b06      	cmp	r3, #6
 8001156:	d110      	bne.n	800117a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800115e:	2208      	movs	r2, #8
 8001160:	4619      	mov	r1, r3
 8001162:	6a38      	ldr	r0, [r7, #32]
 8001164:	f002 fe30 	bl	8003dc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001174:	441a      	add	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0210 	orr.w	r2, r2, #16
 8001188:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f002 ffae 	bl	80040f0 <USB_ReadInterrupts>
 8001194:	4603      	mov	r3, r0
 8001196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800119a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800119e:	f040 80a7 	bne.w	80012f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 ffb3 	bl	8004116 <USB_ReadDevAllOutEpInterrupt>
 80011b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011b2:	e099      	b.n	80012e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 808e 	beq.w	80012dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 ffd7 	bl	800417e <USB_ReadDevOutEPInterrupt>
 80011d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00c      	beq.n	80011f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	015a      	lsls	r2, r3, #5
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	4413      	add	r3, r2
 80011e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011e8:	461a      	mov	r2, r3
 80011ea:	2301      	movs	r3, #1
 80011ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fec3 	bl	8001f7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00c      	beq.n	800121a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	015a      	lsls	r2, r3, #5
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	4413      	add	r3, r2
 8001208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800120c:	461a      	mov	r2, r3
 800120e:	2308      	movs	r3, #8
 8001210:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 ff99 	bl	800214c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	4413      	add	r3, r2
 800122c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001230:	461a      	mov	r2, r3
 8001232:	2310      	movs	r3, #16
 8001234:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d030      	beq.n	80012a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001248:	2b80      	cmp	r3, #128	; 0x80
 800124a:	d109      	bne.n	8001260 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800125a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	3304      	adds	r3, #4
 8001274:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	78db      	ldrb	r3, [r3, #3]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d108      	bne.n	8001290 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2200      	movs	r2, #0
 8001282:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f005 fae4 	bl	8006858 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	015a      	lsls	r2, r3, #5
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	4413      	add	r3, r2
 8001298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800129c:	461a      	mov	r2, r3
 800129e:	2302      	movs	r3, #2
 80012a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	015a      	lsls	r2, r3, #5
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	4413      	add	r3, r2
 80012b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b8:	461a      	mov	r2, r3
 80012ba:	2320      	movs	r3, #32
 80012bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	015a      	lsls	r2, r3, #5
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d4:	461a      	mov	r2, r3
 80012d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	3301      	adds	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e4:	085b      	lsrs	r3, r3, #1
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f47f af62 	bne.w	80011b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fefb 	bl	80040f0 <USB_ReadInterrupts>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001304:	f040 80db 	bne.w	80014be <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f002 ff1c 	bl	800414a <USB_ReadDevAllInEpInterrupt>
 8001312:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001318:	e0cd      	b.n	80014b6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80c2 	beq.w	80014aa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f002 ff42 	bl	80041ba <USB_ReadDevInEPInterrupt>
 8001336:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d057      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	2201      	movs	r2, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	69f9      	ldr	r1, [r7, #28]
 800135e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001362:	4013      	ands	r3, r2
 8001364:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	015a      	lsls	r2, r3, #5
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	4413      	add	r3, r2
 800136e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001372:	461a      	mov	r2, r3
 8001374:	2301      	movs	r3, #1
 8001376:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d132      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	334c      	adds	r3, #76	; 0x4c
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4403      	add	r3, r0
 80013a0:	3348      	adds	r3, #72	; 0x48
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4419      	add	r1, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4403      	add	r3, r0
 80013b4:	334c      	adds	r3, #76	; 0x4c
 80013b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d113      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x3a2>
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c2:	4613      	mov	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	3354      	adds	r3, #84	; 0x54
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d108      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013de:	461a      	mov	r2, r3
 80013e0:	2101      	movs	r1, #1
 80013e2:	f002 ff49 	bl	8004278 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f005 f9b8 	bl	8006762 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	015a      	lsls	r2, r3, #5
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001408:	461a      	mov	r2, r3
 800140a:	2308      	movs	r3, #8
 800140c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001424:	461a      	mov	r2, r3
 8001426:	2310      	movs	r3, #16
 8001428:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001440:	461a      	mov	r2, r3
 8001442:	2340      	movs	r3, #64	; 0x40
 8001444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d023      	beq.n	8001498 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6a38      	ldr	r0, [r7, #32]
 8001454:	f001 fe2a 	bl	80030ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	3338      	adds	r3, #56	; 0x38
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	78db      	ldrb	r3, [r3, #3]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2200      	movs	r2, #0
 8001478:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f005 f9fb 	bl	800687c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	4413      	add	r3, r2
 800148e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001492:	461a      	mov	r2, r3
 8001494:	2302      	movs	r3, #2
 8001496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fcdb 	bl	8001e60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	3301      	adds	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f47f af2e 	bne.w	800131a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fe14 	bl	80040f0 <USB_ReadInterrupts>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014d2:	d122      	bne.n	800151a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fec3 	bl	8002288 <HAL_PCDEx_LPM_Callback>
 8001502:	e002      	b.n	800150a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f005 f999 	bl	800683c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fde6 	bl	80040f0 <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800152e:	d112      	bne.n	8001556 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d102      	bne.n	8001546 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f005 f955 	bl	80067f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001554:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fdc8 	bl	80040f0 <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156a:	f040 80b7 	bne.w	80016dc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2110      	movs	r1, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fd8f 	bl	80030ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001592:	e046      	b.n	8001622 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a0:	461a      	mov	r2, r3
 80015a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015aa:	015a      	lsls	r2, r3, #5
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b8:	0151      	lsls	r1, r2, #5
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	440a      	add	r2, r1
 80015be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d4:	461a      	mov	r2, r3
 80015d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ec:	0151      	lsls	r1, r2, #5
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	440a      	add	r2, r1
 80015f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160c:	0151      	lsls	r1, r2, #5
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	440a      	add	r2, r1
 8001612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800161a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	3301      	adds	r3, #1
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001628:	429a      	cmp	r2, r3
 800162a:	d3b3      	bcc.n	8001594 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800163a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800163e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	2b00      	cmp	r3, #0
 8001646:	d016      	beq.n	8001676 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001658:	f043 030b 	orr.w	r3, r3, #11
 800165c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800166e:	f043 030b 	orr.w	r3, r3, #11
 8001672:	6453      	str	r3, [r2, #68]	; 0x44
 8001674:	e015      	b.n	80016a2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001688:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800168c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169c:	f043 030b 	orr.w	r3, r3, #11
 80016a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016c6:	461a      	mov	r2, r3
 80016c8:	f002 fdd6 	bl	8004278 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fd05 	bl	80040f0 <USB_ReadInterrupts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f0:	d124      	bne.n	800173c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fd9b 	bl	8004232 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f001 fd50 	bl	80031a6 <USB_GetDevSpeed>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681c      	ldr	r4, [r3, #0]
 8001712:	f001 f9e9 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8001716:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	4620      	mov	r0, r4
 8001722:	f001 fa4f 	bl	8002bc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f005 f843 	bl	80067b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800173a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fcd5 	bl	80040f0 <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	d10a      	bne.n	8001766 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f005 f820 	bl	8006796 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f002 0208 	and.w	r2, r2, #8
 8001764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fcc0 	bl	80040f0 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	d122      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001786:	2301      	movs	r3, #1
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
 800178a:	e014      	b.n	80017b6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fb27 	bl	8001dfe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	3301      	adds	r3, #1
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3e5      	bcc.n	800178c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fc93 	bl	80040f0 <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017d4:	d13b      	bne.n	800184e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017d6:	2301      	movs	r3, #1
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
 80017da:	e02b      	b.n	8001834 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3340      	adds	r3, #64	; 0x40
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d115      	bne.n	800182e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001802:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001804:	2b00      	cmp	r3, #0
 8001806:	da12      	bge.n	800182e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	333f      	adds	r3, #63	; 0x3f
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fae8 	bl	8001dfe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183a:	429a      	cmp	r2, r3
 800183c:	d3ce      	bcc.n	80017dc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800184c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fc4c 	bl	80040f0 <USB_ReadInterrupts>
 8001858:	4603      	mov	r3, r0
 800185a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001862:	d155      	bne.n	8001910 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	e045      	b.n	80018f6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d12e      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001892:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001894:	2b00      	cmp	r3, #0
 8001896:	da2b      	bge.n	80018f0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018a4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d121      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10a      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ec:	6053      	str	r3, [r2, #4]
            break;
 80018ee:	e007      	b.n	8001900 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	3301      	adds	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3b4      	bcc.n	800186a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800190e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fbeb 	bl	80040f0 <USB_ReadInterrupts>
 800191a:	4603      	mov	r3, r0
 800191c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d10a      	bne.n	800193c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f004 ffba 	bl	80068a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800193a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fbd5 	bl	80040f0 <USB_ReadInterrupts>
 8001946:	4603      	mov	r3, r0
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b04      	cmp	r3, #4
 800194e:	d115      	bne.n	800197c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f004 ffaa 	bl	80068bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	e000      	b.n	800197c <HAL_PCD_IRQHandler+0x938>
      return;
 800197a:	bf00      	nop
    }
  }
}
 800197c:	3734      	adds	r7, #52	; 0x34
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}

08001982 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_PCD_SetAddress+0x1a>
 8001998:	2302      	movs	r3, #2
 800199a:	e013      	b.n	80019c4 <HAL_PCD_SetAddress+0x42>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	78fa      	ldrb	r2, [r7, #3]
 80019a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fb33 	bl	8004020 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	70fb      	strb	r3, [r7, #3]
 80019de:	460b      	mov	r3, r1
 80019e0:	803b      	strh	r3, [r7, #0]
 80019e2:	4613      	mov	r3, r2
 80019e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da0f      	bge.n	8001a12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	f003 020f 	and.w	r2, r3, #15
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	3338      	adds	r3, #56	; 0x38
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	705a      	strb	r2, [r3, #1]
 8001a10:	e00f      	b.n	8001a32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	f003 020f 	and.w	r2, r3, #15
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a3e:	883a      	ldrh	r2, [r7, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	78ba      	ldrb	r2, [r7, #2]
 8001a48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	785b      	ldrb	r3, [r3, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a5c:	78bb      	ldrb	r3, [r7, #2]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d102      	bne.n	8001a68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_PCD_EP_Open+0xaa>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e00e      	b.n	8001a94 <HAL_PCD_EP_Open+0xc8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68f9      	ldr	r1, [r7, #12]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fbb3 	bl	80031f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001a92:	7afb      	ldrb	r3, [r7, #11]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da0f      	bge.n	8001ad0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	f003 020f 	and.w	r2, r3, #15
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	3338      	adds	r3, #56	; 0x38
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	705a      	strb	r2, [r3, #1]
 8001ace:	e00f      	b.n	8001af0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_PCD_EP_Close+0x6e>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e00e      	b.n	8001b28 <HAL_PCD_EP_Close+0x8c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fbf1 	bl	8003300 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	f003 020f 	and.w	r2, r3, #15
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	3304      	adds	r3, #4
 8001b58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b8c:	7afb      	ldrb	r3, [r7, #11]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6979      	ldr	r1, [r7, #20]
 8001ba4:	f001 fed0 	bl	8003948 <USB_EP0StartXfer>
 8001ba8:	e008      	b.n	8001bbc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	6979      	ldr	r1, [r7, #20]
 8001bb8:	f001 fc7e 	bl	80034b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 020f 	and.w	r2, r3, #15
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001be8:	681b      	ldr	r3, [r3, #0]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	460b      	mov	r3, r1
 8001c04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	7afb      	ldrb	r3, [r7, #11]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3338      	adds	r3, #56	; 0x38
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2201      	movs	r2, #1
 8001c34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c36:	7afb      	ldrb	r3, [r7, #11]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	6979      	ldr	r1, [r7, #20]
 8001c68:	f001 fe6e 	bl	8003948 <USB_EP0StartXfer>
 8001c6c:	e008      	b.n	8001c80 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6979      	ldr	r1, [r7, #20]
 8001c7c:	f001 fc1c 	bl	80034b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d901      	bls.n	8001ca8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e050      	b.n	8001d4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	da0f      	bge.n	8001cd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 020f 	and.w	r2, r3, #15
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	3338      	adds	r3, #56	; 0x38
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	705a      	strb	r2, [r3, #1]
 8001cce:	e00d      	b.n	8001cec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_PCD_EP_SetStall+0x82>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e01e      	b.n	8001d4a <HAL_PCD_EP_SetStall+0xc0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 f8ac 	bl	8003e78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	b2d9      	uxtb	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f002 fa9c 	bl	8004278 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d901      	bls.n	8001d70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e042      	b.n	8001df6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da0f      	bge.n	8001d98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	705a      	strb	r2, [r3, #1]
 8001d96:	e00f      	b.n	8001db8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 020f 	and.w	r2, r3, #15
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_EP_ClrStall+0x86>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e00e      	b.n	8001df6 <HAL_PCD_EP_ClrStall+0xa4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 f8b4 	bl	8003f54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da0c      	bge.n	8001e2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 020f 	and.w	r2, r3, #15
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	3338      	adds	r3, #56	; 0x38
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e00c      	b.n	8001e46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 020f 	and.w	r2, r3, #15
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68f9      	ldr	r1, [r7, #12]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 fed3 	bl	8003bf8 <USB_EPStopXfer>
 8001e52:	4603      	mov	r3, r0
 8001e54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e56:	7afb      	ldrb	r3, [r7, #11]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	3338      	adds	r3, #56	; 0x38
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d901      	bls.n	8001e98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e06c      	b.n	8001f72 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d902      	bls.n	8001eb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3303      	adds	r3, #3
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ebc:	e02b      	b.n	8001f16 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d902      	bls.n	8001eda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3303      	adds	r3, #3
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6978      	ldr	r0, [r7, #20]
 8001efa:	f001 ff27 	bl	8003d4c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	441a      	add	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a1a      	ldr	r2, [r3, #32]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	441a      	add	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d809      	bhi.n	8001f40 <PCD_WriteEmptyTxFifo+0xe0>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d203      	bcs.n	8001f40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1be      	bne.n	8001ebe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d811      	bhi.n	8001f70 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	2201      	movs	r2, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	333c      	adds	r3, #60	; 0x3c
 8001f94:	3304      	adds	r3, #4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d17b      	bne.n	80020aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d015      	beq.n	8001fe8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	4a61      	ldr	r2, [pc, #388]	; (8002144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	f240 80b9 	bls.w	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80b3 	beq.w	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe4:	6093      	str	r3, [r2, #8]
 8001fe6:	e0a7      	b.n	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffe:	461a      	mov	r2, r3
 8002000:	2320      	movs	r3, #32
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	e098      	b.n	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 8093 	bne.w	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	4a4b      	ldr	r2, [pc, #300]	; (8002144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d90f      	bls.n	800203a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002030:	461a      	mov	r2, r3
 8002032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002036:	6093      	str	r3, [r2, #8]
 8002038:	e07e      	b.n	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	0159      	lsls	r1, r3, #5
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	440b      	add	r3, r1
 800205c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002066:	1ad2      	subs	r2, r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d114      	bne.n	800209c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002084:	461a      	mov	r2, r3
 8002086:	2101      	movs	r1, #1
 8002088:	f002 f8f6 	bl	8004278 <USB_EP0_OutStart>
 800208c:	e006      	b.n	800209c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	441a      	add	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f004 fb42 	bl	800672c <HAL_PCD_DataOutStageCallback>
 80020a8:	e046      	b.n	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d124      	bne.n	80020fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c8:	461a      	mov	r2, r3
 80020ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ce:	6093      	str	r3, [r2, #8]
 80020d0:	e032      	b.n	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e8:	461a      	mov	r2, r3
 80020ea:	2320      	movs	r3, #32
 80020ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f004 fb19 	bl	800672c <HAL_PCD_DataOutStageCallback>
 80020fa:	e01d      	b.n	8002138 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d114      	bne.n	800212c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002124:	461a      	mov	r2, r3
 8002126:	2100      	movs	r1, #0
 8002128:	f002 f8a6 	bl	8004278 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f004 fafa 	bl	800672c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	4f54300a 	.word	0x4f54300a
 8002148:	4f54310a 	.word	0x4f54310a

0800214c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	333c      	adds	r3, #60	; 0x3c
 8002164:	3304      	adds	r3, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d90e      	bls.n	80021a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	d009      	beq.n	80021a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002198:	461a      	mov	r2, r3
 800219a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800219e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f004 fab1 	bl	8006708 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d90c      	bls.n	80021c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021c0:	461a      	mov	r2, r3
 80021c2:	2101      	movs	r1, #1
 80021c4:	f002 f858 	bl	8004278 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	4f54300a 	.word	0x4f54300a

080021d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
 80021e4:	4613      	mov	r3, r2
 80021e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d107      	bne.n	8002206 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021f6:	883b      	ldrh	r3, [r7, #0]
 80021f8:	0419      	lsls	r1, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	430a      	orrs	r2, r1
 8002202:	629a      	str	r2, [r3, #40]	; 0x28
 8002204:	e028      	b.n	8002258 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4413      	add	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e00d      	b.n	8002236 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	3340      	adds	r3, #64	; 0x40
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	4413      	add	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	3301      	adds	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	3b01      	subs	r3, #1
 800223c:	429a      	cmp	r2, r3
 800223e:	d3ec      	bcc.n	800221a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002240:	883b      	ldrh	r3, [r7, #0]
 8002242:	0418      	lsls	r0, r3, #16
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	3b01      	subs	r3, #1
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	4302      	orrs	r2, r0
 8002250:	3340      	adds	r3, #64	; 0x40
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e267      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d075      	beq.n	80023aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022be:	4b88      	ldr	r3, [pc, #544]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d00c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ca:	4b85      	ldr	r3, [pc, #532]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d112      	bne.n	80022fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d6:	4b82      	ldr	r3, [pc, #520]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e2:	d10b      	bne.n	80022fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	4b7e      	ldr	r3, [pc, #504]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d05b      	beq.n	80023a8 <HAL_RCC_OscConfig+0x108>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d157      	bne.n	80023a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e242      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d106      	bne.n	8002314 <HAL_RCC_OscConfig+0x74>
 8002306:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a75      	ldr	r2, [pc, #468]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e01d      	b.n	8002350 <HAL_RCC_OscConfig+0xb0>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x98>
 800231e:	4b70      	ldr	r3, [pc, #448]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6f      	ldr	r2, [pc, #444]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b6d      	ldr	r3, [pc, #436]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6c      	ldr	r2, [pc, #432]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0xb0>
 8002338:	4b69      	ldr	r3, [pc, #420]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a68      	ldr	r2, [pc, #416]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 800233e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b66      	ldr	r3, [pc, #408]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a65      	ldr	r2, [pc, #404]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 800234a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fa5e 	bl	8000818 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe fa5a 	bl	8000818 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e207      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b5b      	ldr	r3, [pc, #364]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0xc0>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe fa4a 	bl	8000818 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002388:	f7fe fa46 	bl	8000818 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1f3      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	4b51      	ldr	r3, [pc, #324]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0xe8>
 80023a6:	e000      	b.n	80023aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d063      	beq.n	800247e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023b6:	4b4a      	ldr	r3, [pc, #296]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d11c      	bne.n	8002408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ce:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x152>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e1c7      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4937      	ldr	r1, [pc, #220]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	e03a      	b.n	800247e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002410:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_RCC_OscConfig+0x244>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7fe f9ff 	bl	8000818 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe f9fb 	bl	8000818 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1a8      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4925      	ldr	r1, [pc, #148]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCC_OscConfig+0x244>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe f9de 	bl	8000818 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002460:	f7fe f9da 	bl	8000818 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e187      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d036      	beq.n	80024f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_RCC_OscConfig+0x248>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7fe f9be 	bl	8000818 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a0:	f7fe f9ba 	bl	8000818 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e167      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_OscConfig+0x240>)
 80024b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x200>
 80024be:	e01b      	b.n	80024f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_RCC_OscConfig+0x248>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c6:	f7fe f9a7 	bl	8000818 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024cc:	e00e      	b.n	80024ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ce:	f7fe f9a3 	bl	8000818 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d907      	bls.n	80024ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e150      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
 80024e0:	40023800 	.word	0x40023800
 80024e4:	42470000 	.word	0x42470000
 80024e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	4b88      	ldr	r3, [pc, #544]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80024ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ea      	bne.n	80024ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8097 	beq.w	8002634 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b81      	ldr	r3, [pc, #516]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b7d      	ldr	r3, [pc, #500]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a7c      	ldr	r2, [pc, #496]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b7a      	ldr	r3, [pc, #488]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b77      	ldr	r3, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x474>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4b74      	ldr	r3, [pc, #464]	; (8002714 <HAL_RCC_OscConfig+0x474>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a73      	ldr	r2, [pc, #460]	; (8002714 <HAL_RCC_OscConfig+0x474>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7fe f963 	bl	8000818 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7fe f95f 	bl	8000818 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e10c      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x474>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x2ea>
 800257c:	4b64      	ldr	r3, [pc, #400]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	4a63      	ldr	r2, [pc, #396]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6713      	str	r3, [r2, #112]	; 0x70
 8002588:	e01c      	b.n	80025c4 <HAL_RCC_OscConfig+0x324>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b05      	cmp	r3, #5
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x30c>
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a5e      	ldr	r2, [pc, #376]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	4b5c      	ldr	r3, [pc, #368]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0x324>
 80025ac:	4b58      	ldr	r3, [pc, #352]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	4a57      	ldr	r2, [pc, #348]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6713      	str	r3, [r2, #112]	; 0x70
 80025b8:	4b55      	ldr	r3, [pc, #340]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a54      	ldr	r2, [pc, #336]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d015      	beq.n	80025f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe f924 	bl	8000818 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe f920 	bl	8000818 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0cb      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ea:	4b49      	ldr	r3, [pc, #292]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ee      	beq.n	80025d4 <HAL_RCC_OscConfig+0x334>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7fe f90e 	bl	8000818 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7fe f90a 	bl	8000818 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e0b5      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002616:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ee      	bne.n	8002600 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002622:	7dfb      	ldrb	r3, [r7, #23]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4a38      	ldr	r2, [pc, #224]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 800262e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a1 	beq.w	8002780 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800263e:	4b34      	ldr	r3, [pc, #208]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b08      	cmp	r3, #8
 8002648:	d05c      	beq.n	8002704 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d141      	bne.n	80026d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCC_OscConfig+0x478>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe f8de 	bl	8000818 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe f8da 	bl	8000818 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e087      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	019b      	lsls	r3, r3, #6
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	3b01      	subs	r3, #1
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	491b      	ldr	r1, [pc, #108]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_RCC_OscConfig+0x478>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe f8b3 	bl	8000818 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b6:	f7fe f8af 	bl	8000818 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e05c      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x416>
 80026d4:	e054      	b.n	8002780 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_RCC_OscConfig+0x478>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe f89c 	bl	8000818 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e4:	f7fe f898 	bl	8000818 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e045      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_OscConfig+0x470>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x444>
 8002702:	e03d      	b.n	8002780 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d107      	bne.n	800271c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e038      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
 8002710:	40023800 	.word	0x40023800
 8002714:	40007000 	.word	0x40007000
 8002718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x4ec>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d028      	beq.n	800277c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d121      	bne.n	800277c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d11a      	bne.n	800277c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800274c:	4013      	ands	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002754:	4293      	cmp	r3, r2
 8002756:	d111      	bne.n	800277c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	3b01      	subs	r3, #1
 8002766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0cc      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d90c      	bls.n	80027cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b65      	ldr	r3, [pc, #404]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b8      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494d      	ldr	r1, [pc, #308]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d044      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d119      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07f      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d003      	beq.n	800284e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284a:	2b03      	cmp	r3, #3
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	4b3f      	ldr	r3, [pc, #252]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06f      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e067      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b37      	ldr	r3, [pc, #220]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4934      	ldr	r1, [pc, #208]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002880:	f7fd ffca 	bl	8000818 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fd ffc6 	bl	8000818 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e04f      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b2b      	ldr	r3, [pc, #172]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d20c      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e032      	b.n	800293e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4916      	ldr	r1, [pc, #88]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f821 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800291a:	4602      	mov	r2, r0
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	490a      	ldr	r1, [pc, #40]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	5ccb      	ldrb	r3, [r1, r3]
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd ff2a 	bl	8000790 <HAL_InitTick>

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00
 800294c:	40023800 	.word	0x40023800
 8002950:	08006d2c 	.word	0x08006d2c
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002960:	b090      	sub	sp, #64	; 0x40
 8002962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
 8002968:	2300      	movs	r3, #0
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296c:	2300      	movs	r3, #0
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002974:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_RCC_GetSysClockFreq+0x180>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d00d      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x40>
 8002980:	2b08      	cmp	r3, #8
 8002982:	f200 80a1 	bhi.w	8002ac8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x34>
 800298a:	2b04      	cmp	r3, #4
 800298c:	d003      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x3a>
 800298e:	e09b      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002994:	e09b      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002996:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800299a:	e098      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800299c:	4b4f      	ldr	r3, [pc, #316]	; (8002adc <HAL_RCC_GetSysClockFreq+0x180>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a6:	4b4d      	ldr	r3, [pc, #308]	; (8002adc <HAL_RCC_GetSysClockFreq+0x180>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d028      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b2:	4b4a      	ldr	r3, [pc, #296]	; (8002adc <HAL_RCC_GetSysClockFreq+0x180>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	099b      	lsrs	r3, r3, #6
 80029b8:	2200      	movs	r2, #0
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	627a      	str	r2, [r7, #36]	; 0x24
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029c4:	2100      	movs	r1, #0
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80029c8:	fb03 f201 	mul.w	r2, r3, r1
 80029cc:	2300      	movs	r3, #0
 80029ce:	fb00 f303 	mul.w	r3, r0, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	4a43      	ldr	r2, [pc, #268]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80029d6:	fba0 1202 	umull	r1, r2, r0, r2
 80029da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029dc:	460a      	mov	r2, r1
 80029de:	62ba      	str	r2, [r7, #40]	; 0x28
 80029e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e2:	4413      	add	r3, r2
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e8:	2200      	movs	r2, #0
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	61fa      	str	r2, [r7, #28]
 80029ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029f6:	f7fd fbed 	bl	80001d4 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4613      	mov	r3, r2
 8002a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a02:	e053      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a04:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_RCC_GetSysClockFreq+0x180>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	617a      	str	r2, [r7, #20]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a16:	f04f 0b00 	mov.w	fp, #0
 8002a1a:	4652      	mov	r2, sl
 8002a1c:	465b      	mov	r3, fp
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	0159      	lsls	r1, r3, #5
 8002a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2c:	0150      	lsls	r0, r2, #5
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	ebb2 080a 	subs.w	r8, r2, sl
 8002a36:	eb63 090b 	sbc.w	r9, r3, fp
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a4e:	ebb2 0408 	subs.w	r4, r2, r8
 8002a52:	eb63 0509 	sbc.w	r5, r3, r9
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	00eb      	lsls	r3, r5, #3
 8002a60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a64:	00e2      	lsls	r2, r4, #3
 8002a66:	4614      	mov	r4, r2
 8002a68:	461d      	mov	r5, r3
 8002a6a:	eb14 030a 	adds.w	r3, r4, sl
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	eb45 030b 	adc.w	r3, r5, fp
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a82:	4629      	mov	r1, r5
 8002a84:	028b      	lsls	r3, r1, #10
 8002a86:	4621      	mov	r1, r4
 8002a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	028a      	lsls	r2, r1, #10
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a96:	2200      	movs	r2, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	60fa      	str	r2, [r7, #12]
 8002a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aa0:	f7fd fb98 	bl	80001d4 <__aeabi_uldivmod>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCC_GetSysClockFreq+0x180>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ac6:	e002      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3740      	adds	r7, #64	; 0x40
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	00f42400 	.word	0x00f42400
 8002ae4:	017d7840 	.word	0x017d7840

08002ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000000 	.word	0x20000000

08002b00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b00:	b084      	sub	sp, #16
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	f107 001c 	add.w	r0, r7, #28
 8002b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d122      	bne.n	8002b5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f001 fbee 	bl	8004334 <USB_CoreReset>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e01a      	b.n	8002b94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f001 fbe2 	bl	8004334 <USB_CoreReset>
 8002b70:	4603      	mov	r3, r0
 8002b72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
 8002b86:	e005      	b.n	8002b94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10b      	bne.n	8002bb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f043 0206 	orr.w	r2, r3, #6
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f043 0220 	orr.w	r2, r3, #32
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bbe:	b004      	add	sp, #16
 8002bc0:	4770      	bx	lr
	...

08002bc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d165      	bne.n	8002ca4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4a41      	ldr	r2, [pc, #260]	; (8002ce0 <USB_SetTurnaroundTime+0x11c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d906      	bls.n	8002bee <USB_SetTurnaroundTime+0x2a>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4a40      	ldr	r2, [pc, #256]	; (8002ce4 <USB_SetTurnaroundTime+0x120>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d202      	bcs.n	8002bee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002be8:	230f      	movs	r3, #15
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e062      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4a3c      	ldr	r2, [pc, #240]	; (8002ce4 <USB_SetTurnaroundTime+0x120>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d306      	bcc.n	8002c04 <USB_SetTurnaroundTime+0x40>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4a3b      	ldr	r2, [pc, #236]	; (8002ce8 <USB_SetTurnaroundTime+0x124>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d202      	bcs.n	8002c04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002bfe:	230e      	movs	r3, #14
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e057      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4a38      	ldr	r2, [pc, #224]	; (8002ce8 <USB_SetTurnaroundTime+0x124>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d306      	bcc.n	8002c1a <USB_SetTurnaroundTime+0x56>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4a37      	ldr	r2, [pc, #220]	; (8002cec <USB_SetTurnaroundTime+0x128>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d202      	bcs.n	8002c1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c14:	230d      	movs	r3, #13
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e04c      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4a33      	ldr	r2, [pc, #204]	; (8002cec <USB_SetTurnaroundTime+0x128>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d306      	bcc.n	8002c30 <USB_SetTurnaroundTime+0x6c>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a32      	ldr	r2, [pc, #200]	; (8002cf0 <USB_SetTurnaroundTime+0x12c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d802      	bhi.n	8002c30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e041      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <USB_SetTurnaroundTime+0x12c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d906      	bls.n	8002c46 <USB_SetTurnaroundTime+0x82>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <USB_SetTurnaroundTime+0x130>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d802      	bhi.n	8002c46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c40:	230b      	movs	r3, #11
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e036      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <USB_SetTurnaroundTime+0x130>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d906      	bls.n	8002c5c <USB_SetTurnaroundTime+0x98>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4a29      	ldr	r2, [pc, #164]	; (8002cf8 <USB_SetTurnaroundTime+0x134>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d802      	bhi.n	8002c5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c56:	230a      	movs	r3, #10
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e02b      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <USB_SetTurnaroundTime+0x134>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d906      	bls.n	8002c72 <USB_SetTurnaroundTime+0xae>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <USB_SetTurnaroundTime+0x138>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d202      	bcs.n	8002c72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c6c:	2309      	movs	r3, #9
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e020      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <USB_SetTurnaroundTime+0x138>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d306      	bcc.n	8002c88 <USB_SetTurnaroundTime+0xc4>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <USB_SetTurnaroundTime+0x13c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d802      	bhi.n	8002c88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c82:	2308      	movs	r3, #8
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e015      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <USB_SetTurnaroundTime+0x13c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d906      	bls.n	8002c9e <USB_SetTurnaroundTime+0xda>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <USB_SetTurnaroundTime+0x140>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d202      	bcs.n	8002c9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e00a      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c9e:	2306      	movs	r3, #6
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e007      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002caa:	2309      	movs	r3, #9
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	e001      	b.n	8002cb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002cb0:	2309      	movs	r3, #9
 8002cb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	00d8acbf 	.word	0x00d8acbf
 8002ce4:	00e4e1c0 	.word	0x00e4e1c0
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	01067380 	.word	0x01067380
 8002cf0:	011a499f 	.word	0x011a499f
 8002cf4:	01312cff 	.word	0x01312cff
 8002cf8:	014ca43f 	.word	0x014ca43f
 8002cfc:	016e3600 	.word	0x016e3600
 8002d00:	01a6ab1f 	.word	0x01a6ab1f
 8002d04:	01e84800 	.word	0x01e84800

08002d08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 0201 	bic.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d115      	bne.n	8002d9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f7fd fd58 	bl	8000830 <HAL_Delay>
      ms++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f001 fa45 	bl	8004216 <USB_GetMode>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d01e      	beq.n	8002dd0 <USB_SetCurrentMode+0x84>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b31      	cmp	r3, #49	; 0x31
 8002d96:	d9f0      	bls.n	8002d7a <USB_SetCurrentMode+0x2e>
 8002d98:	e01a      	b.n	8002dd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7fd fd3f 	bl	8000830 <HAL_Delay>
      ms++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3301      	adds	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f001 fa2c 	bl	8004216 <USB_GetMode>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <USB_SetCurrentMode+0x84>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b31      	cmp	r3, #49	; 0x31
 8002dc8:	d9f0      	bls.n	8002dac <USB_SetCurrentMode+0x60>
 8002dca:	e001      	b.n	8002dd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e005      	b.n	8002ddc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b32      	cmp	r3, #50	; 0x32
 8002dd4:	d101      	bne.n	8002dda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002de4:	b084      	sub	sp, #16
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e009      	b.n	8002e18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	3340      	adds	r3, #64	; 0x40
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	3301      	adds	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b0e      	cmp	r3, #14
 8002e1c:	d9f2      	bls.n	8002e04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11c      	bne.n	8002e5e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8002e5c:	e00b      	b.n	8002e76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e90:	461a      	mov	r2, r3
 8002e92:	680b      	ldr	r3, [r1, #0]
 8002e94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10c      	bne.n	8002eb6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f965 	bl	8003174 <USB_SetDevSpeed>
 8002eaa:	e008      	b.n	8002ebe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002eac:	2101      	movs	r1, #1
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f960 	bl	8003174 <USB_SetDevSpeed>
 8002eb4:	e003      	b.n	8002ebe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f95b 	bl	8003174 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ebe:	2110      	movs	r1, #16
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f8f3 	bl	80030ac <USB_FlushTxFifo>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f91f 	bl	8003114 <USB_FlushRxFifo>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2300      	movs	r3, #0
 8002eea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efe:	461a      	mov	r2, r3
 8002f00:	2300      	movs	r3, #0
 8002f02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	e043      	b.n	8002f92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f20:	d118      	bne.n	8002f54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f34:	461a      	mov	r2, r3
 8002f36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e013      	b.n	8002f66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e008      	b.n	8002f66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f60:	461a      	mov	r2, r3
 8002f62:	2300      	movs	r3, #0
 8002f64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f72:	461a      	mov	r2, r3
 8002f74:	2300      	movs	r3, #0
 8002f76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f84:	461a      	mov	r2, r3
 8002f86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3b7      	bcc.n	8002f0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e043      	b.n	8003028 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fb6:	d118      	bne.n	8002fea <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e013      	b.n	8002ffc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e008      	b.n	8002ffc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	2300      	movs	r3, #0
 800300c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003020:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3301      	adds	r3, #1
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	429a      	cmp	r2, r3
 800302e:	d3b7      	bcc.n	8002fa0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003042:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003050:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <USB_DevInit+0x2c4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f043 0208 	orr.w	r2, r3, #8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d107      	bne.n	8003098 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003098:	7dfb      	ldrb	r3, [r7, #23]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030a4:	b004      	add	sp, #16
 80030a6:	4770      	bx	lr
 80030a8:	803c3800 	.word	0x803c3800

080030ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3301      	adds	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a13      	ldr	r2, [pc, #76]	; (8003110 <USB_FlushTxFifo+0x64>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e01b      	b.n	8003104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	daf2      	bge.n	80030ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	019b      	lsls	r3, r3, #6
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a08      	ldr	r2, [pc, #32]	; (8003110 <USB_FlushTxFifo+0x64>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e006      	b.n	8003104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d0f0      	beq.n	80030e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	00030d40 	.word	0x00030d40

08003114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a11      	ldr	r2, [pc, #68]	; (8003170 <USB_FlushRxFifo+0x5c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e018      	b.n	8003164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	daf2      	bge.n	8003120 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2210      	movs	r2, #16
 8003142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3301      	adds	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a08      	ldr	r2, [pc, #32]	; (8003170 <USB_FlushRxFifo+0x5c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e006      	b.n	8003164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b10      	cmp	r3, #16
 8003160:	d0f0      	beq.n	8003144 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	00030d40 	.word	0x00030d40

08003174 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0306 	and.w	r3, r3, #6
 80031be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
 80031ca:	e00a      	b.n	80031e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d002      	beq.n	80031d8 <USB_GetDevSpeed+0x32>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d102      	bne.n	80031de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80031d8:	2302      	movs	r3, #2
 80031da:	75fb      	strb	r3, [r7, #23]
 80031dc:	e001      	b.n	80031e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80031de:	230f      	movs	r3, #15
 80031e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d13a      	bne.n	8003282 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	b29b      	uxth	r3, r3
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800322a:	4313      	orrs	r3, r2
 800322c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d155      	bne.n	80032f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	791b      	ldrb	r3, [r3, #4]
 800325e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003260:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	059b      	lsls	r3, r3, #22
 8003266:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003268:	4313      	orrs	r3, r2
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	0151      	lsls	r1, r2, #5
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	440a      	add	r2, r1
 8003272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	e036      	b.n	80032f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	2101      	movs	r1, #1
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11a      	bne.n	80032f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	791b      	ldrb	r3, [r3, #4]
 80032d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032d6:	430b      	orrs	r3, r1
 80032d8:	4313      	orrs	r3, r2
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	0151      	lsls	r1, r2, #5
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	440a      	add	r2, r1
 80032e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d161      	bne.n	80033e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800332e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003332:	d11f      	bne.n	8003374 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	440a      	add	r2, r1
 800334a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800334e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003352:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	0151      	lsls	r1, r2, #5
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	440a      	add	r2, r1
 800336a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800336e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	b29b      	uxth	r3, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	68f9      	ldr	r1, [r7, #12]
 8003390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003394:	4013      	ands	r3, r2
 8003396:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b8:	4013      	ands	r3, r2
 80033ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	0159      	lsls	r1, r3, #5
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	440b      	add	r3, r1
 80033d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d6:	4619      	mov	r1, r3
 80033d8:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <USB_DeactivateEndpoint+0x1b0>)
 80033da:	4013      	ands	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
 80033de:	e060      	b.n	80034a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033f6:	d11f      	bne.n	8003438 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	440a      	add	r2, r1
 800340e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003416:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	0151      	lsls	r1, r2, #5
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	440a      	add	r2, r1
 800342e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	041b      	lsls	r3, r3, #16
 8003450:	43db      	mvns	r3, r3
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003458:	4013      	ands	r3, r2
 800345a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	041b      	lsls	r3, r3, #16
 8003474:	43db      	mvns	r3, r3
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800347c:	4013      	ands	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	440b      	add	r3, r1
 8003496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349a:	4619      	mov	r1, r3
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <USB_DeactivateEndpoint+0x1b4>)
 800349e:	4013      	ands	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	ec337800 	.word	0xec337800
 80034b4:	eff37800 	.word	0xeff37800

080034b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	4613      	mov	r3, r2
 80034c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	f040 815c 	bne.w	8003792 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d132      	bne.n	8003548 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	0151      	lsls	r1, r2, #5
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	440a      	add	r2, r1
 80034f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003500:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003504:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	0151      	lsls	r1, r2, #5
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	440a      	add	r2, r1
 800351c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	0151      	lsls	r1, r2, #5
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	440a      	add	r2, r1
 800353c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003540:	0cdb      	lsrs	r3, r3, #19
 8003542:	04db      	lsls	r3, r3, #19
 8003544:	6113      	str	r3, [r2, #16]
 8003546:	e074      	b.n	8003632 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	0151      	lsls	r1, r2, #5
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	440a      	add	r2, r1
 800355e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003562:	0cdb      	lsrs	r3, r3, #19
 8003564:	04db      	lsls	r3, r3, #19
 8003566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	0151      	lsls	r1, r2, #5
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	440a      	add	r2, r1
 800357e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003582:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003586:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800358a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	440b      	add	r3, r1
 80035a4:	1e59      	subs	r1, r3, #1
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035b0:	4b9d      	ldr	r3, [pc, #628]	; (8003828 <USB_EPStartXfer+0x370>)
 80035b2:	400b      	ands	r3, r1
 80035b4:	69b9      	ldr	r1, [r7, #24]
 80035b6:	0148      	lsls	r0, r1, #5
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	4401      	add	r1, r0
 80035bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035c0:	4313      	orrs	r3, r2
 80035c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	69b9      	ldr	r1, [r7, #24]
 80035dc:	0148      	lsls	r0, r1, #5
 80035de:	69f9      	ldr	r1, [r7, #28]
 80035e0:	4401      	add	r1, r0
 80035e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035e6:	4313      	orrs	r3, r2
 80035e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	791b      	ldrb	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d11f      	bne.n	8003632 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	440a      	add	r2, r1
 8003608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800360c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003610:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	440a      	add	r2, r1
 8003628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003630:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d14b      	bne.n	80036d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	791b      	ldrb	r3, [r3, #4]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d128      	bne.n	80036ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d110      	bne.n	800368e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	0151      	lsls	r1, r2, #5
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	440a      	add	r2, r1
 8003682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003686:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e00f      	b.n	80036ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	0151      	lsls	r1, r2, #5
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	440a      	add	r2, r1
 80036a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	0151      	lsls	r1, r2, #5
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	440a      	add	r2, r1
 80036c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e133      	b.n	8003938 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	0151      	lsls	r1, r2, #5
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	440a      	add	r2, r1
 80036e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	791b      	ldrb	r3, [r3, #4]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d015      	beq.n	8003724 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 811b 	beq.w	8003938 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	69f9      	ldr	r1, [r7, #28]
 800371a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800371e:	4313      	orrs	r3, r2
 8003720:	634b      	str	r3, [r1, #52]	; 0x34
 8003722:	e109      	b.n	8003938 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d110      	bne.n	8003756 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	0151      	lsls	r1, r2, #5
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	440a      	add	r2, r1
 800374a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800374e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e00f      	b.n	8003776 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	0151      	lsls	r1, r2, #5
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	440a      	add	r2, r1
 800376c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003774:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6919      	ldr	r1, [r3, #16]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	b298      	uxth	r0, r3
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4603      	mov	r3, r0
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fade 	bl	8003d4c <USB_WritePacket>
 8003790:	e0d2      	b.n	8003938 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037ac:	0cdb      	lsrs	r3, r3, #19
 80037ae:	04db      	lsls	r3, r3, #19
 80037b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d126      	bne.n	800382c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	0148      	lsls	r0, r1, #5
 80037f8:	69f9      	ldr	r1, [r7, #28]
 80037fa:	4401      	add	r1, r0
 80037fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003800:	4313      	orrs	r3, r2
 8003802:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	0151      	lsls	r1, r2, #5
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	440a      	add	r2, r1
 800381a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003822:	6113      	str	r3, [r2, #16]
 8003824:	e03a      	b.n	800389c <USB_EPStartXfer+0x3e4>
 8003826:	bf00      	nop
 8003828:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4413      	add	r3, r2
 8003836:	1e5a      	subs	r2, r3, #1
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	8afa      	ldrh	r2, [r7, #22]
 8003848:	fb03 f202 	mul.w	r2, r3, r2
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	8afb      	ldrh	r3, [r7, #22]
 8003860:	04d9      	lsls	r1, r3, #19
 8003862:	4b38      	ldr	r3, [pc, #224]	; (8003944 <USB_EPStartXfer+0x48c>)
 8003864:	400b      	ands	r3, r1
 8003866:	69b9      	ldr	r1, [r7, #24]
 8003868:	0148      	lsls	r0, r1, #5
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	4401      	add	r1, r0
 800386e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003872:	4313      	orrs	r3, r2
 8003874:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388c:	69b9      	ldr	r1, [r7, #24]
 800388e:	0148      	lsls	r0, r1, #5
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	4401      	add	r1, r0
 8003894:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003898:	4313      	orrs	r3, r2
 800389a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10d      	bne.n	80038be <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6919      	ldr	r1, [r3, #16]
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ba:	460a      	mov	r2, r1
 80038bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	791b      	ldrb	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d128      	bne.n	8003918 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d110      	bne.n	80038f8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e00f      	b.n	8003918 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003916:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	440a      	add	r2, r1
 800392e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003936:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	1ff80000 	.word	0x1ff80000

08003948 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b01      	cmp	r3, #1
 8003966:	f040 80ce 	bne.w	8003b06 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d132      	bne.n	80039d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	440a      	add	r2, r1
 8003988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800398c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003990:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003994:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	0151      	lsls	r1, r2, #5
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	440a      	add	r2, r1
 80039cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d0:	0cdb      	lsrs	r3, r3, #19
 80039d2:	04db      	lsls	r3, r3, #19
 80039d4:	6113      	str	r3, [r2, #16]
 80039d6:	e04e      	b.n	8003a76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f2:	0cdb      	lsrs	r3, r3, #19
 80039f4:	04db      	lsls	r3, r3, #19
 80039f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	0151      	lsls	r1, r2, #5
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d903      	bls.n	8003a30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	0151      	lsls	r1, r2, #5
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	440a      	add	r2, r1
 8003a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a66:	6939      	ldr	r1, [r7, #16]
 8003a68:	0148      	lsls	r0, r1, #5
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	4401      	add	r1, r0
 8003a6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a72:	4313      	orrs	r3, r2
 8003a74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d11e      	bne.n	8003aba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a90:	461a      	mov	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	0151      	lsls	r1, r2, #5
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	440a      	add	r2, r1
 8003aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e097      	b.n	8003bea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	0151      	lsls	r1, r2, #5
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	440a      	add	r2, r1
 8003ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8083 	beq.w	8003bea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	6979      	ldr	r1, [r7, #20]
 8003afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b00:	4313      	orrs	r3, r2
 8003b02:	634b      	str	r3, [r1, #52]	; 0x34
 8003b04:	e071      	b.n	8003bea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	0151      	lsls	r1, r2, #5
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	440a      	add	r2, r1
 8003b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b20:	0cdb      	lsrs	r3, r3, #19
 8003b22:	04db      	lsls	r3, r3, #19
 8003b24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b98:	6939      	ldr	r1, [r7, #16]
 8003b9a:	0148      	lsls	r0, r1, #5
 8003b9c:	6979      	ldr	r1, [r7, #20]
 8003b9e:	4401      	add	r1, r0
 8003ba0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10d      	bne.n	8003bca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6919      	ldr	r1, [r3, #16]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc6:	460a      	mov	r2, r1
 8003bc8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003be8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d14a      	bne.n	8003cac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2e:	f040 8086 	bne.w	8003d3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	7812      	ldrb	r2, [r2, #0]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d902      	bls.n	8003c90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
          break;
 8003c8e:	e056      	b.n	8003d3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca8:	d0e7      	beq.n	8003c7a <USB_EPStopXfer+0x82>
 8003caa:	e048      	b.n	8003d3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc4:	d13b      	bne.n	8003d3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ce4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ce8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d902      	bls.n	8003d24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
          break;
 8003d22:	e00c      	b.n	8003d3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d3c:	d0e7      	beq.n	8003d0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	71fb      	strb	r3, [r7, #7]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d123      	bne.n	8003dba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d72:	88bb      	ldrh	r3, [r7, #4]
 8003d74:	3303      	adds	r3, #3
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	e018      	b.n	8003db2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	031a      	lsls	r2, r3, #12
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3301      	adds	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3301      	adds	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	3301      	adds	r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d3e2      	bcc.n	8003d80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3724      	adds	r7, #36	; 0x24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b08b      	sub	sp, #44	; 0x2c
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	e014      	b.n	8003e1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	3301      	adds	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	3301      	adds	r3, #1
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	3301      	adds	r3, #1
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	3301      	adds	r3, #1
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	623b      	str	r3, [r7, #32]
 8003e1e:	6a3a      	ldr	r2, [r7, #32]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3e6      	bcc.n	8003df4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e26:	8bfb      	ldrh	r3, [r7, #30]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01e      	beq.n	8003e6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e36:	461a      	mov	r2, r3
 8003e38:	f107 0310 	add.w	r3, r7, #16
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	701a      	strb	r2, [r3, #0]
      i++;
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	3301      	adds	r3, #1
 8003e56:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003e5e:	8bfb      	ldrh	r3, [r7, #30]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e64:	8bfb      	ldrh	r3, [r7, #30]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ea      	bne.n	8003e40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	372c      	adds	r7, #44	; 0x2c
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d12c      	bne.n	8003eee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db12      	blt.n	8003ecc <USB_EPSetStall+0x54>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00f      	beq.n	8003ecc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e02b      	b.n	8003f46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	db12      	blt.n	8003f26 <USB_EPSetStall+0xae>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00f      	beq.n	8003f26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d128      	bne.n	8003fc2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d003      	beq.n	8003fa0 <USB_EPClearStall+0x4c>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	791b      	ldrb	r3, [r3, #4]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d138      	bne.n	8004012 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e027      	b.n	8004012 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fe0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	791b      	ldrb	r3, [r3, #4]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d003      	beq.n	8003ff2 <USB_EPClearStall+0x9e>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	791b      	ldrb	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d10f      	bne.n	8004012 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004042:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004054:	68f9      	ldr	r1, [r7, #12]
 8004056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409a:	f023 0302 	bic.w	r3, r3, #2
 800409e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040c8:	f023 0303 	bic.w	r3, r3, #3
 80040cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	4013      	ands	r3, r2
 8004138:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	b29b      	uxth	r3, r3
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041ac:	68bb      	ldr	r3, [r7, #8]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b087      	sub	sp, #28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	01db      	lsls	r3, r3, #7
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4013      	ands	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004208:	68bb      	ldr	r3, [r7, #8]
}
 800420a:	4618      	mov	r0, r3
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0301 	and.w	r3, r3, #1
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004268:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	460b      	mov	r3, r1
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	333c      	adds	r3, #60	; 0x3c
 800428e:	3304      	adds	r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4a26      	ldr	r2, [pc, #152]	; (8004330 <USB_EP0_OutStart+0xb8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d90a      	bls.n	80042b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ac:	d101      	bne.n	80042b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e037      	b.n	8004322 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	2300      	movs	r3, #0
 80042bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e0:	f043 0318 	orr.w	r3, r3, #24
 80042e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80042f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10f      	bne.n	8004320 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800431e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	4f54300a 	.word	0x4f54300a

08004334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a13      	ldr	r2, [pc, #76]	; (8004398 <USB_CoreReset+0x64>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e01b      	b.n	800438a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	daf2      	bge.n	8004340 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3301      	adds	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <USB_CoreReset+0x64>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e006      	b.n	800438a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d0f0      	beq.n	800436a <USB_CoreReset+0x36>

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	00030d40 	.word	0x00030d40

0800439c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80043a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80043ac:	f002 fc1e 	bl	8006bec <USBD_static_malloc>
 80043b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	32b0      	adds	r2, #176	; 0xb0
 80043c2:	2100      	movs	r1, #0
 80043c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80043c8:	2302      	movs	r3, #2
 80043ca:	e0d4      	b.n	8004576 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80043cc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80043d0:	2100      	movs	r1, #0
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f002 fc4e 	bl	8006c74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	32b0      	adds	r2, #176	; 0xb0
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	32b0      	adds	r2, #176	; 0xb0
 80043f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7c1b      	ldrb	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d138      	bne.n	8004476 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004404:	4b5e      	ldr	r3, [pc, #376]	; (8004580 <USBD_CDC_Init+0x1e4>)
 8004406:	7819      	ldrb	r1, [r3, #0]
 8004408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800440c:	2202      	movs	r2, #2
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f002 fac9 	bl	80069a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004414:	4b5a      	ldr	r3, [pc, #360]	; (8004580 <USBD_CDC_Init+0x1e4>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	3324      	adds	r3, #36	; 0x24
 800442a:	2201      	movs	r2, #1
 800442c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800442e:	4b55      	ldr	r3, [pc, #340]	; (8004584 <USBD_CDC_Init+0x1e8>)
 8004430:	7819      	ldrb	r1, [r3, #0]
 8004432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004436:	2202      	movs	r2, #2
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f002 fab4 	bl	80069a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800443e:	4b51      	ldr	r3, [pc, #324]	; (8004584 <USBD_CDC_Init+0x1e8>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004456:	2201      	movs	r2, #1
 8004458:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800445a:	4b4b      	ldr	r3, [pc, #300]	; (8004588 <USBD_CDC_Init+0x1ec>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	3326      	adds	r3, #38	; 0x26
 8004470:	2210      	movs	r2, #16
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	e035      	b.n	80044e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004476:	4b42      	ldr	r3, [pc, #264]	; (8004580 <USBD_CDC_Init+0x1e4>)
 8004478:	7819      	ldrb	r1, [r3, #0]
 800447a:	2340      	movs	r3, #64	; 0x40
 800447c:	2202      	movs	r2, #2
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f002 fa91 	bl	80069a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004484:	4b3e      	ldr	r3, [pc, #248]	; (8004580 <USBD_CDC_Init+0x1e4>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3324      	adds	r3, #36	; 0x24
 800449a:	2201      	movs	r2, #1
 800449c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800449e:	4b39      	ldr	r3, [pc, #228]	; (8004584 <USBD_CDC_Init+0x1e8>)
 80044a0:	7819      	ldrb	r1, [r3, #0]
 80044a2:	2340      	movs	r3, #64	; 0x40
 80044a4:	2202      	movs	r2, #2
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f002 fa7d 	bl	80069a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <USBD_CDC_Init+0x1e8>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80044c4:	2201      	movs	r2, #1
 80044c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80044c8:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <USBD_CDC_Init+0x1ec>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f003 020f 	and.w	r2, r3, #15
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	3326      	adds	r3, #38	; 0x26
 80044de:	2210      	movs	r2, #16
 80044e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <USBD_CDC_Init+0x1ec>)
 80044e4:	7819      	ldrb	r1, [r3, #0]
 80044e6:	2308      	movs	r3, #8
 80044e8:	2203      	movs	r2, #3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f002 fa5b 	bl	80069a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <USBD_CDC_Init+0x1ec>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f003 020f 	and.w	r2, r3, #15
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3324      	adds	r3, #36	; 0x24
 8004506:	2201      	movs	r2, #1
 8004508:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	33b0      	adds	r3, #176	; 0xb0
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004540:	2302      	movs	r3, #2
 8004542:	e018      	b.n	8004576 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7c1b      	ldrb	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <USBD_CDC_Init+0x1e8>)
 800454e:	7819      	ldrb	r1, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f002 fb12 	bl	8006b84 <USBD_LL_PrepareReceive>
 8004560:	e008      	b.n	8004574 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004562:	4b08      	ldr	r3, [pc, #32]	; (8004584 <USBD_CDC_Init+0x1e8>)
 8004564:	7819      	ldrb	r1, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f002 fb08 	bl	8006b84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000093 	.word	0x20000093
 8004584:	20000094 	.word	0x20000094
 8004588:	20000095 	.word	0x20000095

0800458c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004598:	4b3a      	ldr	r3, [pc, #232]	; (8004684 <USBD_CDC_DeInit+0xf8>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f002 fa27 	bl	80069f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80045a4:	4b37      	ldr	r3, [pc, #220]	; (8004684 <USBD_CDC_DeInit+0xf8>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f003 020f 	and.w	r2, r3, #15
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3324      	adds	r3, #36	; 0x24
 80045ba:	2200      	movs	r2, #0
 80045bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80045be:	4b32      	ldr	r3, [pc, #200]	; (8004688 <USBD_CDC_DeInit+0xfc>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f002 fa14 	bl	80069f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80045ca:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <USBD_CDC_DeInit+0xfc>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f003 020f 	and.w	r2, r3, #15
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045e2:	2200      	movs	r2, #0
 80045e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <USBD_CDC_DeInit+0x100>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f002 fa00 	bl	80069f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <USBD_CDC_DeInit+0x100>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	f003 020f 	and.w	r2, r3, #15
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	3324      	adds	r3, #36	; 0x24
 8004608:	2200      	movs	r2, #0
 800460a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800460c:	4b1f      	ldr	r3, [pc, #124]	; (800468c <USBD_CDC_DeInit+0x100>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	3326      	adds	r3, #38	; 0x26
 8004622:	2200      	movs	r2, #0
 8004624:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	32b0      	adds	r2, #176	; 0xb0
 8004630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01f      	beq.n	8004678 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	33b0      	adds	r3, #176	; 0xb0
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	32b0      	adds	r2, #176	; 0xb0
 8004656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465a:	4618      	mov	r0, r3
 800465c:	f002 fad4 	bl	8006c08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	32b0      	adds	r2, #176	; 0xb0
 800466a:	2100      	movs	r1, #0
 800466c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000093 	.word	0x20000093
 8004688:	20000094 	.word	0x20000094
 800468c:	20000095 	.word	0x20000095

08004690 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	32b0      	adds	r2, #176	; 0xb0
 80046a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0bf      	b.n	8004840 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d050      	beq.n	800476e <USBD_CDC_Setup+0xde>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	f040 80af 	bne.w	8004830 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	88db      	ldrh	r3, [r3, #6]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d03a      	beq.n	8004750 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b25b      	sxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	da1b      	bge.n	800471c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	33b0      	adds	r3, #176	; 0xb0
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80046fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	88d2      	ldrh	r2, [r2, #6]
 8004700:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	88db      	ldrh	r3, [r3, #6]
 8004706:	2b07      	cmp	r3, #7
 8004708:	bf28      	it	cs
 800470a:	2307      	movcs	r3, #7
 800470c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	89fa      	ldrh	r2, [r7, #14]
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f001 fd43 	bl	80061a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800471a:	e090      	b.n	800483e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	785a      	ldrb	r2, [r3, #1]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	88db      	ldrh	r3, [r3, #6]
 800472a:	2b3f      	cmp	r3, #63	; 0x3f
 800472c:	d803      	bhi.n	8004736 <USBD_CDC_Setup+0xa6>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	88db      	ldrh	r3, [r3, #6]
 8004732:	b2da      	uxtb	r2, r3
 8004734:	e000      	b.n	8004738 <USBD_CDC_Setup+0xa8>
 8004736:	2240      	movs	r2, #64	; 0x40
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800473e:	6939      	ldr	r1, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004746:	461a      	mov	r2, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 fd55 	bl	80061f8 <USBD_CtlPrepareRx>
      break;
 800474e:	e076      	b.n	800483e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	33b0      	adds	r3, #176	; 0xb0
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	7850      	ldrb	r0, [r2, #1]
 8004766:	2200      	movs	r2, #0
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	4798      	blx	r3
      break;
 800476c:	e067      	b.n	800483e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	2b0b      	cmp	r3, #11
 8004774:	d851      	bhi.n	800481a <USBD_CDC_Setup+0x18a>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <USBD_CDC_Setup+0xec>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047ad 	.word	0x080047ad
 8004780:	08004829 	.word	0x08004829
 8004784:	0800481b 	.word	0x0800481b
 8004788:	0800481b 	.word	0x0800481b
 800478c:	0800481b 	.word	0x0800481b
 8004790:	0800481b 	.word	0x0800481b
 8004794:	0800481b 	.word	0x0800481b
 8004798:	0800481b 	.word	0x0800481b
 800479c:	0800481b 	.word	0x0800481b
 80047a0:	0800481b 	.word	0x0800481b
 80047a4:	080047d7 	.word	0x080047d7
 80047a8:	08004801 	.word	0x08004801
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d107      	bne.n	80047c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80047b8:	f107 030a 	add.w	r3, r7, #10
 80047bc:	2202      	movs	r2, #2
 80047be:	4619      	mov	r1, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f001 fced 	bl	80061a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047c6:	e032      	b.n	800482e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 fc77 	bl	80060be <USBD_CtlError>
            ret = USBD_FAIL;
 80047d0:	2303      	movs	r3, #3
 80047d2:	75fb      	strb	r3, [r7, #23]
          break;
 80047d4:	e02b      	b.n	800482e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d107      	bne.n	80047f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80047e2:	f107 030d 	add.w	r3, r7, #13
 80047e6:	2201      	movs	r2, #1
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f001 fcd8 	bl	80061a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047f0:	e01d      	b.n	800482e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80047f2:	6839      	ldr	r1, [r7, #0]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f001 fc62 	bl	80060be <USBD_CtlError>
            ret = USBD_FAIL;
 80047fa:	2303      	movs	r3, #3
 80047fc:	75fb      	strb	r3, [r7, #23]
          break;
 80047fe:	e016      	b.n	800482e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b03      	cmp	r3, #3
 800480a:	d00f      	beq.n	800482c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 fc55 	bl	80060be <USBD_CtlError>
            ret = USBD_FAIL;
 8004814:	2303      	movs	r3, #3
 8004816:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004818:	e008      	b.n	800482c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800481a:	6839      	ldr	r1, [r7, #0]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f001 fc4e 	bl	80060be <USBD_CtlError>
          ret = USBD_FAIL;
 8004822:	2303      	movs	r3, #3
 8004824:	75fb      	strb	r3, [r7, #23]
          break;
 8004826:	e002      	b.n	800482e <USBD_CDC_Setup+0x19e>
          break;
 8004828:	bf00      	nop
 800482a:	e008      	b.n	800483e <USBD_CDC_Setup+0x1ae>
          break;
 800482c:	bf00      	nop
      }
      break;
 800482e:	e006      	b.n	800483e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 fc43 	bl	80060be <USBD_CtlError>
      ret = USBD_FAIL;
 8004838:	2303      	movs	r3, #3
 800483a:	75fb      	strb	r3, [r7, #23]
      break;
 800483c:	bf00      	nop
  }

  return (uint8_t)ret;
 800483e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800485a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	32b0      	adds	r2, #176	; 0xb0
 8004866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800486e:	2303      	movs	r3, #3
 8004870:	e065      	b.n	800493e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	32b0      	adds	r2, #176	; 0xb0
 800487c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004880:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3318      	adds	r3, #24
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02f      	beq.n	80048fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	f003 020f 	and.w	r2, r3, #15
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	3318      	adds	r3, #24
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 010f 	and.w	r1, r3, #15
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	460b      	mov	r3, r1
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	440b      	add	r3, r1
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4403      	add	r3, r0
 80048c4:	3348      	adds	r3, #72	; 0x48
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d112      	bne.n	80048fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	3318      	adds	r3, #24
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80048ee:	78f9      	ldrb	r1, [r7, #3]
 80048f0:	2300      	movs	r3, #0
 80048f2:	2200      	movs	r2, #0
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f002 f924 	bl	8006b42 <USBD_LL_Transmit>
 80048fa:	e01f      	b.n	800493c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	33b0      	adds	r3, #176	; 0xb0
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d010      	beq.n	800493c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	33b0      	adds	r3, #176	; 0xb0
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	32b0      	adds	r2, #176	; 0xb0
 800495c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004960:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	32b0      	adds	r2, #176	; 0xb0
 800496c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004974:	2303      	movs	r3, #3
 8004976:	e01a      	b.n	80049ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f002 f922 	bl	8006bc6 <USBD_LL_GetRxDataSize>
 8004982:	4602      	mov	r2, r0
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	33b0      	adds	r3, #176	; 0xb0
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80049a8:	4611      	mov	r1, r2
 80049aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	32b0      	adds	r2, #176	; 0xb0
 80049c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e025      	b.n	8004a24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	33b0      	adds	r3, #176	; 0xb0
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01a      	beq.n	8004a22 <USBD_CDC_EP0_RxReady+0x6c>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80049f2:	2bff      	cmp	r3, #255	; 0xff
 80049f4:	d015      	beq.n	8004a22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	33b0      	adds	r3, #176	; 0xb0
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004a0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a16:	b292      	uxth	r2, r2
 8004a18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	22ff      	movs	r2, #255	; 0xff
 8004a1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a34:	2182      	movs	r1, #130	; 0x82
 8004a36:	4818      	ldr	r0, [pc, #96]	; (8004a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a38:	f000 fd09 	bl	800544e <USBD_GetEpDesc>
 8004a3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4815      	ldr	r0, [pc, #84]	; (8004a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a42:	f000 fd04 	bl	800544e <USBD_GetEpDesc>
 8004a46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a48:	2181      	movs	r1, #129	; 0x81
 8004a4a:	4813      	ldr	r0, [pc, #76]	; (8004a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a4c:	f000 fcff 	bl	800544e <USBD_GetEpDesc>
 8004a50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d006      	beq.n	8004a72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6c:	711a      	strb	r2, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d006      	beq.n	8004a86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a80:	711a      	strb	r2, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2243      	movs	r2, #67	; 0x43
 8004a8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a8c:	4b02      	ldr	r3, [pc, #8]	; (8004a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000050 	.word	0x20000050

08004a9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004aa4:	2182      	movs	r1, #130	; 0x82
 8004aa6:	4818      	ldr	r0, [pc, #96]	; (8004b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004aa8:	f000 fcd1 	bl	800544e <USBD_GetEpDesc>
 8004aac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4815      	ldr	r0, [pc, #84]	; (8004b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ab2:	f000 fccc 	bl	800544e <USBD_GetEpDesc>
 8004ab6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ab8:	2181      	movs	r1, #129	; 0x81
 8004aba:	4813      	ldr	r0, [pc, #76]	; (8004b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004abc:	f000 fcc7 	bl	800544e <USBD_GetEpDesc>
 8004ac0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2210      	movs	r2, #16
 8004acc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d006      	beq.n	8004ae2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	711a      	strb	r2, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f042 0202 	orr.w	r2, r2, #2
 8004ae0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	711a      	strb	r2, [r3, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f042 0202 	orr.w	r2, r2, #2
 8004af4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2243      	movs	r2, #67	; 0x43
 8004afa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004afc:	4b02      	ldr	r3, [pc, #8]	; (8004b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000050 	.word	0x20000050

08004b0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b14:	2182      	movs	r1, #130	; 0x82
 8004b16:	4818      	ldr	r0, [pc, #96]	; (8004b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b18:	f000 fc99 	bl	800544e <USBD_GetEpDesc>
 8004b1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4815      	ldr	r0, [pc, #84]	; (8004b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b22:	f000 fc94 	bl	800544e <USBD_GetEpDesc>
 8004b26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b28:	2181      	movs	r1, #129	; 0x81
 8004b2a:	4813      	ldr	r0, [pc, #76]	; (8004b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b2c:	f000 fc8f 	bl	800544e <USBD_GetEpDesc>
 8004b30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d006      	beq.n	8004b52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b4c:	711a      	strb	r2, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d006      	beq.n	8004b66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b60:	711a      	strb	r2, [r3, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2243      	movs	r2, #67	; 0x43
 8004b6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b6c:	4b02      	ldr	r3, [pc, #8]	; (8004b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000050 	.word	0x20000050

08004b7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	220a      	movs	r2, #10
 8004b88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004b8a:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	2000000c 	.word	0x2000000c

08004b9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e009      	b.n	8004bc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	33b0      	adds	r3, #176	; 0xb0
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	32b0      	adds	r2, #176	; 0xb0
 8004be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bea:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e008      	b.n	8004c08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	32b0      	adds	r2, #176	; 0xb0
 8004c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e004      	b.n	8004c42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	32b0      	adds	r2, #176	; 0xb0
 8004c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	32b0      	adds	r2, #176	; 0xb0
 8004c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e018      	b.n	8004cb0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7c1b      	ldrb	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <USBD_CDC_ReceivePacket+0x68>)
 8004c88:	7819      	ldrb	r1, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f001 ff75 	bl	8006b84 <USBD_LL_PrepareReceive>
 8004c9a:	e008      	b.n	8004cae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <USBD_CDC_ReceivePacket+0x68>)
 8004c9e:	7819      	ldrb	r1, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ca6:	2340      	movs	r3, #64	; 0x40
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 ff6b 	bl	8006b84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000094 	.word	0x20000094

08004cbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e01f      	b.n	8004d14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	79fa      	ldrb	r2, [r7, #7]
 8004d06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f001 fde5 	bl	80068d8 <USBD_LL_Init>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e025      	b.n	8004d80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	32ae      	adds	r2, #174	; 0xae
 8004d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00f      	beq.n	8004d70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	32ae      	adds	r2, #174	; 0xae
 8004d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	f107 020e 	add.w	r2, r7, #14
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 fded 	bl	8006970 <USBD_LL_Start>
 8004d96:	4603      	mov	r3, r0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004da8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d009      	beq.n	8004de4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
 8004de0:	4603      	mov	r3, r0
 8004de2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004e14:	2303      	movs	r3, #3
 8004e16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e32:	6839      	ldr	r1, [r7, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f001 f908 	bl	800604a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d01a      	beq.n	8004e94 <USBD_LL_SetupStage+0x72>
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d822      	bhi.n	8004ea8 <USBD_LL_SetupStage+0x86>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <USBD_LL_SetupStage+0x4a>
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d00a      	beq.n	8004e80 <USBD_LL_SetupStage+0x5e>
 8004e6a:	e01d      	b.n	8004ea8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fb5f 	bl	8005538 <USBD_StdDevReq>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7e:	e020      	b.n	8004ec2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e86:	4619      	mov	r1, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fbc7 	bl	800561c <USBD_StdItfReq>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
      break;
 8004e92:	e016      	b.n	8004ec2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fc29 	bl	80056f4 <USBD_StdEPReq>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea6:	e00c      	b.n	8004ec2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004eae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 fdba 	bl	8006a30 <USBD_LL_StallEP>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	bf00      	nop
  }

  return ret;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ede:	7afb      	ldrb	r3, [r7, #11]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d16e      	bne.n	8004fc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004eea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	f040 8098 	bne.w	8005028 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d913      	bls.n	8004f2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	1ad2      	subs	r2, r2, r3
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bf28      	it	cs
 8004f1e:	4613      	movcs	r3, r2
 8004f20:	461a      	mov	r2, r3
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f001 f984 	bl	8006232 <USBD_CtlContinueRx>
 8004f2a:	e07d      	b.n	8005028 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d014      	beq.n	8004f64 <USBD_LL_DataOutStage+0x98>
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d81d      	bhi.n	8004f7a <USBD_LL_DataOutStage+0xae>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <USBD_LL_DataOutStage+0x7c>
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d003      	beq.n	8004f4e <USBD_LL_DataOutStage+0x82>
 8004f46:	e018      	b.n	8004f7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75bb      	strb	r3, [r7, #22]
            break;
 8004f4c:	e018      	b.n	8004f80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fa5e 	bl	800541a <USBD_CoreFindIF>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	75bb      	strb	r3, [r7, #22]
            break;
 8004f62:	e00d      	b.n	8004f80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fa60 	bl	8005434 <USBD_CoreFindEP>
 8004f74:	4603      	mov	r3, r0
 8004f76:	75bb      	strb	r3, [r7, #22]
            break;
 8004f78:	e002      	b.n	8004f80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75bb      	strb	r3, [r7, #22]
            break;
 8004f7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004f80:	7dbb      	ldrb	r3, [r7, #22]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d119      	bne.n	8004fba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d113      	bne.n	8004fba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004f92:	7dba      	ldrb	r2, [r7, #22]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	32ae      	adds	r2, #174	; 0xae
 8004f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004fa2:	7dba      	ldrb	r2, [r7, #22]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004faa:	7dba      	ldrb	r2, [r7, #22]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	32ae      	adds	r2, #174	; 0xae
 8004fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f001 f94a 	bl	8006254 <USBD_CtlSendStatus>
 8004fc0:	e032      	b.n	8005028 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004fc2:	7afb      	ldrb	r3, [r7, #11]
 8004fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fa31 	bl	8005434 <USBD_CoreFindEP>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004fd6:	7dbb      	ldrb	r3, [r7, #22]
 8004fd8:	2bff      	cmp	r3, #255	; 0xff
 8004fda:	d025      	beq.n	8005028 <USBD_LL_DataOutStage+0x15c>
 8004fdc:	7dbb      	ldrb	r3, [r7, #22]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d122      	bne.n	8005028 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d117      	bne.n	800501e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004fee:	7dba      	ldrb	r2, [r7, #22]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	32ae      	adds	r2, #174	; 0xae
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00f      	beq.n	800501e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004ffe:	7dba      	ldrb	r2, [r7, #22]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005006:	7dba      	ldrb	r2, [r7, #22]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	32ae      	adds	r2, #174	; 0xae
 800500c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	7afa      	ldrb	r2, [r7, #11]
 8005014:	4611      	mov	r1, r2
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	4798      	blx	r3
 800501a:	4603      	mov	r3, r0
 800501c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	e000      	b.n	800502a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	460b      	mov	r3, r1
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005040:	7afb      	ldrb	r3, [r7, #11]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d16f      	bne.n	8005126 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3314      	adds	r3, #20
 800504a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005052:	2b02      	cmp	r3, #2
 8005054:	d15a      	bne.n	800510c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	429a      	cmp	r2, r3
 8005060:	d914      	bls.n	800508c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	461a      	mov	r2, r3
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f001 f8ac 	bl	80061d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800507e:	2300      	movs	r3, #0
 8005080:	2200      	movs	r2, #0
 8005082:	2100      	movs	r1, #0
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f001 fd7d 	bl	8006b84 <USBD_LL_PrepareReceive>
 800508a:	e03f      	b.n	800510c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	d11c      	bne.n	80050d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d316      	bcc.n	80050d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d20f      	bcs.n	80050d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f001 f88d 	bl	80061d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050c4:	2300      	movs	r3, #0
 80050c6:	2200      	movs	r2, #0
 80050c8:	2100      	movs	r1, #0
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f001 fd5a 	bl	8006b84 <USBD_LL_PrepareReceive>
 80050d0:	e01c      	b.n	800510c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d10f      	bne.n	80050fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f001 fc95 	bl	8006a30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f001 f8b7 	bl	800627a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03a      	beq.n	800518c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff fe42 	bl	8004da0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005124:	e032      	b.n	800518c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005126:	7afb      	ldrb	r3, [r7, #11]
 8005128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800512c:	b2db      	uxtb	r3, r3
 800512e:	4619      	mov	r1, r3
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f97f 	bl	8005434 <USBD_CoreFindEP>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	2bff      	cmp	r3, #255	; 0xff
 800513e:	d025      	beq.n	800518c <USBD_LL_DataInStage+0x15a>
 8005140:	7dfb      	ldrb	r3, [r7, #23]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d122      	bne.n	800518c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b03      	cmp	r3, #3
 8005150:	d11c      	bne.n	800518c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005152:	7dfa      	ldrb	r2, [r7, #23]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	32ae      	adds	r2, #174	; 0xae
 8005158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d014      	beq.n	800518c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005162:	7dfa      	ldrb	r2, [r7, #23]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800516a:	7dfa      	ldrb	r2, [r7, #23]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	32ae      	adds	r2, #174	; 0xae
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	7afa      	ldrb	r2, [r7, #11]
 8005178:	4611      	mov	r1, r2
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	4798      	blx	r3
 800517e:	4603      	mov	r3, r0
 8005180:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005182:	7dbb      	ldrb	r3, [r7, #22]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005188:	7dbb      	ldrb	r3, [r7, #22]
 800518a:	e000      	b.n	800518e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d014      	beq.n	80051fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00e      	beq.n	80051fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6852      	ldr	r2, [r2, #4]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	4611      	mov	r1, r2
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80051f8:	2303      	movs	r3, #3
 80051fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051fc:	2340      	movs	r3, #64	; 0x40
 80051fe:	2200      	movs	r2, #0
 8005200:	2100      	movs	r1, #0
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f001 fbcf 	bl	80069a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2240      	movs	r2, #64	; 0x40
 8005214:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005218:	2340      	movs	r3, #64	; 0x40
 800521a:	2200      	movs	r2, #0
 800521c:	2180      	movs	r1, #128	; 0x80
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 fbc1 	bl	80069a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2240      	movs	r2, #64	; 0x40
 800522e:	621a      	str	r2, [r3, #32]

  return ret;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	460b      	mov	r3, r1
 8005244:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005268:	b2da      	uxtb	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b04      	cmp	r3, #4
 8005298:	d106      	bne.n	80052a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d110      	bne.n	80052ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	460b      	mov	r3, r1
 8005300:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	32ae      	adds	r2, #174	; 0xae
 800530c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005314:	2303      	movs	r3, #3
 8005316:	e01c      	b.n	8005352 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b03      	cmp	r3, #3
 8005322:	d115      	bne.n	8005350 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	32ae      	adds	r2, #174	; 0xae
 800532e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00b      	beq.n	8005350 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	32ae      	adds	r2, #174	; 0xae
 8005342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	4611      	mov	r1, r2
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	460b      	mov	r3, r1
 8005364:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	32ae      	adds	r2, #174	; 0xae
 8005370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005378:	2303      	movs	r3, #3
 800537a:	e01c      	b.n	80053b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b03      	cmp	r3, #3
 8005386:	d115      	bne.n	80053b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	32ae      	adds	r2, #174	; 0xae
 8005392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32ae      	adds	r2, #174	; 0xae
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	4611      	mov	r1, r2
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00e      	beq.n	8005410 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6852      	ldr	r2, [r2, #4]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	4611      	mov	r1, r2
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800540c:	2303      	movs	r3, #3
 800540e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005426:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005440:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	460b      	mov	r3, r1
 8005458:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	885b      	ldrh	r3, [r3, #2]
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	429a      	cmp	r2, r3
 8005474:	d920      	bls.n	80054b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800547e:	e013      	b.n	80054a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005480:	f107 030a 	add.w	r3, r7, #10
 8005484:	4619      	mov	r1, r3
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f000 f81b 	bl	80054c2 <USBD_GetNextDesc>
 800548c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b05      	cmp	r3, #5
 8005494:	d108      	bne.n	80054a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	789b      	ldrb	r3, [r3, #2]
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d008      	beq.n	80054b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	885b      	ldrh	r3, [r3, #2]
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	897b      	ldrh	r3, [r7, #10]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d8e5      	bhi.n	8005480 <USBD_GetEpDesc+0x32>
 80054b4:	e000      	b.n	80054b8 <USBD_GetEpDesc+0x6a>
          break;
 80054b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80054b8:	693b      	ldr	r3, [r7, #16]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	881a      	ldrh	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4413      	add	r3, r2
 80054dc:	b29a      	uxth	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80054ee:	68fb      	ldr	r3, [r7, #12]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3301      	adds	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800551a:	8a3b      	ldrh	r3, [r7, #16]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	b21a      	sxth	r2, r3
 8005520:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005524:	4313      	orrs	r3, r2
 8005526:	b21b      	sxth	r3, r3
 8005528:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800552a:	89fb      	ldrh	r3, [r7, #14]
}
 800552c:	4618      	mov	r0, r3
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d005      	beq.n	800555e <USBD_StdDevReq+0x26>
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d857      	bhi.n	8005606 <USBD_StdDevReq+0xce>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00f      	beq.n	800557a <USBD_StdDevReq+0x42>
 800555a:	2b20      	cmp	r3, #32
 800555c:	d153      	bne.n	8005606 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	32ae      	adds	r2, #174	; 0xae
 8005568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	6839      	ldr	r1, [r7, #0]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
      break;
 8005578:	e04a      	b.n	8005610 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	2b09      	cmp	r3, #9
 8005580:	d83b      	bhi.n	80055fa <USBD_StdDevReq+0xc2>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <USBD_StdDevReq+0x50>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055dd 	.word	0x080055dd
 800558c:	080055f1 	.word	0x080055f1
 8005590:	080055fb 	.word	0x080055fb
 8005594:	080055e7 	.word	0x080055e7
 8005598:	080055fb 	.word	0x080055fb
 800559c:	080055bb 	.word	0x080055bb
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055fb 	.word	0x080055fb
 80055a8:	080055d3 	.word	0x080055d3
 80055ac:	080055c5 	.word	0x080055c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa3c 	bl	8005a30 <USBD_GetDescriptor>
          break;
 80055b8:	e024      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fba1 	bl	8005d04 <USBD_SetAddress>
          break;
 80055c2:	e01f      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fbe0 	bl	8005d8c <USBD_SetConfig>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]
          break;
 80055d0:	e018      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fc83 	bl	8005ee0 <USBD_GetConfig>
          break;
 80055da:	e013      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fcb4 	bl	8005f4c <USBD_GetStatus>
          break;
 80055e4:	e00e      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fce3 	bl	8005fb4 <USBD_SetFeature>
          break;
 80055ee:	e009      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fd07 	bl	8006006 <USBD_ClrFeature>
          break;
 80055f8:	e004      	b.n	8005604 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fd5e 	bl	80060be <USBD_CtlError>
          break;
 8005602:	bf00      	nop
      }
      break;
 8005604:	e004      	b.n	8005610 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fd58 	bl	80060be <USBD_CtlError>
      break;
 800560e:	bf00      	nop
  }

  return ret;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d005      	beq.n	8005642 <USBD_StdItfReq+0x26>
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d852      	bhi.n	80056e0 <USBD_StdItfReq+0xc4>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <USBD_StdItfReq+0x26>
 800563e:	2b20      	cmp	r3, #32
 8005640:	d14e      	bne.n	80056e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005648:	b2db      	uxtb	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	2b02      	cmp	r3, #2
 800564e:	d840      	bhi.n	80056d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	889b      	ldrh	r3, [r3, #4]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d836      	bhi.n	80056c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	889b      	ldrh	r3, [r3, #4]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fed9 	bl	800541a <USBD_CoreFindIF>
 8005668:	4603      	mov	r3, r0
 800566a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800566c:	7bbb      	ldrb	r3, [r7, #14]
 800566e:	2bff      	cmp	r3, #255	; 0xff
 8005670:	d01d      	beq.n	80056ae <USBD_StdItfReq+0x92>
 8005672:	7bbb      	ldrb	r3, [r7, #14]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11a      	bne.n	80056ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005678:	7bba      	ldrb	r2, [r7, #14]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	32ae      	adds	r2, #174	; 0xae
 800567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00f      	beq.n	80056a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005688:	7bba      	ldrb	r2, [r7, #14]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005690:	7bba      	ldrb	r2, [r7, #14]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	32ae      	adds	r2, #174	; 0xae
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80056a6:	e004      	b.n	80056b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80056a8:	2303      	movs	r3, #3
 80056aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80056ac:	e001      	b.n	80056b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80056ae:	2303      	movs	r3, #3
 80056b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	88db      	ldrh	r3, [r3, #6]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d110      	bne.n	80056dc <USBD_StdItfReq+0xc0>
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10d      	bne.n	80056dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fdc7 	bl	8006254 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056c6:	e009      	b.n	80056dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fcf7 	bl	80060be <USBD_CtlError>
          break;
 80056d0:	e004      	b.n	80056dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fcf2 	bl	80060be <USBD_CtlError>
          break;
 80056da:	e000      	b.n	80056de <USBD_StdItfReq+0xc2>
          break;
 80056dc:	bf00      	nop
      }
      break;
 80056de:	e004      	b.n	80056ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fceb 	bl	80060be <USBD_CtlError>
      break;
 80056e8:	bf00      	nop
  }

  return ret;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	889b      	ldrh	r3, [r3, #4]
 8005706:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d007      	beq.n	8005724 <USBD_StdEPReq+0x30>
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	f200 817f 	bhi.w	8005a18 <USBD_StdEPReq+0x324>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d02a      	beq.n	8005774 <USBD_StdEPReq+0x80>
 800571e:	2b20      	cmp	r3, #32
 8005720:	f040 817a 	bne.w	8005a18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005724:	7bbb      	ldrb	r3, [r7, #14]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fe83 	bl	8005434 <USBD_CoreFindEP>
 800572e:	4603      	mov	r3, r0
 8005730:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005732:	7b7b      	ldrb	r3, [r7, #13]
 8005734:	2bff      	cmp	r3, #255	; 0xff
 8005736:	f000 8174 	beq.w	8005a22 <USBD_StdEPReq+0x32e>
 800573a:	7b7b      	ldrb	r3, [r7, #13]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 8170 	bne.w	8005a22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005742:	7b7a      	ldrb	r2, [r7, #13]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800574a:	7b7a      	ldrb	r2, [r7, #13]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	32ae      	adds	r2, #174	; 0xae
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8163 	beq.w	8005a22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800575c:	7b7a      	ldrb	r2, [r7, #13]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	32ae      	adds	r2, #174	; 0xae
 8005762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
 800576e:	4603      	mov	r3, r0
 8005770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005772:	e156      	b.n	8005a22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d008      	beq.n	800578e <USBD_StdEPReq+0x9a>
 800577c:	2b03      	cmp	r3, #3
 800577e:	f300 8145 	bgt.w	8005a0c <USBD_StdEPReq+0x318>
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 809b 	beq.w	80058be <USBD_StdEPReq+0x1ca>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d03c      	beq.n	8005806 <USBD_StdEPReq+0x112>
 800578c:	e13e      	b.n	8005a0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d002      	beq.n	80057a0 <USBD_StdEPReq+0xac>
 800579a:	2b03      	cmp	r3, #3
 800579c:	d016      	beq.n	80057cc <USBD_StdEPReq+0xd8>
 800579e:	e02c      	b.n	80057fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <USBD_StdEPReq+0xce>
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	2b80      	cmp	r3, #128	; 0x80
 80057aa:	d00a      	beq.n	80057c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057ac:	7bbb      	ldrb	r3, [r7, #14]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 f93d 	bl	8006a30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057b6:	2180      	movs	r1, #128	; 0x80
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 f939 	bl	8006a30 <USBD_LL_StallEP>
 80057be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057c0:	e020      	b.n	8005804 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fc7a 	bl	80060be <USBD_CtlError>
              break;
 80057ca:	e01b      	b.n	8005804 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	885b      	ldrh	r3, [r3, #2]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10e      	bne.n	80057f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <USBD_StdEPReq+0xfe>
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d008      	beq.n	80057f2 <USBD_StdEPReq+0xfe>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	88db      	ldrh	r3, [r3, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80057e8:	7bbb      	ldrb	r3, [r7, #14]
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 f91f 	bl	8006a30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fd2e 	bl	8006254 <USBD_CtlSendStatus>

              break;
 80057f8:	e004      	b.n	8005804 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fc5e 	bl	80060be <USBD_CtlError>
              break;
 8005802:	bf00      	nop
          }
          break;
 8005804:	e107      	b.n	8005a16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d002      	beq.n	8005818 <USBD_StdEPReq+0x124>
 8005812:	2b03      	cmp	r3, #3
 8005814:	d016      	beq.n	8005844 <USBD_StdEPReq+0x150>
 8005816:	e04b      	b.n	80058b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <USBD_StdEPReq+0x146>
 800581e:	7bbb      	ldrb	r3, [r7, #14]
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d00a      	beq.n	800583a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 f901 	bl	8006a30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 f8fd 	bl	8006a30 <USBD_LL_StallEP>
 8005836:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005838:	e040      	b.n	80058bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fc3e 	bl	80060be <USBD_CtlError>
              break;
 8005842:	e03b      	b.n	80058bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	885b      	ldrh	r3, [r3, #2]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d136      	bne.n	80058ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 f907 	bl	8006a6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fcf7 	bl	8006254 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005866:	7bbb      	ldrb	r3, [r7, #14]
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fde2 	bl	8005434 <USBD_CoreFindEP>
 8005870:	4603      	mov	r3, r0
 8005872:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005874:	7b7b      	ldrb	r3, [r7, #13]
 8005876:	2bff      	cmp	r3, #255	; 0xff
 8005878:	d01f      	beq.n	80058ba <USBD_StdEPReq+0x1c6>
 800587a:	7b7b      	ldrb	r3, [r7, #13]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d11c      	bne.n	80058ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005880:	7b7a      	ldrb	r2, [r7, #13]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005888:	7b7a      	ldrb	r2, [r7, #13]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	; 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d010      	beq.n	80058ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005898:	7b7a      	ldrb	r2, [r7, #13]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	32ae      	adds	r2, #174	; 0xae
 800589e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80058ae:	e004      	b.n	80058ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fc03 	bl	80060be <USBD_CtlError>
              break;
 80058b8:	e000      	b.n	80058bc <USBD_StdEPReq+0x1c8>
              break;
 80058ba:	bf00      	nop
          }
          break;
 80058bc:	e0ab      	b.n	8005a16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d002      	beq.n	80058d0 <USBD_StdEPReq+0x1dc>
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d032      	beq.n	8005934 <USBD_StdEPReq+0x240>
 80058ce:	e097      	b.n	8005a00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <USBD_StdEPReq+0x1f2>
 80058d6:	7bbb      	ldrb	r3, [r7, #14]
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d004      	beq.n	80058e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fbed 	bl	80060be <USBD_CtlError>
                break;
 80058e4:	e091      	b.n	8005a0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da0b      	bge.n	8005906 <USBD_StdEPReq+0x212>
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	3310      	adds	r3, #16
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	3304      	adds	r3, #4
 8005904:	e00b      	b.n	800591e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	3304      	adds	r3, #4
 800591e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2202      	movs	r2, #2
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fc37 	bl	80061a0 <USBD_CtlSendData>
              break;
 8005932:	e06a      	b.n	8005a0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005938:	2b00      	cmp	r3, #0
 800593a:	da11      	bge.n	8005960 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	f003 020f 	and.w	r2, r3, #15
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	3324      	adds	r3, #36	; 0x24
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d117      	bne.n	8005986 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fbb0 	bl	80060be <USBD_CtlError>
                  break;
 800595e:	e054      	b.n	8005a0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	f003 020f 	and.w	r2, r3, #15
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fb9d 	bl	80060be <USBD_CtlError>
                  break;
 8005984:	e041      	b.n	8005a0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598a:	2b00      	cmp	r3, #0
 800598c:	da0b      	bge.n	80059a6 <USBD_StdEPReq+0x2b2>
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	3310      	adds	r3, #16
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	3304      	adds	r3, #4
 80059a4:	e00b      	b.n	80059be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	3304      	adds	r3, #4
 80059be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <USBD_StdEPReq+0x2d8>
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d103      	bne.n	80059d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e00e      	b.n	80059f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 f867 	bl	8006aac <USBD_LL_IsStallEP>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2202      	movs	r2, #2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fbd1 	bl	80061a0 <USBD_CtlSendData>
              break;
 80059fe:	e004      	b.n	8005a0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fb5b 	bl	80060be <USBD_CtlError>
              break;
 8005a08:	bf00      	nop
          }
          break;
 8005a0a:	e004      	b.n	8005a16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb55 	bl	80060be <USBD_CtlError>
          break;
 8005a14:	bf00      	nop
      }
      break;
 8005a16:	e005      	b.n	8005a24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb4f 	bl	80060be <USBD_CtlError>
      break;
 8005a20:	e000      	b.n	8005a24 <USBD_StdEPReq+0x330>
      break;
 8005a22:	bf00      	nop
  }

  return ret;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	885b      	ldrh	r3, [r3, #2]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	f200 8128 	bhi.w	8005ca6 <USBD_GetDescriptor+0x276>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <USBD_GetDescriptor+0x2c>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a79 	.word	0x08005a79
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005ad1 	.word	0x08005ad1
 8005a68:	08005ca7 	.word	0x08005ca7
 8005a6c:	08005ca7 	.word	0x08005ca7
 8005a70:	08005c47 	.word	0x08005c47
 8005a74:	08005c73 	.word	0x08005c73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	7c12      	ldrb	r2, [r2, #16]
 8005a84:	f107 0108 	add.w	r1, r7, #8
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	60f8      	str	r0, [r7, #12]
      break;
 8005a8e:	e112      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	7c1b      	ldrb	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10d      	bne.n	8005ab4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	f107 0208 	add.w	r2, r7, #8
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
 8005aa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	2202      	movs	r2, #2
 8005ab0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ab2:	e100      	b.n	8005cb6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	f107 0208 	add.w	r2, r7, #8
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4798      	blx	r3
 8005ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	2202      	movs	r2, #2
 8005acc:	701a      	strb	r2, [r3, #0]
      break;
 8005ace:	e0f2      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	885b      	ldrh	r3, [r3, #2]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	f200 80ac 	bhi.w	8005c34 <USBD_GetDescriptor+0x204>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <USBD_GetDescriptor+0xb4>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005b31 	.word	0x08005b31
 8005aec:	08005b65 	.word	0x08005b65
 8005af0:	08005b99 	.word	0x08005b99
 8005af4:	08005bcd 	.word	0x08005bcd
 8005af8:	08005c01 	.word	0x08005c01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	7c12      	ldrb	r2, [r2, #16]
 8005b14:	f107 0108 	add.w	r1, r7, #8
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4798      	blx	r3
 8005b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b1e:	e091      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 facb 	bl	80060be <USBD_CtlError>
            err++;
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b2e:	e089      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	7c12      	ldrb	r2, [r2, #16]
 8005b48:	f107 0108 	add.w	r1, r7, #8
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
 8005b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b52:	e077      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fab1 	bl	80060be <USBD_CtlError>
            err++;
 8005b5c:	7afb      	ldrb	r3, [r7, #11]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	72fb      	strb	r3, [r7, #11]
          break;
 8005b62:	e06f      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	7c12      	ldrb	r2, [r2, #16]
 8005b7c:	f107 0108 	add.w	r1, r7, #8
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b86:	e05d      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa97 	bl	80060be <USBD_CtlError>
            err++;
 8005b90:	7afb      	ldrb	r3, [r7, #11]
 8005b92:	3301      	adds	r3, #1
 8005b94:	72fb      	strb	r3, [r7, #11]
          break;
 8005b96:	e055      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	7c12      	ldrb	r2, [r2, #16]
 8005bb0:	f107 0108 	add.w	r1, r7, #8
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bba:	e043      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa7d 	bl	80060be <USBD_CtlError>
            err++;
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bca:	e03b      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	7c12      	ldrb	r2, [r2, #16]
 8005be4:	f107 0108 	add.w	r1, r7, #8
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bee:	e029      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa63 	bl	80060be <USBD_CtlError>
            err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bfe:	e021      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	7c12      	ldrb	r2, [r2, #16]
 8005c18:	f107 0108 	add.w	r1, r7, #8
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
 8005c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c22:	e00f      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa49 	bl	80060be <USBD_CtlError>
            err++;
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	72fb      	strb	r3, [r7, #11]
          break;
 8005c32:	e007      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa41 	bl	80060be <USBD_CtlError>
          err++;
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005c42:	bf00      	nop
      }
      break;
 8005c44:	e037      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	7c1b      	ldrb	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	f107 0208 	add.w	r2, r7, #8
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4798      	blx	r3
 8005c5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c60:	e029      	b.n	8005cb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa2a 	bl	80060be <USBD_CtlError>
        err++;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c70:	e021      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7c1b      	ldrb	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10d      	bne.n	8005c96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	f107 0208 	add.w	r2, r7, #8
 8005c86:	4610      	mov	r0, r2
 8005c88:	4798      	blx	r3
 8005c8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	2207      	movs	r2, #7
 8005c92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c94:	e00f      	b.n	8005cb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa10 	bl	80060be <USBD_CtlError>
        err++;
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ca4:	e007      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fa08 	bl	80060be <USBD_CtlError>
      err++;
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8005cb4:	bf00      	nop
  }

  if (err != 0U)
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d11e      	bne.n	8005cfa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	88db      	ldrh	r3, [r3, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d016      	beq.n	8005cf2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005cc4:	893b      	ldrh	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00e      	beq.n	8005ce8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	88da      	ldrh	r2, [r3, #6]
 8005cce:	893b      	ldrh	r3, [r7, #8]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bf28      	it	cs
 8005cd4:	4613      	movcs	r3, r2
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cda:	893b      	ldrh	r3, [r7, #8]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fa5d 	bl	80061a0 <USBD_CtlSendData>
 8005ce6:	e009      	b.n	8005cfc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f9e7 	bl	80060be <USBD_CtlError>
 8005cf0:	e004      	b.n	8005cfc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 faae 	bl	8006254 <USBD_CtlSendStatus>
 8005cf8:	e000      	b.n	8005cfc <USBD_GetDescriptor+0x2cc>
    return;
 8005cfa:	bf00      	nop
  }
}
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop

08005d04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	889b      	ldrh	r3, [r3, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d131      	bne.n	8005d7a <USBD_SetAddress+0x76>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	88db      	ldrh	r3, [r3, #6]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d12d      	bne.n	8005d7a <USBD_SetAddress+0x76>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	2b7f      	cmp	r3, #127	; 0x7f
 8005d24:	d829      	bhi.n	8005d7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	885b      	ldrh	r3, [r3, #2]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d104      	bne.n	8005d48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f9bc 	bl	80060be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d46:	e01d      	b.n	8005d84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fed5 	bl	8006b04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa7a 	bl	8006254 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6e:	e009      	b.n	8005d84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d78:	e004      	b.n	8005d84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f99e 	bl	80060be <USBD_CtlError>
  }
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	885b      	ldrh	r3, [r3, #2]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b4e      	ldr	r3, [pc, #312]	; (8005edc <USBD_SetConfig+0x150>)
 8005da2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005da4:	4b4d      	ldr	r3, [pc, #308]	; (8005edc <USBD_SetConfig+0x150>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d905      	bls.n	8005db8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f985 	bl	80060be <USBD_CtlError>
    return USBD_FAIL;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e08c      	b.n	8005ed2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d002      	beq.n	8005dca <USBD_SetConfig+0x3e>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d029      	beq.n	8005e1c <USBD_SetConfig+0x90>
 8005dc8:	e075      	b.n	8005eb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005dca:	4b44      	ldr	r3, [pc, #272]	; (8005edc <USBD_SetConfig+0x150>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d020      	beq.n	8005e14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005dd2:	4b42      	ldr	r3, [pc, #264]	; (8005edc <USBD_SetConfig+0x150>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ddc:	4b3f      	ldr	r3, [pc, #252]	; (8005edc <USBD_SetConfig+0x150>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fe ffe7 	bl	8004db6 <USBD_SetClassConfig>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f962 	bl	80060be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e02:	e065      	b.n	8005ed0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa25 	bl	8006254 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005e12:	e05d      	b.n	8005ed0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa1d 	bl	8006254 <USBD_CtlSendStatus>
      break;
 8005e1a:	e059      	b.n	8005ed0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005e1c:	4b2f      	ldr	r3, [pc, #188]	; (8005edc <USBD_SetConfig+0x150>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d112      	bne.n	8005e4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005e2c:	4b2b      	ldr	r3, [pc, #172]	; (8005edc <USBD_SetConfig+0x150>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e36:	4b29      	ldr	r3, [pc, #164]	; (8005edc <USBD_SetConfig+0x150>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fe ffd6 	bl	8004dee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa06 	bl	8006254 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e48:	e042      	b.n	8005ed0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <USBD_SetConfig+0x150>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d02a      	beq.n	8005eae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fe ffc4 	bl	8004dee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e66:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <USBD_SetConfig+0x150>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e70:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <USBD_SetConfig+0x150>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fe ff9d 	bl	8004db6 <USBD_SetClassConfig>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00f      	beq.n	8005ea6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f918 	bl	80060be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fe ffa9 	bl	8004dee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ea4:	e014      	b.n	8005ed0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f9d4 	bl	8006254 <USBD_CtlSendStatus>
      break;
 8005eac:	e010      	b.n	8005ed0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f9d0 	bl	8006254 <USBD_CtlSendStatus>
      break;
 8005eb4:	e00c      	b.n	8005ed0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f900 	bl	80060be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <USBD_SetConfig+0x150>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fe ff92 	bl	8004dee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ece:	bf00      	nop
  }

  return ret;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	2000011c 	.word	0x2000011c

08005ee0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	88db      	ldrh	r3, [r3, #6]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d004      	beq.n	8005efc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f8e2 	bl	80060be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005efa:	e023      	b.n	8005f44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	dc02      	bgt.n	8005f0e <USBD_GetConfig+0x2e>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dc03      	bgt.n	8005f14 <USBD_GetConfig+0x34>
 8005f0c:	e015      	b.n	8005f3a <USBD_GetConfig+0x5a>
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d00b      	beq.n	8005f2a <USBD_GetConfig+0x4a>
 8005f12:	e012      	b.n	8005f3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f93c 	bl	80061a0 <USBD_CtlSendData>
        break;
 8005f28:	e00c      	b.n	8005f44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2201      	movs	r2, #1
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f934 	bl	80061a0 <USBD_CtlSendData>
        break;
 8005f38:	e004      	b.n	8005f44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f8be 	bl	80060be <USBD_CtlError>
        break;
 8005f42:	bf00      	nop
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d81e      	bhi.n	8005fa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	88db      	ldrh	r3, [r3, #6]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d004      	beq.n	8005f76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8a5 	bl	80060be <USBD_CtlError>
        break;
 8005f74:	e01a      	b.n	8005fac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f043 0202 	orr.w	r2, r3, #2
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	330c      	adds	r3, #12
 8005f96:	2202      	movs	r2, #2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f900 	bl	80061a0 <USBD_CtlSendData>
      break;
 8005fa0:	e004      	b.n	8005fac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f88a 	bl	80060be <USBD_CtlError>
      break;
 8005faa:	bf00      	nop
  }
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	885b      	ldrh	r3, [r3, #2]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d107      	bne.n	8005fd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f940 	bl	8006254 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005fd4:	e013      	b.n	8005ffe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	885b      	ldrh	r3, [r3, #2]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d10b      	bne.n	8005ff6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	889b      	ldrh	r3, [r3, #4]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f930 	bl	8006254 <USBD_CtlSendStatus>
}
 8005ff4:	e003      	b.n	8005ffe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f860 	bl	80060be <USBD_CtlError>
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006016:	b2db      	uxtb	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	2b02      	cmp	r3, #2
 800601c:	d80b      	bhi.n	8006036 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	885b      	ldrh	r3, [r3, #2]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10c      	bne.n	8006040 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f910 	bl	8006254 <USBD_CtlSendStatus>
      }
      break;
 8006034:	e004      	b.n	8006040 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f840 	bl	80060be <USBD_CtlError>
      break;
 800603e:	e000      	b.n	8006042 <USBD_ClrFeature+0x3c>
      break;
 8006040:	bf00      	nop
  }
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3301      	adds	r3, #1
 8006064:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fa41 	bl	80054fc <SWAPBYTE>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fa34 	bl	80054fc <SWAPBYTE>
 8006094:	4603      	mov	r3, r0
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fa27 	bl	80054fc <SWAPBYTE>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	80da      	strh	r2, [r3, #6]
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c8:	2180      	movs	r1, #128	; 0x80
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fcb0 	bl	8006a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80060d0:	2100      	movs	r1, #0
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fcac 	bl	8006a30 <USBD_LL_StallEP>
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d036      	beq.n	8006164 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f000 f836 	bl	800616c <USBD_GetLen>
 8006100:	4603      	mov	r3, r0
 8006102:	3301      	adds	r3, #1
 8006104:	b29b      	uxth	r3, r3
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	4413      	add	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	701a      	strb	r2, [r3, #0]
  idx++;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	3301      	adds	r3, #1
 800611e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	4413      	add	r3, r2
 8006126:	2203      	movs	r2, #3
 8006128:	701a      	strb	r2, [r3, #0]
  idx++;
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	3301      	adds	r3, #1
 800612e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006130:	e013      	b.n	800615a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4413      	add	r3, r2
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3301      	adds	r3, #1
 8006142:	613b      	str	r3, [r7, #16]
    idx++;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	3301      	adds	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4413      	add	r3, r2
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
    idx++;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	3301      	adds	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e7      	bne.n	8006132 <USBD_GetString+0x52>
 8006162:	e000      	b.n	8006166 <USBD_GetString+0x86>
    return;
 8006164:	bf00      	nop
  }
}
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800617c:	e005      	b.n	800618a <USBD_GetLen+0x1e>
  {
    len++;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	3301      	adds	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	3301      	adds	r3, #1
 8006188:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f5      	bne.n	800617e <USBD_GetLen+0x12>
  }

  return len;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	2100      	movs	r1, #0
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fcbb 	bl	8006b42 <USBD_LL_Transmit>

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	2100      	movs	r1, #0
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fcaa 	bl	8006b42 <USBD_LL_Transmit>

  return USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2203      	movs	r2, #3
 8006208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	2100      	movs	r1, #0
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fcae 	bl	8006b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	2100      	movs	r1, #0
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fc9d 	bl	8006b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2204      	movs	r2, #4
 8006260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006264:	2300      	movs	r3, #0
 8006266:	2200      	movs	r2, #0
 8006268:	2100      	movs	r1, #0
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fc69 	bl	8006b42 <USBD_LL_Transmit>

  return USBD_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2205      	movs	r2, #5
 8006286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800628a:	2300      	movs	r3, #0
 800628c:	2200      	movs	r2, #0
 800628e:	2100      	movs	r1, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fc77 	bl	8006b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062a4:	2200      	movs	r2, #0
 80062a6:	4912      	ldr	r1, [pc, #72]	; (80062f0 <MX_USB_DEVICE_Init+0x50>)
 80062a8:	4812      	ldr	r0, [pc, #72]	; (80062f4 <MX_USB_DEVICE_Init+0x54>)
 80062aa:	f7fe fd07 	bl	8004cbc <USBD_Init>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062b4:	f7fa f9aa 	bl	800060c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062b8:	490f      	ldr	r1, [pc, #60]	; (80062f8 <MX_USB_DEVICE_Init+0x58>)
 80062ba:	480e      	ldr	r0, [pc, #56]	; (80062f4 <MX_USB_DEVICE_Init+0x54>)
 80062bc:	f7fe fd2e 	bl	8004d1c <USBD_RegisterClass>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80062c6:	f7fa f9a1 	bl	800060c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062ca:	490c      	ldr	r1, [pc, #48]	; (80062fc <MX_USB_DEVICE_Init+0x5c>)
 80062cc:	4809      	ldr	r0, [pc, #36]	; (80062f4 <MX_USB_DEVICE_Init+0x54>)
 80062ce:	f7fe fc65 	bl	8004b9c <USBD_CDC_RegisterInterface>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80062d8:	f7fa f998 	bl	800060c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80062dc:	4805      	ldr	r0, [pc, #20]	; (80062f4 <MX_USB_DEVICE_Init+0x54>)
 80062de:	f7fe fd53 	bl	8004d88 <USBD_Start>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80062e8:	f7fa f990 	bl	800060c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062ec:	bf00      	nop
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	200000ac 	.word	0x200000ac
 80062f4:	20000120 	.word	0x20000120
 80062f8:	20000018 	.word	0x20000018
 80062fc:	20000098 	.word	0x20000098

08006300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006304:	2200      	movs	r2, #0
 8006306:	4905      	ldr	r1, [pc, #20]	; (800631c <CDC_Init_FS+0x1c>)
 8006308:	4805      	ldr	r0, [pc, #20]	; (8006320 <CDC_Init_FS+0x20>)
 800630a:	f7fe fc61 	bl	8004bd0 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800630e:	4905      	ldr	r1, [pc, #20]	; (8006324 <CDC_Init_FS+0x24>)
 8006310:	4803      	ldr	r0, [pc, #12]	; (8006320 <CDC_Init_FS+0x20>)
 8006312:	f7fe fc7f 	bl	8004c14 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8006316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006318:	4618      	mov	r0, r3
 800631a:	bd80      	pop	{r7, pc}
 800631c:	200007fc 	.word	0x200007fc
 8006320:	20000120 	.word	0x20000120
 8006324:	200003fc 	.word	0x200003fc

08006328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800632c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800632e:	4618      	mov	r0, r3
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	6039      	str	r1, [r7, #0]
 8006342:	71fb      	strb	r3, [r7, #7]
 8006344:	4613      	mov	r3, r2
 8006346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	2b23      	cmp	r3, #35	; 0x23
 800634c:	d84a      	bhi.n	80063e4 <CDC_Control_FS+0xac>
 800634e:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <CDC_Control_FS+0x1c>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	080063e5 	.word	0x080063e5
 8006358:	080063e5 	.word	0x080063e5
 800635c:	080063e5 	.word	0x080063e5
 8006360:	080063e5 	.word	0x080063e5
 8006364:	080063e5 	.word	0x080063e5
 8006368:	080063e5 	.word	0x080063e5
 800636c:	080063e5 	.word	0x080063e5
 8006370:	080063e5 	.word	0x080063e5
 8006374:	080063e5 	.word	0x080063e5
 8006378:	080063e5 	.word	0x080063e5
 800637c:	080063e5 	.word	0x080063e5
 8006380:	080063e5 	.word	0x080063e5
 8006384:	080063e5 	.word	0x080063e5
 8006388:	080063e5 	.word	0x080063e5
 800638c:	080063e5 	.word	0x080063e5
 8006390:	080063e5 	.word	0x080063e5
 8006394:	080063e5 	.word	0x080063e5
 8006398:	080063e5 	.word	0x080063e5
 800639c:	080063e5 	.word	0x080063e5
 80063a0:	080063e5 	.word	0x080063e5
 80063a4:	080063e5 	.word	0x080063e5
 80063a8:	080063e5 	.word	0x080063e5
 80063ac:	080063e5 	.word	0x080063e5
 80063b0:	080063e5 	.word	0x080063e5
 80063b4:	080063e5 	.word	0x080063e5
 80063b8:	080063e5 	.word	0x080063e5
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063e5 	.word	0x080063e5
 80063c4:	080063e5 	.word	0x080063e5
 80063c8:	080063e5 	.word	0x080063e5
 80063cc:	080063e5 	.word	0x080063e5
 80063d0:	080063e5 	.word	0x080063e5
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063e5 	.word	0x080063e5
 80063dc:	080063e5 	.word	0x080063e5
 80063e0:	080063e5 	.word	0x080063e5
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 80063e4:	bf00      	nop
    }

    return (USBD_OK);
 80063e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4805      	ldr	r0, [pc, #20]	; (8006418 <CDC_Receive_FS+0x24>)
 8006402:	f7fe fc07 	bl	8004c14 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006406:	4804      	ldr	r0, [pc, #16]	; (8006418 <CDC_Receive_FS+0x24>)
 8006408:	f7fe fc22 	bl	8004c50 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800640c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000120 	.word	0x20000120

0800641c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	4613      	mov	r3, r2
 8006428:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800642e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006432:	4618      	mov	r0, r3
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	6039      	str	r1, [r7, #0]
 800644a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2212      	movs	r2, #18
 8006450:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006452:	4b03      	ldr	r3, [pc, #12]	; (8006460 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	200000c8 	.word	0x200000c8

08006464 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	6039      	str	r1, [r7, #0]
 800646e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2204      	movs	r2, #4
 8006474:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006476:	4b03      	ldr	r3, [pc, #12]	; (8006484 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	200000dc 	.word	0x200000dc

08006488 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	6039      	str	r1, [r7, #0]
 8006492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	4907      	ldr	r1, [pc, #28]	; (80064bc <USBD_FS_ProductStrDescriptor+0x34>)
 800649e:	4808      	ldr	r0, [pc, #32]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80064a0:	f7ff fe1e 	bl	80060e0 <USBD_GetString>
 80064a4:	e004      	b.n	80064b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	4904      	ldr	r1, [pc, #16]	; (80064bc <USBD_FS_ProductStrDescriptor+0x34>)
 80064aa:	4805      	ldr	r0, [pc, #20]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80064ac:	f7ff fe18 	bl	80060e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064b0:	4b02      	ldr	r3, [pc, #8]	; (80064bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000bfc 	.word	0x20000bfc
 80064c0:	08006ce4 	.word	0x08006ce4

080064c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	6039      	str	r1, [r7, #0]
 80064ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	4904      	ldr	r1, [pc, #16]	; (80064e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064d4:	4804      	ldr	r0, [pc, #16]	; (80064e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064d6:	f7ff fe03 	bl	80060e0 <USBD_GetString>
  return USBD_StrDesc;
 80064da:	4b02      	ldr	r3, [pc, #8]	; (80064e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000bfc 	.word	0x20000bfc
 80064e8:	08006cfc 	.word	0x08006cfc

080064ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	221a      	movs	r2, #26
 80064fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80064fe:	f000 f843 	bl	8006588 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006502:	4b02      	ldr	r3, [pc, #8]	; (800650c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	200000e0 	.word	0x200000e0

08006510 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d105      	bne.n	800652e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	4907      	ldr	r1, [pc, #28]	; (8006544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006526:	4808      	ldr	r0, [pc, #32]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006528:	f7ff fdda 	bl	80060e0 <USBD_GetString>
 800652c:	e004      	b.n	8006538 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	4904      	ldr	r1, [pc, #16]	; (8006544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006532:	4805      	ldr	r0, [pc, #20]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006534:	f7ff fdd4 	bl	80060e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006538:	4b02      	ldr	r3, [pc, #8]	; (8006544 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000bfc 	.word	0x20000bfc
 8006548:	08006d10 	.word	0x08006d10

0800654c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	6039      	str	r1, [r7, #0]
 8006556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d105      	bne.n	800656a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	4907      	ldr	r1, [pc, #28]	; (8006580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006562:	4808      	ldr	r0, [pc, #32]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006564:	f7ff fdbc 	bl	80060e0 <USBD_GetString>
 8006568:	e004      	b.n	8006574 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4904      	ldr	r1, [pc, #16]	; (8006580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800656e:	4805      	ldr	r0, [pc, #20]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006570:	f7ff fdb6 	bl	80060e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006574:	4b02      	ldr	r3, [pc, #8]	; (8006580 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000bfc 	.word	0x20000bfc
 8006584:	08006d1c 	.word	0x08006d1c

08006588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <Get_SerialNum+0x44>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <Get_SerialNum+0x48>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800659a:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <Get_SerialNum+0x4c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80065ae:	2208      	movs	r2, #8
 80065b0:	4909      	ldr	r1, [pc, #36]	; (80065d8 <Get_SerialNum+0x50>)
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f814 	bl	80065e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065b8:	2204      	movs	r2, #4
 80065ba:	4908      	ldr	r1, [pc, #32]	; (80065dc <Get_SerialNum+0x54>)
 80065bc:	68b8      	ldr	r0, [r7, #8]
 80065be:	f000 f80f 	bl	80065e0 <IntToUnicode>
  }
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	1fff7a10 	.word	0x1fff7a10
 80065d0:	1fff7a14 	.word	0x1fff7a14
 80065d4:	1fff7a18 	.word	0x1fff7a18
 80065d8:	200000e2 	.word	0x200000e2
 80065dc:	200000f2 	.word	0x200000f2

080065e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]
 80065f6:	e027      	b.n	8006648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	0f1b      	lsrs	r3, r3, #28
 80065fc:	2b09      	cmp	r3, #9
 80065fe:	d80b      	bhi.n	8006618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	0f1b      	lsrs	r3, r3, #28
 8006604:	b2da      	uxtb	r2, r3
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	4619      	mov	r1, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	440b      	add	r3, r1
 8006610:	3230      	adds	r2, #48	; 0x30
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e00a      	b.n	800662e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	0f1b      	lsrs	r3, r3, #28
 800661c:	b2da      	uxtb	r2, r3
 800661e:	7dfb      	ldrb	r3, [r7, #23]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4619      	mov	r1, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	440b      	add	r3, r1
 8006628:	3237      	adds	r2, #55	; 0x37
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	3301      	adds	r3, #1
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4413      	add	r3, r2
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	3301      	adds	r3, #1
 8006646:	75fb      	strb	r3, [r7, #23]
 8006648:	7dfa      	ldrb	r2, [r7, #23]
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	429a      	cmp	r2, r3
 800664e:	d3d3      	bcc.n	80065f8 <IntToUnicode+0x18>
  }
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
	...

08006660 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006668:	f107 0314 	add.w	r3, r7, #20
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	609a      	str	r2, [r3, #8]
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006680:	d13a      	bne.n	80066f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	4b1e      	ldr	r3, [pc, #120]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	6313      	str	r3, [r2, #48]	; 0x30
 8006692:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800669e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80066a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a4:	2302      	movs	r3, #2
 80066a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066ac:	2303      	movs	r3, #3
 80066ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066b0:	230a      	movs	r3, #10
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	4619      	mov	r1, r3
 80066ba:	4812      	ldr	r0, [pc, #72]	; (8006704 <HAL_PCD_MspInit+0xa4>)
 80066bc:	f7fa f9ee 	bl	8000a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	4a0e      	ldr	r2, [pc, #56]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ca:	6353      	str	r3, [r2, #52]	; 0x34
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066da:	6453      	str	r3, [r2, #68]	; 0x44
 80066dc:	4b08      	ldr	r3, [pc, #32]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066e8:	2200      	movs	r2, #0
 80066ea:	2100      	movs	r1, #0
 80066ec:	2043      	movs	r0, #67	; 0x43
 80066ee:	f7fa f99e 	bl	8000a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066f2:	2043      	movs	r0, #67	; 0x43
 80066f4:	f7fa f9b7 	bl	8000a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066f8:	bf00      	nop
 80066fa:	3728      	adds	r7, #40	; 0x28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40023800 	.word	0x40023800
 8006704:	40020000 	.word	0x40020000

08006708 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f7fe fb7f 	bl	8004e22 <USBD_LL_SetupStage>
}
 8006724:	bf00      	nop
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800673e:	78fa      	ldrb	r2, [r7, #3]
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	4619      	mov	r1, r3
 8006756:	f7fe fbb9 	bl	8004ecc <USBD_LL_DataOutStage>
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	4613      	mov	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	334c      	adds	r3, #76	; 0x4c
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	4619      	mov	r1, r3
 800678a:	f7fe fc52 	bl	8005032 <USBD_LL_DataInStage>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fe fd86 	bl	80052b6 <USBD_LL_SOF>
}
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d001      	beq.n	80067ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80067c6:	f7f9 ff21 	bl	800060c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067d0:	7bfa      	ldrb	r2, [r7, #15]
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fe fd30 	bl	800523a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe fcd8 	bl	8005196 <USBD_LL_Reset>
}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fd2b 	bl	800525a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006816:	f043 0301 	orr.w	r3, r3, #1
 800681a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <HAL_PCD_SuspendCallback+0x48>)
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	4a03      	ldr	r2, [pc, #12]	; (8006838 <HAL_PCD_SuspendCallback+0x48>)
 800682a:	f043 0306 	orr.w	r3, r3, #6
 800682e:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	e000ed00 	.word	0xe000ed00

0800683c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fd1b 	bl	8005286 <USBD_LL_Resume>
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	4611      	mov	r1, r2
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fd73 	bl	800535a <USBD_LL_IsoOUTIncomplete>
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fd2f 	bl	80052f6 <USBD_LL_IsoINIncomplete>
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fd85 	bl	80053be <USBD_LL_DevConnected>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fd82 	bl	80053d4 <USBD_LL_DevDisconnected>
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d13c      	bne.n	8006962 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068e8:	4a20      	ldr	r2, [pc, #128]	; (800696c <USBD_LL_Init+0x94>)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <USBD_LL_Init+0x94>)
 80068f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80068f8:	4b1c      	ldr	r3, [pc, #112]	; (800696c <USBD_LL_Init+0x94>)
 80068fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80068fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006900:	4b1a      	ldr	r3, [pc, #104]	; (800696c <USBD_LL_Init+0x94>)
 8006902:	2204      	movs	r2, #4
 8006904:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006906:	4b19      	ldr	r3, [pc, #100]	; (800696c <USBD_LL_Init+0x94>)
 8006908:	2202      	movs	r2, #2
 800690a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800690c:	4b17      	ldr	r3, [pc, #92]	; (800696c <USBD_LL_Init+0x94>)
 800690e:	2200      	movs	r2, #0
 8006910:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006912:	4b16      	ldr	r3, [pc, #88]	; (800696c <USBD_LL_Init+0x94>)
 8006914:	2202      	movs	r2, #2
 8006916:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006918:	4b14      	ldr	r3, [pc, #80]	; (800696c <USBD_LL_Init+0x94>)
 800691a:	2200      	movs	r2, #0
 800691c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800691e:	4b13      	ldr	r3, [pc, #76]	; (800696c <USBD_LL_Init+0x94>)
 8006920:	2200      	movs	r2, #0
 8006922:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006924:	4b11      	ldr	r3, [pc, #68]	; (800696c <USBD_LL_Init+0x94>)
 8006926:	2200      	movs	r2, #0
 8006928:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <USBD_LL_Init+0x94>)
 800692c:	2200      	movs	r2, #0
 800692e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006930:	4b0e      	ldr	r3, [pc, #56]	; (800696c <USBD_LL_Init+0x94>)
 8006932:	2200      	movs	r2, #0
 8006934:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006936:	480d      	ldr	r0, [pc, #52]	; (800696c <USBD_LL_Init+0x94>)
 8006938:	f7fa fa34 	bl	8000da4 <HAL_PCD_Init>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006942:	f7f9 fe63 	bl	800060c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006946:	2180      	movs	r1, #128	; 0x80
 8006948:	4808      	ldr	r0, [pc, #32]	; (800696c <USBD_LL_Init+0x94>)
 800694a:	f7fb fc8c 	bl	8002266 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800694e:	2240      	movs	r2, #64	; 0x40
 8006950:	2100      	movs	r1, #0
 8006952:	4806      	ldr	r0, [pc, #24]	; (800696c <USBD_LL_Init+0x94>)
 8006954:	f7fb fc40 	bl	80021d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006958:	2280      	movs	r2, #128	; 0x80
 800695a:	2101      	movs	r1, #1
 800695c:	4803      	ldr	r0, [pc, #12]	; (800696c <USBD_LL_Init+0x94>)
 800695e:	f7fb fc3b 	bl	80021d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000dfc 	.word	0x20000dfc

08006970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006986:	4618      	mov	r0, r3
 8006988:	f7fa fb29 	bl	8000fde <HAL_PCD_Start>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f942 	bl	8006c1c <USBD_Get_USB_Status>
 8006998:	4603      	mov	r3, r0
 800699a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800699c:	7bbb      	ldrb	r3, [r7, #14]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	4608      	mov	r0, r1
 80069b0:	4611      	mov	r1, r2
 80069b2:	461a      	mov	r2, r3
 80069b4:	4603      	mov	r3, r0
 80069b6:	70fb      	strb	r3, [r7, #3]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70bb      	strb	r3, [r7, #2]
 80069bc:	4613      	mov	r3, r2
 80069be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80069ce:	78bb      	ldrb	r3, [r7, #2]
 80069d0:	883a      	ldrh	r2, [r7, #0]
 80069d2:	78f9      	ldrb	r1, [r7, #3]
 80069d4:	f7fa fffa 	bl	80019cc <HAL_PCD_EP_Open>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f91c 	bl	8006c1c <USBD_Get_USB_Status>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	4611      	mov	r1, r2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fb f843 	bl	8001a9c <HAL_PCD_EP_Close>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f8fd 	bl	8006c1c <USBD_Get_USB_Status>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fb f91b 	bl	8001c8a <HAL_PCD_EP_SetStall>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 f8de 	bl	8006c1c <USBD_Get_USB_Status>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fb f960 	bl	8001d52 <HAL_PCD_EP_ClrStall>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 f8bf 	bl	8006c1c <USBD_Get_USB_Status>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006abe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	da0b      	bge.n	8006ae0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	333e      	adds	r3, #62	; 0x3e
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	e00b      	b.n	8006af8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006af6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b1e:	78fa      	ldrb	r2, [r7, #3]
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fa ff2d 	bl	8001982 <HAL_PCD_SetAddress>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f874 	bl	8006c1c <USBD_Get_USB_Status>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b086      	sub	sp, #24
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006b60:	7af9      	ldrb	r1, [r7, #11]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	f7fb f846 	bl	8001bf6 <HAL_PCD_EP_Transmit>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 f853 	bl	8006c1c <USBD_Get_USB_Status>
 8006b76:	4603      	mov	r3, r0
 8006b78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	460b      	mov	r3, r1
 8006b92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006ba2:	7af9      	ldrb	r1, [r7, #11]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	f7fa ffc2 	bl	8001b30 <HAL_PCD_EP_Receive>
 8006bac:	4603      	mov	r3, r0
 8006bae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f832 	bl	8006c1c <USBD_Get_USB_Status>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fa fff2 	bl	8001bc6 <HAL_PCD_EP_GetRxCount>
 8006be2:	4603      	mov	r3, r0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006bf4:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <USBD_static_malloc+0x18>)
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20001308 	.word	0x20001308

08006c08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]

}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d817      	bhi.n	8006c60 <USBD_Get_USB_Status+0x44>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USBD_Get_USB_Status+0x1c>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c4f 	.word	0x08006c4f
 8006c40:	08006c55 	.word	0x08006c55
 8006c44:	08006c5b 	.word	0x08006c5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c4c:	e00b      	b.n	8006c66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	73fb      	strb	r3, [r7, #15]
    break;
 8006c52:	e008      	b.n	8006c66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]
    break;
 8006c58:	e005      	b.n	8006c66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c5e:	e002      	b.n	8006c66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
    break;
 8006c64:	bf00      	nop
  }
  return usb_status;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <memset>:
 8006c74:	4402      	add	r2, r0
 8006c76:	4603      	mov	r3, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <__libc_init_array>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	4d0d      	ldr	r5, [pc, #52]	; (8006cbc <__libc_init_array+0x38>)
 8006c88:	4c0d      	ldr	r4, [pc, #52]	; (8006cc0 <__libc_init_array+0x3c>)
 8006c8a:	1b64      	subs	r4, r4, r5
 8006c8c:	10a4      	asrs	r4, r4, #2
 8006c8e:	2600      	movs	r6, #0
 8006c90:	42a6      	cmp	r6, r4
 8006c92:	d109      	bne.n	8006ca8 <__libc_init_array+0x24>
 8006c94:	4d0b      	ldr	r5, [pc, #44]	; (8006cc4 <__libc_init_array+0x40>)
 8006c96:	4c0c      	ldr	r4, [pc, #48]	; (8006cc8 <__libc_init_array+0x44>)
 8006c98:	f000 f818 	bl	8006ccc <_init>
 8006c9c:	1b64      	subs	r4, r4, r5
 8006c9e:	10a4      	asrs	r4, r4, #2
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	42a6      	cmp	r6, r4
 8006ca4:	d105      	bne.n	8006cb2 <__libc_init_array+0x2e>
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cac:	4798      	blx	r3
 8006cae:	3601      	adds	r6, #1
 8006cb0:	e7ee      	b.n	8006c90 <__libc_init_array+0xc>
 8006cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb6:	4798      	blx	r3
 8006cb8:	3601      	adds	r6, #1
 8006cba:	e7f2      	b.n	8006ca2 <__libc_init_array+0x1e>
 8006cbc:	08006d44 	.word	0x08006d44
 8006cc0:	08006d44 	.word	0x08006d44
 8006cc4:	08006d44 	.word	0x08006d44
 8006cc8:	08006d48 	.word	0x08006d48

08006ccc <_init>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	bf00      	nop
 8006cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd2:	bc08      	pop	{r3}
 8006cd4:	469e      	mov	lr, r3
 8006cd6:	4770      	bx	lr

08006cd8 <_fini>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr
