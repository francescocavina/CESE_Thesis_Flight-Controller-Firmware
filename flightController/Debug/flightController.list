
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ffc  08009ffc  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ffc  08009ffc  00019ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a004  0800a004  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a008  0800a008  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800a00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001678  2000014c  0800a158  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017c4  0800a158  000217c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016afa  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c2b  00000000  00000000  00036cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  0003a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d92  00000000  00000000  0003bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a122  00000000  00000000  0003c842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d67f  00000000  00000000  00056964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc43  00000000  00000000  00073fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004db0  00000000  00000000  00100c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001059d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ecc 	.word	0x08009ecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08009ecc 	.word	0x08009ecc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <flightController_App>:
extern DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b098      	sub	sp, #96	; 0x60
 8000590:	af00      	add	r7, sp, #0
    uint8_t str1[40];
    uint8_t str2[40];

    MPU6050_HandleTypeDef_t * hmpu6050;

    rc_controller = FSA8S_RC_Init(&huart2);
 8000592:	4855      	ldr	r0, [pc, #340]	; (80006e8 <flightController_App+0x15c>)
 8000594:	f000 fb96 	bl	8000cc4 <FSA8S_RC_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	4a54      	ldr	r2, [pc, #336]	; (80006ec <flightController_App+0x160>)
 800059c:	6013      	str	r3, [r2, #0]

    hmpu6050 = MPU6050_IMU_Init(&hi2c1);
 800059e:	4854      	ldr	r0, [pc, #336]	; (80006f0 <flightController_App+0x164>)
 80005a0:	f000 fd1e 	bl	8000fe0 <MPU6050_IMU_Init>
 80005a4:	65f8      	str	r0, [r7, #92]	; 0x5c
    //

    gyroscopeValues_t * gyroscopeValues;
    accelerometerValues_t * accelerometerValues;
    while (1) {
        HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f000 fe43 	bl	8001234 <HAL_Delay>

        MPU6050_IMU_ReadGyroscope(hmpu6050, gyroscopeValues);
 80005ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80005b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80005b2:	f000 fd49 	bl	8001048 <MPU6050_IMU_ReadGyroscope>

        sprintf((char *)str1, (const char *)"Value Gyro X: %d\r\n", gyroscopeValues->gyroscopeX);
 80005b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005bc:	461a      	mov	r2, r3
 80005be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c2:	494c      	ldr	r1, [pc, #304]	; (80006f4 <flightController_App+0x168>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f009 f889 	bl	80096dc <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe06 	bl	80001e0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f008 fb6e 	bl	8008cc0 <CDC_Transmit_FS>
        HAL_Delay(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fe25 	bl	8001234 <HAL_Delay>
        sprintf((char *)str1, (const char *)"Value Gyro Y: %d\r\n", gyroscopeValues->gyroscopeY);
 80005ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005f0:	461a      	mov	r2, r3
 80005f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005f6:	4940      	ldr	r1, [pc, #256]	; (80006f8 <flightController_App+0x16c>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 f86f 	bl	80096dc <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fdec 	bl	80001e0 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f008 fb54 	bl	8008cc0 <CDC_Transmit_FS>
        HAL_Delay(10);
 8000618:	200a      	movs	r0, #10
 800061a:	f000 fe0b 	bl	8001234 <HAL_Delay>
        sprintf((char *)str1, (const char *)"Value Gyro Z: %d\r\n\n", gyroscopeValues->gyroscopeZ);
 800061e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000620:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000624:	461a      	mov	r2, r3
 8000626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062a:	4934      	ldr	r1, [pc, #208]	; (80006fc <flightController_App+0x170>)
 800062c:	4618      	mov	r0, r3
 800062e:	f009 f855 	bl	80096dc <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 8000632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fdd2 	bl	80001e0 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f008 fb3a 	bl	8008cc0 <CDC_Transmit_FS>
        HAL_Delay(10);
 800064c:	200a      	movs	r0, #10
 800064e:	f000 fdf1 	bl	8001234 <HAL_Delay>

        MPU6050_IMU_ReadAccelerometer(hmpu6050, accelerometerValues);
 8000652:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000654:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000656:	f000 fd39 	bl	80010cc <MPU6050_IMU_ReadAccelerometer>
        sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n",
        		accelerometerValues->accelerometerX);
 800065a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800065c:	f9b3 3000 	ldrsh.w	r3, [r3]
        sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n",
 8000660:	461a      	mov	r2, r3
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4926      	ldr	r1, [pc, #152]	; (8000700 <flightController_App+0x174>)
 8000666:	4618      	mov	r0, r3
 8000668:	f009 f838 	bl	80096dc <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fdb6 	bl	80001e0 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	b29a      	uxth	r2, r3
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f008 fb1f 	bl	8008cc0 <CDC_Transmit_FS>
        HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 fdd6 	bl	8001234 <HAL_Delay>
        sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n",
        		accelerometerValues->accelerometerY);
 8000688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800068a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n",
 800068e:	461a      	mov	r2, r3
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	491c      	ldr	r1, [pc, #112]	; (8000704 <flightController_App+0x178>)
 8000694:	4618      	mov	r0, r3
 8000696:	f009 f821 	bl	80096dc <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fd9f 	bl	80001e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f008 fb08 	bl	8008cc0 <CDC_Transmit_FS>
        HAL_Delay(10);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f000 fdbf 	bl	8001234 <HAL_Delay>
        sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n\n\n\n",
        		accelerometerValues->accelerometerZ);
 80006b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n\n\n\n",
 80006bc:	461a      	mov	r2, r3
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4911      	ldr	r1, [pc, #68]	; (8000708 <flightController_App+0x17c>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f009 f80a 	bl	80096dc <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fd88 	bl	80001e0 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f008 faf1 	bl	8008cc0 <CDC_Transmit_FS>
        HAL_Delay(10);
 80006de:	200a      	movs	r0, #10
 80006e0:	f000 fda8 	bl	8001234 <HAL_Delay>
        HAL_Delay(1000);
 80006e4:	e75f      	b.n	80005a6 <flightController_App+0x1a>
 80006e6:	bf00      	nop
 80006e8:	200001c0 	.word	0x200001c0
 80006ec:	20000168 	.word	0x20000168
 80006f0:	2000016c 	.word	0x2000016c
 80006f4:	08009ee4 	.word	0x08009ee4
 80006f8:	08009ef8 	.word	0x08009ef8
 80006fc:	08009f0c 	.word	0x08009f0c
 8000700:	08009f20 	.word	0x08009f20
 8000704:	08009f34 	.word	0x08009f34
 8000708:	08009f48 	.word	0x08009f48

0800070c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000710:	f000 fd1e 	bl	8001150 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000714:	f000 f810 	bl	8000738 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000718:	f000 f8ea 	bl	80008f0 <MX_GPIO_Init>
    MX_DMA_Init();
 800071c:	f000 f8ce 	bl	80008bc <MX_DMA_Init>
    MX_USB_DEVICE_Init();
 8000720:	f008 fa10 	bl	8008b44 <MX_USB_DEVICE_Init>
    MX_I2C1_Init();
 8000724:	f000 f872 	bl	800080c <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000728:	f000 f89e 	bl	8000868 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    flightController_App();
 800072c:	f7ff ff2e 	bl	800058c <flightController_App>
 8000730:	2300      	movs	r3, #0
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f008 ffe8 	bl	800971c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xd0>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 80007ac:	230f      	movs	r3, #15
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 80007b0:	2390      	movs	r3, #144	; 0x90
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 80007b8:	2305      	movs	r3, #5
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fc13 	bl	8003fec <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x98>
        Error_Handler();
 80007cc:	f000 f8c6 	bl	800095c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2101      	movs	r1, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fe75 	bl	80044dc <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc4>
        Error_Handler();
 80007f8:	f000 f8b0 	bl	800095c <Error_Handler>
    }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C1_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <MX_I2C1_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_I2C1_Init+0x50>)
 8000818:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_I2C1_Init+0x58>)
 800081a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_I2C1_Init+0x50>)
 800082a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800082e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_I2C1_Init+0x50>)
 800084a:	f001 f993 	bl	8001b74 <HAL_I2C_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000854:	f000 f882 	bl	800095c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000016c 	.word	0x2000016c
 8000860:	40005400 	.word	0x40005400
 8000864:	00061a80 	.word	0x00061a80

08000868 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	2204      	movs	r2, #4
 8000890:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f003 fffc 	bl	800489c <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80008aa:	f000 f857 	bl	800095c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200001c0 	.word	0x200001c0
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_DMA_Init+0x30>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <MX_DMA_Init+0x30>)
 80008cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_DMA_Init+0x30>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <MX_GPIO_Init+0x68>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_GPIO_Init+0x68>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_GPIO_Init+0x68>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <MX_GPIO_Init+0x68>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_GPIO_Init+0x68>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_GPIO_Init+0x68>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <MX_GPIO_Init+0x68>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_GPIO_Init+0x68>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <HAL_I2C_MspInit+0x84>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d12b      	bne.n	8000a36 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80009fa:	23c0      	movs	r3, #192	; 0xc0
 80009fc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fe:	2312      	movs	r3, #18
 8000a00:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <HAL_I2C_MspInit+0x8c>)
 8000a16:	f000 ff29 	bl	800186c <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400

08000a4c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a30      	ldr	r2, [pc, #192]	; (8000b2c <HAL_UART_MspInit+0xe0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d15a      	bne.n	8000b24 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <HAL_UART_MspInit+0xe4>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a2e      	ldr	r2, [pc, #184]	; (8000b30 <HAL_UART_MspInit+0xe4>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <HAL_UART_MspInit+0xe4>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <HAL_UART_MspInit+0xe4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <HAL_UART_MspInit+0xe4>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_UART_MspInit+0xe4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481c      	ldr	r0, [pc, #112]	; (8000b34 <HAL_UART_MspInit+0xe8>)
 8000ac2:	f000 fed3 	bl	800186c <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <HAL_UART_MspInit+0xf0>)
 8000aca:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad2:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae6:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000afa:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000b0a:	f000 fcc9 	bl	80014a0 <HAL_DMA_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_UART_MspInit+0xcc>
            Error_Handler();
 8000b14:	f7ff ff22 	bl	800095c <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b1e:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_UART_MspInit+0xec>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	20000204 	.word	0x20000204
 8000b3c:	40026088 	.word	0x40026088

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 fb32 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <OTG_FS_IRQHandler+0x10>)
 8000b9a:	f002 f8fa 	bl	8002d92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000f50 	.word	0x20000f50

08000ba8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
        errno = ENOMEM;
 8000bd8:	f008 fdb8 	bl	800974c <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20010000 	.word	0x20010000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	20000264 	.word	0x20000264
 8000c10:	200017c8 	.word	0x200017c8

08000c14 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f008 fd77 	bl	8009758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fd4f 	bl	800070c <main>
  bx  lr
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000c7c:	0800a00c 	.word	0x0800a00c
  ldr r2, =_sbss
 8000c80:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000c84:	200017c4 	.word	0x200017c4

08000c88 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>

08000c8a <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <IBUS_Init+0x12>
        return false;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e00f      	b.n	8000cbc <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6859      	ldr	r1, [r3, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7a1b      	ldrb	r3, [r3, #8]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	f003 fe43 	bl	8004936 <HAL_UART_Receive_DMA>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <FSA8S_RC_Init>:
        }
    }
}

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_RC_Init(UART_HandleTypeDef * huart) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <FSA8S_RC_Init+0x12>
        return NULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e049      	b.n	8000d6a <FSA8S_RC_Init+0xa6>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <FSA8S_RC_Init+0xb0>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <FSA8S_RC_Init+0x1e>
        return NULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e043      	b.n	8000d6a <FSA8S_RC_Init+0xa6>
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(IBUS_HandleTypeDef_t));
    uint8_t * buffer = pvortMalloc(sizeof(IBUS_BUFFER_LENGTH));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    IBUS_HandleTypeDef_t * hibus = malloc(sizeof(IBUS_HandleTypeDef_t));
 8000ce2:	2014      	movs	r0, #20
 8000ce4:	f008 fc3e 	bl	8009564 <malloc>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	617b      	str	r3, [r7, #20]
    uint8_t * buffer = malloc(sizeof(IBUS_BUFFER_LENGTH));
 8000cec:	2004      	movs	r0, #4
 8000cee:	f008 fc39 	bl	8009564 <malloc>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	613b      	str	r3, [r7, #16]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f008 fc34 	bl	8009564 <malloc>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60fb      	str	r3, [r7, #12]
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00f      	beq.n	8000d26 <FSA8S_RC_Init+0x62>
        hibus->huart = huart;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	2220      	movs	r2, #32
 8000d16:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	220e      	movs	r2, #14
 8000d22:	741a      	strb	r2, [r3, #16]
 8000d24:	e00a      	b.n	8000d3c <FSA8S_RC_Init+0x78>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f008 fc1f 	bl	8009574 <free>
        free(hibus);
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f008 fc1c 	bl	8009574 <free>
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffa4 	bl	8000c8a <IBUS_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d004      	beq.n	8000d52 <FSA8S_RC_Init+0x8e>
        /* Initialization was successful */
        alreadyInitialized = true;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <FSA8S_RC_Init+0xb0>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
        return hibus;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	e00b      	b.n	8000d6a <FSA8S_RC_Init+0xa6>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 fc09 	bl	8009574 <free>
        free(hibus);
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f008 fc06 	bl	8009574 <free>
#endif
        return NULL;
 8000d68:	2300      	movs	r3, #0
    }
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000268 	.word	0x20000268

08000d78 <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <I2C_Init+0x12>
        return false;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e00c      	b.n	8000da4 <I2C_Init+0x2c>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050, MPU_6050_REG_WHO_AM_I_MPU6050, &who_am_I_value, 1);
 8000d8a:	f107 020f 	add.w	r2, r7, #15
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2175      	movs	r1, #117	; 0x75
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f80a 	bl	8000dac <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_VALUE_WHO_AM_I) {
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	2b68      	cmp	r3, #104	; 0x68
 8000d9c:	d101      	bne.n	8000da2 <I2C_Init+0x2a>
        /* Right IMU device ID */
        return true;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <I2C_Init+0x2c>
    } else {
        /* Wrong IMU device ID */
        return false;
 8000da2:	2300      	movs	r3, #0
    }
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <I2C_Read>:

bool_t I2C_Read(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	461a      	mov	r2, r3
 8000db8:	460b      	mov	r3, r1
 8000dba:	72fb      	strb	r3, [r7, #11]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hmpu6050) {
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <I2C_Read+0x1e>
        return false;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e028      	b.n	8000e1c <I2C_Read+0x70>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	2b75      	cmp	r3, #117	; 0x75
 8000dce:	d901      	bls.n	8000dd4 <I2C_Read+0x28>
        return false;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e023      	b.n	8000e1c <I2C_Read+0x70>
    }
    if (NULL == data) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <I2C_Read+0x32>
        return false;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e01e      	b.n	8000e1c <I2C_Read+0x70>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000dde:	7abb      	ldrb	r3, [r7, #10]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <I2C_Read+0x3e>
 8000de4:	7abb      	ldrb	r3, [r7, #10]
 8000de6:	2b0a      	cmp	r3, #10
 8000de8:	d901      	bls.n	8000dee <I2C_Read+0x42>
        return false;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e016      	b.n	8000e1c <I2C_Read+0x70>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hmpu6050->hi2c, hmpu6050->address, reg, MPU_6050_ADDR_SIZE, data,
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6858      	ldr	r0, [r3, #4]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	7a1b      	ldrb	r3, [r3, #8]
 8000df6:	b299      	uxth	r1, r3
 8000df8:	7afb      	ldrb	r3, [r7, #11]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	7abb      	ldrb	r3, [r7, #10]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	2464      	movs	r4, #100	; 0x64
 8000e02:	9402      	str	r4, [sp, #8]
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f001 f8f0 	bl	8001ff0 <HAL_I2C_Mem_Read>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <I2C_Read+0x6e>
                                   dataSize, MPU_6050_I2C_READ_TIMEOUT)) {

        /* Data couldn't be read */
        return false;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <I2C_Read+0x70>
    } else {

        /* Data read successfully */
        return true;
 8000e1a:	2301      	movs	r3, #1
    }
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <I2C_Write>:

bool_t I2C_Write(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg, uint8_t * data,
                 uint8_t dataSize) {
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af04      	add	r7, sp, #16
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	460b      	mov	r3, r1
 8000e32:	72fb      	strb	r3, [r7, #11]
 8000e34:	4613      	mov	r3, r2
 8000e36:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hmpu6050) {
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <I2C_Write+0x1e>
        return false;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e028      	b.n	8000e94 <I2C_Write+0x70>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	2b75      	cmp	r3, #117	; 0x75
 8000e46:	d901      	bls.n	8000e4c <I2C_Write+0x28>
        return false;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e023      	b.n	8000e94 <I2C_Write+0x70>
    }
    if (NULL == data) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <I2C_Write+0x32>
        return false;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e01e      	b.n	8000e94 <I2C_Write+0x70>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000e56:	7abb      	ldrb	r3, [r7, #10]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <I2C_Write+0x3e>
 8000e5c:	7abb      	ldrb	r3, [r7, #10]
 8000e5e:	2b0a      	cmp	r3, #10
 8000e60:	d901      	bls.n	8000e66 <I2C_Write+0x42>
        return false;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e016      	b.n	8000e94 <I2C_Write+0x70>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, reg, MPU_6050_ADDR_SIZE,
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6858      	ldr	r0, [r3, #4]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	7a1b      	ldrb	r3, [r3, #8]
 8000e6e:	b299      	uxth	r1, r3
 8000e70:	7afb      	ldrb	r3, [r7, #11]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	7abb      	ldrb	r3, [r7, #10]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	2464      	movs	r4, #100	; 0x64
 8000e7a:	9402      	str	r4, [sp, #8]
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	f000 ffba 	bl	8001dfc <HAL_I2C_Mem_Write>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <I2C_Write+0x6e>
                                    data, dataSize, MPU_6050_I2C_WRITE_TIMEOUT)) {

        /* Data couldn't be written */
        return false;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <I2C_Write+0x70>
    } else {

        /* Data written successfully */
        return true;
 8000e92:	2301      	movs	r3, #1
    }
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd90      	pop	{r4, r7, pc}

08000e9c <MPU6050_IMU_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_IMU_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 8000ea4:	2014      	movs	r0, #20
 8000ea6:	f008 fb5d 	bl	8009564 <malloc>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 8000eae:	2004      	movs	r0, #4
 8000eb0:	f008 fb58 	bl	8009564 <malloc>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60bb      	str	r3, [r7, #8]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <MPU6050_IMU_InstanceInit+0x28>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10c      	bne.n	8000ede <MPU6050_IMU_InstanceInit+0x42>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
        free(hmpu6050->buffer);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f008 fb50 	bl	8009574 <free>
        free(hmpu6050);
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f008 fb4d 	bl	8009574 <free>
#endif
        return NULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e01b      	b.n	8000f16 <MPU6050_IMU_InstanceInit+0x7a>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MPU6050_IMU_InstanceInit+0x84>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d106      	bne.n	8000ef4 <MPU6050_IMU_InstanceInit+0x58>
            hmpu6050->instance = 1;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_I2C_ADDR1;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	22d0      	movs	r2, #208	; 0xd0
 8000ef0:	721a      	strb	r2, [r3, #8]
 8000ef2:	e009      	b.n	8000f08 <MPU6050_IMU_InstanceInit+0x6c>
        } else if (instancesNumber == 1) {
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MPU6050_IMU_InstanceInit+0x84>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d105      	bne.n	8000f08 <MPU6050_IMU_InstanceInit+0x6c>
            hmpu6050->instance = 2;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2202      	movs	r2, #2
 8000f00:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_I2C_ADDR2;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	22d1      	movs	r2, #209	; 0xd1
 8000f06:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8000f14:	68fb      	ldr	r3, [r7, #12]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000269 	.word	0x20000269

08000f24 <MPU6050_IMU_Config>:

static void MPU6050_IMU_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */
    uint8_t regValue;

    /* --- Wake up device ---------------------------------------------------------------------- */
    regValue = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
    /* Write '0' to PWR_MGMT_1 register on SLEEP_MODE bit (6) */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_PWR_MGMT_1, &regValue, sizeof(regValue));
 8000f30:	f107 020f 	add.w	r2, r7, #15
 8000f34:	2301      	movs	r3, #1
 8000f36:	216b      	movs	r1, #107	; 0x6b
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f83c 	bl	8000fb6 <MPU6050_IMU_WriteRegister>

    /* --- Set clock source -------------------------------------------------------------------- */
    regValue = 0x01;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
    /* Write '001' to PWR_MGMT_1 register on CLKSEL bits [2:0] */
    /* Set clock source to be PLL with X axis gyroscope reference */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_PWR_MGMT_1, &regValue, sizeof(regValue));
 8000f42:	f107 020f 	add.w	r2, r7, #15
 8000f46:	2301      	movs	r3, #1
 8000f48:	216b      	movs	r1, #107	; 0x6b
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f833 	bl	8000fb6 <MPU6050_IMU_WriteRegister>

    /* --- Set sample rate divider ------------------------------------------------------------- */
    regValue = (MPU6050_GYROSCOPE_SAMPLE_RATE - MPU6050_SAMPLE_RATE) / MPU6050_SAMPLE_RATE;
 8000f50:	230f      	movs	r3, #15
 8000f52:	73fb      	strb	r3, [r7, #15]
     * Gyroscope Output Rate = 8 kHz when the DLPF is disabled, for sample rate = 500 Hz,
     * SAMPLRT_DIVE = Gyroscope Output Rate = 1 kHz when the DLPF is enabled, for sample rate = 500
     * Hz
     */
    /* Write regValue to SMPLRT_DIV register bits [7:0] */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_SMPLRT_DIV, &regValue, sizeof(regValue));
 8000f54:	f107 020f 	add.w	r2, r7, #15
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2119      	movs	r1, #25
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f82a 	bl	8000fb6 <MPU6050_IMU_WriteRegister>

    /* --- Configure gyroscope ----------------------------------------------------------------- */
    regValue = 11 << 3;
 8000f62:	2358      	movs	r3, #88	; 0x58
 8000f64:	73fb      	strb	r3, [r7, #15]
    /* Write '11' to GYRO_CONFIG register on FS_SEL bits [4:3] */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_GYRO_CONFIG, &regValue, sizeof(regValue));
 8000f66:	f107 020f 	add.w	r2, r7, #15
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	211b      	movs	r1, #27
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f821 	bl	8000fb6 <MPU6050_IMU_WriteRegister>

    /* --- Configure accelerometer ------------------------------------------------------------- */
    regValue = 11 << 3;
 8000f74:	2358      	movs	r3, #88	; 0x58
 8000f76:	73fb      	strb	r3, [r7, #15]
    /* Write '11' to ACCEL_CONFIG register on FS_SEL bits [4:3] */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_ACCEL_CONFIG, &regValue, sizeof(regValue));
 8000f78:	f107 020f 	add.w	r2, r7, #15
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	211c      	movs	r1, #28
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f818 	bl	8000fb6 <MPU6050_IMU_WriteRegister>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <MPU6050_IMU_ReadRegister>:

static void MPU6050_IMU_ReadRegister(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg,
                                     uint8_t * data, uint8_t dataSize) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	72fb      	strb	r3, [r7, #11]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	72bb      	strb	r3, [r7, #10]

    I2C_Read(hmpu6050, reg, data, dataSize);
 8000fa2:	7abb      	ldrb	r3, [r7, #10]
 8000fa4:	7af9      	ldrb	r1, [r7, #11]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff feff 	bl	8000dac <I2C_Read>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <MPU6050_IMU_WriteRegister>:

static void MPU6050_IMU_WriteRegister(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg,
                                      uint8_t * data, uint8_t dataSize) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	72fb      	strb	r3, [r7, #11]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	72bb      	strb	r3, [r7, #10]

    I2C_Write(hmpu6050, reg, data, dataSize);
 8000fca:	7abb      	ldrb	r3, [r7, #10]
 8000fcc:	7af9      	ldrb	r1, [r7, #11]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff ff27 	bl	8000e24 <I2C_Write>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <MPU6050_IMU_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_IMU_Init(I2C_HandleTypeDef * hi2c) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MPU6050_IMU_Init+0x64>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d101      	bne.n	8000ff4 <MPU6050_IMU_Init+0x14>
        return NULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e022      	b.n	800103a <MPU6050_IMU_Init+0x5a>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_InstanceInit(hi2c);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff51 	bl	8000e9c <MPU6050_IMU_InstanceInit>
 8000ffa:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01a      	beq.n	8001038 <MPU6050_IMU_Init+0x58>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff feb8 	bl	8000d78 <I2C_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00a      	beq.n	8001024 <MPU6050_IMU_Init+0x44>

            /* Initialization was successful */
            /* Configure device */
            MPU6050_IMU_Config(hmpu6050);
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff ff88 	bl	8000f24 <MPU6050_IMU_Config>

            instancesNumber++;
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MPU6050_IMU_Init+0x64>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MPU6050_IMU_Init+0x64>)
 800101e:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	e00a      	b.n	800103a <MPU6050_IMU_Init+0x5a>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4618      	mov	r0, r3
 800102a:	f008 faa3 	bl	8009574 <free>
            free(hmpu6050);
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f008 faa0 	bl	8009574 <free>
#endif
            return NULL;
 8001034:	2300      	movs	r3, #0
 8001036:	e000      	b.n	800103a <MPU6050_IMU_Init+0x5a>
        }
    } else {

        /* Instance couldn't be created */
        return NULL;
 8001038:	2300      	movs	r3, #0
    }
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000269 	.word	0x20000269

08001048 <MPU6050_IMU_ReadGyroscope>:
    /* Write '1' to PWR_MGMT_1 register to DEVICE_RESET bit (7) */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_PWR_MGMT_1, &regValue, sizeof(regValue));
}

void MPU6050_IMU_ReadGyroscope(MPU6050_HandleTypeDef_t * hmpu6050,
                               gyroscopeValues_t * gyroscopeValues) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

    gyroscopeValues->gyroscopeX = 0;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	801a      	strh	r2, [r3, #0]
    gyroscopeValues->gyroscopeY = 0;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	805a      	strh	r2, [r3, #2]
    gyroscopeValues->gyroscopeZ = 0;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	809a      	strh	r2, [r3, #4]

    uint8_t gyroscopeRawData[2];

    /* Read gyroscope in axis X */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData,
 8001064:	f107 020c 	add.w	r2, r7, #12
 8001068:	2302      	movs	r3, #2
 800106a:	2143      	movs	r1, #67	; 0x43
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff8e 	bl	8000f8e <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	801a      	strh	r2, [r3, #0]

    /* Read gyroscope in axis Y */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData,
 8001084:	f107 020c 	add.w	r2, r7, #12
 8001088:	2302      	movs	r3, #2
 800108a:	2145      	movs	r1, #69	; 0x45
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff7e 	bl	8000f8e <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8001092:	7b3b      	ldrb	r3, [r7, #12]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21a      	sxth	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	805a      	strh	r2, [r3, #2]

    /* Read gyroscope in axis Z */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData,
 80010a4:	f107 020c 	add.w	r2, r7, #12
 80010a8:	2302      	movs	r3, #2
 80010aa:	2147      	movs	r1, #71	; 0x47
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff6e 	bl	8000f8e <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	809a      	strh	r2, [r3, #4]
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <MPU6050_IMU_ReadAccelerometer>:

void MPU6050_IMU_ReadAccelerometer(MPU6050_HandleTypeDef_t * hmpu6050,
                                   accelerometerValues_t * accelerometerValues) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]

    accelerometerValues->accelerometerX = 0;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	801a      	strh	r2, [r3, #0]
    accelerometerValues->accelerometerY = 0;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	805a      	strh	r2, [r3, #2]
    accelerometerValues->accelerometerZ = 0;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	809a      	strh	r2, [r3, #4]

    uint8_t accelerometerRawData[2];

    /* Read accelerometer in axis X */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData,
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	2302      	movs	r3, #2
 80010ee:	213b      	movs	r1, #59	; 0x3b
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff4c 	bl	8000f8e <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    accelerometerValues->accelerometerX =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21a      	sxth	r2, r3
    accelerometerValues->accelerometerX =
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	801a      	strh	r2, [r3, #0]

    /* Read accelerometer in axis Y */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData,
 8001108:	f107 020c 	add.w	r2, r7, #12
 800110c:	2302      	movs	r3, #2
 800110e:	213d      	movs	r1, #61	; 0x3d
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff3c 	bl	8000f8e <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    accelerometerValues->accelerometerY =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8001116:	7b3b      	ldrb	r3, [r7, #12]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	7b7b      	ldrb	r3, [r7, #13]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
    accelerometerValues->accelerometerY =
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	805a      	strh	r2, [r3, #2]

    /* Read accelerometer in axis Z */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData,
 8001128:	f107 020c 	add.w	r2, r7, #12
 800112c:	2302      	movs	r3, #2
 800112e:	213f      	movs	r1, #63	; 0x3f
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff2c 	bl	8000f8e <MPU6050_IMU_ReadRegister>
                             sizeof(uint16_t));
    accelerometerValues->accelerometerZ =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8001136:	7b3b      	ldrb	r3, [r7, #12]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21a      	sxth	r2, r3
    accelerometerValues->accelerometerZ =
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	809a      	strh	r2, [r3, #4]
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_Init+0x40>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_Init+0x40>)
 8001166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x40>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f94f 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	200f      	movs	r0, #15
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fbf2 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f967 	bl	8001486 <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d0:	f000 f92f 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	2000026c 	.word	0x2000026c

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000026c 	.word	0x2000026c

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff29 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff3e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff31 	bl	80012e0 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff feb6 	bl	800121c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e099      	b.n	80015f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014dc:	e00f      	b.n	80014fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014de:	f7ff fe9d 	bl	800121c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d908      	bls.n	80014fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2220      	movs	r2, #32
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e078      	b.n	80015f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1e8      	bne.n	80014de <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_DMA_Init+0x158>)
 8001518:	4013      	ands	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4313      	orrs	r3, r2
 800154e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	2b04      	cmp	r3, #4
 8001556:	d107      	bne.n	8001568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4313      	orrs	r3, r2
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4313      	orrs	r3, r2
 8001566:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f023 0307 	bic.w	r3, r3, #7
 800157e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	4313      	orrs	r3, r2
 8001588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	2b04      	cmp	r3, #4
 8001590:	d117      	bne.n	80015c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4313      	orrs	r3, r2
 800159a:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00e      	beq.n	80015c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8e5 	bl	8001774 <DMA_CheckFifoParam>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e016      	b.n	80015f0 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f89c 	bl	8001708 <DMA_CalcBaseAndBitshift>
 80015d0:	4603      	mov	r3, r0
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	223f      	movs	r2, #63	; 0x3f
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	f010803f 	.word	0xf010803f

080015fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_DMA_Start_IT+0x26>
 800161e:	2302      	movs	r3, #2
 8001620:	e040      	b.n	80016a4 <HAL_DMA_Start_IT+0xa8>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12f      	bne.n	8001696 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2202      	movs	r2, #2
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f82e 	bl	80016ac <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	223f      	movs	r2, #63	; 0x3f
 8001656:	409a      	lsls	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0216 	orr.w	r2, r2, #22
 800166a:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0208 	orr.w	r2, r2, #8
 8001682:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e005      	b.n	80016a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 800169e:	2302      	movs	r3, #2
 80016a0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b40      	cmp	r3, #64	; 0x40
 80016d8:	d108      	bne.n	80016ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016ea:	e007      	b.n	80016fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3b10      	subs	r3, #16
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <DMA_CalcBaseAndBitshift+0x64>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <DMA_CalcBaseAndBitshift+0x68>)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d909      	bls.n	800174a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	1d1a      	adds	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	659a      	str	r2, [r3, #88]	; 0x58
 8001748:	e007      	b.n	800175a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	aaaaaaab 	.word	0xaaaaaaab
 8001770:	08009fc0 	.word	0x08009fc0

08001774 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d11f      	bne.n	80017ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d856      	bhi.n	8001842 <DMA_CheckFifoParam+0xce>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <DMA_CheckFifoParam+0x28>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	080017bf 	.word	0x080017bf
 80017a4:	080017ad 	.word	0x080017ad
 80017a8:	08001843 	.word	0x08001843
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d046      	beq.n	8001846 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017bc:	e043      	b.n	8001846 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017c6:	d140      	bne.n	800184a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017cc:	e03d      	b.n	800184a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d6:	d121      	bne.n	800181c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d837      	bhi.n	800184e <DMA_CheckFifoParam+0xda>
 80017de:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <DMA_CheckFifoParam+0x70>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	080017fb 	.word	0x080017fb
 80017ec:	080017f5 	.word	0x080017f5
 80017f0:	0800180d 	.word	0x0800180d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
      break;
 80017f8:	e030      	b.n	800185c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d025      	beq.n	8001852 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800180a:	e022      	b.n	8001852 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001814:	d11f      	bne.n	8001856 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800181a:	e01c      	b.n	8001856 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d903      	bls.n	800182a <DMA_CheckFifoParam+0xb6>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d003      	beq.n	8001830 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001828:	e018      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
      break;
 800182e:	e015      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00e      	beq.n	800185a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
      break;
 8001840:	e00b      	b.n	800185a <DMA_CheckFifoParam+0xe6>
      break;
 8001842:	bf00      	nop
 8001844:	e00a      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e008      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e006      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 800184e:	bf00      	nop
 8001850:	e004      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
 8001854:	e002      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 800185a:	bf00      	nop
    }
  }

  return status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e159      	b.n	8001b3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8148 	bne.w	8001b36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d005      	beq.n	80018be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d130      	bne.n	8001920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 0201 	and.w	r2, r3, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d017      	beq.n	800195c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d123      	bne.n	80019b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	69b9      	ldr	r1, [r7, #24]
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80a2 	beq.w	8001b36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b57      	ldr	r3, [pc, #348]	; (8001b54 <HAL_GPIO_Init+0x2e8>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a56      	ldr	r2, [pc, #344]	; (8001b54 <HAL_GPIO_Init+0x2e8>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <HAL_GPIO_Init+0x2e8>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0e:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a49      	ldr	r2, [pc, #292]	; (8001b5c <HAL_GPIO_Init+0x2f0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d019      	beq.n	8001a6e <HAL_GPIO_Init+0x202>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <HAL_GPIO_Init+0x2f4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0x1fe>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_GPIO_Init+0x2f8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00d      	beq.n	8001a66 <HAL_GPIO_Init+0x1fa>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a46      	ldr	r2, [pc, #280]	; (8001b68 <HAL_GPIO_Init+0x2fc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d007      	beq.n	8001a62 <HAL_GPIO_Init+0x1f6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a45      	ldr	r2, [pc, #276]	; (8001b6c <HAL_GPIO_Init+0x300>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_GPIO_Init+0x1f2>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e008      	b.n	8001a70 <HAL_GPIO_Init+0x204>
 8001a5e:	2307      	movs	r3, #7
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x204>
 8001a62:	2303      	movs	r3, #3
 8001a64:	e004      	b.n	8001a70 <HAL_GPIO_Init+0x204>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_Init+0x204>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_GPIO_Init+0x204>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f002 0203 	and.w	r2, r2, #3
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	4093      	lsls	r3, r2
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a80:	4935      	ldr	r1, [pc, #212]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ab2:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001adc:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b06:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b0f      	cmp	r3, #15
 8001b40:	f67f aea2 	bls.w	8001888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40013800 	.word	0x40013800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40020800 	.word	0x40020800
 8001b68:	40020c00 	.word	0x40020c00
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40013c00 	.word	0x40013c00

08001b74 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e12b      	b.n	8001dde <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe ff0e 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2224      	movs	r2, #36	; 0x24
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc6:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bd8:	f002 fe38 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8001bdc:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a81      	ldr	r2, [pc, #516]	; (8001de8 <HAL_I2C_Init+0x274>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d807      	bhi.n	8001bf8 <HAL_I2C_Init+0x84>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4a80      	ldr	r2, [pc, #512]	; (8001dec <HAL_I2C_Init+0x278>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	bf94      	ite	ls
 8001bf0:	2301      	movls	r3, #1
 8001bf2:	2300      	movhi	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	e006      	b.n	8001c06 <HAL_I2C_Init+0x92>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a7d      	ldr	r2, [pc, #500]	; (8001df0 <HAL_I2C_Init+0x27c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0e7      	b.n	8001dde <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a78      	ldr	r2, [pc, #480]	; (8001df4 <HAL_I2C_Init+0x280>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0c9b      	lsrs	r3, r3, #18
 8001c18:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a6a      	ldr	r2, [pc, #424]	; (8001de8 <HAL_I2C_Init+0x274>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d802      	bhi.n	8001c48 <HAL_I2C_Init+0xd4>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3301      	adds	r3, #1
 8001c46:	e009      	b.n	8001c5c <HAL_I2C_Init+0xe8>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	4a69      	ldr	r2, [pc, #420]	; (8001df8 <HAL_I2C_Init+0x284>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6213      	str	r3, [r2, #32]
               I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	495c      	ldr	r1, [pc, #368]	; (8001de8 <HAL_I2C_Init+0x274>)
 8001c78:	428b      	cmp	r3, r1
 8001c7a:	d819      	bhi.n	8001cb0 <HAL_I2C_Init+0x13c>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e59      	subs	r1, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c8a:	1c59      	adds	r1, r3, #1
 8001c8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c90:	400b      	ands	r3, r1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <HAL_I2C_Init+0x138>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1e59      	subs	r1, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001caa:	e051      	b.n	8001d50 <HAL_I2C_Init+0x1dc>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e04f      	b.n	8001d50 <HAL_I2C_Init+0x1dc>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d111      	bne.n	8001cdc <HAL_I2C_Init+0x168>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1e58      	subs	r0, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	440b      	add	r3, r1
 8001cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	e012      	b.n	8001d02 <HAL_I2C_Init+0x18e>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Init+0x196>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e022      	b.n	8001d50 <HAL_I2C_Init+0x1dc>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10e      	bne.n	8001d30 <HAL_I2C_Init+0x1bc>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e58      	subs	r0, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6859      	ldr	r1, [r3, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	440b      	add	r3, r1
 8001d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2e:	e00f      	b.n	8001d50 <HAL_I2C_Init+0x1dc>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	6809      	ldr	r1, [r1, #0]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61cb      	str	r3, [r1, #28]
               I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
               (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6911      	ldr	r1, [r2, #16]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68d2      	ldr	r2, [r2, #12]
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6093      	str	r3, [r2, #8]
               (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
               (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]
               (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	000186a0 	.word	0x000186a0
 8001dec:	001e847f 	.word	0x001e847f
 8001df0:	003d08ff 	.word	0x003d08ff
 8001df4:	431bde83 	.word	0x431bde83
 8001df8:	10624dd3 	.word	0x10624dd3

08001dfc <HAL_I2C_Mem_Write>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                    uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                    uint16_t Size, uint32_t Timeout) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	817b      	strh	r3, [r7, #10]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	813b      	strh	r3, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001e16:	f7ff fa01 	bl	800121c <HAL_GetTick>
 8001e1a:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	f040 80d9 	bne.w	8001fdc <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2319      	movs	r3, #25
 8001e30:	2201      	movs	r2, #1
 8001e32:	496d      	ldr	r1, [pc, #436]	; (8001fe8 <HAL_I2C_Mem_Write+0x1ec>)
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fc7f 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_Mem_Write+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
 8001e42:	e0cc      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Mem_Write+0x56>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0c5      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d007      	beq.n	8001e78 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2221      	movs	r2, #33	; 0x21
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a4d      	ldr	r2, [pc, #308]	; (8001fec <HAL_I2C_Mem_Write+0x1f0>)
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 8001eba:	88f8      	ldrh	r0, [r7, #6]
 8001ebc:	893a      	ldrh	r2, [r7, #8]
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fab6 	bl	800243c <I2C_RequestMemoryWrite>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d052      	beq.n	8001f7c <HAL_I2C_Mem_Write+0x180>
            HAL_OK) {
            return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e081      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fd00 	bl	80028e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00d      	beq.n	8001f06 <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d107      	bne.n	8001f02 <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f00:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e06b      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24

            /* Update counter */
            hi2c->XferSize--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
            hi2c->XferCount--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	855a      	strh	r2, [r3, #42]	; 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d11b      	bne.n	8001f7c <HAL_I2C_Mem_Write+0x180>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d017      	beq.n	8001f7c <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1aa      	bne.n	8001eda <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fcec 	bl	8002966 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00d      	beq.n	8001fb0 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d107      	bne.n	8001fac <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001faa:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e016      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
    }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	00100002 	.word	0x00100002
 8001fec:	ffff0000 	.word	0xffff0000

08001ff0 <HAL_I2C_Mem_Read>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                   uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                   uint16_t Size, uint32_t Timeout) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	817b      	strh	r3, [r7, #10]
 8002002:	460b      	mov	r3, r1
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 800200a:	f7ff f907 	bl	800121c <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b20      	cmp	r3, #32
 800201a:	f040 8208 	bne.w	800242e <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2319      	movs	r3, #25
 8002024:	2201      	movs	r2, #1
 8002026:	497b      	ldr	r1, [pc, #492]	; (8002214 <HAL_I2C_Mem_Read+0x224>)
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fb85 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Mem_Read+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
 8002036:	e1fb      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_I2C_Mem_Read+0x56>
 8002042:	2302      	movs	r3, #2
 8002044:	e1f4      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d007      	beq.n	800206c <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2222      	movs	r2, #34	; 0x22
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2240      	movs	r2, #64	; 0x40
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002096:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800209c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a5b      	ldr	r2, [pc, #364]	; (8002218 <HAL_I2C_Mem_Read+0x228>)
 80020ac:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 80020ae:	88f8      	ldrh	r0, [r7, #6]
 80020b0:	893a      	ldrh	r2, [r7, #8]
 80020b2:	8979      	ldrh	r1, [r7, #10]
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4603      	mov	r3, r0
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fa52 	bl	8002568 <I2C_RequestMemoryRead>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Mem_Read+0xde>
            HAL_OK) {
            return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1b0      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d113      	bne.n	80020fe <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	623b      	str	r3, [r7, #32]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e184      	b.n	8002408 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002102:	2b01      	cmp	r3, #1
 8002104:	d11b      	bne.n	800213e <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002114:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e164      	b.n	8002408 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	2b02      	cmp	r3, #2
 8002144:	d11b      	bne.n	800217e <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002154:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002164:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	e144      	b.n	8002408 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8002194:	e138      	b.n	8002408 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	2b03      	cmp	r3, #3
 800219c:	f200 80f1 	bhi.w	8002382 <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d123      	bne.n	80021f0 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fc1b 	bl	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e139      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021ee:	e10b      	b.n	8002408 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d14e      	bne.n	8002296 <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	2200      	movs	r2, #0
 8002200:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_I2C_Mem_Read+0x22c>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fa98 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_I2C_Mem_Read+0x230>
                        HAL_OK) {
                        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e10e      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
 8002212:	bf00      	nop
 8002214:	00100002 	.word	0x00100002
 8002218:	ffff0000 	.word	0xffff0000
 800221c:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002294:	e0b8      	b.n	8002408 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229c:	2200      	movs	r2, #0
 800229e:	4966      	ldr	r1, [pc, #408]	; (8002438 <HAL_I2C_Mem_Read+0x448>)
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fa49 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_I2C_Mem_Read+0x2c0>
                        HAL_OK) {
                        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0bf      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022be:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f8:	2200      	movs	r2, #0
 80022fa:	494f      	ldr	r1, [pc, #316]	; (8002438 <HAL_I2C_Mem_Read+0x448>)
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fa1b 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Mem_Read+0x31c>
                        HAL_OK) {
                        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e091      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002380:	e042      	b.n	8002408 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fb2e 	bl	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e04c      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d118      	bne.n	8002408 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	f47f aec2 	bne.w	8002196 <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
    }
}
 8002430:	4618      	mov	r0, r3
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	00010004 	.word	0x00010004

0800243c <I2C_RequestMemoryWrite>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize,
                                                uint32_t Timeout, uint32_t Tickstart) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002464:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	2200      	movs	r2, #0
 800246e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f960 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00d      	beq.n	800249a <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248c:	d103      	bne.n	8002496 <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002494:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e05f      	b.n	800255a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800249a:	897b      	ldrh	r3, [r7, #10]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024a8:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	6a3a      	ldr	r2, [r7, #32]
 80024ae:	492d      	ldr	r1, [pc, #180]	; (8002564 <I2C_RequestMemoryWrite+0x128>)
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f998 	bl	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <I2C_RequestMemoryWrite+0x84>
        HAL_OK) {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e04c      	b.n	800255a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80024d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d8:	6a39      	ldr	r1, [r7, #32]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa02 	bl	80028e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d107      	bne.n	80024fe <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e02b      	b.n	800255a <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002508:	893b      	ldrh	r3, [r7, #8]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	e021      	b.n	8002558 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002514:	893b      	ldrh	r3, [r7, #8]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	b29b      	uxth	r3, r3
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	6a39      	ldr	r1, [r7, #32]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f9dc 	bl	80028e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b04      	cmp	r3, #4
 8002538:	d107      	bne.n	800254a <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002548:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e005      	b.n	800255a <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800254e:	893b      	ldrh	r3, [r7, #8]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	00010002 	.word	0x00010002

08002568 <I2C_RequestMemoryRead>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize,
                                               uint32_t Timeout, uint32_t Tickstart) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	4608      	mov	r0, r1
 8002572:	4611      	mov	r1, r2
 8002574:	461a      	mov	r2, r3
 8002576:	4603      	mov	r3, r0
 8002578:	817b      	strh	r3, [r7, #10]
 800257a:	460b      	mov	r3, r1
 800257c:	813b      	strh	r3, [r7, #8]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002590:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a0:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f8c2 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c8:	d103      	bne.n	80025d2 <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0aa      	b.n	800272c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025e4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	6a3a      	ldr	r2, [r7, #32]
 80025ea:	4952      	ldr	r1, [pc, #328]	; (8002734 <I2C_RequestMemoryRead+0x1cc>)
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f8fa 	bl	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <I2C_RequestMemoryRead+0x94>
        HAL_OK) {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e097      	b.n	800272c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8002612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f964 	bl	80028e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	2b04      	cmp	r3, #4
 8002628:	d107      	bne.n	800263a <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e076      	b.n	800272c <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002644:	893b      	ldrh	r3, [r7, #8]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	e021      	b.n	8002694 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002650:	893b      	ldrh	r3, [r7, #8]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	b29b      	uxth	r3, r3
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	6a39      	ldr	r1, [r7, #32]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f93e 	bl	80028e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b04      	cmp	r3, #4
 8002674:	d107      	bne.n	8002686 <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e050      	b.n	800272c <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800268a:	893b      	ldrh	r3, [r7, #8]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	6a39      	ldr	r1, [r7, #32]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f923 	bl	80028e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d107      	bne.n	80026bc <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e035      	b.n	800272c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f82b 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f6:	d103      	bne.n	8002700 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e013      	b.n	800272c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002704:	897b      	ldrh	r3, [r7, #10]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	6a3a      	ldr	r2, [r7, #32]
 8002718:	4906      	ldr	r1, [pc, #24]	; (8002734 <I2C_RequestMemoryRead+0x1cc>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f863 	bl	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_RequestMemoryRead+0x1c2>
        HAL_OK) {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	00010002 	.word	0x00010002

08002738 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag,
                                                    FlagStatus Status, uint32_t Timeout,
                                                    uint32_t Tickstart) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8002748:	e025      	b.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002750:	d021      	beq.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002752:	f7fe fd63 	bl	800121c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d116      	bne.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f043 0220 	orr.w	r2, r3, #32
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e023      	b.n	80027de <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d10d      	bne.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	e00c      	b.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d0b6      	beq.n	800274a <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c,
                                                                 uint32_t Flag, uint32_t Timeout,
                                                                 uint32_t Tickstart) {
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80027f4:	e051      	b.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002804:	d123      	bne.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002814:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800281e:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0204 	orr.w	r2, r3, #4
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e046      	b.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002854:	d021      	beq.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002856:	f7fe fce1 	bl	800121c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d116      	bne.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e020      	b.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d10c      	bne.n	80028be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4013      	ands	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	e00b      	b.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	43da      	mvns	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4013      	ands	r3, r2
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d18d      	bne.n	80027f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80028f0:	e02d      	b.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f8ce 	bl	8002a94 <I2C_IsAcknowledgeFailed>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e02d      	b.n	800295e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002908:	d021      	beq.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800290a:	f7fe fc87 	bl	800121c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e007      	b.n	800295e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d1ca      	bne.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <I2C_WaitOnBTFFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8002972:	e02d      	b.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f88d 	bl	8002a94 <I2C_IsAcknowledgeFailed>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e02d      	b.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298a:	d021      	beq.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800298c:	f7fe fc46 	bl	800121c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e007      	b.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d1ca      	bne.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80029f4:	e042      	b.n	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d119      	bne.n	8002a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e029      	b.n	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002a38:	f7fe fbf0 	bl	800121c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e007      	b.n	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d1b5      	bne.n	80029f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d11b      	bne.n	8002ae4 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ab4:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0204 	orr.w	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af4:	b08f      	sub	sp, #60	; 0x3c
 8002af6:	af0a      	add	r7, sp, #40	; 0x28
 8002af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e10f      	b.n	8002d24 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f006 fa16 	bl	8008f50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2203      	movs	r2, #3
 8002b28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 fcfd 	bl	8005542 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	687e      	ldr	r6, [r7, #4]
 8002b50:	466d      	mov	r5, sp
 8002b52:	f106 0410 	add.w	r4, r6, #16
 8002b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b66:	1d33      	adds	r3, r6, #4
 8002b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f002 fbd4 	bl	8005318 <USB_CoreInit>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0d0      	b.n	8002d24 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f002 fceb 	bl	8005564 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
 8002b92:	e04a      	b.n	8002c2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	333d      	adds	r3, #61	; 0x3d
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	333c      	adds	r3, #60	; 0x3c
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	b298      	uxth	r0, r3
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3344      	adds	r3, #68	; 0x44
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3340      	adds	r3, #64	; 0x40
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3348      	adds	r3, #72	; 0x48
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334c      	adds	r3, #76	; 0x4c
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3354      	adds	r3, #84	; 0x54
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	3301      	adds	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d3af      	bcc.n	8002b94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e044      	b.n	8002cc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d3b5      	bcc.n	8002c3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	687e      	ldr	r6, [r7, #4]
 8002cd6:	466d      	mov	r5, sp
 8002cd8:	f106 0410 	add.w	r4, r6, #16
 8002cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cec:	1d33      	adds	r3, r6, #4
 8002cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf0:	6838      	ldr	r0, [r7, #0]
 8002cf2:	f002 fc83 	bl	80055fc <USB_DevInit>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e00d      	b.n	8002d24 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 fdd2 	bl	80068c6 <USB_DevDisconnect>

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_PCD_Start+0x1c>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e020      	b.n	8002d8a <HAL_PCD_Start+0x5e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d109      	bne.n	8002d6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d005      	beq.n	8002d6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 fbd5 	bl	8005520 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fd82 	bl	8006884 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d92:	b590      	push	{r4, r7, lr}
 8002d94:	b08d      	sub	sp, #52	; 0x34
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fe40 	bl	8006a2e <USB_GetMode>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 848a 	bne.w	80036ca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fda4 	bl	8006908 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8480 	beq.w	80036c8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fd91 	bl	8006908 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f002 0202 	and.w	r2, r2, #2
 8002dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fd7f 	bl	8006908 <USB_ReadInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d161      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0210 	bic.w	r2, r2, #16
 8002e22:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	0c5b      	lsrs	r3, r3, #17
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d124      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d035      	beq.n	8002ec8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6a38      	ldr	r0, [r7, #32]
 8002e70:	f003 fbb6 	bl	80065e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e80:	441a      	add	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e92:	441a      	add	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	621a      	str	r2, [r3, #32]
 8002e98:	e016      	b.n	8002ec8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	0c5b      	lsrs	r3, r3, #17
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d110      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eac:	2208      	movs	r2, #8
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6a38      	ldr	r0, [r7, #32]
 8002eb2:	f003 fb95 	bl	80065e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec2:	441a      	add	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0210 	orr.w	r2, r2, #16
 8002ed6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fd13 	bl	8006908 <USB_ReadInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002eec:	f040 80a7 	bne.w	800303e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fd18 	bl	800692e <USB_ReadDevAllOutEpInterrupt>
 8002efe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f00:	e099      	b.n	8003036 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 808e 	beq.w	800302a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 fd3c 	bl	8006996 <USB_ReadDevOutEPInterrupt>
 8002f1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00c      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f36:	461a      	mov	r2, r3
 8002f38:	2301      	movs	r3, #1
 8002f3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fec2 	bl	8003cc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 ff98 	bl	8003e98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2310      	movs	r3, #16
 8002f82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d030      	beq.n	8002ff0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b80      	cmp	r3, #128	; 0x80
 8002f98:	d109      	bne.n	8002fae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	78db      	ldrb	r3, [r3, #3]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f006 f8b5 	bl	8009148 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fea:	461a      	mov	r2, r3
 8002fec:	2302      	movs	r3, #2
 8002fee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	461a      	mov	r2, r3
 8003008:	2320      	movs	r3, #32
 800300a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003022:	461a      	mov	r2, r3
 8003024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003028:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	3301      	adds	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f af62 	bne.w	8002f02 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fc60 	bl	8006908 <USB_ReadInterrupts>
 8003048:	4603      	mov	r3, r0
 800304a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800304e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003052:	f040 80db 	bne.w	800320c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fc81 	bl	8006962 <USB_ReadDevAllInEpInterrupt>
 8003060:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003066:	e0cd      	b.n	8003204 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80c2 	beq.w	80031f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fca7 	bl	80069d2 <USB_ReadDevInEPInterrupt>
 8003084:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d057      	beq.n	8003140 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	2201      	movs	r2, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69f9      	ldr	r1, [r7, #28]
 80030ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b0:	4013      	ands	r3, r2
 80030b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c0:	461a      	mov	r2, r3
 80030c2:	2301      	movs	r3, #1
 80030c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d132      	bne.n	8003134 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	334c      	adds	r3, #76	; 0x4c
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4403      	add	r3, r0
 80030ee:	3348      	adds	r3, #72	; 0x48
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4419      	add	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4403      	add	r3, r0
 8003102:	334c      	adds	r3, #76	; 0x4c
 8003104:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d113      	bne.n	8003134 <HAL_PCD_IRQHandler+0x3a2>
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3354      	adds	r3, #84	; 0x54
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d108      	bne.n	8003134 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800312c:	461a      	mov	r2, r3
 800312e:	2101      	movs	r1, #1
 8003130:	f003 fcae 	bl	8006a90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	b2db      	uxtb	r3, r3
 8003138:	4619      	mov	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f005 ff89 	bl	8009052 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003156:	461a      	mov	r2, r3
 8003158:	2308      	movs	r3, #8
 800315a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003172:	461a      	mov	r2, r3
 8003174:	2310      	movs	r3, #16
 8003176:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318e:	461a      	mov	r2, r3
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d023      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800319e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a0:	6a38      	ldr	r0, [r7, #32]
 80031a2:	f002 fb8f 	bl	80058c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3338      	adds	r3, #56	; 0x38
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d108      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f005 ffcc 	bl	800916c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e0:	461a      	mov	r2, r3
 80031e2:	2302      	movs	r3, #2
 80031e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fcdb 	bl	8003bae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	3301      	adds	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	f47f af2e 	bne.w	8003068 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fb79 	bl	8006908 <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800321c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003220:	d122      	bne.n	8003268 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800323c:	2b01      	cmp	r3, #1
 800323e:	d108      	bne.n	8003252 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003248:	2100      	movs	r1, #0
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fec2 	bl	8003fd4 <HAL_PCDEx_LPM_Callback>
 8003250:	e002      	b.n	8003258 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f005 ff6a 	bl	800912c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 fb4b 	bl	8006908 <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327c:	d112      	bne.n	80032a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d102      	bne.n	8003294 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f005 ff26 	bl	80090e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f003 fb2d 	bl	8006908 <USB_ReadInterrupts>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b8:	f040 80b7 	bne.w	800342a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2110      	movs	r1, #16
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 faf4 	bl	80058c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e0:	e046      	b.n	8003370 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ee:	461a      	mov	r2, r3
 80032f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003306:	0151      	lsls	r1, r2, #5
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	440a      	add	r2, r1
 800330c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003310:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003314:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003322:	461a      	mov	r2, r3
 8003324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003328:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333a:	0151      	lsls	r1, r2, #5
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	440a      	add	r2, r1
 8003340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003344:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003348:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	440a      	add	r2, r1
 8003360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003368:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	3301      	adds	r3, #1
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003376:	429a      	cmp	r2, r3
 8003378:	d3b3      	bcc.n	80032e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003388:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800338c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033a6:	f043 030b 	orr.w	r3, r3, #11
 80033aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033bc:	f043 030b 	orr.w	r3, r3, #11
 80033c0:	6453      	str	r3, [r2, #68]	; 0x44
 80033c2:	e015      	b.n	80033f0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ea:	f043 030b 	orr.w	r3, r3, #11
 80033ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003402:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003414:	461a      	mov	r2, r3
 8003416:	f003 fb3b 	bl	8006a90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f003 fa6a 	bl	8006908 <USB_ReadInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800343a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343e:	d124      	bne.n	800348a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f003 fb00 	bl	8006a4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f002 fab5 	bl	80059be <USB_GetDevSpeed>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681c      	ldr	r4, [r3, #0]
 8003460:	f001 f9e8 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 8003464:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4620      	mov	r0, r4
 8003470:	f001 ffb4 	bl	80053dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f005 fe14 	bl	80090a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003488:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f003 fa3a 	bl	8006908 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b08      	cmp	r3, #8
 800349c:	d10a      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f005 fdf1 	bl	8009086 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f002 0208 	and.w	r2, r2, #8
 80034b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 fa25 	bl	8006908 <USB_ReadInterrupts>
 80034be:	4603      	mov	r3, r0
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d122      	bne.n	800350e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034d4:	2301      	movs	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	e014      	b.n	8003504 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fb27 	bl	8003b4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	3301      	adds	r3, #1
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350a:	429a      	cmp	r2, r3
 800350c:	d3e5      	bcc.n	80034da <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f003 f9f8 	bl	8006908 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003522:	d13b      	bne.n	800359c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003524:	2301      	movs	r3, #1
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	e02b      	b.n	8003582 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3340      	adds	r3, #64	; 0x40
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d115      	bne.n	800357c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003550:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003552:	2b00      	cmp	r3, #0
 8003554:	da12      	bge.n	800357c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	333f      	adds	r3, #63	; 0x3f
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003572:	b2db      	uxtb	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fae8 	bl	8003b4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	3301      	adds	r3, #1
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	429a      	cmp	r2, r3
 800358a:	d3ce      	bcc.n	800352a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800359a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 f9b1 	bl	8006908 <USB_ReadInterrupts>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b0:	d155      	bne.n	800365e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b2:	2301      	movs	r3, #1
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
 80035b6:	e045      	b.n	8003644 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d12e      	bne.n	800363e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	da2b      	bge.n	800363e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80035f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d121      	bne.n	800363e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800363a:	6053      	str	r3, [r2, #4]
            break;
 800363c:	e007      	b.n	800364e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	3301      	adds	r3, #1
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364a:	429a      	cmp	r2, r3
 800364c:	d3b4      	bcc.n	80035b8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800365c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f003 f950 	bl	8006908 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d10a      	bne.n	800368a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f005 fd8b 	bl	8009190 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f003 f93a 	bl	8006908 <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d115      	bne.n	80036ca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f005 fd7b 	bl	80091ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	e000      	b.n	80036ca <HAL_PCD_IRQHandler+0x938>
      return;
 80036c8:	bf00      	nop
    }
  }
}
 80036ca:	3734      	adds	r7, #52	; 0x34
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}

080036d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_PCD_SetAddress+0x1a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e013      	b.n	8003712 <HAL_PCD_SetAddress+0x42>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f003 f898 	bl	8006838 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	4608      	mov	r0, r1
 8003724:	4611      	mov	r1, r2
 8003726:	461a      	mov	r2, r3
 8003728:	4603      	mov	r3, r0
 800372a:	70fb      	strb	r3, [r7, #3]
 800372c:	460b      	mov	r3, r1
 800372e:	803b      	strh	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800373c:	2b00      	cmp	r3, #0
 800373e:	da0f      	bge.n	8003760 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3338      	adds	r3, #56	; 0x38
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	705a      	strb	r2, [r3, #1]
 800375e:	e00f      	b.n	8003780 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	3304      	adds	r3, #4
 8003778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800378c:	883a      	ldrh	r2, [r7, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	78ba      	ldrb	r2, [r7, #2]
 8003796:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	785b      	ldrb	r3, [r3, #1]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037aa:	78bb      	ldrb	r3, [r7, #2]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d102      	bne.n	80037b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_PCD_EP_Open+0xaa>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e00e      	b.n	80037e2 <HAL_PCD_EP_Open+0xc8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68f9      	ldr	r1, [r7, #12]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 f918 	bl	8005a08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037e0:	7afb      	ldrb	r3, [r7, #11]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da0f      	bge.n	800381e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3338      	adds	r3, #56	; 0x38
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	705a      	strb	r2, [r3, #1]
 800381c:	e00f      	b.n	800383e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_PCD_EP_Close+0x6e>
 8003854:	2302      	movs	r3, #2
 8003856:	e00e      	b.n	8003876 <HAL_PCD_EP_Close+0x8c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	4618      	mov	r0, r3
 8003868:	f002 f956 	bl	8005b18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	460b      	mov	r3, r1
 800388c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388e:	7afb      	ldrb	r3, [r7, #11]
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c0:	7afb      	ldrb	r3, [r7, #11]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d102      	bne.n	80038da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	6979      	ldr	r1, [r7, #20]
 80038f2:	f002 fc35 	bl	8006160 <USB_EP0StartXfer>
 80038f6:	e008      	b.n	800390a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	6979      	ldr	r1, [r7, #20]
 8003906:	f002 f9e3 	bl	8005cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	460b      	mov	r3, r1
 8003952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003954:	7afb      	ldrb	r3, [r7, #11]
 8003956:	f003 020f 	and.w	r2, r3, #15
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	3338      	adds	r3, #56	; 0x38
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	3304      	adds	r3, #4
 800396a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2200      	movs	r2, #0
 800397c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2201      	movs	r2, #1
 8003982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	b2da      	uxtb	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d102      	bne.n	800399e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6979      	ldr	r1, [r7, #20]
 80039b6:	f002 fbd3 	bl	8006160 <USB_EP0StartXfer>
 80039ba:	e008      	b.n	80039ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	f002 f981 	bl	8005cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d901      	bls.n	80039f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e050      	b.n	8003a98 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	da0f      	bge.n	8003a1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 020f 	and.w	r2, r3, #15
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	3338      	adds	r3, #56	; 0x38
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	705a      	strb	r2, [r3, #1]
 8003a1c:	e00d      	b.n	8003a3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	3304      	adds	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_PCD_EP_SetStall+0x82>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e01e      	b.n	8003a98 <HAL_PCD_EP_SetStall+0xc0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f002 fe11 	bl	8006690 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	b2d9      	uxtb	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f003 f801 	bl	8006a90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	f003 020f 	and.w	r2, r3, #15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d901      	bls.n	8003abe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e042      	b.n	8003b44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da0f      	bge.n	8003ae6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	3338      	adds	r3, #56	; 0x38
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	705a      	strb	r2, [r3, #1]
 8003ae4:	e00f      	b.n	8003b06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 020f 	and.w	r2, r3, #15
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	3304      	adds	r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_PCD_EP_ClrStall+0x86>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e00e      	b.n	8003b44 <HAL_PCD_EP_ClrStall+0xa4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f002 fe19 	bl	800676c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	da0c      	bge.n	8003b7a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 020f 	and.w	r2, r3, #15
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	3338      	adds	r3, #56	; 0x38
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	3304      	adds	r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e00c      	b.n	8003b94 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4413      	add	r3, r2
 8003b90:	3304      	adds	r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68f9      	ldr	r1, [r7, #12]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 fc38 	bl	8006410 <USB_EPStopXfer>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08a      	sub	sp, #40	; 0x28
 8003bb2:	af02      	add	r7, sp, #8
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3338      	adds	r3, #56	; 0x38
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1a      	ldr	r2, [r3, #32]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d901      	bls.n	8003be6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06c      	b.n	8003cc0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d902      	bls.n	8003c02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3303      	adds	r3, #3
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c0a:	e02b      	b.n	8003c64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	699a      	ldr	r2, [r3, #24]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d902      	bls.n	8003c28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3303      	adds	r3, #3
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6919      	ldr	r1, [r3, #16]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4603      	mov	r3, r0
 8003c46:	6978      	ldr	r0, [r7, #20]
 8003c48:	f002 fc8c 	bl	8006564 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	441a      	add	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	441a      	add	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d809      	bhi.n	8003c8e <PCD_WriteEmptyTxFifo+0xe0>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d203      	bcs.n	8003c8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1be      	bne.n	8003c0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d811      	bhi.n	8003cbe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	6939      	ldr	r1, [r7, #16]
 8003cb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cba:	4013      	ands	r3, r2
 8003cbc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	333c      	adds	r3, #60	; 0x3c
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d17b      	bne.n	8003df6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d015      	beq.n	8003d34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4a61      	ldr	r2, [pc, #388]	; (8003e90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	f240 80b9 	bls.w	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80b3 	beq.w	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d30:	6093      	str	r3, [r2, #8]
 8003d32:	e0a7      	b.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	6093      	str	r3, [r2, #8]
 8003d50:	e098      	b.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 8093 	bne.w	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4a4b      	ldr	r2, [pc, #300]	; (8003e90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d90f      	bls.n	8003d86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	e07e      	b.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	0159      	lsls	r1, r3, #5
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	440b      	add	r3, r1
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db2:	1ad2      	subs	r2, r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d114      	bne.n	8003de8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	f002 fe5c 	bl	8006a90 <USB_EP0_OutStart>
 8003dd8:	e006      	b.n	8003de8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	441a      	add	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f005 f914 	bl	800901c <HAL_PCD_DataOutStageCallback>
 8003df4:	e046      	b.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d124      	bne.n	8003e48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	461a      	mov	r2, r3
 8003e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1a:	6093      	str	r3, [r2, #8]
 8003e1c:	e032      	b.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	2320      	movs	r3, #32
 8003e38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f005 f8eb 	bl	800901c <HAL_PCD_DataOutStageCallback>
 8003e46:	e01d      	b.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d114      	bne.n	8003e78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d108      	bne.n	8003e78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e70:	461a      	mov	r2, r3
 8003e72:	2100      	movs	r1, #0
 8003e74:	f002 fe0c 	bl	8006a90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f005 f8cc 	bl	800901c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	4f54300a 	.word	0x4f54300a
 8003e94:	4f54310a 	.word	0x4f54310a

08003e98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	333c      	adds	r3, #60	; 0x3c
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d90e      	bls.n	8003eec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f005 f883 	bl	8008ff8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d90c      	bls.n	8003f14 <PCD_EP_OutSetupPacket_int+0x7c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2101      	movs	r1, #1
 8003f10:	f002 fdbe 	bl	8006a90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	4f54300a 	.word	0x4f54300a

08003f24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	70fb      	strb	r3, [r7, #3]
 8003f30:	4613      	mov	r3, r2
 8003f32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f42:	883b      	ldrh	r3, [r7, #0]
 8003f44:	0419      	lsls	r1, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f50:	e028      	b.n	8003fa4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e00d      	b.n	8003f82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	3340      	adds	r3, #64	; 0x40
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4413      	add	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d3ec      	bcc.n	8003f66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f8c:	883b      	ldrh	r3, [r7, #0]
 8003f8e:	0418      	lsls	r0, r3, #16
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	4302      	orrs	r2, r0
 8003f9c:	3340      	adds	r3, #64	; 0x40
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e267      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d075      	beq.n	80040f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800400a:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b04      	cmp	r3, #4
 8004014:	d00c      	beq.n	8004030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004016:	4b85      	ldr	r3, [pc, #532]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800401e:	2b08      	cmp	r3, #8
 8004020:	d112      	bne.n	8004048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4b82      	ldr	r3, [pc, #520]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402e:	d10b      	bne.n	8004048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	4b7e      	ldr	r3, [pc, #504]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05b      	beq.n	80040f4 <HAL_RCC_OscConfig+0x108>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d157      	bne.n	80040f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e242      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d106      	bne.n	8004060 <HAL_RCC_OscConfig+0x74>
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a75      	ldr	r2, [pc, #468]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e01d      	b.n	800409c <HAL_RCC_OscConfig+0xb0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x98>
 800406a:	4b70      	ldr	r3, [pc, #448]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6f      	ldr	r2, [pc, #444]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6c      	ldr	r2, [pc, #432]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e00b      	b.n	800409c <HAL_RCC_OscConfig+0xb0>
 8004084:	4b69      	ldr	r3, [pc, #420]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a68      	ldr	r2, [pc, #416]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b66      	ldr	r3, [pc, #408]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a65      	ldr	r2, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fd f8ba 	bl	800121c <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fd f8b6 	bl	800121c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e207      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b5b      	ldr	r3, [pc, #364]	; (800422c <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0xc0>
 80040ca:	e014      	b.n	80040f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fd f8a6 	bl	800121c <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fd f8a2 	bl	800121c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1f3      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	4b51      	ldr	r3, [pc, #324]	; (800422c <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0xe8>
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d063      	beq.n	80041ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004102:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004116:	2b08      	cmp	r3, #8
 8004118:	d11c      	bne.n	8004154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b44      	ldr	r3, [pc, #272]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d116      	bne.n	8004154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_RCC_OscConfig+0x152>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d001      	beq.n	800413e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1c7      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413e:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4937      	ldr	r1, [pc, #220]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	e03a      	b.n	80041ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800415c:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_OscConfig+0x244>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7fd f85b 	bl	800121c <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416a:	f7fd f857 	bl	800121c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e1a8      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4925      	ldr	r1, [pc, #148]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	e015      	b.n	80041ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_RCC_OscConfig+0x244>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd f83a 	bl	800121c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ac:	f7fd f836 	bl	800121c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e187      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d036      	beq.n	8004244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_RCC_OscConfig+0x248>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd f81a 	bl	800121c <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fd f816 	bl	800121c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e167      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x200>
 800420a:	e01b      	b.n	8004244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_OscConfig+0x248>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004212:	f7fd f803 	bl	800121c <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004218:	e00e      	b.n	8004238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421a:	f7fc ffff 	bl	800121c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d907      	bls.n	8004238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e150      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
 800422c:	40023800 	.word	0x40023800
 8004230:	42470000 	.word	0x42470000
 8004234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800423a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ea      	bne.n	800421a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8097 	beq.w	8004380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004256:	4b81      	ldr	r3, [pc, #516]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	4b7d      	ldr	r3, [pc, #500]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4a7c      	ldr	r2, [pc, #496]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004270:	6413      	str	r3, [r2, #64]	; 0x40
 8004272:	4b7a      	ldr	r3, [pc, #488]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b77      	ldr	r3, [pc, #476]	; (8004460 <HAL_RCC_OscConfig+0x474>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d118      	bne.n	80042c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428e:	4b74      	ldr	r3, [pc, #464]	; (8004460 <HAL_RCC_OscConfig+0x474>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a73      	ldr	r2, [pc, #460]	; (8004460 <HAL_RCC_OscConfig+0x474>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429a:	f7fc ffbf 	bl	800121c <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a2:	f7fc ffbb 	bl	800121c <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e10c      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	4b6a      	ldr	r3, [pc, #424]	; (8004460 <HAL_RCC_OscConfig+0x474>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d106      	bne.n	80042d6 <HAL_RCC_OscConfig+0x2ea>
 80042c8:	4b64      	ldr	r3, [pc, #400]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a63      	ldr	r2, [pc, #396]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	e01c      	b.n	8004310 <HAL_RCC_OscConfig+0x324>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x30c>
 80042de:	4b5f      	ldr	r3, [pc, #380]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a5e      	ldr	r2, [pc, #376]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ea:	4b5c      	ldr	r3, [pc, #368]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a5b      	ldr	r2, [pc, #364]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0x324>
 80042f8:	4b58      	ldr	r3, [pc, #352]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	4a57      	ldr	r2, [pc, #348]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	6713      	str	r3, [r2, #112]	; 0x70
 8004304:	4b55      	ldr	r3, [pc, #340]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a54      	ldr	r2, [pc, #336]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800430a:	f023 0304 	bic.w	r3, r3, #4
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fc ff80 	bl	800121c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fc ff7c 	bl	800121c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0cb      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0ee      	beq.n	8004320 <HAL_RCC_OscConfig+0x334>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004344:	f7fc ff6a 	bl	800121c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7fc ff66 	bl	800121c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	; 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0b5      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004362:	4b3e      	ldr	r3, [pc, #248]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1ee      	bne.n	800434c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800436e:	7dfb      	ldrb	r3, [r7, #23]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b39      	ldr	r3, [pc, #228]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	4a38      	ldr	r2, [pc, #224]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800437a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a1 	beq.w	80044cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800438a:	4b34      	ldr	r3, [pc, #208]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b08      	cmp	r3, #8
 8004394:	d05c      	beq.n	8004450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d141      	bne.n	8004422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <HAL_RCC_OscConfig+0x478>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fc ff3a 	bl	800121c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fc ff36 	bl	800121c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e087      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	4b27      	ldr	r3, [pc, #156]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	019b      	lsls	r3, r3, #6
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	491b      	ldr	r1, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <HAL_RCC_OscConfig+0x478>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7fc ff0f 	bl	800121c <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004402:	f7fc ff0b 	bl	800121c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e05c      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x416>
 8004420:	e054      	b.n	80044cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_RCC_OscConfig+0x478>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fc fef8 	bl	800121c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004430:	f7fc fef4 	bl	800121c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e045      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x444>
 800444e:	e03d      	b.n	80044cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e038      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
 800445c:	40023800 	.word	0x40023800
 8004460:	40007000 	.word	0x40007000
 8004464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_RCC_OscConfig+0x4ec>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d028      	beq.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d121      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d11a      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800449e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d111      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	3b01      	subs	r3, #1
 80044b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800

080044dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0cc      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b68      	ldr	r3, [pc, #416]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d90c      	bls.n	8004518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b65      	ldr	r3, [pc, #404]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b8      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	4b59      	ldr	r3, [pc, #356]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a58      	ldr	r2, [pc, #352]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800453a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004548:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a52      	ldr	r2, [pc, #328]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b50      	ldr	r3, [pc, #320]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	494d      	ldr	r1, [pc, #308]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d044      	beq.n	80045fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d119      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	2b03      	cmp	r3, #3
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459a:	4b3f      	ldr	r3, [pc, #252]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e06f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e067      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b37      	ldr	r3, [pc, #220]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4934      	ldr	r1, [pc, #208]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045cc:	f7fc fe26 	bl	800121c <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7fc fe22 	bl	800121c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d20c      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e032      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4916      	ldr	r1, [pc, #88]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490e      	ldr	r1, [pc, #56]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004662:	f000 f821 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490a      	ldr	r1, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc fd86 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00
 8004698:	40023800 	.word	0x40023800
 800469c:	08009fa8 	.word	0x08009fa8
 80046a0:	20000000 	.word	0x20000000
 80046a4:	20000004 	.word	0x20000004

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b090      	sub	sp, #64	; 0x40
 80046ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
 80046b4:	2300      	movs	r3, #0
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b8:	2300      	movs	r3, #0
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c0:	4b59      	ldr	r3, [pc, #356]	; (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d00d      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x40>
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	f200 80a1 	bhi.w	8004814 <HAL_RCC_GetSysClockFreq+0x16c>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x34>
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046da:	e09b      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b53      	ldr	r3, [pc, #332]	; (800482c <HAL_RCC_GetSysClockFreq+0x184>)
 80046de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046e0:	e09b      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e2:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046e6:	e098      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e8:	4b4f      	ldr	r3, [pc, #316]	; (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f2:	4b4d      	ldr	r3, [pc, #308]	; (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d028      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fe:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	099b      	lsrs	r3, r3, #6
 8004704:	2200      	movs	r2, #0
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	627a      	str	r2, [r7, #36]	; 0x24
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004710:	2100      	movs	r1, #0
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_GetSysClockFreq+0x188>)
 8004714:	fb03 f201 	mul.w	r2, r3, r1
 8004718:	2300      	movs	r3, #0
 800471a:	fb00 f303 	mul.w	r3, r0, r3
 800471e:	4413      	add	r3, r2
 8004720:	4a43      	ldr	r2, [pc, #268]	; (8004830 <HAL_RCC_GetSysClockFreq+0x188>)
 8004722:	fba0 1202 	umull	r1, r2, r0, r2
 8004726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004728:	460a      	mov	r2, r1
 800472a:	62ba      	str	r2, [r7, #40]	; 0x28
 800472c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472e:	4413      	add	r3, r2
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	2200      	movs	r2, #0
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	61fa      	str	r2, [r7, #28]
 800473a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004742:	f7fb fda5 	bl	8000290 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4613      	mov	r3, r2
 800474c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800474e:	e053      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004750:	4b35      	ldr	r3, [pc, #212]	; (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	099b      	lsrs	r3, r3, #6
 8004756:	2200      	movs	r2, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	617a      	str	r2, [r7, #20]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004762:	f04f 0b00 	mov.w	fp, #0
 8004766:	4652      	mov	r2, sl
 8004768:	465b      	mov	r3, fp
 800476a:	f04f 0000 	mov.w	r0, #0
 800476e:	f04f 0100 	mov.w	r1, #0
 8004772:	0159      	lsls	r1, r3, #5
 8004774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004778:	0150      	lsls	r0, r2, #5
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	ebb2 080a 	subs.w	r8, r2, sl
 8004782:	eb63 090b 	sbc.w	r9, r3, fp
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004792:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004796:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800479a:	ebb2 0408 	subs.w	r4, r2, r8
 800479e:	eb63 0509 	sbc.w	r5, r3, r9
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	00eb      	lsls	r3, r5, #3
 80047ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b0:	00e2      	lsls	r2, r4, #3
 80047b2:	4614      	mov	r4, r2
 80047b4:	461d      	mov	r5, r3
 80047b6:	eb14 030a 	adds.w	r3, r4, sl
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	eb45 030b 	adc.w	r3, r5, fp
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ce:	4629      	mov	r1, r5
 80047d0:	028b      	lsls	r3, r1, #10
 80047d2:	4621      	mov	r1, r4
 80047d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d8:	4621      	mov	r1, r4
 80047da:	028a      	lsls	r2, r1, #10
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	2200      	movs	r2, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ec:	f7fb fd50 	bl	8000290 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4613      	mov	r3, r2
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	3301      	adds	r3, #1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004812:	e002      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCC_GetSysClockFreq+0x184>)
 8004816:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800481c:	4618      	mov	r0, r3
 800481e:	3740      	adds	r7, #64	; 0x40
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	00f42400 	.word	0x00f42400
 8004830:	017d7840 	.word	0x017d7840

08004834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <HAL_RCC_GetHCLKFreq+0x14>)
 800483a:	681b      	ldr	r3, [r3, #0]
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000000 	.word	0x20000000

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004850:	f7ff fff0 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0a9b      	lsrs	r3, r3, #10
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	; (8004870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	08009fb8 	.word	0x08009fb8

08004874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004878:	f7ff ffdc 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0b5b      	lsrs	r3, r3, #13
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	; (8004898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	08009fb8 	.word	0x08009fb8

0800489c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e03f      	b.n	800492e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc f8c2 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 faa5 	bl	8004e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	4613      	mov	r3, r2
 8004942:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b20      	cmp	r3, #32
 800494e:	d11d      	bne.n	800498c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_UART_Receive_DMA+0x26>
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e016      	b.n	800498e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_UART_Receive_DMA+0x38>
 800496a:	2302      	movs	r3, #2
 800496c:	e00f      	b.n	800498e <HAL_UART_Receive_DMA+0x58>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	461a      	mov	r2, r3
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f92a 	bl	8004bdc <UART_Start_Receive_DMA>
 8004988:	4603      	mov	r3, r0
 800498a:	e000      	b.n	800498e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b09c      	sub	sp, #112	; 0x70
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d172      	bne.n	8004aec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	2200      	movs	r2, #0
 8004a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a2e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e5      	bne.n	8004a0c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3314      	adds	r3, #20
 8004a46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	667b      	str	r3, [r7, #100]	; 0x64
 8004a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3314      	adds	r3, #20
 8004a5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a60:	647a      	str	r2, [r7, #68]	; 0x44
 8004a62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e5      	bne.n	8004a40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	623b      	str	r3, [r7, #32]
   return(result);
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3314      	adds	r3, #20
 8004a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a94:	633a      	str	r2, [r7, #48]	; 0x30
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e5      	bne.n	8004a74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d119      	bne.n	8004aec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0310 	bic.w	r3, r3, #16
 8004ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ad8:	61fa      	str	r2, [r7, #28]
 8004ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	69b9      	ldr	r1, [r7, #24]
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e5      	bne.n	8004ab8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d106      	bne.n	8004b02 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004af8:	4619      	mov	r1, r3
 8004afa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004afc:	f7ff ff69 	bl	80049d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b00:	e002      	b.n	8004b08 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b04:	f7ff ff47 	bl	8004996 <HAL_UART_RxCpltCallback>
}
 8004b08:	bf00      	nop
 8004b0a:	3770      	adds	r7, #112	; 0x70
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d108      	bne.n	8004b38 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4619      	mov	r1, r3
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff ff4e 	bl	80049d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b36:	e002      	b.n	8004b3e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff ff36 	bl	80049aa <HAL_UART_RxHalfCpltCallback>
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b21      	cmp	r3, #33	; 0x21
 8004b78:	d108      	bne.n	8004b8c <UART_DMAError+0x46>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2200      	movs	r2, #0
 8004b84:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004b86:	68b8      	ldr	r0, [r7, #8]
 8004b88:	f000 f8c6 	bl	8004d18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b22      	cmp	r3, #34	; 0x22
 8004bac:	d108      	bne.n	8004bc0 <UART_DMAError+0x7a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004bba:	68b8      	ldr	r0, [r7, #8]
 8004bbc:	f000 f8d4 	bl	8004d68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f043 0210 	orr.w	r2, r3, #16
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bcc:	68b8      	ldr	r0, [r7, #8]
 8004bce:	f7ff fef6 	bl	80049be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b098      	sub	sp, #96	; 0x60
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2222      	movs	r2, #34	; 0x22
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	4a40      	ldr	r2, [pc, #256]	; (8004d0c <UART_Start_Receive_DMA+0x130>)
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	4a3f      	ldr	r2, [pc, #252]	; (8004d10 <UART_Start_Receive_DMA+0x134>)
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	4a3e      	ldr	r2, [pc, #248]	; (8004d14 <UART_Start_Receive_DMA+0x138>)
 8004c1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	2200      	movs	r2, #0
 8004c22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004c24:	f107 0308 	add.w	r3, r7, #8
 8004c28:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	f7fc fcde 	bl	80015fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d019      	beq.n	8004c9a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c86:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e5      	bne.n	8004c66 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cba:	63ba      	str	r2, [r7, #56]	; 0x38
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cee:	627a      	str	r2, [r7, #36]	; 0x24
 8004cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6a39      	ldr	r1, [r7, #32]
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3760      	adds	r7, #96	; 0x60
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	080049eb 	.word	0x080049eb
 8004d10:	08004b11 	.word	0x08004b11
 8004d14:	08004b47 	.word	0x08004b47

08004d18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b089      	sub	sp, #36	; 0x24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	61ba      	str	r2, [r7, #24]
 8004d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6979      	ldr	r1, [r7, #20]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e5      	bne.n	8004d20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004d5c:	bf00      	nop
 8004d5e:	3724      	adds	r7, #36	; 0x24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b095      	sub	sp, #84	; 0x54
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d90:	643a      	str	r2, [r7, #64]	; 0x40
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e5      	bne.n	8004d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3314      	adds	r3, #20
 8004daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3314      	adds	r3, #20
 8004dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d119      	bne.n	8004e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0310 	bic.w	r3, r3, #16
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e00:	61ba      	str	r2, [r7, #24]
 8004e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6979      	ldr	r1, [r7, #20]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e5      	bne.n	8004de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e22:	bf00      	nop
 8004e24:	3754      	adds	r7, #84	; 0x54
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b0c0      	sub	sp, #256	; 0x100
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	68d9      	ldr	r1, [r3, #12]
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	ea40 0301 	orr.w	r3, r0, r1
 8004e58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e88:	f021 010c 	bic.w	r1, r1, #12
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e96:	430b      	orrs	r3, r1
 8004e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	6999      	ldr	r1, [r3, #24]
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	ea40 0301 	orr.w	r3, r0, r1
 8004eb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b8f      	ldr	r3, [pc, #572]	; (80050fc <UART_SetConfig+0x2cc>)
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d005      	beq.n	8004ed0 <UART_SetConfig+0xa0>
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b8d      	ldr	r3, [pc, #564]	; (8005100 <UART_SetConfig+0x2d0>)
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d104      	bne.n	8004eda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ed0:	f7ff fcd0 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 8004ed4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ed8:	e003      	b.n	8004ee2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eda:	f7ff fcb7 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8004ede:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eec:	f040 810c 	bne.w	8005108 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004efa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004efe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f02:	4622      	mov	r2, r4
 8004f04:	462b      	mov	r3, r5
 8004f06:	1891      	adds	r1, r2, r2
 8004f08:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f0a:	415b      	adcs	r3, r3
 8004f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f12:	4621      	mov	r1, r4
 8004f14:	eb12 0801 	adds.w	r8, r2, r1
 8004f18:	4629      	mov	r1, r5
 8004f1a:	eb43 0901 	adc.w	r9, r3, r1
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f32:	4690      	mov	r8, r2
 8004f34:	4699      	mov	r9, r3
 8004f36:	4623      	mov	r3, r4
 8004f38:	eb18 0303 	adds.w	r3, r8, r3
 8004f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f40:	462b      	mov	r3, r5
 8004f42:	eb49 0303 	adc.w	r3, r9, r3
 8004f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f5e:	460b      	mov	r3, r1
 8004f60:	18db      	adds	r3, r3, r3
 8004f62:	653b      	str	r3, [r7, #80]	; 0x50
 8004f64:	4613      	mov	r3, r2
 8004f66:	eb42 0303 	adc.w	r3, r2, r3
 8004f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f74:	f7fb f98c 	bl	8000290 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4b61      	ldr	r3, [pc, #388]	; (8005104 <UART_SetConfig+0x2d4>)
 8004f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	011c      	lsls	r4, r3, #4
 8004f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f98:	4642      	mov	r2, r8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	1891      	adds	r1, r2, r2
 8004f9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fa0:	415b      	adcs	r3, r3
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fa8:	4641      	mov	r1, r8
 8004faa:	eb12 0a01 	adds.w	sl, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb43 0b01 	adc.w	fp, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc8:	4692      	mov	sl, r2
 8004fca:	469b      	mov	fp, r3
 8004fcc:	4643      	mov	r3, r8
 8004fce:	eb1a 0303 	adds.w	r3, sl, r3
 8004fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004fdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ff0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	18db      	adds	r3, r3, r3
 8004ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	eb42 0303 	adc.w	r3, r2, r3
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
 8005002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005006:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800500a:	f7fb f941 	bl	8000290 <__aeabi_uldivmod>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4611      	mov	r1, r2
 8005014:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <UART_SetConfig+0x2d4>)
 8005016:	fba3 2301 	umull	r2, r3, r3, r1
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2264      	movs	r2, #100	; 0x64
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	1acb      	subs	r3, r1, r3
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800502a:	4b36      	ldr	r3, [pc, #216]	; (8005104 <UART_SetConfig+0x2d4>)
 800502c:	fba3 2302 	umull	r2, r3, r3, r2
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005038:	441c      	add	r4, r3
 800503a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005044:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005048:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800504c:	4642      	mov	r2, r8
 800504e:	464b      	mov	r3, r9
 8005050:	1891      	adds	r1, r2, r2
 8005052:	63b9      	str	r1, [r7, #56]	; 0x38
 8005054:	415b      	adcs	r3, r3
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005058:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800505c:	4641      	mov	r1, r8
 800505e:	1851      	adds	r1, r2, r1
 8005060:	6339      	str	r1, [r7, #48]	; 0x30
 8005062:	4649      	mov	r1, r9
 8005064:	414b      	adcs	r3, r1
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005074:	4659      	mov	r1, fp
 8005076:	00cb      	lsls	r3, r1, #3
 8005078:	4651      	mov	r1, sl
 800507a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507e:	4651      	mov	r1, sl
 8005080:	00ca      	lsls	r2, r1, #3
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	4603      	mov	r3, r0
 8005088:	4642      	mov	r2, r8
 800508a:	189b      	adds	r3, r3, r2
 800508c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005090:	464b      	mov	r3, r9
 8005092:	460a      	mov	r2, r1
 8005094:	eb42 0303 	adc.w	r3, r2, r3
 8005098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050b0:	460b      	mov	r3, r1
 80050b2:	18db      	adds	r3, r3, r3
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b6:	4613      	mov	r3, r2
 80050b8:	eb42 0303 	adc.w	r3, r2, r3
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050c6:	f7fb f8e3 	bl	8000290 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <UART_SetConfig+0x2d4>)
 80050d0:	fba3 1302 	umull	r1, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	2164      	movs	r1, #100	; 0x64
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	3332      	adds	r3, #50	; 0x32
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <UART_SetConfig+0x2d4>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 0207 	and.w	r2, r3, #7
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4422      	add	r2, r4
 80050f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050f8:	e106      	b.n	8005308 <UART_SetConfig+0x4d8>
 80050fa:	bf00      	nop
 80050fc:	40011000 	.word	0x40011000
 8005100:	40011400 	.word	0x40011400
 8005104:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005112:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005116:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800511a:	4642      	mov	r2, r8
 800511c:	464b      	mov	r3, r9
 800511e:	1891      	adds	r1, r2, r2
 8005120:	6239      	str	r1, [r7, #32]
 8005122:	415b      	adcs	r3, r3
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
 8005126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800512a:	4641      	mov	r1, r8
 800512c:	1854      	adds	r4, r2, r1
 800512e:	4649      	mov	r1, r9
 8005130:	eb43 0501 	adc.w	r5, r3, r1
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	00eb      	lsls	r3, r5, #3
 800513e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005142:	00e2      	lsls	r2, r4, #3
 8005144:	4614      	mov	r4, r2
 8005146:	461d      	mov	r5, r3
 8005148:	4643      	mov	r3, r8
 800514a:	18e3      	adds	r3, r4, r3
 800514c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005150:	464b      	mov	r3, r9
 8005152:	eb45 0303 	adc.w	r3, r5, r3
 8005156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005176:	4629      	mov	r1, r5
 8005178:	008b      	lsls	r3, r1, #2
 800517a:	4621      	mov	r1, r4
 800517c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005180:	4621      	mov	r1, r4
 8005182:	008a      	lsls	r2, r1, #2
 8005184:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005188:	f7fb f882 	bl	8000290 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4b60      	ldr	r3, [pc, #384]	; (8005314 <UART_SetConfig+0x4e4>)
 8005192:	fba3 2302 	umull	r2, r3, r3, r2
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	011c      	lsls	r4, r3, #4
 800519a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	1891      	adds	r1, r2, r2
 80051b2:	61b9      	str	r1, [r7, #24]
 80051b4:	415b      	adcs	r3, r3
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051bc:	4641      	mov	r1, r8
 80051be:	1851      	adds	r1, r2, r1
 80051c0:	6139      	str	r1, [r7, #16]
 80051c2:	4649      	mov	r1, r9
 80051c4:	414b      	adcs	r3, r1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051d4:	4659      	mov	r1, fp
 80051d6:	00cb      	lsls	r3, r1, #3
 80051d8:	4651      	mov	r1, sl
 80051da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051de:	4651      	mov	r1, sl
 80051e0:	00ca      	lsls	r2, r1, #3
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	4642      	mov	r2, r8
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051f0:	464b      	mov	r3, r9
 80051f2:	460a      	mov	r2, r1
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	67bb      	str	r3, [r7, #120]	; 0x78
 8005206:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005214:	4649      	mov	r1, r9
 8005216:	008b      	lsls	r3, r1, #2
 8005218:	4641      	mov	r1, r8
 800521a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800521e:	4641      	mov	r1, r8
 8005220:	008a      	lsls	r2, r1, #2
 8005222:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005226:	f7fb f833 	bl	8000290 <__aeabi_uldivmod>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4611      	mov	r1, r2
 8005230:	4b38      	ldr	r3, [pc, #224]	; (8005314 <UART_SetConfig+0x4e4>)
 8005232:	fba3 2301 	umull	r2, r3, r3, r1
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	2264      	movs	r2, #100	; 0x64
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	1acb      	subs	r3, r1, r3
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	3332      	adds	r3, #50	; 0x32
 8005244:	4a33      	ldr	r2, [pc, #204]	; (8005314 <UART_SetConfig+0x4e4>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005250:	441c      	add	r4, r3
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005256:	2200      	movs	r2, #0
 8005258:	673b      	str	r3, [r7, #112]	; 0x70
 800525a:	677a      	str	r2, [r7, #116]	; 0x74
 800525c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	1891      	adds	r1, r2, r2
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	415b      	adcs	r3, r3
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005270:	4641      	mov	r1, r8
 8005272:	1851      	adds	r1, r2, r1
 8005274:	6039      	str	r1, [r7, #0]
 8005276:	4649      	mov	r1, r9
 8005278:	414b      	adcs	r3, r1
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005288:	4659      	mov	r1, fp
 800528a:	00cb      	lsls	r3, r1, #3
 800528c:	4651      	mov	r1, sl
 800528e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005292:	4651      	mov	r1, sl
 8005294:	00ca      	lsls	r2, r1, #3
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	4603      	mov	r3, r0
 800529c:	4642      	mov	r2, r8
 800529e:	189b      	adds	r3, r3, r2
 80052a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052a2:	464b      	mov	r3, r9
 80052a4:	460a      	mov	r2, r1
 80052a6:	eb42 0303 	adc.w	r3, r2, r3
 80052aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	663b      	str	r3, [r7, #96]	; 0x60
 80052b6:	667a      	str	r2, [r7, #100]	; 0x64
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052c4:	4649      	mov	r1, r9
 80052c6:	008b      	lsls	r3, r1, #2
 80052c8:	4641      	mov	r1, r8
 80052ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ce:	4641      	mov	r1, r8
 80052d0:	008a      	lsls	r2, r1, #2
 80052d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052d6:	f7fa ffdb 	bl	8000290 <__aeabi_uldivmod>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <UART_SetConfig+0x4e4>)
 80052e0:	fba3 1302 	umull	r1, r3, r3, r2
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	2164      	movs	r1, #100	; 0x64
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	3332      	adds	r3, #50	; 0x32
 80052f2:	4a08      	ldr	r2, [pc, #32]	; (8005314 <UART_SetConfig+0x4e4>)
 80052f4:	fba2 2303 	umull	r2, r3, r2, r3
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	f003 020f 	and.w	r2, r3, #15
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4422      	add	r2, r4
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800530e:	46bd      	mov	sp, r7
 8005310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005314:	51eb851f 	.word	0x51eb851f

08005318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005318:	b084      	sub	sp, #16
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	f107 001c 	add.w	r0, r7, #28
 8005326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	2b01      	cmp	r3, #1
 800532e:	d122      	bne.n	8005376 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 fbee 	bl	8006b4c <USB_CoreReset>
 8005370:	4603      	mov	r3, r0
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e01a      	b.n	80053ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 fbe2 	bl	8006b4c <USB_CoreReset>
 8005388:	4603      	mov	r3, r0
 800538a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
 800539e:	e005      	b.n	80053ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d10b      	bne.n	80053ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f043 0206 	orr.w	r2, r3, #6
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d6:	b004      	add	sp, #16
 80053d8:	4770      	bx	lr
	...

080053dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d165      	bne.n	80054bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a41      	ldr	r2, [pc, #260]	; (80054f8 <USB_SetTurnaroundTime+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d906      	bls.n	8005406 <USB_SetTurnaroundTime+0x2a>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a40      	ldr	r2, [pc, #256]	; (80054fc <USB_SetTurnaroundTime+0x120>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d202      	bcs.n	8005406 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005400:	230f      	movs	r3, #15
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e062      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a3c      	ldr	r2, [pc, #240]	; (80054fc <USB_SetTurnaroundTime+0x120>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d306      	bcc.n	800541c <USB_SetTurnaroundTime+0x40>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a3b      	ldr	r2, [pc, #236]	; (8005500 <USB_SetTurnaroundTime+0x124>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d202      	bcs.n	800541c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005416:	230e      	movs	r3, #14
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e057      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a38      	ldr	r2, [pc, #224]	; (8005500 <USB_SetTurnaroundTime+0x124>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d306      	bcc.n	8005432 <USB_SetTurnaroundTime+0x56>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a37      	ldr	r2, [pc, #220]	; (8005504 <USB_SetTurnaroundTime+0x128>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d202      	bcs.n	8005432 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800542c:	230d      	movs	r3, #13
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e04c      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a33      	ldr	r2, [pc, #204]	; (8005504 <USB_SetTurnaroundTime+0x128>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d306      	bcc.n	8005448 <USB_SetTurnaroundTime+0x6c>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a32      	ldr	r2, [pc, #200]	; (8005508 <USB_SetTurnaroundTime+0x12c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d802      	bhi.n	8005448 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005442:	230c      	movs	r3, #12
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e041      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a2f      	ldr	r2, [pc, #188]	; (8005508 <USB_SetTurnaroundTime+0x12c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d906      	bls.n	800545e <USB_SetTurnaroundTime+0x82>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a2e      	ldr	r2, [pc, #184]	; (800550c <USB_SetTurnaroundTime+0x130>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d802      	bhi.n	800545e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005458:	230b      	movs	r3, #11
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e036      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a2a      	ldr	r2, [pc, #168]	; (800550c <USB_SetTurnaroundTime+0x130>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d906      	bls.n	8005474 <USB_SetTurnaroundTime+0x98>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a29      	ldr	r2, [pc, #164]	; (8005510 <USB_SetTurnaroundTime+0x134>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d802      	bhi.n	8005474 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800546e:	230a      	movs	r3, #10
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e02b      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a26      	ldr	r2, [pc, #152]	; (8005510 <USB_SetTurnaroundTime+0x134>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d906      	bls.n	800548a <USB_SetTurnaroundTime+0xae>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a25      	ldr	r2, [pc, #148]	; (8005514 <USB_SetTurnaroundTime+0x138>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d202      	bcs.n	800548a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005484:	2309      	movs	r3, #9
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e020      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a21      	ldr	r2, [pc, #132]	; (8005514 <USB_SetTurnaroundTime+0x138>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d306      	bcc.n	80054a0 <USB_SetTurnaroundTime+0xc4>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a20      	ldr	r2, [pc, #128]	; (8005518 <USB_SetTurnaroundTime+0x13c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d802      	bhi.n	80054a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800549a:	2308      	movs	r3, #8
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e015      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <USB_SetTurnaroundTime+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d906      	bls.n	80054b6 <USB_SetTurnaroundTime+0xda>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	; (800551c <USB_SetTurnaroundTime+0x140>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d202      	bcs.n	80054b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054b0:	2307      	movs	r3, #7
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e00a      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054b6:	2306      	movs	r3, #6
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e007      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054c2:	2309      	movs	r3, #9
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e001      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054c8:	2309      	movs	r3, #9
 80054ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	00d8acbf 	.word	0x00d8acbf
 80054fc:	00e4e1c0 	.word	0x00e4e1c0
 8005500:	00f42400 	.word	0x00f42400
 8005504:	01067380 	.word	0x01067380
 8005508:	011a499f 	.word	0x011a499f
 800550c:	01312cff 	.word	0x01312cff
 8005510:	014ca43f 	.word	0x014ca43f
 8005514:	016e3600 	.word	0x016e3600
 8005518:	01a6ab1f 	.word	0x01a6ab1f
 800551c:	01e84800 	.word	0x01e84800

08005520 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f043 0201 	orr.w	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d115      	bne.n	80055b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005592:	2001      	movs	r0, #1
 8005594:	f7fb fe4e 	bl	8001234 <HAL_Delay>
      ms++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 fa45 	bl	8006a2e <USB_GetMode>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d01e      	beq.n	80055e8 <USB_SetCurrentMode+0x84>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b31      	cmp	r3, #49	; 0x31
 80055ae:	d9f0      	bls.n	8005592 <USB_SetCurrentMode+0x2e>
 80055b0:	e01a      	b.n	80055e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d115      	bne.n	80055e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7fb fe35 	bl	8001234 <HAL_Delay>
      ms++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 fa2c 	bl	8006a2e <USB_GetMode>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <USB_SetCurrentMode+0x84>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b31      	cmp	r3, #49	; 0x31
 80055e0:	d9f0      	bls.n	80055c4 <USB_SetCurrentMode+0x60>
 80055e2:	e001      	b.n	80055e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e005      	b.n	80055f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b32      	cmp	r3, #50	; 0x32
 80055ec:	d101      	bne.n	80055f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055fc:	b084      	sub	sp, #16
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800560a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	e009      	b.n	8005630 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3340      	adds	r3, #64	; 0x40
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	2200      	movs	r2, #0
 8005628:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	3301      	adds	r3, #1
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b0e      	cmp	r3, #14
 8005634:	d9f2      	bls.n	800561c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d11c      	bne.n	8005676 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564a:	f043 0302 	orr.w	r3, r3, #2
 800564e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
 8005674:	e00b      	b.n	800568e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	4619      	mov	r1, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a8:	461a      	mov	r2, r3
 80056aa:	680b      	ldr	r3, [r1, #0]
 80056ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d10c      	bne.n	80056ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056ba:	2100      	movs	r1, #0
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f965 	bl	800598c <USB_SetDevSpeed>
 80056c2:	e008      	b.n	80056d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056c4:	2101      	movs	r1, #1
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f960 	bl	800598c <USB_SetDevSpeed>
 80056cc:	e003      	b.n	80056d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056ce:	2103      	movs	r1, #3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f95b 	bl	800598c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056d6:	2110      	movs	r1, #16
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8f3 	bl	80058c4 <USB_FlushTxFifo>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f91f 	bl	800592c <USB_FlushRxFifo>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	461a      	mov	r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e043      	b.n	80057aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005738:	d118      	bne.n	800576c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	461a      	mov	r2, r3
 800574e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e013      	b.n	800577e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	461a      	mov	r2, r3
 8005764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e008      	b.n	800577e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	461a      	mov	r2, r3
 800579e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	3301      	adds	r3, #1
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3b7      	bcc.n	8005722 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	e043      	b.n	8005840 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ce:	d118      	bne.n	8005802 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	461a      	mov	r2, r3
 80057e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e013      	b.n	8005814 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f8:	461a      	mov	r2, r3
 80057fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e008      	b.n	8005814 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	461a      	mov	r2, r3
 8005810:	2300      	movs	r3, #0
 8005812:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	2300      	movs	r3, #0
 8005824:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005832:	461a      	mov	r2, r3
 8005834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005838:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	429a      	cmp	r2, r3
 8005846:	d3b7      	bcc.n	80057b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005868:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f043 0210 	orr.w	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <USB_DevInit+0x2c4>)
 8005882:	4313      	orrs	r3, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	f043 0208 	orr.w	r2, r3, #8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800589a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d107      	bne.n	80058b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a8:	f043 0304 	orr.w	r3, r3, #4
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058bc:	b004      	add	sp, #16
 80058be:	4770      	bx	lr
 80058c0:	803c3800 	.word	0x803c3800

080058c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4a13      	ldr	r2, [pc, #76]	; (8005928 <USB_FlushTxFifo+0x64>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e01b      	b.n	800591c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	daf2      	bge.n	80058d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	019b      	lsls	r3, r3, #6
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a08      	ldr	r2, [pc, #32]	; (8005928 <USB_FlushTxFifo+0x64>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e006      	b.n	800591c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b20      	cmp	r3, #32
 8005918:	d0f0      	beq.n	80058fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	00030d40 	.word	0x00030d40

0800592c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a11      	ldr	r2, [pc, #68]	; (8005988 <USB_FlushRxFifo+0x5c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e018      	b.n	800597c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	daf2      	bge.n	8005938 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2210      	movs	r2, #16
 800595a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <USB_FlushRxFifo+0x5c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e006      	b.n	800597c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b10      	cmp	r3, #16
 8005978:	d0f0      	beq.n	800595c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	00030d40 	.word	0x00030d40

0800598c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b087      	sub	sp, #28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0306 	and.w	r3, r3, #6
 80059d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
 80059e2:	e00a      	b.n	80059fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d002      	beq.n	80059f0 <USB_GetDevSpeed+0x32>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b06      	cmp	r3, #6
 80059ee:	d102      	bne.n	80059f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059f0:	2302      	movs	r3, #2
 80059f2:	75fb      	strb	r3, [r7, #23]
 80059f4:	e001      	b.n	80059fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059f6:	230f      	movs	r3, #15
 80059f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d13a      	bne.n	8005a9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	2101      	movs	r1, #1
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d155      	bne.n	8005b08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	791b      	ldrb	r3, [r3, #4]
 8005a76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	059b      	lsls	r3, r3, #22
 8005a7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a80:	4313      	orrs	r3, r2
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	e036      	b.n	8005b08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	2101      	movs	r1, #1
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d11a      	bne.n	8005b08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aee:	430b      	orrs	r3, r1
 8005af0:	4313      	orrs	r3, r2
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d161      	bne.n	8005bf8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b4a:	d11f      	bne.n	8005b8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	68f9      	ldr	r1, [r7, #12]
 8005ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bac:	4013      	ands	r3, r2
 8005bae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	68f9      	ldr	r1, [r7, #12]
 8005bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	0159      	lsls	r1, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	440b      	add	r3, r1
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4b35      	ldr	r3, [pc, #212]	; (8005cc8 <USB_DeactivateEndpoint+0x1b0>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
 8005bf6:	e060      	b.n	8005cba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0e:	d11f      	bne.n	8005c50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	2101      	movs	r1, #1
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c70:	4013      	ands	r3, r2
 8005c72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	2101      	movs	r1, #1
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c94:	4013      	ands	r3, r2
 8005c96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	0159      	lsls	r1, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	440b      	add	r3, r1
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <USB_DeactivateEndpoint+0x1b4>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	ec337800 	.word	0xec337800
 8005ccc:	eff37800 	.word	0xeff37800

08005cd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	; 0x28
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f040 815c 	bne.w	8005faa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d132      	bne.n	8005d60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d58:	0cdb      	lsrs	r3, r3, #19
 8005d5a:	04db      	lsls	r3, r3, #19
 8005d5c:	6113      	str	r3, [r2, #16]
 8005d5e:	e074      	b.n	8005e4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7a:	0cdb      	lsrs	r3, r3, #19
 8005d7c:	04db      	lsls	r3, r3, #19
 8005d7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6999      	ldr	r1, [r3, #24]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	440b      	add	r3, r1
 8005dbc:	1e59      	subs	r1, r3, #1
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dc6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dc8:	4b9d      	ldr	r3, [pc, #628]	; (8006040 <USB_EPStartXfer+0x370>)
 8005dca:	400b      	ands	r3, r1
 8005dcc:	69b9      	ldr	r1, [r7, #24]
 8005dce:	0148      	lsls	r0, r1, #5
 8005dd0:	69f9      	ldr	r1, [r7, #28]
 8005dd2:	4401      	add	r1, r0
 8005dd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df2:	69b9      	ldr	r1, [r7, #24]
 8005df4:	0148      	lsls	r0, r1, #5
 8005df6:	69f9      	ldr	r1, [r7, #28]
 8005df8:	4401      	add	r1, r0
 8005dfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	791b      	ldrb	r3, [r3, #4]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d11f      	bne.n	8005e4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d14b      	bne.n	8005ee8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	461a      	mov	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d128      	bne.n	8005ec6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d110      	bne.n	8005ea6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	e00f      	b.n	8005ec6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e133      	b.n	8006150 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	791b      	ldrb	r3, [r3, #4]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d015      	beq.n	8005f3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 811b 	beq.w	8006150 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	69f9      	ldr	r1, [r7, #28]
 8005f32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f36:	4313      	orrs	r3, r2
 8005f38:	634b      	str	r3, [r1, #52]	; 0x34
 8005f3a:	e109      	b.n	8006150 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d110      	bne.n	8005f6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	e00f      	b.n	8005f8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6919      	ldr	r1, [r3, #16]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	b298      	uxth	r0, r3
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 fade 	bl	8006564 <USB_WritePacket>
 8005fa8:	e0d2      	b.n	8006150 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc4:	0cdb      	lsrs	r3, r3, #19
 8005fc6:	04db      	lsls	r3, r3, #19
 8005fc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d126      	bne.n	8006044 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	0148      	lsls	r0, r1, #5
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	4401      	add	r1, r0
 8006014:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006018:	4313      	orrs	r3, r2
 800601a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800603a:	6113      	str	r3, [r2, #16]
 800603c:	e03a      	b.n	80060b4 <USB_EPStartXfer+0x3e4>
 800603e:	bf00      	nop
 8006040:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4413      	add	r3, r2
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	fbb2 f3f3 	udiv	r3, r2, r3
 8006058:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	8afa      	ldrh	r2, [r7, #22]
 8006060:	fb03 f202 	mul.w	r2, r3, r2
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	8afb      	ldrh	r3, [r7, #22]
 8006078:	04d9      	lsls	r1, r3, #19
 800607a:	4b38      	ldr	r3, [pc, #224]	; (800615c <USB_EPStartXfer+0x48c>)
 800607c:	400b      	ands	r3, r1
 800607e:	69b9      	ldr	r1, [r7, #24]
 8006080:	0148      	lsls	r0, r1, #5
 8006082:	69f9      	ldr	r1, [r7, #28]
 8006084:	4401      	add	r1, r0
 8006086:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800608a:	4313      	orrs	r3, r2
 800608c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a4:	69b9      	ldr	r1, [r7, #24]
 80060a6:	0148      	lsls	r0, r1, #5
 80060a8:	69f9      	ldr	r1, [r7, #28]
 80060aa:	4401      	add	r1, r0
 80060ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060b0:	4313      	orrs	r3, r2
 80060b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d10d      	bne.n	80060d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6919      	ldr	r1, [r3, #16]
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d2:	460a      	mov	r2, r1
 80060d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	791b      	ldrb	r3, [r3, #4]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d128      	bne.n	8006130 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d110      	bne.n	8006110 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006108:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	e00f      	b.n	8006130 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	440a      	add	r2, r1
 8006126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800614e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	1ff80000 	.word	0x1ff80000

08006160 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b01      	cmp	r3, #1
 800617e:	f040 80ce 	bne.w	800631e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d132      	bne.n	80061f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	0cdb      	lsrs	r3, r3, #19
 80061ea:	04db      	lsls	r3, r3, #19
 80061ec:	6113      	str	r3, [r2, #16]
 80061ee:	e04e      	b.n	800628e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620a:	0cdb      	lsrs	r3, r3, #19
 800620c:	04db      	lsls	r3, r3, #19
 800620e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800622e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006232:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	429a      	cmp	r2, r3
 800623e:	d903      	bls.n	8006248 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	440a      	add	r2, r1
 800625e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006266:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627e:	6939      	ldr	r1, [r7, #16]
 8006280:	0148      	lsls	r0, r1, #5
 8006282:	6979      	ldr	r1, [r7, #20]
 8006284:	4401      	add	r1, r0
 8006286:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800628a:	4313      	orrs	r3, r2
 800628c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d11e      	bne.n	80062d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d009      	beq.n	80062b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	461a      	mov	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e097      	b.n	8006402 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8083 	beq.w	8006402 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	2101      	movs	r1, #1
 800630e:	fa01 f303 	lsl.w	r3, r1, r3
 8006312:	6979      	ldr	r1, [r7, #20]
 8006314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006318:	4313      	orrs	r3, r2
 800631a:	634b      	str	r3, [r1, #52]	; 0x34
 800631c:	e071      	b.n	8006402 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006338:	0cdb      	lsrs	r3, r3, #19
 800633a:	04db      	lsls	r3, r3, #19
 800633c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006358:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800635c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006360:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006398:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b0:	6939      	ldr	r1, [r7, #16]
 80063b2:	0148      	lsls	r0, r1, #5
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	4401      	add	r1, r0
 80063b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063bc:	4313      	orrs	r3, r2
 80063be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d10d      	bne.n	80063e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6919      	ldr	r1, [r3, #16]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	460a      	mov	r2, r1
 80063e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006400:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d14a      	bne.n	80064c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006446:	f040 8086 	bne.w	8006556 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	7812      	ldrb	r2, [r2, #0]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006468:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800646c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	440a      	add	r2, r1
 8006488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006490:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3301      	adds	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f242 7210 	movw	r2, #10000	; 0x2710
 800649e:	4293      	cmp	r3, r2
 80064a0:	d902      	bls.n	80064a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	75fb      	strb	r3, [r7, #23]
          break;
 80064a6:	e056      	b.n	8006556 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c0:	d0e7      	beq.n	8006492 <USB_EPStopXfer+0x82>
 80064c2:	e048      	b.n	8006556 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064dc:	d13b      	bne.n	8006556 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006500:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	440a      	add	r2, r1
 800651c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006524:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006532:	4293      	cmp	r3, r2
 8006534:	d902      	bls.n	800653c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
          break;
 800653a:	e00c      	b.n	8006556 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006554:	d0e7      	beq.n	8006526 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006564:	b480      	push	{r7}
 8006566:	b089      	sub	sp, #36	; 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	460b      	mov	r3, r1
 8006574:	71fb      	strb	r3, [r7, #7]
 8006576:	4613      	mov	r3, r2
 8006578:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d123      	bne.n	80065d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800658a:	88bb      	ldrh	r3, [r7, #4]
 800658c:	3303      	adds	r3, #3
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e018      	b.n	80065ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	031a      	lsls	r2, r3, #12
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a4:	461a      	mov	r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3301      	adds	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	3301      	adds	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	3301      	adds	r3, #1
 80065bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	3301      	adds	r3, #1
 80065c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	3301      	adds	r3, #1
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d3e2      	bcc.n	8006598 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3724      	adds	r7, #36	; 0x24
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b08b      	sub	sp, #44	; 0x2c
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	e014      	b.n	8006636 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	601a      	str	r2, [r3, #0]
    pDest++;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	3301      	adds	r3, #1
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	3301      	adds	r3, #1
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	3301      	adds	r3, #1
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	3301      	adds	r3, #1
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	3301      	adds	r3, #1
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	6a3a      	ldr	r2, [r7, #32]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	429a      	cmp	r2, r3
 800663c:	d3e6      	bcc.n	800660c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800663e:	8bfb      	ldrh	r3, [r7, #30]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01e      	beq.n	8006682 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664e:	461a      	mov	r2, r3
 8006650:	f107 0310 	add.w	r3, r7, #16
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	701a      	strb	r2, [r3, #0]
      i++;
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	3301      	adds	r3, #1
 800666e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	3301      	adds	r3, #1
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006676:	8bfb      	ldrh	r3, [r7, #30]
 8006678:	3b01      	subs	r3, #1
 800667a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800667c:	8bfb      	ldrh	r3, [r7, #30]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1ea      	bne.n	8006658 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006684:	4618      	mov	r0, r3
 8006686:	372c      	adds	r7, #44	; 0x2c
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d12c      	bne.n	8006706 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	db12      	blt.n	80066e4 <USB_EPSetStall+0x54>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00f      	beq.n	80066e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e02b      	b.n	800675e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	db12      	blt.n	800673e <USB_EPSetStall+0xae>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00f      	beq.n	800673e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800673c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800675c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d128      	bne.n	80067da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	791b      	ldrb	r3, [r3, #4]
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d003      	beq.n	80067b8 <USB_EPClearStall+0x4c>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	791b      	ldrb	r3, [r3, #4]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d138      	bne.n	800682a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	e027      	b.n	800682a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d003      	beq.n	800680a <USB_EPClearStall+0x9e>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	791b      	ldrb	r3, [r3, #4]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d10f      	bne.n	800682a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006828:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006856:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800685a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800686c:	68f9      	ldr	r1, [r7, #12]
 800686e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006872:	4313      	orrs	r3, r2
 8006874:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b2:	f023 0302 	bic.w	r3, r3, #2
 80068b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068e0:	f023 0303 	bic.w	r3, r3, #3
 80068e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f4:	f043 0302 	orr.w	r3, r3, #2
 80068f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4013      	ands	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	4013      	ands	r3, r2
 8006950:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	0c1b      	lsrs	r3, r3, #16
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	b29b      	uxth	r3, r3
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	4013      	ands	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069c4:	68bb      	ldr	r3, [r7, #8]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b087      	sub	sp, #28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	01db      	lsls	r3, r3, #7
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a20:	68bb      	ldr	r3, [r7, #8]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a68:	f023 0307 	bic.w	r3, r3, #7
 8006a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	333c      	adds	r3, #60	; 0x3c
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	4a26      	ldr	r2, [pc, #152]	; (8006b48 <USB_EP0_OutStart+0xb8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d90a      	bls.n	8006aca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ac4:	d101      	bne.n	8006aca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e037      	b.n	8006b3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ae8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af8:	f043 0318 	orr.w	r3, r3, #24
 8006afc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d10f      	bne.n	8006b38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	4f54300a 	.word	0x4f54300a

08006b4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <USB_CoreReset+0x64>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d901      	bls.n	8006b6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e01b      	b.n	8006ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	daf2      	bge.n	8006b58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f043 0201 	orr.w	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <USB_CoreReset+0x64>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d901      	bls.n	8006b94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e006      	b.n	8006ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d0f0      	beq.n	8006b82 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	00030d40 	.word	0x00030d40

08006bb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bc4:	f002 fc8a 	bl	80094dc <USBD_static_malloc>
 8006bc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	32b0      	adds	r2, #176	; 0xb0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006be0:	2302      	movs	r3, #2
 8006be2:	e0d4      	b.n	8006d8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006be4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006be8:	2100      	movs	r1, #0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f002 fd96 	bl	800971c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32b0      	adds	r2, #176	; 0xb0
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	32b0      	adds	r2, #176	; 0xb0
 8006c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	7c1b      	ldrb	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d138      	bne.n	8006c8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c1c:	4b5e      	ldr	r3, [pc, #376]	; (8006d98 <USBD_CDC_Init+0x1e4>)
 8006c1e:	7819      	ldrb	r1, [r3, #0]
 8006c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c24:	2202      	movs	r2, #2
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f002 fb35 	bl	8009296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c2c:	4b5a      	ldr	r3, [pc, #360]	; (8006d98 <USBD_CDC_Init+0x1e4>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 020f 	and.w	r2, r3, #15
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	3324      	adds	r3, #36	; 0x24
 8006c42:	2201      	movs	r2, #1
 8006c44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c46:	4b55      	ldr	r3, [pc, #340]	; (8006d9c <USBD_CDC_Init+0x1e8>)
 8006c48:	7819      	ldrb	r1, [r3, #0]
 8006c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c4e:	2202      	movs	r2, #2
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f002 fb20 	bl	8009296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c56:	4b51      	ldr	r3, [pc, #324]	; (8006d9c <USBD_CDC_Init+0x1e8>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f003 020f 	and.w	r2, r3, #15
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c6e:	2201      	movs	r2, #1
 8006c70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c72:	4b4b      	ldr	r3, [pc, #300]	; (8006da0 <USBD_CDC_Init+0x1ec>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f003 020f 	and.w	r2, r3, #15
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	440b      	add	r3, r1
 8006c86:	3326      	adds	r3, #38	; 0x26
 8006c88:	2210      	movs	r2, #16
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	e035      	b.n	8006cfa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c8e:	4b42      	ldr	r3, [pc, #264]	; (8006d98 <USBD_CDC_Init+0x1e4>)
 8006c90:	7819      	ldrb	r1, [r3, #0]
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	2202      	movs	r2, #2
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f002 fafd 	bl	8009296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c9c:	4b3e      	ldr	r3, [pc, #248]	; (8006d98 <USBD_CDC_Init+0x1e4>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	3324      	adds	r3, #36	; 0x24
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cb6:	4b39      	ldr	r3, [pc, #228]	; (8006d9c <USBD_CDC_Init+0x1e8>)
 8006cb8:	7819      	ldrb	r1, [r3, #0]
 8006cba:	2340      	movs	r3, #64	; 0x40
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f002 fae9 	bl	8009296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006cc4:	4b35      	ldr	r3, [pc, #212]	; (8006d9c <USBD_CDC_Init+0x1e8>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f003 020f 	and.w	r2, r3, #15
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cdc:	2201      	movs	r2, #1
 8006cde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ce0:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <USBD_CDC_Init+0x1ec>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 020f 	and.w	r2, r3, #15
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	3326      	adds	r3, #38	; 0x26
 8006cf6:	2210      	movs	r2, #16
 8006cf8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cfa:	4b29      	ldr	r3, [pc, #164]	; (8006da0 <USBD_CDC_Init+0x1ec>)
 8006cfc:	7819      	ldrb	r1, [r3, #0]
 8006cfe:	2308      	movs	r3, #8
 8006d00:	2203      	movs	r2, #3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f002 fac7 	bl	8009296 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d08:	4b25      	ldr	r3, [pc, #148]	; (8006da0 <USBD_CDC_Init+0x1ec>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3324      	adds	r3, #36	; 0x24
 8006d1e:	2201      	movs	r2, #1
 8006d20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	33b0      	adds	r3, #176	; 0xb0
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e018      	b.n	8006d8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	7c1b      	ldrb	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d64:	4b0d      	ldr	r3, [pc, #52]	; (8006d9c <USBD_CDC_Init+0x1e8>)
 8006d66:	7819      	ldrb	r1, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f002 fb7e 	bl	8009474 <USBD_LL_PrepareReceive>
 8006d78:	e008      	b.n	8006d8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d7a:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <USBD_CDC_Init+0x1e8>)
 8006d7c:	7819      	ldrb	r1, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f002 fb74 	bl	8009474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000093 	.word	0x20000093
 8006d9c:	20000094 	.word	0x20000094
 8006da0:	20000095 	.word	0x20000095

08006da4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006db0:	4b3a      	ldr	r3, [pc, #232]	; (8006e9c <USBD_CDC_DeInit+0xf8>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f002 fa93 	bl	80092e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006dbc:	4b37      	ldr	r3, [pc, #220]	; (8006e9c <USBD_CDC_DeInit+0xf8>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	f003 020f 	and.w	r2, r3, #15
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	440b      	add	r3, r1
 8006dd0:	3324      	adds	r3, #36	; 0x24
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006dd6:	4b32      	ldr	r3, [pc, #200]	; (8006ea0 <USBD_CDC_DeInit+0xfc>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f002 fa80 	bl	80092e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006de2:	4b2f      	ldr	r3, [pc, #188]	; (8006ea0 <USBD_CDC_DeInit+0xfc>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 020f 	and.w	r2, r3, #15
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006dfe:	4b29      	ldr	r3, [pc, #164]	; (8006ea4 <USBD_CDC_DeInit+0x100>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f002 fa6c 	bl	80092e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e0a:	4b26      	ldr	r3, [pc, #152]	; (8006ea4 <USBD_CDC_DeInit+0x100>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	f003 020f 	and.w	r2, r3, #15
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3324      	adds	r3, #36	; 0x24
 8006e20:	2200      	movs	r2, #0
 8006e22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e24:	4b1f      	ldr	r3, [pc, #124]	; (8006ea4 <USBD_CDC_DeInit+0x100>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f003 020f 	and.w	r2, r3, #15
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	3326      	adds	r3, #38	; 0x26
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	32b0      	adds	r2, #176	; 0xb0
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01f      	beq.n	8006e90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	33b0      	adds	r3, #176	; 0xb0
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	32b0      	adds	r2, #176	; 0xb0
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f002 fb40 	bl	80094f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	32b0      	adds	r2, #176	; 0xb0
 8006e82:	2100      	movs	r1, #0
 8006e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000093 	.word	0x20000093
 8006ea0:	20000094 	.word	0x20000094
 8006ea4:	20000095 	.word	0x20000095

08006ea8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	32b0      	adds	r2, #176	; 0xb0
 8006ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e0bf      	b.n	8007058 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d050      	beq.n	8006f86 <USBD_CDC_Setup+0xde>
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	f040 80af 	bne.w	8007048 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d03a      	beq.n	8006f68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	b25b      	sxtb	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	da1b      	bge.n	8006f34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	33b0      	adds	r3, #176	; 0xb0
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	88d2      	ldrh	r2, [r2, #6]
 8006f18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	88db      	ldrh	r3, [r3, #6]
 8006f1e:	2b07      	cmp	r3, #7
 8006f20:	bf28      	it	cs
 8006f22:	2307      	movcs	r3, #7
 8006f24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	89fa      	ldrh	r2, [r7, #14]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fd89 	bl	8008a44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f32:	e090      	b.n	8007056 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	785a      	ldrb	r2, [r3, #1]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	88db      	ldrh	r3, [r3, #6]
 8006f42:	2b3f      	cmp	r3, #63	; 0x3f
 8006f44:	d803      	bhi.n	8006f4e <USBD_CDC_Setup+0xa6>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	e000      	b.n	8006f50 <USBD_CDC_Setup+0xa8>
 8006f4e:	2240      	movs	r2, #64	; 0x40
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f56:	6939      	ldr	r1, [r7, #16]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 fd9b 	bl	8008a9c <USBD_CtlPrepareRx>
      break;
 8006f66:	e076      	b.n	8007056 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	33b0      	adds	r3, #176	; 0xb0
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	7850      	ldrb	r0, [r2, #1]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	4798      	blx	r3
      break;
 8006f84:	e067      	b.n	8007056 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	785b      	ldrb	r3, [r3, #1]
 8006f8a:	2b0b      	cmp	r3, #11
 8006f8c:	d851      	bhi.n	8007032 <USBD_CDC_Setup+0x18a>
 8006f8e:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <USBD_CDC_Setup+0xec>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	08006fc5 	.word	0x08006fc5
 8006f98:	08007041 	.word	0x08007041
 8006f9c:	08007033 	.word	0x08007033
 8006fa0:	08007033 	.word	0x08007033
 8006fa4:	08007033 	.word	0x08007033
 8006fa8:	08007033 	.word	0x08007033
 8006fac:	08007033 	.word	0x08007033
 8006fb0:	08007033 	.word	0x08007033
 8006fb4:	08007033 	.word	0x08007033
 8006fb8:	08007033 	.word	0x08007033
 8006fbc:	08006fef 	.word	0x08006fef
 8006fc0:	08007019 	.word	0x08007019
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d107      	bne.n	8006fe0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fd0:	f107 030a 	add.w	r3, r7, #10
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 fd33 	bl	8008a44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fde:	e032      	b.n	8007046 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 fcbd 	bl	8008962 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	75fb      	strb	r3, [r7, #23]
          break;
 8006fec:	e02b      	b.n	8007046 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d107      	bne.n	800700a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ffa:	f107 030d 	add.w	r3, r7, #13
 8006ffe:	2201      	movs	r2, #1
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fd1e 	bl	8008a44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007008:	e01d      	b.n	8007046 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fca8 	bl	8008962 <USBD_CtlError>
            ret = USBD_FAIL;
 8007012:	2303      	movs	r3, #3
 8007014:	75fb      	strb	r3, [r7, #23]
          break;
 8007016:	e016      	b.n	8007046 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b03      	cmp	r3, #3
 8007022:	d00f      	beq.n	8007044 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fc9b 	bl	8008962 <USBD_CtlError>
            ret = USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007030:	e008      	b.n	8007044 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fc94 	bl	8008962 <USBD_CtlError>
          ret = USBD_FAIL;
 800703a:	2303      	movs	r3, #3
 800703c:	75fb      	strb	r3, [r7, #23]
          break;
 800703e:	e002      	b.n	8007046 <USBD_CDC_Setup+0x19e>
          break;
 8007040:	bf00      	nop
 8007042:	e008      	b.n	8007056 <USBD_CDC_Setup+0x1ae>
          break;
 8007044:	bf00      	nop
      }
      break;
 8007046:	e006      	b.n	8007056 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 fc89 	bl	8008962 <USBD_CtlError>
      ret = USBD_FAIL;
 8007050:	2303      	movs	r3, #3
 8007052:	75fb      	strb	r3, [r7, #23]
      break;
 8007054:	bf00      	nop
  }

  return (uint8_t)ret;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007072:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32b0      	adds	r2, #176	; 0xb0
 800707e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	e065      	b.n	8007156 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	32b0      	adds	r2, #176	; 0xb0
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	f003 020f 	and.w	r2, r3, #15
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	3318      	adds	r3, #24
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02f      	beq.n	8007114 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	f003 020f 	and.w	r2, r3, #15
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	3318      	adds	r3, #24
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	f003 010f 	and.w	r1, r3, #15
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	460b      	mov	r3, r1
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	440b      	add	r3, r1
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4403      	add	r3, r0
 80070dc:	3348      	adds	r3, #72	; 0x48
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d112      	bne.n	8007114 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	3318      	adds	r3, #24
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007106:	78f9      	ldrb	r1, [r7, #3]
 8007108:	2300      	movs	r3, #0
 800710a:	2200      	movs	r2, #0
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f002 f990 	bl	8009432 <USBD_LL_Transmit>
 8007112:	e01f      	b.n	8007154 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	33b0      	adds	r3, #176	; 0xb0
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d010      	beq.n	8007154 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	33b0      	adds	r3, #176	; 0xb0
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007150:	78fa      	ldrb	r2, [r7, #3]
 8007152:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	32b0      	adds	r2, #176	; 0xb0
 8007174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007178:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	32b0      	adds	r2, #176	; 0xb0
 8007184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800718c:	2303      	movs	r3, #3
 800718e:	e01a      	b.n	80071c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f002 f98e 	bl	80094b6 <USBD_LL_GetRxDataSize>
 800719a:	4602      	mov	r2, r0
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	33b0      	adds	r3, #176	; 0xb0
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071c0:	4611      	mov	r1, r2
 80071c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	32b0      	adds	r2, #176	; 0xb0
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e025      	b.n	800723c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	33b0      	adds	r3, #176	; 0xb0
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <USBD_CDC_EP0_RxReady+0x6c>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800720a:	2bff      	cmp	r3, #255	; 0xff
 800720c:	d015      	beq.n	800723a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	33b0      	adds	r3, #176	; 0xb0
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007226:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800722e:	b292      	uxth	r2, r2
 8007230:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800724c:	2182      	movs	r1, #130	; 0x82
 800724e:	4818      	ldr	r0, [pc, #96]	; (80072b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007250:	f000 fd4f 	bl	8007cf2 <USBD_GetEpDesc>
 8007254:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007256:	2101      	movs	r1, #1
 8007258:	4815      	ldr	r0, [pc, #84]	; (80072b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800725a:	f000 fd4a 	bl	8007cf2 <USBD_GetEpDesc>
 800725e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007260:	2181      	movs	r1, #129	; 0x81
 8007262:	4813      	ldr	r0, [pc, #76]	; (80072b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007264:	f000 fd45 	bl	8007cf2 <USBD_GetEpDesc>
 8007268:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2210      	movs	r2, #16
 8007274:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d006      	beq.n	800728a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	2200      	movs	r2, #0
 8007280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007284:	711a      	strb	r2, [r3, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d006      	beq.n	800729e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007298:	711a      	strb	r2, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2243      	movs	r2, #67	; 0x43
 80072a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072a4:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000050 	.word	0x20000050

080072b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072bc:	2182      	movs	r1, #130	; 0x82
 80072be:	4818      	ldr	r0, [pc, #96]	; (8007320 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072c0:	f000 fd17 	bl	8007cf2 <USBD_GetEpDesc>
 80072c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072c6:	2101      	movs	r1, #1
 80072c8:	4815      	ldr	r0, [pc, #84]	; (8007320 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072ca:	f000 fd12 	bl	8007cf2 <USBD_GetEpDesc>
 80072ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072d0:	2181      	movs	r1, #129	; 0x81
 80072d2:	4813      	ldr	r0, [pc, #76]	; (8007320 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072d4:	f000 fd0d 	bl	8007cf2 <USBD_GetEpDesc>
 80072d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2210      	movs	r2, #16
 80072e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d006      	beq.n	80072fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2200      	movs	r2, #0
 80072f0:	711a      	strb	r2, [r3, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f042 0202 	orr.w	r2, r2, #2
 80072f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d006      	beq.n	800730e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	711a      	strb	r2, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f042 0202 	orr.w	r2, r2, #2
 800730c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2243      	movs	r2, #67	; 0x43
 8007312:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000050 	.word	0x20000050

08007324 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800732c:	2182      	movs	r1, #130	; 0x82
 800732e:	4818      	ldr	r0, [pc, #96]	; (8007390 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007330:	f000 fcdf 	bl	8007cf2 <USBD_GetEpDesc>
 8007334:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007336:	2101      	movs	r1, #1
 8007338:	4815      	ldr	r0, [pc, #84]	; (8007390 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800733a:	f000 fcda 	bl	8007cf2 <USBD_GetEpDesc>
 800733e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007340:	2181      	movs	r1, #129	; 0x81
 8007342:	4813      	ldr	r0, [pc, #76]	; (8007390 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007344:	f000 fcd5 	bl	8007cf2 <USBD_GetEpDesc>
 8007348:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2210      	movs	r2, #16
 8007354:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d006      	beq.n	800736a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2200      	movs	r2, #0
 8007360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007364:	711a      	strb	r2, [r3, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d006      	beq.n	800737e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007378:	711a      	strb	r2, [r3, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2243      	movs	r2, #67	; 0x43
 8007382:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000050 	.word	0x20000050

08007394 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	220a      	movs	r2, #10
 80073a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073a2:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	2000000c 	.word	0x2000000c

080073b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e009      	b.n	80073dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	33b0      	adds	r3, #176	; 0xb0
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	32b0      	adds	r2, #176	; 0xb0
 80073fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007402:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800740a:	2303      	movs	r3, #3
 800740c:	e008      	b.n	8007420 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	32b0      	adds	r2, #176	; 0xb0
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	e004      	b.n	800745a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	32b0      	adds	r2, #176	; 0xb0
 800747a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007480:	2301      	movs	r3, #1
 8007482:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	32b0      	adds	r2, #176	; 0xb0
 800748e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007496:	2303      	movs	r3, #3
 8007498:	e025      	b.n	80074e6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11f      	bne.n	80074e4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <USBD_CDC_TransmitPacket+0x88>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 020f 	and.w	r2, r3, #15
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4403      	add	r3, r0
 80074c6:	3318      	adds	r3, #24
 80074c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80074ca:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <USBD_CDC_TransmitPacket+0x88>)
 80074cc:	7819      	ldrb	r1, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 ffa9 	bl	8009432 <USBD_LL_Transmit>

    ret = USBD_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000093 	.word	0x20000093

080074f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32b0      	adds	r2, #176	; 0xb0
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	32b0      	adds	r2, #176	; 0xb0
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800751e:	2303      	movs	r3, #3
 8007520:	e018      	b.n	8007554 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7c1b      	ldrb	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800752a:	4b0c      	ldr	r3, [pc, #48]	; (800755c <USBD_CDC_ReceivePacket+0x68>)
 800752c:	7819      	ldrb	r1, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 ff9b 	bl	8009474 <USBD_LL_PrepareReceive>
 800753e:	e008      	b.n	8007552 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <USBD_CDC_ReceivePacket+0x68>)
 8007542:	7819      	ldrb	r1, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800754a:	2340      	movs	r3, #64	; 0x40
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 ff91 	bl	8009474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000094 	.word	0x20000094

08007560 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	e01f      	b.n	80075b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	79fa      	ldrb	r2, [r7, #7]
 80075aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 fe0b 	bl	80091c8 <USBD_LL_Init>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e025      	b.n	8007624 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32ae      	adds	r2, #174	; 0xae
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00f      	beq.n	8007614 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32ae      	adds	r2, #174	; 0xae
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	f107 020e 	add.w	r2, r7, #14
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	4602      	mov	r2, r0
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fe13 	bl	8009260 <USBD_LL_Start>
 800763a:	4603      	mov	r3, r0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800764c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	4611      	mov	r1, r2
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007688:	7bfb      	ldrb	r3, [r7, #15]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	78fa      	ldrb	r2, [r7, #3]
 80076ac:	4611      	mov	r1, r2
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 f908 	bl	80088ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80076ec:	461a      	mov	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076fa:	f003 031f 	and.w	r3, r3, #31
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d01a      	beq.n	8007738 <USBD_LL_SetupStage+0x72>
 8007702:	2b02      	cmp	r3, #2
 8007704:	d822      	bhi.n	800774c <USBD_LL_SetupStage+0x86>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <USBD_LL_SetupStage+0x4a>
 800770a:	2b01      	cmp	r3, #1
 800770c:	d00a      	beq.n	8007724 <USBD_LL_SetupStage+0x5e>
 800770e:	e01d      	b.n	800774c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb5f 	bl	8007ddc <USBD_StdDevReq>
 800771e:	4603      	mov	r3, r0
 8007720:	73fb      	strb	r3, [r7, #15]
      break;
 8007722:	e020      	b.n	8007766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fbc7 	bl	8007ec0 <USBD_StdItfReq>
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]
      break;
 8007736:	e016      	b.n	8007766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc29 	bl	8007f98 <USBD_StdEPReq>
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]
      break;
 800774a:	e00c      	b.n	8007766 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007752:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007756:	b2db      	uxtb	r3, r3
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 fde0 	bl	8009320 <USBD_LL_StallEP>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]
      break;
 8007764:	bf00      	nop
  }

  return ret;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	460b      	mov	r3, r1
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d16e      	bne.n	8007866 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800778e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007796:	2b03      	cmp	r3, #3
 8007798:	f040 8098 	bne.w	80078cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d913      	bls.n	80077d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	4293      	cmp	r3, r2
 80077c0:	bf28      	it	cs
 80077c2:	4613      	movcs	r3, r2
 80077c4:	461a      	mov	r2, r3
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f001 f984 	bl	8008ad6 <USBD_CtlContinueRx>
 80077ce:	e07d      	b.n	80078cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d014      	beq.n	8007808 <USBD_LL_DataOutStage+0x98>
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d81d      	bhi.n	800781e <USBD_LL_DataOutStage+0xae>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <USBD_LL_DataOutStage+0x7c>
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d003      	beq.n	80077f2 <USBD_LL_DataOutStage+0x82>
 80077ea:	e018      	b.n	800781e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	75bb      	strb	r3, [r7, #22]
            break;
 80077f0:	e018      	b.n	8007824 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	4619      	mov	r1, r3
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fa5e 	bl	8007cbe <USBD_CoreFindIF>
 8007802:	4603      	mov	r3, r0
 8007804:	75bb      	strb	r3, [r7, #22]
            break;
 8007806:	e00d      	b.n	8007824 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800780e:	b2db      	uxtb	r3, r3
 8007810:	4619      	mov	r1, r3
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fa60 	bl	8007cd8 <USBD_CoreFindEP>
 8007818:	4603      	mov	r3, r0
 800781a:	75bb      	strb	r3, [r7, #22]
            break;
 800781c:	e002      	b.n	8007824 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	75bb      	strb	r3, [r7, #22]
            break;
 8007822:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007824:	7dbb      	ldrb	r3, [r7, #22]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d119      	bne.n	800785e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b03      	cmp	r3, #3
 8007834:	d113      	bne.n	800785e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007836:	7dba      	ldrb	r2, [r7, #22]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	32ae      	adds	r2, #174	; 0xae
 800783c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007846:	7dba      	ldrb	r2, [r7, #22]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800784e:	7dba      	ldrb	r2, [r7, #22]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	32ae      	adds	r2, #174	; 0xae
 8007854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f001 f94a 	bl	8008af8 <USBD_CtlSendStatus>
 8007864:	e032      	b.n	80078cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786c:	b2db      	uxtb	r3, r3
 800786e:	4619      	mov	r1, r3
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fa31 	bl	8007cd8 <USBD_CoreFindEP>
 8007876:	4603      	mov	r3, r0
 8007878:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800787a:	7dbb      	ldrb	r3, [r7, #22]
 800787c:	2bff      	cmp	r3, #255	; 0xff
 800787e:	d025      	beq.n	80078cc <USBD_LL_DataOutStage+0x15c>
 8007880:	7dbb      	ldrb	r3, [r7, #22]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d122      	bne.n	80078cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b03      	cmp	r3, #3
 8007890:	d117      	bne.n	80078c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007892:	7dba      	ldrb	r2, [r7, #22]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	32ae      	adds	r2, #174	; 0xae
 8007898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00f      	beq.n	80078c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078a2:	7dba      	ldrb	r2, [r7, #22]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80078aa:	7dba      	ldrb	r2, [r7, #22]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	32ae      	adds	r2, #174	; 0xae
 80078b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	7afa      	ldrb	r2, [r7, #11]
 80078b8:	4611      	mov	r1, r2
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	4798      	blx	r3
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	e000      	b.n	80078ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b086      	sub	sp, #24
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	460b      	mov	r3, r1
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80078e4:	7afb      	ldrb	r3, [r7, #11]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d16f      	bne.n	80079ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3314      	adds	r3, #20
 80078ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d15a      	bne.n	80079b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	429a      	cmp	r2, r3
 8007904:	d914      	bls.n	8007930 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	461a      	mov	r2, r3
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f001 f8ac 	bl	8008a7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007922:	2300      	movs	r3, #0
 8007924:	2200      	movs	r2, #0
 8007926:	2100      	movs	r1, #0
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f001 fda3 	bl	8009474 <USBD_LL_PrepareReceive>
 800792e:	e03f      	b.n	80079b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	429a      	cmp	r2, r3
 800793a:	d11c      	bne.n	8007976 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007944:	429a      	cmp	r2, r3
 8007946:	d316      	bcc.n	8007976 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007952:	429a      	cmp	r2, r3
 8007954:	d20f      	bcs.n	8007976 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007956:	2200      	movs	r2, #0
 8007958:	2100      	movs	r1, #0
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f001 f88d 	bl	8008a7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007968:	2300      	movs	r3, #0
 800796a:	2200      	movs	r2, #0
 800796c:	2100      	movs	r1, #0
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f001 fd80 	bl	8009474 <USBD_LL_PrepareReceive>
 8007974:	e01c      	b.n	80079b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b03      	cmp	r3, #3
 8007980:	d10f      	bne.n	80079a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f001 fcbb 	bl	8009320 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f001 f8b7 	bl	8008b1e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d03a      	beq.n	8007a30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff fe42 	bl	8007644 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079c8:	e032      	b.n	8007a30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079ca:	7afb      	ldrb	r3, [r7, #11]
 80079cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	4619      	mov	r1, r3
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f97f 	bl	8007cd8 <USBD_CoreFindEP>
 80079da:	4603      	mov	r3, r0
 80079dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	2bff      	cmp	r3, #255	; 0xff
 80079e2:	d025      	beq.n	8007a30 <USBD_LL_DataInStage+0x15a>
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d122      	bne.n	8007a30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d11c      	bne.n	8007a30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80079f6:	7dfa      	ldrb	r2, [r7, #23]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	32ae      	adds	r2, #174	; 0xae
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d014      	beq.n	8007a30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a06:	7dfa      	ldrb	r2, [r7, #23]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a0e:	7dfa      	ldrb	r2, [r7, #23]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	32ae      	adds	r2, #174	; 0xae
 8007a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	7afa      	ldrb	r2, [r7, #11]
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	4798      	blx	r3
 8007a22:	4603      	mov	r3, r0
 8007a24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a26:	7dbb      	ldrb	r3, [r7, #22]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a2c:	7dbb      	ldrb	r3, [r7, #22]
 8007a2e:	e000      	b.n	8007a32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d014      	beq.n	8007aa0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00e      	beq.n	8007aa0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6852      	ldr	r2, [r2, #4]
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	4611      	mov	r1, r2
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa0:	2340      	movs	r3, #64	; 0x40
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fbf5 	bl	8009296 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2240      	movs	r2, #64	; 0x40
 8007ab8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2180      	movs	r1, #128	; 0x80
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fbe7 	bl	8009296 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2240      	movs	r2, #64	; 0x40
 8007ad2:	621a      	str	r2, [r3, #32]

  return ret;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2204      	movs	r2, #4
 8007b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d106      	bne.n	8007b4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d110      	bne.n	8007b90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	32ae      	adds	r2, #174	; 0xae
 8007bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e01c      	b.n	8007bf6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d115      	bne.n	8007bf4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	32ae      	adds	r2, #174	; 0xae
 8007bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	32ae      	adds	r2, #174	; 0xae
 8007be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	78fa      	ldrb	r2, [r7, #3]
 8007bee:	4611      	mov	r1, r2
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	32ae      	adds	r2, #174	; 0xae
 8007c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e01c      	b.n	8007c5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d115      	bne.n	8007c58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32ae      	adds	r2, #174	; 0xae
 8007c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32ae      	adds	r2, #174	; 0xae
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	78fa      	ldrb	r2, [r7, #3]
 8007c52:	4611      	mov	r1, r2
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00e      	beq.n	8007cb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6852      	ldr	r2, [r2, #4]
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ce4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	885b      	ldrh	r3, [r3, #2]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d920      	bls.n	8007d5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d22:	e013      	b.n	8007d4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d24:	f107 030a 	add.w	r3, r7, #10
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6978      	ldr	r0, [r7, #20]
 8007d2c:	f000 f81b 	bl	8007d66 <USBD_GetNextDesc>
 8007d30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	785b      	ldrb	r3, [r3, #1]
 8007d36:	2b05      	cmp	r3, #5
 8007d38:	d108      	bne.n	8007d4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	789b      	ldrb	r3, [r3, #2]
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d008      	beq.n	8007d5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	885b      	ldrh	r3, [r3, #2]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	897b      	ldrh	r3, [r7, #10]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d8e5      	bhi.n	8007d24 <USBD_GetEpDesc+0x32>
 8007d58:	e000      	b.n	8007d5c <USBD_GetEpDesc+0x6a>
          break;
 8007d5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d5c:	693b      	ldr	r3, [r7, #16]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	881a      	ldrh	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	4413      	add	r3, r2
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4413      	add	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d92:	68fb      	ldr	r3, [r7, #12]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	3301      	adds	r3, #1
 8007db6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dbe:	8a3b      	ldrh	r3, [r7, #16]
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	b21a      	sxth	r2, r3
 8007dc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	b21b      	sxth	r3, r3
 8007dcc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dce:	89fb      	ldrh	r3, [r7, #14]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d005      	beq.n	8007e02 <USBD_StdDevReq+0x26>
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d857      	bhi.n	8007eaa <USBD_StdDevReq+0xce>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00f      	beq.n	8007e1e <USBD_StdDevReq+0x42>
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d153      	bne.n	8007eaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	32ae      	adds	r2, #174	; 0xae
 8007e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e1c:	e04a      	b.n	8007eb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	785b      	ldrb	r3, [r3, #1]
 8007e22:	2b09      	cmp	r3, #9
 8007e24:	d83b      	bhi.n	8007e9e <USBD_StdDevReq+0xc2>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <USBD_StdDevReq+0x50>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e81 	.word	0x08007e81
 8007e30:	08007e95 	.word	0x08007e95
 8007e34:	08007e9f 	.word	0x08007e9f
 8007e38:	08007e8b 	.word	0x08007e8b
 8007e3c:	08007e9f 	.word	0x08007e9f
 8007e40:	08007e5f 	.word	0x08007e5f
 8007e44:	08007e55 	.word	0x08007e55
 8007e48:	08007e9f 	.word	0x08007e9f
 8007e4c:	08007e77 	.word	0x08007e77
 8007e50:	08007e69 	.word	0x08007e69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa3c 	bl	80082d4 <USBD_GetDescriptor>
          break;
 8007e5c:	e024      	b.n	8007ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fba1 	bl	80085a8 <USBD_SetAddress>
          break;
 8007e66:	e01f      	b.n	8007ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fbe0 	bl	8008630 <USBD_SetConfig>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]
          break;
 8007e74:	e018      	b.n	8007ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fc83 	bl	8008784 <USBD_GetConfig>
          break;
 8007e7e:	e013      	b.n	8007ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fcb4 	bl	80087f0 <USBD_GetStatus>
          break;
 8007e88:	e00e      	b.n	8007ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fce3 	bl	8008858 <USBD_SetFeature>
          break;
 8007e92:	e009      	b.n	8007ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fd07 	bl	80088aa <USBD_ClrFeature>
          break;
 8007e9c:	e004      	b.n	8007ea8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fd5e 	bl	8008962 <USBD_CtlError>
          break;
 8007ea6:	bf00      	nop
      }
      break;
 8007ea8:	e004      	b.n	8007eb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fd58 	bl	8008962 <USBD_CtlError>
      break;
 8007eb2:	bf00      	nop
  }

  return ret;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop

08007ec0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d005      	beq.n	8007ee6 <USBD_StdItfReq+0x26>
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d852      	bhi.n	8007f84 <USBD_StdItfReq+0xc4>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <USBD_StdItfReq+0x26>
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d14e      	bne.n	8007f84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d840      	bhi.n	8007f76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	889b      	ldrh	r3, [r3, #4]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d836      	bhi.n	8007f6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	889b      	ldrh	r3, [r3, #4]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff fed9 	bl	8007cbe <USBD_CoreFindIF>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	2bff      	cmp	r3, #255	; 0xff
 8007f14:	d01d      	beq.n	8007f52 <USBD_StdItfReq+0x92>
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d11a      	bne.n	8007f52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f1c:	7bba      	ldrb	r2, [r7, #14]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	32ae      	adds	r2, #174	; 0xae
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00f      	beq.n	8007f4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f2c:	7bba      	ldrb	r2, [r7, #14]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f34:	7bba      	ldrb	r2, [r7, #14]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	32ae      	adds	r2, #174	; 0xae
 8007f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f4a:	e004      	b.n	8007f56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f50:	e001      	b.n	8007f56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f52:	2303      	movs	r3, #3
 8007f54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	88db      	ldrh	r3, [r3, #6]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d110      	bne.n	8007f80 <USBD_StdItfReq+0xc0>
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10d      	bne.n	8007f80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fdc7 	bl	8008af8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f6a:	e009      	b.n	8007f80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fcf7 	bl	8008962 <USBD_CtlError>
          break;
 8007f74:	e004      	b.n	8007f80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fcf2 	bl	8008962 <USBD_CtlError>
          break;
 8007f7e:	e000      	b.n	8007f82 <USBD_StdItfReq+0xc2>
          break;
 8007f80:	bf00      	nop
      }
      break;
 8007f82:	e004      	b.n	8007f8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fceb 	bl	8008962 <USBD_CtlError>
      break;
 8007f8c:	bf00      	nop
  }

  return ret;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	889b      	ldrh	r3, [r3, #4]
 8007faa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fb4:	2b40      	cmp	r3, #64	; 0x40
 8007fb6:	d007      	beq.n	8007fc8 <USBD_StdEPReq+0x30>
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	f200 817f 	bhi.w	80082bc <USBD_StdEPReq+0x324>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d02a      	beq.n	8008018 <USBD_StdEPReq+0x80>
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	f040 817a 	bne.w	80082bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff fe83 	bl	8007cd8 <USBD_CoreFindEP>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fd6:	7b7b      	ldrb	r3, [r7, #13]
 8007fd8:	2bff      	cmp	r3, #255	; 0xff
 8007fda:	f000 8174 	beq.w	80082c6 <USBD_StdEPReq+0x32e>
 8007fde:	7b7b      	ldrb	r3, [r7, #13]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f040 8170 	bne.w	80082c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007fe6:	7b7a      	ldrb	r2, [r7, #13]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007fee:	7b7a      	ldrb	r2, [r7, #13]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	32ae      	adds	r2, #174	; 0xae
 8007ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 8163 	beq.w	80082c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008000:	7b7a      	ldrb	r2, [r7, #13]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32ae      	adds	r2, #174	; 0xae
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
 8008012:	4603      	mov	r3, r0
 8008014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008016:	e156      	b.n	80082c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	2b03      	cmp	r3, #3
 800801e:	d008      	beq.n	8008032 <USBD_StdEPReq+0x9a>
 8008020:	2b03      	cmp	r3, #3
 8008022:	f300 8145 	bgt.w	80082b0 <USBD_StdEPReq+0x318>
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 809b 	beq.w	8008162 <USBD_StdEPReq+0x1ca>
 800802c:	2b01      	cmp	r3, #1
 800802e:	d03c      	beq.n	80080aa <USBD_StdEPReq+0x112>
 8008030:	e13e      	b.n	80082b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d002      	beq.n	8008044 <USBD_StdEPReq+0xac>
 800803e:	2b03      	cmp	r3, #3
 8008040:	d016      	beq.n	8008070 <USBD_StdEPReq+0xd8>
 8008042:	e02c      	b.n	800809e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00d      	beq.n	8008066 <USBD_StdEPReq+0xce>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b80      	cmp	r3, #128	; 0x80
 800804e:	d00a      	beq.n	8008066 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 f963 	bl	8009320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800805a:	2180      	movs	r1, #128	; 0x80
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f95f 	bl	8009320 <USBD_LL_StallEP>
 8008062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008064:	e020      	b.n	80080a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fc7a 	bl	8008962 <USBD_CtlError>
              break;
 800806e:	e01b      	b.n	80080a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	885b      	ldrh	r3, [r3, #2]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10e      	bne.n	8008096 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <USBD_StdEPReq+0xfe>
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b80      	cmp	r3, #128	; 0x80
 8008082:	d008      	beq.n	8008096 <USBD_StdEPReq+0xfe>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	88db      	ldrh	r3, [r3, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 f945 	bl	8009320 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fd2e 	bl	8008af8 <USBD_CtlSendStatus>

              break;
 800809c:	e004      	b.n	80080a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fc5e 	bl	8008962 <USBD_CtlError>
              break;
 80080a6:	bf00      	nop
          }
          break;
 80080a8:	e107      	b.n	80082ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d002      	beq.n	80080bc <USBD_StdEPReq+0x124>
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d016      	beq.n	80080e8 <USBD_StdEPReq+0x150>
 80080ba:	e04b      	b.n	8008154 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00d      	beq.n	80080de <USBD_StdEPReq+0x146>
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b80      	cmp	r3, #128	; 0x80
 80080c6:	d00a      	beq.n	80080de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f927 	bl	8009320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080d2:	2180      	movs	r1, #128	; 0x80
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 f923 	bl	8009320 <USBD_LL_StallEP>
 80080da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080dc:	e040      	b.n	8008160 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fc3e 	bl	8008962 <USBD_CtlError>
              break;
 80080e6:	e03b      	b.n	8008160 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	885b      	ldrh	r3, [r3, #2]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d136      	bne.n	800815e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 f92d 	bl	800935e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fcf7 	bl	8008af8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff fde2 	bl	8007cd8 <USBD_CoreFindEP>
 8008114:	4603      	mov	r3, r0
 8008116:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008118:	7b7b      	ldrb	r3, [r7, #13]
 800811a:	2bff      	cmp	r3, #255	; 0xff
 800811c:	d01f      	beq.n	800815e <USBD_StdEPReq+0x1c6>
 800811e:	7b7b      	ldrb	r3, [r7, #13]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11c      	bne.n	800815e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008124:	7b7a      	ldrb	r2, [r7, #13]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800812c:	7b7a      	ldrb	r2, [r7, #13]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32ae      	adds	r2, #174	; 0xae
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d010      	beq.n	800815e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800813c:	7b7a      	ldrb	r2, [r7, #13]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	32ae      	adds	r2, #174	; 0xae
 8008142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008152:	e004      	b.n	800815e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fc03 	bl	8008962 <USBD_CtlError>
              break;
 800815c:	e000      	b.n	8008160 <USBD_StdEPReq+0x1c8>
              break;
 800815e:	bf00      	nop
          }
          break;
 8008160:	e0ab      	b.n	80082ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d002      	beq.n	8008174 <USBD_StdEPReq+0x1dc>
 800816e:	2b03      	cmp	r3, #3
 8008170:	d032      	beq.n	80081d8 <USBD_StdEPReq+0x240>
 8008172:	e097      	b.n	80082a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d007      	beq.n	800818a <USBD_StdEPReq+0x1f2>
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b80      	cmp	r3, #128	; 0x80
 800817e:	d004      	beq.n	800818a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fbed 	bl	8008962 <USBD_CtlError>
                break;
 8008188:	e091      	b.n	80082ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800818a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800818e:	2b00      	cmp	r3, #0
 8008190:	da0b      	bge.n	80081aa <USBD_StdEPReq+0x212>
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	3310      	adds	r3, #16
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	4413      	add	r3, r2
 80081a6:	3304      	adds	r3, #4
 80081a8:	e00b      	b.n	80081c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4413      	add	r3, r2
 80081c0:	3304      	adds	r3, #4
 80081c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2202      	movs	r2, #2
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fc37 	bl	8008a44 <USBD_CtlSendData>
              break;
 80081d6:	e06a      	b.n	80082ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	da11      	bge.n	8008204 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	f003 020f 	and.w	r2, r3, #15
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3324      	adds	r3, #36	; 0x24
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d117      	bne.n	800822a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fbb0 	bl	8008962 <USBD_CtlError>
                  break;
 8008202:	e054      	b.n	80082ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fb9d 	bl	8008962 <USBD_CtlError>
                  break;
 8008228:	e041      	b.n	80082ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800822a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800822e:	2b00      	cmp	r3, #0
 8008230:	da0b      	bge.n	800824a <USBD_StdEPReq+0x2b2>
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	3310      	adds	r3, #16
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	4413      	add	r3, r2
 8008246:	3304      	adds	r3, #4
 8008248:	e00b      	b.n	8008262 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	4413      	add	r3, r2
 8008260:	3304      	adds	r3, #4
 8008262:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <USBD_StdEPReq+0x2d8>
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d103      	bne.n	8008278 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	e00e      	b.n	8008296 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f88d 	bl	800939c <USBD_LL_IsStallEP>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2201      	movs	r2, #1
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e002      	b.n	8008296 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2202      	movs	r2, #2
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fbd1 	bl	8008a44 <USBD_CtlSendData>
              break;
 80082a2:	e004      	b.n	80082ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fb5b 	bl	8008962 <USBD_CtlError>
              break;
 80082ac:	bf00      	nop
          }
          break;
 80082ae:	e004      	b.n	80082ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fb55 	bl	8008962 <USBD_CtlError>
          break;
 80082b8:	bf00      	nop
      }
      break;
 80082ba:	e005      	b.n	80082c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fb4f 	bl	8008962 <USBD_CtlError>
      break;
 80082c4:	e000      	b.n	80082c8 <USBD_StdEPReq+0x330>
      break;
 80082c6:	bf00      	nop
  }

  return ret;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	0a1b      	lsrs	r3, r3, #8
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	3b01      	subs	r3, #1
 80082f4:	2b06      	cmp	r3, #6
 80082f6:	f200 8128 	bhi.w	800854a <USBD_GetDescriptor+0x276>
 80082fa:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <USBD_GetDescriptor+0x2c>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	0800831d 	.word	0x0800831d
 8008304:	08008335 	.word	0x08008335
 8008308:	08008375 	.word	0x08008375
 800830c:	0800854b 	.word	0x0800854b
 8008310:	0800854b 	.word	0x0800854b
 8008314:	080084eb 	.word	0x080084eb
 8008318:	08008517 	.word	0x08008517
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
      break;
 8008332:	e112      	b.n	800855a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	7c1b      	ldrb	r3, [r3, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10d      	bne.n	8008358 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	f107 0208 	add.w	r2, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	2202      	movs	r2, #2
 8008354:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008356:	e100      	b.n	800855a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	f107 0208 	add.w	r2, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	2202      	movs	r2, #2
 8008370:	701a      	strb	r2, [r3, #0]
      break;
 8008372:	e0f2      	b.n	800855a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b05      	cmp	r3, #5
 800837c:	f200 80ac 	bhi.w	80084d8 <USBD_GetDescriptor+0x204>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <USBD_GetDescriptor+0xb4>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	080083a1 	.word	0x080083a1
 800838c:	080083d5 	.word	0x080083d5
 8008390:	08008409 	.word	0x08008409
 8008394:	0800843d 	.word	0x0800843d
 8008398:	08008471 	.word	0x08008471
 800839c:	080084a5 	.word	0x080084a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	7c12      	ldrb	r2, [r2, #16]
 80083b8:	f107 0108 	add.w	r1, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c2:	e091      	b.n	80084e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 facb 	bl	8008962 <USBD_CtlError>
            err++;
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	3301      	adds	r3, #1
 80083d0:	72fb      	strb	r3, [r7, #11]
          break;
 80083d2:	e089      	b.n	80084e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	7c12      	ldrb	r2, [r2, #16]
 80083ec:	f107 0108 	add.w	r1, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f6:	e077      	b.n	80084e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fab1 	bl	8008962 <USBD_CtlError>
            err++;
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	3301      	adds	r3, #1
 8008404:	72fb      	strb	r3, [r7, #11]
          break;
 8008406:	e06f      	b.n	80084e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	7c12      	ldrb	r2, [r2, #16]
 8008420:	f107 0108 	add.w	r1, r7, #8
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
 8008428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842a:	e05d      	b.n	80084e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa97 	bl	8008962 <USBD_CtlError>
            err++;
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	3301      	adds	r3, #1
 8008438:	72fb      	strb	r3, [r7, #11]
          break;
 800843a:	e055      	b.n	80084e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	7c12      	ldrb	r2, [r2, #16]
 8008454:	f107 0108 	add.w	r1, r7, #8
 8008458:	4610      	mov	r0, r2
 800845a:	4798      	blx	r3
 800845c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800845e:	e043      	b.n	80084e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fa7d 	bl	8008962 <USBD_CtlError>
            err++;
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	3301      	adds	r3, #1
 800846c:	72fb      	strb	r3, [r7, #11]
          break;
 800846e:	e03b      	b.n	80084e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	7c12      	ldrb	r2, [r2, #16]
 8008488:	f107 0108 	add.w	r1, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008492:	e029      	b.n	80084e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa63 	bl	8008962 <USBD_CtlError>
            err++;
 800849c:	7afb      	ldrb	r3, [r7, #11]
 800849e:	3301      	adds	r3, #1
 80084a0:	72fb      	strb	r3, [r7, #11]
          break;
 80084a2:	e021      	b.n	80084e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	7c12      	ldrb	r2, [r2, #16]
 80084bc:	f107 0108 	add.w	r1, r7, #8
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
 80084c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084c6:	e00f      	b.n	80084e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fa49 	bl	8008962 <USBD_CtlError>
            err++;
 80084d0:	7afb      	ldrb	r3, [r7, #11]
 80084d2:	3301      	adds	r3, #1
 80084d4:	72fb      	strb	r3, [r7, #11]
          break;
 80084d6:	e007      	b.n	80084e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa41 	bl	8008962 <USBD_CtlError>
          err++;
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	3301      	adds	r3, #1
 80084e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80084e6:	bf00      	nop
      }
      break;
 80084e8:	e037      	b.n	800855a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	7c1b      	ldrb	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	f107 0208 	add.w	r2, r7, #8
 80084fe:	4610      	mov	r0, r2
 8008500:	4798      	blx	r3
 8008502:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008504:	e029      	b.n	800855a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fa2a 	bl	8008962 <USBD_CtlError>
        err++;
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	3301      	adds	r3, #1
 8008512:	72fb      	strb	r3, [r7, #11]
      break;
 8008514:	e021      	b.n	800855a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7c1b      	ldrb	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10d      	bne.n	800853a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f107 0208 	add.w	r2, r7, #8
 800852a:	4610      	mov	r0, r2
 800852c:	4798      	blx	r3
 800852e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	2207      	movs	r2, #7
 8008536:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008538:	e00f      	b.n	800855a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fa10 	bl	8008962 <USBD_CtlError>
        err++;
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	3301      	adds	r3, #1
 8008546:	72fb      	strb	r3, [r7, #11]
      break;
 8008548:	e007      	b.n	800855a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa08 	bl	8008962 <USBD_CtlError>
      err++;
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	3301      	adds	r3, #1
 8008556:	72fb      	strb	r3, [r7, #11]
      break;
 8008558:	bf00      	nop
  }

  if (err != 0U)
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11e      	bne.n	800859e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	88db      	ldrh	r3, [r3, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d016      	beq.n	8008596 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008568:	893b      	ldrh	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00e      	beq.n	800858c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	88da      	ldrh	r2, [r3, #6]
 8008572:	893b      	ldrh	r3, [r7, #8]
 8008574:	4293      	cmp	r3, r2
 8008576:	bf28      	it	cs
 8008578:	4613      	movcs	r3, r2
 800857a:	b29b      	uxth	r3, r3
 800857c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800857e:	893b      	ldrh	r3, [r7, #8]
 8008580:	461a      	mov	r2, r3
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fa5d 	bl	8008a44 <USBD_CtlSendData>
 800858a:	e009      	b.n	80085a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f9e7 	bl	8008962 <USBD_CtlError>
 8008594:	e004      	b.n	80085a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 faae 	bl	8008af8 <USBD_CtlSendStatus>
 800859c:	e000      	b.n	80085a0 <USBD_GetDescriptor+0x2cc>
    return;
 800859e:	bf00      	nop
  }
}
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop

080085a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	889b      	ldrh	r3, [r3, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d131      	bne.n	800861e <USBD_SetAddress+0x76>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	88db      	ldrh	r3, [r3, #6]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d12d      	bne.n	800861e <USBD_SetAddress+0x76>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	885b      	ldrh	r3, [r3, #2]
 80085c6:	2b7f      	cmp	r3, #127	; 0x7f
 80085c8:	d829      	bhi.n	800861e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	885b      	ldrh	r3, [r3, #2]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d104      	bne.n	80085ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f9bc 	bl	8008962 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ea:	e01d      	b.n	8008628 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7bfa      	ldrb	r2, [r7, #15]
 80085f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fefb 	bl	80093f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa7a 	bl	8008af8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008612:	e009      	b.n	8008628 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861c:	e004      	b.n	8008628 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f99e 	bl	8008962 <USBD_CtlError>
  }
}
 8008626:	bf00      	nop
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	885b      	ldrh	r3, [r3, #2]
 8008642:	b2da      	uxtb	r2, r3
 8008644:	4b4e      	ldr	r3, [pc, #312]	; (8008780 <USBD_SetConfig+0x150>)
 8008646:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008648:	4b4d      	ldr	r3, [pc, #308]	; (8008780 <USBD_SetConfig+0x150>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d905      	bls.n	800865c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f985 	bl	8008962 <USBD_CtlError>
    return USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e08c      	b.n	8008776 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	d002      	beq.n	800866e <USBD_SetConfig+0x3e>
 8008668:	2b03      	cmp	r3, #3
 800866a:	d029      	beq.n	80086c0 <USBD_SetConfig+0x90>
 800866c:	e075      	b.n	800875a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800866e:	4b44      	ldr	r3, [pc, #272]	; (8008780 <USBD_SetConfig+0x150>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d020      	beq.n	80086b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008676:	4b42      	ldr	r3, [pc, #264]	; (8008780 <USBD_SetConfig+0x150>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008680:	4b3f      	ldr	r3, [pc, #252]	; (8008780 <USBD_SetConfig+0x150>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fe ffe7 	bl	800765a <USBD_SetClassConfig>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d008      	beq.n	80086a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f962 	bl	8008962 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2202      	movs	r2, #2
 80086a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086a6:	e065      	b.n	8008774 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa25 	bl	8008af8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2203      	movs	r2, #3
 80086b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086b6:	e05d      	b.n	8008774 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa1d 	bl	8008af8 <USBD_CtlSendStatus>
      break;
 80086be:	e059      	b.n	8008774 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086c0:	4b2f      	ldr	r3, [pc, #188]	; (8008780 <USBD_SetConfig+0x150>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d112      	bne.n	80086ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086d0:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <USBD_SetConfig+0x150>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086da:	4b29      	ldr	r3, [pc, #164]	; (8008780 <USBD_SetConfig+0x150>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7fe ffd6 	bl	8007692 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa06 	bl	8008af8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086ec:	e042      	b.n	8008774 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80086ee:	4b24      	ldr	r3, [pc, #144]	; (8008780 <USBD_SetConfig+0x150>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d02a      	beq.n	8008752 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7fe ffc4 	bl	8007692 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800870a:	4b1d      	ldr	r3, [pc, #116]	; (8008780 <USBD_SetConfig+0x150>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008714:	4b1a      	ldr	r3, [pc, #104]	; (8008780 <USBD_SetConfig+0x150>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7fe ff9d 	bl	800765a <USBD_SetClassConfig>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00f      	beq.n	800874a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f918 	bl	8008962 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7fe ffa9 	bl	8007692 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008748:	e014      	b.n	8008774 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9d4 	bl	8008af8 <USBD_CtlSendStatus>
      break;
 8008750:	e010      	b.n	8008774 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f9d0 	bl	8008af8 <USBD_CtlSendStatus>
      break;
 8008758:	e00c      	b.n	8008774 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f900 	bl	8008962 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008762:	4b07      	ldr	r3, [pc, #28]	; (8008780 <USBD_SetConfig+0x150>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7fe ff92 	bl	8007692 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	73fb      	strb	r3, [r7, #15]
      break;
 8008772:	bf00      	nop
  }

  return ret;
 8008774:	7bfb      	ldrb	r3, [r7, #15]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000270 	.word	0x20000270

08008784 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	88db      	ldrh	r3, [r3, #6]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d004      	beq.n	80087a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f8e2 	bl	8008962 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800879e:	e023      	b.n	80087e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	dc02      	bgt.n	80087b2 <USBD_GetConfig+0x2e>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dc03      	bgt.n	80087b8 <USBD_GetConfig+0x34>
 80087b0:	e015      	b.n	80087de <USBD_GetConfig+0x5a>
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d00b      	beq.n	80087ce <USBD_GetConfig+0x4a>
 80087b6:	e012      	b.n	80087de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3308      	adds	r3, #8
 80087c2:	2201      	movs	r2, #1
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f93c 	bl	8008a44 <USBD_CtlSendData>
        break;
 80087cc:	e00c      	b.n	80087e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3304      	adds	r3, #4
 80087d2:	2201      	movs	r2, #1
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f934 	bl	8008a44 <USBD_CtlSendData>
        break;
 80087dc:	e004      	b.n	80087e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f8be 	bl	8008962 <USBD_CtlError>
        break;
 80087e6:	bf00      	nop
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008800:	b2db      	uxtb	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	2b02      	cmp	r3, #2
 8008806:	d81e      	bhi.n	8008846 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	88db      	ldrh	r3, [r3, #6]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d004      	beq.n	800881a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f8a5 	bl	8008962 <USBD_CtlError>
        break;
 8008818:	e01a      	b.n	8008850 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f043 0202 	orr.w	r2, r3, #2
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	330c      	adds	r3, #12
 800883a:	2202      	movs	r2, #2
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f900 	bl	8008a44 <USBD_CtlSendData>
      break;
 8008844:	e004      	b.n	8008850 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f88a 	bl	8008962 <USBD_CtlError>
      break;
 800884e:	bf00      	nop
  }
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	885b      	ldrh	r3, [r3, #2]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d107      	bne.n	800887a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f940 	bl	8008af8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008878:	e013      	b.n	80088a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	885b      	ldrh	r3, [r3, #2]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d10b      	bne.n	800889a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	889b      	ldrh	r3, [r3, #4]
 8008886:	0a1b      	lsrs	r3, r3, #8
 8008888:	b29b      	uxth	r3, r3
 800888a:	b2da      	uxtb	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f930 	bl	8008af8 <USBD_CtlSendStatus>
}
 8008898:	e003      	b.n	80088a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f860 	bl	8008962 <USBD_CtlError>
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b082      	sub	sp, #8
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d80b      	bhi.n	80088da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d10c      	bne.n	80088e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f910 	bl	8008af8 <USBD_CtlSendStatus>
      }
      break;
 80088d8:	e004      	b.n	80088e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f840 	bl	8008962 <USBD_CtlError>
      break;
 80088e2:	e000      	b.n	80088e6 <USBD_ClrFeature+0x3c>
      break;
 80088e4:	bf00      	nop
  }
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	781a      	ldrb	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3301      	adds	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	781a      	ldrb	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7ff fa41 	bl	8007da0 <SWAPBYTE>
 800891e:	4603      	mov	r3, r0
 8008920:	461a      	mov	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3301      	adds	r3, #1
 800892a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3301      	adds	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fa34 	bl	8007da0 <SWAPBYTE>
 8008938:	4603      	mov	r3, r0
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3301      	adds	r3, #1
 8008944:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3301      	adds	r3, #1
 800894a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff fa27 	bl	8007da0 <SWAPBYTE>
 8008952:	4603      	mov	r3, r0
 8008954:	461a      	mov	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	80da      	strh	r2, [r3, #6]
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800896c:	2180      	movs	r1, #128	; 0x80
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fcd6 	bl	8009320 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008974:	2100      	movs	r1, #0
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fcd2 	bl	8009320 <USBD_LL_StallEP>
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d036      	beq.n	8008a08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800899e:	6938      	ldr	r0, [r7, #16]
 80089a0:	f000 f836 	bl	8008a10 <USBD_GetLen>
 80089a4:	4603      	mov	r3, r0
 80089a6:	3301      	adds	r3, #1
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	4413      	add	r3, r2
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7812      	ldrb	r2, [r2, #0]
 80089bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	3301      	adds	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4413      	add	r3, r2
 80089ca:	2203      	movs	r2, #3
 80089cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	3301      	adds	r3, #1
 80089d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089d4:	e013      	b.n	80089fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	4413      	add	r3, r2
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	7812      	ldrb	r2, [r2, #0]
 80089e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	3301      	adds	r3, #1
 80089e6:	613b      	str	r3, [r7, #16]
    idx++;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	3301      	adds	r3, #1
 80089ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	4413      	add	r3, r2
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	3301      	adds	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e7      	bne.n	80089d6 <USBD_GetString+0x52>
 8008a06:	e000      	b.n	8008a0a <USBD_GetString+0x86>
    return;
 8008a08:	bf00      	nop
  }
}
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a20:	e005      	b.n	8008a2e <USBD_GetLen+0x1e>
  {
    len++;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	3301      	adds	r3, #1
 8008a26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1f5      	bne.n	8008a22 <USBD_GetLen+0x12>
  }

  return len;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 fce1 	bl	8009432 <USBD_LL_Transmit>

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 fcd0 	bl	8009432 <USBD_LL_Transmit>

  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2203      	movs	r2, #3
 8008aac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fcd4 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fcc3 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2204      	movs	r2, #4
 8008b04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b08:	2300      	movs	r3, #0
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fc8f 	bl	8009432 <USBD_LL_Transmit>

  return USBD_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2205      	movs	r2, #5
 8008b2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2200      	movs	r2, #0
 8008b32:	2100      	movs	r1, #0
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fc9d 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4912      	ldr	r1, [pc, #72]	; (8008b94 <MX_USB_DEVICE_Init+0x50>)
 8008b4c:	4812      	ldr	r0, [pc, #72]	; (8008b98 <MX_USB_DEVICE_Init+0x54>)
 8008b4e:	f7fe fd07 	bl	8007560 <USBD_Init>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b58:	f7f7 ff00 	bl	800095c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b5c:	490f      	ldr	r1, [pc, #60]	; (8008b9c <MX_USB_DEVICE_Init+0x58>)
 8008b5e:	480e      	ldr	r0, [pc, #56]	; (8008b98 <MX_USB_DEVICE_Init+0x54>)
 8008b60:	f7fe fd2e 	bl	80075c0 <USBD_RegisterClass>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b6a:	f7f7 fef7 	bl	800095c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b6e:	490c      	ldr	r1, [pc, #48]	; (8008ba0 <MX_USB_DEVICE_Init+0x5c>)
 8008b70:	4809      	ldr	r0, [pc, #36]	; (8008b98 <MX_USB_DEVICE_Init+0x54>)
 8008b72:	f7fe fc1f 	bl	80073b4 <USBD_CDC_RegisterInterface>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b7c:	f7f7 feee 	bl	800095c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b80:	4805      	ldr	r0, [pc, #20]	; (8008b98 <MX_USB_DEVICE_Init+0x54>)
 8008b82:	f7fe fd53 	bl	800762c <USBD_Start>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b8c:	f7f7 fee6 	bl	800095c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b90:	bf00      	nop
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	200000ac 	.word	0x200000ac
 8008b98:	20000274 	.word	0x20000274
 8008b9c:	20000018 	.word	0x20000018
 8008ba0:	20000098 	.word	0x20000098

08008ba4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ba8:	2200      	movs	r2, #0
 8008baa:	4905      	ldr	r1, [pc, #20]	; (8008bc0 <CDC_Init_FS+0x1c>)
 8008bac:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <CDC_Init_FS+0x20>)
 8008bae:	f7fe fc1b 	bl	80073e8 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bb2:	4905      	ldr	r1, [pc, #20]	; (8008bc8 <CDC_Init_FS+0x24>)
 8008bb4:	4803      	ldr	r0, [pc, #12]	; (8008bc4 <CDC_Init_FS+0x20>)
 8008bb6:	f7fe fc39 	bl	800742c <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8008bba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20000950 	.word	0x20000950
 8008bc4:	20000274 	.word	0x20000274
 8008bc8:	20000550 	.word	0x20000550

08008bcc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8008bd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	6039      	str	r1, [r7, #0]
 8008be6:	71fb      	strb	r3, [r7, #7]
 8008be8:	4613      	mov	r3, r2
 8008bea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	2b23      	cmp	r3, #35	; 0x23
 8008bf0:	d84a      	bhi.n	8008c88 <CDC_Control_FS+0xac>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <CDC_Control_FS+0x1c>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c89 	.word	0x08008c89
 8008bfc:	08008c89 	.word	0x08008c89
 8008c00:	08008c89 	.word	0x08008c89
 8008c04:	08008c89 	.word	0x08008c89
 8008c08:	08008c89 	.word	0x08008c89
 8008c0c:	08008c89 	.word	0x08008c89
 8008c10:	08008c89 	.word	0x08008c89
 8008c14:	08008c89 	.word	0x08008c89
 8008c18:	08008c89 	.word	0x08008c89
 8008c1c:	08008c89 	.word	0x08008c89
 8008c20:	08008c89 	.word	0x08008c89
 8008c24:	08008c89 	.word	0x08008c89
 8008c28:	08008c89 	.word	0x08008c89
 8008c2c:	08008c89 	.word	0x08008c89
 8008c30:	08008c89 	.word	0x08008c89
 8008c34:	08008c89 	.word	0x08008c89
 8008c38:	08008c89 	.word	0x08008c89
 8008c3c:	08008c89 	.word	0x08008c89
 8008c40:	08008c89 	.word	0x08008c89
 8008c44:	08008c89 	.word	0x08008c89
 8008c48:	08008c89 	.word	0x08008c89
 8008c4c:	08008c89 	.word	0x08008c89
 8008c50:	08008c89 	.word	0x08008c89
 8008c54:	08008c89 	.word	0x08008c89
 8008c58:	08008c89 	.word	0x08008c89
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	08008c89 	.word	0x08008c89
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008c89 	.word	0x08008c89
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c89 	.word	0x08008c89
 8008c74:	08008c89 	.word	0x08008c89
 8008c78:	08008c89 	.word	0x08008c89
 8008c7c:	08008c89 	.word	0x08008c89
 8008c80:	08008c89 	.word	0x08008c89
 8008c84:	08008c89 	.word	0x08008c89
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8008c88:	bf00      	nop
    }

    return (USBD_OK);
 8008c8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4805      	ldr	r0, [pc, #20]	; (8008cbc <CDC_Receive_FS+0x24>)
 8008ca6:	f7fe fbc1 	bl	800742c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008caa:	4804      	ldr	r0, [pc, #16]	; (8008cbc <CDC_Receive_FS+0x24>)
 8008cac:	f7fe fc22 	bl	80074f4 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8008cb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000274 	.word	0x20000274

08008cc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8008cd0:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <CDC_Transmit_FS+0x48>)
 8008cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cd6:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e00b      	b.n	8008cfe <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ce6:	887b      	ldrh	r3, [r7, #2]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	4806      	ldr	r0, [pc, #24]	; (8008d08 <CDC_Transmit_FS+0x48>)
 8008cee:	f7fe fb7b 	bl	80073e8 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008cf2:	4805      	ldr	r0, [pc, #20]	; (8008d08 <CDC_Transmit_FS+0x48>)
 8008cf4:	f7fe fbb8 	bl	8007468 <USBD_CDC_TransmitPacket>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000274 	.word	0x20000274

08008d0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
	...

08008d30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2212      	movs	r2, #18
 8008d40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d42:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	200000c8 	.word	0x200000c8

08008d54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6039      	str	r1, [r7, #0]
 8008d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2204      	movs	r2, #4
 8008d64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d66:	4b03      	ldr	r3, [pc, #12]	; (8008d74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	200000dc 	.word	0x200000dc

08008d78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	4907      	ldr	r1, [pc, #28]	; (8008dac <USBD_FS_ProductStrDescriptor+0x34>)
 8008d8e:	4808      	ldr	r0, [pc, #32]	; (8008db0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d90:	f7ff fdf8 	bl	8008984 <USBD_GetString>
 8008d94:	e004      	b.n	8008da0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4904      	ldr	r1, [pc, #16]	; (8008dac <USBD_FS_ProductStrDescriptor+0x34>)
 8008d9a:	4805      	ldr	r0, [pc, #20]	; (8008db0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d9c:	f7ff fdf2 	bl	8008984 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20000d50 	.word	0x20000d50
 8008db0:	08009f60 	.word	0x08009f60

08008db4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	4904      	ldr	r1, [pc, #16]	; (8008dd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008dc4:	4804      	ldr	r0, [pc, #16]	; (8008dd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dc6:	f7ff fddd 	bl	8008984 <USBD_GetString>
  return USBD_StrDesc;
 8008dca:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000d50 	.word	0x20000d50
 8008dd8:	08009f78 	.word	0x08009f78

08008ddc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	221a      	movs	r2, #26
 8008dec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008dee:	f000 f843 	bl	8008e78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008df2:	4b02      	ldr	r3, [pc, #8]	; (8008dfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	200000e0 	.word	0x200000e0

08008e00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	6039      	str	r1, [r7, #0]
 8008e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	4907      	ldr	r1, [pc, #28]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e16:	4808      	ldr	r0, [pc, #32]	; (8008e38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e18:	f7ff fdb4 	bl	8008984 <USBD_GetString>
 8008e1c:	e004      	b.n	8008e28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	4904      	ldr	r1, [pc, #16]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e22:	4805      	ldr	r0, [pc, #20]	; (8008e38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e24:	f7ff fdae 	bl	8008984 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e28:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000d50 	.word	0x20000d50
 8008e38:	08009f8c 	.word	0x08009f8c

08008e3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	4907      	ldr	r1, [pc, #28]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e52:	4808      	ldr	r0, [pc, #32]	; (8008e74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e54:	f7ff fd96 	bl	8008984 <USBD_GetString>
 8008e58:	e004      	b.n	8008e64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	4904      	ldr	r1, [pc, #16]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e5e:	4805      	ldr	r0, [pc, #20]	; (8008e74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e60:	f7ff fd90 	bl	8008984 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000d50 	.word	0x20000d50
 8008e74:	08009f98 	.word	0x08009f98

08008e78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <Get_SerialNum+0x44>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e84:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <Get_SerialNum+0x48>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e8a:	4b0e      	ldr	r3, [pc, #56]	; (8008ec4 <Get_SerialNum+0x4c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4413      	add	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e9e:	2208      	movs	r2, #8
 8008ea0:	4909      	ldr	r1, [pc, #36]	; (8008ec8 <Get_SerialNum+0x50>)
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f814 	bl	8008ed0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	4908      	ldr	r1, [pc, #32]	; (8008ecc <Get_SerialNum+0x54>)
 8008eac:	68b8      	ldr	r0, [r7, #8]
 8008eae:	f000 f80f 	bl	8008ed0 <IntToUnicode>
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	1fff7a10 	.word	0x1fff7a10
 8008ec0:	1fff7a14 	.word	0x1fff7a14
 8008ec4:	1fff7a18 	.word	0x1fff7a18
 8008ec8:	200000e2 	.word	0x200000e2
 8008ecc:	200000f2 	.word	0x200000f2

08008ed0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
 8008ee6:	e027      	b.n	8008f38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	0f1b      	lsrs	r3, r3, #28
 8008eec:	2b09      	cmp	r3, #9
 8008eee:	d80b      	bhi.n	8008f08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	0f1b      	lsrs	r3, r3, #28
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	4619      	mov	r1, r3
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	440b      	add	r3, r1
 8008f00:	3230      	adds	r2, #48	; 0x30
 8008f02:	b2d2      	uxtb	r2, r2
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e00a      	b.n	8008f1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	0f1b      	lsrs	r3, r3, #28
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	4619      	mov	r1, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	440b      	add	r3, r1
 8008f18:	3237      	adds	r2, #55	; 0x37
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	3301      	adds	r3, #1
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	3301      	adds	r3, #1
 8008f36:	75fb      	strb	r3, [r7, #23]
 8008f38:	7dfa      	ldrb	r2, [r7, #23]
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d3d3      	bcc.n	8008ee8 <IntToUnicode+0x18>
  }
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08a      	sub	sp, #40	; 0x28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f58:	f107 0314 	add.w	r3, r7, #20
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	605a      	str	r2, [r3, #4]
 8008f62:	609a      	str	r2, [r3, #8]
 8008f64:	60da      	str	r2, [r3, #12]
 8008f66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f70:	d13a      	bne.n	8008fe8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f72:	2300      	movs	r3, #0
 8008f74:	613b      	str	r3, [r7, #16]
 8008f76:	4b1e      	ldr	r3, [pc, #120]	; (8008ff0 <HAL_PCD_MspInit+0xa0>)
 8008f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7a:	4a1d      	ldr	r2, [pc, #116]	; (8008ff0 <HAL_PCD_MspInit+0xa0>)
 8008f7c:	f043 0301 	orr.w	r3, r3, #1
 8008f80:	6313      	str	r3, [r2, #48]	; 0x30
 8008f82:	4b1b      	ldr	r3, [pc, #108]	; (8008ff0 <HAL_PCD_MspInit+0xa0>)
 8008f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	613b      	str	r3, [r7, #16]
 8008f8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f94:	2302      	movs	r3, #2
 8008f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fa0:	230a      	movs	r3, #10
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fa4:	f107 0314 	add.w	r3, r7, #20
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4812      	ldr	r0, [pc, #72]	; (8008ff4 <HAL_PCD_MspInit+0xa4>)
 8008fac:	f7f8 fc5e 	bl	800186c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <HAL_PCD_MspInit+0xa0>)
 8008fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb4:	4a0e      	ldr	r2, [pc, #56]	; (8008ff0 <HAL_PCD_MspInit+0xa0>)
 8008fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fba:	6353      	str	r3, [r2, #52]	; 0x34
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <HAL_PCD_MspInit+0xa0>)
 8008fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc4:	4a0a      	ldr	r2, [pc, #40]	; (8008ff0 <HAL_PCD_MspInit+0xa0>)
 8008fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fca:	6453      	str	r3, [r2, #68]	; 0x44
 8008fcc:	4b08      	ldr	r3, [pc, #32]	; (8008ff0 <HAL_PCD_MspInit+0xa0>)
 8008fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2100      	movs	r1, #0
 8008fdc:	2043      	movs	r0, #67	; 0x43
 8008fde:	f7f8 fa28 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fe2:	2043      	movs	r0, #67	; 0x43
 8008fe4:	f7f8 fa41 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fe8:	bf00      	nop
 8008fea:	3728      	adds	r7, #40	; 0x28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	40023800 	.word	0x40023800
 8008ff4:	40020000 	.word	0x40020000

08008ff8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fe fb59 	bl	80076c6 <USBD_LL_SetupStage>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	4613      	mov	r3, r2
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	440b      	add	r3, r1
 800903c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	78fb      	ldrb	r3, [r7, #3]
 8009044:	4619      	mov	r1, r3
 8009046:	f7fe fb93 	bl	8007770 <USBD_LL_DataOutStage>
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009064:	78fa      	ldrb	r2, [r7, #3]
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	4613      	mov	r3, r2
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	4413      	add	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	440b      	add	r3, r1
 8009072:	334c      	adds	r3, #76	; 0x4c
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	4619      	mov	r1, r3
 800907a:	f7fe fc2c 	bl	80078d6 <USBD_LL_DataInStage>
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fd60 	bl	8007b5a <USBD_LL_SOF>
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090aa:	2301      	movs	r3, #1
 80090ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d001      	beq.n	80090ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090b6:	f7f7 fc51 	bl	800095c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090c0:	7bfa      	ldrb	r2, [r7, #15]
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe fd0a 	bl	8007ade <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fcb2 	bl	8007a3a <USBD_LL_Reset>
}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fd05 	bl	8007afe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009114:	4b04      	ldr	r3, [pc, #16]	; (8009128 <HAL_PCD_SuspendCallback+0x48>)
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	4a03      	ldr	r2, [pc, #12]	; (8009128 <HAL_PCD_SuspendCallback+0x48>)
 800911a:	f043 0306 	orr.w	r3, r3, #6
 800911e:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	e000ed00 	.word	0xe000ed00

0800912c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fcf5 	bl	8007b2a <USBD_LL_Resume>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800915a:	78fa      	ldrb	r2, [r7, #3]
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fd4d 	bl	8007bfe <USBD_LL_IsoOUTIncomplete>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe fd09 	bl	8007b9a <USBD_LL_IsoINIncomplete>
}
 8009188:	bf00      	nop
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fd5f 	bl	8007c62 <USBD_LL_DevConnected>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe fd5c 	bl	8007c78 <USBD_LL_DevDisconnected>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d13c      	bne.n	8009252 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091d8:	4a20      	ldr	r2, [pc, #128]	; (800925c <USBD_LL_Init+0x94>)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a1e      	ldr	r2, [pc, #120]	; (800925c <USBD_LL_Init+0x94>)
 80091e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091e8:	4b1c      	ldr	r3, [pc, #112]	; (800925c <USBD_LL_Init+0x94>)
 80091ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80091f0:	4b1a      	ldr	r3, [pc, #104]	; (800925c <USBD_LL_Init+0x94>)
 80091f2:	2204      	movs	r2, #4
 80091f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <USBD_LL_Init+0x94>)
 80091f8:	2202      	movs	r2, #2
 80091fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091fc:	4b17      	ldr	r3, [pc, #92]	; (800925c <USBD_LL_Init+0x94>)
 80091fe:	2200      	movs	r2, #0
 8009200:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009202:	4b16      	ldr	r3, [pc, #88]	; (800925c <USBD_LL_Init+0x94>)
 8009204:	2202      	movs	r2, #2
 8009206:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009208:	4b14      	ldr	r3, [pc, #80]	; (800925c <USBD_LL_Init+0x94>)
 800920a:	2200      	movs	r2, #0
 800920c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800920e:	4b13      	ldr	r3, [pc, #76]	; (800925c <USBD_LL_Init+0x94>)
 8009210:	2200      	movs	r2, #0
 8009212:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009214:	4b11      	ldr	r3, [pc, #68]	; (800925c <USBD_LL_Init+0x94>)
 8009216:	2200      	movs	r2, #0
 8009218:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800921a:	4b10      	ldr	r3, [pc, #64]	; (800925c <USBD_LL_Init+0x94>)
 800921c:	2200      	movs	r2, #0
 800921e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009220:	4b0e      	ldr	r3, [pc, #56]	; (800925c <USBD_LL_Init+0x94>)
 8009222:	2200      	movs	r2, #0
 8009224:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009226:	480d      	ldr	r0, [pc, #52]	; (800925c <USBD_LL_Init+0x94>)
 8009228:	f7f9 fc63 	bl	8002af2 <HAL_PCD_Init>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009232:	f7f7 fb93 	bl	800095c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009236:	2180      	movs	r1, #128	; 0x80
 8009238:	4808      	ldr	r0, [pc, #32]	; (800925c <USBD_LL_Init+0x94>)
 800923a:	f7fa feba 	bl	8003fb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800923e:	2240      	movs	r2, #64	; 0x40
 8009240:	2100      	movs	r1, #0
 8009242:	4806      	ldr	r0, [pc, #24]	; (800925c <USBD_LL_Init+0x94>)
 8009244:	f7fa fe6e 	bl	8003f24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009248:	2280      	movs	r2, #128	; 0x80
 800924a:	2101      	movs	r1, #1
 800924c:	4803      	ldr	r0, [pc, #12]	; (800925c <USBD_LL_Init+0x94>)
 800924e:	f7fa fe69 	bl	8003f24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	20000f50 	.word	0x20000f50

08009260 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009276:	4618      	mov	r0, r3
 8009278:	f7f9 fd58 	bl	8002d2c <HAL_PCD_Start>
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 f942 	bl	800950c <USBD_Get_USB_Status>
 8009288:	4603      	mov	r3, r0
 800928a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800928c:	7bbb      	ldrb	r3, [r7, #14]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	4608      	mov	r0, r1
 80092a0:	4611      	mov	r1, r2
 80092a2:	461a      	mov	r2, r3
 80092a4:	4603      	mov	r3, r0
 80092a6:	70fb      	strb	r3, [r7, #3]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70bb      	strb	r3, [r7, #2]
 80092ac:	4613      	mov	r3, r2
 80092ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092be:	78bb      	ldrb	r3, [r7, #2]
 80092c0:	883a      	ldrh	r2, [r7, #0]
 80092c2:	78f9      	ldrb	r1, [r7, #3]
 80092c4:	f7fa fa29 	bl	800371a <HAL_PCD_EP_Open>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f91c 	bl	800950c <USBD_Get_USB_Status>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7fa fa72 	bl	80037ea <HAL_PCD_EP_Close>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f8fd 	bl	800950c <USBD_Get_USB_Status>
 8009312:	4603      	mov	r3, r0
 8009314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009316:	7bbb      	ldrb	r3, [r7, #14]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f7fa fb4a 	bl	80039d8 <HAL_PCD_EP_SetStall>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f8de 	bl	800950c <USBD_Get_USB_Status>
 8009350:	4603      	mov	r3, r0
 8009352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009354:	7bbb      	ldrb	r3, [r7, #14]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f7fa fb8f 	bl	8003aa0 <HAL_PCD_EP_ClrStall>
 8009382:	4603      	mov	r3, r0
 8009384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f8bf 	bl	800950c <USBD_Get_USB_Status>
 800938e:	4603      	mov	r3, r0
 8009390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009392:	7bbb      	ldrb	r3, [r7, #14]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	da0b      	bge.n	80093d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093be:	68f9      	ldr	r1, [r7, #12]
 80093c0:	4613      	mov	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	333e      	adds	r3, #62	; 0x3e
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	e00b      	b.n	80093e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d6:	68f9      	ldr	r1, [r7, #12]
 80093d8:	4613      	mov	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80093e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7fa f95c 	bl	80036d0 <HAL_PCD_SetAddress>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f874 	bl	800950c <USBD_Get_USB_Status>
 8009424:	4603      	mov	r3, r0
 8009426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009428:	7bbb      	ldrb	r3, [r7, #14]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
 800943e:	460b      	mov	r3, r1
 8009440:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009450:	7af9      	ldrb	r1, [r7, #11]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	f7fa fa75 	bl	8003944 <HAL_PCD_EP_Transmit>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f853 	bl	800950c <USBD_Get_USB_Status>
 8009466:	4603      	mov	r3, r0
 8009468:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800946a:	7dbb      	ldrb	r3, [r7, #22]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	460b      	mov	r3, r1
 8009482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009492:	7af9      	ldrb	r1, [r7, #11]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	f7fa f9f1 	bl	800387e <HAL_PCD_EP_Receive>
 800949c:	4603      	mov	r3, r0
 800949e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f832 	bl	800950c <USBD_Get_USB_Status>
 80094a8:	4603      	mov	r3, r0
 80094aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094c8:	78fa      	ldrb	r2, [r7, #3]
 80094ca:	4611      	mov	r1, r2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fa fa21 	bl	8003914 <HAL_PCD_EP_GetRxCount>
 80094d2:	4603      	mov	r3, r0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094e4:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <USBD_static_malloc+0x18>)
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	2000145c 	.word	0x2000145c

080094f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d817      	bhi.n	8009550 <USBD_Get_USB_Status+0x44>
 8009520:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <USBD_Get_USB_Status+0x1c>)
 8009522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009526:	bf00      	nop
 8009528:	08009539 	.word	0x08009539
 800952c:	0800953f 	.word	0x0800953f
 8009530:	08009545 	.word	0x08009545
 8009534:	0800954b 	.word	0x0800954b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
    break;
 800953c:	e00b      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800953e:	2303      	movs	r3, #3
 8009540:	73fb      	strb	r3, [r7, #15]
    break;
 8009542:	e008      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]
    break;
 8009548:	e005      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800954a:	2303      	movs	r3, #3
 800954c:	73fb      	strb	r3, [r7, #15]
    break;
 800954e:	e002      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009550:	2303      	movs	r3, #3
 8009552:	73fb      	strb	r3, [r7, #15]
    break;
 8009554:	bf00      	nop
  }
  return usb_status;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <malloc>:
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <malloc+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f000 b82b 	b.w	80095c4 <_malloc_r>
 800956e:	bf00      	nop
 8009570:	20000148 	.word	0x20000148

08009574 <free>:
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <free+0xc>)
 8009576:	4601      	mov	r1, r0
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	f000 b913 	b.w	80097a4 <_free_r>
 800957e:	bf00      	nop
 8009580:	20000148 	.word	0x20000148

08009584 <sbrk_aligned>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4e0e      	ldr	r6, [pc, #56]	; (80095c0 <sbrk_aligned+0x3c>)
 8009588:	460c      	mov	r4, r1
 800958a:	6831      	ldr	r1, [r6, #0]
 800958c:	4605      	mov	r5, r0
 800958e:	b911      	cbnz	r1, 8009596 <sbrk_aligned+0x12>
 8009590:	f000 f8cc 	bl	800972c <_sbrk_r>
 8009594:	6030      	str	r0, [r6, #0]
 8009596:	4621      	mov	r1, r4
 8009598:	4628      	mov	r0, r5
 800959a:	f000 f8c7 	bl	800972c <_sbrk_r>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d00a      	beq.n	80095b8 <sbrk_aligned+0x34>
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d007      	beq.n	80095bc <sbrk_aligned+0x38>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f8bc 	bl	800972c <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d101      	bne.n	80095bc <sbrk_aligned+0x38>
 80095b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80095bc:	4620      	mov	r0, r4
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	20001680 	.word	0x20001680

080095c4 <_malloc_r>:
 80095c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c8:	1ccd      	adds	r5, r1, #3
 80095ca:	f025 0503 	bic.w	r5, r5, #3
 80095ce:	3508      	adds	r5, #8
 80095d0:	2d0c      	cmp	r5, #12
 80095d2:	bf38      	it	cc
 80095d4:	250c      	movcc	r5, #12
 80095d6:	2d00      	cmp	r5, #0
 80095d8:	4607      	mov	r7, r0
 80095da:	db01      	blt.n	80095e0 <_malloc_r+0x1c>
 80095dc:	42a9      	cmp	r1, r5
 80095de:	d905      	bls.n	80095ec <_malloc_r+0x28>
 80095e0:	230c      	movs	r3, #12
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	2600      	movs	r6, #0
 80095e6:	4630      	mov	r0, r6
 80095e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80096c0 <_malloc_r+0xfc>
 80095f0:	f000 f868 	bl	80096c4 <__malloc_lock>
 80095f4:	f8d8 3000 	ldr.w	r3, [r8]
 80095f8:	461c      	mov	r4, r3
 80095fa:	bb5c      	cbnz	r4, 8009654 <_malloc_r+0x90>
 80095fc:	4629      	mov	r1, r5
 80095fe:	4638      	mov	r0, r7
 8009600:	f7ff ffc0 	bl	8009584 <sbrk_aligned>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	4604      	mov	r4, r0
 8009608:	d155      	bne.n	80096b6 <_malloc_r+0xf2>
 800960a:	f8d8 4000 	ldr.w	r4, [r8]
 800960e:	4626      	mov	r6, r4
 8009610:	2e00      	cmp	r6, #0
 8009612:	d145      	bne.n	80096a0 <_malloc_r+0xdc>
 8009614:	2c00      	cmp	r4, #0
 8009616:	d048      	beq.n	80096aa <_malloc_r+0xe6>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	4631      	mov	r1, r6
 800961c:	4638      	mov	r0, r7
 800961e:	eb04 0903 	add.w	r9, r4, r3
 8009622:	f000 f883 	bl	800972c <_sbrk_r>
 8009626:	4581      	cmp	r9, r0
 8009628:	d13f      	bne.n	80096aa <_malloc_r+0xe6>
 800962a:	6821      	ldr	r1, [r4, #0]
 800962c:	1a6d      	subs	r5, r5, r1
 800962e:	4629      	mov	r1, r5
 8009630:	4638      	mov	r0, r7
 8009632:	f7ff ffa7 	bl	8009584 <sbrk_aligned>
 8009636:	3001      	adds	r0, #1
 8009638:	d037      	beq.n	80096aa <_malloc_r+0xe6>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	442b      	add	r3, r5
 800963e:	6023      	str	r3, [r4, #0]
 8009640:	f8d8 3000 	ldr.w	r3, [r8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d038      	beq.n	80096ba <_malloc_r+0xf6>
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	42a2      	cmp	r2, r4
 800964c:	d12b      	bne.n	80096a6 <_malloc_r+0xe2>
 800964e:	2200      	movs	r2, #0
 8009650:	605a      	str	r2, [r3, #4]
 8009652:	e00f      	b.n	8009674 <_malloc_r+0xb0>
 8009654:	6822      	ldr	r2, [r4, #0]
 8009656:	1b52      	subs	r2, r2, r5
 8009658:	d41f      	bmi.n	800969a <_malloc_r+0xd6>
 800965a:	2a0b      	cmp	r2, #11
 800965c:	d917      	bls.n	800968e <_malloc_r+0xca>
 800965e:	1961      	adds	r1, r4, r5
 8009660:	42a3      	cmp	r3, r4
 8009662:	6025      	str	r5, [r4, #0]
 8009664:	bf18      	it	ne
 8009666:	6059      	strne	r1, [r3, #4]
 8009668:	6863      	ldr	r3, [r4, #4]
 800966a:	bf08      	it	eq
 800966c:	f8c8 1000 	streq.w	r1, [r8]
 8009670:	5162      	str	r2, [r4, r5]
 8009672:	604b      	str	r3, [r1, #4]
 8009674:	4638      	mov	r0, r7
 8009676:	f104 060b 	add.w	r6, r4, #11
 800967a:	f000 f829 	bl	80096d0 <__malloc_unlock>
 800967e:	f026 0607 	bic.w	r6, r6, #7
 8009682:	1d23      	adds	r3, r4, #4
 8009684:	1af2      	subs	r2, r6, r3
 8009686:	d0ae      	beq.n	80095e6 <_malloc_r+0x22>
 8009688:	1b9b      	subs	r3, r3, r6
 800968a:	50a3      	str	r3, [r4, r2]
 800968c:	e7ab      	b.n	80095e6 <_malloc_r+0x22>
 800968e:	42a3      	cmp	r3, r4
 8009690:	6862      	ldr	r2, [r4, #4]
 8009692:	d1dd      	bne.n	8009650 <_malloc_r+0x8c>
 8009694:	f8c8 2000 	str.w	r2, [r8]
 8009698:	e7ec      	b.n	8009674 <_malloc_r+0xb0>
 800969a:	4623      	mov	r3, r4
 800969c:	6864      	ldr	r4, [r4, #4]
 800969e:	e7ac      	b.n	80095fa <_malloc_r+0x36>
 80096a0:	4634      	mov	r4, r6
 80096a2:	6876      	ldr	r6, [r6, #4]
 80096a4:	e7b4      	b.n	8009610 <_malloc_r+0x4c>
 80096a6:	4613      	mov	r3, r2
 80096a8:	e7cc      	b.n	8009644 <_malloc_r+0x80>
 80096aa:	230c      	movs	r3, #12
 80096ac:	603b      	str	r3, [r7, #0]
 80096ae:	4638      	mov	r0, r7
 80096b0:	f000 f80e 	bl	80096d0 <__malloc_unlock>
 80096b4:	e797      	b.n	80095e6 <_malloc_r+0x22>
 80096b6:	6025      	str	r5, [r4, #0]
 80096b8:	e7dc      	b.n	8009674 <_malloc_r+0xb0>
 80096ba:	605b      	str	r3, [r3, #4]
 80096bc:	deff      	udf	#255	; 0xff
 80096be:	bf00      	nop
 80096c0:	2000167c 	.word	0x2000167c

080096c4 <__malloc_lock>:
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <__malloc_lock+0x8>)
 80096c6:	f000 b86b 	b.w	80097a0 <__retarget_lock_acquire_recursive>
 80096ca:	bf00      	nop
 80096cc:	200017c0 	.word	0x200017c0

080096d0 <__malloc_unlock>:
 80096d0:	4801      	ldr	r0, [pc, #4]	; (80096d8 <__malloc_unlock+0x8>)
 80096d2:	f000 b866 	b.w	80097a2 <__retarget_lock_release_recursive>
 80096d6:	bf00      	nop
 80096d8:	200017c0 	.word	0x200017c0

080096dc <siprintf>:
 80096dc:	b40e      	push	{r1, r2, r3}
 80096de:	b500      	push	{lr}
 80096e0:	b09c      	sub	sp, #112	; 0x70
 80096e2:	ab1d      	add	r3, sp, #116	; 0x74
 80096e4:	9002      	str	r0, [sp, #8]
 80096e6:	9006      	str	r0, [sp, #24]
 80096e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096ec:	4809      	ldr	r0, [pc, #36]	; (8009714 <siprintf+0x38>)
 80096ee:	9107      	str	r1, [sp, #28]
 80096f0:	9104      	str	r1, [sp, #16]
 80096f2:	4909      	ldr	r1, [pc, #36]	; (8009718 <siprintf+0x3c>)
 80096f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f8:	9105      	str	r1, [sp, #20]
 80096fa:	6800      	ldr	r0, [r0, #0]
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	a902      	add	r1, sp, #8
 8009700:	f000 f8f6 	bl	80098f0 <_svfiprintf_r>
 8009704:	9b02      	ldr	r3, [sp, #8]
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
 800970a:	b01c      	add	sp, #112	; 0x70
 800970c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009710:	b003      	add	sp, #12
 8009712:	4770      	bx	lr
 8009714:	20000148 	.word	0x20000148
 8009718:	ffff0208 	.word	0xffff0208

0800971c <memset>:
 800971c:	4402      	add	r2, r0
 800971e:	4603      	mov	r3, r0
 8009720:	4293      	cmp	r3, r2
 8009722:	d100      	bne.n	8009726 <memset+0xa>
 8009724:	4770      	bx	lr
 8009726:	f803 1b01 	strb.w	r1, [r3], #1
 800972a:	e7f9      	b.n	8009720 <memset+0x4>

0800972c <_sbrk_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d06      	ldr	r5, [pc, #24]	; (8009748 <_sbrk_r+0x1c>)
 8009730:	2300      	movs	r3, #0
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	f7f7 fa36 	bl	8000ba8 <_sbrk>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_sbrk_r+0x1a>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_sbrk_r+0x1a>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	200017bc 	.word	0x200017bc

0800974c <__errno>:
 800974c:	4b01      	ldr	r3, [pc, #4]	; (8009754 <__errno+0x8>)
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20000148 	.word	0x20000148

08009758 <__libc_init_array>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	4d0d      	ldr	r5, [pc, #52]	; (8009790 <__libc_init_array+0x38>)
 800975c:	4c0d      	ldr	r4, [pc, #52]	; (8009794 <__libc_init_array+0x3c>)
 800975e:	1b64      	subs	r4, r4, r5
 8009760:	10a4      	asrs	r4, r4, #2
 8009762:	2600      	movs	r6, #0
 8009764:	42a6      	cmp	r6, r4
 8009766:	d109      	bne.n	800977c <__libc_init_array+0x24>
 8009768:	4d0b      	ldr	r5, [pc, #44]	; (8009798 <__libc_init_array+0x40>)
 800976a:	4c0c      	ldr	r4, [pc, #48]	; (800979c <__libc_init_array+0x44>)
 800976c:	f000 fbae 	bl	8009ecc <_init>
 8009770:	1b64      	subs	r4, r4, r5
 8009772:	10a4      	asrs	r4, r4, #2
 8009774:	2600      	movs	r6, #0
 8009776:	42a6      	cmp	r6, r4
 8009778:	d105      	bne.n	8009786 <__libc_init_array+0x2e>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009780:	4798      	blx	r3
 8009782:	3601      	adds	r6, #1
 8009784:	e7ee      	b.n	8009764 <__libc_init_array+0xc>
 8009786:	f855 3b04 	ldr.w	r3, [r5], #4
 800978a:	4798      	blx	r3
 800978c:	3601      	adds	r6, #1
 800978e:	e7f2      	b.n	8009776 <__libc_init_array+0x1e>
 8009790:	0800a004 	.word	0x0800a004
 8009794:	0800a004 	.word	0x0800a004
 8009798:	0800a004 	.word	0x0800a004
 800979c:	0800a008 	.word	0x0800a008

080097a0 <__retarget_lock_acquire_recursive>:
 80097a0:	4770      	bx	lr

080097a2 <__retarget_lock_release_recursive>:
 80097a2:	4770      	bx	lr

080097a4 <_free_r>:
 80097a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097a6:	2900      	cmp	r1, #0
 80097a8:	d044      	beq.n	8009834 <_free_r+0x90>
 80097aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ae:	9001      	str	r0, [sp, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f1a1 0404 	sub.w	r4, r1, #4
 80097b6:	bfb8      	it	lt
 80097b8:	18e4      	addlt	r4, r4, r3
 80097ba:	f7ff ff83 	bl	80096c4 <__malloc_lock>
 80097be:	4a1e      	ldr	r2, [pc, #120]	; (8009838 <_free_r+0x94>)
 80097c0:	9801      	ldr	r0, [sp, #4]
 80097c2:	6813      	ldr	r3, [r2, #0]
 80097c4:	b933      	cbnz	r3, 80097d4 <_free_r+0x30>
 80097c6:	6063      	str	r3, [r4, #4]
 80097c8:	6014      	str	r4, [r2, #0]
 80097ca:	b003      	add	sp, #12
 80097cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097d0:	f7ff bf7e 	b.w	80096d0 <__malloc_unlock>
 80097d4:	42a3      	cmp	r3, r4
 80097d6:	d908      	bls.n	80097ea <_free_r+0x46>
 80097d8:	6825      	ldr	r5, [r4, #0]
 80097da:	1961      	adds	r1, r4, r5
 80097dc:	428b      	cmp	r3, r1
 80097de:	bf01      	itttt	eq
 80097e0:	6819      	ldreq	r1, [r3, #0]
 80097e2:	685b      	ldreq	r3, [r3, #4]
 80097e4:	1949      	addeq	r1, r1, r5
 80097e6:	6021      	streq	r1, [r4, #0]
 80097e8:	e7ed      	b.n	80097c6 <_free_r+0x22>
 80097ea:	461a      	mov	r2, r3
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	b10b      	cbz	r3, 80097f4 <_free_r+0x50>
 80097f0:	42a3      	cmp	r3, r4
 80097f2:	d9fa      	bls.n	80097ea <_free_r+0x46>
 80097f4:	6811      	ldr	r1, [r2, #0]
 80097f6:	1855      	adds	r5, r2, r1
 80097f8:	42a5      	cmp	r5, r4
 80097fa:	d10b      	bne.n	8009814 <_free_r+0x70>
 80097fc:	6824      	ldr	r4, [r4, #0]
 80097fe:	4421      	add	r1, r4
 8009800:	1854      	adds	r4, r2, r1
 8009802:	42a3      	cmp	r3, r4
 8009804:	6011      	str	r1, [r2, #0]
 8009806:	d1e0      	bne.n	80097ca <_free_r+0x26>
 8009808:	681c      	ldr	r4, [r3, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	6053      	str	r3, [r2, #4]
 800980e:	440c      	add	r4, r1
 8009810:	6014      	str	r4, [r2, #0]
 8009812:	e7da      	b.n	80097ca <_free_r+0x26>
 8009814:	d902      	bls.n	800981c <_free_r+0x78>
 8009816:	230c      	movs	r3, #12
 8009818:	6003      	str	r3, [r0, #0]
 800981a:	e7d6      	b.n	80097ca <_free_r+0x26>
 800981c:	6825      	ldr	r5, [r4, #0]
 800981e:	1961      	adds	r1, r4, r5
 8009820:	428b      	cmp	r3, r1
 8009822:	bf04      	itt	eq
 8009824:	6819      	ldreq	r1, [r3, #0]
 8009826:	685b      	ldreq	r3, [r3, #4]
 8009828:	6063      	str	r3, [r4, #4]
 800982a:	bf04      	itt	eq
 800982c:	1949      	addeq	r1, r1, r5
 800982e:	6021      	streq	r1, [r4, #0]
 8009830:	6054      	str	r4, [r2, #4]
 8009832:	e7ca      	b.n	80097ca <_free_r+0x26>
 8009834:	b003      	add	sp, #12
 8009836:	bd30      	pop	{r4, r5, pc}
 8009838:	2000167c 	.word	0x2000167c

0800983c <__ssputs_r>:
 800983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009840:	688e      	ldr	r6, [r1, #8]
 8009842:	461f      	mov	r7, r3
 8009844:	42be      	cmp	r6, r7
 8009846:	680b      	ldr	r3, [r1, #0]
 8009848:	4682      	mov	sl, r0
 800984a:	460c      	mov	r4, r1
 800984c:	4690      	mov	r8, r2
 800984e:	d82c      	bhi.n	80098aa <__ssputs_r+0x6e>
 8009850:	898a      	ldrh	r2, [r1, #12]
 8009852:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009856:	d026      	beq.n	80098a6 <__ssputs_r+0x6a>
 8009858:	6965      	ldr	r5, [r4, #20]
 800985a:	6909      	ldr	r1, [r1, #16]
 800985c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009860:	eba3 0901 	sub.w	r9, r3, r1
 8009864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009868:	1c7b      	adds	r3, r7, #1
 800986a:	444b      	add	r3, r9
 800986c:	106d      	asrs	r5, r5, #1
 800986e:	429d      	cmp	r5, r3
 8009870:	bf38      	it	cc
 8009872:	461d      	movcc	r5, r3
 8009874:	0553      	lsls	r3, r2, #21
 8009876:	d527      	bpl.n	80098c8 <__ssputs_r+0x8c>
 8009878:	4629      	mov	r1, r5
 800987a:	f7ff fea3 	bl	80095c4 <_malloc_r>
 800987e:	4606      	mov	r6, r0
 8009880:	b360      	cbz	r0, 80098dc <__ssputs_r+0xa0>
 8009882:	6921      	ldr	r1, [r4, #16]
 8009884:	464a      	mov	r2, r9
 8009886:	f000 fadb 	bl	8009e40 <memcpy>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	6126      	str	r6, [r4, #16]
 8009898:	6165      	str	r5, [r4, #20]
 800989a:	444e      	add	r6, r9
 800989c:	eba5 0509 	sub.w	r5, r5, r9
 80098a0:	6026      	str	r6, [r4, #0]
 80098a2:	60a5      	str	r5, [r4, #8]
 80098a4:	463e      	mov	r6, r7
 80098a6:	42be      	cmp	r6, r7
 80098a8:	d900      	bls.n	80098ac <__ssputs_r+0x70>
 80098aa:	463e      	mov	r6, r7
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	4632      	mov	r2, r6
 80098b0:	4641      	mov	r1, r8
 80098b2:	f000 faab 	bl	8009e0c <memmove>
 80098b6:	68a3      	ldr	r3, [r4, #8]
 80098b8:	1b9b      	subs	r3, r3, r6
 80098ba:	60a3      	str	r3, [r4, #8]
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	4433      	add	r3, r6
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	2000      	movs	r0, #0
 80098c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c8:	462a      	mov	r2, r5
 80098ca:	f000 fac7 	bl	8009e5c <_realloc_r>
 80098ce:	4606      	mov	r6, r0
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d1e0      	bne.n	8009896 <__ssputs_r+0x5a>
 80098d4:	6921      	ldr	r1, [r4, #16]
 80098d6:	4650      	mov	r0, sl
 80098d8:	f7ff ff64 	bl	80097a4 <_free_r>
 80098dc:	230c      	movs	r3, #12
 80098de:	f8ca 3000 	str.w	r3, [sl]
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098ee:	e7e9      	b.n	80098c4 <__ssputs_r+0x88>

080098f0 <_svfiprintf_r>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	4698      	mov	r8, r3
 80098f6:	898b      	ldrh	r3, [r1, #12]
 80098f8:	061b      	lsls	r3, r3, #24
 80098fa:	b09d      	sub	sp, #116	; 0x74
 80098fc:	4607      	mov	r7, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	4614      	mov	r4, r2
 8009902:	d50e      	bpl.n	8009922 <_svfiprintf_r+0x32>
 8009904:	690b      	ldr	r3, [r1, #16]
 8009906:	b963      	cbnz	r3, 8009922 <_svfiprintf_r+0x32>
 8009908:	2140      	movs	r1, #64	; 0x40
 800990a:	f7ff fe5b 	bl	80095c4 <_malloc_r>
 800990e:	6028      	str	r0, [r5, #0]
 8009910:	6128      	str	r0, [r5, #16]
 8009912:	b920      	cbnz	r0, 800991e <_svfiprintf_r+0x2e>
 8009914:	230c      	movs	r3, #12
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800991c:	e0d0      	b.n	8009ac0 <_svfiprintf_r+0x1d0>
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	616b      	str	r3, [r5, #20]
 8009922:	2300      	movs	r3, #0
 8009924:	9309      	str	r3, [sp, #36]	; 0x24
 8009926:	2320      	movs	r3, #32
 8009928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800992c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009930:	2330      	movs	r3, #48	; 0x30
 8009932:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ad8 <_svfiprintf_r+0x1e8>
 8009936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800993a:	f04f 0901 	mov.w	r9, #1
 800993e:	4623      	mov	r3, r4
 8009940:	469a      	mov	sl, r3
 8009942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009946:	b10a      	cbz	r2, 800994c <_svfiprintf_r+0x5c>
 8009948:	2a25      	cmp	r2, #37	; 0x25
 800994a:	d1f9      	bne.n	8009940 <_svfiprintf_r+0x50>
 800994c:	ebba 0b04 	subs.w	fp, sl, r4
 8009950:	d00b      	beq.n	800996a <_svfiprintf_r+0x7a>
 8009952:	465b      	mov	r3, fp
 8009954:	4622      	mov	r2, r4
 8009956:	4629      	mov	r1, r5
 8009958:	4638      	mov	r0, r7
 800995a:	f7ff ff6f 	bl	800983c <__ssputs_r>
 800995e:	3001      	adds	r0, #1
 8009960:	f000 80a9 	beq.w	8009ab6 <_svfiprintf_r+0x1c6>
 8009964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009966:	445a      	add	r2, fp
 8009968:	9209      	str	r2, [sp, #36]	; 0x24
 800996a:	f89a 3000 	ldrb.w	r3, [sl]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80a1 	beq.w	8009ab6 <_svfiprintf_r+0x1c6>
 8009974:	2300      	movs	r3, #0
 8009976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800997a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800997e:	f10a 0a01 	add.w	sl, sl, #1
 8009982:	9304      	str	r3, [sp, #16]
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800998a:	931a      	str	r3, [sp, #104]	; 0x68
 800998c:	4654      	mov	r4, sl
 800998e:	2205      	movs	r2, #5
 8009990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009994:	4850      	ldr	r0, [pc, #320]	; (8009ad8 <_svfiprintf_r+0x1e8>)
 8009996:	f7f6 fc2b 	bl	80001f0 <memchr>
 800999a:	9a04      	ldr	r2, [sp, #16]
 800999c:	b9d8      	cbnz	r0, 80099d6 <_svfiprintf_r+0xe6>
 800999e:	06d0      	lsls	r0, r2, #27
 80099a0:	bf44      	itt	mi
 80099a2:	2320      	movmi	r3, #32
 80099a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a8:	0711      	lsls	r1, r2, #28
 80099aa:	bf44      	itt	mi
 80099ac:	232b      	movmi	r3, #43	; 0x2b
 80099ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b2:	f89a 3000 	ldrb.w	r3, [sl]
 80099b6:	2b2a      	cmp	r3, #42	; 0x2a
 80099b8:	d015      	beq.n	80099e6 <_svfiprintf_r+0xf6>
 80099ba:	9a07      	ldr	r2, [sp, #28]
 80099bc:	4654      	mov	r4, sl
 80099be:	2000      	movs	r0, #0
 80099c0:	f04f 0c0a 	mov.w	ip, #10
 80099c4:	4621      	mov	r1, r4
 80099c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099ca:	3b30      	subs	r3, #48	; 0x30
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	d94d      	bls.n	8009a6c <_svfiprintf_r+0x17c>
 80099d0:	b1b0      	cbz	r0, 8009a00 <_svfiprintf_r+0x110>
 80099d2:	9207      	str	r2, [sp, #28]
 80099d4:	e014      	b.n	8009a00 <_svfiprintf_r+0x110>
 80099d6:	eba0 0308 	sub.w	r3, r0, r8
 80099da:	fa09 f303 	lsl.w	r3, r9, r3
 80099de:	4313      	orrs	r3, r2
 80099e0:	9304      	str	r3, [sp, #16]
 80099e2:	46a2      	mov	sl, r4
 80099e4:	e7d2      	b.n	800998c <_svfiprintf_r+0x9c>
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	1d19      	adds	r1, r3, #4
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	9103      	str	r1, [sp, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bfbb      	ittet	lt
 80099f2:	425b      	neglt	r3, r3
 80099f4:	f042 0202 	orrlt.w	r2, r2, #2
 80099f8:	9307      	strge	r3, [sp, #28]
 80099fa:	9307      	strlt	r3, [sp, #28]
 80099fc:	bfb8      	it	lt
 80099fe:	9204      	strlt	r2, [sp, #16]
 8009a00:	7823      	ldrb	r3, [r4, #0]
 8009a02:	2b2e      	cmp	r3, #46	; 0x2e
 8009a04:	d10c      	bne.n	8009a20 <_svfiprintf_r+0x130>
 8009a06:	7863      	ldrb	r3, [r4, #1]
 8009a08:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0a:	d134      	bne.n	8009a76 <_svfiprintf_r+0x186>
 8009a0c:	9b03      	ldr	r3, [sp, #12]
 8009a0e:	1d1a      	adds	r2, r3, #4
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	9203      	str	r2, [sp, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bfb8      	it	lt
 8009a18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a1c:	3402      	adds	r4, #2
 8009a1e:	9305      	str	r3, [sp, #20]
 8009a20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ae8 <_svfiprintf_r+0x1f8>
 8009a24:	7821      	ldrb	r1, [r4, #0]
 8009a26:	2203      	movs	r2, #3
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f7f6 fbe1 	bl	80001f0 <memchr>
 8009a2e:	b138      	cbz	r0, 8009a40 <_svfiprintf_r+0x150>
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	eba0 000a 	sub.w	r0, r0, sl
 8009a36:	2240      	movs	r2, #64	; 0x40
 8009a38:	4082      	lsls	r2, r0
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	3401      	adds	r4, #1
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a44:	4825      	ldr	r0, [pc, #148]	; (8009adc <_svfiprintf_r+0x1ec>)
 8009a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a4a:	2206      	movs	r2, #6
 8009a4c:	f7f6 fbd0 	bl	80001f0 <memchr>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d038      	beq.n	8009ac6 <_svfiprintf_r+0x1d6>
 8009a54:	4b22      	ldr	r3, [pc, #136]	; (8009ae0 <_svfiprintf_r+0x1f0>)
 8009a56:	bb1b      	cbnz	r3, 8009aa0 <_svfiprintf_r+0x1b0>
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	3307      	adds	r3, #7
 8009a5c:	f023 0307 	bic.w	r3, r3, #7
 8009a60:	3308      	adds	r3, #8
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a66:	4433      	add	r3, r6
 8009a68:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6a:	e768      	b.n	800993e <_svfiprintf_r+0x4e>
 8009a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a70:	460c      	mov	r4, r1
 8009a72:	2001      	movs	r0, #1
 8009a74:	e7a6      	b.n	80099c4 <_svfiprintf_r+0xd4>
 8009a76:	2300      	movs	r3, #0
 8009a78:	3401      	adds	r4, #1
 8009a7a:	9305      	str	r3, [sp, #20]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f04f 0c0a 	mov.w	ip, #10
 8009a82:	4620      	mov	r0, r4
 8009a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a88:	3a30      	subs	r2, #48	; 0x30
 8009a8a:	2a09      	cmp	r2, #9
 8009a8c:	d903      	bls.n	8009a96 <_svfiprintf_r+0x1a6>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0c6      	beq.n	8009a20 <_svfiprintf_r+0x130>
 8009a92:	9105      	str	r1, [sp, #20]
 8009a94:	e7c4      	b.n	8009a20 <_svfiprintf_r+0x130>
 8009a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e7f0      	b.n	8009a82 <_svfiprintf_r+0x192>
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <_svfiprintf_r+0x1f4>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4638      	mov	r0, r7
 8009aac:	f3af 8000 	nop.w
 8009ab0:	1c42      	adds	r2, r0, #1
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	d1d6      	bne.n	8009a64 <_svfiprintf_r+0x174>
 8009ab6:	89ab      	ldrh	r3, [r5, #12]
 8009ab8:	065b      	lsls	r3, r3, #25
 8009aba:	f53f af2d 	bmi.w	8009918 <_svfiprintf_r+0x28>
 8009abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ac0:	b01d      	add	sp, #116	; 0x74
 8009ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac6:	ab03      	add	r3, sp, #12
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	462a      	mov	r2, r5
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <_svfiprintf_r+0x1f4>)
 8009ace:	a904      	add	r1, sp, #16
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f000 f879 	bl	8009bc8 <_printf_i>
 8009ad6:	e7eb      	b.n	8009ab0 <_svfiprintf_r+0x1c0>
 8009ad8:	08009fc8 	.word	0x08009fc8
 8009adc:	08009fd2 	.word	0x08009fd2
 8009ae0:	00000000 	.word	0x00000000
 8009ae4:	0800983d 	.word	0x0800983d
 8009ae8:	08009fce 	.word	0x08009fce

08009aec <_printf_common>:
 8009aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	4616      	mov	r6, r2
 8009af2:	4699      	mov	r9, r3
 8009af4:	688a      	ldr	r2, [r1, #8]
 8009af6:	690b      	ldr	r3, [r1, #16]
 8009af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	bfb8      	it	lt
 8009b00:	4613      	movlt	r3, r2
 8009b02:	6033      	str	r3, [r6, #0]
 8009b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b08:	4607      	mov	r7, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	b10a      	cbz	r2, 8009b12 <_printf_common+0x26>
 8009b0e:	3301      	adds	r3, #1
 8009b10:	6033      	str	r3, [r6, #0]
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	0699      	lsls	r1, r3, #26
 8009b16:	bf42      	ittt	mi
 8009b18:	6833      	ldrmi	r3, [r6, #0]
 8009b1a:	3302      	addmi	r3, #2
 8009b1c:	6033      	strmi	r3, [r6, #0]
 8009b1e:	6825      	ldr	r5, [r4, #0]
 8009b20:	f015 0506 	ands.w	r5, r5, #6
 8009b24:	d106      	bne.n	8009b34 <_printf_common+0x48>
 8009b26:	f104 0a19 	add.w	sl, r4, #25
 8009b2a:	68e3      	ldr	r3, [r4, #12]
 8009b2c:	6832      	ldr	r2, [r6, #0]
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dc26      	bgt.n	8009b82 <_printf_common+0x96>
 8009b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b38:	1e13      	subs	r3, r2, #0
 8009b3a:	6822      	ldr	r2, [r4, #0]
 8009b3c:	bf18      	it	ne
 8009b3e:	2301      	movne	r3, #1
 8009b40:	0692      	lsls	r2, r2, #26
 8009b42:	d42b      	bmi.n	8009b9c <_printf_common+0xb0>
 8009b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b48:	4649      	mov	r1, r9
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	47c0      	blx	r8
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d01e      	beq.n	8009b90 <_printf_common+0xa4>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	6922      	ldr	r2, [r4, #16]
 8009b56:	f003 0306 	and.w	r3, r3, #6
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	bf02      	ittt	eq
 8009b5e:	68e5      	ldreq	r5, [r4, #12]
 8009b60:	6833      	ldreq	r3, [r6, #0]
 8009b62:	1aed      	subeq	r5, r5, r3
 8009b64:	68a3      	ldr	r3, [r4, #8]
 8009b66:	bf0c      	ite	eq
 8009b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b6c:	2500      	movne	r5, #0
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bfc4      	itt	gt
 8009b72:	1a9b      	subgt	r3, r3, r2
 8009b74:	18ed      	addgt	r5, r5, r3
 8009b76:	2600      	movs	r6, #0
 8009b78:	341a      	adds	r4, #26
 8009b7a:	42b5      	cmp	r5, r6
 8009b7c:	d11a      	bne.n	8009bb4 <_printf_common+0xc8>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e008      	b.n	8009b94 <_printf_common+0xa8>
 8009b82:	2301      	movs	r3, #1
 8009b84:	4652      	mov	r2, sl
 8009b86:	4649      	mov	r1, r9
 8009b88:	4638      	mov	r0, r7
 8009b8a:	47c0      	blx	r8
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d103      	bne.n	8009b98 <_printf_common+0xac>
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b98:	3501      	adds	r5, #1
 8009b9a:	e7c6      	b.n	8009b2a <_printf_common+0x3e>
 8009b9c:	18e1      	adds	r1, r4, r3
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	2030      	movs	r0, #48	; 0x30
 8009ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ba6:	4422      	add	r2, r4
 8009ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	e7c7      	b.n	8009b44 <_printf_common+0x58>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4638      	mov	r0, r7
 8009bbc:	47c0      	blx	r8
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d0e6      	beq.n	8009b90 <_printf_common+0xa4>
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7d9      	b.n	8009b7a <_printf_common+0x8e>
	...

08009bc8 <_printf_i>:
 8009bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	7e0f      	ldrb	r7, [r1, #24]
 8009bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bd0:	2f78      	cmp	r7, #120	; 0x78
 8009bd2:	4691      	mov	r9, r2
 8009bd4:	4680      	mov	r8, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	469a      	mov	sl, r3
 8009bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bde:	d807      	bhi.n	8009bf0 <_printf_i+0x28>
 8009be0:	2f62      	cmp	r7, #98	; 0x62
 8009be2:	d80a      	bhi.n	8009bfa <_printf_i+0x32>
 8009be4:	2f00      	cmp	r7, #0
 8009be6:	f000 80d4 	beq.w	8009d92 <_printf_i+0x1ca>
 8009bea:	2f58      	cmp	r7, #88	; 0x58
 8009bec:	f000 80c0 	beq.w	8009d70 <_printf_i+0x1a8>
 8009bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bf8:	e03a      	b.n	8009c70 <_printf_i+0xa8>
 8009bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bfe:	2b15      	cmp	r3, #21
 8009c00:	d8f6      	bhi.n	8009bf0 <_printf_i+0x28>
 8009c02:	a101      	add	r1, pc, #4	; (adr r1, 8009c08 <_printf_i+0x40>)
 8009c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c08:	08009c61 	.word	0x08009c61
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009bf1 	.word	0x08009bf1
 8009c14:	08009bf1 	.word	0x08009bf1
 8009c18:	08009bf1 	.word	0x08009bf1
 8009c1c:	08009bf1 	.word	0x08009bf1
 8009c20:	08009c75 	.word	0x08009c75
 8009c24:	08009bf1 	.word	0x08009bf1
 8009c28:	08009bf1 	.word	0x08009bf1
 8009c2c:	08009bf1 	.word	0x08009bf1
 8009c30:	08009bf1 	.word	0x08009bf1
 8009c34:	08009d79 	.word	0x08009d79
 8009c38:	08009ca1 	.word	0x08009ca1
 8009c3c:	08009d33 	.word	0x08009d33
 8009c40:	08009bf1 	.word	0x08009bf1
 8009c44:	08009bf1 	.word	0x08009bf1
 8009c48:	08009d9b 	.word	0x08009d9b
 8009c4c:	08009bf1 	.word	0x08009bf1
 8009c50:	08009ca1 	.word	0x08009ca1
 8009c54:	08009bf1 	.word	0x08009bf1
 8009c58:	08009bf1 	.word	0x08009bf1
 8009c5c:	08009d3b 	.word	0x08009d3b
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	1d1a      	adds	r2, r3, #4
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	602a      	str	r2, [r5, #0]
 8009c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c70:	2301      	movs	r3, #1
 8009c72:	e09f      	b.n	8009db4 <_printf_i+0x1ec>
 8009c74:	6820      	ldr	r0, [r4, #0]
 8009c76:	682b      	ldr	r3, [r5, #0]
 8009c78:	0607      	lsls	r7, r0, #24
 8009c7a:	f103 0104 	add.w	r1, r3, #4
 8009c7e:	6029      	str	r1, [r5, #0]
 8009c80:	d501      	bpl.n	8009c86 <_printf_i+0xbe>
 8009c82:	681e      	ldr	r6, [r3, #0]
 8009c84:	e003      	b.n	8009c8e <_printf_i+0xc6>
 8009c86:	0646      	lsls	r6, r0, #25
 8009c88:	d5fb      	bpl.n	8009c82 <_printf_i+0xba>
 8009c8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	da03      	bge.n	8009c9a <_printf_i+0xd2>
 8009c92:	232d      	movs	r3, #45	; 0x2d
 8009c94:	4276      	negs	r6, r6
 8009c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c9a:	485a      	ldr	r0, [pc, #360]	; (8009e04 <_printf_i+0x23c>)
 8009c9c:	230a      	movs	r3, #10
 8009c9e:	e012      	b.n	8009cc6 <_printf_i+0xfe>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	6820      	ldr	r0, [r4, #0]
 8009ca4:	1d19      	adds	r1, r3, #4
 8009ca6:	6029      	str	r1, [r5, #0]
 8009ca8:	0605      	lsls	r5, r0, #24
 8009caa:	d501      	bpl.n	8009cb0 <_printf_i+0xe8>
 8009cac:	681e      	ldr	r6, [r3, #0]
 8009cae:	e002      	b.n	8009cb6 <_printf_i+0xee>
 8009cb0:	0641      	lsls	r1, r0, #25
 8009cb2:	d5fb      	bpl.n	8009cac <_printf_i+0xe4>
 8009cb4:	881e      	ldrh	r6, [r3, #0]
 8009cb6:	4853      	ldr	r0, [pc, #332]	; (8009e04 <_printf_i+0x23c>)
 8009cb8:	2f6f      	cmp	r7, #111	; 0x6f
 8009cba:	bf0c      	ite	eq
 8009cbc:	2308      	moveq	r3, #8
 8009cbe:	230a      	movne	r3, #10
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cc6:	6865      	ldr	r5, [r4, #4]
 8009cc8:	60a5      	str	r5, [r4, #8]
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	bfa2      	ittt	ge
 8009cce:	6821      	ldrge	r1, [r4, #0]
 8009cd0:	f021 0104 	bicge.w	r1, r1, #4
 8009cd4:	6021      	strge	r1, [r4, #0]
 8009cd6:	b90e      	cbnz	r6, 8009cdc <_printf_i+0x114>
 8009cd8:	2d00      	cmp	r5, #0
 8009cda:	d04b      	beq.n	8009d74 <_printf_i+0x1ac>
 8009cdc:	4615      	mov	r5, r2
 8009cde:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ce2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ce6:	5dc7      	ldrb	r7, [r0, r7]
 8009ce8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cec:	4637      	mov	r7, r6
 8009cee:	42bb      	cmp	r3, r7
 8009cf0:	460e      	mov	r6, r1
 8009cf2:	d9f4      	bls.n	8009cde <_printf_i+0x116>
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d10b      	bne.n	8009d10 <_printf_i+0x148>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	07de      	lsls	r6, r3, #31
 8009cfc:	d508      	bpl.n	8009d10 <_printf_i+0x148>
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	6861      	ldr	r1, [r4, #4]
 8009d02:	4299      	cmp	r1, r3
 8009d04:	bfde      	ittt	le
 8009d06:	2330      	movle	r3, #48	; 0x30
 8009d08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d10:	1b52      	subs	r2, r2, r5
 8009d12:	6122      	str	r2, [r4, #16]
 8009d14:	f8cd a000 	str.w	sl, [sp]
 8009d18:	464b      	mov	r3, r9
 8009d1a:	aa03      	add	r2, sp, #12
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4640      	mov	r0, r8
 8009d20:	f7ff fee4 	bl	8009aec <_printf_common>
 8009d24:	3001      	adds	r0, #1
 8009d26:	d14a      	bne.n	8009dbe <_printf_i+0x1f6>
 8009d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d2c:	b004      	add	sp, #16
 8009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	f043 0320 	orr.w	r3, r3, #32
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	4833      	ldr	r0, [pc, #204]	; (8009e08 <_printf_i+0x240>)
 8009d3c:	2778      	movs	r7, #120	; 0x78
 8009d3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	6829      	ldr	r1, [r5, #0]
 8009d46:	061f      	lsls	r7, r3, #24
 8009d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d4c:	d402      	bmi.n	8009d54 <_printf_i+0x18c>
 8009d4e:	065f      	lsls	r7, r3, #25
 8009d50:	bf48      	it	mi
 8009d52:	b2b6      	uxthmi	r6, r6
 8009d54:	07df      	lsls	r7, r3, #31
 8009d56:	bf48      	it	mi
 8009d58:	f043 0320 	orrmi.w	r3, r3, #32
 8009d5c:	6029      	str	r1, [r5, #0]
 8009d5e:	bf48      	it	mi
 8009d60:	6023      	strmi	r3, [r4, #0]
 8009d62:	b91e      	cbnz	r6, 8009d6c <_printf_i+0x1a4>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	f023 0320 	bic.w	r3, r3, #32
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	e7a7      	b.n	8009cc0 <_printf_i+0xf8>
 8009d70:	4824      	ldr	r0, [pc, #144]	; (8009e04 <_printf_i+0x23c>)
 8009d72:	e7e4      	b.n	8009d3e <_printf_i+0x176>
 8009d74:	4615      	mov	r5, r2
 8009d76:	e7bd      	b.n	8009cf4 <_printf_i+0x12c>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	6826      	ldr	r6, [r4, #0]
 8009d7c:	6961      	ldr	r1, [r4, #20]
 8009d7e:	1d18      	adds	r0, r3, #4
 8009d80:	6028      	str	r0, [r5, #0]
 8009d82:	0635      	lsls	r5, r6, #24
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	d501      	bpl.n	8009d8c <_printf_i+0x1c4>
 8009d88:	6019      	str	r1, [r3, #0]
 8009d8a:	e002      	b.n	8009d92 <_printf_i+0x1ca>
 8009d8c:	0670      	lsls	r0, r6, #25
 8009d8e:	d5fb      	bpl.n	8009d88 <_printf_i+0x1c0>
 8009d90:	8019      	strh	r1, [r3, #0]
 8009d92:	2300      	movs	r3, #0
 8009d94:	6123      	str	r3, [r4, #16]
 8009d96:	4615      	mov	r5, r2
 8009d98:	e7bc      	b.n	8009d14 <_printf_i+0x14c>
 8009d9a:	682b      	ldr	r3, [r5, #0]
 8009d9c:	1d1a      	adds	r2, r3, #4
 8009d9e:	602a      	str	r2, [r5, #0]
 8009da0:	681d      	ldr	r5, [r3, #0]
 8009da2:	6862      	ldr	r2, [r4, #4]
 8009da4:	2100      	movs	r1, #0
 8009da6:	4628      	mov	r0, r5
 8009da8:	f7f6 fa22 	bl	80001f0 <memchr>
 8009dac:	b108      	cbz	r0, 8009db2 <_printf_i+0x1ea>
 8009dae:	1b40      	subs	r0, r0, r5
 8009db0:	6060      	str	r0, [r4, #4]
 8009db2:	6863      	ldr	r3, [r4, #4]
 8009db4:	6123      	str	r3, [r4, #16]
 8009db6:	2300      	movs	r3, #0
 8009db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dbc:	e7aa      	b.n	8009d14 <_printf_i+0x14c>
 8009dbe:	6923      	ldr	r3, [r4, #16]
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	47d0      	blx	sl
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d0ad      	beq.n	8009d28 <_printf_i+0x160>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	079b      	lsls	r3, r3, #30
 8009dd0:	d413      	bmi.n	8009dfa <_printf_i+0x232>
 8009dd2:	68e0      	ldr	r0, [r4, #12]
 8009dd4:	9b03      	ldr	r3, [sp, #12]
 8009dd6:	4298      	cmp	r0, r3
 8009dd8:	bfb8      	it	lt
 8009dda:	4618      	movlt	r0, r3
 8009ddc:	e7a6      	b.n	8009d2c <_printf_i+0x164>
 8009dde:	2301      	movs	r3, #1
 8009de0:	4632      	mov	r2, r6
 8009de2:	4649      	mov	r1, r9
 8009de4:	4640      	mov	r0, r8
 8009de6:	47d0      	blx	sl
 8009de8:	3001      	adds	r0, #1
 8009dea:	d09d      	beq.n	8009d28 <_printf_i+0x160>
 8009dec:	3501      	adds	r5, #1
 8009dee:	68e3      	ldr	r3, [r4, #12]
 8009df0:	9903      	ldr	r1, [sp, #12]
 8009df2:	1a5b      	subs	r3, r3, r1
 8009df4:	42ab      	cmp	r3, r5
 8009df6:	dcf2      	bgt.n	8009dde <_printf_i+0x216>
 8009df8:	e7eb      	b.n	8009dd2 <_printf_i+0x20a>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	f104 0619 	add.w	r6, r4, #25
 8009e00:	e7f5      	b.n	8009dee <_printf_i+0x226>
 8009e02:	bf00      	nop
 8009e04:	08009fd9 	.word	0x08009fd9
 8009e08:	08009fea 	.word	0x08009fea

08009e0c <memmove>:
 8009e0c:	4288      	cmp	r0, r1
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	eb01 0402 	add.w	r4, r1, r2
 8009e14:	d902      	bls.n	8009e1c <memmove+0x10>
 8009e16:	4284      	cmp	r4, r0
 8009e18:	4623      	mov	r3, r4
 8009e1a:	d807      	bhi.n	8009e2c <memmove+0x20>
 8009e1c:	1e43      	subs	r3, r0, #1
 8009e1e:	42a1      	cmp	r1, r4
 8009e20:	d008      	beq.n	8009e34 <memmove+0x28>
 8009e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e2a:	e7f8      	b.n	8009e1e <memmove+0x12>
 8009e2c:	4402      	add	r2, r0
 8009e2e:	4601      	mov	r1, r0
 8009e30:	428a      	cmp	r2, r1
 8009e32:	d100      	bne.n	8009e36 <memmove+0x2a>
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e3e:	e7f7      	b.n	8009e30 <memmove+0x24>

08009e40 <memcpy>:
 8009e40:	440a      	add	r2, r1
 8009e42:	4291      	cmp	r1, r2
 8009e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009e48:	d100      	bne.n	8009e4c <memcpy+0xc>
 8009e4a:	4770      	bx	lr
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e56:	4291      	cmp	r1, r2
 8009e58:	d1f9      	bne.n	8009e4e <memcpy+0xe>
 8009e5a:	bd10      	pop	{r4, pc}

08009e5c <_realloc_r>:
 8009e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e60:	4680      	mov	r8, r0
 8009e62:	4614      	mov	r4, r2
 8009e64:	460e      	mov	r6, r1
 8009e66:	b921      	cbnz	r1, 8009e72 <_realloc_r+0x16>
 8009e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	f7ff bba9 	b.w	80095c4 <_malloc_r>
 8009e72:	b92a      	cbnz	r2, 8009e80 <_realloc_r+0x24>
 8009e74:	f7ff fc96 	bl	80097a4 <_free_r>
 8009e78:	4625      	mov	r5, r4
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e80:	f000 f81b 	bl	8009eba <_malloc_usable_size_r>
 8009e84:	4284      	cmp	r4, r0
 8009e86:	4607      	mov	r7, r0
 8009e88:	d802      	bhi.n	8009e90 <_realloc_r+0x34>
 8009e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e8e:	d812      	bhi.n	8009eb6 <_realloc_r+0x5a>
 8009e90:	4621      	mov	r1, r4
 8009e92:	4640      	mov	r0, r8
 8009e94:	f7ff fb96 	bl	80095c4 <_malloc_r>
 8009e98:	4605      	mov	r5, r0
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d0ed      	beq.n	8009e7a <_realloc_r+0x1e>
 8009e9e:	42bc      	cmp	r4, r7
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	bf28      	it	cs
 8009ea6:	463a      	movcs	r2, r7
 8009ea8:	f7ff ffca 	bl	8009e40 <memcpy>
 8009eac:	4631      	mov	r1, r6
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f7ff fc78 	bl	80097a4 <_free_r>
 8009eb4:	e7e1      	b.n	8009e7a <_realloc_r+0x1e>
 8009eb6:	4635      	mov	r5, r6
 8009eb8:	e7df      	b.n	8009e7a <_realloc_r+0x1e>

08009eba <_malloc_usable_size_r>:
 8009eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ebe:	1f18      	subs	r0, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bfbc      	itt	lt
 8009ec4:	580b      	ldrlt	r3, [r1, r0]
 8009ec6:	18c0      	addlt	r0, r0, r3
 8009ec8:	4770      	bx	lr
	...

08009ecc <_init>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_fini>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr
