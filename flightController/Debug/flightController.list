
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c4  080087c4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087cc  080087cc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087cc  080087cc  000187cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080087d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000156c  200000fc  080088d0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001668  080088d0  00021668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bf3  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d93  00000000  00000000  00039d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001186  00000000  00000000  0003f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a606  00000000  00000000  00040306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d921  00000000  00000000  0005a90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093f3c  00000000  00000000  0007822d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f30  00000000  00000000  0010c16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0011209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008744 	.word	0x08008744

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08008744 	.word	0x08008744

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <flightController_App>:
extern TIM_HandleTypeDef htim3;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    //    	strcpy((char *) str1, "Initializing Flight Controller\r\n");
    //    	LOG((uint8_t *) "Initializing Flight Controller\r\n", LOG_ERROR);
    //    	HAL_Delay(1000);
    //    }

	ESC_Init(&htim3);
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <flightController_App+0x18>)
 80004d6:	f000 fc5f 	bl	8000d98 <ESC_Init>


    while (1) {

        PWM_SetDutyCycle(&htim3, TIM_CHANNEL_ALL, 600);
 80004da:	f44f 7216 	mov.w	r2, #600	; 0x258
 80004de:	213c      	movs	r1, #60	; 0x3c
 80004e0:	4801      	ldr	r0, [pc, #4]	; (80004e8 <flightController_App+0x18>)
 80004e2:	f000 fbb5 	bl	8000c50 <PWM_SetDutyCycle>
 80004e6:	e7f8      	b.n	80004da <flightController_App+0xa>
 80004e8:	2000016c 	.word	0x2000016c

080004ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80004f0:	f000 fc78 	bl	8000de4 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80004f4:	f000 f812 	bl	800051c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80004f8:	f000 f966 	bl	80007c8 <MX_GPIO_Init>
    MX_DMA_Init();
 80004fc:	f000 f94a 	bl	8000794 <MX_DMA_Init>
    MX_USB_DEVICE_Init();
 8000500:	f007 fc0a 	bl	8007d18 <MX_USB_DEVICE_Init>
    MX_I2C1_Init();
 8000504:	f000 f874 	bl	80005f0 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000508:	f000 f91a 	bl	8000740 <MX_USART2_UART_Init>
    MX_TIM3_Init();
 800050c:	f000 f89e 	bl	800064c <MX_TIM3_Init>
    /* USER CODE BEGIN 2 */
    flightController_App();
 8000510:	f7ff ffde 	bl	80004d0 <flightController_App>
 8000514:	2300      	movs	r3, #0
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 8000516:	4618      	mov	r0, r3
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 f8de 	bl	80086ec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a20      	ldr	r2, [pc, #128]	; (80005ec <SystemClock_Config+0xd0>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 8000590:	230f      	movs	r3, #15
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8000594:	2390      	movs	r3, #144	; 0x90
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000598:	2304      	movs	r3, #4
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 800059c:	2305      	movs	r3, #5
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fc6b 	bl	8002e80 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x98>
        Error_Handler();
 80005b0:	f000 f940 	bl	8000834 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2101      	movs	r1, #1
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fecd 	bl	8003370 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
        Error_Handler();
 80005dc:	f000 f92a 	bl	8000834 <Error_Handler>
    }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f001 f865 	bl	80016fc <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000638:	f000 f8fc 	bl	8000834 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000118 	.word	0x20000118
 8000644:	40005400 	.word	0x40005400
 8000648:	00061a80 	.word	0x00061a80

0800064c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_TIM3_Init+0xec>)
 8000670:	4a32      	ldr	r2, [pc, #200]	; (800073c <MX_TIM3_Init+0xf0>)
 8000672:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 73 - 1;
 8000674:	4b30      	ldr	r3, [pc, #192]	; (8000738 <MX_TIM3_Init+0xec>)
 8000676:	2248      	movs	r2, #72	; 0x48
 8000678:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <MX_TIM3_Init+0xec>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 16384 - 1;
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_TIM3_Init+0xec>)
 8000682:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000686:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_TIM3_Init+0xec>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_TIM3_Init+0xec>)
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000694:	4828      	ldr	r0, [pc, #160]	; (8000738 <MX_TIM3_Init+0xec>)
 8000696:	f003 f84b 	bl	8003730 <HAL_TIM_PWM_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM3_Init+0x58>
        Error_Handler();
 80006a0:	f000 f8c8 	bl	8000834 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4619      	mov	r1, r3
 80006b2:	4821      	ldr	r0, [pc, #132]	; (8000738 <MX_TIM3_Init+0xec>)
 80006b4:	f003 fc30 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM3_Init+0x76>
        Error_Handler();
 80006be:	f000 f8b9 	bl	8000834 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c2:	2360      	movs	r3, #96	; 0x60
 80006c4:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	4619      	mov	r1, r3
 80006d8:	4817      	ldr	r0, [pc, #92]	; (8000738 <MX_TIM3_Init+0xec>)
 80006da:	f003 f929 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM3_Init+0x9c>
        Error_Handler();
 80006e4:	f000 f8a6 	bl	8000834 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2204      	movs	r2, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_TIM3_Init+0xec>)
 80006f0:	f003 f91e 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM3_Init+0xb2>
        Error_Handler();
 80006fa:	f000 f89b 	bl	8000834 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2208      	movs	r2, #8
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_TIM3_Init+0xec>)
 8000706:	f003 f913 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM3_Init+0xc8>
        Error_Handler();
 8000710:	f000 f890 	bl	8000834 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	220c      	movs	r2, #12
 8000718:	4619      	mov	r1, r3
 800071a:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_TIM3_Init+0xec>)
 800071c:	f003 f908 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0xde>
        Error_Handler();
 8000726:	f000 f885 	bl	8000834 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM3_Init+0xec>)
 800072c:	f000 f91c 	bl	8000968 <HAL_TIM_MspPostInit>
}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000016c 	.word	0x2000016c
 800073c:	40000400 	.word	0x40000400

08000740 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_USART2_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_USART2_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000766:	2204      	movs	r2, #4
 8000768:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x4c>)
 8000778:	f003 fc3c 	bl	8003ff4 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8000782:	f000 f857 	bl	8000834 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001b4 	.word	0x200001b4
 8000790:	40004400 	.word	0x40004400

08000794 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_DMA_Init+0x30>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <MX_DMA_Init+0x30>)
 80007a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_DMA_Init+0x30>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_GPIO_Init+0x68>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <MX_GPIO_Init+0x68>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_GPIO_Init+0x68>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MX_GPIO_Init+0x68>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_GPIO_Init+0x68>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_GPIO_Init+0x68>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <MX_GPIO_Init+0x68>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_GPIO_Init+0x68>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_I2C_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12b      	bne.n	800090e <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80008d2:	23c0      	movs	r3, #192	; 0xc0
 80008d4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	2312      	movs	r3, #18
 80008d8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e2:	2304      	movs	r3, #4
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <HAL_I2C_MspInit+0x8c>)
 80008ee:	f000 fd81 	bl	80013f4 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_I2C_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40005400 	.word	0x40005400
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400

08000924 <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * htim_pwm) {
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    if (htim_pwm->Instance == TIM3) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_TIM_PWM_MspInit+0x3c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10d      	bne.n	8000952 <HAL_TIM_PWM_MspInit+0x2e>
        /* USER CODE BEGIN TIM3_MspInit 0 */

        /* USER CODE END TIM3_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_TIM_PWM_MspInit+0x40>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <HAL_TIM_PWM_MspInit+0x40>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <HAL_TIM_PWM_MspInit+0x40>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40000400 	.word	0x40000400
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
    if (htim->Instance == TIM3) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <HAL_TIM_MspPostInit+0xa4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d13b      	bne.n	8000a02 <HAL_TIM_MspPostInit+0x9a>
        /* USER CODE BEGIN TIM3_MspPostInit 0 */

        /* USER CODE END TIM3_MspPostInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
        PA6     ------> TIM3_CH1
        PA7     ------> TIM3_CH2
        PB0     ------> TIM3_CH3
        PB1     ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80009c2:	23c0      	movs	r3, #192	; 0xc0
 80009c4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009d2:	2302      	movs	r3, #2
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <HAL_TIM_MspPostInit+0xac>)
 80009de:	f000 fd09 	bl	80013f4 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009e2:	2303      	movs	r3, #3
 80009e4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009f2:	2302      	movs	r3, #2
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <HAL_TIM_MspPostInit+0xb0>)
 80009fe:	f000 fcf9 	bl	80013f4 <HAL_GPIO_Init>

        /* USER CODE BEGIN TIM3_MspPostInit 1 */

        /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40000400 	.word	0x40000400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a30      	ldr	r2, [pc, #192]	; (8000afc <HAL_UART_MspInit+0xe0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d15a      	bne.n	8000af4 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <HAL_UART_MspInit+0xe4>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <HAL_UART_MspInit+0xe4>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <HAL_UART_MspInit+0xe4>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <HAL_UART_MspInit+0xe4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a27      	ldr	r2, [pc, #156]	; (8000b00 <HAL_UART_MspInit+0xe4>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <HAL_UART_MspInit+0xe4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000a76:	230c      	movs	r3, #12
 8000a78:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a86:	2307      	movs	r3, #7
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481c      	ldr	r0, [pc, #112]	; (8000b04 <HAL_UART_MspInit+0xe8>)
 8000a92:	f000 fcaf 	bl	80013f4 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000a98:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000a9a:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa2:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab6:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aca:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000ada:	f000 fb2b 	bl	8001134 <HAL_DMA_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_UART_MspInit+0xcc>
            Error_Handler();
 8000ae4:	f7ff fea6 	bl	8000834 <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38
 8000aee:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	200001f8 	.word	0x200001f8
 8000b0c:	40026088 	.word	0x40026088

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f994 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <OTG_FS_IRQHandler+0x10>)
 8000b6a:	f001 f85b 	bl	8001c24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000f3c 	.word	0x20000f3c

08000b78 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba2:	490e      	ldr	r1, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb8:	4c0b      	ldr	r4, [pc, #44]	; (8000be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc6:	f7ff ffd7 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f007 fd97 	bl	80086fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fc8d 	bl	80004ec <main>
  bx  lr
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000be0:	080087d4 	.word	0x080087d4
  ldr r2, =_sbss
 8000be4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000be8:	20001668 	.word	0x20001668

08000bec <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>

08000bee <PWM_Init>:
/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(
		/* BEGIN MODIFY 1 */
		TIM_HandleTypeDef * htim,
		/* END MODIFY 1 */
		uint32_t channel) {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]

    /* Check parameters */
    if (NULL == htim) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <PWM_Init+0x14>
        return false;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e022      	b.n	8000c48 <PWM_Init+0x5a>
    }
    /* BEGIN MODIFY 2 */
    if (TIM_CHANNEL_1 != channel && TIM_CHANNEL_2 != channel && TIM_CHANNEL_3 != channel && TIM_CHANNEL_4 != channel && TIM_CHANNEL_ALL != channel) {
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00d      	beq.n	8000c24 <PWM_Init+0x36>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d00a      	beq.n	8000c24 <PWM_Init+0x36>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d007      	beq.n	8000c24 <PWM_Init+0x36>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b0c      	cmp	r3, #12
 8000c18:	d004      	beq.n	8000c24 <PWM_Init+0x36>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2b3c      	cmp	r3, #60	; 0x3c
 8000c1e:	d001      	beq.n	8000c24 <PWM_Init+0x36>
    	/* END MODIFY 2 */
        return false;
 8000c20:	2300      	movs	r3, #0
 8000c22:	e011      	b.n	8000c48 <PWM_Init+0x5a>
    }

    /* Initialize timer peripheral */
    /* BEGIN MODIFY 3 */
    if(HAL_OK != HAL_TIM_PWM_Init(htim)) {
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f002 fd83 	bl	8003730 <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <PWM_Init+0x46>
    	/* END MODIFY 3 */
    	return false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e009      	b.n	8000c48 <PWM_Init+0x5a>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 4 */
    if(HAL_OK != HAL_TIM_PWM_Start(htim, channel)) {
 8000c34:	6839      	ldr	r1, [r7, #0]
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f002 fdca 	bl	80037d0 <HAL_TIM_PWM_Start>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <PWM_Init+0x58>
    	/* END MODIFY 4 */
    	return false;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <PWM_Init+0x5a>
    }

    return true;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <PWM_SetDutyCycle>:

bool_t PWM_SetDutyCycle(
		/* BEGIN MODIFY 9 */
		TIM_HandleTypeDef * htim,
		/* END MODIFY 9 */
		uint32_t channel, uint16_t dutyCycle) {
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80fb      	strh	r3, [r7, #6]

    /* Check parameters */
    if (NULL == htim) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <PWM_SetDutyCycle+0x18>
        return false;
 8000c64:	2300      	movs	r3, #0
 8000c66:	e04a      	b.n	8000cfe <PWM_SetDutyCycle+0xae>
    }
    /* BEGIN MODIFY 10 */
    if (TIM_CHANNEL_1 != channel && TIM_CHANNEL_2 != channel && TIM_CHANNEL_3 != channel && TIM_CHANNEL_4 != channel && TIM_CHANNEL_ALL != channel) {
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00d      	beq.n	8000c8a <PWM_SetDutyCycle+0x3a>
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d00a      	beq.n	8000c8a <PWM_SetDutyCycle+0x3a>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d007      	beq.n	8000c8a <PWM_SetDutyCycle+0x3a>
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2b0c      	cmp	r3, #12
 8000c7e:	d004      	beq.n	8000c8a <PWM_SetDutyCycle+0x3a>
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b3c      	cmp	r3, #60	; 0x3c
 8000c84:	d001      	beq.n	8000c8a <PWM_SetDutyCycle+0x3a>
    	/* END MODIFY 10 */
        return false;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e039      	b.n	8000cfe <PWM_SetDutyCycle+0xae>
    }
    if (dutyCycle > 16383) {
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c90:	d301      	bcc.n	8000c96 <PWM_SetDutyCycle+0x46>
        return false;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e033      	b.n	8000cfe <PWM_SetDutyCycle+0xae>
    }

    /* Set duty cycle */
    switch (channel) {
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	2b0c      	cmp	r3, #12
 8000c9a:	d82d      	bhi.n	8000cf8 <PWM_SetDutyCycle+0xa8>
 8000c9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <PWM_SetDutyCycle+0x54>)
 8000c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca2:	bf00      	nop
 8000ca4:	08000cd9 	.word	0x08000cd9
 8000ca8:	08000cf9 	.word	0x08000cf9
 8000cac:	08000cf9 	.word	0x08000cf9
 8000cb0:	08000cf9 	.word	0x08000cf9
 8000cb4:	08000ce1 	.word	0x08000ce1
 8000cb8:	08000cf9 	.word	0x08000cf9
 8000cbc:	08000cf9 	.word	0x08000cf9
 8000cc0:	08000cf9 	.word	0x08000cf9
 8000cc4:	08000ce9 	.word	0x08000ce9
 8000cc8:	08000cf9 	.word	0x08000cf9
 8000ccc:	08000cf9 	.word	0x08000cf9
 8000cd0:	08000cf9 	.word	0x08000cf9
 8000cd4:	08000cf1 	.word	0x08000cf1

    case TIM_CHANNEL_1:
    	/* BEGIN MODIFY 11 */
        TIM3->CCR1 = dutyCycle;
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <PWM_SetDutyCycle+0xbc>)
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	6353      	str	r3, [r2, #52]	; 0x34
        /* END MODIFY 11 */
        break;
 8000cde:	e00d      	b.n	8000cfc <PWM_SetDutyCycle+0xac>

    case TIM_CHANNEL_2:
    	/* BEGIN MODIFY 12 */
        TIM3->CCR2 = dutyCycle;
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <PWM_SetDutyCycle+0xbc>)
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	6393      	str	r3, [r2, #56]	; 0x38
        /* END MODIFY 12 */
        break;
 8000ce6:	e009      	b.n	8000cfc <PWM_SetDutyCycle+0xac>

    case TIM_CHANNEL_3:
    	/* BEGIN MODIFY 13 */
        TIM3->CCR3 = dutyCycle;
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <PWM_SetDutyCycle+0xbc>)
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	63d3      	str	r3, [r2, #60]	; 0x3c
        /* END MODIFY 13 */
        break;
 8000cee:	e005      	b.n	8000cfc <PWM_SetDutyCycle+0xac>

    case TIM_CHANNEL_4:
    	/* BEGIN MODIFY 14 */
        TIM3->CCR4 = dutyCycle;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <PWM_SetDutyCycle+0xbc>)
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
        /* END MODIFY 14 */
        break;
 8000cf6:	e001      	b.n	8000cfc <PWM_SetDutyCycle+0xac>

    default:
        return false;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e000      	b.n	8000cfe <PWM_SetDutyCycle+0xae>
        break;
    }

    return true;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40000400 	.word	0x40000400

08000d10 <ESC_Calibrate>:
    *pwmValue = (MAX_ESC_SPEED - MIN_ESC_SPEED) * (speed / 100) + MIN_ESC_SPEED;

    return true;
}

static bool_t ESC_Calibrate(TIM_HandleTypeDef * htim, uint32_t channel) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]

    /* Check parameters */
    if (NULL == htim) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <ESC_Calibrate+0x14>
        return false;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e035      	b.n	8000d90 <ESC_Calibrate+0x80>
    }
    if (TIM_CHANNEL_1 != channel && TIM_CHANNEL_2 != channel && TIM_CHANNEL_3 != channel && TIM_CHANNEL_4 != channel && TIM_CHANNEL_ALL != channel) {
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00d      	beq.n	8000d46 <ESC_Calibrate+0x36>
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d00a      	beq.n	8000d46 <ESC_Calibrate+0x36>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d007      	beq.n	8000d46 <ESC_Calibrate+0x36>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	d004      	beq.n	8000d46 <ESC_Calibrate+0x36>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2b3c      	cmp	r3, #60	; 0x3c
 8000d40:	d001      	beq.n	8000d46 <ESC_Calibrate+0x36>
        return false;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e024      	b.n	8000d90 <ESC_Calibrate+0x80>
    }

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(htim, TIM_CHANNEL_ALL, MAX_ESC_SPEED)) {
 8000d46:	f240 6266 	movw	r2, #1638	; 0x666
 8000d4a:	213c      	movs	r1, #60	; 0x3c
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff7f 	bl	8000c50 <PWM_SetDutyCycle>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f083 0301 	eor.w	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <ESC_Calibrate+0x52>
        return false;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e016      	b.n	8000d90 <ESC_Calibrate+0x80>
    }

    /* Wait 2 seconds */
    HAL_Delay(3000); // TODO -> NO MAGIC NUMBERS AND NO HAL FUNCTION
 8000d62:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d66:	f000 f8af 	bl	8000ec8 <HAL_Delay>

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(htim, TIM_CHANNEL_ALL, MIN_ESC_SPEED)) {
 8000d6a:	f240 3233 	movw	r2, #819	; 0x333
 8000d6e:	213c      	movs	r1, #60	; 0x3c
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff6d 	bl	8000c50 <PWM_SetDutyCycle>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f083 0301 	eor.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <ESC_Calibrate+0x76>
        return false;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e004      	b.n	8000d90 <ESC_Calibrate+0x80>
    }

    /* Wait 1 second */
    HAL_Delay(2000); // TODO -> NO MAGIC NUMBERS AND NO HAL FUNCTION
 8000d86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d8a:	f000 f89d 	bl	8000ec8 <HAL_Delay>

    return true;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t ESC_Init(TIM_HandleTypeDef * htim) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <ESC_Init+0x12>
        return false;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e018      	b.n	8000ddc <ESC_Init+0x44>
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(htim, TIM_CHANNEL_ALL)) {
 8000daa:	213c      	movs	r1, #60	; 0x3c
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff1e 	bl	8000bee <PWM_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f083 0301 	eor.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <ESC_Init+0x2a>
        return false;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e00c      	b.n	8000ddc <ESC_Init+0x44>
    }

    /* Calibrate ESC */
    if (false == ESC_Calibrate(htim, TIM_CHANNEL_ALL)) {
 8000dc2:	213c      	movs	r1, #60	; 0x3c
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffa3 	bl	8000d10 <ESC_Calibrate>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <ESC_Init+0x42>
        return false;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <ESC_Init+0x44>
    }

    return true;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_Init+0x40>)
 8000dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_Init+0x40>)
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x40>)
 8000e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f94f 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fd14 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f967 	bl	800111a <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e64:	f000 f92f 	bl	80010c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000258 	.word	0x20000258

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000258 	.word	0x20000258

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff ffee 	bl	8000eb0 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffde 	bl	8000eb0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800107c:	d301      	bcc.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <SysTick_Config+0x40>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	210f      	movs	r1, #15
 800108c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001090:	f7ff ff8e 	bl	8000fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x40>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff29 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d8:	f7ff ff3e 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f7ff ff8e 	bl	8001004 <NVIC_EncodePriority>
 80010e8:	4602      	mov	r2, r0
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff5d 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff31 	bl	8000f74 <__NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffa2 	bl	800106c <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff feb6 	bl	8000eb0 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e099      	b.n	8001284 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001170:	e00f      	b.n	8001192 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001172:	f7ff fe9d 	bl	8000eb0 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b05      	cmp	r3, #5
 800117e:	d908      	bls.n	8001192 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2220      	movs	r2, #32
 8001184:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e078      	b.n	8001284 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e8      	bne.n	8001172 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <HAL_DMA_Init+0x158>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d107      	bne.n	80011fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4313      	orrs	r3, r2
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f023 0307 	bic.w	r3, r3, #7
 8001212:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4313      	orrs	r3, r2
 800121c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	2b04      	cmp	r3, #4
 8001224:	d117      	bne.n	8001256 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4313      	orrs	r3, r2
 800122e:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f85f 	bl	80012fc <DMA_CheckFifoParam>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2240      	movs	r2, #64	; 0x40
 8001248:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e016      	b.n	8001284 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f816 	bl	8001290 <DMA_CalcBaseAndBitshift>
 8001264:	4603      	mov	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126c:	223f      	movs	r2, #63	; 0x3f
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	f010803f 	.word	0xf010803f

08001290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3b10      	subs	r3, #16
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <DMA_CalcBaseAndBitshift+0x64>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <DMA_CalcBaseAndBitshift+0x68>)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d909      	bls.n	80012d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012c6:	f023 0303 	bic.w	r3, r3, #3
 80012ca:	1d1a      	adds	r2, r3, #4
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	659a      	str	r2, [r3, #88]	; 0x58
 80012d0:	e007      	b.n	80012e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012da:	f023 0303 	bic.w	r3, r3, #3
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	aaaaaaab 	.word	0xaaaaaaab
 80012f8:	080087bc 	.word	0x080087bc

080012fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d11f      	bne.n	8001356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d856      	bhi.n	80013ca <DMA_CheckFifoParam+0xce>
 800131c:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <DMA_CheckFifoParam+0x28>)
 800131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001322:	bf00      	nop
 8001324:	08001335 	.word	0x08001335
 8001328:	08001347 	.word	0x08001347
 800132c:	08001335 	.word	0x08001335
 8001330:	080013cb 	.word	0x080013cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d046      	beq.n	80013ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001344:	e043      	b.n	80013ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800134e:	d140      	bne.n	80013d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001354:	e03d      	b.n	80013d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800135e:	d121      	bne.n	80013a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d837      	bhi.n	80013d6 <DMA_CheckFifoParam+0xda>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <DMA_CheckFifoParam+0x70>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	0800137d 	.word	0x0800137d
 8001370:	08001383 	.word	0x08001383
 8001374:	0800137d 	.word	0x0800137d
 8001378:	08001395 	.word	0x08001395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
      break;
 8001380:	e030      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d025      	beq.n	80013da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001392:	e022      	b.n	80013da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800139c:	d11f      	bne.n	80013de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013a2:	e01c      	b.n	80013de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d903      	bls.n	80013b2 <DMA_CheckFifoParam+0xb6>
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d003      	beq.n	80013b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013b0:	e018      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
      break;
 80013b6:	e015      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00e      	beq.n	80013e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
      break;
 80013c8:	e00b      	b.n	80013e2 <DMA_CheckFifoParam+0xe6>
      break;
 80013ca:	bf00      	nop
 80013cc:	e00a      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
      break;
 80013ce:	bf00      	nop
 80013d0:	e008      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
      break;
 80013d2:	bf00      	nop
 80013d4:	e006      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
      break;
 80013d6:	bf00      	nop
 80013d8:	e004      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
      break;
 80013da:	bf00      	nop
 80013dc:	e002      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
      break;
 80013de:	bf00      	nop
 80013e0:	e000      	b.n	80013e4 <DMA_CheckFifoParam+0xe8>
      break;
 80013e2:	bf00      	nop
    }
  }

  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e159      	b.n	80016c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8148 	bne.w	80016be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a2 	beq.w	80016be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b57      	ldr	r3, [pc, #348]	; (80016dc <HAL_GPIO_Init+0x2e8>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a56      	ldr	r2, [pc, #344]	; (80016dc <HAL_GPIO_Init+0x2e8>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b54      	ldr	r3, [pc, #336]	; (80016dc <HAL_GPIO_Init+0x2e8>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_GPIO_Init+0x2ec>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x202>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2f4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x1fe>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a47      	ldr	r2, [pc, #284]	; (80016ec <HAL_GPIO_Init+0x2f8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x1fa>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a46      	ldr	r2, [pc, #280]	; (80016f0 <HAL_GPIO_Init+0x2fc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x1f6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a45      	ldr	r2, [pc, #276]	; (80016f4 <HAL_GPIO_Init+0x300>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x1f2>
 80015e2:	2304      	movs	r3, #4
 80015e4:	e008      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015e6:	2307      	movs	r3, #7
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015f6:	2300      	movs	r3, #0
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	f002 0203 	and.w	r2, r2, #3
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4093      	lsls	r3, r2
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001608:	4935      	ldr	r1, [pc, #212]	; (80016e0 <HAL_GPIO_Init+0x2ec>)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163a:	4a2f      	ldr	r2, [pc, #188]	; (80016f8 <HAL_GPIO_Init+0x304>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001664:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_GPIO_Init+0x304>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168e:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b8:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_GPIO_Init+0x304>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3301      	adds	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	f67f aea2 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40013800 	.word	0x40013800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40013c00 	.word	0x40013c00

080016fc <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e12b      	b.n	8001966 <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff f8b6 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2224      	movs	r2, #36	; 0x24
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800174e:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800175e:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8001760:	f001 ffbe 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 8001764:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a81      	ldr	r2, [pc, #516]	; (8001970 <HAL_I2C_Init+0x274>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d807      	bhi.n	8001780 <HAL_I2C_Init+0x84>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a80      	ldr	r2, [pc, #512]	; (8001974 <HAL_I2C_Init+0x278>)
 8001774:	4293      	cmp	r3, r2
 8001776:	bf94      	ite	ls
 8001778:	2301      	movls	r3, #1
 800177a:	2300      	movhi	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e006      	b.n	800178e <HAL_I2C_Init+0x92>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a7d      	ldr	r2, [pc, #500]	; (8001978 <HAL_I2C_Init+0x27c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	bf94      	ite	ls
 8001788:	2301      	movls	r3, #1
 800178a:	2300      	movhi	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0e7      	b.n	8001966 <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4a78      	ldr	r2, [pc, #480]	; (800197c <HAL_I2C_Init+0x280>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9b      	lsrs	r3, r3, #18
 80017a0:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a6a      	ldr	r2, [pc, #424]	; (8001970 <HAL_I2C_Init+0x274>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d802      	bhi.n	80017d0 <HAL_I2C_Init+0xd4>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3301      	adds	r3, #1
 80017ce:	e009      	b.n	80017e4 <HAL_I2C_Init+0xe8>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	4a69      	ldr	r2, [pc, #420]	; (8001980 <HAL_I2C_Init+0x284>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	3301      	adds	r3, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6213      	str	r3, [r2, #32]

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	495c      	ldr	r1, [pc, #368]	; (8001970 <HAL_I2C_Init+0x274>)
 8001800:	428b      	cmp	r3, r1
 8001802:	d819      	bhi.n	8001838 <HAL_I2C_Init+0x13c>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e59      	subs	r1, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001818:	400b      	ands	r3, r1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00a      	beq.n	8001834 <HAL_I2C_Init+0x138>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1e59      	subs	r1, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fbb1 f3f3 	udiv	r3, r1, r3
 800182c:	3301      	adds	r3, #1
 800182e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001832:	e051      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001834:	2304      	movs	r3, #4
 8001836:	e04f      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d111      	bne.n	8001864 <HAL_I2C_Init+0x168>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e58      	subs	r0, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	440b      	add	r3, r1
 800184e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001852:	3301      	adds	r3, #1
 8001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e012      	b.n	800188a <HAL_I2C_Init+0x18e>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1e58      	subs	r0, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	0099      	lsls	r1, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	fbb0 f3f3 	udiv	r3, r0, r3
 800187a:	3301      	adds	r3, #1
 800187c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf0c      	ite	eq
 8001884:	2301      	moveq	r3, #1
 8001886:	2300      	movne	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Init+0x196>
 800188e:	2301      	movs	r3, #1
 8001890:	e022      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10e      	bne.n	80018b8 <HAL_I2C_Init+0x1bc>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1e58      	subs	r0, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	440b      	add	r3, r1
 80018a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b6:	e00f      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e58      	subs	r0, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	0099      	lsls	r1, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	6809      	ldr	r1, [r1, #0]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61cb      	str	r3, [r1, #28]

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6911      	ldr	r1, [r2, #16]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68d2      	ldr	r2, [r2, #12]
 8001912:	4311      	orrs	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	430b      	orrs	r3, r1
 800191a:	6093      	str	r3, [r2, #8]

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	60da      	str	r2, [r3, #12]

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2220      	movs	r2, #32
 8001952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	000186a0 	.word	0x000186a0
 8001974:	001e847f 	.word	0x001e847f
 8001978:	003d08ff 	.word	0x003d08ff
 800197c:	431bde83 	.word	0x431bde83
 8001980:	10624dd3 	.word	0x10624dd3

08001984 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	b08f      	sub	sp, #60	; 0x3c
 8001988:	af0a      	add	r7, sp, #40	; 0x28
 800198a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e10f      	b.n	8001bb6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f006 fb91 	bl	80080d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2203      	movs	r2, #3
 80019ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fee4 	bl	80047a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	687e      	ldr	r6, [r7, #4]
 80019e2:	466d      	mov	r5, sp
 80019e4:	f106 0410 	add.w	r4, r6, #16
 80019e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f8:	1d33      	adds	r3, r6, #4
 80019fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fc:	6838      	ldr	r0, [r7, #0]
 80019fe:	f002 fdbb 	bl	8004578 <USB_CoreInit>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0d0      	b.n	8001bb6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fed2 	bl	80047c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e04a      	b.n	8001abc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	333d      	adds	r3, #61	; 0x3d
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	333c      	adds	r3, #60	; 0x3c
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	b298      	uxth	r0, r3
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3344      	adds	r3, #68	; 0x44
 8001a62:	4602      	mov	r2, r0
 8001a64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	3340      	adds	r3, #64	; 0x40
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3348      	adds	r3, #72	; 0x48
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	334c      	adds	r3, #76	; 0x4c
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3354      	adds	r3, #84	; 0x54
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3af      	bcc.n	8001a26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e044      	b.n	8001b56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	3301      	adds	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3b5      	bcc.n	8001acc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	687e      	ldr	r6, [r7, #4]
 8001b68:	466d      	mov	r5, sp
 8001b6a:	f106 0410 	add.w	r4, r6, #16
 8001b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b7e:	1d33      	adds	r3, r6, #4
 8001b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b82:	6838      	ldr	r0, [r7, #0]
 8001b84:	f002 fe6a 	bl	800485c <USB_DevInit>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00d      	b.n	8001bb6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 ffb9 	bl	8005b26 <USB_DevDisconnect>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_PCD_Start+0x1c>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e020      	b.n	8001c1c <HAL_PCD_Start+0x5e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d109      	bne.n	8001bfe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d005      	beq.n	8001bfe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fdbc 	bl	8004780 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 ff69 	bl	8005ae4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08d      	sub	sp, #52	; 0x34
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f827 	bl	8005c8e <USB_GetMode>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 848a 	bne.w	800255c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 ff8b 	bl	8005b68 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8480 	beq.w	800255a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 ff78 	bl	8005b68 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d107      	bne.n	8001c92 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f002 0202 	and.w	r2, r2, #2
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 ff66 	bl	8005b68 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d161      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0210 	bic.w	r2, r2, #16
 8001cb4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	0c5b      	lsrs	r3, r3, #17
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d124      	bne.n	8001d2c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d035      	beq.n	8001d5a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6a38      	ldr	r0, [r7, #32]
 8001d02:	f003 fd9d 	bl	8005840 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d12:	441a      	add	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d24:	441a      	add	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	621a      	str	r2, [r3, #32]
 8001d2a:	e016      	b.n	8001d5a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	0c5b      	lsrs	r3, r3, #17
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d110      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d3e:	2208      	movs	r2, #8
 8001d40:	4619      	mov	r1, r3
 8001d42:	6a38      	ldr	r0, [r7, #32]
 8001d44:	f003 fd7c 	bl	8005840 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d54:	441a      	add	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0210 	orr.w	r2, r2, #16
 8001d68:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fefa 	bl	8005b68 <USB_ReadInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d7e:	f040 80a7 	bne.w	8001ed0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 feff 	bl	8005b8e <USB_ReadDevAllOutEpInterrupt>
 8001d90:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d92:	e099      	b.n	8001ec8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 808e 	beq.w	8001ebc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 ff23 	bl	8005bf6 <USB_ReadDevOutEPInterrupt>
 8001db0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00c      	beq.n	8001dd6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2301      	movs	r3, #1
 8001dcc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fec3 	bl	8002b5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00c      	beq.n	8001dfa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dec:	461a      	mov	r2, r3
 8001dee:	2308      	movs	r3, #8
 8001df0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 ff99 	bl	8002d2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e10:	461a      	mov	r2, r3
 8001e12:	2310      	movs	r3, #16
 8001e14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d030      	beq.n	8001e82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d109      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	3304      	adds	r3, #4
 8001e54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	78db      	ldrb	r3, [r3, #3]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f006 fa30 	bl	80082d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2302      	movs	r3, #2
 8001e80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f47f af62 	bne.w	8001d94 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 fe47 	bl	8005b68 <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ee4:	f040 80db 	bne.w	800209e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fe68 	bl	8005bc2 <USB_ReadDevAllInEpInterrupt>
 8001ef2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ef8:	e0cd      	b.n	8002096 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80c2 	beq.w	800208a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 fe8e 	bl	8005c32 <USB_ReadDevInEPInterrupt>
 8001f16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d057      	beq.n	8001fd2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	2201      	movs	r2, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69f9      	ldr	r1, [r7, #28]
 8001f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f42:	4013      	ands	r3, r2
 8001f44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f52:	461a      	mov	r2, r3
 8001f54:	2301      	movs	r3, #1
 8001f56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d132      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	334c      	adds	r3, #76	; 0x4c
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4403      	add	r3, r0
 8001f80:	3348      	adds	r3, #72	; 0x48
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4419      	add	r1, r3
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4403      	add	r3, r0
 8001f94:	334c      	adds	r3, #76	; 0x4c
 8001f96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d113      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x3a2>
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3354      	adds	r3, #84	; 0x54
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d108      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	f003 fe95 	bl	8005cf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f006 f904 	bl	80081da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2308      	movs	r3, #8
 8001fec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002004:	461a      	mov	r2, r3
 8002006:	2310      	movs	r3, #16
 8002008:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002020:	461a      	mov	r2, r3
 8002022:	2340      	movs	r3, #64	; 0x40
 8002024:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d023      	beq.n	8002078 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002032:	6a38      	ldr	r0, [r7, #32]
 8002034:	f002 fd76 	bl	8004b24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	3338      	adds	r3, #56	; 0x38
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	3304      	adds	r3, #4
 800204a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	78db      	ldrb	r3, [r3, #3]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d108      	bne.n	8002066 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2200      	movs	r2, #0
 8002058:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f006 f947 	bl	80082f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002072:	461a      	mov	r2, r3
 8002074:	2302      	movs	r3, #2
 8002076:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fcdb 	bl	8002a40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	3301      	adds	r3, #1
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	f47f af2e 	bne.w	8001efa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 fd60 	bl	8005b68 <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020b2:	d122      	bne.n	80020fa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020da:	2100      	movs	r1, #0
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fec3 	bl	8002e68 <HAL_PCDEx_LPM_Callback>
 80020e2:	e002      	b.n	80020ea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f006 f8e5 	bl	80082b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fd32 	bl	8005b68 <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800210e:	d112      	bne.n	8002136 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d102      	bne.n	8002126 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f006 f8a1 	bl	8008268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002134:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 fd14 	bl	8005b68 <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214a:	f040 80b7 	bne.w	80022bc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2110      	movs	r1, #16
 8002168:	4618      	mov	r0, r3
 800216a:	f002 fcdb 	bl	8004b24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	e046      	b.n	8002202 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002180:	461a      	mov	r2, r3
 8002182:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002186:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002198:	0151      	lsls	r1, r2, #5
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	440a      	add	r2, r1
 800219e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021cc:	0151      	lsls	r1, r2, #5
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	440a      	add	r2, r1
 80021d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ec:	0151      	lsls	r1, r2, #5
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	440a      	add	r2, r1
 80021f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	3301      	adds	r3, #1
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002208:	429a      	cmp	r2, r3
 800220a:	d3b3      	bcc.n	8002174 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800221a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800221e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	2b00      	cmp	r3, #0
 8002226:	d016      	beq.n	8002256 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002238:	f043 030b 	orr.w	r3, r3, #11
 800223c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224e:	f043 030b 	orr.w	r3, r3, #11
 8002252:	6453      	str	r3, [r2, #68]	; 0x44
 8002254:	e015      	b.n	8002282 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002268:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800226c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800227c:	f043 030b 	orr.w	r3, r3, #11
 8002280:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002290:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002294:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022a6:	461a      	mov	r2, r3
 80022a8:	f003 fd22 	bl	8005cf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fc51 	bl	8005b68 <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d0:	d124      	bne.n	800231c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fce7 	bl	8005caa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fc9c 	bl	8004c1e <USB_GetDevSpeed>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681c      	ldr	r4, [r3, #0]
 80022f2:	f001 f9e9 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80022f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	4620      	mov	r0, r4
 8002302:	f002 f99b 	bl	800463c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f005 ff8f 	bl	800822a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fc21 	bl	8005b68 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b08      	cmp	r3, #8
 800232e:	d10a      	bne.n	8002346 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f005 ff6c 	bl	800820e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f002 0208 	and.w	r2, r2, #8
 8002344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 fc0c 	bl	8005b68 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b80      	cmp	r3, #128	; 0x80
 8002358:	d122      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002366:	2301      	movs	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e014      	b.n	8002396 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fb27 	bl	80029de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3301      	adds	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	429a      	cmp	r2, r3
 800239e:	d3e5      	bcc.n	800236c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 fbdf 	bl	8005b68 <USB_ReadInterrupts>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b4:	d13b      	bne.n	800242e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023b6:	2301      	movs	r3, #1
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	e02b      	b.n	8002414 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3340      	adds	r3, #64	; 0x40
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d115      	bne.n	800240e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da12      	bge.n	800240e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	333f      	adds	r3, #63	; 0x3f
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4619      	mov	r1, r3
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fae8 	bl	80029de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	429a      	cmp	r2, r3
 800241c:	d3ce      	bcc.n	80023bc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800242c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fb98 	bl	8005b68 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002442:	d155      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002444:	2301      	movs	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
 8002448:	e045      	b.n	80024d6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d12e      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002472:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	da2b      	bge.n	80024d0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002484:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002488:	429a      	cmp	r2, r3
 800248a:	d121      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024cc:	6053      	str	r3, [r2, #4]
            break;
 80024ce:	e007      	b.n	80024e0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	3301      	adds	r3, #1
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3b4      	bcc.n	800244a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fb37 	bl	8005b68 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002504:	d10a      	bne.n	800251c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f005 ff06 	bl	8008318 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800251a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f003 fb21 	bl	8005b68 <USB_ReadInterrupts>
 8002526:	4603      	mov	r3, r0
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b04      	cmp	r3, #4
 800252e:	d115      	bne.n	800255c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f005 fef6 	bl	8008334 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	430a      	orrs	r2, r1
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	e000      	b.n	800255c <HAL_PCD_IRQHandler+0x938>
      return;
 800255a:	bf00      	nop
    }
  }
}
 800255c:	3734      	adds	r7, #52	; 0x34
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}

08002562 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_PCD_SetAddress+0x1a>
 8002578:	2302      	movs	r3, #2
 800257a:	e013      	b.n	80025a4 <HAL_PCD_SetAddress+0x42>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f003 fa7f 	bl	8005a98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	70fb      	strb	r3, [r7, #3]
 80025be:	460b      	mov	r3, r1
 80025c0:	803b      	strh	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	da0f      	bge.n	80025f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 020f 	and.w	r2, r3, #15
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	3338      	adds	r3, #56	; 0x38
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	3304      	adds	r3, #4
 80025e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	705a      	strb	r2, [r3, #1]
 80025f0:	e00f      	b.n	8002612 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	f003 020f 	and.w	r2, r3, #15
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	3304      	adds	r3, #4
 800260a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	b2da      	uxtb	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800261e:	883a      	ldrh	r2, [r7, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	78ba      	ldrb	r2, [r7, #2]
 8002628:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	785b      	ldrb	r3, [r3, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800263c:	78bb      	ldrb	r3, [r7, #2]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d102      	bne.n	8002648 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_PCD_EP_Open+0xaa>
 8002652:	2302      	movs	r3, #2
 8002654:	e00e      	b.n	8002674 <HAL_PCD_EP_Open+0xc8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	4618      	mov	r0, r3
 8002666:	f002 faff 	bl	8004c68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002672:	7afb      	ldrb	r3, [r7, #11]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da0f      	bge.n	80026b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	3338      	adds	r3, #56	; 0x38
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	3304      	adds	r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	705a      	strb	r2, [r3, #1]
 80026ae:	e00f      	b.n	80026d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	3304      	adds	r3, #4
 80026c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_PCD_EP_Close+0x6e>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e00e      	b.n	8002708 <HAL_PCD_EP_Close+0x8c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fb3d 	bl	8004d78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	460b      	mov	r3, r1
 800271e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	f003 020f 	and.w	r2, r3, #15
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	3304      	adds	r3, #4
 8002738:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2200      	movs	r2, #0
 8002750:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	b2da      	uxtb	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d102      	bne.n	800276c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	6979      	ldr	r1, [r7, #20]
 8002784:	f002 fe1c 	bl	80053c0 <USB_EP0StartXfer>
 8002788:	e008      	b.n	800279c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6979      	ldr	r1, [r7, #20]
 8002798:	f002 fbca 	bl	8004f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	f003 020f 	and.w	r2, r3, #15
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80027c8:	681b      	ldr	r3, [r3, #0]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	460b      	mov	r3, r1
 80027e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	3338      	adds	r3, #56	; 0x38
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	3304      	adds	r3, #4
 80027fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2201      	movs	r2, #1
 8002814:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002816:	7afb      	ldrb	r3, [r7, #11]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	b2da      	uxtb	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d102      	bne.n	8002830 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002830:	7afb      	ldrb	r3, [r7, #11]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	6979      	ldr	r1, [r7, #20]
 8002848:	f002 fdba 	bl	80053c0 <USB_EP0StartXfer>
 800284c:	e008      	b.n	8002860 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	6979      	ldr	r1, [r7, #20]
 800285c:	f002 fb68 	bl	8004f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	d901      	bls.n	8002888 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e050      	b.n	800292a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da0f      	bge.n	80028b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 020f 	and.w	r2, r3, #15
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	3338      	adds	r3, #56	; 0x38
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	3304      	adds	r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	705a      	strb	r2, [r3, #1]
 80028ae:	e00d      	b.n	80028cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	3304      	adds	r3, #4
 80028c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_PCD_EP_SetStall+0x82>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e01e      	b.n	800292a <HAL_PCD_EP_SetStall+0xc0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fff8 	bl	80058f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	b2d9      	uxtb	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800291a:	461a      	mov	r2, r3
 800291c:	f003 f9e8 	bl	8005cf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d901      	bls.n	8002950 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e042      	b.n	80029d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da0f      	bge.n	8002978 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3338      	adds	r3, #56	; 0x38
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	705a      	strb	r2, [r3, #1]
 8002976:	e00f      	b.n	8002998 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_PCD_EP_ClrStall+0x86>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e00e      	b.n	80029d6 <HAL_PCD_EP_ClrStall+0xa4>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 f800 	bl	80059cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da0c      	bge.n	8002a0c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	f003 020f 	and.w	r2, r3, #15
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	3338      	adds	r3, #56	; 0x38
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	3304      	adds	r3, #4
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e00c      	b.n	8002a26 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	f003 020f 	and.w	r2, r3, #15
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fe1f 	bl	8005670 <USB_EPStopXfer>
 8002a32:	4603      	mov	r3, r0
 8002a34:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a36:	7afb      	ldrb	r3, [r7, #11]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	3338      	adds	r3, #56	; 0x38
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d901      	bls.n	8002a78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e06c      	b.n	8002b52 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d902      	bls.n	8002a94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	3303      	adds	r3, #3
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a9c:	e02b      	b.n	8002af6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d902      	bls.n	8002aba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3303      	adds	r3, #3
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6919      	ldr	r1, [r3, #16]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f002 fe73 	bl	80057c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	441a      	add	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	441a      	add	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d809      	bhi.n	8002b20 <PCD_WriteEmptyTxFifo+0xe0>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d203      	bcs.n	8002b20 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1be      	bne.n	8002a9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d811      	bhi.n	8002b50 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	2201      	movs	r2, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	6939      	ldr	r1, [r7, #16]
 8002b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	333c      	adds	r3, #60	; 0x3c
 8002b74:	3304      	adds	r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d17b      	bne.n	8002c8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	4a61      	ldr	r2, [pc, #388]	; (8002d24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	f240 80b9 	bls.w	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80b3 	beq.w	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc4:	6093      	str	r3, [r2, #8]
 8002bc6:	e0a7      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bde:	461a      	mov	r2, r3
 8002be0:	2320      	movs	r3, #32
 8002be2:	6093      	str	r3, [r2, #8]
 8002be4:	e098      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 8093 	bne.w	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	; (8002d24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d90f      	bls.n	8002c1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c10:	461a      	mov	r2, r3
 8002c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c16:	6093      	str	r3, [r2, #8]
 8002c18:	e07e      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	69da      	ldr	r2, [r3, #28]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	0159      	lsls	r1, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d114      	bne.n	8002c7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c64:	461a      	mov	r2, r3
 8002c66:	2101      	movs	r1, #1
 8002c68:	f003 f842 	bl	8005cf0 <USB_EP0_OutStart>
 8002c6c:	e006      	b.n	8002c7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	441a      	add	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f005 fa8e 	bl	80081a4 <HAL_PCD_DataOutStageCallback>
 8002c88:	e046      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d124      	bne.n	8002cdc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cae:	6093      	str	r3, [r2, #8]
 8002cb0:	e032      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2320      	movs	r3, #32
 8002ccc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f005 fa65 	bl	80081a4 <HAL_PCD_DataOutStageCallback>
 8002cda:	e01d      	b.n	8002d18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d114      	bne.n	8002d0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d04:	461a      	mov	r2, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	f002 fff2 	bl	8005cf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f005 fa46 	bl	80081a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	4f54300a 	.word	0x4f54300a
 8002d28:	4f54310a 	.word	0x4f54310a

08002d2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	333c      	adds	r3, #60	; 0x3c
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d90e      	bls.n	8002d80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f005 f9fd 	bl	8008180 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d90c      	bls.n	8002da8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002da0:	461a      	mov	r2, r3
 8002da2:	2101      	movs	r1, #1
 8002da4:	f002 ffa4 	bl	8005cf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	4f54300a 	.word	0x4f54300a

08002db8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002dd6:	883b      	ldrh	r3, [r7, #0]
 8002dd8:	0419      	lsls	r1, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
 8002de4:	e028      	b.n	8002e38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	4413      	add	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e00d      	b.n	8002e16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	3340      	adds	r3, #64	; 0x40
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	3301      	adds	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3ec      	bcc.n	8002dfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e20:	883b      	ldrh	r3, [r7, #0]
 8002e22:	0418      	lsls	r0, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4302      	orrs	r2, r0
 8002e30:	3340      	adds	r3, #64	; 0x40
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e267      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d075      	beq.n	8002f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eaa:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d112      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4b82      	ldr	r3, [pc, #520]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b7e      	ldr	r3, [pc, #504]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCC_OscConfig+0x108>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d157      	bne.n	8002f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e242      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x74>
 8002ee6:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4b70      	ldr	r3, [pc, #448]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6f      	ldr	r2, [pc, #444]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6c      	ldr	r2, [pc, #432]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002f18:	4b69      	ldr	r3, [pc, #420]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a65      	ldr	r2, [pc, #404]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fd ffba 	bl	8000eb0 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fd ffb6 	bl	8000eb0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e207      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xc0>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fd ffa6 	bl	8000eb0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fd ffa2 	bl	8000eb0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1f3      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	4b51      	ldr	r3, [pc, #324]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xe8>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d063      	beq.n	800305e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	4b4a      	ldr	r3, [pc, #296]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1c7      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4937      	ldr	r1, [pc, #220]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	e03a      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff0:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <HAL_RCC_OscConfig+0x244>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fd ff5b 	bl	8000eb0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fd ff57 	bl	8000eb0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1a8      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4925      	ldr	r1, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e015      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <HAL_RCC_OscConfig+0x244>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fd ff3a 	bl	8000eb0 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003040:	f7fd ff36 	bl	8000eb0 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e187      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d036      	beq.n	80030d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_RCC_OscConfig+0x248>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fd ff1a 	bl	8000eb0 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003080:	f7fd ff16 	bl	8000eb0 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e167      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x200>
 800309e:	e01b      	b.n	80030d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_OscConfig+0x248>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fd ff03 	bl	8000eb0 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	e00e      	b.n	80030cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fd feff 	bl	8000eb0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d907      	bls.n	80030cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e150      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ea      	bne.n	80030ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8097 	beq.w	8003214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b7d      	ldr	r3, [pc, #500]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a7c      	ldr	r2, [pc, #496]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b7a      	ldr	r3, [pc, #488]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b77      	ldr	r3, [pc, #476]	; (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b74      	ldr	r3, [pc, #464]	; (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a73      	ldr	r2, [pc, #460]	; (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fd febf 	bl	8000eb0 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fd febb 	bl	8000eb0 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e10c      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_OscConfig+0x474>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x2ea>
 800315c:	4b64      	ldr	r3, [pc, #400]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a63      	ldr	r2, [pc, #396]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x324>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x30c>
 8003172:	4b5f      	ldr	r3, [pc, #380]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a5e      	ldr	r2, [pc, #376]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
 800317e:	4b5c      	ldr	r3, [pc, #368]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a5b      	ldr	r2, [pc, #364]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0x324>
 800318c:	4b58      	ldr	r3, [pc, #352]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a57      	ldr	r2, [pc, #348]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a54      	ldr	r2, [pc, #336]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd fe80 	bl	8000eb0 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fd fe7c 	bl	8000eb0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0cb      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <HAL_RCC_OscConfig+0x334>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d8:	f7fd fe6a 	bl	8000eb0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fd fe66 	bl	8000eb0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0b5      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ee      	bne.n	80031e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	4a38      	ldr	r2, [pc, #224]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80a1 	beq.w	8003360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321e:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d05c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d141      	bne.n	80032b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <HAL_RCC_OscConfig+0x478>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fd fe3a 	bl	8000eb0 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fd fe36 	bl	8000eb0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e087      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	491b      	ldr	r1, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_RCC_OscConfig+0x478>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fd fe0f 	bl	8000eb0 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003296:	f7fd fe0b 	bl	8000eb0 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e05c      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x416>
 80032b4:	e054      	b.n	8003360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_RCC_OscConfig+0x478>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd fdf8 	bl	8000eb0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd fdf4 	bl	8000eb0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e045      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x444>
 80032e2:	e03d      	b.n	8003360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e038      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000
 80032f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_RCC_OscConfig+0x4ec>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d028      	beq.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d121      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d11a      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003334:	4293      	cmp	r3, r2
 8003336:	d111      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0cc      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b68      	ldr	r3, [pc, #416]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d90c      	bls.n	80033ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b65      	ldr	r3, [pc, #404]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b63      	ldr	r3, [pc, #396]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0b8      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a58      	ldr	r2, [pc, #352]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033dc:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b50      	ldr	r3, [pc, #320]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	494d      	ldr	r1, [pc, #308]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d044      	beq.n	8003490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b47      	ldr	r3, [pc, #284]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d119      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d003      	beq.n	800342e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342a:	2b03      	cmp	r3, #3
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b3f      	ldr	r3, [pc, #252]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e067      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4934      	ldr	r1, [pc, #208]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fd fd26 	bl	8000eb0 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fd fd22 	bl	8000eb0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e04f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b2b      	ldr	r3, [pc, #172]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d20c      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e032      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4916      	ldr	r1, [pc, #88]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	490e      	ldr	r1, [pc, #56]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034f6:	f000 f821 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	490a      	ldr	r1, [pc, #40]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a09      	ldr	r2, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fc86 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00
 800352c:	40023800 	.word	0x40023800
 8003530:	080087a4 	.word	0x080087a4
 8003534:	20000000 	.word	0x20000000
 8003538:	20000004 	.word	0x20000004

0800353c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b090      	sub	sp, #64	; 0x40
 8003542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
 8003548:	2300      	movs	r3, #0
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354c:	2300      	movs	r3, #0
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003554:	4b59      	ldr	r3, [pc, #356]	; (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d00d      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x40>
 8003560:	2b08      	cmp	r3, #8
 8003562:	f200 80a1 	bhi.w	80036a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x34>
 800356a:	2b04      	cmp	r3, #4
 800356c:	d003      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0x3a>
 800356e:	e09b      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003574:	e09b      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003576:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003578:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800357a:	e098      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800357c:	4b4f      	ldr	r3, [pc, #316]	; (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003586:	4b4d      	ldr	r3, [pc, #308]	; (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d028      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	2200      	movs	r2, #0
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	627a      	str	r2, [r7, #36]	; 0x24
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035a4:	2100      	movs	r1, #0
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035a8:	fb03 f201 	mul.w	r2, r3, r1
 80035ac:	2300      	movs	r3, #0
 80035ae:	fb00 f303 	mul.w	r3, r0, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	4a43      	ldr	r2, [pc, #268]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035b6:	fba0 1202 	umull	r1, r2, r0, r2
 80035ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035bc:	460a      	mov	r2, r1
 80035be:	62ba      	str	r2, [r7, #40]	; 0x28
 80035c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c2:	4413      	add	r3, r2
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	2200      	movs	r2, #0
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	61fa      	str	r2, [r7, #28]
 80035ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035d6:	f7fc fdfd 	bl	80001d4 <__aeabi_uldivmod>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4613      	mov	r3, r2
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e2:	e053      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e4:	4b35      	ldr	r3, [pc, #212]	; (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	2200      	movs	r2, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	617a      	str	r2, [r7, #20]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035f6:	f04f 0b00 	mov.w	fp, #0
 80035fa:	4652      	mov	r2, sl
 80035fc:	465b      	mov	r3, fp
 80035fe:	f04f 0000 	mov.w	r0, #0
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	0159      	lsls	r1, r3, #5
 8003608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800360c:	0150      	lsls	r0, r2, #5
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	ebb2 080a 	subs.w	r8, r2, sl
 8003616:	eb63 090b 	sbc.w	r9, r3, fp
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003626:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800362a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800362e:	ebb2 0408 	subs.w	r4, r2, r8
 8003632:	eb63 0509 	sbc.w	r5, r3, r9
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	00eb      	lsls	r3, r5, #3
 8003640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003644:	00e2      	lsls	r2, r4, #3
 8003646:	4614      	mov	r4, r2
 8003648:	461d      	mov	r5, r3
 800364a:	eb14 030a 	adds.w	r3, r4, sl
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	eb45 030b 	adc.w	r3, r5, fp
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003662:	4629      	mov	r1, r5
 8003664:	028b      	lsls	r3, r1, #10
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800366c:	4621      	mov	r1, r4
 800366e:	028a      	lsls	r2, r1, #10
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	2200      	movs	r2, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	60fa      	str	r2, [r7, #12]
 800367c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003680:	f7fc fda8 	bl	80001d4 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	3301      	adds	r3, #1
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800369c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036a6:	e002      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3740      	adds	r7, #64	; 0x40
 80036b4:	46bd      	mov	sp, r7
 80036b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	017d7840 	.word	0x017d7840

080036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000000 	.word	0x20000000

080036e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036e4:	f7ff fff0 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0a9b      	lsrs	r3, r3, #10
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	080087b4 	.word	0x080087b4

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800370c:	f7ff ffdc 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0b5b      	lsrs	r3, r3, #13
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4903      	ldr	r1, [pc, #12]	; (800372c <HAL_RCC_GetPCLK2Freq+0x24>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	080087b4 	.word	0x080087b4

08003730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e041      	b.n	80037c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd f8e4 	bl	8000924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f000 f9a0 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_TIM_PWM_Start+0x24>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e022      	b.n	800383a <HAL_TIM_PWM_Start+0x6a>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d109      	bne.n	800380e <HAL_TIM_PWM_Start+0x3e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	e015      	b.n	800383a <HAL_TIM_PWM_Start+0x6a>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d109      	bne.n	8003828 <HAL_TIM_PWM_Start+0x58>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e008      	b.n	800383a <HAL_TIM_PWM_Start+0x6a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	bf14      	ite	ne
 8003834:	2301      	movne	r3, #1
 8003836:	2300      	moveq	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e068      	b.n	8003914 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_TIM_PWM_Start+0x82>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003850:	e013      	b.n	800387a <HAL_TIM_PWM_Start+0xaa>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Start+0x92>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003860:	e00b      	b.n	800387a <HAL_TIM_PWM_Start+0xaa>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Start+0xa2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003870:	e003      	b.n	800387a <HAL_TIM_PWM_Start+0xaa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2201      	movs	r2, #1
 8003880:	6839      	ldr	r1, [r7, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fb22 	bl	8003ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <HAL_TIM_PWM_Start+0x14c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d107      	bne.n	80038a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1d      	ldr	r2, [pc, #116]	; (800391c <HAL_TIM_PWM_Start+0x14c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d018      	beq.n	80038de <HAL_TIM_PWM_Start+0x10e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d013      	beq.n	80038de <HAL_TIM_PWM_Start+0x10e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_TIM_PWM_Start+0x150>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_TIM_PWM_Start+0x10e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_TIM_PWM_Start+0x154>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_TIM_PWM_Start+0x10e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIM_PWM_Start+0x158>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_TIM_PWM_Start+0x10e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <HAL_TIM_PWM_Start+0x15c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d111      	bne.n	8003902 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b06      	cmp	r3, #6
 80038ee:	d010      	beq.n	8003912 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003900:	e007      	b.n	8003912 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40010000 	.word	0x40010000
 8003920:	40000400 	.word	0x40000400
 8003924:	40000800 	.word	0x40000800
 8003928:	40000c00 	.word	0x40000c00
 800392c:	40014000 	.word	0x40014000

08003930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800394a:	2302      	movs	r3, #2
 800394c:	e0ae      	b.n	8003aac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b0c      	cmp	r3, #12
 800395a:	f200 809f 	bhi.w	8003a9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003999 	.word	0x08003999
 8003968:	08003a9d 	.word	0x08003a9d
 800396c:	08003a9d 	.word	0x08003a9d
 8003970:	08003a9d 	.word	0x08003a9d
 8003974:	080039d9 	.word	0x080039d9
 8003978:	08003a9d 	.word	0x08003a9d
 800397c:	08003a9d 	.word	0x08003a9d
 8003980:	08003a9d 	.word	0x08003a9d
 8003984:	08003a1b 	.word	0x08003a1b
 8003988:	08003a9d 	.word	0x08003a9d
 800398c:	08003a9d 	.word	0x08003a9d
 8003990:	08003a9d 	.word	0x08003a9d
 8003994:	08003a5b 	.word	0x08003a5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f908 	bl	8003bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0208 	orr.w	r2, r2, #8
 80039b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0204 	bic.w	r2, r2, #4
 80039c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6999      	ldr	r1, [r3, #24]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	619a      	str	r2, [r3, #24]
      break;
 80039d6:	e064      	b.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f94e 	bl	8003c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6999      	ldr	r1, [r3, #24]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	021a      	lsls	r2, r3, #8
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	619a      	str	r2, [r3, #24]
      break;
 8003a18:	e043      	b.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f999 	bl	8003d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0208 	orr.w	r2, r2, #8
 8003a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0204 	bic.w	r2, r2, #4
 8003a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69d9      	ldr	r1, [r3, #28]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	61da      	str	r2, [r3, #28]
      break;
 8003a58:	e023      	b.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f9e3 	bl	8003e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69d9      	ldr	r1, [r3, #28]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	021a      	lsls	r2, r3, #8
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	61da      	str	r2, [r3, #28]
      break;
 8003a9a:	e002      	b.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a34      	ldr	r2, [pc, #208]	; (8003b98 <TIM_Base_SetConfig+0xe4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00f      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad2:	d00b      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a31      	ldr	r2, [pc, #196]	; (8003b9c <TIM_Base_SetConfig+0xe8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d007      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <TIM_Base_SetConfig+0xec>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a2f      	ldr	r2, [pc, #188]	; (8003ba4 <TIM_Base_SetConfig+0xf0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a25      	ldr	r2, [pc, #148]	; (8003b98 <TIM_Base_SetConfig+0xe4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01b      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d017      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <TIM_Base_SetConfig+0xe8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <TIM_Base_SetConfig+0xec>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <TIM_Base_SetConfig+0xf0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <TIM_Base_SetConfig+0xf4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <TIM_Base_SetConfig+0xf8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <TIM_Base_SetConfig+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <TIM_Base_SetConfig+0xe4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	615a      	str	r2, [r3, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800

08003bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <TIM_OC1_SetConfig+0xc8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10c      	bne.n	8003c2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0308 	bic.w	r3, r3, #8
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <TIM_OC1_SetConfig+0xc8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40010000 	.word	0x40010000

08003c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0210 	bic.w	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0320 	bic.w	r3, r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <TIM_OC2_SetConfig+0xd4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10d      	bne.n	8003cfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <TIM_OC2_SetConfig+0xd4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d113      	bne.n	8003d2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40010000 	.word	0x40010000

08003d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <TIM_OC3_SetConfig+0xd0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10d      	bne.n	8003dd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <TIM_OC3_SetConfig+0xd0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d113      	bne.n	8003e02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40010000 	.word	0x40010000

08003e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a10      	ldr	r2, [pc, #64]	; (8003ec8 <TIM_OC4_SetConfig+0x9c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d109      	bne.n	8003ea0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40010000 	.word	0x40010000

08003ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e050      	b.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d018      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d013      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a15      	ldr	r2, [pc, #84]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40000c00 	.word	0x40000c00
 8003ff0:	40014000 	.word	0x40014000

08003ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e03f      	b.n	8004086 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fc fcfe 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	; 0x24
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f829 	bl	8004090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800404c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800405c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800406c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b0c0      	sub	sp, #256	; 0x100
 8004096:	af00      	add	r7, sp, #0
 8004098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	ea40 0301 	orr.w	r3, r0, r1
 80040b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040e8:	f021 010c 	bic.w	r1, r1, #12
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040f6:	430b      	orrs	r3, r1
 80040f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	6999      	ldr	r1, [r3, #24]
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	ea40 0301 	orr.w	r3, r0, r1
 8004116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b8f      	ldr	r3, [pc, #572]	; (800435c <UART_SetConfig+0x2cc>)
 8004120:	429a      	cmp	r2, r3
 8004122:	d005      	beq.n	8004130 <UART_SetConfig+0xa0>
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8d      	ldr	r3, [pc, #564]	; (8004360 <UART_SetConfig+0x2d0>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d104      	bne.n	800413a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7ff faea 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8004134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004138:	e003      	b.n	8004142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800413a:	f7ff fad1 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 800413e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	f040 810c 	bne.w	8004368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800415a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800415e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004162:	4622      	mov	r2, r4
 8004164:	462b      	mov	r3, r5
 8004166:	1891      	adds	r1, r2, r2
 8004168:	65b9      	str	r1, [r7, #88]	; 0x58
 800416a:	415b      	adcs	r3, r3
 800416c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800416e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004172:	4621      	mov	r1, r4
 8004174:	eb12 0801 	adds.w	r8, r2, r1
 8004178:	4629      	mov	r1, r5
 800417a:	eb43 0901 	adc.w	r9, r3, r1
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004192:	4690      	mov	r8, r2
 8004194:	4699      	mov	r9, r3
 8004196:	4623      	mov	r3, r4
 8004198:	eb18 0303 	adds.w	r3, r8, r3
 800419c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041a0:	462b      	mov	r3, r5
 80041a2:	eb49 0303 	adc.w	r3, r9, r3
 80041a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041be:	460b      	mov	r3, r1
 80041c0:	18db      	adds	r3, r3, r3
 80041c2:	653b      	str	r3, [r7, #80]	; 0x50
 80041c4:	4613      	mov	r3, r2
 80041c6:	eb42 0303 	adc.w	r3, r2, r3
 80041ca:	657b      	str	r3, [r7, #84]	; 0x54
 80041cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041d4:	f7fb fffe 	bl	80001d4 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <UART_SetConfig+0x2d4>)
 80041de:	fba3 2302 	umull	r2, r3, r3, r2
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	011c      	lsls	r4, r3, #4
 80041e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004200:	415b      	adcs	r3, r3
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004208:	4641      	mov	r1, r8
 800420a:	eb12 0a01 	adds.w	sl, r2, r1
 800420e:	4649      	mov	r1, r9
 8004210:	eb43 0b01 	adc.w	fp, r3, r1
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004228:	4692      	mov	sl, r2
 800422a:	469b      	mov	fp, r3
 800422c:	4643      	mov	r3, r8
 800422e:	eb1a 0303 	adds.w	r3, sl, r3
 8004232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004236:	464b      	mov	r3, r9
 8004238:	eb4b 0303 	adc.w	r3, fp, r3
 800423c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800424c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004254:	460b      	mov	r3, r1
 8004256:	18db      	adds	r3, r3, r3
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
 800425a:	4613      	mov	r3, r2
 800425c:	eb42 0303 	adc.w	r3, r2, r3
 8004260:	647b      	str	r3, [r7, #68]	; 0x44
 8004262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800426a:	f7fb ffb3 	bl	80001d4 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4611      	mov	r1, r2
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <UART_SetConfig+0x2d4>)
 8004276:	fba3 2301 	umull	r2, r3, r3, r1
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2264      	movs	r2, #100	; 0x64
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	1acb      	subs	r3, r1, r3
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <UART_SetConfig+0x2d4>)
 800428c:	fba3 2302 	umull	r2, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004298:	441c      	add	r4, r3
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042b4:	415b      	adcs	r3, r3
 80042b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042bc:	4641      	mov	r1, r8
 80042be:	1851      	adds	r1, r2, r1
 80042c0:	6339      	str	r1, [r7, #48]	; 0x30
 80042c2:	4649      	mov	r1, r9
 80042c4:	414b      	adcs	r3, r1
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042d4:	4659      	mov	r1, fp
 80042d6:	00cb      	lsls	r3, r1, #3
 80042d8:	4651      	mov	r1, sl
 80042da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042de:	4651      	mov	r1, sl
 80042e0:	00ca      	lsls	r2, r1, #3
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	4603      	mov	r3, r0
 80042e8:	4642      	mov	r2, r8
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f0:	464b      	mov	r3, r9
 80042f2:	460a      	mov	r2, r1
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800430c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004310:	460b      	mov	r3, r1
 8004312:	18db      	adds	r3, r3, r3
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
 8004316:	4613      	mov	r3, r2
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004326:	f7fb ff55 	bl	80001d4 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <UART_SetConfig+0x2d4>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a08      	ldr	r2, [pc, #32]	; (8004364 <UART_SetConfig+0x2d4>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4422      	add	r2, r4
 8004356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004358:	e106      	b.n	8004568 <UART_SetConfig+0x4d8>
 800435a:	bf00      	nop
 800435c:	40011000 	.word	0x40011000
 8004360:	40011400 	.word	0x40011400
 8004364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800436c:	2200      	movs	r2, #0
 800436e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800437a:	4642      	mov	r2, r8
 800437c:	464b      	mov	r3, r9
 800437e:	1891      	adds	r1, r2, r2
 8004380:	6239      	str	r1, [r7, #32]
 8004382:	415b      	adcs	r3, r3
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800438a:	4641      	mov	r1, r8
 800438c:	1854      	adds	r4, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb43 0501 	adc.w	r5, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	00eb      	lsls	r3, r5, #3
 800439e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a2:	00e2      	lsls	r2, r4, #3
 80043a4:	4614      	mov	r4, r2
 80043a6:	461d      	mov	r5, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	18e3      	adds	r3, r4, r3
 80043ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043b0:	464b      	mov	r3, r9
 80043b2:	eb45 0303 	adc.w	r3, r5, r3
 80043b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043d6:	4629      	mov	r1, r5
 80043d8:	008b      	lsls	r3, r1, #2
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e0:	4621      	mov	r1, r4
 80043e2:	008a      	lsls	r2, r1, #2
 80043e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043e8:	f7fb fef4 	bl	80001d4 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4b60      	ldr	r3, [pc, #384]	; (8004574 <UART_SetConfig+0x4e4>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	011c      	lsls	r4, r3, #4
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	61b9      	str	r1, [r7, #24]
 8004414:	415b      	adcs	r3, r3
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800441c:	4641      	mov	r1, r8
 800441e:	1851      	adds	r1, r2, r1
 8004420:	6139      	str	r1, [r7, #16]
 8004422:	4649      	mov	r1, r9
 8004424:	414b      	adcs	r3, r1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004434:	4659      	mov	r1, fp
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4651      	mov	r1, sl
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4642      	mov	r2, r8
 800444a:	189b      	adds	r3, r3, r2
 800444c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004450:	464b      	mov	r3, r9
 8004452:	460a      	mov	r2, r1
 8004454:	eb42 0303 	adc.w	r3, r2, r3
 8004458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	67bb      	str	r3, [r7, #120]	; 0x78
 8004466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004474:	4649      	mov	r1, r9
 8004476:	008b      	lsls	r3, r1, #2
 8004478:	4641      	mov	r1, r8
 800447a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800447e:	4641      	mov	r1, r8
 8004480:	008a      	lsls	r2, r1, #2
 8004482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004486:	f7fb fea5 	bl	80001d4 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4611      	mov	r1, r2
 8004490:	4b38      	ldr	r3, [pc, #224]	; (8004574 <UART_SetConfig+0x4e4>)
 8004492:	fba3 2301 	umull	r2, r3, r3, r1
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2264      	movs	r2, #100	; 0x64
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	1acb      	subs	r3, r1, r3
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	3332      	adds	r3, #50	; 0x32
 80044a4:	4a33      	ldr	r2, [pc, #204]	; (8004574 <UART_SetConfig+0x4e4>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b0:	441c      	add	r4, r3
 80044b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b6:	2200      	movs	r2, #0
 80044b8:	673b      	str	r3, [r7, #112]	; 0x70
 80044ba:	677a      	str	r2, [r7, #116]	; 0x74
 80044bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	66bb      	str	r3, [r7, #104]	; 0x68
 8004502:	464b      	mov	r3, r9
 8004504:	460a      	mov	r2, r1
 8004506:	eb42 0303 	adc.w	r3, r2, r3
 800450a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	663b      	str	r3, [r7, #96]	; 0x60
 8004516:	667a      	str	r2, [r7, #100]	; 0x64
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004524:	4649      	mov	r1, r9
 8004526:	008b      	lsls	r3, r1, #2
 8004528:	4641      	mov	r1, r8
 800452a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452e:	4641      	mov	r1, r8
 8004530:	008a      	lsls	r2, r1, #2
 8004532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004536:	f7fb fe4d 	bl	80001d4 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <UART_SetConfig+0x4e4>)
 8004540:	fba3 1302 	umull	r1, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	2164      	movs	r1, #100	; 0x64
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	3332      	adds	r3, #50	; 0x32
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <UART_SetConfig+0x4e4>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	f003 020f 	and.w	r2, r3, #15
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4422      	add	r2, r4
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004574:	51eb851f 	.word	0x51eb851f

08004578 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004578:	b084      	sub	sp, #16
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	f107 001c 	add.w	r0, r7, #28
 8004586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	2b01      	cmp	r3, #1
 800458e:	d122      	bne.n	80045d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f001 fbee 	bl	8005dac <USB_CoreReset>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]
 80045d4:	e01a      	b.n	800460c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f001 fbe2 	bl	8005dac <USB_CoreReset>
 80045e8:	4603      	mov	r3, r0
 80045ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
 80045fe:	e005      	b.n	800460c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	2b01      	cmp	r3, #1
 8004610:	d10b      	bne.n	800462a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f043 0206 	orr.w	r2, r3, #6
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800462a:	7bfb      	ldrb	r3, [r7, #15]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004636:	b004      	add	sp, #16
 8004638:	4770      	bx	lr
	...

0800463c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d165      	bne.n	800471c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4a41      	ldr	r2, [pc, #260]	; (8004758 <USB_SetTurnaroundTime+0x11c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d906      	bls.n	8004666 <USB_SetTurnaroundTime+0x2a>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4a40      	ldr	r2, [pc, #256]	; (800475c <USB_SetTurnaroundTime+0x120>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d202      	bcs.n	8004666 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004660:	230f      	movs	r3, #15
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e062      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a3c      	ldr	r2, [pc, #240]	; (800475c <USB_SetTurnaroundTime+0x120>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d306      	bcc.n	800467c <USB_SetTurnaroundTime+0x40>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4a3b      	ldr	r2, [pc, #236]	; (8004760 <USB_SetTurnaroundTime+0x124>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d202      	bcs.n	800467c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004676:	230e      	movs	r3, #14
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e057      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a38      	ldr	r2, [pc, #224]	; (8004760 <USB_SetTurnaroundTime+0x124>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d306      	bcc.n	8004692 <USB_SetTurnaroundTime+0x56>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a37      	ldr	r2, [pc, #220]	; (8004764 <USB_SetTurnaroundTime+0x128>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d202      	bcs.n	8004692 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800468c:	230d      	movs	r3, #13
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e04c      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a33      	ldr	r2, [pc, #204]	; (8004764 <USB_SetTurnaroundTime+0x128>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d306      	bcc.n	80046a8 <USB_SetTurnaroundTime+0x6c>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4a32      	ldr	r2, [pc, #200]	; (8004768 <USB_SetTurnaroundTime+0x12c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d802      	bhi.n	80046a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046a2:	230c      	movs	r3, #12
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e041      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <USB_SetTurnaroundTime+0x12c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d906      	bls.n	80046be <USB_SetTurnaroundTime+0x82>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4a2e      	ldr	r2, [pc, #184]	; (800476c <USB_SetTurnaroundTime+0x130>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d802      	bhi.n	80046be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046b8:	230b      	movs	r3, #11
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e036      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4a2a      	ldr	r2, [pc, #168]	; (800476c <USB_SetTurnaroundTime+0x130>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d906      	bls.n	80046d4 <USB_SetTurnaroundTime+0x98>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4a29      	ldr	r2, [pc, #164]	; (8004770 <USB_SetTurnaroundTime+0x134>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d802      	bhi.n	80046d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046ce:	230a      	movs	r3, #10
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e02b      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4a26      	ldr	r2, [pc, #152]	; (8004770 <USB_SetTurnaroundTime+0x134>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d906      	bls.n	80046ea <USB_SetTurnaroundTime+0xae>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4a25      	ldr	r2, [pc, #148]	; (8004774 <USB_SetTurnaroundTime+0x138>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d202      	bcs.n	80046ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046e4:	2309      	movs	r3, #9
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	e020      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a21      	ldr	r2, [pc, #132]	; (8004774 <USB_SetTurnaroundTime+0x138>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d306      	bcc.n	8004700 <USB_SetTurnaroundTime+0xc4>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4a20      	ldr	r2, [pc, #128]	; (8004778 <USB_SetTurnaroundTime+0x13c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d802      	bhi.n	8004700 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046fa:	2308      	movs	r3, #8
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	e015      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <USB_SetTurnaroundTime+0x13c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d906      	bls.n	8004716 <USB_SetTurnaroundTime+0xda>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4a1c      	ldr	r2, [pc, #112]	; (800477c <USB_SetTurnaroundTime+0x140>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d202      	bcs.n	8004716 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004710:	2307      	movs	r3, #7
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e00a      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004716:	2306      	movs	r3, #6
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e007      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004722:	2309      	movs	r3, #9
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e001      	b.n	800472c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004728:	2309      	movs	r3, #9
 800472a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	00d8acbf 	.word	0x00d8acbf
 800475c:	00e4e1c0 	.word	0x00e4e1c0
 8004760:	00f42400 	.word	0x00f42400
 8004764:	01067380 	.word	0x01067380
 8004768:	011a499f 	.word	0x011a499f
 800476c:	01312cff 	.word	0x01312cff
 8004770:	014ca43f 	.word	0x014ca43f
 8004774:	016e3600 	.word	0x016e3600
 8004778:	01a6ab1f 	.word	0x01a6ab1f
 800477c:	01e84800 	.word	0x01e84800

08004780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f043 0201 	orr.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d115      	bne.n	8004812 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047f2:	2001      	movs	r0, #1
 80047f4:	f7fc fb68 	bl	8000ec8 <HAL_Delay>
      ms++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fa45 	bl	8005c8e <USB_GetMode>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d01e      	beq.n	8004848 <USB_SetCurrentMode+0x84>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b31      	cmp	r3, #49	; 0x31
 800480e:	d9f0      	bls.n	80047f2 <USB_SetCurrentMode+0x2e>
 8004810:	e01a      	b.n	8004848 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d115      	bne.n	8004844 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004824:	2001      	movs	r0, #1
 8004826:	f7fc fb4f 	bl	8000ec8 <HAL_Delay>
      ms++;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3301      	adds	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f001 fa2c 	bl	8005c8e <USB_GetMode>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <USB_SetCurrentMode+0x84>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b31      	cmp	r3, #49	; 0x31
 8004840:	d9f0      	bls.n	8004824 <USB_SetCurrentMode+0x60>
 8004842:	e001      	b.n	8004848 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e005      	b.n	8004854 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b32      	cmp	r3, #50	; 0x32
 800484c:	d101      	bne.n	8004852 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800485c:	b084      	sub	sp, #16
 800485e:	b580      	push	{r7, lr}
 8004860:	b086      	sub	sp, #24
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800486a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e009      	b.n	8004890 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3340      	adds	r3, #64	; 0x40
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	3301      	adds	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b0e      	cmp	r3, #14
 8004894:	d9f2      	bls.n	800487c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11c      	bne.n	80048d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048aa:	f043 0302 	orr.w	r3, r3, #2
 80048ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
 80048d4:	e00b      	b.n	80048ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048f4:	461a      	mov	r2, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	4619      	mov	r1, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	461a      	mov	r2, r3
 800490a:	680b      	ldr	r3, [r1, #0]
 800490c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10c      	bne.n	800492e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d104      	bne.n	8004924 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800491a:	2100      	movs	r1, #0
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f965 	bl	8004bec <USB_SetDevSpeed>
 8004922:	e008      	b.n	8004936 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004924:	2101      	movs	r1, #1
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f960 	bl	8004bec <USB_SetDevSpeed>
 800492c:	e003      	b.n	8004936 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800492e:	2103      	movs	r1, #3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f95b 	bl	8004bec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004936:	2110      	movs	r1, #16
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8f3 	bl	8004b24 <USB_FlushTxFifo>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f91f 	bl	8004b8c <USB_FlushRxFifo>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495e:	461a      	mov	r2, r3
 8004960:	2300      	movs	r3, #0
 8004962:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	461a      	mov	r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	e043      	b.n	8004a0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004998:	d118      	bne.n	80049cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	461a      	mov	r2, r3
 80049ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e013      	b.n	80049de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	461a      	mov	r2, r3
 80049c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e008      	b.n	80049de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	461a      	mov	r2, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	461a      	mov	r2, r3
 80049ec:	2300      	movs	r3, #0
 80049ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	461a      	mov	r2, r3
 80049fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3301      	adds	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3b7      	bcc.n	8004982 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	e043      	b.n	8004aa0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2e:	d118      	bne.n	8004a62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	461a      	mov	r2, r3
 8004a44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e013      	b.n	8004a74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e008      	b.n	8004a74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3b7      	bcc.n	8004a18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f043 0210 	orr.w	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <USB_DevInit+0x2c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f043 0208 	orr.w	r2, r3, #8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b08:	f043 0304 	orr.w	r3, r3, #4
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b1c:	b004      	add	sp, #16
 8004b1e:	4770      	bx	lr
 8004b20:	803c3800 	.word	0x803c3800

08004b24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3301      	adds	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <USB_FlushTxFifo+0x64>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e01b      	b.n	8004b7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	daf2      	bge.n	8004b32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	019b      	lsls	r3, r3, #6
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <USB_FlushTxFifo+0x64>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e006      	b.n	8004b7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d0f0      	beq.n	8004b5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	00030d40 	.word	0x00030d40

08004b8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <USB_FlushRxFifo+0x5c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e018      	b.n	8004bdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	daf2      	bge.n	8004b98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2210      	movs	r2, #16
 8004bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <USB_FlushRxFifo+0x5c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e006      	b.n	8004bdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d0f0      	beq.n	8004bbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	00030d40 	.word	0x00030d40

08004bec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b087      	sub	sp, #28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0306 	and.w	r3, r3, #6
 8004c36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]
 8004c42:	e00a      	b.n	8004c5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d002      	beq.n	8004c50 <USB_GetDevSpeed+0x32>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d102      	bne.n	8004c56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c50:	2302      	movs	r3, #2
 8004c52:	75fb      	strb	r3, [r7, #23]
 8004c54:	e001      	b.n	8004c5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c56:	230f      	movs	r3, #15
 8004c58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d13a      	bne.n	8004cfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	68f9      	ldr	r1, [r7, #12]
 8004c9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d155      	bne.n	8004d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	791b      	ldrb	r3, [r3, #4]
 8004cd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	059b      	lsls	r3, r3, #22
 8004cde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e036      	b.n	8004d68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d11a      	bne.n	8004d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	791b      	ldrb	r3, [r3, #4]
 8004d4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d161      	bne.n	8004e58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004daa:	d11f      	bne.n	8004dec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	43db      	mvns	r3, r3
 8004e06:	68f9      	ldr	r1, [r7, #12]
 8004e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	2101      	movs	r1, #1
 8004e22:	fa01 f303 	lsl.w	r3, r1, r3
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e30:	4013      	ands	r3, r2
 8004e32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	0159      	lsls	r1, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	440b      	add	r3, r1
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <USB_DeactivateEndpoint+0x1b0>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]
 8004e56:	e060      	b.n	8004f1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e6e:	d11f      	bne.n	8004eb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	43db      	mvns	r3, r3
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	0159      	lsls	r1, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	4619      	mov	r1, r3
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <USB_DeactivateEndpoint+0x1b4>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	ec337800 	.word	0xec337800
 8004f2c:	eff37800 	.word	0xeff37800

08004f30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	f040 815c 	bne.w	800520a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d132      	bne.n	8004fc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb8:	0cdb      	lsrs	r3, r3, #19
 8004fba:	04db      	lsls	r3, r3, #19
 8004fbc:	6113      	str	r3, [r2, #16]
 8004fbe:	e074      	b.n	80050aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fda:	0cdb      	lsrs	r3, r3, #19
 8004fdc:	04db      	lsls	r3, r3, #19
 8004fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	440b      	add	r3, r1
 800501c:	1e59      	subs	r1, r3, #1
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	fbb1 f3f3 	udiv	r3, r1, r3
 8005026:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005028:	4b9d      	ldr	r3, [pc, #628]	; (80052a0 <USB_EPStartXfer+0x370>)
 800502a:	400b      	ands	r3, r1
 800502c:	69b9      	ldr	r1, [r7, #24]
 800502e:	0148      	lsls	r0, r1, #5
 8005030:	69f9      	ldr	r1, [r7, #28]
 8005032:	4401      	add	r1, r0
 8005034:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005038:	4313      	orrs	r3, r2
 800503a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005052:	69b9      	ldr	r1, [r7, #24]
 8005054:	0148      	lsls	r0, r1, #5
 8005056:	69f9      	ldr	r1, [r7, #28]
 8005058:	4401      	add	r1, r0
 800505a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800505e:	4313      	orrs	r3, r2
 8005060:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	791b      	ldrb	r3, [r3, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d11f      	bne.n	80050aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005084:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005088:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d14b      	bne.n	8005148 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d009      	beq.n	80050cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	461a      	mov	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	791b      	ldrb	r3, [r3, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d128      	bne.n	8005126 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d110      	bne.n	8005106 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e00f      	b.n	8005126 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005124:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e133      	b.n	80053b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005166:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	791b      	ldrb	r3, [r3, #4]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d015      	beq.n	800519c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 811b 	beq.w	80053b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	2101      	movs	r1, #1
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	69f9      	ldr	r1, [r7, #28]
 8005192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005196:	4313      	orrs	r3, r2
 8005198:	634b      	str	r3, [r1, #52]	; 0x34
 800519a:	e109      	b.n	80053b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d110      	bne.n	80051ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	e00f      	b.n	80051ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6919      	ldr	r1, [r3, #16]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	781a      	ldrb	r2, [r3, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	b298      	uxth	r0, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	4603      	mov	r3, r0
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fade 	bl	80057c4 <USB_WritePacket>
 8005208:	e0d2      	b.n	80053b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005224:	0cdb      	lsrs	r3, r3, #19
 8005226:	04db      	lsls	r3, r3, #19
 8005228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800524c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d126      	bne.n	80052a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	0148      	lsls	r0, r1, #5
 8005270:	69f9      	ldr	r1, [r7, #28]
 8005272:	4401      	add	r1, r0
 8005274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005278:	4313      	orrs	r3, r2
 800527a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800529a:	6113      	str	r3, [r2, #16]
 800529c:	e03a      	b.n	8005314 <USB_EPStartXfer+0x3e4>
 800529e:	bf00      	nop
 80052a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	1e5a      	subs	r2, r3, #1
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	8afa      	ldrh	r2, [r7, #22]
 80052c0:	fb03 f202 	mul.w	r2, r3, r2
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	8afb      	ldrh	r3, [r7, #22]
 80052d8:	04d9      	lsls	r1, r3, #19
 80052da:	4b38      	ldr	r3, [pc, #224]	; (80053bc <USB_EPStartXfer+0x48c>)
 80052dc:	400b      	ands	r3, r1
 80052de:	69b9      	ldr	r1, [r7, #24]
 80052e0:	0148      	lsls	r0, r1, #5
 80052e2:	69f9      	ldr	r1, [r7, #28]
 80052e4:	4401      	add	r1, r0
 80052e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052ea:	4313      	orrs	r3, r2
 80052ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005304:	69b9      	ldr	r1, [r7, #24]
 8005306:	0148      	lsls	r0, r1, #5
 8005308:	69f9      	ldr	r1, [r7, #28]
 800530a:	4401      	add	r1, r0
 800530c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005310:	4313      	orrs	r3, r2
 8005312:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10d      	bne.n	8005336 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6919      	ldr	r1, [r3, #16]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005332:	460a      	mov	r2, r1
 8005334:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	791b      	ldrb	r3, [r3, #4]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d128      	bne.n	8005390 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d110      	bne.n	8005370 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e00f      	b.n	8005390 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	1ff80000 	.word	0x1ff80000

080053c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	f040 80ce 	bne.w	800557e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d132      	bne.n	8005450 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005404:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005408:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800540c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800542c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005448:	0cdb      	lsrs	r3, r3, #19
 800544a:	04db      	lsls	r3, r3, #19
 800544c:	6113      	str	r3, [r2, #16]
 800544e:	e04e      	b.n	80054ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	0cdb      	lsrs	r3, r3, #19
 800546c:	04db      	lsls	r3, r3, #19
 800546e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800548e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005492:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	699a      	ldr	r2, [r3, #24]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	429a      	cmp	r2, r3
 800549e:	d903      	bls.n	80054a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054de:	6939      	ldr	r1, [r7, #16]
 80054e0:	0148      	lsls	r0, r1, #5
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	4401      	add	r1, r0
 80054e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054ea:	4313      	orrs	r3, r2
 80054ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d11e      	bne.n	8005532 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	461a      	mov	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e097      	b.n	8005662 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005550:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8083 	beq.w	8005662 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	6979      	ldr	r1, [r7, #20]
 8005574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005578:	4313      	orrs	r3, r2
 800557a:	634b      	str	r3, [r1, #52]	; 0x34
 800557c:	e071      	b.n	8005662 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005598:	0cdb      	lsrs	r3, r3, #19
 800559a:	04db      	lsls	r3, r3, #19
 800559c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005610:	6939      	ldr	r1, [r7, #16]
 8005612:	0148      	lsls	r0, r1, #5
 8005614:	6979      	ldr	r1, [r7, #20]
 8005616:	4401      	add	r1, r0
 8005618:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800561c:	4313      	orrs	r3, r2
 800561e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d10d      	bne.n	8005642 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6919      	ldr	r1, [r3, #16]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	460a      	mov	r2, r1
 8005640:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	785b      	ldrb	r3, [r3, #1]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d14a      	bne.n	8005724 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a6:	f040 8086 	bne.w	80057b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80056fe:	4293      	cmp	r3, r2
 8005700:	d902      	bls.n	8005708 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
          break;
 8005706:	e056      	b.n	80057b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800571c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005720:	d0e7      	beq.n	80056f2 <USB_EPStopXfer+0x82>
 8005722:	e048      	b.n	80057b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573c:	d13b      	bne.n	80057b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005760:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005784:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005792:	4293      	cmp	r3, r2
 8005794:	d902      	bls.n	800579c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
          break;
 800579a:	e00c      	b.n	80057b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b4:	d0e7      	beq.n	8005786 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b089      	sub	sp, #36	; 0x24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	4611      	mov	r1, r2
 80057d0:	461a      	mov	r2, r3
 80057d2:	460b      	mov	r3, r1
 80057d4:	71fb      	strb	r3, [r7, #7]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d123      	bne.n	8005832 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057ea:	88bb      	ldrh	r3, [r7, #4]
 80057ec:	3303      	adds	r3, #3
 80057ee:	089b      	lsrs	r3, r3, #2
 80057f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	e018      	b.n	800582a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	031a      	lsls	r2, r3, #12
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005804:	461a      	mov	r2, r3
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3301      	adds	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3301      	adds	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3301      	adds	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	3301      	adds	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	429a      	cmp	r2, r3
 8005830:	d3e2      	bcc.n	80057f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3724      	adds	r7, #36	; 0x24
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005840:	b480      	push	{r7}
 8005842:	b08b      	sub	sp, #44	; 0x2c
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	b29b      	uxth	r3, r3
 800585c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005866:	2300      	movs	r3, #0
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	e014      	b.n	8005896 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	601a      	str	r2, [r3, #0]
    pDest++;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	3301      	adds	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	3301      	adds	r3, #1
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	3301      	adds	r3, #1
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	3301      	adds	r3, #1
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	429a      	cmp	r2, r3
 800589c:	d3e6      	bcc.n	800586c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800589e:	8bfb      	ldrh	r3, [r7, #30]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01e      	beq.n	80058e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ae:	461a      	mov	r2, r3
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	701a      	strb	r2, [r3, #0]
      i++;
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	3301      	adds	r3, #1
 80058ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	3301      	adds	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058d6:	8bfb      	ldrh	r3, [r7, #30]
 80058d8:	3b01      	subs	r3, #1
 80058da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058dc:	8bfb      	ldrh	r3, [r7, #30]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1ea      	bne.n	80058b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	372c      	adds	r7, #44	; 0x2c
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d12c      	bne.n	8005966 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	db12      	blt.n	8005944 <USB_EPSetStall+0x54>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00f      	beq.n	8005944 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005942:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e02b      	b.n	80059be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	db12      	blt.n	800599e <USB_EPSetStall+0xae>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00f      	beq.n	800599e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005998:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800599c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d128      	bne.n	8005a3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	791b      	ldrb	r3, [r3, #4]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d003      	beq.n	8005a18 <USB_EPClearStall+0x4c>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	791b      	ldrb	r3, [r3, #4]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d138      	bne.n	8005a8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	e027      	b.n	8005a8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	791b      	ldrb	r3, [r3, #4]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d003      	beq.n	8005a6a <USB_EPClearStall+0x9e>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	791b      	ldrb	r3, [r3, #4]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d10f      	bne.n	8005a8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ab6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005aba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b12:	f023 0302 	bic.w	r3, r3, #2
 8005b16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b40:	f023 0303 	bic.w	r3, r3, #3
 8005b44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b54:	f043 0302 	orr.w	r3, r3, #2
 8005b58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b80:	68fb      	ldr	r3, [r7, #12]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	b29b      	uxth	r3, r3
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4013      	ands	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c24:	68bb      	ldr	r3, [r7, #8]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c62:	01db      	lsls	r3, r3, #7
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c80:	68bb      	ldr	r3, [r7, #8]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cc8:	f023 0307 	bic.w	r3, r3, #7
 8005ccc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	333c      	adds	r3, #60	; 0x3c
 8005d06:	3304      	adds	r3, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <USB_EP0_OutStart+0xb8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d90a      	bls.n	8005d2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d24:	d101      	bne.n	8005d2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e037      	b.n	8005d9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d58:	f043 0318 	orr.w	r3, r3, #24
 8005d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d10f      	bne.n	8005d98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	4f54300a 	.word	0x4f54300a

08005dac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a13      	ldr	r2, [pc, #76]	; (8005e10 <USB_CoreReset+0x64>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e01b      	b.n	8005e02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	daf2      	bge.n	8005db8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <USB_CoreReset+0x64>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e006      	b.n	8005e02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d0f0      	beq.n	8005de2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	00030d40 	.word	0x00030d40

08005e14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e24:	f002 fc1e 	bl	8008664 <USBD_static_malloc>
 8005e28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	32b0      	adds	r2, #176	; 0xb0
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e40:	2302      	movs	r3, #2
 8005e42:	e0d4      	b.n	8005fee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005e48:	2100      	movs	r1, #0
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f002 fc4e 	bl	80086ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	32b0      	adds	r2, #176	; 0xb0
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	32b0      	adds	r2, #176	; 0xb0
 8005e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	7c1b      	ldrb	r3, [r3, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d138      	bne.n	8005eee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e7c:	4b5e      	ldr	r3, [pc, #376]	; (8005ff8 <USBD_CDC_Init+0x1e4>)
 8005e7e:	7819      	ldrb	r1, [r3, #0]
 8005e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e84:	2202      	movs	r2, #2
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f002 fac9 	bl	800841e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e8c:	4b5a      	ldr	r3, [pc, #360]	; (8005ff8 <USBD_CDC_Init+0x1e4>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ea6:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <USBD_CDC_Init+0x1e8>)
 8005ea8:	7819      	ldrb	r1, [r3, #0]
 8005eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eae:	2202      	movs	r2, #2
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f002 fab4 	bl	800841e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005eb6:	4b51      	ldr	r3, [pc, #324]	; (8005ffc <USBD_CDC_Init+0x1e8>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ece:	2201      	movs	r2, #1
 8005ed0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ed2:	4b4b      	ldr	r3, [pc, #300]	; (8006000 <USBD_CDC_Init+0x1ec>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	f003 020f 	and.w	r2, r3, #15
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3326      	adds	r3, #38	; 0x26
 8005ee8:	2210      	movs	r2, #16
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	e035      	b.n	8005f5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005eee:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <USBD_CDC_Init+0x1e4>)
 8005ef0:	7819      	ldrb	r1, [r3, #0]
 8005ef2:	2340      	movs	r3, #64	; 0x40
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f002 fa91 	bl	800841e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005efc:	4b3e      	ldr	r3, [pc, #248]	; (8005ff8 <USBD_CDC_Init+0x1e4>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 020f 	and.w	r2, r3, #15
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	3324      	adds	r3, #36	; 0x24
 8005f12:	2201      	movs	r2, #1
 8005f14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f16:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <USBD_CDC_Init+0x1e8>)
 8005f18:	7819      	ldrb	r1, [r3, #0]
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f002 fa7d 	bl	800841e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f24:	4b35      	ldr	r3, [pc, #212]	; (8005ffc <USBD_CDC_Init+0x1e8>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 020f 	and.w	r2, r3, #15
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f40:	4b2f      	ldr	r3, [pc, #188]	; (8006000 <USBD_CDC_Init+0x1ec>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	f003 020f 	and.w	r2, r3, #15
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3326      	adds	r3, #38	; 0x26
 8005f56:	2210      	movs	r2, #16
 8005f58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f5a:	4b29      	ldr	r3, [pc, #164]	; (8006000 <USBD_CDC_Init+0x1ec>)
 8005f5c:	7819      	ldrb	r1, [r3, #0]
 8005f5e:	2308      	movs	r3, #8
 8005f60:	2203      	movs	r2, #3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f002 fa5b 	bl	800841e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f68:	4b25      	ldr	r3, [pc, #148]	; (8006000 <USBD_CDC_Init+0x1ec>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f003 020f 	and.w	r2, r3, #15
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3324      	adds	r3, #36	; 0x24
 8005f7e:	2201      	movs	r2, #1
 8005f80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	33b0      	adds	r3, #176	; 0xb0
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e018      	b.n	8005fee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	7c1b      	ldrb	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <USBD_CDC_Init+0x1e8>)
 8005fc6:	7819      	ldrb	r1, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f002 fb12 	bl	80085fc <USBD_LL_PrepareReceive>
 8005fd8:	e008      	b.n	8005fec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <USBD_CDC_Init+0x1e8>)
 8005fdc:	7819      	ldrb	r1, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f002 fb08 	bl	80085fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000093 	.word	0x20000093
 8005ffc:	20000094 	.word	0x20000094
 8006000:	20000095 	.word	0x20000095

08006004 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006010:	4b3a      	ldr	r3, [pc, #232]	; (80060fc <USBD_CDC_DeInit+0xf8>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f002 fa27 	bl	800846a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800601c:	4b37      	ldr	r3, [pc, #220]	; (80060fc <USBD_CDC_DeInit+0xf8>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 020f 	and.w	r2, r3, #15
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	3324      	adds	r3, #36	; 0x24
 8006032:	2200      	movs	r2, #0
 8006034:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006036:	4b32      	ldr	r3, [pc, #200]	; (8006100 <USBD_CDC_DeInit+0xfc>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f002 fa14 	bl	800846a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006042:	4b2f      	ldr	r3, [pc, #188]	; (8006100 <USBD_CDC_DeInit+0xfc>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800605a:	2200      	movs	r2, #0
 800605c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800605e:	4b29      	ldr	r3, [pc, #164]	; (8006104 <USBD_CDC_DeInit+0x100>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f002 fa00 	bl	800846a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <USBD_CDC_DeInit+0x100>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f003 020f 	and.w	r2, r3, #15
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	3324      	adds	r3, #36	; 0x24
 8006080:	2200      	movs	r2, #0
 8006082:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006084:	4b1f      	ldr	r3, [pc, #124]	; (8006104 <USBD_CDC_DeInit+0x100>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	3326      	adds	r3, #38	; 0x26
 800609a:	2200      	movs	r2, #0
 800609c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	32b0      	adds	r2, #176	; 0xb0
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01f      	beq.n	80060f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	33b0      	adds	r3, #176	; 0xb0
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	32b0      	adds	r2, #176	; 0xb0
 80060ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f002 fad4 	bl	8008680 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	32b0      	adds	r2, #176	; 0xb0
 80060e2:	2100      	movs	r1, #0
 80060e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000093 	.word	0x20000093
 8006100:	20000094 	.word	0x20000094
 8006104:	20000095 	.word	0x20000095

08006108 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	32b0      	adds	r2, #176	; 0xb0
 800611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006120:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006134:	2303      	movs	r3, #3
 8006136:	e0bf      	b.n	80062b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006140:	2b00      	cmp	r3, #0
 8006142:	d050      	beq.n	80061e6 <USBD_CDC_Setup+0xde>
 8006144:	2b20      	cmp	r3, #32
 8006146:	f040 80af 	bne.w	80062a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	88db      	ldrh	r3, [r3, #6]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d03a      	beq.n	80061c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b25b      	sxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	da1b      	bge.n	8006194 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	33b0      	adds	r3, #176	; 0xb0
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006172:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	88d2      	ldrh	r2, [r2, #6]
 8006178:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	88db      	ldrh	r3, [r3, #6]
 800617e:	2b07      	cmp	r3, #7
 8006180:	bf28      	it	cs
 8006182:	2307      	movcs	r3, #7
 8006184:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	89fa      	ldrh	r2, [r7, #14]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fd43 	bl	8007c18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006192:	e090      	b.n	80062b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	785a      	ldrb	r2, [r3, #1]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	88db      	ldrh	r3, [r3, #6]
 80061a2:	2b3f      	cmp	r3, #63	; 0x3f
 80061a4:	d803      	bhi.n	80061ae <USBD_CDC_Setup+0xa6>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	88db      	ldrh	r3, [r3, #6]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	e000      	b.n	80061b0 <USBD_CDC_Setup+0xa8>
 80061ae:	2240      	movs	r2, #64	; 0x40
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80061b6:	6939      	ldr	r1, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80061be:	461a      	mov	r2, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fd55 	bl	8007c70 <USBD_CtlPrepareRx>
      break;
 80061c6:	e076      	b.n	80062b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	33b0      	adds	r3, #176	; 0xb0
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	7850      	ldrb	r0, [r2, #1]
 80061de:	2200      	movs	r2, #0
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	4798      	blx	r3
      break;
 80061e4:	e067      	b.n	80062b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b0b      	cmp	r3, #11
 80061ec:	d851      	bhi.n	8006292 <USBD_CDC_Setup+0x18a>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <USBD_CDC_Setup+0xec>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006225 	.word	0x08006225
 80061f8:	080062a1 	.word	0x080062a1
 80061fc:	08006293 	.word	0x08006293
 8006200:	08006293 	.word	0x08006293
 8006204:	08006293 	.word	0x08006293
 8006208:	08006293 	.word	0x08006293
 800620c:	08006293 	.word	0x08006293
 8006210:	08006293 	.word	0x08006293
 8006214:	08006293 	.word	0x08006293
 8006218:	08006293 	.word	0x08006293
 800621c:	0800624f 	.word	0x0800624f
 8006220:	08006279 	.word	0x08006279
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b03      	cmp	r3, #3
 800622e:	d107      	bne.n	8006240 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006230:	f107 030a 	add.w	r3, r7, #10
 8006234:	2202      	movs	r2, #2
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fced 	bl	8007c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800623e:	e032      	b.n	80062a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 fc77 	bl	8007b36 <USBD_CtlError>
            ret = USBD_FAIL;
 8006248:	2303      	movs	r3, #3
 800624a:	75fb      	strb	r3, [r7, #23]
          break;
 800624c:	e02b      	b.n	80062a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d107      	bne.n	800626a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800625a:	f107 030d 	add.w	r3, r7, #13
 800625e:	2201      	movs	r2, #1
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 fcd8 	bl	8007c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006268:	e01d      	b.n	80062a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 fc62 	bl	8007b36 <USBD_CtlError>
            ret = USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	75fb      	strb	r3, [r7, #23]
          break;
 8006276:	e016      	b.n	80062a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b03      	cmp	r3, #3
 8006282:	d00f      	beq.n	80062a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 fc55 	bl	8007b36 <USBD_CtlError>
            ret = USBD_FAIL;
 800628c:	2303      	movs	r3, #3
 800628e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006290:	e008      	b.n	80062a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fc4e 	bl	8007b36 <USBD_CtlError>
          ret = USBD_FAIL;
 800629a:	2303      	movs	r3, #3
 800629c:	75fb      	strb	r3, [r7, #23]
          break;
 800629e:	e002      	b.n	80062a6 <USBD_CDC_Setup+0x19e>
          break;
 80062a0:	bf00      	nop
 80062a2:	e008      	b.n	80062b6 <USBD_CDC_Setup+0x1ae>
          break;
 80062a4:	bf00      	nop
      }
      break;
 80062a6:	e006      	b.n	80062b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fc43 	bl	8007b36 <USBD_CtlError>
      ret = USBD_FAIL;
 80062b0:	2303      	movs	r3, #3
 80062b2:	75fb      	strb	r3, [r7, #23]
      break;
 80062b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80062d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	32b0      	adds	r2, #176	; 0xb0
 80062de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e065      	b.n	80063b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	32b0      	adds	r2, #176	; 0xb0
 80062f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	f003 020f 	and.w	r2, r3, #15
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	3318      	adds	r3, #24
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d02f      	beq.n	8006374 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	f003 020f 	and.w	r2, r3, #15
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	3318      	adds	r3, #24
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 010f 	and.w	r1, r3, #15
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	460b      	mov	r3, r1
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	440b      	add	r3, r1
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4403      	add	r3, r0
 800633c:	3348      	adds	r3, #72	; 0x48
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	fbb2 f1f3 	udiv	r1, r2, r3
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800634a:	2b00      	cmp	r3, #0
 800634c:	d112      	bne.n	8006374 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	3318      	adds	r3, #24
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006366:	78f9      	ldrb	r1, [r7, #3]
 8006368:	2300      	movs	r3, #0
 800636a:	2200      	movs	r2, #0
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f002 f924 	bl	80085ba <USBD_LL_Transmit>
 8006372:	e01f      	b.n	80063b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	33b0      	adds	r3, #176	; 0xb0
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d010      	beq.n	80063b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	33b0      	adds	r3, #176	; 0xb0
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80063b0:	78fa      	ldrb	r2, [r7, #3]
 80063b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	32b0      	adds	r2, #176	; 0xb0
 80063d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	32b0      	adds	r2, #176	; 0xb0
 80063e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e01a      	b.n	8006426 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f002 f922 	bl	800863e <USBD_LL_GetRxDataSize>
 80063fa:	4602      	mov	r2, r0
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	33b0      	adds	r3, #176	; 0xb0
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006420:	4611      	mov	r1, r2
 8006422:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	32b0      	adds	r2, #176	; 0xb0
 8006440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006444:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800644c:	2303      	movs	r3, #3
 800644e:	e025      	b.n	800649c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	33b0      	adds	r3, #176	; 0xb0
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01a      	beq.n	800649a <USBD_CDC_EP0_RxReady+0x6c>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800646a:	2bff      	cmp	r3, #255	; 0xff
 800646c:	d015      	beq.n	800649a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	33b0      	adds	r3, #176	; 0xb0
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006486:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800648e:	b292      	uxth	r2, r2
 8006490:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064ac:	2182      	movs	r1, #130	; 0x82
 80064ae:	4818      	ldr	r0, [pc, #96]	; (8006510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064b0:	f000 fd09 	bl	8006ec6 <USBD_GetEpDesc>
 80064b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064b6:	2101      	movs	r1, #1
 80064b8:	4815      	ldr	r0, [pc, #84]	; (8006510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064ba:	f000 fd04 	bl	8006ec6 <USBD_GetEpDesc>
 80064be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064c0:	2181      	movs	r1, #129	; 0x81
 80064c2:	4813      	ldr	r0, [pc, #76]	; (8006510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064c4:	f000 fcff 	bl	8006ec6 <USBD_GetEpDesc>
 80064c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2210      	movs	r2, #16
 80064d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2200      	movs	r2, #0
 80064e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e4:	711a      	strb	r2, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d006      	beq.n	80064fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f8:	711a      	strb	r2, [r3, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2243      	movs	r2, #67	; 0x43
 8006502:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000050 	.word	0x20000050

08006514 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800651c:	2182      	movs	r1, #130	; 0x82
 800651e:	4818      	ldr	r0, [pc, #96]	; (8006580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006520:	f000 fcd1 	bl	8006ec6 <USBD_GetEpDesc>
 8006524:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006526:	2101      	movs	r1, #1
 8006528:	4815      	ldr	r0, [pc, #84]	; (8006580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800652a:	f000 fccc 	bl	8006ec6 <USBD_GetEpDesc>
 800652e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006530:	2181      	movs	r1, #129	; 0x81
 8006532:	4813      	ldr	r0, [pc, #76]	; (8006580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006534:	f000 fcc7 	bl	8006ec6 <USBD_GetEpDesc>
 8006538:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2210      	movs	r2, #16
 8006544:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d006      	beq.n	800655a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2200      	movs	r2, #0
 8006550:	711a      	strb	r2, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f042 0202 	orr.w	r2, r2, #2
 8006558:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d006      	beq.n	800656e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	711a      	strb	r2, [r3, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f042 0202 	orr.w	r2, r2, #2
 800656c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2243      	movs	r2, #67	; 0x43
 8006572:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006574:	4b02      	ldr	r3, [pc, #8]	; (8006580 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000050 	.word	0x20000050

08006584 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800658c:	2182      	movs	r1, #130	; 0x82
 800658e:	4818      	ldr	r0, [pc, #96]	; (80065f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006590:	f000 fc99 	bl	8006ec6 <USBD_GetEpDesc>
 8006594:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006596:	2101      	movs	r1, #1
 8006598:	4815      	ldr	r0, [pc, #84]	; (80065f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800659a:	f000 fc94 	bl	8006ec6 <USBD_GetEpDesc>
 800659e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065a0:	2181      	movs	r1, #129	; 0x81
 80065a2:	4813      	ldr	r0, [pc, #76]	; (80065f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065a4:	f000 fc8f 	bl	8006ec6 <USBD_GetEpDesc>
 80065a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2210      	movs	r2, #16
 80065b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d006      	beq.n	80065ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2200      	movs	r2, #0
 80065c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c4:	711a      	strb	r2, [r3, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d006      	beq.n	80065de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065d8:	711a      	strb	r2, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2243      	movs	r2, #67	; 0x43
 80065e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065e4:	4b02      	ldr	r3, [pc, #8]	; (80065f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000050 	.word	0x20000050

080065f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	220a      	movs	r2, #10
 8006600:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006602:	4b03      	ldr	r3, [pc, #12]	; (8006610 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	2000000c 	.word	0x2000000c

08006614 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006624:	2303      	movs	r3, #3
 8006626:	e009      	b.n	800663c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	33b0      	adds	r3, #176	; 0xb0
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	32b0      	adds	r2, #176	; 0xb0
 800665e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006662:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800666a:	2303      	movs	r3, #3
 800666c:	e008      	b.n	8006680 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	32b0      	adds	r2, #176	; 0xb0
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e004      	b.n	80066ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	32b0      	adds	r2, #176	; 0xb0
 80066da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	32b0      	adds	r2, #176	; 0xb0
 80066ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e018      	b.n	8006728 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	7c1b      	ldrb	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <USBD_CDC_ReceivePacket+0x68>)
 8006700:	7819      	ldrb	r1, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 ff75 	bl	80085fc <USBD_LL_PrepareReceive>
 8006712:	e008      	b.n	8006726 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006714:	4b06      	ldr	r3, [pc, #24]	; (8006730 <USBD_CDC_ReceivePacket+0x68>)
 8006716:	7819      	ldrb	r1, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800671e:	2340      	movs	r3, #64	; 0x40
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 ff6b 	bl	80085fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000094 	.word	0x20000094

08006734 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006748:	2303      	movs	r3, #3
 800674a:	e01f      	b.n	800678c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	79fa      	ldrb	r2, [r7, #7]
 800677e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f001 fde5 	bl	8008350 <USBD_LL_Init>
 8006786:	4603      	mov	r3, r0
 8006788:	75fb      	strb	r3, [r7, #23]

  return ret;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e025      	b.n	80067f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	32ae      	adds	r2, #174	; 0xae
 80067be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00f      	beq.n	80067e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	32ae      	adds	r2, #174	; 0xae
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	f107 020e 	add.w	r2, r7, #14
 80067dc:	4610      	mov	r0, r2
 80067de:	4798      	blx	r3
 80067e0:	4602      	mov	r2, r0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fded 	bl	80083e8 <USBD_LL_Start>
 800680e:	4603      	mov	r3, r0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	4611      	mov	r1, r2
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4611      	mov	r1, r2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800688c:	2303      	movs	r3, #3
 800688e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 f908 	bl	8007ac2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d01a      	beq.n	800690c <USBD_LL_SetupStage+0x72>
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d822      	bhi.n	8006920 <USBD_LL_SetupStage+0x86>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <USBD_LL_SetupStage+0x4a>
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d00a      	beq.n	80068f8 <USBD_LL_SetupStage+0x5e>
 80068e2:	e01d      	b.n	8006920 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fb5f 	bl	8006fb0 <USBD_StdDevReq>
 80068f2:	4603      	mov	r3, r0
 80068f4:	73fb      	strb	r3, [r7, #15]
      break;
 80068f6:	e020      	b.n	800693a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fbc7 	bl	8007094 <USBD_StdItfReq>
 8006906:	4603      	mov	r3, r0
 8006908:	73fb      	strb	r3, [r7, #15]
      break;
 800690a:	e016      	b.n	800693a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fc29 	bl	800716c <USBD_StdEPReq>
 800691a:	4603      	mov	r3, r0
 800691c:	73fb      	strb	r3, [r7, #15]
      break;
 800691e:	e00c      	b.n	800693a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006926:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800692a:	b2db      	uxtb	r3, r3
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 fdba 	bl	80084a8 <USBD_LL_StallEP>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]
      break;
 8006938:	bf00      	nop
  }

  return ret;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	460b      	mov	r3, r1
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006956:	7afb      	ldrb	r3, [r7, #11]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d16e      	bne.n	8006a3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006962:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800696a:	2b03      	cmp	r3, #3
 800696c:	f040 8098 	bne.w	8006aa0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	429a      	cmp	r2, r3
 800697a:	d913      	bls.n	80069a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	4293      	cmp	r3, r2
 8006994:	bf28      	it	cs
 8006996:	4613      	movcs	r3, r2
 8006998:	461a      	mov	r2, r3
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f001 f984 	bl	8007caa <USBD_CtlContinueRx>
 80069a2:	e07d      	b.n	8006aa0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d014      	beq.n	80069dc <USBD_LL_DataOutStage+0x98>
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d81d      	bhi.n	80069f2 <USBD_LL_DataOutStage+0xae>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <USBD_LL_DataOutStage+0x7c>
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d003      	beq.n	80069c6 <USBD_LL_DataOutStage+0x82>
 80069be:	e018      	b.n	80069f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	75bb      	strb	r3, [r7, #22]
            break;
 80069c4:	e018      	b.n	80069f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fa5e 	bl	8006e92 <USBD_CoreFindIF>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75bb      	strb	r3, [r7, #22]
            break;
 80069da:	e00d      	b.n	80069f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	4619      	mov	r1, r3
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fa60 	bl	8006eac <USBD_CoreFindEP>
 80069ec:	4603      	mov	r3, r0
 80069ee:	75bb      	strb	r3, [r7, #22]
            break;
 80069f0:	e002      	b.n	80069f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75bb      	strb	r3, [r7, #22]
            break;
 80069f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069f8:	7dbb      	ldrb	r3, [r7, #22]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d119      	bne.n	8006a32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d113      	bne.n	8006a32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a0a:	7dba      	ldrb	r2, [r7, #22]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	32ae      	adds	r2, #174	; 0xae
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a1a:	7dba      	ldrb	r2, [r7, #22]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a22:	7dba      	ldrb	r2, [r7, #22]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	32ae      	adds	r2, #174	; 0xae
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f001 f94a 	bl	8007ccc <USBD_CtlSendStatus>
 8006a38:	e032      	b.n	8006aa0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a3a:	7afb      	ldrb	r3, [r7, #11]
 8006a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	4619      	mov	r1, r3
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fa31 	bl	8006eac <USBD_CoreFindEP>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a4e:	7dbb      	ldrb	r3, [r7, #22]
 8006a50:	2bff      	cmp	r3, #255	; 0xff
 8006a52:	d025      	beq.n	8006aa0 <USBD_LL_DataOutStage+0x15c>
 8006a54:	7dbb      	ldrb	r3, [r7, #22]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d122      	bne.n	8006aa0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d117      	bne.n	8006a96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a66:	7dba      	ldrb	r2, [r7, #22]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	32ae      	adds	r2, #174	; 0xae
 8006a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00f      	beq.n	8006a96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a76:	7dba      	ldrb	r2, [r7, #22]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a7e:	7dba      	ldrb	r2, [r7, #22]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	32ae      	adds	r2, #174	; 0xae
 8006a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	7afa      	ldrb	r2, [r7, #11]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	4798      	blx	r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	e000      	b.n	8006aa2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b086      	sub	sp, #24
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d16f      	bne.n	8006b9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3314      	adds	r3, #20
 8006ac2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d15a      	bne.n	8006b84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d914      	bls.n	8006b04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	1ad2      	subs	r2, r2, r3
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	461a      	mov	r2, r3
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f001 f8ac 	bl	8007c4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006af6:	2300      	movs	r3, #0
 8006af8:	2200      	movs	r2, #0
 8006afa:	2100      	movs	r1, #0
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f001 fd7d 	bl	80085fc <USBD_LL_PrepareReceive>
 8006b02:	e03f      	b.n	8006b84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d11c      	bne.n	8006b4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d316      	bcc.n	8006b4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d20f      	bcs.n	8006b4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f001 f88d 	bl	8007c4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2100      	movs	r1, #0
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 fd5a 	bl	80085fc <USBD_LL_PrepareReceive>
 8006b48:	e01c      	b.n	8006b84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d10f      	bne.n	8006b76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b76:	2180      	movs	r1, #128	; 0x80
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f001 fc95 	bl	80084a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f001 f8b7 	bl	8007cf2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d03a      	beq.n	8006c04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff fe42 	bl	8006818 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b9c:	e032      	b.n	8006c04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b9e:	7afb      	ldrb	r3, [r7, #11]
 8006ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f97f 	bl	8006eac <USBD_CoreFindEP>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	2bff      	cmp	r3, #255	; 0xff
 8006bb6:	d025      	beq.n	8006c04 <USBD_LL_DataInStage+0x15a>
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d122      	bne.n	8006c04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d11c      	bne.n	8006c04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bca:	7dfa      	ldrb	r2, [r7, #23]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	32ae      	adds	r2, #174	; 0xae
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d014      	beq.n	8006c04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bda:	7dfa      	ldrb	r2, [r7, #23]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006be2:	7dfa      	ldrb	r2, [r7, #23]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	32ae      	adds	r2, #174	; 0xae
 8006be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	7afa      	ldrb	r2, [r7, #11]
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	4798      	blx	r3
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006bfa:	7dbb      	ldrb	r3, [r7, #22]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c00:	7dbb      	ldrb	r3, [r7, #22]
 8006c02:	e000      	b.n	8006c06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d014      	beq.n	8006c74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00e      	beq.n	8006c74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6852      	ldr	r2, [r2, #4]
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	4611      	mov	r1, r2
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c70:	2303      	movs	r3, #3
 8006c72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fbcf 	bl	800841e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2240      	movs	r2, #64	; 0x40
 8006c8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c90:	2340      	movs	r3, #64	; 0x40
 8006c92:	2200      	movs	r2, #0
 8006c94:	2180      	movs	r1, #128	; 0x80
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fbc1 	bl	800841e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2240      	movs	r2, #64	; 0x40
 8006ca6:	621a      	str	r2, [r3, #32]

  return ret;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2204      	movs	r2, #4
 8006cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d106      	bne.n	8006d20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d110      	bne.n	8006d64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	32ae      	adds	r2, #174	; 0xae
 8006d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e01c      	b.n	8006dca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d115      	bne.n	8006dc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	32ae      	adds	r2, #174	; 0xae
 8006da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32ae      	adds	r2, #174	; 0xae
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	78fa      	ldrb	r2, [r7, #3]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	32ae      	adds	r2, #174	; 0xae
 8006de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e01c      	b.n	8006e2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d115      	bne.n	8006e2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32ae      	adds	r2, #174	; 0xae
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	32ae      	adds	r2, #174	; 0xae
 8006e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	4611      	mov	r1, r2
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00e      	beq.n	8006e88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6852      	ldr	r2, [r2, #4]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	4611      	mov	r1, r2
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e84:	2303      	movs	r3, #3
 8006e86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b086      	sub	sp, #24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	885b      	ldrh	r3, [r3, #2]
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d920      	bls.n	8006f30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ef6:	e013      	b.n	8006f20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ef8:	f107 030a 	add.w	r3, r7, #10
 8006efc:	4619      	mov	r1, r3
 8006efe:	6978      	ldr	r0, [r7, #20]
 8006f00:	f000 f81b 	bl	8006f3a <USBD_GetNextDesc>
 8006f04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d108      	bne.n	8006f20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	789b      	ldrb	r3, [r3, #2]
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d008      	beq.n	8006f2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	885b      	ldrh	r3, [r3, #2]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d8e5      	bhi.n	8006ef8 <USBD_GetEpDesc+0x32>
 8006f2c:	e000      	b.n	8006f30 <USBD_GetEpDesc+0x6a>
          break;
 8006f2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f30:	693b      	ldr	r3, [r7, #16]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	881a      	ldrh	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f66:	68fb      	ldr	r3, [r7, #12]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f92:	8a3b      	ldrh	r3, [r7, #16]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	b21a      	sxth	r2, r3
 8006f98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b21b      	sxth	r3, r3
 8006fa0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fa2:	89fb      	ldrh	r3, [r7, #14]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fc6:	2b40      	cmp	r3, #64	; 0x40
 8006fc8:	d005      	beq.n	8006fd6 <USBD_StdDevReq+0x26>
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	d857      	bhi.n	800707e <USBD_StdDevReq+0xce>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00f      	beq.n	8006ff2 <USBD_StdDevReq+0x42>
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d153      	bne.n	800707e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	32ae      	adds	r2, #174	; 0xae
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff0:	e04a      	b.n	8007088 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d83b      	bhi.n	8007072 <USBD_StdDevReq+0xc2>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <USBD_StdDevReq+0x50>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007055 	.word	0x08007055
 8007004:	08007069 	.word	0x08007069
 8007008:	08007073 	.word	0x08007073
 800700c:	0800705f 	.word	0x0800705f
 8007010:	08007073 	.word	0x08007073
 8007014:	08007033 	.word	0x08007033
 8007018:	08007029 	.word	0x08007029
 800701c:	08007073 	.word	0x08007073
 8007020:	0800704b 	.word	0x0800704b
 8007024:	0800703d 	.word	0x0800703d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa3c 	bl	80074a8 <USBD_GetDescriptor>
          break;
 8007030:	e024      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fba1 	bl	800777c <USBD_SetAddress>
          break;
 800703a:	e01f      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fbe0 	bl	8007804 <USBD_SetConfig>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
          break;
 8007048:	e018      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fc83 	bl	8007958 <USBD_GetConfig>
          break;
 8007052:	e013      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fcb4 	bl	80079c4 <USBD_GetStatus>
          break;
 800705c:	e00e      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fce3 	bl	8007a2c <USBD_SetFeature>
          break;
 8007066:	e009      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fd07 	bl	8007a7e <USBD_ClrFeature>
          break;
 8007070:	e004      	b.n	800707c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fd5e 	bl	8007b36 <USBD_CtlError>
          break;
 800707a:	bf00      	nop
      }
      break;
 800707c:	e004      	b.n	8007088 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fd58 	bl	8007b36 <USBD_CtlError>
      break;
 8007086:	bf00      	nop
  }

  return ret;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop

08007094 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070aa:	2b40      	cmp	r3, #64	; 0x40
 80070ac:	d005      	beq.n	80070ba <USBD_StdItfReq+0x26>
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d852      	bhi.n	8007158 <USBD_StdItfReq+0xc4>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <USBD_StdItfReq+0x26>
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	d14e      	bne.n	8007158 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d840      	bhi.n	800714a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	889b      	ldrh	r3, [r3, #4]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d836      	bhi.n	8007140 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	889b      	ldrh	r3, [r3, #4]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fed9 	bl	8006e92 <USBD_CoreFindIF>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2bff      	cmp	r3, #255	; 0xff
 80070e8:	d01d      	beq.n	8007126 <USBD_StdItfReq+0x92>
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d11a      	bne.n	8007126 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070f0:	7bba      	ldrb	r2, [r7, #14]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32ae      	adds	r2, #174	; 0xae
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00f      	beq.n	8007120 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007100:	7bba      	ldrb	r2, [r7, #14]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007108:	7bba      	ldrb	r2, [r7, #14]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32ae      	adds	r2, #174	; 0xae
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
 800711a:	4603      	mov	r3, r0
 800711c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800711e:	e004      	b.n	800712a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007124:	e001      	b.n	800712a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007126:	2303      	movs	r3, #3
 8007128:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d110      	bne.n	8007154 <USBD_StdItfReq+0xc0>
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fdc7 	bl	8007ccc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800713e:	e009      	b.n	8007154 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fcf7 	bl	8007b36 <USBD_CtlError>
          break;
 8007148:	e004      	b.n	8007154 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fcf2 	bl	8007b36 <USBD_CtlError>
          break;
 8007152:	e000      	b.n	8007156 <USBD_StdItfReq+0xc2>
          break;
 8007154:	bf00      	nop
      }
      break;
 8007156:	e004      	b.n	8007162 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fceb 	bl	8007b36 <USBD_CtlError>
      break;
 8007160:	bf00      	nop
  }

  return ret;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	889b      	ldrh	r3, [r3, #4]
 800717e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d007      	beq.n	800719c <USBD_StdEPReq+0x30>
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	f200 817f 	bhi.w	8007490 <USBD_StdEPReq+0x324>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d02a      	beq.n	80071ec <USBD_StdEPReq+0x80>
 8007196:	2b20      	cmp	r3, #32
 8007198:	f040 817a 	bne.w	8007490 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fe83 	bl	8006eac <USBD_CoreFindEP>
 80071a6:	4603      	mov	r3, r0
 80071a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071aa:	7b7b      	ldrb	r3, [r7, #13]
 80071ac:	2bff      	cmp	r3, #255	; 0xff
 80071ae:	f000 8174 	beq.w	800749a <USBD_StdEPReq+0x32e>
 80071b2:	7b7b      	ldrb	r3, [r7, #13]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 8170 	bne.w	800749a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071ba:	7b7a      	ldrb	r2, [r7, #13]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071c2:	7b7a      	ldrb	r2, [r7, #13]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	32ae      	adds	r2, #174	; 0xae
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8163 	beq.w	800749a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071d4:	7b7a      	ldrb	r2, [r7, #13]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32ae      	adds	r2, #174	; 0xae
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071ea:	e156      	b.n	800749a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d008      	beq.n	8007206 <USBD_StdEPReq+0x9a>
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	f300 8145 	bgt.w	8007484 <USBD_StdEPReq+0x318>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 809b 	beq.w	8007336 <USBD_StdEPReq+0x1ca>
 8007200:	2b01      	cmp	r3, #1
 8007202:	d03c      	beq.n	800727e <USBD_StdEPReq+0x112>
 8007204:	e13e      	b.n	8007484 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d002      	beq.n	8007218 <USBD_StdEPReq+0xac>
 8007212:	2b03      	cmp	r3, #3
 8007214:	d016      	beq.n	8007244 <USBD_StdEPReq+0xd8>
 8007216:	e02c      	b.n	8007272 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00d      	beq.n	800723a <USBD_StdEPReq+0xce>
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b80      	cmp	r3, #128	; 0x80
 8007222:	d00a      	beq.n	800723a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f93d 	bl	80084a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800722e:	2180      	movs	r1, #128	; 0x80
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f939 	bl	80084a8 <USBD_LL_StallEP>
 8007236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007238:	e020      	b.n	800727c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc7a 	bl	8007b36 <USBD_CtlError>
              break;
 8007242:	e01b      	b.n	800727c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	885b      	ldrh	r3, [r3, #2]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10e      	bne.n	800726a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <USBD_StdEPReq+0xfe>
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b80      	cmp	r3, #128	; 0x80
 8007256:	d008      	beq.n	800726a <USBD_StdEPReq+0xfe>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	88db      	ldrh	r3, [r3, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d104      	bne.n	800726a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f91f 	bl	80084a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fd2e 	bl	8007ccc <USBD_CtlSendStatus>

              break;
 8007270:	e004      	b.n	800727c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fc5e 	bl	8007b36 <USBD_CtlError>
              break;
 800727a:	bf00      	nop
          }
          break;
 800727c:	e107      	b.n	800748e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d002      	beq.n	8007290 <USBD_StdEPReq+0x124>
 800728a:	2b03      	cmp	r3, #3
 800728c:	d016      	beq.n	80072bc <USBD_StdEPReq+0x150>
 800728e:	e04b      	b.n	8007328 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00d      	beq.n	80072b2 <USBD_StdEPReq+0x146>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d00a      	beq.n	80072b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f901 	bl	80084a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072a6:	2180      	movs	r1, #128	; 0x80
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 f8fd 	bl	80084a8 <USBD_LL_StallEP>
 80072ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072b0:	e040      	b.n	8007334 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fc3e 	bl	8007b36 <USBD_CtlError>
              break;
 80072ba:	e03b      	b.n	8007334 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	885b      	ldrh	r3, [r3, #2]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d136      	bne.n	8007332 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 f907 	bl	80084e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fcf7 	bl	8007ccc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fde2 	bl	8006eac <USBD_CoreFindEP>
 80072e8:	4603      	mov	r3, r0
 80072ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ec:	7b7b      	ldrb	r3, [r7, #13]
 80072ee:	2bff      	cmp	r3, #255	; 0xff
 80072f0:	d01f      	beq.n	8007332 <USBD_StdEPReq+0x1c6>
 80072f2:	7b7b      	ldrb	r3, [r7, #13]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d11c      	bne.n	8007332 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072f8:	7b7a      	ldrb	r2, [r7, #13]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007300:	7b7a      	ldrb	r2, [r7, #13]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32ae      	adds	r2, #174	; 0xae
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007310:	7b7a      	ldrb	r2, [r7, #13]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	32ae      	adds	r2, #174	; 0xae
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007326:	e004      	b.n	8007332 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fc03 	bl	8007b36 <USBD_CtlError>
              break;
 8007330:	e000      	b.n	8007334 <USBD_StdEPReq+0x1c8>
              break;
 8007332:	bf00      	nop
          }
          break;
 8007334:	e0ab      	b.n	800748e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d002      	beq.n	8007348 <USBD_StdEPReq+0x1dc>
 8007342:	2b03      	cmp	r3, #3
 8007344:	d032      	beq.n	80073ac <USBD_StdEPReq+0x240>
 8007346:	e097      	b.n	8007478 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <USBD_StdEPReq+0x1f2>
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b80      	cmp	r3, #128	; 0x80
 8007352:	d004      	beq.n	800735e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fbed 	bl	8007b36 <USBD_CtlError>
                break;
 800735c:	e091      	b.n	8007482 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800735e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	da0b      	bge.n	800737e <USBD_StdEPReq+0x212>
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	3310      	adds	r3, #16
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	4413      	add	r3, r2
 800737a:	3304      	adds	r3, #4
 800737c:	e00b      	b.n	8007396 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4413      	add	r3, r2
 8007394:	3304      	adds	r3, #4
 8007396:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2202      	movs	r2, #2
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc37 	bl	8007c18 <USBD_CtlSendData>
              break;
 80073aa:	e06a      	b.n	8007482 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da11      	bge.n	80073d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	f003 020f 	and.w	r2, r3, #15
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	3324      	adds	r3, #36	; 0x24
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d117      	bne.n	80073fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fbb0 	bl	8007b36 <USBD_CtlError>
                  break;
 80073d6:	e054      	b.n	8007482 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	f003 020f 	and.w	r2, r3, #15
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fb9d 	bl	8007b36 <USBD_CtlError>
                  break;
 80073fc:	e041      	b.n	8007482 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007402:	2b00      	cmp	r3, #0
 8007404:	da0b      	bge.n	800741e <USBD_StdEPReq+0x2b2>
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	3310      	adds	r3, #16
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	4413      	add	r3, r2
 800741a:	3304      	adds	r3, #4
 800741c:	e00b      	b.n	8007436 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	3304      	adds	r3, #4
 8007436:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <USBD_StdEPReq+0x2d8>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b80      	cmp	r3, #128	; 0x80
 8007442:	d103      	bne.n	800744c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e00e      	b.n	800746a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 f867 	bl	8008524 <USBD_LL_IsStallEP>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2201      	movs	r2, #1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e002      	b.n	800746a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2202      	movs	r2, #2
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fbd1 	bl	8007c18 <USBD_CtlSendData>
              break;
 8007476:	e004      	b.n	8007482 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb5b 	bl	8007b36 <USBD_CtlError>
              break;
 8007480:	bf00      	nop
          }
          break;
 8007482:	e004      	b.n	800748e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fb55 	bl	8007b36 <USBD_CtlError>
          break;
 800748c:	bf00      	nop
      }
      break;
 800748e:	e005      	b.n	800749c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb4f 	bl	8007b36 <USBD_CtlError>
      break;
 8007498:	e000      	b.n	800749c <USBD_StdEPReq+0x330>
      break;
 800749a:	bf00      	nop
  }

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	885b      	ldrh	r3, [r3, #2]
 80074c2:	0a1b      	lsrs	r3, r3, #8
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	2b06      	cmp	r3, #6
 80074ca:	f200 8128 	bhi.w	800771e <USBD_GetDescriptor+0x276>
 80074ce:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <USBD_GetDescriptor+0x2c>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	08007509 	.word	0x08007509
 80074dc:	08007549 	.word	0x08007549
 80074e0:	0800771f 	.word	0x0800771f
 80074e4:	0800771f 	.word	0x0800771f
 80074e8:	080076bf 	.word	0x080076bf
 80074ec:	080076eb 	.word	0x080076eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
      break;
 8007506:	e112      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7c1b      	ldrb	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10d      	bne.n	800752c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	f107 0208 	add.w	r2, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	2202      	movs	r2, #2
 8007528:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800752a:	e100      	b.n	800772e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f107 0208 	add.w	r2, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	2202      	movs	r2, #2
 8007544:	701a      	strb	r2, [r3, #0]
      break;
 8007546:	e0f2      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	885b      	ldrh	r3, [r3, #2]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b05      	cmp	r3, #5
 8007550:	f200 80ac 	bhi.w	80076ac <USBD_GetDescriptor+0x204>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <USBD_GetDescriptor+0xb4>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007575 	.word	0x08007575
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075dd 	.word	0x080075dd
 8007568:	08007611 	.word	0x08007611
 800756c:	08007645 	.word	0x08007645
 8007570:	08007679 	.word	0x08007679
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7c12      	ldrb	r2, [r2, #16]
 800758c:	f107 0108 	add.w	r1, r7, #8
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
 8007594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007596:	e091      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 facb 	bl	8007b36 <USBD_CtlError>
            err++;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	3301      	adds	r3, #1
 80075a4:	72fb      	strb	r3, [r7, #11]
          break;
 80075a6:	e089      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	7c12      	ldrb	r2, [r2, #16]
 80075c0:	f107 0108 	add.w	r1, r7, #8
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ca:	e077      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fab1 	bl	8007b36 <USBD_CtlError>
            err++;
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	3301      	adds	r3, #1
 80075d8:	72fb      	strb	r3, [r7, #11]
          break;
 80075da:	e06f      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	7c12      	ldrb	r2, [r2, #16]
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075fe:	e05d      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa97 	bl	8007b36 <USBD_CtlError>
            err++;
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	3301      	adds	r3, #1
 800760c:	72fb      	strb	r3, [r7, #11]
          break;
 800760e:	e055      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	7c12      	ldrb	r2, [r2, #16]
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007632:	e043      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa7d 	bl	8007b36 <USBD_CtlError>
            err++;
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	3301      	adds	r3, #1
 8007640:	72fb      	strb	r3, [r7, #11]
          break;
 8007642:	e03b      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	7c12      	ldrb	r2, [r2, #16]
 800765c:	f107 0108 	add.w	r1, r7, #8
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007666:	e029      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa63 	bl	8007b36 <USBD_CtlError>
            err++;
 8007670:	7afb      	ldrb	r3, [r7, #11]
 8007672:	3301      	adds	r3, #1
 8007674:	72fb      	strb	r3, [r7, #11]
          break;
 8007676:	e021      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769a:	e00f      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa49 	bl	8007b36 <USBD_CtlError>
            err++;
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	3301      	adds	r3, #1
 80076a8:	72fb      	strb	r3, [r7, #11]
          break;
 80076aa:	e007      	b.n	80076bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa41 	bl	8007b36 <USBD_CtlError>
          err++;
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	3301      	adds	r3, #1
 80076b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076ba:	bf00      	nop
      }
      break;
 80076bc:	e037      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7c1b      	ldrb	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f107 0208 	add.w	r2, r7, #8
 80076d2:	4610      	mov	r0, r2
 80076d4:	4798      	blx	r3
 80076d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076d8:	e029      	b.n	800772e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa2a 	bl	8007b36 <USBD_CtlError>
        err++;
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	3301      	adds	r3, #1
 80076e6:	72fb      	strb	r3, [r7, #11]
      break;
 80076e8:	e021      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7c1b      	ldrb	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	f107 0208 	add.w	r2, r7, #8
 80076fe:	4610      	mov	r0, r2
 8007700:	4798      	blx	r3
 8007702:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	2207      	movs	r2, #7
 800770a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800770c:	e00f      	b.n	800772e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fa10 	bl	8007b36 <USBD_CtlError>
        err++;
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	3301      	adds	r3, #1
 800771a:	72fb      	strb	r3, [r7, #11]
      break;
 800771c:	e007      	b.n	800772e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fa08 	bl	8007b36 <USBD_CtlError>
      err++;
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	3301      	adds	r3, #1
 800772a:	72fb      	strb	r3, [r7, #11]
      break;
 800772c:	bf00      	nop
  }

  if (err != 0U)
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11e      	bne.n	8007772 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	88db      	ldrh	r3, [r3, #6]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d016      	beq.n	800776a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800773c:	893b      	ldrh	r3, [r7, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00e      	beq.n	8007760 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88da      	ldrh	r2, [r3, #6]
 8007746:	893b      	ldrh	r3, [r7, #8]
 8007748:	4293      	cmp	r3, r2
 800774a:	bf28      	it	cs
 800774c:	4613      	movcs	r3, r2
 800774e:	b29b      	uxth	r3, r3
 8007750:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007752:	893b      	ldrh	r3, [r7, #8]
 8007754:	461a      	mov	r2, r3
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa5d 	bl	8007c18 <USBD_CtlSendData>
 800775e:	e009      	b.n	8007774 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9e7 	bl	8007b36 <USBD_CtlError>
 8007768:	e004      	b.n	8007774 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 faae 	bl	8007ccc <USBD_CtlSendStatus>
 8007770:	e000      	b.n	8007774 <USBD_GetDescriptor+0x2cc>
    return;
 8007772:	bf00      	nop
  }
}
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop

0800777c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	889b      	ldrh	r3, [r3, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d131      	bne.n	80077f2 <USBD_SetAddress+0x76>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	88db      	ldrh	r3, [r3, #6]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d12d      	bne.n	80077f2 <USBD_SetAddress+0x76>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	885b      	ldrh	r3, [r3, #2]
 800779a:	2b7f      	cmp	r3, #127	; 0x7f
 800779c:	d829      	bhi.n	80077f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	885b      	ldrh	r3, [r3, #2]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d104      	bne.n	80077c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f9bc 	bl	8007b36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077be:	e01d      	b.n	80077fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	7bfa      	ldrb	r2, [r7, #15]
 80077c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fed5 	bl	800857c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa7a 	bl	8007ccc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e6:	e009      	b.n	80077fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f0:	e004      	b.n	80077fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f99e 	bl	8007b36 <USBD_CtlError>
  }
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	b2da      	uxtb	r2, r3
 8007818:	4b4e      	ldr	r3, [pc, #312]	; (8007954 <USBD_SetConfig+0x150>)
 800781a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800781c:	4b4d      	ldr	r3, [pc, #308]	; (8007954 <USBD_SetConfig+0x150>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d905      	bls.n	8007830 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f985 	bl	8007b36 <USBD_CtlError>
    return USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	e08c      	b.n	800794a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d002      	beq.n	8007842 <USBD_SetConfig+0x3e>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d029      	beq.n	8007894 <USBD_SetConfig+0x90>
 8007840:	e075      	b.n	800792e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007842:	4b44      	ldr	r3, [pc, #272]	; (8007954 <USBD_SetConfig+0x150>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d020      	beq.n	800788c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800784a:	4b42      	ldr	r3, [pc, #264]	; (8007954 <USBD_SetConfig+0x150>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007854:	4b3f      	ldr	r3, [pc, #252]	; (8007954 <USBD_SetConfig+0x150>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fe ffe7 	bl	800682e <USBD_SetClassConfig>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f962 	bl	8007b36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800787a:	e065      	b.n	8007948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fa25 	bl	8007ccc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2203      	movs	r2, #3
 8007886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800788a:	e05d      	b.n	8007948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa1d 	bl	8007ccc <USBD_CtlSendStatus>
      break;
 8007892:	e059      	b.n	8007948 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007894:	4b2f      	ldr	r3, [pc, #188]	; (8007954 <USBD_SetConfig+0x150>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d112      	bne.n	80078c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078a4:	4b2b      	ldr	r3, [pc, #172]	; (8007954 <USBD_SetConfig+0x150>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078ae:	4b29      	ldr	r3, [pc, #164]	; (8007954 <USBD_SetConfig+0x150>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7fe ffd6 	bl	8006866 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa06 	bl	8007ccc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078c0:	e042      	b.n	8007948 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078c2:	4b24      	ldr	r3, [pc, #144]	; (8007954 <USBD_SetConfig+0x150>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d02a      	beq.n	8007926 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7fe ffc4 	bl	8006866 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078de:	4b1d      	ldr	r3, [pc, #116]	; (8007954 <USBD_SetConfig+0x150>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078e8:	4b1a      	ldr	r3, [pc, #104]	; (8007954 <USBD_SetConfig+0x150>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fe ff9d 	bl	800682e <USBD_SetClassConfig>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00f      	beq.n	800791e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f918 	bl	8007b36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fe ffa9 	bl	8006866 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800791c:	e014      	b.n	8007948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f9d4 	bl	8007ccc <USBD_CtlSendStatus>
      break;
 8007924:	e010      	b.n	8007948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f9d0 	bl	8007ccc <USBD_CtlSendStatus>
      break;
 800792c:	e00c      	b.n	8007948 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f900 	bl	8007b36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <USBD_SetConfig+0x150>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fe ff92 	bl	8006866 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007942:	2303      	movs	r3, #3
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	bf00      	nop
  }

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	2000025c 	.word	0x2000025c

08007958 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	88db      	ldrh	r3, [r3, #6]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d004      	beq.n	8007974 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f8e2 	bl	8007b36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007972:	e023      	b.n	80079bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	dc02      	bgt.n	8007986 <USBD_GetConfig+0x2e>
 8007980:	2b00      	cmp	r3, #0
 8007982:	dc03      	bgt.n	800798c <USBD_GetConfig+0x34>
 8007984:	e015      	b.n	80079b2 <USBD_GetConfig+0x5a>
 8007986:	2b03      	cmp	r3, #3
 8007988:	d00b      	beq.n	80079a2 <USBD_GetConfig+0x4a>
 800798a:	e012      	b.n	80079b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3308      	adds	r3, #8
 8007996:	2201      	movs	r2, #1
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f93c 	bl	8007c18 <USBD_CtlSendData>
        break;
 80079a0:	e00c      	b.n	80079bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3304      	adds	r3, #4
 80079a6:	2201      	movs	r2, #1
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f934 	bl	8007c18 <USBD_CtlSendData>
        break;
 80079b0:	e004      	b.n	80079bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f8be 	bl	8007b36 <USBD_CtlError>
        break;
 80079ba:	bf00      	nop
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d81e      	bhi.n	8007a1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d004      	beq.n	80079ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f8a5 	bl	8007b36 <USBD_CtlError>
        break;
 80079ec:	e01a      	b.n	8007a24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d005      	beq.n	8007a0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f043 0202 	orr.w	r2, r3, #2
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	2202      	movs	r2, #2
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f900 	bl	8007c18 <USBD_CtlSendData>
      break;
 8007a18:	e004      	b.n	8007a24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f88a 	bl	8007b36 <USBD_CtlError>
      break;
 8007a22:	bf00      	nop
  }
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	885b      	ldrh	r3, [r3, #2]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d107      	bne.n	8007a4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f940 	bl	8007ccc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a4c:	e013      	b.n	8007a76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	885b      	ldrh	r3, [r3, #2]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d10b      	bne.n	8007a6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	889b      	ldrh	r3, [r3, #4]
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f930 	bl	8007ccc <USBD_CtlSendStatus>
}
 8007a6c:	e003      	b.n	8007a76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f860 	bl	8007b36 <USBD_CtlError>
}
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d80b      	bhi.n	8007aae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	885b      	ldrh	r3, [r3, #2]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d10c      	bne.n	8007ab8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f910 	bl	8007ccc <USBD_CtlSendStatus>
      }
      break;
 8007aac:	e004      	b.n	8007ab8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f840 	bl	8007b36 <USBD_CtlError>
      break;
 8007ab6:	e000      	b.n	8007aba <USBD_ClrFeature+0x3c>
      break;
 8007ab8:	bf00      	nop
  }
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	781a      	ldrb	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	781a      	ldrb	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7ff fa41 	bl	8006f74 <SWAPBYTE>
 8007af2:	4603      	mov	r3, r0
 8007af4:	461a      	mov	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3301      	adds	r3, #1
 8007afe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff fa34 	bl	8006f74 <SWAPBYTE>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3301      	adds	r3, #1
 8007b18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff fa27 	bl	8006f74 <SWAPBYTE>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	80da      	strh	r2, [r3, #6]
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b40:	2180      	movs	r1, #128	; 0x80
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fcb0 	bl	80084a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b48:	2100      	movs	r1, #0
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fcac 	bl	80084a8 <USBD_LL_StallEP>
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d036      	beq.n	8007bdc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b72:	6938      	ldr	r0, [r7, #16]
 8007b74:	f000 f836 	bl	8007be4 <USBD_GetLen>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7812      	ldrb	r2, [r2, #0]
 8007b90:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	3301      	adds	r3, #1
 8007b96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ba8:	e013      	b.n	8007bd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	4413      	add	r3, r2
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	613b      	str	r3, [r7, #16]
    idx++;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e7      	bne.n	8007baa <USBD_GetString+0x52>
 8007bda:	e000      	b.n	8007bde <USBD_GetString+0x86>
    return;
 8007bdc:	bf00      	nop
  }
}
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bf4:	e005      	b.n	8007c02 <USBD_GetLen+0x1e>
  {
    len++;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f5      	bne.n	8007bf6 <USBD_GetLen+0x12>
  }

  return len;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fcbb 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	2100      	movs	r1, #0
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fcaa 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2203      	movs	r2, #3
 8007c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fcae 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	2100      	movs	r1, #0
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fc9d 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fc69 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2205      	movs	r2, #5
 8007cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d02:	2300      	movs	r3, #0
 8007d04:	2200      	movs	r2, #0
 8007d06:	2100      	movs	r1, #0
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fc77 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4912      	ldr	r1, [pc, #72]	; (8007d68 <MX_USB_DEVICE_Init+0x50>)
 8007d20:	4812      	ldr	r0, [pc, #72]	; (8007d6c <MX_USB_DEVICE_Init+0x54>)
 8007d22:	f7fe fd07 	bl	8006734 <USBD_Init>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d2c:	f7f8 fd82 	bl	8000834 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d30:	490f      	ldr	r1, [pc, #60]	; (8007d70 <MX_USB_DEVICE_Init+0x58>)
 8007d32:	480e      	ldr	r0, [pc, #56]	; (8007d6c <MX_USB_DEVICE_Init+0x54>)
 8007d34:	f7fe fd2e 	bl	8006794 <USBD_RegisterClass>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d3e:	f7f8 fd79 	bl	8000834 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d42:	490c      	ldr	r1, [pc, #48]	; (8007d74 <MX_USB_DEVICE_Init+0x5c>)
 8007d44:	4809      	ldr	r0, [pc, #36]	; (8007d6c <MX_USB_DEVICE_Init+0x54>)
 8007d46:	f7fe fc65 	bl	8006614 <USBD_CDC_RegisterInterface>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d50:	f7f8 fd70 	bl	8000834 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d54:	4805      	ldr	r0, [pc, #20]	; (8007d6c <MX_USB_DEVICE_Init+0x54>)
 8007d56:	f7fe fd53 	bl	8006800 <USBD_Start>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d60:	f7f8 fd68 	bl	8000834 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d64:	bf00      	nop
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	200000ac 	.word	0x200000ac
 8007d6c:	20000260 	.word	0x20000260
 8007d70:	20000018 	.word	0x20000018
 8007d74:	20000098 	.word	0x20000098

08007d78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4905      	ldr	r1, [pc, #20]	; (8007d94 <CDC_Init_FS+0x1c>)
 8007d80:	4805      	ldr	r0, [pc, #20]	; (8007d98 <CDC_Init_FS+0x20>)
 8007d82:	f7fe fc61 	bl	8006648 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d86:	4905      	ldr	r1, [pc, #20]	; (8007d9c <CDC_Init_FS+0x24>)
 8007d88:	4803      	ldr	r0, [pc, #12]	; (8007d98 <CDC_Init_FS+0x20>)
 8007d8a:	f7fe fc7f 	bl	800668c <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8007d8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	2000093c 	.word	0x2000093c
 8007d98:	20000260 	.word	0x20000260
 8007d9c:	2000053c 	.word	0x2000053c

08007da0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8007da4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	71fb      	strb	r3, [r7, #7]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b23      	cmp	r3, #35	; 0x23
 8007dc4:	d84a      	bhi.n	8007e5c <CDC_Control_FS+0xac>
 8007dc6:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <CDC_Control_FS+0x1c>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007e5d 	.word	0x08007e5d
 8007dd0:	08007e5d 	.word	0x08007e5d
 8007dd4:	08007e5d 	.word	0x08007e5d
 8007dd8:	08007e5d 	.word	0x08007e5d
 8007ddc:	08007e5d 	.word	0x08007e5d
 8007de0:	08007e5d 	.word	0x08007e5d
 8007de4:	08007e5d 	.word	0x08007e5d
 8007de8:	08007e5d 	.word	0x08007e5d
 8007dec:	08007e5d 	.word	0x08007e5d
 8007df0:	08007e5d 	.word	0x08007e5d
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007e5d 	.word	0x08007e5d
 8007dfc:	08007e5d 	.word	0x08007e5d
 8007e00:	08007e5d 	.word	0x08007e5d
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007e5d 	.word	0x08007e5d
 8007e10:	08007e5d 	.word	0x08007e5d
 8007e14:	08007e5d 	.word	0x08007e5d
 8007e18:	08007e5d 	.word	0x08007e5d
 8007e1c:	08007e5d 	.word	0x08007e5d
 8007e20:	08007e5d 	.word	0x08007e5d
 8007e24:	08007e5d 	.word	0x08007e5d
 8007e28:	08007e5d 	.word	0x08007e5d
 8007e2c:	08007e5d 	.word	0x08007e5d
 8007e30:	08007e5d 	.word	0x08007e5d
 8007e34:	08007e5d 	.word	0x08007e5d
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e5d 	.word	0x08007e5d
 8007e40:	08007e5d 	.word	0x08007e5d
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e5d 	.word	0x08007e5d
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e5d 	.word	0x08007e5d
 8007e54:	08007e5d 	.word	0x08007e5d
 8007e58:	08007e5d 	.word	0x08007e5d
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8007e5c:	bf00      	nop
    }

    return (USBD_OK);
 8007e5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4805      	ldr	r0, [pc, #20]	; (8007e90 <CDC_Receive_FS+0x24>)
 8007e7a:	f7fe fc07 	bl	800668c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e7e:	4804      	ldr	r0, [pc, #16]	; (8007e90 <CDC_Receive_FS+0x24>)
 8007e80:	f7fe fc22 	bl	80066c8 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8007e84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000260 	.word	0x20000260

08007e94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
	...

08007eb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2212      	movs	r2, #18
 8007ec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007eca:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	200000c8 	.word	0x200000c8

08007edc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2204      	movs	r2, #4
 8007eec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007eee:	4b03      	ldr	r3, [pc, #12]	; (8007efc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	200000dc 	.word	0x200000dc

08007f00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d105      	bne.n	8007f1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	4907      	ldr	r1, [pc, #28]	; (8007f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f16:	4808      	ldr	r0, [pc, #32]	; (8007f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f18:	f7ff fe1e 	bl	8007b58 <USBD_GetString>
 8007f1c:	e004      	b.n	8007f28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	4904      	ldr	r1, [pc, #16]	; (8007f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f22:	4805      	ldr	r0, [pc, #20]	; (8007f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f24:	f7ff fe18 	bl	8007b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f28:	4b02      	ldr	r3, [pc, #8]	; (8007f34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000d3c 	.word	0x20000d3c
 8007f38:	0800875c 	.word	0x0800875c

08007f3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	6039      	str	r1, [r7, #0]
 8007f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	4904      	ldr	r1, [pc, #16]	; (8007f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f4c:	4804      	ldr	r0, [pc, #16]	; (8007f60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f4e:	f7ff fe03 	bl	8007b58 <USBD_GetString>
  return USBD_StrDesc;
 8007f52:	4b02      	ldr	r3, [pc, #8]	; (8007f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20000d3c 	.word	0x20000d3c
 8007f60:	08008774 	.word	0x08008774

08007f64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	6039      	str	r1, [r7, #0]
 8007f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	221a      	movs	r2, #26
 8007f74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f76:	f000 f843 	bl	8008000 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f7a:	4b02      	ldr	r3, [pc, #8]	; (8007f84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	200000e0 	.word	0x200000e0

08007f88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4907      	ldr	r1, [pc, #28]	; (8007fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f9e:	4808      	ldr	r0, [pc, #32]	; (8007fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fa0:	f7ff fdda 	bl	8007b58 <USBD_GetString>
 8007fa4:	e004      	b.n	8007fb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4904      	ldr	r1, [pc, #16]	; (8007fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007faa:	4805      	ldr	r0, [pc, #20]	; (8007fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fac:	f7ff fdd4 	bl	8007b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000d3c 	.word	0x20000d3c
 8007fc0:	08008788 	.word	0x08008788

08007fc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	6039      	str	r1, [r7, #0]
 8007fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d105      	bne.n	8007fe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4907      	ldr	r1, [pc, #28]	; (8007ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fda:	4808      	ldr	r0, [pc, #32]	; (8007ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fdc:	f7ff fdbc 	bl	8007b58 <USBD_GetString>
 8007fe0:	e004      	b.n	8007fec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	4904      	ldr	r1, [pc, #16]	; (8007ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fe6:	4805      	ldr	r0, [pc, #20]	; (8007ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fe8:	f7ff fdb6 	bl	8007b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fec:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000d3c 	.word	0x20000d3c
 8007ffc:	08008794 	.word	0x08008794

08008000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <Get_SerialNum+0x44>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800800c:	4b0e      	ldr	r3, [pc, #56]	; (8008048 <Get_SerialNum+0x48>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008012:	4b0e      	ldr	r3, [pc, #56]	; (800804c <Get_SerialNum+0x4c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d009      	beq.n	800803a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008026:	2208      	movs	r2, #8
 8008028:	4909      	ldr	r1, [pc, #36]	; (8008050 <Get_SerialNum+0x50>)
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 f814 	bl	8008058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008030:	2204      	movs	r2, #4
 8008032:	4908      	ldr	r1, [pc, #32]	; (8008054 <Get_SerialNum+0x54>)
 8008034:	68b8      	ldr	r0, [r7, #8]
 8008036:	f000 f80f 	bl	8008058 <IntToUnicode>
  }
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	1fff7a10 	.word	0x1fff7a10
 8008048:	1fff7a14 	.word	0x1fff7a14
 800804c:	1fff7a18 	.word	0x1fff7a18
 8008050:	200000e2 	.word	0x200000e2
 8008054:	200000f2 	.word	0x200000f2

08008058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800806a:	2300      	movs	r3, #0
 800806c:	75fb      	strb	r3, [r7, #23]
 800806e:	e027      	b.n	80080c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	0f1b      	lsrs	r3, r3, #28
 8008074:	2b09      	cmp	r3, #9
 8008076:	d80b      	bhi.n	8008090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	0f1b      	lsrs	r3, r3, #28
 800807c:	b2da      	uxtb	r2, r3
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	4619      	mov	r1, r3
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	440b      	add	r3, r1
 8008088:	3230      	adds	r2, #48	; 0x30
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	701a      	strb	r2, [r3, #0]
 800808e:	e00a      	b.n	80080a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	0f1b      	lsrs	r3, r3, #28
 8008094:	b2da      	uxtb	r2, r3
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	4619      	mov	r1, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	440b      	add	r3, r1
 80080a0:	3237      	adds	r2, #55	; 0x37
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	3301      	adds	r3, #1
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	4413      	add	r3, r2
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	3301      	adds	r3, #1
 80080be:	75fb      	strb	r3, [r7, #23]
 80080c0:	7dfa      	ldrb	r2, [r7, #23]
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d3d3      	bcc.n	8008070 <IntToUnicode+0x18>
  }
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08a      	sub	sp, #40	; 0x28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080e0:	f107 0314 	add.w	r3, r7, #20
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	605a      	str	r2, [r3, #4]
 80080ea:	609a      	str	r2, [r3, #8]
 80080ec:	60da      	str	r2, [r3, #12]
 80080ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080f8:	d13a      	bne.n	8008170 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080fa:	2300      	movs	r3, #0
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	4b1e      	ldr	r3, [pc, #120]	; (8008178 <HAL_PCD_MspInit+0xa0>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	4a1d      	ldr	r2, [pc, #116]	; (8008178 <HAL_PCD_MspInit+0xa0>)
 8008104:	f043 0301 	orr.w	r3, r3, #1
 8008108:	6313      	str	r3, [r2, #48]	; 0x30
 800810a:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <HAL_PCD_MspInit+0xa0>)
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008116:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800811a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800811c:	2302      	movs	r3, #2
 800811e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008120:	2300      	movs	r3, #0
 8008122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008124:	2303      	movs	r3, #3
 8008126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008128:	230a      	movs	r3, #10
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800812c:	f107 0314 	add.w	r3, r7, #20
 8008130:	4619      	mov	r1, r3
 8008132:	4812      	ldr	r0, [pc, #72]	; (800817c <HAL_PCD_MspInit+0xa4>)
 8008134:	f7f9 f95e 	bl	80013f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008138:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <HAL_PCD_MspInit+0xa0>)
 800813a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813c:	4a0e      	ldr	r2, [pc, #56]	; (8008178 <HAL_PCD_MspInit+0xa0>)
 800813e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008142:	6353      	str	r3, [r2, #52]	; 0x34
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	4b0b      	ldr	r3, [pc, #44]	; (8008178 <HAL_PCD_MspInit+0xa0>)
 800814a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814c:	4a0a      	ldr	r2, [pc, #40]	; (8008178 <HAL_PCD_MspInit+0xa0>)
 800814e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008152:	6453      	str	r3, [r2, #68]	; 0x44
 8008154:	4b08      	ldr	r3, [pc, #32]	; (8008178 <HAL_PCD_MspInit+0xa0>)
 8008156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008160:	2200      	movs	r2, #0
 8008162:	2100      	movs	r1, #0
 8008164:	2043      	movs	r0, #67	; 0x43
 8008166:	f7f8 ffae 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800816a:	2043      	movs	r0, #67	; 0x43
 800816c:	f7f8 ffc7 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008170:	bf00      	nop
 8008172:	3728      	adds	r7, #40	; 0x28
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40023800 	.word	0x40023800
 800817c:	40020000 	.word	0x40020000

08008180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f7fe fb7f 	bl	800689a <USBD_LL_SetupStage>
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	4619      	mov	r1, r3
 80081ce:	f7fe fbb9 	bl	8006944 <USBD_LL_DataOutStage>
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4613      	mov	r3, r2
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	334c      	adds	r3, #76	; 0x4c
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	4619      	mov	r1, r3
 8008202:	f7fe fc52 	bl	8006aaa <USBD_LL_DataInStage>
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe fd86 	bl	8006d2e <USBD_LL_SOF>
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008232:	2301      	movs	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d001      	beq.n	8008242 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800823e:	f7f8 faf9 	bl	8000834 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fd30 	bl	8006cb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fcd8 	bl	8006c0e <USBD_LL_Reset>
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fd2b 	bl	8006cd2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <HAL_PCD_SuspendCallback+0x48>)
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	4a03      	ldr	r2, [pc, #12]	; (80082b0 <HAL_PCD_SuspendCallback+0x48>)
 80082a2:	f043 0306 	orr.w	r3, r3, #6
 80082a6:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	e000ed00 	.word	0xe000ed00

080082b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fd1b 	bl	8006cfe <USBD_LL_Resume>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fd73 	bl	8006dd2 <USBD_LL_IsoOUTIncomplete>
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fd2f 	bl	8006d6e <USBD_LL_IsoINIncomplete>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fd85 	bl	8006e36 <USBD_LL_DevConnected>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fd82 	bl	8006e4c <USBD_LL_DevDisconnected>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d13c      	bne.n	80083da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008360:	4a20      	ldr	r2, [pc, #128]	; (80083e4 <USBD_LL_Init+0x94>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <USBD_LL_Init+0x94>)
 800836c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008370:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <USBD_LL_Init+0x94>)
 8008372:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008376:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008378:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <USBD_LL_Init+0x94>)
 800837a:	2204      	movs	r2, #4
 800837c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800837e:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <USBD_LL_Init+0x94>)
 8008380:	2202      	movs	r2, #2
 8008382:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008384:	4b17      	ldr	r3, [pc, #92]	; (80083e4 <USBD_LL_Init+0x94>)
 8008386:	2200      	movs	r2, #0
 8008388:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800838a:	4b16      	ldr	r3, [pc, #88]	; (80083e4 <USBD_LL_Init+0x94>)
 800838c:	2202      	movs	r2, #2
 800838e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008390:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <USBD_LL_Init+0x94>)
 8008392:	2200      	movs	r2, #0
 8008394:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008396:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <USBD_LL_Init+0x94>)
 8008398:	2200      	movs	r2, #0
 800839a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800839c:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <USBD_LL_Init+0x94>)
 800839e:	2200      	movs	r2, #0
 80083a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083a2:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <USBD_LL_Init+0x94>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <USBD_LL_Init+0x94>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083ae:	480d      	ldr	r0, [pc, #52]	; (80083e4 <USBD_LL_Init+0x94>)
 80083b0:	f7f9 fae8 	bl	8001984 <HAL_PCD_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083ba:	f7f8 fa3b 	bl	8000834 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083be:	2180      	movs	r1, #128	; 0x80
 80083c0:	4808      	ldr	r0, [pc, #32]	; (80083e4 <USBD_LL_Init+0x94>)
 80083c2:	f7fa fd40 	bl	8002e46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083c6:	2240      	movs	r2, #64	; 0x40
 80083c8:	2100      	movs	r1, #0
 80083ca:	4806      	ldr	r0, [pc, #24]	; (80083e4 <USBD_LL_Init+0x94>)
 80083cc:	f7fa fcf4 	bl	8002db8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083d0:	2280      	movs	r2, #128	; 0x80
 80083d2:	2101      	movs	r1, #1
 80083d4:	4803      	ldr	r0, [pc, #12]	; (80083e4 <USBD_LL_Init+0x94>)
 80083d6:	f7fa fcef 	bl	8002db8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000f3c 	.word	0x20000f3c

080083e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083fe:	4618      	mov	r0, r3
 8008400:	f7f9 fbdd 	bl	8001bbe <HAL_PCD_Start>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f942 	bl	8008694 <USBD_Get_USB_Status>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008414:	7bbb      	ldrb	r3, [r7, #14]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	461a      	mov	r2, r3
 800842c:	4603      	mov	r3, r0
 800842e:	70fb      	strb	r3, [r7, #3]
 8008430:	460b      	mov	r3, r1
 8008432:	70bb      	strb	r3, [r7, #2]
 8008434:	4613      	mov	r3, r2
 8008436:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008446:	78bb      	ldrb	r3, [r7, #2]
 8008448:	883a      	ldrh	r2, [r7, #0]
 800844a:	78f9      	ldrb	r1, [r7, #3]
 800844c:	f7fa f8ae 	bl	80025ac <HAL_PCD_EP_Open>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f91c 	bl	8008694 <USBD_Get_USB_Status>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008460:	7bbb      	ldrb	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7fa f8f7 	bl	800267c <HAL_PCD_EP_Close>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 f8fd 	bl	8008694 <USBD_Get_USB_Status>
 800849a:	4603      	mov	r3, r0
 800849c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800849e:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fa f9cf 	bl	800286a <HAL_PCD_EP_SetStall>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f8de 	bl	8008694 <USBD_Get_USB_Status>
 80084d8:	4603      	mov	r3, r0
 80084da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008500:	78fa      	ldrb	r2, [r7, #3]
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f7fa fa14 	bl	8002932 <HAL_PCD_EP_ClrStall>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f8bf 	bl	8008694 <USBD_Get_USB_Status>
 8008516:	4603      	mov	r3, r0
 8008518:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800851a:	7bbb      	ldrb	r3, [r7, #14]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008536:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da0b      	bge.n	8008558 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	4613      	mov	r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	333e      	adds	r3, #62	; 0x3e
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	e00b      	b.n	8008570 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800856e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	4611      	mov	r1, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f7f9 ffe1 	bl	8002562 <HAL_PCD_SetAddress>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f874 	bl	8008694 <USBD_Get_USB_Status>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
 80085c6:	460b      	mov	r3, r1
 80085c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085d8:	7af9      	ldrb	r1, [r7, #11]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	f7fa f8fa 	bl	80027d6 <HAL_PCD_EP_Transmit>
 80085e2:	4603      	mov	r3, r0
 80085e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f853 	bl	8008694 <USBD_Get_USB_Status>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	460b      	mov	r3, r1
 800860a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800861a:	7af9      	ldrb	r1, [r7, #11]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	f7fa f876 	bl	8002710 <HAL_PCD_EP_Receive>
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008628:	7dfb      	ldrb	r3, [r7, #23]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f832 	bl	8008694 <USBD_Get_USB_Status>
 8008630:	4603      	mov	r3, r0
 8008632:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008634:	7dbb      	ldrb	r3, [r7, #22]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f7fa f8a6 	bl	80027a6 <HAL_PCD_EP_GetRxCount>
 800865a:	4603      	mov	r3, r0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800866c:	4b03      	ldr	r3, [pc, #12]	; (800867c <USBD_static_malloc+0x18>)
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20001448 	.word	0x20001448

08008680 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]

}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d817      	bhi.n	80086d8 <USBD_Get_USB_Status+0x44>
 80086a8:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <USBD_Get_USB_Status+0x1c>)
 80086aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ae:	bf00      	nop
 80086b0:	080086c1 	.word	0x080086c1
 80086b4:	080086c7 	.word	0x080086c7
 80086b8:	080086cd 	.word	0x080086cd
 80086bc:	080086d3 	.word	0x080086d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
    break;
 80086c4:	e00b      	b.n	80086de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	73fb      	strb	r3, [r7, #15]
    break;
 80086ca:	e008      	b.n	80086de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086cc:	2301      	movs	r3, #1
 80086ce:	73fb      	strb	r3, [r7, #15]
    break;
 80086d0:	e005      	b.n	80086de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086d2:	2303      	movs	r3, #3
 80086d4:	73fb      	strb	r3, [r7, #15]
    break;
 80086d6:	e002      	b.n	80086de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086d8:	2303      	movs	r3, #3
 80086da:	73fb      	strb	r3, [r7, #15]
    break;
 80086dc:	bf00      	nop
  }
  return usb_status;
 80086de:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <memset>:
 80086ec:	4402      	add	r2, r0
 80086ee:	4603      	mov	r3, r0
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d100      	bne.n	80086f6 <memset+0xa>
 80086f4:	4770      	bx	lr
 80086f6:	f803 1b01 	strb.w	r1, [r3], #1
 80086fa:	e7f9      	b.n	80086f0 <memset+0x4>

080086fc <__libc_init_array>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	4d0d      	ldr	r5, [pc, #52]	; (8008734 <__libc_init_array+0x38>)
 8008700:	4c0d      	ldr	r4, [pc, #52]	; (8008738 <__libc_init_array+0x3c>)
 8008702:	1b64      	subs	r4, r4, r5
 8008704:	10a4      	asrs	r4, r4, #2
 8008706:	2600      	movs	r6, #0
 8008708:	42a6      	cmp	r6, r4
 800870a:	d109      	bne.n	8008720 <__libc_init_array+0x24>
 800870c:	4d0b      	ldr	r5, [pc, #44]	; (800873c <__libc_init_array+0x40>)
 800870e:	4c0c      	ldr	r4, [pc, #48]	; (8008740 <__libc_init_array+0x44>)
 8008710:	f000 f818 	bl	8008744 <_init>
 8008714:	1b64      	subs	r4, r4, r5
 8008716:	10a4      	asrs	r4, r4, #2
 8008718:	2600      	movs	r6, #0
 800871a:	42a6      	cmp	r6, r4
 800871c:	d105      	bne.n	800872a <__libc_init_array+0x2e>
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	f855 3b04 	ldr.w	r3, [r5], #4
 8008724:	4798      	blx	r3
 8008726:	3601      	adds	r6, #1
 8008728:	e7ee      	b.n	8008708 <__libc_init_array+0xc>
 800872a:	f855 3b04 	ldr.w	r3, [r5], #4
 800872e:	4798      	blx	r3
 8008730:	3601      	adds	r6, #1
 8008732:	e7f2      	b.n	800871a <__libc_init_array+0x1e>
 8008734:	080087cc 	.word	0x080087cc
 8008738:	080087cc 	.word	0x080087cc
 800873c:	080087cc 	.word	0x080087cc
 8008740:	080087d0 	.word	0x080087d0

08008744 <_init>:
 8008744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008746:	bf00      	nop
 8008748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874a:	bc08      	pop	{r3}
 800874c:	469e      	mov	lr, r3
 800874e:	4770      	bx	lr

08008750 <_fini>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	bf00      	nop
 8008754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008756:	bc08      	pop	{r3}
 8008758:	469e      	mov	lr, r3
 800875a:	4770      	bx	lr
