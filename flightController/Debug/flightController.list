
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08013ef8  08013ef8  00023ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080145c8  080145c8  00030300  2**0
                  CONTENTS
  4 .ARM          00000008  080145c8  080145c8  000245c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145d0  080145d0  00030300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145d0  080145d0  000245d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080145d4  080145d4  000245d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  080145d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e4  20000300  080148d8  00030300  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  080148d8  000323e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ad9  00000000  00000000  00030373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006087  00000000  00000000  00056e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020d8  00000000  00000000  0005ced8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000194d  00000000  00000000  0005efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021146  00000000  00000000  000608fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cb6a  00000000  00000000  00081a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adeec  00000000  00000000  000ae5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009dd4  00000000  00000000  0015c49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00166270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000300 	.word	0x20000300
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013edc 	.word	0x08013edc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000304 	.word	0x20000304
 80001dc:	08013edc 	.word	0x08013edc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 2UL), &FlightController_StartUp_Handle);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	4927      	ldr	r1, [pc, #156]	; (8001048 <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000faa:	4828      	ldr	r0, [pc, #160]	; (800104c <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000fac:	f00c fc85 	bl	800d8ba <xTaskCreate>
 8000fb0:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00a      	beq.n	8000fce <FreeRTOS_CreateStartUpTasks+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbc:	f383 8811 	msr	BASEPRI, r3
 8000fc0:	f3bf 8f6f 	isb	sy
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fca:	bf00      	nop
 8000fcc:	e7fe      	b.n	8000fcc <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d104      	bne.n	8000fe0 <FreeRTOS_CreateStartUpTasks+0x4c>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00c fd9e 	bl	800db1c <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_OnOffButton_Handle);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fee:	4919      	ldr	r1, [pc, #100]	; (8001054 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000ff2:	f00c fc62 	bl	800d8ba <xTaskCreate>
 8000ff6:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00a      	beq.n	8001014 <FreeRTOS_CreateStartUpTasks+0x80>
	__asm volatile
 8000ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	607b      	str	r3, [r7, #4]
}
 8001010:	bf00      	nop
 8001012:	e7fe      	b.n	8001012 <FreeRTOS_CreateStartUpTasks+0x7e>

    if (FlightController_OnOffButton_Handle == NULL) {
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <FreeRTOS_CreateStartUpTasks+0x92>
        vTaskDelete(FlightController_OnOffButton_Handle);
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f00c fd7b 	bl	800db1c <vTaskDelete>
    }

    /* Timer1: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <FreeRTOS_CreateStartUpTasks+0xc8>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2201      	movs	r2, #1
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001032:	f00d fbd5 	bl	800e7e0 <xTimerCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000031c 	.word	0x2000031c
 8001048:	08013ef8 	.word	0x08013ef8
 800104c:	08001359 	.word	0x08001359
 8001050:	20000330 	.word	0x20000330
 8001054:	08013f14 	.word	0x08013f14
 8001058:	08001689 	.word	0x08001689
 800105c:	08001921 	.word	0x08001921
 8001060:	08013f34 	.word	0x08013f34
 8001064:	20000344 	.word	0x20000344

08001068 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_ControlSystem_Handle);
 800106e:	4b8e      	ldr	r3, [pc, #568]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2303      	movs	r3, #3
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	498b      	ldr	r1, [pc, #556]	; (80012ac <FreeRTOS_CreateTasks+0x244>)
 800107e:	488c      	ldr	r0, [pc, #560]	; (80012b0 <FreeRTOS_CreateTasks+0x248>)
 8001080:	f00c fc1b 	bl	800d8ba <xTaskCreate>
 8001084:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00a      	beq.n	80010a2 <FreeRTOS_CreateTasks+0x3a>
	__asm volatile
 800108c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001090:	f383 8811 	msr	BASEPRI, r3
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	623b      	str	r3, [r7, #32]
}
 800109e:	bf00      	nop
 80010a0:	e7fe      	b.n	80010a0 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 80010a2:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <FreeRTOS_CreateTasks+0x4c>
        vTaskDelete(FlightController_ControlSystem_Handle);
 80010aa:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00c fd34 	bl	800db1c <vTaskDelete>
    }

    /* Task 2: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_FSA8S_Handle);
 80010b4:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2303      	movs	r3, #3
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c2:	497d      	ldr	r1, [pc, #500]	; (80012b8 <FreeRTOS_CreateTasks+0x250>)
 80010c4:	487d      	ldr	r0, [pc, #500]	; (80012bc <FreeRTOS_CreateTasks+0x254>)
 80010c6:	f00c fbf8 	bl	800d8ba <xTaskCreate>
 80010ca:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d00a      	beq.n	80010e8 <FreeRTOS_CreateTasks+0x80>
	__asm volatile
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	61fb      	str	r3, [r7, #28]
}
 80010e4:	bf00      	nop
 80010e6:	e7fe      	b.n	80010e6 <FreeRTOS_CreateTasks+0x7e>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 80010f0:	4b70      	ldr	r3, [pc, #448]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00c fd11 	bl	800db1c <vTaskDelete>
    }

    /* Task 3: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_GY87_Handle);
 80010fa:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2303      	movs	r3, #3
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001108:	496e      	ldr	r1, [pc, #440]	; (80012c4 <FreeRTOS_CreateTasks+0x25c>)
 800110a:	486f      	ldr	r0, [pc, #444]	; (80012c8 <FreeRTOS_CreateTasks+0x260>)
 800110c:	f00c fbd5 	bl	800d8ba <xTaskCreate>
 8001110:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00a      	beq.n	800112e <FreeRTOS_CreateTasks+0xc6>
	__asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	61bb      	str	r3, [r7, #24]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <FreeRTOS_CreateTasks+0xc4>

    if (FlightController_Read_GY87_Handle == NULL) {
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_GY87_Handle);
 8001136:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f00c fcee 	bl	800db1c <vTaskDelete>
    }

    /* Task 4: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Write_ESCs_Handle);
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2303      	movs	r3, #3
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	4960      	ldr	r1, [pc, #384]	; (80012d0 <FreeRTOS_CreateTasks+0x268>)
 8001150:	4860      	ldr	r0, [pc, #384]	; (80012d4 <FreeRTOS_CreateTasks+0x26c>)
 8001152:	f00c fbb2 	bl	800d8ba <xTaskCreate>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b01      	cmp	r3, #1
 800115c:	d00a      	beq.n	8001174 <FreeRTOS_CreateTasks+0x10c>
	__asm volatile
 800115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	f3bf 8f6f 	isb	sy
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	617b      	str	r3, [r7, #20]
}
 8001170:	bf00      	nop
 8001172:	e7fe      	b.n	8001172 <FreeRTOS_CreateTasks+0x10a>

    if (FlightController_Write_ESCs_Handle == NULL) {
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00c fccb 	bl	800db1c <vTaskDelete>
    }

    /* Task 5: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_BatteryLevel_Handle);
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2303      	movs	r3, #3
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	4951      	ldr	r1, [pc, #324]	; (80012dc <FreeRTOS_CreateTasks+0x274>)
 8001196:	4852      	ldr	r0, [pc, #328]	; (80012e0 <FreeRTOS_CreateTasks+0x278>)
 8001198:	f00c fb8f 	bl	800d8ba <xTaskCreate>
 800119c:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00a      	beq.n	80011ba <FreeRTOS_CreateTasks+0x152>
	__asm volatile
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	613b      	str	r3, [r7, #16]
}
 80011b6:	bf00      	nop
 80011b8:	e7fe      	b.n	80011b8 <FreeRTOS_CreateTasks+0x150>

    if (FlightController_BatteryLevel_Handle == NULL) {
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 80011c2:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00c fca8 	bl	800db1c <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_BatteryAlarm_Handle);
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2303      	movs	r3, #3
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	4943      	ldr	r1, [pc, #268]	; (80012e8 <FreeRTOS_CreateTasks+0x280>)
 80011dc:	4843      	ldr	r0, [pc, #268]	; (80012ec <FreeRTOS_CreateTasks+0x284>)
 80011de:	f00c fb6c 	bl	800d8ba <xTaskCreate>
 80011e2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d00a      	beq.n	8001200 <FreeRTOS_CreateTasks+0x198>
	__asm volatile
 80011ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ee:	f383 8811 	msr	BASEPRI, r3
 80011f2:	f3bf 8f6f 	isb	sy
 80011f6:	f3bf 8f4f 	dsb	sy
 80011fa:	60fb      	str	r3, [r7, #12]
}
 80011fc:	bf00      	nop
 80011fe:	e7fe      	b.n	80011fe <FreeRTOS_CreateTasks+0x196>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <FreeRTOS_CreateTasks+0x1aa>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f00c fc85 	bl	800db1c <vTaskDelete>
    }

    /* Task 7: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_HeartbeatLight_Handle);
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2303      	movs	r3, #3
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	4934      	ldr	r1, [pc, #208]	; (80012f4 <FreeRTOS_CreateTasks+0x28c>)
 8001222:	4835      	ldr	r0, [pc, #212]	; (80012f8 <FreeRTOS_CreateTasks+0x290>)
 8001224:	f00c fb49 	bl	800d8ba <xTaskCreate>
 8001228:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00a      	beq.n	8001246 <FreeRTOS_CreateTasks+0x1de>
	__asm volatile
 8001230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy
 8001240:	60bb      	str	r3, [r7, #8]
}
 8001242:	bf00      	nop
 8001244:	e7fe      	b.n	8001244 <FreeRTOS_CreateTasks+0x1dc>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <FreeRTOS_CreateTasks+0x1f0>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f00c fc62 	bl	800db1c <vTaskDelete>
    }

    /* Task 8: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_FlightLights_Handle);
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2303      	movs	r3, #3
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001266:	4926      	ldr	r1, [pc, #152]	; (8001300 <FreeRTOS_CreateTasks+0x298>)
 8001268:	4826      	ldr	r0, [pc, #152]	; (8001304 <FreeRTOS_CreateTasks+0x29c>)
 800126a:	f00c fb26 	bl	800d8ba <xTaskCreate>
 800126e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	2b01      	cmp	r3, #1
 8001274:	d00a      	beq.n	800128c <FreeRTOS_CreateTasks+0x224>
	__asm volatile
 8001276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	607b      	str	r3, [r7, #4]
}
 8001288:	bf00      	nop
 800128a:	e7fe      	b.n	800128a <FreeRTOS_CreateTasks+0x222>

    if (FlightController_FlightLights_Handle == NULL) {
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d104      	bne.n	800129e <FreeRTOS_CreateTasks+0x236>
        vTaskDelete(FlightController_FlightLights_Handle);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f00c fc3f 	bl	800db1c <vTaskDelete>
    }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000320 	.word	0x20000320
 80012ac:	08013f44 	.word	0x08013f44
 80012b0:	080013dd 	.word	0x080013dd
 80012b4:	20000324 	.word	0x20000324
 80012b8:	08013f64 	.word	0x08013f64
 80012bc:	08001445 	.word	0x08001445
 80012c0:	20000328 	.word	0x20000328
 80012c4:	08013f80 	.word	0x08013f80
 80012c8:	080014a5 	.word	0x080014a5
 80012cc:	2000032c 	.word	0x2000032c
 80012d0:	08013f9c 	.word	0x08013f9c
 80012d4:	080015e5 	.word	0x080015e5
 80012d8:	20000334 	.word	0x20000334
 80012dc:	08013fb8 	.word	0x08013fb8
 80012e0:	080016e9 	.word	0x080016e9
 80012e4:	20000338 	.word	0x20000338
 80012e8:	08013fd8 	.word	0x08013fd8
 80012ec:	080017e9 	.word	0x080017e9
 80012f0:	2000033c 	.word	0x2000033c
 80012f4:	08013ff8 	.word	0x08013ff8
 80012f8:	080018a9 	.word	0x080018a9
 80012fc:	20000340 	.word	0x20000340
 8001300:	08014018 	.word	0x08014018
 8001304:	080018e5 	.word	0x080018e5

08001308 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af02      	add	r7, sp, #8

    /* Timer2: BatteryLevelAlarm */
    Timer2_Handle = xTimerCreate("BatteryLevelAlarm", 200, pdTRUE, (void *)0, Timer2_Callback);
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <FreeRTOS_CreateTimers+0x44>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	2201      	movs	r2, #1
 8001316:	21c8      	movs	r1, #200	; 0xc8
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <FreeRTOS_CreateTimers+0x48>)
 800131a:	f00d fa61 	bl	800e7e0 <xTimerCreate>
 800131e:	4603      	mov	r3, r0
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <FreeRTOS_CreateTimers+0x4c>)
 8001322:	6013      	str	r3, [r2, #0]
    if(NULL != Timer2_Handle) {
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <FreeRTOS_CreateTimers+0x4c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <FreeRTOS_CreateTimers+0x3c>
        /* Start timer */
        xTimerStart(Timer2_Handle, 0);
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <FreeRTOS_CreateTimers+0x4c>)
 800132e:	681c      	ldr	r4, [r3, #0]
 8001330:	f00c fe5a 	bl	800dfe8 <xTaskGetTickCount>
 8001334:	4602      	mov	r2, r0
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	2101      	movs	r1, #1
 800133e:	4620      	mov	r0, r4
 8001340:	f00d faaa 	bl	800e898 <xTimerGenericCommand>
    }
}
 8001344:	bf00      	nop
 8001346:	3704      	adds	r7, #4
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	080019e1 	.word	0x080019e1
 8001350:	08014038 	.word	0x08014038
 8001354:	20000348 	.word	0x20000348

08001358 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001360:	2314      	movs	r3, #20
 8001362:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED on */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136a:	4813      	ldr	r0, [pc, #76]	; (80013b8 <FlightController_StartUp+0x60>)
 800136c:	f003 ffbc 	bl	80052e8 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <FlightController_StartUp+0x64>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01a      	beq.n	80013ae <FlightController_StartUp+0x56>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001378:	f7ff fe76 	bl	8001068 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 800137c:	f7ff ffc4 	bl	8001308 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <FlightController_StartUp+0x68>)
 8001382:	f001 fbc9 	bl	8002b18 <FSA8S_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <FlightController_StartUp+0x6c>)
 800138a:	6013      	str	r3, [r2, #0]
            hgy87 = GY87_Init(&hi2c1);
 800138c:	480e      	ldr	r0, [pc, #56]	; (80013c8 <FlightController_StartUp+0x70>)
 800138e:	f002 f855 	bl	800343c <GY87_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <FlightController_StartUp+0x74>)
 8001396:	6013      	str	r3, [r2, #0]
            hesc = ESC_Init(&htim3);
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <FlightController_StartUp+0x78>)
 800139a:	f001 fa39 	bl	8002810 <ESC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <FlightController_StartUp+0x7c>)
 80013a2:	6013      	str	r3, [r2, #0]

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <FlightController_StartUp+0x80>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00c fbb7 	bl	800db1c <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f00c fc44 	bl	800dc3c <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80013b4:	e7d6      	b.n	8001364 <FlightController_StartUp+0xc>
 80013b6:	bf00      	nop
 80013b8:	40020800 	.word	0x40020800
 80013bc:	2000034e 	.word	0x2000034e
 80013c0:	20000b2c 	.word	0x20000b2c
 80013c4:	20000350 	.word	0x20000350
 80013c8:	20000a90 	.word	0x20000a90
 80013cc:	20000354 	.word	0x20000354
 80013d0:	20000ae4 	.word	0x20000ae4
 80013d4:	20000358 	.word	0x20000358
 80013d8:	2000031c 	.word	0x2000031c

080013dc <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_CONTROL_SYSTEM
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80013e4:	2314      	movs	r3, #20
 80013e6:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Set ESCs speeds */
        ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <FlightController_ControlSystem+0x5c>)
 80013ea:	889b      	ldrh	r3, [r3, #4]
 80013ec:	4a13      	ldr	r2, [pc, #76]	; (800143c <FlightController_ControlSystem+0x60>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <FlightController_ControlSystem+0x64>)
 80013f8:	801a      	strh	r2, [r3, #0]
        ESC_speeds[1] = FSA8S_channelValues[2] / 10;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <FlightController_ControlSystem+0x5c>)
 80013fc:	889b      	ldrh	r3, [r3, #4]
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <FlightController_ControlSystem+0x60>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <FlightController_ControlSystem+0x64>)
 800140a:	805a      	strh	r2, [r3, #2]
        ESC_speeds[2] = FSA8S_channelValues[2] / 10;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <FlightController_ControlSystem+0x5c>)
 800140e:	889b      	ldrh	r3, [r3, #4]
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <FlightController_ControlSystem+0x60>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <FlightController_ControlSystem+0x64>)
 800141c:	809a      	strh	r2, [r3, #4]
        ESC_speeds[3] = FSA8S_channelValues[2] / 10;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <FlightController_ControlSystem+0x5c>)
 8001420:	889b      	ldrh	r3, [r3, #4]
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <FlightController_ControlSystem+0x60>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <FlightController_ControlSystem+0x64>)
 800142e:	80da      	strh	r2, [r3, #6]

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f00c fc03 	bl	800dc3c <vTaskDelay>
        ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 8001436:	e7d7      	b.n	80013e8 <FlightController_ControlSystem+0xc>
 8001438:	2000035c 	.word	0x2000035c
 800143c:	cccccccd 	.word	0xcccccccd
 8001440:	20000388 	.word	0x20000388

08001444 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

    FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <FlightController_Read_FSA8S+0x54>)
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	ca07      	ldmia	r2, {r0, r1, r2}
 8001454:	c303      	stmia	r3!, {r0, r1}
 8001456:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001458:	2314      	movs	r3, #20
 800145a:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 800145c:	2300      	movs	r3, #0
 800145e:	77fb      	strb	r3, [r7, #31]
 8001460:	e013      	b.n	800148a <FlightController_Read_FSA8S+0x46>
            /* Read channels */
            FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <FlightController_Read_FSA8S+0x58>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	3320      	adds	r3, #32
 800146a:	443b      	add	r3, r7
 800146c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001470:	7ffc      	ldrb	r4, [r7, #31]
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f001 fba9 	bl	8002bcc <FSA8S_ReadChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <FlightController_Read_FSA8S+0x5c>)
 8001480:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001484:	7ffb      	ldrb	r3, [r7, #31]
 8001486:	3301      	adds	r3, #1
 8001488:	77fb      	strb	r3, [r7, #31]
 800148a:	7ffb      	ldrb	r3, [r7, #31]
 800148c:	2b09      	cmp	r3, #9
 800148e:	d9e8      	bls.n	8001462 <FlightController_Read_FSA8S+0x1e>
            LOG(loggingStr, LOG_INFORMATION);
#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001490:	69b8      	ldr	r0, [r7, #24]
 8001492:	f00c fbd3 	bl	800dc3c <vTaskDelay>
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001496:	e7e1      	b.n	800145c <FlightController_Read_FSA8S+0x18>
 8001498:	0801404c 	.word	0x0801404c
 800149c:	20000350 	.word	0x20000350
 80014a0:	2000035c 	.word	0x2000035c

080014a4 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    /* Change delay from time in [ms] to ticks */
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER_ANGLES || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE ||                                         \
    defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_PRESSURE || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80014ac:	2314      	movs	r3, #20
 80014ae:	60bb      	str	r3, [r7, #8]
#endif

    bool_t gyroscopeCalibrationIsDone = false;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
    bool_t accelerometerCalibrationIsDone = false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73bb      	strb	r3, [r7, #14]

    /* Allocate dynamic memory for the MPU6050 gyroscope values */
    GY87_gyroscopeValues = pvPortMalloc(sizeof(GY87_gyroscopeValues));
 80014b8:	2004      	movs	r0, #4
 80014ba:	f00d ff85 	bl	800f3c8 <pvPortMalloc>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a41      	ldr	r2, [pc, #260]	; (80015c8 <FlightController_Read_GY87+0x124>)
 80014c2:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_gyroscopeValues) {
 80014c4:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <FlightController_Read_GY87+0x124>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d104      	bne.n	80014d6 <FlightController_Read_GY87+0x32>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_gyroscopeValues);
 80014cc:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <FlightController_Read_GY87+0x124>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f00d ff8b 	bl	800f3ec <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 accelerometer values */
    GY87_accelerometerValues = pvPortMalloc(sizeof(GY87_accelerometerValues));
 80014d6:	2004      	movs	r0, #4
 80014d8:	f00d ff76 	bl	800f3c8 <pvPortMalloc>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a3b      	ldr	r2, [pc, #236]	; (80015cc <FlightController_Read_GY87+0x128>)
 80014e0:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_accelerometerValues) {
 80014e2:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <FlightController_Read_GY87+0x128>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d104      	bne.n	80014f4 <FlightController_Read_GY87+0x50>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_accelerometerValues);
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <FlightController_Read_GY87+0x128>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00d ff7c 	bl	800f3ec <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 magnetometer values */
    GY87_magnetometerValues = pvPortMalloc(sizeof(GY87_magnetometerValues));
 80014f4:	2004      	movs	r0, #4
 80014f6:	f00d ff67 	bl	800f3c8 <pvPortMalloc>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <FlightController_Read_GY87+0x12c>)
 80014fe:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_magnetometerValues) {
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <FlightController_Read_GY87+0x12c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d104      	bne.n	8001512 <FlightController_Read_GY87+0x6e>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_magnetometerValues);
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <FlightController_Read_GY87+0x12c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f00d ff6d 	bl	800f3ec <vPortFree>
    }

    while (1) {

        if (gyroscopeCalibrationIsDone && accelerometerCalibrationIsDone) {
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d038      	beq.n	800158a <FlightController_Read_GY87+0xe6>
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d035      	beq.n	800158a <FlightController_Read_GY87+0xe6>

            /* Read GY87 gyroscope values */
            GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <FlightController_Read_GY87+0x130>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <FlightController_Read_GY87+0x124>)
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f002 f821 	bl	8003570 <GY87_ReadGyroscope>
            sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope ROLL: %.2f [°/s] PITCH: %.2f [°/s] YAW: %.2f [°/s]\r\n", GY87_gyroscopeValues->rotationRateRoll, GY87_gyroscopeValues->rotationRatePitch, GY87_gyroscopeValues->rotationRateYaw);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 accelerometer values */
            GY87_ReadAccelerometer(hgy87, GY87_accelerometerValues);
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <FlightController_Read_GY87+0x130>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <FlightController_Read_GY87+0x128>)
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f92d 	bl	8003798 <GY87_ReadAccelerometer>
            sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer ROLL: %.2f [°] PITCH: %.2f [°]\r\n", GY87_accelerometerValues->angleRoll, GY87_accelerometerValues->anglePitch);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 temperature value */
            GY87_temperature = GY87_ReadTemperatureSensor(hgy87);
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <FlightController_Read_GY87+0x130>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fa5c 	bl	8003a00 <GY87_ReadTemperatureSensor>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <FlightController_Read_GY87+0x134>)
 800154e:	801a      	strh	r2, [r3, #0]
            sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d [°C]\r\n", GY87_temperature);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 magnetometer values */
            GY87_ReadMagnetometer(hgy87, GY87_magnetometerValues);
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <FlightController_Read_GY87+0x130>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <FlightController_Read_GY87+0x12c>)
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fa7e 	bl	8003a5c <GY87_ReadMagnetometer>
            sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer X: %.3f [G] Y: %.3f [G] Z: %.3f [G]\r\n", GY87_magnetometerValues->magneticFieldX, GY87_magnetometerValues->magneticFieldY, GY87_magnetometerValues->magneticFieldZ);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 magnetometer heading */
            GY87_magnetometerHeadingValue = GY87_ReadMagnetometerHeading(hgy87);
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <FlightController_Read_GY87+0x130>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f002 fb0b 	bl	8003b80 <GY87_ReadMagnetometerHeading>
 800156a:	eef0 7a40 	vmov.f32	s15, s0
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <FlightController_Read_GY87+0x138>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
            sprintf((char *)loggingStr, (const char *)"GY87 Barometer Pressure: %.2fDEFINE\r\n", GY87_barometerPressureValue);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 barometer altitude value */
            GY87_barometerAltitudeValue = GY87_ReadBarometerAltitude(hgy87);
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <FlightController_Read_GY87+0x130>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fce1 	bl	8003f40 <GY87_ReadBarometerAltitude>
 800157e:	eef0 7a40 	vmov.f32	s15, s0
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <FlightController_Read_GY87+0x13c>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
 8001588:	e019      	b.n	80015be <FlightController_Read_GY87+0x11a>
#endif

        } else {

            /* Calibrate gyroscope measurements */
            if (false == gyroscopeCalibrationIsDone) {
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f083 0301 	eor.w	r3, r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <FlightController_Read_GY87+0x100>

                gyroscopeCalibrationIsDone = GY87_CalibrateGyroscope(hgy87);
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <FlightController_Read_GY87+0x130>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f001 ff86 	bl	80034ac <GY87_CalibrateGyroscope>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
            }

            /* Calibrate accelerometer measurements */
            if (false == accelerometerCalibrationIsDone) {
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	f083 0301 	eor.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <FlightController_Read_GY87+0x11a>

                accelerometerCalibrationIsDone = GY87_CalibrateAccelerometer(hgy87);
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <FlightController_Read_GY87+0x130>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 f88d 	bl	80036d4 <GY87_CalibrateAccelerometer>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73bb      	strb	r3, [r7, #14]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80015be:	68b8      	ldr	r0, [r7, #8]
 80015c0:	f00c fb3c 	bl	800dc3c <vTaskDelay>
        if (gyroscopeCalibrationIsDone && accelerometerCalibrationIsDone) {
 80015c4:	e7a5      	b.n	8001512 <FlightController_Read_GY87+0x6e>
 80015c6:	bf00      	nop
 80015c8:	20000374 	.word	0x20000374
 80015cc:	20000378 	.word	0x20000378
 80015d0:	2000037c 	.word	0x2000037c
 80015d4:	20000354 	.word	0x20000354
 80015d8:	20000370 	.word	0x20000370
 80015dc:	20000380 	.word	0x20000380
 80015e0:	20000384 	.word	0x20000384

080015e4 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_ESC
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80015ec:	2314      	movs	r3, #20
 80015ee:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <FlightController_Write_ESCs+0x9c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <FlightController_Write_ESCs+0x9c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	791b      	ldrb	r3, [r3, #4]
 80015fa:	4922      	ldr	r1, [pc, #136]	; (8001684 <FlightController_Write_ESCs+0xa0>)
 80015fc:	8809      	ldrh	r1, [r1, #0]
 80015fe:	ee07 1a90 	vmov	s15, r1
 8001602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f001 f943 	bl	8002898 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[1]);
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <FlightController_Write_ESCs+0x9c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <FlightController_Write_ESCs+0x9c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	795b      	ldrb	r3, [r3, #5]
 800161c:	4919      	ldr	r1, [pc, #100]	; (8001684 <FlightController_Write_ESCs+0xa0>)
 800161e:	8849      	ldrh	r1, [r1, #2]
 8001620:	ee07 1a90 	vmov	s15, r1
 8001624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f001 f932 	bl	8002898 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[2]);
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <FlightController_Write_ESCs+0x9c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <FlightController_Write_ESCs+0x9c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	799b      	ldrb	r3, [r3, #6]
 800163e:	4911      	ldr	r1, [pc, #68]	; (8001684 <FlightController_Write_ESCs+0xa0>)
 8001640:	8889      	ldrh	r1, [r1, #4]
 8001642:	ee07 1a90 	vmov	s15, r1
 8001646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	4619      	mov	r1, r3
 8001650:	4610      	mov	r0, r2
 8001652:	f001 f921 	bl	8002898 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[3]);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <FlightController_Write_ESCs+0x9c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <FlightController_Write_ESCs+0x9c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	79db      	ldrb	r3, [r3, #7]
 8001660:	4908      	ldr	r1, [pc, #32]	; (8001684 <FlightController_Write_ESCs+0xa0>)
 8001662:	88c9      	ldrh	r1, [r1, #6]
 8001664:	ee07 1a90 	vmov	s15, r1
 8001668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166c:	eeb0 0a67 	vmov.f32	s0, s15
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f001 f910 	bl	8002898 <ESC_SetSpeed>
        sprintf((char *)loggingStr, (const char *)"PWM Channel 4 Speed: %d\r\n\n", ESC_speeds[3]);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f00c fadf 	bl	800dc3c <vTaskDelay>
        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 800167e:	e7b7      	b.n	80015f0 <FlightController_Write_ESCs+0xc>
 8001680:	20000358 	.word	0x20000358
 8001684:	20000388 	.word	0x20000388

08001688 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b087      	sub	sp, #28
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001690:	2314      	movs	r3, #20
 8001692:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001694:	2120      	movs	r1, #32
 8001696:	4810      	ldr	r0, [pc, #64]	; (80016d8 <FlightController_OnOffButton+0x50>)
 8001698:	f003 fe0e 	bl	80052b8 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d115      	bne.n	80016ce <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <FlightController_OnOffButton+0x54>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	f083 0301 	eor.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00e      	beq.n	80016ce <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <FlightController_OnOffButton+0x58>)
 80016b2:	681c      	ldr	r4, [r3, #0]
 80016b4:	f00c fc98 	bl	800dfe8 <xTaskGetTickCount>
 80016b8:	4602      	mov	r2, r0
 80016ba:	2300      	movs	r3, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2300      	movs	r3, #0
 80016c0:	2101      	movs	r1, #1
 80016c2:	4620      	mov	r0, r4
 80016c4:	f00d f8e8 	bl	800e898 <xTimerGenericCommand>
                Timer1_running = true;
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <FlightController_OnOffButton+0x54>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f00c fab4 	bl	800dc3c <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80016d4:	e7de      	b.n	8001694 <FlightController_OnOffButton+0xc>
 80016d6:	bf00      	nop
 80016d8:	40020400 	.word	0x40020400
 80016dc:	2000034c 	.word	0x2000034c
 80016e0:	20000344 	.word	0x20000344
 80016e4:	00000000 	.word	0x00000000

080016e8 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    uint8_t loggingStr[20];
#endif

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
 80016f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 80016f6:	4838      	ldr	r0, [pc, #224]	; (80017d8 <FlightController_BatteryLevel+0xf0>)
 80016f8:	f002 fdde 	bl	80042b8 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 80016fc:	2101      	movs	r1, #1
 80016fe:	4836      	ldr	r0, [pc, #216]	; (80017d8 <FlightController_BatteryLevel+0xf0>)
 8001700:	f002 fe8e 	bl	8004420 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001704:	4834      	ldr	r0, [pc, #208]	; (80017d8 <FlightController_BatteryLevel+0xf0>)
 8001706:	f002 ff16 	bl	8004536 <HAL_ADC_GetValue>
 800170a:	4603      	mov	r3, r0
 800170c:	847b      	strh	r3, [r7, #34]	; 0x22

        /* Convert ADC value to real value */
        FlightController_batteryLevel = (adcValue * 3.3) / 4096;
 800170e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff0f 	bl	8000534 <__aeabi_i2d>
 8001716:	a32a      	add	r3, pc, #168	; (adr r3, 80017c0 <FlightController_BatteryLevel+0xd8>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff74 	bl	8000608 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <FlightController_BatteryLevel+0xf4>)
 800172e:	f7ff f895 	bl	800085c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa5d 	bl	8000bf8 <__aeabi_d2f>
 800173e:	4603      	mov	r3, r0
 8001740:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <FlightController_BatteryLevel+0xf8>)
 8001742:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevel = FlightController_batteryLevel * 1.046046;
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <FlightController_BatteryLevel+0xf8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ff05 	bl	8000558 <__aeabi_f2d>
 800174e:	a31e      	add	r3, pc, #120	; (adr r3, 80017c8 <FlightController_BatteryLevel+0xe0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff58 	bl	8000608 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff fa4a 	bl	8000bf8 <__aeabi_d2f>
 8001764:	4603      	mov	r3, r0
 8001766:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <FlightController_BatteryLevel+0xf8>)
 8001768:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevel = FlightController_batteryLevel * 3.363636;
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <FlightController_BatteryLevel+0xf8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fef2 	bl	8000558 <__aeabi_f2d>
 8001774:	a316      	add	r3, pc, #88	; (adr r3, 80017d0 <FlightController_BatteryLevel+0xe8>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff45 	bl	8000608 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fa37 	bl	8000bf8 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <FlightController_BatteryLevel+0xf8>)
 800178e:	6013      	str	r3, [r2, #0]

        /* Log battery level */
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f [V]\r\n\n", FlightController_batteryLevel);
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <FlightController_BatteryLevel+0xf8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fedf 	bl	8000558 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	f107 000c 	add.w	r0, r7, #12
 80017a2:	4910      	ldr	r1, [pc, #64]	; (80017e4 <FlightController_BatteryLevel+0xfc>)
 80017a4:	f00f f916 	bl	80109d4 <siprintf>
        LOG(loggingStr, LOG_INFORMATION);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fc20 	bl	8003ff4 <LOG>
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 80017b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017b6:	f00c fa41 	bl	800dc3c <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 80017ba:	e79c      	b.n	80016f6 <FlightController_BatteryLevel+0xe>
 80017bc:	f3af 8000 	nop.w
 80017c0:	66666666 	.word	0x66666666
 80017c4:	400a6666 	.word	0x400a6666
 80017c8:	bb01c92e 	.word	0xbb01c92e
 80017cc:	3ff0bc9a 	.word	0x3ff0bc9a
 80017d0:	fdbd2fa1 	.word	0xfdbd2fa1
 80017d4:	400ae8b9 	.word	0x400ae8b9
 80017d8:	20000a48 	.word	0x20000a48
 80017dc:	40b00000 	.word	0x40b00000
 80017e0:	20000000 	.word	0x20000000
 80017e4:	08014058 	.word	0x08014058

080017e8 <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

	uint8_t alarmSequence[] = {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <FlightController_BatteryAlarm+0xb0>)
 80017f2:	f107 0408 	add.w	r4, r7, #8
 80017f6:	461d      	mov	r5, r3
 80017f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001804:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t alarmSequenceSize = 40;
 8001808:	2328      	movs	r3, #40	; 0x28
 800180a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t alarmSequenceCursor = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001814:	2314      	movs	r3, #20
 8001816:	633b      	str	r3, [r7, #48]	; 0x30

    while (1) {

    	if(FlightController_batteryLevel < BATTERY_ALARM_THRESHOLD) {
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <FlightController_BatteryAlarm+0xb4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe9b 	bl	8000558 <__aeabi_f2d>
 8001822:	a31b      	add	r3, pc, #108	; (adr r3, 8001890 <FlightController_BatteryAlarm+0xa8>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7ff f960 	bl	8000aec <__aeabi_dcmplt>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d021      	beq.n	8001876 <FlightController_BatteryAlarm+0x8e>

    		if(Timer2_flag) {
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <FlightController_BatteryAlarm+0xb8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d023      	beq.n	8001882 <FlightController_BatteryAlarm+0x9a>
    			/* If timer expired */

    			/* Parse alarm sequence */
    			alarmSequenceCursor++;
 800183a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800183e:	3301      	adds	r3, #1
 8001840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    			if(alarmSequenceSize <= alarmSequenceCursor) {
 8001844:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800184c:	429a      	cmp	r2, r3
 800184e:	d802      	bhi.n	8001856 <FlightController_BatteryAlarm+0x6e>
    				alarmSequenceCursor = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    			}

    			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, alarmSequence[alarmSequenceCursor]);
 8001856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800185a:	3338      	adds	r3, #56	; 0x38
 800185c:	443b      	add	r3, r7
 800185e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001862:	461a      	mov	r2, r3
 8001864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <FlightController_BatteryAlarm+0xbc>)
 800186a:	f003 fd3d 	bl	80052e8 <HAL_GPIO_WritePin>

    			/* Reset Timer2 flag */
    			Timer2_flag = false;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <FlightController_BatteryAlarm+0xb8>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	e005      	b.n	8001882 <FlightController_BatteryAlarm+0x9a>
    		}

    	} else {

    		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <FlightController_BatteryAlarm+0xbc>)
 800187e:	f003 fd33 	bl	80052e8 <HAL_GPIO_WritePin>
    	}

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001884:	f00c f9da 	bl	800dc3c <vTaskDelay>
    	if(FlightController_batteryLevel < BATTERY_ALARM_THRESHOLD) {
 8001888:	e7c6      	b.n	8001818 <FlightController_BatteryAlarm+0x30>
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	33333333 	.word	0x33333333
 8001894:	40233333 	.word	0x40233333
 8001898:	08014074 	.word	0x08014074
 800189c:	20000000 	.word	0x20000000
 80018a0:	2000034d 	.word	0x2000034d
 80018a4:	40020000 	.word	0x40020000

080018a8 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 80018b4:	23fa      	movs	r3, #250	; 0xfa
 80018b6:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <FlightController_HeartbeatLight+0x38>)
 80018c2:	f003 fd11 	bl	80052e8 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e001      	b.n	80018d6 <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80018d6:	68b8      	ldr	r0, [r7, #8]
 80018d8:	f00c f9b0 	bl	800dc3c <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 80018dc:	e7ec      	b.n	80018b8 <FlightController_HeartbeatLight+0x10>
 80018de:	bf00      	nop
 80018e0:	40020800 	.word	0x40020800

080018e4 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80018ec:	2314      	movs	r3, #20
 80018ee:	617b      	str	r3, [r7, #20]

    uint8_t sequence[] = {1, 0, 1, 0, 1, 0};
 80018f0:	4a09      	ldr	r2, [pc, #36]	; (8001918 <FlightController_FlightLights+0x34>)
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018fa:	6018      	str	r0, [r3, #0]
 80018fc:	3304      	adds	r3, #4
 80018fe:	8019      	strh	r1, [r3, #0]

    while (1) {

        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001900:	2104      	movs	r1, #4
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <FlightController_FlightLights+0x38>)
 8001904:	f003 fd09 	bl	800531a <HAL_GPIO_TogglePin>

        /* Set task time delay */
        vTaskDelay(xDelay * 250);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	22fa      	movs	r2, #250	; 0xfa
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f00c f993 	bl	800dc3c <vTaskDelay>
        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001916:	e7f3      	b.n	8001900 <FlightController_FlightLights+0x1c>
 8001918:	0801409c 	.word	0x0801409c
 800191c:	40020400 	.word	0x40020400

08001920 <Timer1_Callback>:
    }
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f00d fabb 	bl	800eea4 <pvTimerGetTimerID>
 800192e:	4603      	mov	r3, r0
 8001930:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f00c fffe 	bl	800e934 <xTimerGetPeriod>
 8001938:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 8001940:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d333      	bcc.n	80019b8 <Timer1_Callback+0x98>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001950:	2120      	movs	r1, #32
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <Timer1_Callback+0xac>)
 8001954:	f003 fcb0 	bl	80052b8 <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d124      	bne.n	80019a8 <Timer1_Callback+0x88>

            if (!FlightController_running) {
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <Timer1_Callback+0xb0>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	f083 0301 	eor.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <Timer1_Callback+0x5e>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 800196c:	2201      	movs	r2, #1
 800196e:	2110      	movs	r1, #16
 8001970:	4816      	ldr	r0, [pc, #88]	; (80019cc <Timer1_Callback+0xac>)
 8001972:	f003 fcb9 	bl	80052e8 <HAL_GPIO_WritePin>

                FlightController_running = true;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <Timer1_Callback+0xb0>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e014      	b.n	80019a8 <Timer1_Callback+0x88>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <Timer1_Callback+0xb4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f00c f98e 	bl	800dca4 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198e:	4812      	ldr	r0, [pc, #72]	; (80019d8 <Timer1_Callback+0xb8>)
 8001990:	f003 fcaa 	bl	80052e8 <HAL_GPIO_WritePin>

                FlightController_running = false;
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <Timer1_Callback+0xb0>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2110      	movs	r1, #16
 800199e:	480b      	ldr	r0, [pc, #44]	; (80019cc <Timer1_Callback+0xac>)
 80019a0:	f003 fca2 	bl	80052e8 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 80019a4:	f003 f90d 	bl	8004bc2 <HAL_NVIC_SystemReset>
            }
        }

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 80019a8:	2100      	movs	r1, #0
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f00d fa9a 	bl	800eee4 <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <Timer1_Callback+0xbc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80019b6:	e004      	b.n	80019c2 <Timer1_Callback+0xa2>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4619      	mov	r1, r3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f00d fa91 	bl	800eee4 <vTimerSetTimerID>
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40020400 	.word	0x40020400
 80019d0:	2000034e 	.word	0x2000034e
 80019d4:	2000033c 	.word	0x2000033c
 80019d8:	40020800 	.word	0x40020800
 80019dc:	2000034c 	.word	0x2000034c

080019e0 <Timer2_Callback>:

void Timer2_Callback(TimerHandle_t xTimer) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f00d fa5b 	bl	800eea4 <pvTimerGetTimerID>
 80019ee:	4603      	mov	r3, r0
 80019f0:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f00c ff9e 	bl	800e934 <xTimerGetPeriod>
 80019f8:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (200 / xTimerPeriod)) {
 8001a00:	22c8      	movs	r2, #200	; 0xc8
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d307      	bcc.n	8001a1e <Timer2_Callback+0x3e>

    	/* Set Timer2 flag to true */
    	Timer2_flag = true;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <Timer2_Callback+0x50>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]

    	/* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f00d fa64 	bl	800eee4 <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8001a1c:	e004      	b.n	8001a28 <Timer2_Callback+0x48>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f00d fa5e 	bl	800eee4 <vTimerSetTimerID>
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000034d 	.word	0x2000034d

08001a34 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

    /* Welcome message */
    LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <FlightController_Init+0x14>)
 8001a3c:	f002 fada 	bl	8003ff4 <LOG>

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 8001a40:	f7ff faa8 	bl	8000f94 <FreeRTOS_CreateStartUpTasks>
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	080140a4 	.word	0x080140a4

08001a4c <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a5c:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <vApplicationGetIdleTaskMemory+0x30>)
 8001a62:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000390 	.word	0x20000390
 8001a7c:	200003ec 	.word	0x200003ec

08001a80 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <vApplicationGetTimerTaskMemory+0x2c>)
 8001a90:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <vApplicationGetTimerTaskMemory+0x30>)
 8001a96:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9e:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	200005ec 	.word	0x200005ec
 8001ab0:	20000648 	.word	0x20000648

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aba:	f002 fb23 	bl	8004104 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abe:	f000 f827 	bl	8001b10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac2:	f000 f9cd 	bl	8001e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ac6:	f000 f9b1 	bl	8001e2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001aca:	f000 f985 	bl	8001dd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ace:	f000 f8db 	bl	8001c88 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001ad2:	f000 f907 	bl	8001ce4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001ad6:	f000 f885 	bl	8001be4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 8001ada:	f7ff ffab 	bl	8001a34 <FlightController_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <main+0x54>)
 8001ae0:	1d3c      	adds	r4, r7, #4
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00b f894 	bl	800cc22 <osThreadCreate>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <main+0x58>)
 8001afe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b00:	f00b f888 	bl	800cc14 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 8001b04:	e7fe      	b.n	8001b04 <main+0x50>
 8001b06:	bf00      	nop
 8001b08:	080140d8 	.word	0x080140d8
 8001b0c:	20000bd0 	.word	0x20000bd0

08001b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	; 0x50
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	2230      	movs	r2, #48	; 0x30
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00e ffbb 	bl	8010a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b84:	2319      	movs	r3, #25
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001b88:	2390      	movs	r3, #144	; 0x90
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b90:	2303      	movs	r3, #3
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 fe15 	bl	80077c8 <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ba4:	f000 fa00 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba8:	230f      	movs	r3, #15
 8001baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bac:	2302      	movs	r3, #2
 8001bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f006 f877 	bl	8007cb8 <HAL_RCC_ClockConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bd0:	f000 f9ea 	bl	8001fa8 <Error_Handler>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3750      	adds	r7, #80	; 0x50
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000

08001be4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <MX_ADC1_Init+0x9c>)
 8001bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c24:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <MX_ADC1_Init+0xa0>)
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c42:	480e      	ldr	r0, [pc, #56]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c44:	f002 faf4 	bl	8004230 <HAL_ADC_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001c4e:	f000 f9ab 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c64:	f002 fc74 	bl	8004550 <HAL_ADC_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c6e:	f000 f99b 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000a48 	.word	0x20000a48
 8001c80:	40012000 	.word	0x40012000
 8001c84:	0f000001 	.word	0x0f000001

08001c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <MX_I2C1_Init+0x54>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x58>)
 8001c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc6:	f003 fb43 	bl	8005350 <HAL_I2C_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd0:	f000 f96a 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000a90 	.word	0x20000a90
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	000186a0 	.word	0x000186a0

08001ce4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]
 8001d02:	615a      	str	r2, [r3, #20]
 8001d04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d08:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <MX_TIM3_Init+0xf0>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d0e:	2214      	movs	r2, #20
 8001d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d2c:	4828      	ldr	r0, [pc, #160]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d2e:	f006 f9a3 	bl	8008078 <HAL_TIM_PWM_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d38:	f000 f936 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4821      	ldr	r0, [pc, #132]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d4c:	f006 fd88 	bl	8008860 <HAL_TIMEx_MasterConfigSynchronization>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d56:	f000 f927 	bl	8001fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d5a:	2360      	movs	r3, #96	; 0x60
 8001d5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4817      	ldr	r0, [pc, #92]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d72:	f006 fa81 	bl	8008278 <HAL_TIM_PWM_ConfigChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d7c:	f000 f914 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2204      	movs	r2, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d88:	f006 fa76 	bl	8008278 <HAL_TIM_PWM_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d92:	f000 f909 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2208      	movs	r2, #8
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001d9e:	f006 fa6b 	bl	8008278 <HAL_TIM_PWM_ConfigChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001da8:	f000 f8fe 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	220c      	movs	r2, #12
 8001db0:	4619      	mov	r1, r3
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001db4:	f006 fa60 	bl	8008278 <HAL_TIM_PWM_ConfigChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001dbe:	f000 f8f3 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM3_Init+0xec>)
 8001dc4:	f000 f9d2 	bl	800216c <HAL_TIM_MspPostInit>

}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	; 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000ae4 	.word	0x20000ae4
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_USART2_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	2204      	movs	r2, #4
 8001e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e10:	f006 fd94 	bl	800893c <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f000 f8c5 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000b2c 	.word	0x20000b2c
 8001e28:	40004400 	.word	0x40004400

08001e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_DMA_Init+0x30>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <MX_DMA_Init+0x30>)
 8001e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_DMA_Init+0x30>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a41      	ldr	r2, [pc, #260]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a3a      	ldr	r2, [pc, #232]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a33      	ldr	r2, [pc, #204]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <MX_GPIO_Init+0x124>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001eec:	4826      	ldr	r0, [pc, #152]	; (8001f88 <MX_GPIO_Init+0x128>)
 8001eee:	f003 f9fb 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f241 1114 	movw	r1, #4372	; 0x1114
 8001ef8:	4824      	ldr	r0, [pc, #144]	; (8001f8c <MX_GPIO_Init+0x12c>)
 8001efa:	f003 f9f5 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f04:	4822      	ldr	r0, [pc, #136]	; (8001f90 <MX_GPIO_Init+0x130>)
 8001f06:	f003 f9ef 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED4_Pin;
 8001f0a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	4819      	ldr	r0, [pc, #100]	; (8001f88 <MX_GPIO_Init+0x128>)
 8001f24:	f003 f844 	bl	8004fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin;
 8001f28:	f241 1314 	movw	r3, #4372	; 0x1114
 8001f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4812      	ldr	r0, [pc, #72]	; (8001f8c <MX_GPIO_Init+0x12c>)
 8001f42:	f003 f835 	bl	8004fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480c      	ldr	r0, [pc, #48]	; (8001f90 <MX_GPIO_Init+0x130>)
 8001f60:	f003 f826 	bl	8004fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
  GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8001f64:	2320      	movs	r3, #32
 8001f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_GPIO_Init+0x12c>)
 8001f78:	f003 f81a 	bl	8004fb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40020000 	.word	0x40020000

08001f94 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f9c:	f00d fa38 	bl	800f410 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f00a fe8a 	bl	800ccba <osDelay>
 8001fa6:	e7fb      	b.n	8001fa0 <StartDefaultTask+0xc>

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_MspInit+0x54>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_MspInit+0x54>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x54>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_MspInit+0x54>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_MspInit+0x54>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_MspInit+0x54>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	f06f 0001 	mvn.w	r0, #1
 8001ffe:	f002 fdb6 	bl	8004b6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_ADC_MspInit+0x7c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d127      	bne.n	8002082 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_ADC_MspInit+0x80>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a15      	ldr	r2, [pc, #84]	; (8002090 <HAL_ADC_MspInit+0x80>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_ADC_MspInit+0x80>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_ADC_MspInit+0x80>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_ADC_MspInit+0x80>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_ADC_MspInit+0x80>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800206a:	2301      	movs	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206e:	2303      	movs	r3, #3
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_ADC_MspInit+0x84>)
 800207e:	f002 ff97 	bl	8004fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	; 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40012000 	.word	0x40012000
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000

08002098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_I2C_MspInit+0x84>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d12b      	bne.n	8002112 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_I2C_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a17      	ldr	r2, [pc, #92]	; (8002120 <HAL_I2C_MspInit+0x88>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_I2C_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d6:	23c0      	movs	r3, #192	; 0xc0
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020da:	2312      	movs	r3, #18
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e6:	2304      	movs	r3, #4
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <HAL_I2C_MspInit+0x8c>)
 80020f2:	f002 ff5d 	bl	8004fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_I2C_MspInit+0x88>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_I2C_MspInit+0x88>)
 8002100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_I2C_MspInit+0x88>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40005400 	.word	0x40005400
 8002120:	40023800 	.word	0x40023800
 8002124:	40020400 	.word	0x40020400

08002128 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <HAL_TIM_PWM_MspInit+0x3c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10d      	bne.n	8002156 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_TIM_PWM_MspInit+0x40>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_TIM_PWM_MspInit+0x40>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <HAL_TIM_PWM_MspInit+0x40>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40000400 	.word	0x40000400
 8002168:	40023800 	.word	0x40023800

0800216c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a21      	ldr	r2, [pc, #132]	; (8002210 <HAL_TIM_MspPostInit+0xa4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d13b      	bne.n	8002206 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_TIM_MspPostInit+0xa8>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_TIM_MspPostInit+0xa8>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_TIM_MspPostInit+0xa8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_TIM_MspPostInit+0xa8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <HAL_TIM_MspPostInit+0xa8>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_TIM_MspPostInit+0xa8>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d6:	2302      	movs	r3, #2
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	480d      	ldr	r0, [pc, #52]	; (8002218 <HAL_TIM_MspPostInit+0xac>)
 80021e2:	f002 fee5 	bl	8004fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021e6:	2303      	movs	r3, #3
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021f6:	2302      	movs	r3, #2
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <HAL_TIM_MspPostInit+0xb0>)
 8002202:	f002 fed5 	bl	8004fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40000400 	.word	0x40000400
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400

08002220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a31      	ldr	r2, [pc, #196]	; (8002304 <HAL_UART_MspInit+0xe4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d15b      	bne.n	80022fa <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <HAL_UART_MspInit+0xe8>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a2f      	ldr	r2, [pc, #188]	; (8002308 <HAL_UART_MspInit+0xe8>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_UART_MspInit+0xe8>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_UART_MspInit+0xe8>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <HAL_UART_MspInit+0xe8>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_UART_MspInit+0xe8>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800227a:	230c      	movs	r3, #12
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800228a:	2307      	movs	r3, #7
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	481d      	ldr	r0, [pc, #116]	; (800230c <HAL_UART_MspInit+0xec>)
 8002296:	f002 fe8b 	bl	8004fb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_UART_MspInit+0xf0>)
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_UART_MspInit+0xf4>)
 800229e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022de:	480c      	ldr	r0, [pc, #48]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022e0:	f002 fc80 	bl	8004be4 <HAL_DMA_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80022ea:	f7ff fe5d 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <HAL_UART_MspInit+0xf0>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	; 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40004400 	.word	0x40004400
 8002308:	40023800 	.word	0x40023800
 800230c:	40020000 	.word	0x40020000
 8002310:	20000b70 	.word	0x20000b70
 8002314:	40026088 	.word	0x40026088

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 800231c:	e7fe      	b.n	800231c <NMI_Handler+0x4>

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <UsageFault_Handler+0x4>

08002336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002348:	f001 ff2e 	bl	80041a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800234c:	f00c ffac 	bl	800f2a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}

08002354 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <OTG_FS_IRQHandler+0x10>)
 800235a:	f004 f908 	bl	800656e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20001b6c 	.word	0x20001b6c

08002368 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
    return 1;
 800236c:	2301      	movs	r3, #1
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_kill>:

int _kill(int pid, int sig) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002382:	f00e fbfb 	bl	8010b7c <__errno>
 8002386:	4603      	mov	r3, r0
 8002388:	2216      	movs	r2, #22
 800238a:	601a      	str	r2, [r3, #0]
    return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_exit>:

void _exit(int status) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ffe7 	bl	8002378 <_kill>
    while (1) {
 80023aa:	e7fe      	b.n	80023aa <_exit+0x12>

080023ac <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e00a      	b.n	80023d4 <_read+0x28>
        *ptr++ = __io_getchar();
 80023be:	f3af 8000 	nop.w
 80023c2:	4601      	mov	r1, r0
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbf0      	blt.n	80023be <_read+0x12>
    }

    return len;
 80023dc:	687b      	ldr	r3, [r7, #4]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e009      	b.n	800240c <_write+0x26>
        __io_putchar(*ptr++);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	60ba      	str	r2, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	dbf1      	blt.n	80023f8 <_write+0x12>
    }
    return len;
 8002414:	687b      	ldr	r3, [r7, #4]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_close>:

int _close(int file) {
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_fstat>:

int _fstat(int file, struct stat * st) {
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002446:	605a      	str	r2, [r3, #4]
    return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_isatty>:

int _isatty(int file) {
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <_sbrk+0x5c>)
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <_sbrk+0x60>)
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <_sbrk+0x64>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <_sbrk+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <_sbrk+0x40>
        errno = ENOMEM;
 80024b8:	f00e fb60 	bl	8010b7c <__errno>
 80024bc:	4603      	mov	r3, r0
 80024be:	220c      	movs	r2, #12
 80024c0:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c6:	e009      	b.n	80024dc <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <_sbrk+0x64>)
 80024d8:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20010000 	.word	0x20010000
 80024e8:	00000400 	.word	0x00000400
 80024ec:	20000bd4 	.word	0x20000bd4
 80024f0:	200023e8 	.word	0x200023e8

080024f4 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <SystemInit+0x20>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <SystemInit+0x20>)
 8002500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002550 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800251e:	490e      	ldr	r1, [pc, #56]	; (8002558 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002524:	e002      	b.n	800252c <LoopCopyDataInit>

08002526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252a:	3304      	adds	r3, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800252c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002530:	d3f9      	bcc.n	8002526 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002534:	4c0b      	ldr	r4, [pc, #44]	; (8002564 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002538:	e001      	b.n	800253e <LoopFillZerobss>

0800253a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800253c:	3204      	adds	r2, #4

0800253e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002540:	d3fb      	bcc.n	800253a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002542:	f7ff ffd7 	bl	80024f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002546:	f00e fb1f 	bl	8010b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254a:	f7ff fab3 	bl	8001ab4 <main>
  bx  lr
 800254e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002550:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002558:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 800255c:	080145d8 	.word	0x080145d8
  ldr r2, =_sbss
 8002560:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8002564:	200023e4 	.word	0x200023e4

08002568 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC_IRQHandler>

0800256a <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <PWM_Init+0x12>
        return false;
 8002578:	2300      	movs	r3, #0
 800257a:	e02c      	b.n	80025d6 <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f005 fdc8 	bl	8008118 <HAL_TIM_PWM_Start>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 800258e:	2300      	movs	r3, #0
 8002590:	e021      	b.n	80025d6 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2104      	movs	r1, #4
 8002598:	4618      	mov	r0, r3
 800259a:	f005 fdbd 	bl	8008118 <HAL_TIM_PWM_Start>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e016      	b.n	80025d6 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2108      	movs	r1, #8
 80025ae:	4618      	mov	r0, r3
 80025b0:	f005 fdb2 	bl	8008118 <HAL_TIM_PWM_Start>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e00b      	b.n	80025d6 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	210c      	movs	r1, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f005 fda7 	bl	8008118 <HAL_TIM_PWM_Start>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <PWM_Init+0x6c>
    }

    return true;
 80025d4:	2301      	movs	r3, #1
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	460b      	mov	r3, r1
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <PWM_SetDutyCycle+0x18>
        return false;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e02d      	b.n	8002654 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80025f8:	7afb      	ldrb	r3, [r7, #11]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d00a      	beq.n	8002614 <PWM_SetDutyCycle+0x34>
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d007      	beq.n	8002614 <PWM_SetDutyCycle+0x34>
 8002604:	7afb      	ldrb	r3, [r7, #11]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d004      	beq.n	8002614 <PWM_SetDutyCycle+0x34>
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d001      	beq.n	8002614 <PWM_SetDutyCycle+0x34>
        return false;
 8002610:	2300      	movs	r3, #0
 8002612:	e01f      	b.n	8002654 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d104      	bne.n	8002624 <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <PWM_SetDutyCycle+0x80>)
 8002620:	635a      	str	r2, [r3, #52]	; 0x34
 8002622:	e016      	b.n	8002652 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 8002624:	7afb      	ldrb	r3, [r7, #11]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d104      	bne.n	8002634 <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	b29a      	uxth	r2, r3
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <PWM_SetDutyCycle+0x80>)
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
 8002632:	e00e      	b.n	8002652 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d104      	bne.n	8002644 <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <PWM_SetDutyCycle+0x80>)
 8002640:	63da      	str	r2, [r3, #60]	; 0x3c
 8002642:	e006      	b.n	8002652 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 8002644:	7afb      	ldrb	r3, [r7, #11]
 8002646:	2b04      	cmp	r3, #4
 8002648:	d103      	bne.n	8002652 <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <PWM_SetDutyCycle+0x80>)
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
        /* END MODIFY 13 */
    }

    return true;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40000400 	.word	0x40000400
 8002664:	00000000 	.word	0x00000000

08002668 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002672:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 8002674:	edd7 7a01 	vldr	s15, [r7, #4]
 8002678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	d408      	bmi.n	8002694 <ESC_CalculatePWMDutyCycle+0x2c>
 8002682:	edd7 7a01 	vldr	s15, [r7, #4]
 8002686:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80026f0 <ESC_CalculatePWMDutyCycle+0x88>
 800268a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002692:	dd01      	ble.n	8002698 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8002694:	2300      	movs	r3, #0
 8002696:	e021      	b.n	80026dc <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);
 8002698:	edd7 7a01 	vldr	s15, [r7, #4]
 800269c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80026f0 <ESC_CalculatePWMDutyCycle+0x88>
 80026a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026a4:	ee16 0a90 	vmov	r0, s13
 80026a8:	f7fd ff56 	bl	8000558 <__aeabi_f2d>
 80026ac:	a30e      	add	r3, pc, #56	; (adr r3, 80026e8 <ESC_CalculatePWMDutyCycle+0x80>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd ffa9 	bl	8000608 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	a30a      	add	r3, pc, #40	; (adr r3, 80026e8 <ESC_CalculatePWMDutyCycle+0x80>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd fdea 	bl	800029c <__adddf3>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe fa72 	bl	8000bb8 <__aeabi_d2uiz>
 80026d4:	4602      	mov	r2, r0
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	601a      	str	r2, [r3, #0]

    return true;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	f3af 8000 	nop.w
 80026e8:	00000000 	.word	0x00000000
 80026ec:	40a99980 	.word	0x40a99980
 80026f0:	42c80000 	.word	0x42c80000

080026f4 <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <ESC_AutoCalibrate+0x12>
        return false;
 8002702:	2300      	movs	r3, #0
 8002704:	e080      	b.n	8002808 <ESC_AutoCalibrate+0x114>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MAX_ESC_SPEED)) {
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	791b      	ldrb	r3, [r3, #4]
 800270a:	f641 1299 	movw	r2, #6553	; 0x1999
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff65 	bl	80025e0 <PWM_SetDutyCycle>
 8002716:	4603      	mov	r3, r0
 8002718:	f083 0301 	eor.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <ESC_AutoCalibrate+0x32>
        return false;
 8002722:	2300      	movs	r3, #0
 8002724:	e070      	b.n	8002808 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MAX_ESC_SPEED)) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	795b      	ldrb	r3, [r3, #5]
 800272a:	f641 1299 	movw	r2, #6553	; 0x1999
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff55 	bl	80025e0 <PWM_SetDutyCycle>
 8002736:	4603      	mov	r3, r0
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <ESC_AutoCalibrate+0x52>
        return false;
 8002742:	2300      	movs	r3, #0
 8002744:	e060      	b.n	8002808 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MAX_ESC_SPEED)) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	799b      	ldrb	r3, [r3, #6]
 800274a:	f641 1299 	movw	r2, #6553	; 0x1999
 800274e:	4619      	mov	r1, r3
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff45 	bl	80025e0 <PWM_SetDutyCycle>
 8002756:	4603      	mov	r3, r0
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <ESC_AutoCalibrate+0x72>
        return false;
 8002762:	2300      	movs	r3, #0
 8002764:	e050      	b.n	8002808 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	79db      	ldrb	r3, [r3, #7]
 800276a:	f641 1299 	movw	r2, #6553	; 0x1999
 800276e:	4619      	mov	r1, r3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff35 	bl	80025e0 <PWM_SetDutyCycle>
 8002776:	4603      	mov	r3, r0
 8002778:	f083 0301 	eor.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <ESC_AutoCalibrate+0x92>
        return false;
 8002782:	2300      	movs	r3, #0
 8002784:	e040      	b.n	8002808 <ESC_AutoCalibrate+0x114>
    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	791b      	ldrb	r3, [r3, #4]
 800278a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff25 	bl	80025e0 <PWM_SetDutyCycle>
 8002796:	4603      	mov	r3, r0
 8002798:	f083 0301 	eor.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <ESC_AutoCalibrate+0xb2>
        return false;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e030      	b.n	8002808 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	795b      	ldrb	r3, [r3, #5]
 80027aa:	f640 42cc 	movw	r2, #3276	; 0xccc
 80027ae:	4619      	mov	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff15 	bl	80025e0 <PWM_SetDutyCycle>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <ESC_AutoCalibrate+0xd2>
        return false;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e020      	b.n	8002808 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	799b      	ldrb	r3, [r3, #6]
 80027ca:	f640 42cc 	movw	r2, #3276	; 0xccc
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff05 	bl	80025e0 <PWM_SetDutyCycle>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <ESC_AutoCalibrate+0xf2>
        return false;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e010      	b.n	8002808 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	79db      	ldrb	r3, [r3, #7]
 80027ea:	f640 42cc 	movw	r2, #3276	; 0xccc
 80027ee:	4619      	mov	r1, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fef5 	bl	80025e0 <PWM_SetDutyCycle>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f083 0301 	eor.w	r3, r3, #1
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <ESC_AutoCalibrate+0x112>
        return false;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <ESC_AutoCalibrate+0x114>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <ESC_Init+0x12>
        return NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	e036      	b.n	8002890 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 8002822:	2008      	movs	r0, #8
 8002824:	f00c fdd0 	bl	800f3c8 <pvPortMalloc>
 8002828:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00f      	beq.n	8002850 <ESC_Init+0x40>
        hesc->htim = htim;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_4;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2204      	movs	r2, #4
 800283a:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2202      	movs	r2, #2
 8002840:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2203      	movs	r2, #3
 8002846:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_1;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	71da      	strb	r2, [r3, #7]
 800284e:	e002      	b.n	8002856 <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f00c fdcb 	bl	800f3ec <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff fe87 	bl	800256a <PWM_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	f083 0301 	eor.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f00c fdbf 	bl	800f3ec <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	e00e      	b.n	8002890 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff ff3e 	bl	80026f4 <ESC_AutoCalibrate>
 8002878:	4603      	mov	r3, r0
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f00c fdb1 	bl	800f3ec <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	460b      	mov	r3, r1
 80028a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80028a6:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <ESC_SetSpeed+0x1c>
        return false;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e03d      	b.n	8002930 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80028b4:	7afb      	ldrb	r3, [r7, #11]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d00a      	beq.n	80028d0 <ESC_SetSpeed+0x38>
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d007      	beq.n	80028d0 <ESC_SetSpeed+0x38>
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d004      	beq.n	80028d0 <ESC_SetSpeed+0x38>
 80028c6:	7afb      	ldrb	r3, [r7, #11]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d001      	beq.n	80028d0 <ESC_SetSpeed+0x38>
        return false;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e02f      	b.n	8002930 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 80028d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80028d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	d408      	bmi.n	80028f0 <ESC_SetSpeed+0x58>
 80028de:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002938 <ESC_SetSpeed+0xa0>
 80028e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	dd01      	ble.n	80028f4 <ESC_SetSpeed+0x5c>
        return false;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e01d      	b.n	8002930 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4618      	mov	r0, r3
 80028fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80028fe:	f7ff feb3 	bl	8002668 <ESC_CalculatePWMDutyCycle>
 8002902:	4603      	mov	r3, r0
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <ESC_SetSpeed+0x7a>
        return false;
 800290e:	2300      	movs	r3, #0
 8002910:	e00e      	b.n	8002930 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	4619      	mov	r1, r3
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff fe61 	bl	80025e0 <PWM_SetDutyCycle>
 800291e:	4603      	mov	r3, r0
 8002920:	f083 0301 	eor.w	r3, r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <ESC_SetSpeed+0x96>
        return false;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <ESC_SetSpeed+0x98>
    };

    return true;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	42c80000 	.word	0x42c80000

0800293c <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <IBUS_Init+0x12>
        return false;
 800294a:	2300      	movs	r3, #0
 800294c:	e00f      	b.n	800296e <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6859      	ldr	r1, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7a1b      	ldrb	r3, [r3, #8]
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	f006 f83a 	bl	80089d6 <HAL_UART_Receive_DMA>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <FSA8S_CheckFirstBytes+0x12>
        return false;
 8002984:	2300      	movs	r3, #0
 8002986:	e00d      	b.n	80029a4 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b20      	cmp	r3, #32
 8002990:	d107      	bne.n	80029a2 <FSA8S_CheckFirstBytes+0x2c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	3301      	adds	r3, #1
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d101      	bne.n	80029a2 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 80029a2:	2300      	movs	r3, #0
    }
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 80029b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029bc:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <FSA8S_Checksum+0x18>
        return false;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e02c      	b.n	8002a22 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7a1b      	ldrb	r3, [r3, #8]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b21a      	sxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7a1b      	ldrb	r3, [r3, #8]
 80029e2:	3b02      	subs	r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	4313      	orrs	r3, r2
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 80029f0:	2300      	movs	r3, #0
 80029f2:	737b      	strb	r3, [r7, #13]
 80029f4:	e00b      	b.n	8002a0e <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	7b7b      	ldrb	r3, [r7, #13]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	89fa      	ldrh	r2, [r7, #14]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8002a08:	7b7b      	ldrb	r3, [r7, #13]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	737b      	strb	r3, [r7, #13]
 8002a0e:	7b7b      	ldrb	r3, [r7, #13]
 8002a10:	2b1d      	cmp	r3, #29
 8002a12:	d9f0      	bls.n	80029f6 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8002a14:	897a      	ldrh	r2, [r7, #10]
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d101      	bne.n	8002a20 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 8002a20:	2300      	movs	r3, #0
    }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d062      	beq.n	8002b04 <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8002a3e:	2302      	movs	r3, #2
 8002a40:	737b      	strb	r3, [r7, #13]
 8002a42:	e059      	b.n	8002af8 <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	7b7b      	ldrb	r3, [r7, #13]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	7b7b      	ldrb	r3, [r7, #13]
 8002a5e:	440b      	add	r3, r1
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b21b      	sxth	r3, r3
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	7b7b      	ldrb	r3, [r7, #13]
 8002a6c:	3b02      	subs	r3, #2
 8002a6e:	0fd9      	lsrs	r1, r3, #31
 8002a70:	440b      	add	r3, r1
 8002a72:	105b      	asrs	r3, r3, #1
 8002a74:	4619      	mov	r1, r3
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <FSA8S_AmendData+0xe0>)
 8002a78:	5c5b      	ldrb	r3, [r3, r1]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a86:	d308      	bcc.n	8002a9a <FSA8S_AmendData+0x6a>
 8002a88:	89fb      	ldrh	r3, [r7, #14]
 8002a8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a8e:	d804      	bhi.n	8002a9a <FSA8S_AmendData+0x6a>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002a96:	81fb      	strh	r3, [r7, #14]
 8002a98:	e001      	b.n	8002a9e <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 8002a9e:	89fb      	ldrh	r3, [r7, #14]
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa8:	7b7b      	ldrb	r3, [r7, #13]
 8002aaa:	3b02      	subs	r3, #2
 8002aac:	0fda      	lsrs	r2, r3, #31
 8002aae:	4413      	add	r3, r2
 8002ab0:	105b      	asrs	r3, r3, #1
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <FSA8S_AmendData+0xe0>)
 8002ab6:	5c9b      	ldrb	r3, [r3, r2]
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002b14 <FSA8S_AmendData+0xe4>
 8002ac4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002ac8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8002b14 <FSA8S_AmendData+0xe4>
 8002acc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	7b7b      	ldrb	r3, [r7, #13]
 8002ada:	3b02      	subs	r3, #2
 8002adc:	0fd9      	lsrs	r1, r3, #31
 8002ade:	440b      	add	r3, r1
 8002ae0:	105b      	asrs	r3, r3, #1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aea:	ee17 2a90 	vmov	r2, s15
 8002aee:	b292      	uxth	r2, r2
 8002af0:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8002af2:	7b7b      	ldrb	r3, [r7, #13]
 8002af4:	3302      	adds	r3, #2
 8002af6:	737b      	strb	r3, [r7, #13]
 8002af8:	7b7a      	ldrb	r2, [r7, #13]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7a1b      	ldrb	r3, [r3, #8]
 8002afe:	3b02      	subs	r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	db9f      	blt.n	8002a44 <FSA8S_AmendData+0x14>
        }
    }
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	20000008 	.word	0x20000008
 8002b14:	447a0000 	.word	0x447a0000

08002b18 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <FSA8S_Init+0x12>
        return NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e04a      	b.n	8002bc0 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8002b2a:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <FSA8S_Init+0xb0>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <FSA8S_Init+0x1e>
        return NULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e044      	b.n	8002bc0 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 8002b36:	2014      	movs	r0, #20
 8002b38:	f00c fc46 	bl	800f3c8 <pvPortMalloc>
 8002b3c:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 8002b3e:	2020      	movs	r0, #32
 8002b40:	f00c fc42 	bl	800f3c8 <pvPortMalloc>
 8002b44:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 8002b46:	201c      	movs	r0, #28
 8002b48:	f00c fc3e 	bl	800f3c8 <pvPortMalloc>
 8002b4c:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00f      	beq.n	8002b74 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2220      	movs	r2, #32
 8002b64:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	220e      	movs	r2, #14
 8002b70:	741a      	strb	r2, [r3, #16]
 8002b72:	e00c      	b.n	8002b8e <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f00c fc37 	bl	800f3ec <vPortFree>
        vPortFree(hibus->data);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f00c fc32 	bl	800f3ec <vPortFree>
        vPortFree(hibus);
 8002b88:	6978      	ldr	r0, [r7, #20]
 8002b8a:	f00c fc2f 	bl	800f3ec <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff fed4 	bl	800293c <IBUS_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <FSA8S_Init+0xb0>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
        return hibus;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	e00d      	b.n	8002bc0 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f00c fc1f 	bl	800f3ec <vPortFree>
        vPortFree(hibus->data);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f00c fc1a 	bl	800f3ec <vPortFree>
        vPortFree(hibus);
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	f00c fc17 	bl	800f3ec <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 8002bbe:	2300      	movs	r3, #0
    }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000bd8 	.word	0x20000bd8

08002bcc <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e029      	b.n	8002c36 <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <FSA8S_ReadChannel+0x22>
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	2b0e      	cmp	r3, #14
 8002bec:	d901      	bls.n	8002bf2 <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e021      	b.n	8002c36 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002bf2:	bf00      	nop
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff febe 	bl	8002976 <FSA8S_CheckFirstBytes>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f083 0301 	eor.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f6      	bne.n	8002bf4 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fed2 	bl	80029b0 <FSA8S_Checksum>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8002c18:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002c1a:	e7ea      	b.n	8002bf2 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8002c1c:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff06 	bl	8002a30 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	881b      	ldrh	r3, [r3, #0]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af02      	add	r7, sp, #8
 8002c44:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <I2C_Init+0x12>
        return false;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e010      	b.n	8002c72 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6858      	ldr	r0, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7a19      	ldrb	r1, [r3, #8]
 8002c58:	f107 030f 	add.w	r3, r7, #15
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	9200      	str	r2, [sp, #0]
 8002c60:	2275      	movs	r2, #117	; 0x75
 8002c62:	f000 f80a 	bl	8002c7a <I2C_Read>

    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b68      	cmp	r3, #104	; 0x68
 8002c6a:	d101      	bne.n	8002c70 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8002c70:	2300      	movs	r3, #0
    }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b088      	sub	sp, #32
 8002c7e:	af04      	add	r7, sp, #16
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	72fb      	strb	r3, [r7, #11]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <I2C_Read+0x1c>
        return false;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e019      	b.n	8002cca <I2C_Read+0x50>
    }
    if (NULL == data) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <I2C_Read+0x26>
        return false;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e014      	b.n	8002cca <I2C_Read+0x50>
    }

    /* Read I2C device data by passing a data register */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002ca0:	7afb      	ldrb	r3, [r7, #11]
 8002ca2:	b299      	uxth	r1, r3
 8002ca4:	7abb      	ldrb	r3, [r7, #10]
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	7e3b      	ldrb	r3, [r7, #24]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2064      	movs	r0, #100	; 0x64
 8002cae:	9002      	str	r0, [sp, #8]
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f002 fd87 	bl	80057cc <HAL_I2C_Mem_Read>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_Read+0x4e>
        /* END MODIFY 1 */
        /* Data couldn't be read */
        return false;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e000      	b.n	8002cca <I2C_Read+0x50>
    } else {
        /* Data read successfully */
        return true;
 8002cc8:	2301      	movs	r3, #1
    }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b088      	sub	sp, #32
 8002cd6:	af04      	add	r7, sp, #16
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	72fb      	strb	r3, [r7, #11]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <I2C_Write+0x1c>
        return false;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e018      	b.n	8002d20 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <I2C_Write+0x26>
        return false;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e013      	b.n	8002d20 <I2C_Write+0x4e>
    }

    /* Write to I2C device register */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
 8002cfa:	b299      	uxth	r1, r3
 8002cfc:	7abb      	ldrb	r3, [r7, #10]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	2364      	movs	r3, #100	; 0x64
 8002d02:	9302      	str	r3, [sp, #8]
 8002d04:	2301      	movs	r3, #1
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f002 fc62 	bl	80055d8 <HAL_I2C_Mem_Write>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_Write+0x4c>
        /* END MODIFY 2 */
        /* Data couldn't be written */
        return false;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8002d1e:	2301      	movs	r3, #1
    }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8002d30:	2014      	movs	r0, #20
 8002d32:	f00c fb49 	bl	800f3c8 <pvPortMalloc>
 8002d36:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8002d38:	2004      	movs	r0, #4
 8002d3a:	f00c fb45 	bl	800f3c8 <pvPortMalloc>
 8002d3e:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <GY87_InstanceInit+0x24>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f00c fb4b 	bl	800f3ec <vPortFree>
        vPortFree(hgy87);
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f00c fb48 	bl	800f3ec <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e01b      	b.n	8002d98 <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <GY87_InstanceInit+0x78>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	22d0      	movs	r2, #208	; 0xd0
 8002d72:	721a      	strb	r2, [r3, #8]
 8002d74:	e009      	b.n	8002d8a <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <GY87_InstanceInit+0x78>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2202      	movs	r2, #2
 8002d82:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	22d1      	movs	r2, #209	; 0xd1
 8002d88:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000bd9 	.word	0x20000bd9

08002da4 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8002dac:	2340      	movs	r3, #64	; 0x40
 8002dae:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6858      	ldr	r0, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7a19      	ldrb	r1, [r3, #8]
 8002db8:	f107 030f 	add.w	r3, r7, #15
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	9200      	str	r2, [sp, #0]
 8002dc0:	226b      	movs	r2, #107	; 0x6b
 8002dc2:	f000 fb08 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af02      	add	r7, sp, #8
 8002dd4:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6858      	ldr	r0, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7a19      	ldrb	r1, [r3, #8]
 8002de2:	f107 030f 	add.w	r3, r7, #15
 8002de6:	2201      	movs	r2, #1
 8002de8:	9200      	str	r2, [sp, #0]
 8002dea:	226b      	movs	r2, #107	; 0x6b
 8002dec:	f000 faf3 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6858      	ldr	r0, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7a19      	ldrb	r1, [r3, #8]
 8002e0c:	f107 030f 	add.w	r3, r7, #15
 8002e10:	2201      	movs	r2, #1
 8002e12:	9200      	str	r2, [sp, #0]
 8002e14:	2219      	movs	r2, #25
 8002e16:	f000 fade 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <MPU6050_EnableDLPF>:

static void MPU6050_EnableDLPF(GY87_HandleTypeDef_t * hgy87) {
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af02      	add	r7, sp, #8
 8002e28:	6078      	str	r0, [r7, #4]

	/* Enable digital low pass filter */
	uint8_t regData;

	regData = MPU_6050_BIT_CONFIG_DLPF_CFG_5;
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_CONFIG, &regData, MPU6050_SET_BIT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6858      	ldr	r0, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7a19      	ldrb	r1, [r3, #8]
 8002e36:	f107 030f 	add.w	r3, r7, #15
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	9200      	str	r2, [sp, #0]
 8002e3e:	221a      	movs	r2, #26
 8002e40:	f000 fac9 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_1; // Full range
 8002e54:	2308      	movs	r3, #8
 8002e56:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6858      	ldr	r0, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7a19      	ldrb	r1, [r3, #8]
 8002e60:	f107 030f 	add.w	r3, r7, #15
 8002e64:	2201      	movs	r2, #1
 8002e66:	9200      	str	r2, [sp, #0]
 8002e68:	221b      	movs	r2, #27
 8002e6a:	f000 fab4 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af02      	add	r7, sp, #8
 8002e7c:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_2; // Full range
 8002e7e:	2310      	movs	r3, #16
 8002e80:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6858      	ldr	r0, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7a19      	ldrb	r1, [r3, #8]
 8002e8a:	f107 030f 	add.w	r3, r7, #15
 8002e8e:	2201      	movs	r2, #1
 8002e90:	9200      	str	r2, [sp, #0]
 8002e92:	221c      	movs	r2, #28
 8002e94:	f000 fa9f 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6858      	ldr	r0, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7a19      	ldrb	r1, [r3, #8]
 8002eb4:	f107 030f 	add.w	r3, r7, #15
 8002eb8:	2201      	movs	r2, #1
 8002eba:	9200      	str	r2, [sp, #0]
 8002ebc:	226a      	movs	r2, #106	; 0x6a
 8002ebe:	f000 fa8a 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6858      	ldr	r0, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	7a19      	ldrb	r1, [r3, #8]
 8002ede:	f107 030f 	add.w	r3, r7, #15
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	9200      	str	r2, [sp, #0]
 8002ee6:	226a      	movs	r2, #106	; 0x6a
 8002ee8:	f000 fa75 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002efc:	2302      	movs	r3, #2
 8002efe:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6858      	ldr	r0, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7a19      	ldrb	r1, [r3, #8]
 8002f08:	f107 030f 	add.w	r3, r7, #15
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	9200      	str	r2, [sp, #0]
 8002f10:	2237      	movs	r2, #55	; 0x37
 8002f12:	f000 fa60 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af02      	add	r7, sp, #8
 8002f24:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002f26:	2302      	movs	r3, #2
 8002f28:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6858      	ldr	r0, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7a19      	ldrb	r1, [r3, #8]
 8002f32:	f107 030f 	add.w	r3, r7, #15
 8002f36:	2201      	movs	r2, #1
 8002f38:	9200      	str	r2, [sp, #0]
 8002f3a:	2237      	movs	r2, #55	; 0x37
 8002f3c:	f000 fa4b 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = MPU_6050_BIT_I2C_MST_CTRL_CLK_13;
 8002f50:	230d      	movs	r3, #13
 8002f52:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6858      	ldr	r0, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7a19      	ldrb	r1, [r3, #8]
 8002f5c:	f107 030f 	add.w	r3, r7, #15
 8002f60:	2201      	movs	r2, #1
 8002f62:	9200      	str	r2, [sp, #0]
 8002f64:	2224      	movs	r2, #36	; 0x24
 8002f66:	f000 fa36 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = QMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8002f7a:	238d      	movs	r3, #141	; 0x8d
 8002f7c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6858      	ldr	r0, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7a19      	ldrb	r1, [r3, #8]
 8002f86:	f107 030f 	add.w	r3, r7, #15
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	9200      	str	r2, [sp, #0]
 8002f8e:	2225      	movs	r2, #37	; 0x25
 8002f90:	f000 fa21 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6858      	ldr	r0, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7a19      	ldrb	r1, [r3, #8]
 8002fa0:	f107 030f 	add.w	r3, r7, #15
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	9200      	str	r2, [sp, #0]
 8002fa8:	2226      	movs	r2, #38	; 0x26
 8002faa:	f000 fa14 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8002fae:	2386      	movs	r3, #134	; 0x86
 8002fb0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6858      	ldr	r0, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7a19      	ldrb	r1, [r3, #8]
 8002fba:	f107 030f 	add.w	r3, r7, #15
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	9200      	str	r2, [sp, #0]
 8002fc2:	2227      	movs	r2, #39	; 0x27
 8002fc4:	f000 fa07 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <MPU6050_Configure_BMP180>:

static void MPU6050_Configure_BMP180(GY87_HandleTypeDef_t * hgy87) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	6078      	str	r0, [r7, #4]

    /* Configure slave BMP180 barometer in MPU6050 */
    uint8_t regData;

    /* Set slave BMP180 barometer device address (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = BMP180_AUX_VAL_I2C_ADDR | 0x80;
 8002fd8:	23f7      	movs	r3, #247	; 0xf7
 8002fda:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData, MPU6050_SET_BIT);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6858      	ldr	r0, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7a19      	ldrb	r1, [r3, #8]
 8002fe4:	f107 030f 	add.w	r3, r7, #15
 8002fe8:	2201      	movs	r2, #1
 8002fea:	9200      	str	r2, [sp, #0]
 8002fec:	2228      	movs	r2, #40	; 0x28
 8002fee:	f000 f9f2 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>

    /* Set slave BMP180 barometer registers addresses to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0xF6;
 8002ff2:	23f6      	movs	r3, #246	; 0xf6
 8002ff4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData, MPU6050_SET_BIT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6858      	ldr	r0, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7a19      	ldrb	r1, [r3, #8]
 8002ffe:	f107 030f 	add.w	r3, r7, #15
 8003002:	2201      	movs	r2, #1
 8003004:	9200      	str	r2, [sp, #0]
 8003006:	2229      	movs	r2, #41	; 0x29
 8003008:	f000 f9e5 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>

    /* Set slave BMP180 barometer number of registers to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | 0x03;
 800300c:	2383      	movs	r3, #131	; 0x83
 800300e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6858      	ldr	r0, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7a19      	ldrb	r1, [r3, #8]
 8003018:	f107 030f 	add.w	r3, r7, #15
 800301c:	2201      	movs	r2, #1
 800301e:	9200      	str	r2, [sp, #0]
 8003020:	222a      	movs	r2, #42	; 0x2a
 8003022:	f000 f9d8 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <GY87_Configure>:

static bool_t GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff feb4 	bl	8002da4 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fec6 	bl	8002dce <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fed8 	bl	8002df8 <MPU6050_SetSampleDivider>

    /* Enable digital low pass filter */
    MPU6050_EnableDLPF(hgy87);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff feea 	bl	8002e22 <MPU6050_EnableDLPF>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fefc 	bl	8002e4c <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff0e 	bl	8002e76 <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff ff35 	bl	8002eca <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ff47 	bl	8002ef4 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f82d 	bl	80030c6 <QMC5883L_TestConnection>
 800306c:	4603      	mov	r3, r0
 800306e:	f083 0301 	eor.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <GY87_Configure+0x4e>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer not detected.\r\n\n", LOG_ERROR);
#endif
        return false;
 8003078:	2300      	movs	r3, #0
 800307a:	e020      	b.n	80030be <GY87_Configure+0x90>
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f852 	bl	8003126 <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f837 	bl	80030f6 <BMP180_TestConnection>
 8003088:	4603      	mov	r3, r0
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <GY87_Configure+0x6a>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer not detected.\r\n\n", LOG_ERROR);
#endif
        return false;
 8003094:	2300      	movs	r3, #0
 8003096:	e012      	b.n	80030be <GY87_Configure+0x90>
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f871 	bl	8003180 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ff3d 	bl	8002f1e <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff fefb 	bl	8002ea0 <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff4c 	bl	8002f48 <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff5e 	bl	8002f72 <MPU6050_Configure_QMC5883l>

    /* Configure slave BMP180 barometer in MPU6050 */
    MPU6050_Configure_BMP180(hgy87);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ff8a 	bl	8002fd0 <MPU6050_Configure_BMP180>

    return true;
 80030bc:	2301      	movs	r3, #1
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af02      	add	r7, sp, #8
 80030cc:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6858      	ldr	r0, [r3, #4]
 80030d2:	f107 030f 	add.w	r3, r7, #15
 80030d6:	2201      	movs	r2, #1
 80030d8:	9200      	str	r2, [sp, #0]
 80030da:	220d      	movs	r2, #13
 80030dc:	211a      	movs	r1, #26
 80030de:	f000 f952 	bl	8003386 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2bff      	cmp	r3, #255	; 0xff
 80030e6:	d001      	beq.n	80030ec <QMC5883L_TestConnection+0x26>
        return false;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 80030ec:	2301      	movs	r3, #1
    }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af02      	add	r7, sp, #8
 80030fc:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, BMP180_REG_ID, &regData, sizeof(regData));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6858      	ldr	r0, [r3, #4]
 8003102:	f107 030f 	add.w	r3, r7, #15
 8003106:	2201      	movs	r2, #1
 8003108:	9200      	str	r2, [sp, #0]
 800310a:	22d0      	movs	r2, #208	; 0xd0
 800310c:	21ee      	movs	r1, #238	; 0xee
 800310e:	f000 f93a 	bl	8003386 <MPU6050_ReadRegister>

    if (BMP180_AUX_VAL_ID != regData) {
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b55      	cmp	r3, #85	; 0x55
 8003116:	d001      	beq.n	800311c <BMP180_TestConnection+0x26>
        return false;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <BMP180_TestConnection+0x28>
    } else {
        return true;
 800311c:	2301      	movs	r3, #1
    }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af02      	add	r7, sp, #8
 800312c:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6858      	ldr	r0, [r3, #4]
 8003136:	f107 030f 	add.w	r3, r7, #15
 800313a:	2201      	movs	r2, #1
 800313c:	9200      	str	r2, [sp, #0]
 800313e:	220b      	movs	r2, #11
 8003140:	211a      	movs	r1, #26
 8003142:	f000 f948 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8003146:	231d      	movs	r3, #29
 8003148:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6858      	ldr	r0, [r3, #4]
 800314e:	f107 030f 	add.w	r3, r7, #15
 8003152:	2201      	movs	r2, #1
 8003154:	9200      	str	r2, [sp, #0]
 8003156:	2209      	movs	r2, #9
 8003158:	211a      	movs	r1, #26
 800315a:	f000 f93c 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6858      	ldr	r0, [r3, #4]
 8003166:	f107 030f 	add.w	r3, r7, #15
 800316a:	2201      	movs	r2, #1
 800316c:	9200      	str	r2, [sp, #0]
 800316e:	220a      	movs	r2, #10
 8003170:	211a      	movs	r1, #26
 8003172:	f000 f930 	bl	80033d6 <MPU6050_WriteRegisterBitmasked>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b098      	sub	sp, #96	; 0x60
 8003184:	af02      	add	r7, sp, #8
 8003186:	6078      	str	r0, [r7, #4]
	/* delete, debugging */
	uint8_t loggingStr[64];

    /* Configure BMP180 barometer */
	uint8_t regData;
	uint8_t temperatureRawData[2] = {0};
 8003188:	2300      	movs	r3, #0
 800318a:	81bb      	strh	r3, [r7, #12]

	int32_t X1;
	int32_t X2;

    /* Read calibration data */
    BMP180_ReadCalibrationData(hgy87);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f855 	bl	800323c <BMP180_ReadCalibrationData>

	/* Read uncompensated temperature */
	regData = 0x2E;
 8003192:	232e      	movs	r3, #46	; 0x2e
 8003194:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6858      	ldr	r0, [r3, #4]
 800319a:	f107 030f 	add.w	r3, r7, #15
 800319e:	22f4      	movs	r2, #244	; 0xf4
 80031a0:	21ee      	movs	r1, #238	; 0xee
 80031a2:	f000 f905 	bl	80033b0 <MPU6050_WriteRegister>
#ifdef USE_FREERTOS
	//vTaskDelay(pdMS_TO_TICKS(5));
#else
	//HAL_Delay(5);
#endif
	MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF6, temperatureRawData, 2 * sizeof(uint8_t));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6858      	ldr	r0, [r3, #4]
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	2202      	movs	r2, #2
 80031b0:	9200      	str	r2, [sp, #0]
 80031b2:	22f6      	movs	r2, #246	; 0xf6
 80031b4:	21ee      	movs	r1, #238	; 0xee
 80031b6:	f000 f8e6 	bl	8003386 <MPU6050_ReadRegister>
	BMP180_CalibrationData.UT = (temperatureRawData[0] << 8) | temperatureRawData[1];
 80031ba:	7b3b      	ldrb	r3, [r7, #12]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	7b7a      	ldrb	r2, [r7, #13]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <BMP180_Configure+0xb4>)
 80031c4:	61d3      	str	r3, [r2, #28]

	/* Calculate compensated temperature */
	X1 = (BMP180_CalibrationData.UT - BMP180_CalibrationData.AC6) * (BMP180_CalibrationData.AC5 / (1 << 15));
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <BMP180_Configure+0xb4>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <BMP180_Configure+0xb4>)
 80031cc:	8952      	ldrh	r2, [r2, #10]
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <BMP180_Configure+0xb4>)
 80031d2:	8912      	ldrh	r2, [r2, #8]
 80031d4:	0bd2      	lsrs	r2, r2, #15
 80031d6:	b292      	uxth	r2, r2
 80031d8:	fb02 f303 	mul.w	r3, r2, r3
 80031dc:	657b      	str	r3, [r7, #84]	; 0x54
	X2 = (BMP180_CalibrationData.MC * (1 << 11)) / (X1 + BMP180_CalibrationData.MD);
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <BMP180_Configure+0xb4>)
 80031e0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80031e4:	02da      	lsls	r2, r3, #11
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <BMP180_Configure+0xb4>)
 80031e8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80031ec:	4619      	mov	r1, r3
 80031ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f0:	440b      	add	r3, r1
 80031f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80031f6:	653b      	str	r3, [r7, #80]	; 0x50
	BMP180_CalibrationData.B5 = X1 + X2;
 80031f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fc:	4413      	add	r3, r2
 80031fe:	4a0d      	ldr	r2, [pc, #52]	; (8003234 <BMP180_Configure+0xb4>)
 8003200:	6113      	str	r3, [r2, #16]
	BMP180_CalibrationData.CT = ((BMP180_CalibrationData.B5 + 8) / (1 << 4)) / 10;
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <BMP180_Configure+0xb4>)
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	3308      	adds	r3, #8
 8003208:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <BMP180_Configure+0xb8>)
 800320a:	fb82 1203 	smull	r1, r2, r2, r3
 800320e:	1192      	asrs	r2, r2, #6
 8003210:	17db      	asrs	r3, r3, #31
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	4a07      	ldr	r2, [pc, #28]	; (8003234 <BMP180_Configure+0xb4>)
 8003216:	6213      	str	r3, [r2, #32]

	/* Write register to read uncompensated pressure in the future */
	regData = 0x34 + (BMP180_OVERSAMPLING << 6);
 8003218:	23b4      	movs	r3, #180	; 0xb4
 800321a:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6858      	ldr	r0, [r3, #4]
 8003220:	f107 030f 	add.w	r3, r7, #15
 8003224:	22f4      	movs	r2, #244	; 0xf4
 8003226:	21ee      	movs	r1, #238	; 0xee
 8003228:	f000 f8c2 	bl	80033b0 <MPU6050_WriteRegister>
}
 800322c:	bf00      	nop
 800322e:	3758      	adds	r7, #88	; 0x58
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000bdc 	.word	0x20000bdc
 8003238:	66666667 	.word	0x66666667

0800323c <BMP180_ReadCalibrationData>:

static void BMP180_ReadCalibrationData(GY87_HandleTypeDef_t * hgy87) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af02      	add	r7, sp, #8
 8003242:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8003258:	23aa      	movs	r3, #170	; 0xaa
 800325a:	83fb      	strh	r3, [r7, #30]

    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, startRegisterAddress, callibrationData, sizeof(callibrationData));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6858      	ldr	r0, [r3, #4]
 8003260:	8bfb      	ldrh	r3, [r7, #30]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	f107 0308 	add.w	r3, r7, #8
 8003268:	2116      	movs	r1, #22
 800326a:	9100      	str	r1, [sp, #0]
 800326c:	21ee      	movs	r1, #238	; 0xee
 800326e:	f000 f88a 	bl	8003386 <MPU6050_ReadRegister>

    BMP180_CalibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8003272:	7a3b      	ldrb	r3, [r7, #8]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	b21a      	sxth	r2, r3
 8003278:	7a7b      	ldrb	r3, [r7, #9]
 800327a:	b21b      	sxth	r3, r3
 800327c:	4313      	orrs	r3, r2
 800327e:	b21a      	sxth	r2, r3
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 8003282:	801a      	strh	r2, [r3, #0]
    BMP180_CalibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8003284:	7abb      	ldrb	r3, [r7, #10]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	b21a      	sxth	r2, r3
 800328a:	7afb      	ldrb	r3, [r7, #11]
 800328c:	b21b      	sxth	r3, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	b21a      	sxth	r2, r3
 8003292:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 8003294:	805a      	strh	r2, [r3, #2]
    BMP180_CalibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8003296:	7b3b      	ldrb	r3, [r7, #12]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	b21a      	sxth	r2, r3
 800329c:	7b7b      	ldrb	r3, [r7, #13]
 800329e:	b21b      	sxth	r3, r3
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b21a      	sxth	r2, r3
 80032a4:	4b28      	ldr	r3, [pc, #160]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 80032a6:	809a      	strh	r2, [r3, #4]
    BMP180_CalibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	b21a      	sxth	r2, r3
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b23      	ldr	r3, [pc, #140]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 80032ba:	80da      	strh	r2, [r3, #6]
    BMP180_CalibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 80032bc:	7c3b      	ldrb	r3, [r7, #16]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	b21a      	sxth	r2, r3
 80032c2:	7c7b      	ldrb	r3, [r7, #17]
 80032c4:	b21b      	sxth	r3, r3
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b21b      	sxth	r3, r3
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 80032ce:	811a      	strh	r2, [r3, #8]
    BMP180_CalibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 80032d0:	7cbb      	ldrb	r3, [r7, #18]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	b21b      	sxth	r3, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	b21b      	sxth	r3, r3
 80032de:	b29a      	uxth	r2, r3
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 80032e2:	815a      	strh	r2, [r3, #10]
    BMP180_CalibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 80032e4:	7d3b      	ldrb	r3, [r7, #20]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	7d7b      	ldrb	r3, [r7, #21]
 80032ec:	b21b      	sxth	r3, r3
 80032ee:	4313      	orrs	r3, r2
 80032f0:	b21a      	sxth	r2, r3
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 80032f4:	819a      	strh	r2, [r3, #12]
    BMP180_CalibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 80032f6:	7dbb      	ldrb	r3, [r7, #22]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	b21a      	sxth	r2, r3
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	b21b      	sxth	r3, r3
 8003300:	4313      	orrs	r3, r2
 8003302:	b21a      	sxth	r2, r3
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 8003306:	81da      	strh	r2, [r3, #14]
    BMP180_CalibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 8003308:	7e3b      	ldrb	r3, [r7, #24]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	b21a      	sxth	r2, r3
 800330e:	7e7b      	ldrb	r3, [r7, #25]
 8003310:	b21b      	sxth	r3, r3
 8003312:	4313      	orrs	r3, r2
 8003314:	b21a      	sxth	r2, r3
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 8003318:	829a      	strh	r2, [r3, #20]
    BMP180_CalibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 800331a:	7ebb      	ldrb	r3, [r7, #26]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	b21a      	sxth	r2, r3
 8003320:	7efb      	ldrb	r3, [r7, #27]
 8003322:	b21b      	sxth	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b21a      	sxth	r2, r3
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 800332a:	82da      	strh	r2, [r3, #22]
    BMP180_CalibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 800332c:	7f3b      	ldrb	r3, [r7, #28]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b21a      	sxth	r2, r3
 8003332:	7f7b      	ldrb	r3, [r7, #29]
 8003334:	b21b      	sxth	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b21a      	sxth	r2, r3
 800333a:	4b03      	ldr	r3, [pc, #12]	; (8003348 <BMP180_ReadCalibrationData+0x10c>)
 800333c:	831a      	strh	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000bdc 	.word	0x20000bdc

0800334c <GY87_BMP180_ReadUncompensatedPressure>:

static uint32_t GY87_BMP180_ReadUncompensatedPressure(GY87_HandleTypeDef_t * hgy87) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af02      	add	r7, sp, #8
 8003352:	6078      	str	r0, [r7, #4]
	/* Declare variable for raw data */
	uint8_t pressureRawData[3];
	int32_t uncompensatedPressure;

	/* Read uncompensated pressure data */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_06, pressureRawData, 3 * sizeof(uint8_t));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6858      	ldr	r0, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7a19      	ldrb	r1, [r3, #8]
 800335c:	f107 0308 	add.w	r3, r7, #8
 8003360:	2203      	movs	r2, #3
 8003362:	9200      	str	r2, [sp, #0]
 8003364:	224f      	movs	r2, #79	; 0x4f
 8003366:	f000 f80e 	bl	8003386 <MPU6050_ReadRegister>

    /* Calculate uncompensated pressure */
    uncompensatedPressure = ((pressureRawData[0] << 16) + (pressureRawData[1] << 8) + pressureRawData[2]) >> (8 - BMP180_OVERSAMPLING);
 800336a:	7a3b      	ldrb	r3, [r7, #8]
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	7a7b      	ldrb	r3, [r7, #9]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	4413      	add	r3, r2
 8003374:	7aba      	ldrb	r2, [r7, #10]
 8003376:	4413      	add	r3, r2
 8003378:	119b      	asrs	r3, r3, #6
 800337a:	60fb      	str	r3, [r7, #12]

    return uncompensatedPressure;
 800337c:	68fb      	ldr	r3, [r7, #12]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af02      	add	r7, sp, #8
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	72fb      	strb	r3, [r7, #11]
 8003394:	4613      	mov	r3, r2
 8003396:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8003398:	7aba      	ldrb	r2, [r7, #10]
 800339a:	7af9      	ldrb	r1, [r7, #11]
 800339c:	7e3b      	ldrb	r3, [r7, #24]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff fc69 	bl	8002c7a <I2C_Read>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	72fb      	strb	r3, [r7, #11]
 80033be:	4613      	mov	r3, r2
 80033c0:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 80033c2:	7aba      	ldrb	r2, [r7, #10]
 80033c4:	7af9      	ldrb	r1, [r7, #11]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff fc82 	bl	8002cd2 <I2C_Write>
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b088      	sub	sp, #32
 80033da:	af02      	add	r7, sp, #8
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	72fb      	strb	r3, [r7, #11]
 80033e4:	4613      	mov	r3, r2
 80033e6:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 80033e8:	f107 0317 	add.w	r3, r7, #23
 80033ec:	7aba      	ldrb	r2, [r7, #10]
 80033ee:	7af9      	ldrb	r1, [r7, #11]
 80033f0:	2001      	movs	r0, #1
 80033f2:	9000      	str	r0, [sp, #0]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ffc6 	bl	8003386 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 80033fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d006      	beq.n	8003410 <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	4313      	orrs	r3, r2
 800340a:	b2db      	uxtb	r3, r3
 800340c:	75bb      	strb	r3, [r7, #22]
 800340e:	e00a      	b.n	8003426 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b25b      	sxtb	r3, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	b25a      	sxtb	r2, r3
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	b25b      	sxtb	r3, r3
 800341e:	4013      	ands	r3, r2
 8003420:	b25b      	sxtb	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8003426:	f107 0316 	add.w	r3, r7, #22
 800342a:	7aba      	ldrb	r2, [r7, #10]
 800342c:	7af9      	ldrb	r1, [r7, #11]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ffbe 	bl	80033b0 <MPU6050_WriteRegister>
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <GY87_Init+0x12>
        return NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	e028      	b.n	80034a0 <GY87_Init+0x64>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <GY87_Init+0x6c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d101      	bne.n	800345a <GY87_Init+0x1e>
        return NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	e022      	b.n	80034a0 <GY87_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff fc64 	bl	8002d28 <GY87_InstanceInit>
 8003460:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01a      	beq.n	800349e <GY87_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7ff fbe8 	bl	8002c3e <I2C_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <GY87_Init+0x4e>
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7ff fdda 	bl	800302e <GY87_Configure>

            instancesNumber++;
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <GY87_Init+0x6c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	3301      	adds	r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <GY87_Init+0x6c>)
 8003484:	701a      	strb	r2, [r3, #0]

            return hgy87;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	e00a      	b.n	80034a0 <GY87_Init+0x64>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4618      	mov	r0, r3
 8003490:	f00b ffac 	bl	800f3ec <vPortFree>
            vPortFree(hgy87);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f00b ffa9 	bl	800f3ec <vPortFree>
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
#endif
            return NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	e000      	b.n	80034a0 <GY87_Init+0x64>

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
#endif
        return NULL;
 800349e:	2300      	movs	r3, #0
    }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000bd9 	.word	0x20000bd9

080034ac <GY87_CalibrateGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

bool_t GY87_CalibrateGyroscope(GY87_HandleTypeDef_t * hgy87) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08c      	sub	sp, #48	; 0x30
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the gyroscope values */
    GY87_gyroscopeValues_t gyroscopeValues;

    /* Declare variables to accumulate measurements */
    float ratesRoll = 0;
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    float ratesPitch = 0;
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
    float ratesYaw = 0;
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d044      	beq.n	8003556 <GY87_CalibrateGyroscope+0xaa>

    	/* Calibrate gyroscope measurements */
    	for(int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 80034cc:	2300      	movs	r3, #0
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	e020      	b.n	8003514 <GY87_CalibrateGyroscope+0x68>

        	/* Read gyroscope values */
        	GY87_ReadGyroscope(hgy87, &gyroscopeValues);
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f849 	bl	8003570 <GY87_ReadGyroscope>

        	/* Accumulate measurements */
        	ratesRoll += gyroscopeValues.rotationRateRoll;
 80034de:	edd7 7a05 	vldr	s15, [r7, #20]
 80034e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80034e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        	ratesPitch += gyroscopeValues.rotationRatePitch;
 80034ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80034f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        	ratesYaw += gyroscopeValues.rotationRateYaw;
 80034fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003502:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	for(int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	3301      	adds	r3, #1
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800351a:	dbda      	blt.n	80034d2 <GY87_CalibrateGyroscope+0x26>
    	}

    	gyroscopeCalibrationRoll = ratesRoll / GY87_CALIBRATION_ITERATIONS;
 800351c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003520:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003560 <GY87_CalibrateGyroscope+0xb4>
 8003524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <GY87_CalibrateGyroscope+0xb8>)
 800352a:	edc3 7a00 	vstr	s15, [r3]
    	gyroscopeCalibrationPitch = ratesPitch / GY87_CALIBRATION_ITERATIONS;
 800352e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003532:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003560 <GY87_CalibrateGyroscope+0xb4>
 8003536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <GY87_CalibrateGyroscope+0xbc>)
 800353c:	edc3 7a00 	vstr	s15, [r3]
    	gyroscopeCalibrationYaw = ratesYaw / GY87_CALIBRATION_ITERATIONS;
 8003540:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003544:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003560 <GY87_CalibrateGyroscope+0xb4>
 8003548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800354c:	4b07      	ldr	r3, [pc, #28]	; (800356c <GY87_CalibrateGyroscope+0xc0>)
 800354e:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"Gyroscope calibration done.\r\n\n", LOG_INFORMATION);
#endif

        return true;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <GY87_CalibrateGyroscope+0xac>

    } else {

    	return false;
 8003556:	2300      	movs	r3, #0
    }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3730      	adds	r7, #48	; 0x30
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	44fa0000 	.word	0x44fa0000
 8003564:	20000c00 	.word	0x20000c00
 8003568:	20000c04 	.word	0x20000c04
 800356c:	20000c08 	.word	0x20000c08

08003570 <GY87_ReadGyroscope>:

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af02      	add	r7, sp, #8
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0500;
 800357a:	2341      	movs	r3, #65	; 0x41
 800357c:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8086 	beq.w	8003692 <GY87_ReadGyroscope+0x122>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8082 	beq.w	8003692 <GY87_ReadGyroscope+0x122>

        /* Read gyroscope raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6858      	ldr	r0, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7a19      	ldrb	r1, [r3, #8]
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	2202      	movs	r2, #2
 800359c:	9200      	str	r2, [sp, #0]
 800359e:	2243      	movs	r2, #67	; 0x43
 80035a0:	f7ff fef1 	bl	8003386 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 80035a4:	7b3b      	ldrb	r3, [r7, #12]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	7b7b      	ldrb	r3, [r7, #13]
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	801a      	strh	r2, [r3, #0]
        /* Calculate gyroscope rotation rate along X axis (roll) */
        gyroscopeValues->rotationRateRoll = ((float) gyroscopeValues->rawValueX / scaleFactor) - gyroscopeCalibrationRoll;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80035c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d4:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <GY87_ReadGyroscope+0x158>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read gyroscope raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6858      	ldr	r0, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7a19      	ldrb	r1, [r3, #8]
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	2202      	movs	r2, #2
 80035f2:	9200      	str	r2, [sp, #0]
 80035f4:	2245      	movs	r2, #69	; 0x45
 80035f6:	f7ff fec6 	bl	8003386 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 80035fa:	7b3b      	ldrb	r3, [r7, #12]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b21a      	sxth	r2, r3
 8003600:	7b7b      	ldrb	r3, [r7, #13]
 8003602:	b21b      	sxth	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	b21a      	sxth	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	805a      	strh	r2, [r3, #2]
        /* Calculate gyroscope rotation rate along Y axis (pitch) */
        gyroscopeValues->rotationRatePitch = ((float) gyroscopeValues->rawValueY / scaleFactor) - gyroscopeCalibrationPitch;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800361a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <GY87_ReadGyroscope+0x15c>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read gyroscope raw value for Z axis  */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6858      	ldr	r0, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7a19      	ldrb	r1, [r3, #8]
 8003642:	f107 030c 	add.w	r3, r7, #12
 8003646:	2202      	movs	r2, #2
 8003648:	9200      	str	r2, [sp, #0]
 800364a:	2247      	movs	r2, #71	; 0x47
 800364c:	f7ff fe9b 	bl	8003386 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8003650:	7b3b      	ldrb	r3, [r7, #12]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	b21a      	sxth	r2, r3
 8003656:	7b7b      	ldrb	r3, [r7, #13]
 8003658:	b21b      	sxth	r3, r3
 800365a:	4313      	orrs	r3, r2
 800365c:	b21a      	sxth	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	809a      	strh	r2, [r3, #4]
        /* Calculate gyroscope rotation rate along Z axis (yaw)  */
        gyroscopeValues->rotationRateYaw = ((float) gyroscopeValues->rawValueZ / scaleFactor) - gyroscopeCalibrationYaw;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003680:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <GY87_ReadGyroscope+0x160>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	edc3 7a04 	vstr	s15, [r3, #16]
 8003690:	e015      	b.n	80036be <GY87_ReadGyroscope+0x14e>

    } else {

        /* Wrong parameters */
        gyroscopeValues->rawValueX = 0;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2200      	movs	r2, #0
 8003696:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->rawValueY = 0;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2200      	movs	r2, #0
 800369c:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->rawValueZ = 0;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	809a      	strh	r2, [r3, #4]
        gyroscopeValues->rotationRateRoll = 0;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
        gyroscopeValues->rotationRatePitch = 0;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	60da      	str	r2, [r3, #12]
        gyroscopeValues->rotationRateYaw = 0;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
    }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000c00 	.word	0x20000c00
 80036cc:	20000c04 	.word	0x20000c04
 80036d0:	20000c08 	.word	0x20000c08

080036d4 <GY87_CalibrateAccelerometer>:

bool_t GY87_CalibrateAccelerometer(GY87_HandleTypeDef_t * hgy87) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08e      	sub	sp, #56	; 0x38
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the accelerometer values */
    GY87_accelerometerValues_t accelerometerValues;

    /* Declare variables to accumulate measurements */
    float linearAccelerationsX = 0;
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
    float linearAccelerationsY = 0;
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
    float linearAccelerationsZ = 0;
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d044      	beq.n	800377e <GY87_CalibrateAccelerometer+0xaa>

    	/* Calibrate gyroscope measurements */
    	for(int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 80036f4:	2300      	movs	r3, #0
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f8:	e020      	b.n	800373c <GY87_CalibrateAccelerometer+0x68>

        	/* Read gyroscope values */
        	GY87_ReadAccelerometer(hgy87, &accelerometerValues);
 80036fa:	f107 030c 	add.w	r3, r7, #12
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f849 	bl	8003798 <GY87_ReadAccelerometer>

        	/* Accumulate measurements */
        	linearAccelerationsX += accelerometerValues.linearAccelerationX;
 8003706:	edd7 7a05 	vldr	s15, [r7, #20]
 800370a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        	linearAccelerationsY += accelerometerValues.linearAccelerationY;
 8003716:	edd7 7a06 	vldr	s15, [r7, #24]
 800371a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800371e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003722:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        	linearAccelerationsZ += accelerometerValues.linearAccelerationZ;
 8003726:	edd7 7a07 	vldr	s15, [r7, #28]
 800372a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800372e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003732:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    	for(int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	3301      	adds	r3, #1
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003742:	dbda      	blt.n	80036fa <GY87_CalibrateAccelerometer+0x26>
    	}

    	accelerometerCalibrationX = linearAccelerationsX / GY87_CALIBRATION_ITERATIONS;
 8003744:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003748:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003788 <GY87_CalibrateAccelerometer+0xb4>
 800374c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <GY87_CalibrateAccelerometer+0xb8>)
 8003752:	edc3 7a00 	vstr	s15, [r3]
    	accelerometerCalibrationY = linearAccelerationsY / GY87_CALIBRATION_ITERATIONS;
 8003756:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800375a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003788 <GY87_CalibrateAccelerometer+0xb4>
 800375e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <GY87_CalibrateAccelerometer+0xbc>)
 8003764:	edc3 7a00 	vstr	s15, [r3]
    	accelerometerCalibrationZ = linearAccelerationsZ / GY87_CALIBRATION_ITERATIONS;
 8003768:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800376c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003788 <GY87_CalibrateAccelerometer+0xb4>
 8003770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <GY87_CalibrateAccelerometer+0xc0>)
 8003776:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"Accelerometer calibration done.\r\n\n", LOG_INFORMATION);
#endif

        return true;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <GY87_CalibrateAccelerometer+0xac>

    } else {

    	return false;
 800377e:	2300      	movs	r3, #0
    }
}
 8003780:	4618      	mov	r0, r3
 8003782:	3738      	adds	r7, #56	; 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	44fa0000 	.word	0x44fa0000
 800378c:	20000c0c 	.word	0x20000c0c
 8003790:	20000c10 	.word	0x20000c10
 8003794:	20000c14 	.word	0x20000c14

08003798 <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 8003798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800379c:	b08a      	sub	sp, #40	; 0x28
 800379e:	af02      	add	r7, sp, #8
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_FS_08;
 80037a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a8:	83fb      	strh	r3, [r7, #30]

    float accX, accY, accZ;

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8101 	beq.w	80039b4 <GY87_ReadAccelerometer+0x21c>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80fd 	beq.w	80039b4 <GY87_ReadAccelerometer+0x21c>

    	/* Read accelerometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6858      	ldr	r0, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7a19      	ldrb	r1, [r3, #8]
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	2202      	movs	r2, #2
 80037c8:	9200      	str	r2, [sp, #0]
 80037ca:	223b      	movs	r2, #59	; 0x3b
 80037cc:	f7ff fddb 	bl	8003386 <MPU6050_ReadRegister>
        accelerometerValues->rawValueX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 80037d0:	7b3b      	ldrb	r3, [r7, #12]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	b21a      	sxth	r2, r3
 80037d6:	7b7b      	ldrb	r3, [r7, #13]
 80037d8:	b21b      	sxth	r3, r3
 80037da:	4313      	orrs	r3, r2
 80037dc:	b21a      	sxth	r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	801a      	strh	r2, [r3, #0]
        /* Calculate accelerometer linear acceleration along X axis */
        accX = accelerometerValues->linearAccelerationX = ((float) accelerometerValues->rawValueX / scaleFactor) - accelerometerCalibrationX;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003800:	4b7d      	ldr	r3, [pc, #500]	; (80039f8 <GY87_ReadAccelerometer+0x260>)
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	61bb      	str	r3, [r7, #24]

        /* Read accelerometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6858      	ldr	r0, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7a19      	ldrb	r1, [r3, #8]
 800381e:	f107 030c 	add.w	r3, r7, #12
 8003822:	2202      	movs	r2, #2
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	223d      	movs	r2, #61	; 0x3d
 8003828:	f7ff fdad 	bl	8003386 <MPU6050_ReadRegister>
        accelerometerValues->rawValueY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 800382c:	7b3b      	ldrb	r3, [r7, #12]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	b21a      	sxth	r2, r3
 8003832:	7b7b      	ldrb	r3, [r7, #13]
 8003834:	b21b      	sxth	r3, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	b21a      	sxth	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	805a      	strh	r2, [r3, #2]
        /* Calculate accelerometer linear acceleration along Y axis */
        accY = accelerometerValues->linearAccelerationY = ((float) accelerometerValues->rawValueY / scaleFactor) - accelerometerCalibrationY;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800384c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385c:	4b67      	ldr	r3, [pc, #412]	; (80039fc <GY87_ReadAccelerometer+0x264>)
 800385e:	edd3 7a00 	vldr	s15, [r3]
 8003862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	edc3 7a03 	vstr	s15, [r3, #12]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	617b      	str	r3, [r7, #20]

        /* Read accelerometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6858      	ldr	r0, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7a19      	ldrb	r1, [r3, #8]
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	2202      	movs	r2, #2
 8003880:	9200      	str	r2, [sp, #0]
 8003882:	223f      	movs	r2, #63	; 0x3f
 8003884:	f7ff fd7f 	bl	8003386 <MPU6050_ReadRegister>
        accelerometerValues->rawValueZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8003888:	7b3b      	ldrb	r3, [r7, #12]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	b21a      	sxth	r2, r3
 800388e:	7b7b      	ldrb	r3, [r7, #13]
 8003890:	b21b      	sxth	r3, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	b21a      	sxth	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	809a      	strh	r2, [r3, #4]
        /* Calculate accelerometer linear acceleration along Z axis */
        accZ = accelerometerValues->linearAccelerationZ = ((float) accelerometerValues->rawValueZ / scaleFactor);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	edc3 7a04 	vstr	s15, [r3, #16]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	613b      	str	r3, [r7, #16]

        /* Calculate roll and pitch angles using an approximation with linear accelerations */
        accelerometerValues->angleRoll = atan(accY / sqrt(accX * accX + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 80038c4:	6978      	ldr	r0, [r7, #20]
 80038c6:	f7fc fe47 	bl	8000558 <__aeabi_f2d>
 80038ca:	4680      	mov	r8, r0
 80038cc:	4689      	mov	r9, r1
 80038ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80038d2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e2:	ee17 0a90 	vmov	r0, s15
 80038e6:	f7fc fe37 	bl	8000558 <__aeabi_f2d>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	ec43 2b10 	vmov	d0, r2, r3
 80038f2:	f00f f995 	bl	8012c20 <sqrt>
 80038f6:	ec53 2b10 	vmov	r2, r3, d0
 80038fa:	4640      	mov	r0, r8
 80038fc:	4649      	mov	r1, r9
 80038fe:	f7fc ffad 	bl	800085c <__aeabi_ddiv>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	ec43 2b17 	vmov	d7, r2, r3
 800390a:	eeb0 0a47 	vmov.f32	s0, s14
 800390e:	eef0 0a67 	vmov.f32	s1, s15
 8003912:	f00f f9b1 	bl	8012c78 <atan>
 8003916:	ec51 0b10 	vmov	r0, r1, d0
 800391a:	a335      	add	r3, pc, #212	; (adr r3, 80039f0 <GY87_ReadAccelerometer+0x258>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f7fc fe72 	bl	8000608 <__aeabi_dmul>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f7fd f964 	bl	8000bf8 <__aeabi_d2f>
 8003930:	4602      	mov	r2, r0
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	615a      	str	r2, [r3, #20]
        accelerometerValues->anglePitch = -atan(accX / sqrt(accY * accY + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 8003936:	69b8      	ldr	r0, [r7, #24]
 8003938:	f7fc fe0e 	bl	8000558 <__aeabi_f2d>
 800393c:	4680      	mov	r8, r0
 800393e:	4689      	mov	r9, r1
 8003940:	edd7 7a05 	vldr	s15, [r7, #20]
 8003944:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003948:	edd7 7a04 	vldr	s15, [r7, #16]
 800394c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003954:	ee17 0a90 	vmov	r0, s15
 8003958:	f7fc fdfe 	bl	8000558 <__aeabi_f2d>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	ec43 2b10 	vmov	d0, r2, r3
 8003964:	f00f f95c 	bl	8012c20 <sqrt>
 8003968:	ec53 2b10 	vmov	r2, r3, d0
 800396c:	4640      	mov	r0, r8
 800396e:	4649      	mov	r1, r9
 8003970:	f7fc ff74 	bl	800085c <__aeabi_ddiv>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	ec43 2b17 	vmov	d7, r2, r3
 800397c:	eeb0 0a47 	vmov.f32	s0, s14
 8003980:	eef0 0a67 	vmov.f32	s1, s15
 8003984:	f00f f978 	bl	8012c78 <atan>
 8003988:	ec53 2b10 	vmov	r2, r3, d0
 800398c:	4614      	mov	r4, r2
 800398e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003992:	a317      	add	r3, pc, #92	; (adr r3, 80039f0 <GY87_ReadAccelerometer+0x258>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	4620      	mov	r0, r4
 800399a:	4629      	mov	r1, r5
 800399c:	f7fc fe34 	bl	8000608 <__aeabi_dmul>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7fd f926 	bl	8000bf8 <__aeabi_d2f>
 80039ac:	4602      	mov	r2, r0
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	619a      	str	r2, [r3, #24]
 80039b2:	e015      	b.n	80039e0 <GY87_ReadAccelerometer+0x248>

    } else {
        /* Wrong parameters */
        accelerometerValues->rawValueX = 0;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2200      	movs	r2, #0
 80039b8:	801a      	strh	r2, [r3, #0]
        accelerometerValues->rawValueY = 0;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2200      	movs	r2, #0
 80039be:	805a      	strh	r2, [r3, #2]
        accelerometerValues->rawValueZ = 0;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	809a      	strh	r2, [r3, #4]
        accelerometerValues->linearAccelerationX = 0;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
        accelerometerValues->linearAccelerationY = 0;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	60da      	str	r2, [r3, #12]
        accelerometerValues->linearAccelerationZ = 0;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
    }
}
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039ea:	bf00      	nop
 80039ec:	f3af 8000 	nop.w
 80039f0:	1a63c1f8 	.word	0x1a63c1f8
 80039f4:	404ca5dc 	.word	0x404ca5dc
 80039f8:	20000c0c 	.word	0x20000c0c
 80039fc:	20000c10 	.word	0x20000c10

08003a00 <GY87_ReadTemperatureSensor>:

int16_t GY87_ReadTemperatureSensor(GY87_HandleTypeDef_t * hgy87) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 8003a08:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8003a0c:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8003a0e:	2324      	movs	r3, #36	; 0x24
 8003a10:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hgy87) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <GY87_ReadTemperatureSensor+0x1c>
        return 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e01b      	b.n	8003a54 <GY87_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6858      	ldr	r0, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7a19      	ldrb	r1, [r3, #8]
 8003a24:	f107 0308 	add.w	r3, r7, #8
 8003a28:	2202      	movs	r2, #2
 8003a2a:	9200      	str	r2, [sp, #0]
 8003a2c:	2241      	movs	r2, #65	; 0x41
 8003a2e:	f7ff fcaa 	bl	8003386 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 8003a32:	7a3b      	ldrb	r3, [r7, #8]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	7a7b      	ldrb	r3, [r7, #9]
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a46:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	89bb      	ldrh	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	b21b      	sxth	r3, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <GY87_ReadMagnetometer>:

void GY87_ReadMagnetometer(GY87_HandleTypeDef_t * hgy87, GY87_magnetometerValues_t * magnetometerValues) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 4096;
 8003a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6a:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != magnetometerValues) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d075      	beq.n	8003b5e <GY87_ReadMagnetometer+0x102>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d072      	beq.n	8003b5e <GY87_ReadMagnetometer+0x102>

    	/* Read magnetometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6858      	ldr	r0, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7a19      	ldrb	r1, [r3, #8]
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	2202      	movs	r2, #2
 8003a86:	9200      	str	r2, [sp, #0]
 8003a88:	2249      	movs	r2, #73	; 0x49
 8003a8a:	f7ff fc7c 	bl	8003386 <MPU6050_ReadRegister>
        magnetometerValues->rawValueX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 8003a8e:	7b7b      	ldrb	r3, [r7, #13]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	b21a      	sxth	r2, r3
 8003a94:	7b3b      	ldrb	r3, [r7, #12]
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b21a      	sxth	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	801a      	strh	r2, [r3, #0]
        /* Calculate magnetometer magnetic field along X axis */
        magnetometerValues->magneticFieldX = ((float) magnetometerValues->rawValueX / scaleFactor);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read magnetometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6858      	ldr	r0, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7a19      	ldrb	r1, [r3, #8]
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	9200      	str	r2, [sp, #0]
 8003ad4:	224b      	movs	r2, #75	; 0x4b
 8003ad6:	f7ff fc56 	bl	8003386 <MPU6050_ReadRegister>
        magnetometerValues->rawValueY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 8003ada:	7b7b      	ldrb	r3, [r7, #13]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	b21a      	sxth	r2, r3
 8003ae0:	7b3b      	ldrb	r3, [r7, #12]
 8003ae2:	b21b      	sxth	r3, r3
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	b21a      	sxth	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	805a      	strh	r2, [r3, #2]
        /* Calculate magnetometer magnetic field along Y axis */
        magnetometerValues->magneticFieldY = ((float) magnetometerValues->rawValueY / scaleFactor);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read magnetometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6858      	ldr	r0, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7a19      	ldrb	r1, [r3, #8]
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	9200      	str	r2, [sp, #0]
 8003b20:	224d      	movs	r2, #77	; 0x4d
 8003b22:	f7ff fc30 	bl	8003386 <MPU6050_ReadRegister>
        magnetometerValues->rawValueZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 8003b26:	7b7b      	ldrb	r3, [r7, #13]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	b21a      	sxth	r2, r3
 8003b2c:	7b3b      	ldrb	r3, [r7, #12]
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	4313      	orrs	r3, r2
 8003b32:	b21a      	sxth	r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	809a      	strh	r2, [r3, #4]
        /* Calculate magnetometer magnetic field along Z axis */
        magnetometerValues->magneticFieldZ = ((float) magnetometerValues->rawValueZ / scaleFactor);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	edc3 7a04 	vstr	s15, [r3, #16]
 8003b5c:	e00c      	b.n	8003b78 <GY87_ReadMagnetometer+0x11c>

    } else {
        /* Wrong parameters */
        magnetometerValues->magneticFieldX = 0;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
        magnetometerValues->magneticFieldY = 0;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
        magnetometerValues->magneticFieldZ = 0;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]
    }
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <GY87_ReadMagnetometerHeading>:

float GY87_ReadMagnetometerHeading(GY87_HandleTypeDef_t * hgy87) {
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameter and calculate heading */
    if (NULL != hgy87) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d053      	beq.n	8003c36 <GY87_ReadMagnetometerHeading+0xb6>

        GY87_ReadMagnetometer(hgy87, &magnetometerValues);
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff61 	bl	8003a5c <GY87_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(-magnetometerValues.magneticFieldY, -magnetometerValues.magneticFieldX) * RADIANS_TO_DEGREES_CONST + QMC5883L_MAGNETIC_DECLINATION + QMC5883L_CALIBRATION_OFFSET;
 8003b9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b9e:	eef1 7a67 	vneg.f32	s15, s15
 8003ba2:	ee17 3a90 	vmov	r3, s15
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc fcd6 	bl	8000558 <__aeabi_f2d>
 8003bac:	4604      	mov	r4, r0
 8003bae:	460d      	mov	r5, r1
 8003bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bb4:	eef1 7a67 	vneg.f32	s15, s15
 8003bb8:	ee17 3a90 	vmov	r3, s15
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fccb 	bl	8000558 <__aeabi_f2d>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	ec43 2b11 	vmov	d1, r2, r3
 8003bca:	ec45 4b10 	vmov	d0, r4, r5
 8003bce:	f00e ffb5 	bl	8012b3c <atan2>
 8003bd2:	ec51 0b10 	vmov	r0, r1, d0
 8003bd6:	a321      	add	r3, pc, #132	; (adr r3, 8003c5c <GY87_ReadMagnetometerHeading+0xdc>)
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f7fc fd14 	bl	8000608 <__aeabi_dmul>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	f7fc fb54 	bl	800029c <__adddf3>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <GY87_ReadMagnetometerHeading+0xd0>)
 8003c02:	f7fc fb4b 	bl	800029c <__adddf3>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7fc fff3 	bl	8000bf8 <__aeabi_d2f>
 8003c12:	4603      	mov	r3, r0
 8003c14:	61fb      	str	r3, [r7, #28]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 8003c16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	d50a      	bpl.n	8003c3a <GY87_ReadMagnetometerHeading+0xba>
            heading += 360;
 8003c24:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c28:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003c54 <GY87_ReadMagnetometerHeading+0xd4>
 8003c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c30:	edc7 7a07 	vstr	s15, [r7, #28]
 8003c34:	e001      	b.n	8003c3a <GY87_ReadMagnetometerHeading+0xba>
        }

    } else {

        heading = -1;
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <GY87_ReadMagnetometerHeading+0xd8>)
 8003c38:	61fb      	str	r3, [r7, #28]
    }

    return heading;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	ee07 3a90 	vmov	s15, r3
}
 8003c40:	eeb0 0a67 	vmov.f32	s0, s15
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	f3af 8000 	nop.w
 8003c50:	403a0000 	.word	0x403a0000
 8003c54:	43b40000 	.word	0x43b40000
 8003c58:	bf800000 	.word	0xbf800000
 8003c5c:	1a63c1f8 	.word	0x1a63c1f8
 8003c60:	404ca5dc 	.word	0x404ca5dc

08003c64 <GY87_ReadBarometerPressure>:

float GY87_ReadBarometerPressure(GY87_HandleTypeDef_t * hgy87) {
 8003c64:	b5b0      	push	{r4, r5, r7, lr}
 8003c66:	b08c      	sub	sp, #48	; 0x30
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
    uint32_t B7;

    int32_t UP;

    /* Calculate pressure */
    UP = GY87_BMP180_ReadUncompensatedPressure(hgy87);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fb6d 	bl	800334c <GY87_BMP180_ReadUncompensatedPressure>
 8003c72:	4603      	mov	r3, r0
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28

    B6 = BMP180_CalibrationData.B5 - 4000;
 8003c76:	4ba8      	ldr	r3, [pc, #672]	; (8003f18 <GY87_ReadBarometerPressure+0x2b4>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
    X1 = (BMP180_CalibrationData.B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
 8003c80:	4ba5      	ldr	r3, [pc, #660]	; (8003f18 <GY87_ReadBarometerPressure+0x2b4>)
 8003c82:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc54 	bl	8000534 <__aeabi_i2d>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	460d      	mov	r5, r1
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	fb03 f303 	mul.w	r3, r3, r3
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fc fc4c 	bl	8000534 <__aeabi_i2d>
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	4b9e      	ldr	r3, [pc, #632]	; (8003f1c <GY87_ReadBarometerPressure+0x2b8>)
 8003ca2:	f7fc fddb 	bl	800085c <__aeabi_ddiv>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4620      	mov	r0, r4
 8003cac:	4629      	mov	r1, r5
 8003cae:	f7fc fcab 	bl	8000608 <__aeabi_dmul>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b98      	ldr	r3, [pc, #608]	; (8003f20 <GY87_ReadBarometerPressure+0x2bc>)
 8003cc0:	f7fc fdcc 	bl	800085c <__aeabi_ddiv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f7fc ff4c 	bl	8000b68 <__aeabi_d2iz>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	623b      	str	r3, [r7, #32]
    X2 = BMP180_CalibrationData.AC2 * B6 / (pow(2, 11));
 8003cd4:	4b90      	ldr	r3, [pc, #576]	; (8003f18 <GY87_ReadBarometerPressure+0x2b4>)
 8003cd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc26 	bl	8000534 <__aeabi_i2d>
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	4b8c      	ldr	r3, [pc, #560]	; (8003f20 <GY87_ReadBarometerPressure+0x2bc>)
 8003cee:	f7fc fdb5 	bl	800085c <__aeabi_ddiv>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7fc ff35 	bl	8000b68 <__aeabi_d2iz>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	61fb      	str	r3, [r7, #28]
    X3 = X1 + X2;
 8003d02:	6a3a      	ldr	r2, [r7, #32]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
    B3 = (((BMP180_CalibrationData.AC1 * 4 + X3) << BMP180_OVERSAMPLING) + 2) / 4;
 8003d0a:	4b83      	ldr	r3, [pc, #524]	; (8003f18 <GY87_ReadBarometerPressure+0x2b4>)
 8003d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d10:	009a      	lsls	r2, r3, #2
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	3302      	adds	r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da00      	bge.n	8003d20 <GY87_ReadBarometerPressure+0xbc>
 8003d1e:	3303      	adds	r3, #3
 8003d20:	109b      	asrs	r3, r3, #2
 8003d22:	617b      	str	r3, [r7, #20]
    X1 = BMP180_CalibrationData.AC3 * B6 / pow(2, 13);
 8003d24:	4b7c      	ldr	r3, [pc, #496]	; (8003f18 <GY87_ReadBarometerPressure+0x2b4>)
 8003d26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fbfe 	bl	8000534 <__aeabi_i2d>
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	4b79      	ldr	r3, [pc, #484]	; (8003f24 <GY87_ReadBarometerPressure+0x2c0>)
 8003d3e:	f7fc fd8d 	bl	800085c <__aeabi_ddiv>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f7fc ff0d 	bl	8000b68 <__aeabi_d2iz>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	623b      	str	r3, [r7, #32]
    X2 = (BMP180_CalibrationData.B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
 8003d52:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <GY87_ReadBarometerPressure+0x2b4>)
 8003d54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fc fbeb 	bl	8000534 <__aeabi_i2d>
 8003d5e:	4604      	mov	r4, r0
 8003d60:	460d      	mov	r5, r1
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	fb03 f303 	mul.w	r3, r3, r3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fbe3 	bl	8000534 <__aeabi_i2d>
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <GY87_ReadBarometerPressure+0x2b8>)
 8003d74:	f7fc fd72 	bl	800085c <__aeabi_ddiv>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4629      	mov	r1, r5
 8003d80:	f7fc fc42 	bl	8000608 <__aeabi_dmul>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	4b65      	ldr	r3, [pc, #404]	; (8003f28 <GY87_ReadBarometerPressure+0x2c4>)
 8003d92:	f7fc fd63 	bl	800085c <__aeabi_ddiv>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f7fc fee3 	bl	8000b68 <__aeabi_d2iz>
 8003da2:	4603      	mov	r3, r0
 8003da4:	61fb      	str	r3, [r7, #28]
    X3 = ((X1 + X2) + 2) / pow(2, 2);
 8003da6:	6a3a      	ldr	r2, [r7, #32]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	3302      	adds	r3, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fbc0 	bl	8000534 <__aeabi_i2d>
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <GY87_ReadBarometerPressure+0x2c8>)
 8003dba:	f7fc fd4f 	bl	800085c <__aeabi_ddiv>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f7fc fecf 	bl	8000b68 <__aeabi_d2iz>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	61bb      	str	r3, [r7, #24]
    B4 = BMP180_CalibrationData.AC4 * (unsigned long)(X3 + 32768) / (pow(2, 15));
 8003dce:	4b52      	ldr	r3, [pc, #328]	; (8003f18 <GY87_ReadBarometerPressure+0x2b4>)
 8003dd0:	88db      	ldrh	r3, [r3, #6]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fb98 	bl	8000514 <__aeabi_ui2d>
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <GY87_ReadBarometerPressure+0x2cc>)
 8003dea:	f7fc fd37 	bl	800085c <__aeabi_ddiv>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f7fc fedf 	bl	8000bb8 <__aeabi_d2uiz>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	613b      	str	r3, [r7, #16]
    B7 = ((unsigned long)UP - B3) * (50000 >> BMP180_OVERSAMPLING);
 8003dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	60fb      	str	r3, [r7, #12]

    if (B7 < 0x80000000) {
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	db06      	blt.n	8003e22 <GY87_ReadBarometerPressure+0x1be>
        pressure = (B7 * 2) / B4;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	005a      	lsls	r2, r3, #1
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e20:	e005      	b.n	8003e2e <GY87_ReadBarometerPressure+0x1ca>
    } else {
        pressure = (B7 / B4) * 2;
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    X1 = (pressure / (pow(2, 8))) * (pressure / (pow(2, 8)));
 8003e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e30:	f7fc fb80 	bl	8000534 <__aeabi_i2d>
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <GY87_ReadBarometerPressure+0x2d0>)
 8003e3a:	f7fc fd0f 	bl	800085c <__aeabi_ddiv>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4614      	mov	r4, r2
 8003e44:	461d      	mov	r5, r3
 8003e46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e48:	f7fc fb74 	bl	8000534 <__aeabi_i2d>
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	4b38      	ldr	r3, [pc, #224]	; (8003f34 <GY87_ReadBarometerPressure+0x2d0>)
 8003e52:	f7fc fd03 	bl	800085c <__aeabi_ddiv>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f7fc fbd3 	bl	8000608 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7fc fe7d 	bl	8000b68 <__aeabi_d2iz>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	623b      	str	r3, [r7, #32]
    X1 = (X1 * 3038) / (pow(2, 16));
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f640 32de 	movw	r2, #3038	; 0xbde
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc fb59 	bl	8000534 <__aeabi_i2d>
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <GY87_ReadBarometerPressure+0x2c4>)
 8003e88:	f7fc fce8 	bl	800085c <__aeabi_ddiv>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	f7fc fe68 	bl	8000b68 <__aeabi_d2iz>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	623b      	str	r3, [r7, #32]
    X2 = (-7357 * pressure) / (pow(2, 16));
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <GY87_ReadBarometerPressure+0x2d4>)
 8003ea0:	fb02 f303 	mul.w	r3, r2, r3
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fc fb45 	bl	8000534 <__aeabi_i2d>
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <GY87_ReadBarometerPressure+0x2c4>)
 8003eb0:	f7fc fcd4 	bl	800085c <__aeabi_ddiv>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7fc fe54 	bl	8000b68 <__aeabi_d2iz>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	61fb      	str	r3, [r7, #28]

    pressure = pressure + (X1 + X2 + 3791) / (pow(2, 4));
 8003ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ec6:	f7fc fb35 	bl	8000534 <__aeabi_i2d>
 8003eca:	4604      	mov	r4, r0
 8003ecc:	460d      	mov	r5, r1
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fc fb2b 	bl	8000534 <__aeabi_i2d>
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <GY87_ReadBarometerPressure+0x2d8>)
 8003ee4:	f7fc fcba 	bl	800085c <__aeabi_ddiv>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4620      	mov	r0, r4
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f7fc f9d4 	bl	800029c <__adddf3>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	f7fc fe34 	bl	8000b68 <__aeabi_d2iz>
 8003f00:	4603      	mov	r3, r0
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c

    return pressure;
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8003f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f12:	3730      	adds	r7, #48	; 0x30
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bdb0      	pop	{r4, r5, r7, pc}
 8003f18:	20000bdc 	.word	0x20000bdc
 8003f1c:	40b00000 	.word	0x40b00000
 8003f20:	40a00000 	.word	0x40a00000
 8003f24:	40c00000 	.word	0x40c00000
 8003f28:	40f00000 	.word	0x40f00000
 8003f2c:	40100000 	.word	0x40100000
 8003f30:	40e00000 	.word	0x40e00000
 8003f34:	40700000 	.word	0x40700000
 8003f38:	ffffe343 	.word	0xffffe343
 8003f3c:	40300000 	.word	0x40300000

08003f40 <GY87_ReadBarometerAltitude>:

float GY87_ReadBarometerAltitude(GY87_HandleTypeDef_t * hgy87) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

    float pressure;
    float altitude;

    pressure = GY87_ReadBarometerPressure(hgy87);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff fe8b 	bl	8003c64 <GY87_ReadBarometerPressure>
 8003f4e:	ed87 0a03 	vstr	s0, [r7, #12]

    altitude = 44330 * (1 - (pow(((float)pressure / (float)BMP180_ATMOSFERIC_PRESSURE), 0.19029495718)));
 8003f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f56:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003fc8 <GY87_ReadBarometerAltitude+0x88>
 8003f5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f5e:	ee16 0a90 	vmov	r0, s13
 8003f62:	f7fc faf9 	bl	8000558 <__aeabi_f2d>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8003fb8 <GY87_ReadBarometerAltitude+0x78>
 8003f6e:	ec43 2b10 	vmov	d0, r2, r3
 8003f72:	f00e fde5 	bl	8012b40 <pow>
 8003f76:	ec53 2b10 	vmov	r2, r3, d0
 8003f7a:	f04f 0000 	mov.w	r0, #0
 8003f7e:	4913      	ldr	r1, [pc, #76]	; (8003fcc <GY87_ReadBarometerAltitude+0x8c>)
 8003f80:	f7fc f98a 	bl	8000298 <__aeabi_dsub>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	a30c      	add	r3, pc, #48	; (adr r3, 8003fc0 <GY87_ReadBarometerAltitude+0x80>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc fb39 	bl	8000608 <__aeabi_dmul>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f7fc fe2b 	bl	8000bf8 <__aeabi_d2f>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	60bb      	str	r3, [r7, #8]

    return altitude;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	ee07 3a90 	vmov	s15, r3
}
 8003fac:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	ccd745e4 	.word	0xccd745e4
 8003fbc:	3fc85b95 	.word	0x3fc85b95
 8003fc0:	00000000 	.word	0x00000000
 8003fc4:	40e5a540 	.word	0x40e5a540
 8003fc8:	47c5e680 	.word	0x47c5e680
 8003fcc:	3ff00000 	.word	0x3ff00000

08003fd0 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

    /* BEGIN MODIFY 1 */
    CDC_Transmit_FS(string, strlen((const char *)string));
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fc f951 	bl	8000280 <strlen>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f00b fad1 	bl	800f58c <CDC_Transmit_FS>
    /* END MODIFY 1 */
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b0c2      	sub	sp, #264	; 0x108
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004002:	6018      	str	r0, [r3, #0]
 8004004:	460a      	mov	r2, r1
 8004006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800400a:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800400e:	701a      	strb	r2, [r3, #0]

    /* Check parameters */
    if (NULL == message) {
 8004010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <LOG+0x2e>
        return false;
 800401e:	2300      	movs	r3, #0
 8004020:	e063      	b.n	80040ea <LOG+0xf6>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8004022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004026:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d901      	bls.n	8004034 <LOG+0x40>
        return false;
 8004030:	2300      	movs	r3, #0
 8004032:	e05a      	b.n	80040ea <LOG+0xf6>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8004034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004038:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	3304      	adds	r3, #4
 8004042:	22fc      	movs	r2, #252	; 0xfc
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f00c fd27 	bl	8010a9a <memset>

    if (LOG_INFORMATION == logType) {
 800404c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004050:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <LOG+0x78>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <LOG+0x100>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f107 0308 	add.w	r3, r7, #8
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f00c fd20 	bl	8010aaa <strcat>
 800406a:	e02e      	b.n	80040ca <LOG+0xd6>
    } else if (LOG_DEBUGGING == logType) {
 800406c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004070:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d108      	bne.n	800408c <LOG+0x98>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <LOG+0x104>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f00c fd10 	bl	8010aaa <strcat>
 800408a:	e01e      	b.n	80040ca <LOG+0xd6>
    } else if (LOG_WARNING == logType) {
 800408c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004090:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d108      	bne.n	80040ac <LOG+0xb8>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <LOG+0x108>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f107 0308 	add.w	r3, r7, #8
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f00c fd00 	bl	8010aaa <strcat>
 80040aa:	e00e      	b.n	80040ca <LOG+0xd6>
    } else if (LOG_ERROR == logType) {
 80040ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040b0:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d107      	bne.n	80040ca <LOG+0xd6>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <LOG+0x10c>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	4611      	mov	r1, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f00c fcf0 	bl	8010aaa <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 80040ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040d2:	f107 0208 	add.w	r2, r7, #8
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	4610      	mov	r0, r2
 80040da:	f00c fce6 	bl	8010aaa <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 80040de:	f107 0308 	add.w	r3, r7, #8
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ff74 	bl	8003fd0 <USB_Write>

    return true;
 80040e8:	2301      	movs	r3, #1
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000018 	.word	0x20000018
 80040f8:	2000001c 	.word	0x2000001c
 80040fc:	20000020 	.word	0x20000020
 8004100:	20000024 	.word	0x20000024

08004104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_Init+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <HAL_Init+0x40>)
 800410e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_Init+0x40>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <HAL_Init+0x40>)
 800411a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800411e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <HAL_Init+0x40>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <HAL_Init+0x40>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800412c:	2003      	movs	r0, #3
 800412e:	f000 fd13 	bl	8004b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004132:	200f      	movs	r0, #15
 8004134:	f000 f808 	bl	8004148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004138:	f7fd ff3e 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40023c00 	.word	0x40023c00

08004148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_InitTick+0x54>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_InitTick+0x58>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800415e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fd2f 	bl	8004bca <HAL_SYSTICK_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e00e      	b.n	8004194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d80a      	bhi.n	8004192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800417c:	2200      	movs	r2, #0
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004184:	f000 fcf3 	bl	8004b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <HAL_InitTick+0x5c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000004 	.word	0x20000004
 80041a0:	2000002c 	.word	0x2000002c
 80041a4:	20000028 	.word	0x20000028

080041a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_IncTick+0x20>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_IncTick+0x24>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <HAL_IncTick+0x24>)
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2000002c 	.word	0x2000002c
 80041cc:	20000c18 	.word	0x20000c18

080041d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return uwTick;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_GetTick+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000c18 	.word	0x20000c18

080041e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7ff ffee 	bl	80041d0 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004200:	d005      	beq.n	800420e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_Delay+0x44>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800420e:	bf00      	nop
 8004210:	f7ff ffde 	bl	80041d0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d8f7      	bhi.n	8004210 <HAL_Delay+0x28>
  {
  }
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	2000002c 	.word	0x2000002c

08004230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e033      	b.n	80042ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd fede 	bl	8002010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d118      	bne.n	80042a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004276:	f023 0302 	bic.w	r3, r3, #2
 800427a:	f043 0202 	orr.w	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa86 	bl	8004794 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f023 0303 	bic.w	r3, r3, #3
 8004296:	f043 0201 	orr.w	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
 800429e:	e001      	b.n	80042a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_ADC_Start+0x1a>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e097      	b.n	8004402 <HAL_ADC_Start+0x14a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d018      	beq.n	800431a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042f8:	4b45      	ldr	r3, [pc, #276]	; (8004410 <HAL_ADC_Start+0x158>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a45      	ldr	r2, [pc, #276]	; (8004414 <HAL_ADC_Start+0x15c>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0c9a      	lsrs	r2, r3, #18
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800430c:	e002      	b.n	8004314 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3b01      	subs	r3, #1
 8004312:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f9      	bne.n	800430e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d15f      	bne.n	80043e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004352:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d106      	bne.n	8004376 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	f023 0206 	bic.w	r2, r3, #6
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	645a      	str	r2, [r3, #68]	; 0x44
 8004374:	e002      	b.n	800437c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_ADC_Start+0x160>)
 8004386:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004390:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d129      	bne.n	8004400 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	e020      	b.n	8004400 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_ADC_Start+0x164>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d11b      	bne.n	8004400 <HAL_ADC_Start+0x148>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d114      	bne.n	8004400 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	e00b      	b.n	8004400 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	f043 0210 	orr.w	r2, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20000004 	.word	0x20000004
 8004414:	431bde83 	.word	0x431bde83
 8004418:	40012300 	.word	0x40012300
 800441c:	40012000 	.word	0x40012000

08004420 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d113      	bne.n	8004466 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444c:	d10b      	bne.n	8004466 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e063      	b.n	800452e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004466:	f7ff feb3 	bl	80041d0 <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800446c:	e021      	b.n	80044b2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004474:	d01d      	beq.n	80044b2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <HAL_ADC_PollForConversion+0x6c>
 800447c:	f7ff fea8 	bl	80041d0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d212      	bcs.n	80044b2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b02      	cmp	r3, #2
 8004498:	d00b      	beq.n	80044b2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e03d      	b.n	800452e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d1d6      	bne.n	800446e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0212 	mvn.w	r2, #18
 80044c8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d123      	bne.n	800452c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d11f      	bne.n	800452c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004504:	2b00      	cmp	r3, #0
 8004506:	d111      	bne.n	800452c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_ADC_ConfigChannel+0x1c>
 8004568:	2302      	movs	r3, #2
 800456a:	e105      	b.n	8004778 <HAL_ADC_ConfigChannel+0x228>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b09      	cmp	r3, #9
 800457a:	d925      	bls.n	80045c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68d9      	ldr	r1, [r3, #12]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	4613      	mov	r3, r2
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	4413      	add	r3, r2
 8004590:	3b1e      	subs	r3, #30
 8004592:	2207      	movs	r2, #7
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43da      	mvns	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	400a      	ands	r2, r1
 80045a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68d9      	ldr	r1, [r3, #12]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	4618      	mov	r0, r3
 80045b4:	4603      	mov	r3, r0
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4403      	add	r3, r0
 80045ba:	3b1e      	subs	r3, #30
 80045bc:	409a      	lsls	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	e022      	b.n	800460e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6919      	ldr	r1, [r3, #16]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	4613      	mov	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4413      	add	r3, r2
 80045dc:	2207      	movs	r2, #7
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43da      	mvns	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	400a      	ands	r2, r1
 80045ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6919      	ldr	r1, [r3, #16]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4618      	mov	r0, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4403      	add	r3, r0
 8004604:	409a      	lsls	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b06      	cmp	r3, #6
 8004614:	d824      	bhi.n	8004660 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	3b05      	subs	r3, #5
 8004628:	221f      	movs	r2, #31
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43da      	mvns	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	400a      	ands	r2, r1
 8004636:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	4618      	mov	r0, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	3b05      	subs	r3, #5
 8004652:	fa00 f203 	lsl.w	r2, r0, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	635a      	str	r2, [r3, #52]	; 0x34
 800465e:	e04c      	b.n	80046fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b0c      	cmp	r3, #12
 8004666:	d824      	bhi.n	80046b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	3b23      	subs	r3, #35	; 0x23
 800467a:	221f      	movs	r2, #31
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43da      	mvns	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	400a      	ands	r2, r1
 8004688:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	4618      	mov	r0, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	3b23      	subs	r3, #35	; 0x23
 80046a4:	fa00 f203 	lsl.w	r2, r0, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
 80046b0:	e023      	b.n	80046fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	3b41      	subs	r3, #65	; 0x41
 80046c4:	221f      	movs	r2, #31
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	400a      	ands	r2, r1
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	4618      	mov	r0, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	3b41      	subs	r3, #65	; 0x41
 80046ee:	fa00 f203 	lsl.w	r2, r0, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_ADC_ConfigChannel+0x234>)
 80046fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a21      	ldr	r2, [pc, #132]	; (8004788 <HAL_ADC_ConfigChannel+0x238>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d109      	bne.n	800471c <HAL_ADC_ConfigChannel+0x1cc>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b12      	cmp	r3, #18
 800470e:	d105      	bne.n	800471c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_ADC_ConfigChannel+0x238>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d123      	bne.n	800476e <HAL_ADC_ConfigChannel+0x21e>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b10      	cmp	r3, #16
 800472c:	d003      	beq.n	8004736 <HAL_ADC_ConfigChannel+0x1e6>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b11      	cmp	r3, #17
 8004734:	d11b      	bne.n	800476e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b10      	cmp	r3, #16
 8004748:	d111      	bne.n	800476e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_ADC_ConfigChannel+0x23c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a10      	ldr	r2, [pc, #64]	; (8004790 <HAL_ADC_ConfigChannel+0x240>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	0c9a      	lsrs	r2, r3, #18
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004760:	e002      	b.n	8004768 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	3b01      	subs	r3, #1
 8004766:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f9      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40012300 	.word	0x40012300
 8004788:	40012000 	.word	0x40012000
 800478c:	20000004 	.word	0x20000004
 8004790:	431bde83 	.word	0x431bde83

08004794 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800479c:	4b79      	ldr	r3, [pc, #484]	; (8004984 <ADC_Init+0x1f0>)
 800479e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80047ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	4a58      	ldr	r2, [pc, #352]	; (8004988 <ADC_Init+0x1f4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800483a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800485c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6899      	ldr	r1, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	e00f      	b.n	8004892 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004890:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0202 	bic.w	r2, r2, #2
 80048a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6899      	ldr	r1, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7e1b      	ldrb	r3, [r3, #24]
 80048ac:	005a      	lsls	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	3b01      	subs	r3, #1
 80048ec:	035a      	lsls	r2, r3, #13
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	e007      	b.n	8004908 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	3b01      	subs	r3, #1
 8004924:	051a      	lsls	r2, r3, #20
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800493c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6899      	ldr	r1, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800494a:	025a      	lsls	r2, r3, #9
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004962:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6899      	ldr	r1, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	029a      	lsls	r2, r3, #10
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	609a      	str	r2, [r3, #8]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40012300 	.word	0x40012300
 8004988:	0f000001 	.word	0x0f000001

0800498c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <__NVIC_SetPriorityGrouping+0x44>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049a8:	4013      	ands	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049be:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <__NVIC_SetPriorityGrouping+0x44>)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	60d3      	str	r3, [r2, #12]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <__NVIC_GetPriorityGrouping+0x18>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	f003 0307 	and.w	r3, r3, #7
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	db0b      	blt.n	8004a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	f003 021f 	and.w	r2, r3, #31
 8004a08:	4907      	ldr	r1, [pc, #28]	; (8004a28 <__NVIC_EnableIRQ+0x38>)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	2001      	movs	r0, #1
 8004a12:	fa00 f202 	lsl.w	r2, r0, r2
 8004a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000e100 	.word	0xe000e100

08004a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	6039      	str	r1, [r7, #0]
 8004a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	db0a      	blt.n	8004a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	490c      	ldr	r1, [pc, #48]	; (8004a78 <__NVIC_SetPriority+0x4c>)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	0112      	lsls	r2, r2, #4
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	440b      	add	r3, r1
 8004a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a54:	e00a      	b.n	8004a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	4908      	ldr	r1, [pc, #32]	; (8004a7c <__NVIC_SetPriority+0x50>)
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	3b04      	subs	r3, #4
 8004a64:	0112      	lsls	r2, r2, #4
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	440b      	add	r3, r1
 8004a6a:	761a      	strb	r2, [r3, #24]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	e000e100 	.word	0xe000e100
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b089      	sub	sp, #36	; 0x24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f1c3 0307 	rsb	r3, r3, #7
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	bf28      	it	cs
 8004a9e:	2304      	movcs	r3, #4
 8004aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d902      	bls.n	8004ab0 <NVIC_EncodePriority+0x30>
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3b03      	subs	r3, #3
 8004aae:	e000      	b.n	8004ab2 <NVIC_EncodePriority+0x32>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43da      	mvns	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad2:	43d9      	mvns	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	4313      	orrs	r3, r2
         );
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3724      	adds	r7, #36	; 0x24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004aec:	f3bf 8f4f 	dsb	sy
}
 8004af0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <__NVIC_SystemReset+0x24>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004afa:	4904      	ldr	r1, [pc, #16]	; (8004b0c <__NVIC_SystemReset+0x24>)
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <__NVIC_SystemReset+0x28>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b02:	f3bf 8f4f 	dsb	sy
}
 8004b06:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004b08:	bf00      	nop
 8004b0a:	e7fd      	b.n	8004b08 <__NVIC_SystemReset+0x20>
 8004b0c:	e000ed00 	.word	0xe000ed00
 8004b10:	05fa0004 	.word	0x05fa0004

08004b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b24:	d301      	bcc.n	8004b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b26:	2301      	movs	r3, #1
 8004b28:	e00f      	b.n	8004b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <SysTick_Config+0x40>)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b32:	210f      	movs	r1, #15
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b38:	f7ff ff78 	bl	8004a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <SysTick_Config+0x40>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b42:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <SysTick_Config+0x40>)
 8004b44:	2207      	movs	r2, #7
 8004b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	e000e010 	.word	0xe000e010

08004b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ff13 	bl	800498c <__NVIC_SetPriorityGrouping>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b80:	f7ff ff28 	bl	80049d4 <__NVIC_GetPriorityGrouping>
 8004b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	6978      	ldr	r0, [r7, #20]
 8004b8c:	f7ff ff78 	bl	8004a80 <NVIC_EncodePriority>
 8004b90:	4602      	mov	r2, r0
 8004b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff47 	bl	8004a2c <__NVIC_SetPriority>
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff1b 	bl	80049f0 <__NVIC_EnableIRQ>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004bc6:	f7ff ff8f 	bl	8004ae8 <__NVIC_SystemReset>

08004bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff ff9e 	bl	8004b14 <SysTick_Config>
 8004bd8:	4603      	mov	r3, r0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bf0:	f7ff faee 	bl	80041d0 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e099      	b.n	8004d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0201 	bic.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c20:	e00f      	b.n	8004c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c22:	f7ff fad5 	bl	80041d0 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b05      	cmp	r3, #5
 8004c2e:	d908      	bls.n	8004c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2203      	movs	r2, #3
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e078      	b.n	8004d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e8      	bne.n	8004c22 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <HAL_DMA_Init+0x158>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d107      	bne.n	8004cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 0307 	bic.w	r3, r3, #7
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d117      	bne.n	8004d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00e      	beq.n	8004d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f8e5 	bl	8004eb8 <DMA_CheckFifoParam>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2240      	movs	r2, #64	; 0x40
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e016      	b.n	8004d34 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f89c 	bl	8004e4c <DMA_CalcBaseAndBitshift>
 8004d14:	4603      	mov	r3, r0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1c:	223f      	movs	r2, #63	; 0x3f
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	f010803f 	.word	0xf010803f

08004d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_DMA_Start_IT+0x26>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e040      	b.n	8004de8 <HAL_DMA_Start_IT+0xa8>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d12f      	bne.n	8004dda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f82e 	bl	8004df0 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d98:	223f      	movs	r2, #63	; 0x3f
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0216 	orr.w	r2, r2, #22
 8004dae:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0208 	orr.w	r2, r2, #8
 8004dc6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e005      	b.n	8004de6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
 8004de4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d108      	bne.n	8004e30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e2e:	e007      	b.n	8004e40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	3b10      	subs	r3, #16
 8004e5c:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <DMA_CalcBaseAndBitshift+0x64>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <DMA_CalcBaseAndBitshift+0x68>)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d909      	bls.n	8004e8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	1d1a      	adds	r2, r3, #4
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	659a      	str	r2, [r3, #88]	; 0x58
 8004e8c:	e007      	b.n	8004e9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	aaaaaaab 	.word	0xaaaaaaab
 8004eb4:	080141ac 	.word	0x080141ac

08004eb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d11f      	bne.n	8004f12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d856      	bhi.n	8004f86 <DMA_CheckFifoParam+0xce>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <DMA_CheckFifoParam+0x28>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f03 	.word	0x08004f03
 8004ee8:	08004ef1 	.word	0x08004ef1
 8004eec:	08004f87 	.word	0x08004f87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d046      	beq.n	8004f8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f00:	e043      	b.n	8004f8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f0a:	d140      	bne.n	8004f8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f10:	e03d      	b.n	8004f8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1a:	d121      	bne.n	8004f60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d837      	bhi.n	8004f92 <DMA_CheckFifoParam+0xda>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <DMA_CheckFifoParam+0x70>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f3f 	.word	0x08004f3f
 8004f30:	08004f39 	.word	0x08004f39
 8004f34:	08004f51 	.word	0x08004f51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3c:	e030      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d025      	beq.n	8004f96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f4e:	e022      	b.n	8004f96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f58:	d11f      	bne.n	8004f9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f5e:	e01c      	b.n	8004f9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d903      	bls.n	8004f6e <DMA_CheckFifoParam+0xb6>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d003      	beq.n	8004f74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f6c:	e018      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
      break;
 8004f72:	e015      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00e      	beq.n	8004f9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      break;
 8004f84:	e00b      	b.n	8004f9e <DMA_CheckFifoParam+0xe6>
      break;
 8004f86:	bf00      	nop
 8004f88:	e00a      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e008      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e006      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e004      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8004f96:	bf00      	nop
 8004f98:	e002      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8004f9e:	bf00      	nop
    }
  }

  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop

08004fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b089      	sub	sp, #36	; 0x24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	e159      	b.n	8005280 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fcc:	2201      	movs	r2, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	f040 8148 	bne.w	800527a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d005      	beq.n	8005002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d130      	bne.n	8005064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	2203      	movs	r2, #3
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005038:	2201      	movs	r2, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 0201 	and.w	r2, r3, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d017      	beq.n	80050a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	2203      	movs	r2, #3
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d123      	bne.n	80050f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	08da      	lsrs	r2, r3, #3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3208      	adds	r2, #8
 80050b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	220f      	movs	r2, #15
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	08da      	lsrs	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3208      	adds	r2, #8
 80050ee:	69b9      	ldr	r1, [r7, #24]
 80050f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2203      	movs	r2, #3
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0203 	and.w	r2, r3, #3
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a2 	beq.w	800527a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	4b57      	ldr	r3, [pc, #348]	; (8005298 <HAL_GPIO_Init+0x2e8>)
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	4a56      	ldr	r2, [pc, #344]	; (8005298 <HAL_GPIO_Init+0x2e8>)
 8005140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005144:	6453      	str	r3, [r2, #68]	; 0x44
 8005146:	4b54      	ldr	r3, [pc, #336]	; (8005298 <HAL_GPIO_Init+0x2e8>)
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005152:	4a52      	ldr	r2, [pc, #328]	; (800529c <HAL_GPIO_Init+0x2ec>)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	089b      	lsrs	r3, r3, #2
 8005158:	3302      	adds	r3, #2
 800515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	220f      	movs	r2, #15
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4013      	ands	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a49      	ldr	r2, [pc, #292]	; (80052a0 <HAL_GPIO_Init+0x2f0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d019      	beq.n	80051b2 <HAL_GPIO_Init+0x202>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a48      	ldr	r2, [pc, #288]	; (80052a4 <HAL_GPIO_Init+0x2f4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <HAL_GPIO_Init+0x1fe>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a47      	ldr	r2, [pc, #284]	; (80052a8 <HAL_GPIO_Init+0x2f8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00d      	beq.n	80051aa <HAL_GPIO_Init+0x1fa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a46      	ldr	r2, [pc, #280]	; (80052ac <HAL_GPIO_Init+0x2fc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <HAL_GPIO_Init+0x1f6>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a45      	ldr	r2, [pc, #276]	; (80052b0 <HAL_GPIO_Init+0x300>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <HAL_GPIO_Init+0x1f2>
 800519e:	2304      	movs	r3, #4
 80051a0:	e008      	b.n	80051b4 <HAL_GPIO_Init+0x204>
 80051a2:	2307      	movs	r3, #7
 80051a4:	e006      	b.n	80051b4 <HAL_GPIO_Init+0x204>
 80051a6:	2303      	movs	r3, #3
 80051a8:	e004      	b.n	80051b4 <HAL_GPIO_Init+0x204>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e002      	b.n	80051b4 <HAL_GPIO_Init+0x204>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <HAL_GPIO_Init+0x204>
 80051b2:	2300      	movs	r3, #0
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	f002 0203 	and.w	r2, r2, #3
 80051ba:	0092      	lsls	r2, r2, #2
 80051bc:	4093      	lsls	r3, r2
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051c4:	4935      	ldr	r1, [pc, #212]	; (800529c <HAL_GPIO_Init+0x2ec>)
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	3302      	adds	r3, #2
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051d2:	4b38      	ldr	r3, [pc, #224]	; (80052b4 <HAL_GPIO_Init+0x304>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051f6:	4a2f      	ldr	r2, [pc, #188]	; (80052b4 <HAL_GPIO_Init+0x304>)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051fc:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <HAL_GPIO_Init+0x304>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005220:	4a24      	ldr	r2, [pc, #144]	; (80052b4 <HAL_GPIO_Init+0x304>)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005226:	4b23      	ldr	r3, [pc, #140]	; (80052b4 <HAL_GPIO_Init+0x304>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800524a:	4a1a      	ldr	r2, [pc, #104]	; (80052b4 <HAL_GPIO_Init+0x304>)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005250:	4b18      	ldr	r3, [pc, #96]	; (80052b4 <HAL_GPIO_Init+0x304>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	43db      	mvns	r3, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4013      	ands	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005274:	4a0f      	ldr	r2, [pc, #60]	; (80052b4 <HAL_GPIO_Init+0x304>)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3301      	adds	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b0f      	cmp	r3, #15
 8005284:	f67f aea2 	bls.w	8004fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	3724      	adds	r7, #36	; 0x24
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40023800 	.word	0x40023800
 800529c:	40013800 	.word	0x40013800
 80052a0:	40020000 	.word	0x40020000
 80052a4:	40020400 	.word	0x40020400
 80052a8:	40020800 	.word	0x40020800
 80052ac:	40020c00 	.word	0x40020c00
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40013c00 	.word	0x40013c00

080052b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	887b      	ldrh	r3, [r7, #2]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
 80052d4:	e001      	b.n	80052da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
 80052f4:	4613      	mov	r3, r2
 80052f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052f8:	787b      	ldrb	r3, [r7, #1]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005304:	e003      	b.n	800530e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005306:	887b      	ldrh	r3, [r7, #2]
 8005308:	041a      	lsls	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	619a      	str	r2, [r3, #24]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800532c:	887a      	ldrh	r2, [r7, #2]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4013      	ands	r3, r2
 8005332:	041a      	lsls	r2, r3, #16
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	43d9      	mvns	r1, r3
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	400b      	ands	r3, r1
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	619a      	str	r2, [r3, #24]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e12b      	b.n	80055ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc fe8e 	bl	8002098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053b4:	f002 fe38 	bl	8008028 <HAL_RCC_GetPCLK1Freq>
 80053b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4a81      	ldr	r2, [pc, #516]	; (80055c4 <HAL_I2C_Init+0x274>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d807      	bhi.n	80053d4 <HAL_I2C_Init+0x84>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a80      	ldr	r2, [pc, #512]	; (80055c8 <HAL_I2C_Init+0x278>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	bf94      	ite	ls
 80053cc:	2301      	movls	r3, #1
 80053ce:	2300      	movhi	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e006      	b.n	80053e2 <HAL_I2C_Init+0x92>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a7d      	ldr	r2, [pc, #500]	; (80055cc <HAL_I2C_Init+0x27c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	bf94      	ite	ls
 80053dc:	2301      	movls	r3, #1
 80053de:	2300      	movhi	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0e7      	b.n	80055ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a78      	ldr	r2, [pc, #480]	; (80055d0 <HAL_I2C_Init+0x280>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0c9b      	lsrs	r3, r3, #18
 80053f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4a6a      	ldr	r2, [pc, #424]	; (80055c4 <HAL_I2C_Init+0x274>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d802      	bhi.n	8005424 <HAL_I2C_Init+0xd4>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	3301      	adds	r3, #1
 8005422:	e009      	b.n	8005438 <HAL_I2C_Init+0xe8>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	4a69      	ldr	r2, [pc, #420]	; (80055d4 <HAL_I2C_Init+0x284>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	099b      	lsrs	r3, r3, #6
 8005436:	3301      	adds	r3, #1
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	430b      	orrs	r3, r1
 800543e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800544a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	495c      	ldr	r1, [pc, #368]	; (80055c4 <HAL_I2C_Init+0x274>)
 8005454:	428b      	cmp	r3, r1
 8005456:	d819      	bhi.n	800548c <HAL_I2C_Init+0x13c>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1e59      	subs	r1, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	fbb1 f3f3 	udiv	r3, r1, r3
 8005466:	1c59      	adds	r1, r3, #1
 8005468:	f640 73fc 	movw	r3, #4092	; 0xffc
 800546c:	400b      	ands	r3, r1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_I2C_Init+0x138>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1e59      	subs	r1, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005480:	3301      	adds	r3, #1
 8005482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005486:	e051      	b.n	800552c <HAL_I2C_Init+0x1dc>
 8005488:	2304      	movs	r3, #4
 800548a:	e04f      	b.n	800552c <HAL_I2C_Init+0x1dc>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d111      	bne.n	80054b8 <HAL_I2C_Init+0x168>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1e58      	subs	r0, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	440b      	add	r3, r1
 80054a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054a6:	3301      	adds	r3, #1
 80054a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e012      	b.n	80054de <HAL_I2C_Init+0x18e>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1e58      	subs	r0, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6859      	ldr	r1, [r3, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	0099      	lsls	r1, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ce:	3301      	adds	r3, #1
 80054d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_Init+0x196>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e022      	b.n	800552c <HAL_I2C_Init+0x1dc>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10e      	bne.n	800550c <HAL_I2C_Init+0x1bc>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1e58      	subs	r0, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6859      	ldr	r1, [r3, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	440b      	add	r3, r1
 80054fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005500:	3301      	adds	r3, #1
 8005502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550a:	e00f      	b.n	800552c <HAL_I2C_Init+0x1dc>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1e58      	subs	r0, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6859      	ldr	r1, [r3, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	0099      	lsls	r1, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005522:	3301      	adds	r3, #1
 8005524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	6809      	ldr	r1, [r1, #0]
 8005530:	4313      	orrs	r3, r2
 8005532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69da      	ldr	r2, [r3, #28]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800555a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6911      	ldr	r1, [r2, #16]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68d2      	ldr	r2, [r2, #12]
 8005566:	4311      	orrs	r1, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	430b      	orrs	r3, r1
 800556e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	000186a0 	.word	0x000186a0
 80055c8:	001e847f 	.word	0x001e847f
 80055cc:	003d08ff 	.word	0x003d08ff
 80055d0:	431bde83 	.word	0x431bde83
 80055d4:	10624dd3 	.word	0x10624dd3

080055d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	4608      	mov	r0, r1
 80055e2:	4611      	mov	r1, r2
 80055e4:	461a      	mov	r2, r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	817b      	strh	r3, [r7, #10]
 80055ea:	460b      	mov	r3, r1
 80055ec:	813b      	strh	r3, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055f2:	f7fe fded 	bl	80041d0 <HAL_GetTick>
 80055f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b20      	cmp	r3, #32
 8005602:	f040 80d9 	bne.w	80057b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	2319      	movs	r3, #25
 800560c:	2201      	movs	r2, #1
 800560e:	496d      	ldr	r1, [pc, #436]	; (80057c4 <HAL_I2C_Mem_Write+0x1ec>)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fc7f 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
 800561e:	e0cc      	b.n	80057ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_I2C_Mem_Write+0x56>
 800562a:	2302      	movs	r3, #2
 800562c:	e0c5      	b.n	80057ba <HAL_I2C_Mem_Write+0x1e2>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b01      	cmp	r3, #1
 8005642:	d007      	beq.n	8005654 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2221      	movs	r2, #33	; 0x21
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2240      	movs	r2, #64	; 0x40
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a3a      	ldr	r2, [r7, #32]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a4d      	ldr	r2, [pc, #308]	; (80057c8 <HAL_I2C_Mem_Write+0x1f0>)
 8005694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005696:	88f8      	ldrh	r0, [r7, #6]
 8005698:	893a      	ldrh	r2, [r7, #8]
 800569a:	8979      	ldrh	r1, [r7, #10]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	4603      	mov	r3, r0
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fab6 	bl	8005c18 <I2C_RequestMemoryWrite>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d052      	beq.n	8005758 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e081      	b.n	80057ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fd00 	bl	80060c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d107      	bne.n	80056de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e06b      	b.n	80057ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b04      	cmp	r3, #4
 800571e:	d11b      	bne.n	8005758 <HAL_I2C_Mem_Write+0x180>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	d017      	beq.n	8005758 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	781a      	ldrb	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1aa      	bne.n	80056b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fcec 	bl	8006142 <I2C_WaitOnBTFFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	2b04      	cmp	r3, #4
 8005776:	d107      	bne.n	8005788 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005786:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e016      	b.n	80057ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e000      	b.n	80057ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
  }
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	00100002 	.word	0x00100002
 80057c8:	ffff0000 	.word	0xffff0000

080057cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08c      	sub	sp, #48	; 0x30
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	461a      	mov	r2, r3
 80057da:	4603      	mov	r3, r0
 80057dc:	817b      	strh	r3, [r7, #10]
 80057de:	460b      	mov	r3, r1
 80057e0:	813b      	strh	r3, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057e6:	f7fe fcf3 	bl	80041d0 <HAL_GetTick>
 80057ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	f040 8208 	bne.w	8005c0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2319      	movs	r3, #25
 8005800:	2201      	movs	r2, #1
 8005802:	497b      	ldr	r1, [pc, #492]	; (80059f0 <HAL_I2C_Mem_Read+0x224>)
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fb85 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
 8005812:	e1fb      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_I2C_Mem_Read+0x56>
 800581e:	2302      	movs	r3, #2
 8005820:	e1f4      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b01      	cmp	r3, #1
 8005836:	d007      	beq.n	8005848 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005856:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2222      	movs	r2, #34	; 0x22
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2240      	movs	r2, #64	; 0x40
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4a5b      	ldr	r2, [pc, #364]	; (80059f4 <HAL_I2C_Mem_Read+0x228>)
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800588a:	88f8      	ldrh	r0, [r7, #6]
 800588c:	893a      	ldrh	r2, [r7, #8]
 800588e:	8979      	ldrh	r1, [r7, #10]
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	9301      	str	r3, [sp, #4]
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	4603      	mov	r3, r0
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fa52 	bl	8005d44 <I2C_RequestMemoryRead>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e1b0      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b2:	2300      	movs	r3, #0
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e184      	b.n	8005be4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d11b      	bne.n	800591a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e164      	b.n	8005be4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591e:	2b02      	cmp	r3, #2
 8005920:	d11b      	bne.n	800595a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005930:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005942:	2300      	movs	r3, #0
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	e144      	b.n	8005be4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005970:	e138      	b.n	8005be4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005976:	2b03      	cmp	r3, #3
 8005978:	f200 80f1 	bhi.w	8005b5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005980:	2b01      	cmp	r3, #1
 8005982:	d123      	bne.n	80059cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fc1b 	bl	80061c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e139      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059ca:	e10b      	b.n	8005be4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d14e      	bne.n	8005a72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2200      	movs	r2, #0
 80059dc:	4906      	ldr	r1, [pc, #24]	; (80059f8 <HAL_I2C_Mem_Read+0x22c>)
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fa98 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e10e      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
 80059ee:	bf00      	nop
 80059f0:	00100002 	.word	0x00100002
 80059f4:	ffff0000 	.word	0xffff0000
 80059f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a70:	e0b8      	b.n	8005be4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4966      	ldr	r1, [pc, #408]	; (8005c14 <HAL_I2C_Mem_Read+0x448>)
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 fa49 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0bf      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	494f      	ldr	r1, [pc, #316]	; (8005c14 <HAL_I2C_Mem_Read+0x448>)
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 fa1b 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e091      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b5c:	e042      	b.n	8005be4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fb2e 	bl	80061c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e04c      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d118      	bne.n	8005be4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f47f aec2 	bne.w	8005972 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e000      	b.n	8005c0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c0a:	2302      	movs	r3, #2
  }
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3728      	adds	r7, #40	; 0x28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	00010004 	.word	0x00010004

08005c18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	461a      	mov	r2, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	817b      	strh	r3, [r7, #10]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	813b      	strh	r3, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f960 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00d      	beq.n	8005c76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c68:	d103      	bne.n	8005c72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e05f      	b.n	8005d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c76:	897b      	ldrh	r3, [r7, #10]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	6a3a      	ldr	r2, [r7, #32]
 8005c8a:	492d      	ldr	r1, [pc, #180]	; (8005d40 <I2C_RequestMemoryWrite+0x128>)
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f998 	bl	8005fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e04c      	b.n	8005d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb4:	6a39      	ldr	r1, [r7, #32]
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fa02 	bl	80060c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00d      	beq.n	8005cde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d107      	bne.n	8005cda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e02b      	b.n	8005d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d105      	bne.n	8005cf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ce4:	893b      	ldrh	r3, [r7, #8]
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	611a      	str	r2, [r3, #16]
 8005cee:	e021      	b.n	8005d34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cf0:	893b      	ldrh	r3, [r7, #8]
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d00:	6a39      	ldr	r1, [r7, #32]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f9dc 	bl	80060c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00d      	beq.n	8005d2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d107      	bne.n	8005d26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e005      	b.n	8005d36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d2a:	893b      	ldrh	r3, [r7, #8]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	00010002 	.word	0x00010002

08005d44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4611      	mov	r1, r2
 8005d50:	461a      	mov	r2, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	817b      	strh	r3, [r7, #10]
 8005d56:	460b      	mov	r3, r1
 8005d58:	813b      	strh	r3, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f8c2 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da4:	d103      	bne.n	8005dae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0aa      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005db2:	897b      	ldrh	r3, [r7, #10]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	4952      	ldr	r1, [pc, #328]	; (8005f10 <I2C_RequestMemoryRead+0x1cc>)
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f8fa 	bl	8005fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e097      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df0:	6a39      	ldr	r1, [r7, #32]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f964 	bl	80060c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d107      	bne.n	8005e16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e076      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d105      	bne.n	8005e2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e20:	893b      	ldrh	r3, [r7, #8]
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	611a      	str	r2, [r3, #16]
 8005e2a:	e021      	b.n	8005e70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e2c:	893b      	ldrh	r3, [r7, #8]
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	6a39      	ldr	r1, [r7, #32]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f93e 	bl	80060c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d107      	bne.n	8005e62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e050      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e66:	893b      	ldrh	r3, [r7, #8]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	6a39      	ldr	r1, [r7, #32]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f923 	bl	80060c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00d      	beq.n	8005e9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d107      	bne.n	8005e98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e035      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f82b 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed2:	d103      	bne.n	8005edc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e013      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ee0:	897b      	ldrh	r3, [r7, #10]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	6a3a      	ldr	r2, [r7, #32]
 8005ef4:	4906      	ldr	r1, [pc, #24]	; (8005f10 <I2C_RequestMemoryRead+0x1cc>)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f863 	bl	8005fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	00010002 	.word	0x00010002

08005f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f24:	e025      	b.n	8005f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f2c:	d021      	beq.n	8005f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2e:	f7fe f94f 	bl	80041d0 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d116      	bne.n	8005f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e023      	b.n	8005fba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	0c1b      	lsrs	r3, r3, #16
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10d      	bne.n	8005f98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	43da      	mvns	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	e00c      	b.n	8005fb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	43da      	mvns	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bf0c      	ite	eq
 8005faa:	2301      	moveq	r3, #1
 8005fac:	2300      	movne	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d0b6      	beq.n	8005f26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fd0:	e051      	b.n	8006076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe0:	d123      	bne.n	800602a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ffa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f043 0204 	orr.w	r2, r3, #4
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e046      	b.n	80060b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006030:	d021      	beq.n	8006076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006032:	f7fe f8cd 	bl	80041d0 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	429a      	cmp	r2, r3
 8006040:	d302      	bcc.n	8006048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d116      	bne.n	8006076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0220 	orr.w	r2, r3, #32
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e020      	b.n	80060b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	0c1b      	lsrs	r3, r3, #16
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d10c      	bne.n	800609a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	43da      	mvns	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	bf14      	ite	ne
 8006092:	2301      	movne	r3, #1
 8006094:	2300      	moveq	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	e00b      	b.n	80060b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	43da      	mvns	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4013      	ands	r3, r2
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d18d      	bne.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060cc:	e02d      	b.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f8ce 	bl	8006270 <I2C_IsAcknowledgeFailed>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e02d      	b.n	800613a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e4:	d021      	beq.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fe f873 	bl	80041d0 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d116      	bne.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f043 0220 	orr.w	r2, r3, #32
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e007      	b.n	800613a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d1ca      	bne.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800614e:	e02d      	b.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f88d 	bl	8006270 <I2C_IsAcknowledgeFailed>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e02d      	b.n	80061bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006166:	d021      	beq.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006168:	f7fe f832 	bl	80041d0 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	429a      	cmp	r2, r3
 8006176:	d302      	bcc.n	800617e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d116      	bne.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	f043 0220 	orr.w	r2, r3, #32
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e007      	b.n	80061bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d1ca      	bne.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061d0:	e042      	b.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d119      	bne.n	8006214 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0210 	mvn.w	r2, #16
 80061e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e029      	b.n	8006268 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006214:	f7fd ffdc 	bl	80041d0 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	429a      	cmp	r2, r3
 8006222:	d302      	bcc.n	800622a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d116      	bne.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	f043 0220 	orr.w	r2, r3, #32
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e007      	b.n	8006268 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b40      	cmp	r3, #64	; 0x40
 8006264:	d1b5      	bne.n	80061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006286:	d11b      	bne.n	80062c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006290:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	f043 0204 	orr.w	r2, r3, #4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d0:	b08f      	sub	sp, #60	; 0x3c
 80062d2:	af0a      	add	r7, sp, #40	; 0x28
 80062d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e10f      	b.n	8006500 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f009 fa8e 	bl	800f81c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2203      	movs	r2, #3
 8006304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f003 f95f 	bl	80095e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	687e      	ldr	r6, [r7, #4]
 800632c:	466d      	mov	r5, sp
 800632e:	f106 0410 	add.w	r4, r6, #16
 8006332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800633a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800633e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006342:	1d33      	adds	r3, r6, #4
 8006344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006346:	6838      	ldr	r0, [r7, #0]
 8006348:	f003 f836 	bl	80093b8 <USB_CoreInit>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e0d0      	b.n	8006500 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2100      	movs	r1, #0
 8006364:	4618      	mov	r0, r3
 8006366:	f003 f94d 	bl	8009604 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
 800636e:	e04a      	b.n	8006406 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006370:	7bfa      	ldrb	r2, [r7, #15]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4613      	mov	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	333d      	adds	r3, #61	; 0x3d
 8006380:	2201      	movs	r2, #1
 8006382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006384:	7bfa      	ldrb	r2, [r7, #15]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	333c      	adds	r3, #60	; 0x3c
 8006394:	7bfa      	ldrb	r2, [r7, #15]
 8006396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006398:	7bfa      	ldrb	r2, [r7, #15]
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	b298      	uxth	r0, r3
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	3344      	adds	r3, #68	; 0x44
 80063ac:	4602      	mov	r2, r0
 80063ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	3340      	adds	r3, #64	; 0x40
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063c4:	7bfa      	ldrb	r2, [r7, #15]
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4613      	mov	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	3348      	adds	r3, #72	; 0x48
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063d8:	7bfa      	ldrb	r2, [r7, #15]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	4613      	mov	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	334c      	adds	r3, #76	; 0x4c
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063ec:	7bfa      	ldrb	r2, [r7, #15]
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	3354      	adds	r3, #84	; 0x54
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	3301      	adds	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	429a      	cmp	r2, r3
 800640e:	d3af      	bcc.n	8006370 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]
 8006414:	e044      	b.n	80064a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006416:	7bfa      	ldrb	r2, [r7, #15]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006428:	2200      	movs	r2, #0
 800642a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800642c:	7bfa      	ldrb	r2, [r7, #15]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800643e:	7bfa      	ldrb	r2, [r7, #15]
 8006440:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006442:	7bfa      	ldrb	r2, [r7, #15]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006458:	7bfa      	ldrb	r2, [r7, #15]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800646e:	7bfa      	ldrb	r2, [r7, #15]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006484:	7bfa      	ldrb	r2, [r7, #15]
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4613      	mov	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	3301      	adds	r3, #1
 800649e:	73fb      	strb	r3, [r7, #15]
 80064a0:	7bfa      	ldrb	r2, [r7, #15]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d3b5      	bcc.n	8006416 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	687e      	ldr	r6, [r7, #4]
 80064b2:	466d      	mov	r5, sp
 80064b4:	f106 0410 	add.w	r4, r6, #16
 80064b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80064c8:	1d33      	adds	r3, r6, #4
 80064ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064cc:	6838      	ldr	r0, [r7, #0]
 80064ce:	f003 f8e5 	bl	800969c <USB_DevInit>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e00d      	b.n	8006500 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f004 fa34 	bl	800a966 <USB_DevDisconnect>

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006508 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_PCD_Start+0x1c>
 8006520:	2302      	movs	r3, #2
 8006522:	e020      	b.n	8006566 <HAL_PCD_Start+0x5e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	2b01      	cmp	r3, #1
 8006532:	d109      	bne.n	8006548 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006538:	2b01      	cmp	r3, #1
 800653a:	d005      	beq.n	8006548 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f003 f837 	bl	80095c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f004 f9e4 	bl	800a924 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800656e:	b590      	push	{r4, r7, lr}
 8006570:	b08d      	sub	sp, #52	; 0x34
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f004 faa2 	bl	800aace <USB_GetMode>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	f040 848a 	bne.w	8006ea6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f004 fa06 	bl	800a9a8 <USB_ReadInterrupts>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8480 	beq.w	8006ea4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	0a1b      	lsrs	r3, r3, #8
 80065ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f004 f9f3 	bl	800a9a8 <USB_ReadInterrupts>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d107      	bne.n	80065dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f002 0202 	and.w	r2, r2, #2
 80065da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f004 f9e1 	bl	800a9a8 <USB_ReadInterrupts>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d161      	bne.n	80066b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0210 	bic.w	r2, r2, #16
 80065fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 020f 	and.w	r2, r3, #15
 800660c:	4613      	mov	r3, r2
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	3304      	adds	r3, #4
 800661e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	0c5b      	lsrs	r3, r3, #17
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	2b02      	cmp	r3, #2
 800662a:	d124      	bne.n	8006676 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d035      	beq.n	80066a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	091b      	lsrs	r3, r3, #4
 8006640:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006646:	b29b      	uxth	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	6a38      	ldr	r0, [r7, #32]
 800664c:	f004 f818 	bl	800a680 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800665c:	441a      	add	r2, r3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800666e:	441a      	add	r2, r3
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	621a      	str	r2, [r3, #32]
 8006674:	e016      	b.n	80066a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	0c5b      	lsrs	r3, r3, #17
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	2b06      	cmp	r3, #6
 8006680:	d110      	bne.n	80066a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006688:	2208      	movs	r2, #8
 800668a:	4619      	mov	r1, r3
 800668c:	6a38      	ldr	r0, [r7, #32]
 800668e:	f003 fff7 	bl	800a680 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	6a1a      	ldr	r2, [r3, #32]
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	091b      	lsrs	r3, r3, #4
 800669a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800669e:	441a      	add	r2, r3
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0210 	orr.w	r2, r2, #16
 80066b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f004 f975 	bl	800a9a8 <USB_ReadInterrupts>
 80066be:	4603      	mov	r3, r0
 80066c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066c8:	f040 80a7 	bne.w	800681a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f004 f97a 	bl	800a9ce <USB_ReadDevAllOutEpInterrupt>
 80066da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80066dc:	e099      	b.n	8006812 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 808e 	beq.w	8006806 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	4611      	mov	r1, r2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f004 f99e 	bl	800aa36 <USB_ReadDevOutEPInterrupt>
 80066fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00c      	beq.n	8006720 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	461a      	mov	r2, r3
 8006714:	2301      	movs	r3, #1
 8006716:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fec2 	bl	80074a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00c      	beq.n	8006744 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	461a      	mov	r2, r3
 8006738:	2308      	movs	r3, #8
 800673a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800673c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 ff98 	bl	8007674 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	461a      	mov	r2, r3
 800675c:	2310      	movs	r3, #16
 800675e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d030      	beq.n	80067cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d109      	bne.n	800678a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006788:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800678a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678c:	4613      	mov	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	4413      	add	r3, r2
 800679c:	3304      	adds	r3, #4
 800679e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	78db      	ldrb	r3, [r3, #3]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d108      	bne.n	80067ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2200      	movs	r2, #0
 80067ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f009 f92d 	bl	800fa14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	461a      	mov	r2, r3
 80067c8:	2302      	movs	r3, #2
 80067ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e2:	461a      	mov	r2, r3
 80067e4:	2320      	movs	r3, #32
 80067e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fe:	461a      	mov	r2, r3
 8006800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006804:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	3301      	adds	r3, #1
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	f47f af62 	bne.w	80066de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f004 f8c2 	bl	800a9a8 <USB_ReadInterrupts>
 8006824:	4603      	mov	r3, r0
 8006826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800682a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800682e:	f040 80db 	bne.w	80069e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f004 f8e3 	bl	800aa02 <USB_ReadDevAllInEpInterrupt>
 800683c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006842:	e0cd      	b.n	80069e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80c2 	beq.w	80069d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	4611      	mov	r1, r2
 800685a:	4618      	mov	r0, r3
 800685c:	f004 f909 	bl	800aa72 <USB_ReadDevInEPInterrupt>
 8006860:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d057      	beq.n	800691c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	2201      	movs	r2, #1
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	43db      	mvns	r3, r3
 8006886:	69f9      	ldr	r1, [r7, #28]
 8006888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800688c:	4013      	ands	r3, r2
 800688e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	461a      	mov	r2, r3
 800689e:	2301      	movs	r3, #1
 80068a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d132      	bne.n	8006910 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ae:	4613      	mov	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	334c      	adds	r3, #76	; 0x4c
 80068ba:	6819      	ldr	r1, [r3, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4403      	add	r3, r0
 80068ca:	3348      	adds	r3, #72	; 0x48
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4419      	add	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4403      	add	r3, r0
 80068de:	334c      	adds	r3, #76	; 0x4c
 80068e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d113      	bne.n	8006910 <HAL_PCD_IRQHandler+0x3a2>
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	3354      	adds	r3, #84	; 0x54
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d108      	bne.n	8006910 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006908:	461a      	mov	r2, r3
 800690a:	2101      	movs	r1, #1
 800690c:	f004 f910 	bl	800ab30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	b2db      	uxtb	r3, r3
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f009 f801 	bl	800f91e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d008      	beq.n	8006938 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006932:	461a      	mov	r2, r3
 8006934:	2308      	movs	r3, #8
 8006936:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694e:	461a      	mov	r2, r3
 8006950:	2310      	movs	r3, #16
 8006952:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696a:	461a      	mov	r2, r3
 800696c:	2340      	movs	r3, #64	; 0x40
 800696e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d023      	beq.n	80069c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800697a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800697c:	6a38      	ldr	r0, [r7, #32]
 800697e:	f002 fff1 	bl	8009964 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006984:	4613      	mov	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	3338      	adds	r3, #56	; 0x38
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4413      	add	r3, r2
 8006992:	3304      	adds	r3, #4
 8006994:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	78db      	ldrb	r3, [r3, #3]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d108      	bne.n	80069b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2200      	movs	r2, #0
 80069a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f009 f844 	bl	800fa38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	461a      	mov	r2, r3
 80069be:	2302      	movs	r3, #2
 80069c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80069cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fcdb 	bl	800738a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	3301      	adds	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f47f af2e 	bne.w	8006844 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f003 ffdb 	bl	800a9a8 <USB_ReadInterrupts>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fc:	d122      	bne.n	8006a44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d108      	bne.n	8006a2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006a24:	2100      	movs	r1, #0
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fec2 	bl	80077b0 <HAL_PCDEx_LPM_Callback>
 8006a2c:	e002      	b.n	8006a34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f008 ffe2 	bl	800f9f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f003 ffad 	bl	800a9a8 <USB_ReadInterrupts>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a58:	d112      	bne.n	8006a80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d102      	bne.n	8006a70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f008 ff9e 	bl	800f9ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006a7e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f003 ff8f 	bl	800a9a8 <USB_ReadInterrupts>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a94:	f040 80b7 	bne.w	8006c06 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2110      	movs	r1, #16
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f002 ff56 	bl	8009964 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006abc:	e046      	b.n	8006b4c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aca:	461a      	mov	r2, r3
 8006acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ad0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006af0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afe:	461a      	mov	r2, r3
 8006b00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	3301      	adds	r3, #1
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d3b3      	bcc.n	8006abe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006b68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b82:	f043 030b 	orr.w	r3, r3, #11
 8006b86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b98:	f043 030b 	orr.w	r3, r3, #11
 8006b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b9e:	e015      	b.n	8006bcc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bb2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006bb6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bc6:	f043 030b 	orr.w	r3, r3, #11
 8006bca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006bde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f003 ff9d 	bl	800ab30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695a      	ldr	r2, [r3, #20]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f003 fecc 	bl	800a9a8 <USB_ReadInterrupts>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1a:	d124      	bne.n	8006c66 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f003 ff62 	bl	800aaea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f002 ff17 	bl	8009a5e <USB_GetDevSpeed>
 8006c30:	4603      	mov	r3, r0
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681c      	ldr	r4, [r3, #0]
 8006c3c:	f001 f9e8 	bl	8008010 <HAL_RCC_GetHCLKFreq>
 8006c40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f002 fc16 	bl	800947c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f008 fe8c 	bl	800f96e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695a      	ldr	r2, [r3, #20]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f003 fe9c 	bl	800a9a8 <USB_ReadInterrupts>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d10a      	bne.n	8006c90 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f008 fe69 	bl	800f952 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695a      	ldr	r2, [r3, #20]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f002 0208 	and.w	r2, r2, #8
 8006c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f003 fe87 	bl	800a9a8 <USB_ReadInterrupts>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d122      	bne.n	8006cea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb4:	e014      	b.n	8006ce0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cba:	4613      	mov	r3, r2
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d105      	bne.n	8006cda <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fb27 	bl	8007328 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	3301      	adds	r3, #1
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d3e5      	bcc.n	8006cb6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f003 fe5a 	bl	800a9a8 <USB_ReadInterrupts>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfe:	d13b      	bne.n	8006d78 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d00:	2301      	movs	r3, #1
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
 8006d04:	e02b      	b.n	8006d5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	3340      	adds	r3, #64	; 0x40
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d115      	bne.n	8006d58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006d2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	da12      	bge.n	8006d58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d36:	4613      	mov	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	333f      	adds	r3, #63	; 0x3f
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fae8 	bl	8007328 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d3ce      	bcc.n	8006d06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f003 fe13 	bl	800a9a8 <USB_ReadInterrupts>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d8c:	d155      	bne.n	8006e3a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d8e:	2301      	movs	r3, #1
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
 8006d92:	e045      	b.n	8006e20 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	4613      	mov	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d12e      	bne.n	8006e1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006dbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da2b      	bge.n	8006e1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006dce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d121      	bne.n	8006e1a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006de8:	2201      	movs	r2, #1
 8006dea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e16:	6053      	str	r3, [r2, #4]
            break;
 8006e18:	e007      	b.n	8006e2a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d3b4      	bcc.n	8006d94 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695a      	ldr	r2, [r3, #20]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f003 fdb2 	bl	800a9a8 <USB_ReadInterrupts>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4e:	d10a      	bne.n	8006e66 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f008 fe03 	bl	800fa5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695a      	ldr	r2, [r3, #20]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f003 fd9c 	bl	800a9a8 <USB_ReadInterrupts>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d115      	bne.n	8006ea6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f008 fdf3 	bl	800fa78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6859      	ldr	r1, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
 8006ea2:	e000      	b.n	8006ea6 <HAL_PCD_IRQHandler+0x938>
      return;
 8006ea4:	bf00      	nop
    }
  }
}
 8006ea6:	3734      	adds	r7, #52	; 0x34
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd90      	pop	{r4, r7, pc}

08006eac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_PCD_SetAddress+0x1a>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e013      	b.n	8006eee <HAL_PCD_SetAddress+0x42>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	78fa      	ldrb	r2, [r7, #3]
 8006ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f003 fcfa 	bl	800a8d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	4608      	mov	r0, r1
 8006f00:	4611      	mov	r1, r2
 8006f02:	461a      	mov	r2, r3
 8006f04:	4603      	mov	r3, r0
 8006f06:	70fb      	strb	r3, [r7, #3]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	803b      	strh	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	da0f      	bge.n	8006f3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	f003 020f 	and.w	r2, r3, #15
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	3338      	adds	r3, #56	; 0x38
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	4413      	add	r3, r2
 8006f30:	3304      	adds	r3, #4
 8006f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	705a      	strb	r2, [r3, #1]
 8006f3a:	e00f      	b.n	8006f5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	f003 020f 	and.w	r2, r3, #15
 8006f42:	4613      	mov	r3, r2
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	4413      	add	r3, r2
 8006f52:	3304      	adds	r3, #4
 8006f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006f68:	883a      	ldrh	r2, [r7, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	78ba      	ldrb	r2, [r7, #2]
 8006f72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	785b      	ldrb	r3, [r3, #1]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006f86:	78bb      	ldrb	r3, [r7, #2]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d102      	bne.n	8006f92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_PCD_EP_Open+0xaa>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e00e      	b.n	8006fbe <HAL_PCD_EP_Open+0xc8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68f9      	ldr	r1, [r7, #12]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f002 fd7a 	bl	8009aa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	da0f      	bge.n	8006ffa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	f003 020f 	and.w	r2, r3, #15
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	3338      	adds	r3, #56	; 0x38
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4413      	add	r3, r2
 8006fee:	3304      	adds	r3, #4
 8006ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	705a      	strb	r2, [r3, #1]
 8006ff8:	e00f      	b.n	800701a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	4613      	mov	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	4413      	add	r3, r2
 8007010:	3304      	adds	r3, #4
 8007012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	f003 030f 	and.w	r3, r3, #15
 8007020:	b2da      	uxtb	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_PCD_EP_Close+0x6e>
 8007030:	2302      	movs	r3, #2
 8007032:	e00e      	b.n	8007052 <HAL_PCD_EP_Close+0x8c>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68f9      	ldr	r1, [r7, #12]
 8007042:	4618      	mov	r0, r3
 8007044:	f002 fdb8 	bl	8009bb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	460b      	mov	r3, r1
 8007068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	f003 020f 	and.w	r2, r3, #15
 8007070:	4613      	mov	r3, r2
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	3304      	adds	r3, #4
 8007082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2200      	movs	r2, #0
 8007094:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d102      	bne.n	80070b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	6979      	ldr	r1, [r7, #20]
 80070ce:	f003 f897 	bl	800a200 <USB_EP0StartXfer>
 80070d2:	e008      	b.n	80070e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	6979      	ldr	r1, [r7, #20]
 80070e2:	f002 fe45 	bl	8009d70 <USB_EPStartXfer>
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	f003 020f 	and.w	r2, r3, #15
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007112:	681b      	ldr	r3, [r3, #0]
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	607a      	str	r2, [r7, #4]
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	460b      	mov	r3, r1
 800712e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	f003 020f 	and.w	r2, r3, #15
 8007136:	4613      	mov	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	3338      	adds	r3, #56	; 0x38
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	3304      	adds	r3, #4
 8007146:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2200      	movs	r2, #0
 8007158:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2201      	movs	r2, #1
 800715e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	b2da      	uxtb	r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d102      	bne.n	800717a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	f003 030f 	and.w	r3, r3, #15
 8007180:	2b00      	cmp	r3, #0
 8007182:	d109      	bne.n	8007198 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	6979      	ldr	r1, [r7, #20]
 8007192:	f003 f835 	bl	800a200 <USB_EP0StartXfer>
 8007196:	e008      	b.n	80071aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	6979      	ldr	r1, [r7, #20]
 80071a6:	f002 fde3 	bl	8009d70 <USB_EPStartXfer>
  }

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	f003 020f 	and.w	r2, r3, #15
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d901      	bls.n	80071d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e050      	b.n	8007274 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da0f      	bge.n	80071fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	f003 020f 	and.w	r2, r3, #15
 80071e0:	4613      	mov	r3, r2
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	3338      	adds	r3, #56	; 0x38
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	3304      	adds	r3, #4
 80071f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	705a      	strb	r2, [r3, #1]
 80071f8:	e00d      	b.n	8007216 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80071fa:	78fa      	ldrb	r2, [r7, #3]
 80071fc:	4613      	mov	r3, r2
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	b2da      	uxtb	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800722e:	2b01      	cmp	r3, #1
 8007230:	d101      	bne.n	8007236 <HAL_PCD_EP_SetStall+0x82>
 8007232:	2302      	movs	r3, #2
 8007234:	e01e      	b.n	8007274 <HAL_PCD_EP_SetStall+0xc0>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68f9      	ldr	r1, [r7, #12]
 8007244:	4618      	mov	r0, r3
 8007246:	f003 fa73 	bl	800a730 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	b2d9      	uxtb	r1, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007264:	461a      	mov	r2, r3
 8007266:	f003 fc63 	bl	800ab30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	f003 020f 	and.w	r2, r3, #15
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	429a      	cmp	r2, r3
 8007294:	d901      	bls.n	800729a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e042      	b.n	8007320 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800729a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	da0f      	bge.n	80072c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	f003 020f 	and.w	r2, r3, #15
 80072a8:	4613      	mov	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	3338      	adds	r3, #56	; 0x38
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4413      	add	r3, r2
 80072b6:	3304      	adds	r3, #4
 80072b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	705a      	strb	r2, [r3, #1]
 80072c0:	e00f      	b.n	80072e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072c2:	78fb      	ldrb	r3, [r7, #3]
 80072c4:	f003 020f 	and.w	r2, r3, #15
 80072c8:	4613      	mov	r3, r2
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	4413      	add	r3, r2
 80072d8:	3304      	adds	r3, #4
 80072da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d101      	bne.n	8007302 <HAL_PCD_EP_ClrStall+0x86>
 80072fe:	2302      	movs	r3, #2
 8007300:	e00e      	b.n	8007320 <HAL_PCD_EP_ClrStall+0xa4>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68f9      	ldr	r1, [r7, #12]
 8007310:	4618      	mov	r0, r3
 8007312:	f003 fa7b 	bl	800a80c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007338:	2b00      	cmp	r3, #0
 800733a:	da0c      	bge.n	8007356 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	f003 020f 	and.w	r2, r3, #15
 8007342:	4613      	mov	r3, r2
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	3338      	adds	r3, #56	; 0x38
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	4413      	add	r3, r2
 8007350:	3304      	adds	r3, #4
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e00c      	b.n	8007370 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	f003 020f 	and.w	r2, r3, #15
 800735c:	4613      	mov	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	3304      	adds	r3, #4
 800736e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	4618      	mov	r0, r3
 8007378:	f003 f89a 	bl	800a4b0 <USB_EPStopXfer>
 800737c:	4603      	mov	r3, r0
 800737e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007380:	7afb      	ldrb	r3, [r7, #11]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b08a      	sub	sp, #40	; 0x28
 800738e:	af02      	add	r7, sp, #8
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	3338      	adds	r3, #56	; 0x38
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	3304      	adds	r3, #4
 80073b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d901      	bls.n	80073c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e06c      	b.n	800749c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d902      	bls.n	80073de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	3303      	adds	r3, #3
 80073e2:	089b      	lsrs	r3, r3, #2
 80073e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80073e6:	e02b      	b.n	8007440 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d902      	bls.n	8007404 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	3303      	adds	r3, #3
 8007408:	089b      	lsrs	r3, r3, #2
 800740a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6919      	ldr	r1, [r3, #16]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	b2da      	uxtb	r2, r3
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800741c:	b2db      	uxtb	r3, r3
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	4603      	mov	r3, r0
 8007422:	6978      	ldr	r0, [r7, #20]
 8007424:	f003 f8ee 	bl	800a604 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	441a      	add	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a1a      	ldr	r2, [r3, #32]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	441a      	add	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	429a      	cmp	r2, r3
 8007454:	d809      	bhi.n	800746a <PCD_WriteEmptyTxFifo+0xe0>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a1a      	ldr	r2, [r3, #32]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800745e:	429a      	cmp	r2, r3
 8007460:	d203      	bcs.n	800746a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1be      	bne.n	80073e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	429a      	cmp	r2, r3
 8007474:	d811      	bhi.n	800749a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	2201      	movs	r2, #1
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	43db      	mvns	r3, r3
 8007490:	6939      	ldr	r1, [r7, #16]
 8007492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007496:	4013      	ands	r3, r2
 8007498:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3720      	adds	r7, #32
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	333c      	adds	r3, #60	; 0x3c
 80074bc:	3304      	adds	r3, #4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d17b      	bne.n	80075d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f003 0308 	and.w	r3, r3, #8
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d015      	beq.n	8007510 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	4a61      	ldr	r2, [pc, #388]	; (800766c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	f240 80b9 	bls.w	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80b3 	beq.w	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007506:	461a      	mov	r2, r3
 8007508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750c:	6093      	str	r3, [r2, #8]
 800750e:	e0a7      	b.n	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	461a      	mov	r2, r3
 8007528:	2320      	movs	r3, #32
 800752a:	6093      	str	r3, [r2, #8]
 800752c:	e098      	b.n	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 8093 	bne.w	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	4a4b      	ldr	r2, [pc, #300]	; (800766c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d90f      	bls.n	8007562 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00a      	beq.n	8007562 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	461a      	mov	r2, r3
 800755a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755e:	6093      	str	r3, [r2, #8]
 8007560:	e07e      	b.n	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	0159      	lsls	r1, r3, #5
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	440b      	add	r3, r1
 8007584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d114      	bne.n	80075c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075ac:	461a      	mov	r2, r3
 80075ae:	2101      	movs	r1, #1
 80075b0:	f003 fabe 	bl	800ab30 <USB_EP0_OutStart>
 80075b4:	e006      	b.n	80075c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	441a      	add	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f008 f98c 	bl	800f8e8 <HAL_PCD_DataOutStageCallback>
 80075d0:	e046      	b.n	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	4a26      	ldr	r2, [pc, #152]	; (8007670 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d124      	bne.n	8007624 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f0:	461a      	mov	r2, r3
 80075f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f6:	6093      	str	r3, [r2, #8]
 80075f8:	e032      	b.n	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d008      	beq.n	8007616 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007610:	461a      	mov	r2, r3
 8007612:	2320      	movs	r3, #32
 8007614:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f008 f963 	bl	800f8e8 <HAL_PCD_DataOutStageCallback>
 8007622:	e01d      	b.n	8007660 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d114      	bne.n	8007654 <PCD_EP_OutXfrComplete_int+0x1b0>
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	4613      	mov	r3, r2
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d108      	bne.n	8007654 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800764c:	461a      	mov	r2, r3
 800764e:	2100      	movs	r1, #0
 8007650:	f003 fa6e 	bl	800ab30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f008 f944 	bl	800f8e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	4f54300a 	.word	0x4f54300a
 8007670:	4f54310a 	.word	0x4f54310a

08007674 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	333c      	adds	r3, #60	; 0x3c
 800768c:	3304      	adds	r3, #4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4a15      	ldr	r2, [pc, #84]	; (80076fc <PCD_EP_OutSetupPacket_int+0x88>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d90e      	bls.n	80076c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d009      	beq.n	80076c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c0:	461a      	mov	r2, r3
 80076c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f008 f8fb 	bl	800f8c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <PCD_EP_OutSetupPacket_int+0x88>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d90c      	bls.n	80076f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d108      	bne.n	80076f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6818      	ldr	r0, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076e8:	461a      	mov	r2, r3
 80076ea:	2101      	movs	r1, #1
 80076ec:	f003 fa20 	bl	800ab30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	4f54300a 	.word	0x4f54300a

08007700 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
 800770c:	4613      	mov	r3, r2
 800770e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d107      	bne.n	800772e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800771e:	883b      	ldrh	r3, [r7, #0]
 8007720:	0419      	lsls	r1, r3, #16
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	430a      	orrs	r2, r1
 800772a:	629a      	str	r2, [r3, #40]	; 0x28
 800772c:	e028      	b.n	8007780 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	0c1b      	lsrs	r3, r3, #16
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	4413      	add	r3, r2
 800773a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
 8007740:	e00d      	b.n	800775e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	3340      	adds	r3, #64	; 0x40
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	3301      	adds	r3, #1
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	7bfa      	ldrb	r2, [r7, #15]
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	3b01      	subs	r3, #1
 8007764:	429a      	cmp	r2, r3
 8007766:	d3ec      	bcc.n	8007742 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007768:	883b      	ldrh	r3, [r7, #0]
 800776a:	0418      	lsls	r0, r3, #16
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	3b01      	subs	r3, #1
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	4302      	orrs	r2, r0
 8007778:	3340      	adds	r3, #64	; 0x40
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	887a      	ldrh	r2, [r7, #2]
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e267      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d075      	beq.n	80078d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077e6:	4b88      	ldr	r3, [pc, #544]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 030c 	and.w	r3, r3, #12
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d00c      	beq.n	800780c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077f2:	4b85      	ldr	r3, [pc, #532]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d112      	bne.n	8007824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077fe:	4b82      	ldr	r3, [pc, #520]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800780a:	d10b      	bne.n	8007824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800780c:	4b7e      	ldr	r3, [pc, #504]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d05b      	beq.n	80078d0 <HAL_RCC_OscConfig+0x108>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d157      	bne.n	80078d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e242      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782c:	d106      	bne.n	800783c <HAL_RCC_OscConfig+0x74>
 800782e:	4b76      	ldr	r3, [pc, #472]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a75      	ldr	r2, [pc, #468]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	e01d      	b.n	8007878 <HAL_RCC_OscConfig+0xb0>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007844:	d10c      	bne.n	8007860 <HAL_RCC_OscConfig+0x98>
 8007846:	4b70      	ldr	r3, [pc, #448]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a6f      	ldr	r2, [pc, #444]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 800784c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	4b6d      	ldr	r3, [pc, #436]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a6c      	ldr	r2, [pc, #432]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	e00b      	b.n	8007878 <HAL_RCC_OscConfig+0xb0>
 8007860:	4b69      	ldr	r3, [pc, #420]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a68      	ldr	r2, [pc, #416]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	4b66      	ldr	r3, [pc, #408]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a65      	ldr	r2, [pc, #404]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d013      	beq.n	80078a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007880:	f7fc fca6 	bl	80041d0 <HAL_GetTick>
 8007884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007888:	f7fc fca2 	bl	80041d0 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b64      	cmp	r3, #100	; 0x64
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e207      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800789a:	4b5b      	ldr	r3, [pc, #364]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0xc0>
 80078a6:	e014      	b.n	80078d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a8:	f7fc fc92 	bl	80041d0 <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078b0:	f7fc fc8e 	bl	80041d0 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b64      	cmp	r3, #100	; 0x64
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e1f3      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078c2:	4b51      	ldr	r3, [pc, #324]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0xe8>
 80078ce:	e000      	b.n	80078d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d063      	beq.n	80079a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078de:	4b4a      	ldr	r3, [pc, #296]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 030c 	and.w	r3, r3, #12
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ea:	4b47      	ldr	r3, [pc, #284]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d11c      	bne.n	8007930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078f6:	4b44      	ldr	r3, [pc, #272]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d116      	bne.n	8007930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007902:	4b41      	ldr	r3, [pc, #260]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <HAL_RCC_OscConfig+0x152>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d001      	beq.n	800791a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e1c7      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800791a:	4b3b      	ldr	r3, [pc, #236]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	4937      	ldr	r1, [pc, #220]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 800792a:	4313      	orrs	r3, r2
 800792c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800792e:	e03a      	b.n	80079a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d020      	beq.n	800797a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007938:	4b34      	ldr	r3, [pc, #208]	; (8007a0c <HAL_RCC_OscConfig+0x244>)
 800793a:	2201      	movs	r2, #1
 800793c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793e:	f7fc fc47 	bl	80041d0 <HAL_GetTick>
 8007942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007944:	e008      	b.n	8007958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007946:	f7fc fc43 	bl	80041d0 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d901      	bls.n	8007958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e1a8      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007958:	4b2b      	ldr	r3, [pc, #172]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0f0      	beq.n	8007946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007964:	4b28      	ldr	r3, [pc, #160]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4925      	ldr	r1, [pc, #148]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 8007974:	4313      	orrs	r3, r2
 8007976:	600b      	str	r3, [r1, #0]
 8007978:	e015      	b.n	80079a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800797a:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <HAL_RCC_OscConfig+0x244>)
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007980:	f7fc fc26 	bl	80041d0 <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007986:	e008      	b.n	800799a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007988:	f7fc fc22 	bl	80041d0 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d901      	bls.n	800799a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e187      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800799a:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f0      	bne.n	8007988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d036      	beq.n	8007a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d016      	beq.n	80079e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079ba:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <HAL_RCC_OscConfig+0x248>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c0:	f7fc fc06 	bl	80041d0 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079c8:	f7fc fc02 	bl	80041d0 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e167      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <HAL_RCC_OscConfig+0x240>)
 80079dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0f0      	beq.n	80079c8 <HAL_RCC_OscConfig+0x200>
 80079e6:	e01b      	b.n	8007a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079e8:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <HAL_RCC_OscConfig+0x248>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ee:	f7fc fbef 	bl	80041d0 <HAL_GetTick>
 80079f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079f4:	e00e      	b.n	8007a14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079f6:	f7fc fbeb 	bl	80041d0 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d907      	bls.n	8007a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e150      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
 8007a08:	40023800 	.word	0x40023800
 8007a0c:	42470000 	.word	0x42470000
 8007a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a14:	4b88      	ldr	r3, [pc, #544]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1ea      	bne.n	80079f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8097 	beq.w	8007b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a32:	4b81      	ldr	r3, [pc, #516]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	4b7d      	ldr	r3, [pc, #500]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	4a7c      	ldr	r2, [pc, #496]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a4e:	4b7a      	ldr	r3, [pc, #488]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a56:	60bb      	str	r3, [r7, #8]
 8007a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a5e:	4b77      	ldr	r3, [pc, #476]	; (8007c3c <HAL_RCC_OscConfig+0x474>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d118      	bne.n	8007a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a6a:	4b74      	ldr	r3, [pc, #464]	; (8007c3c <HAL_RCC_OscConfig+0x474>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a73      	ldr	r2, [pc, #460]	; (8007c3c <HAL_RCC_OscConfig+0x474>)
 8007a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a76:	f7fc fbab 	bl	80041d0 <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a7e:	f7fc fba7 	bl	80041d0 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e10c      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a90:	4b6a      	ldr	r3, [pc, #424]	; (8007c3c <HAL_RCC_OscConfig+0x474>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d106      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x2ea>
 8007aa4:	4b64      	ldr	r3, [pc, #400]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa8:	4a63      	ldr	r2, [pc, #396]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab0:	e01c      	b.n	8007aec <HAL_RCC_OscConfig+0x324>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d10c      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x30c>
 8007aba:	4b5f      	ldr	r3, [pc, #380]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	4a5e      	ldr	r2, [pc, #376]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007ac0:	f043 0304 	orr.w	r3, r3, #4
 8007ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac6:	4b5c      	ldr	r3, [pc, #368]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aca:	4a5b      	ldr	r2, [pc, #364]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007acc:	f043 0301 	orr.w	r3, r3, #1
 8007ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad2:	e00b      	b.n	8007aec <HAL_RCC_OscConfig+0x324>
 8007ad4:	4b58      	ldr	r3, [pc, #352]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad8:	4a57      	ldr	r2, [pc, #348]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007ada:	f023 0301 	bic.w	r3, r3, #1
 8007ade:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae0:	4b55      	ldr	r3, [pc, #340]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	4a54      	ldr	r2, [pc, #336]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007ae6:	f023 0304 	bic.w	r3, r3, #4
 8007aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d015      	beq.n	8007b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af4:	f7fc fb6c 	bl	80041d0 <HAL_GetTick>
 8007af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afa:	e00a      	b.n	8007b12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007afc:	f7fc fb68 	bl	80041d0 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e0cb      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b12:	4b49      	ldr	r3, [pc, #292]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0ee      	beq.n	8007afc <HAL_RCC_OscConfig+0x334>
 8007b1e:	e014      	b.n	8007b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b20:	f7fc fb56 	bl	80041d0 <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b26:	e00a      	b.n	8007b3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b28:	f7fc fb52 	bl	80041d0 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e0b5      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b3e:	4b3e      	ldr	r3, [pc, #248]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1ee      	bne.n	8007b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d105      	bne.n	8007b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b50:	4b39      	ldr	r3, [pc, #228]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	4a38      	ldr	r2, [pc, #224]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80a1 	beq.w	8007ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b66:	4b34      	ldr	r3, [pc, #208]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 030c 	and.w	r3, r3, #12
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d05c      	beq.n	8007c2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d141      	bne.n	8007bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b7a:	4b31      	ldr	r3, [pc, #196]	; (8007c40 <HAL_RCC_OscConfig+0x478>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b80:	f7fc fb26 	bl	80041d0 <HAL_GetTick>
 8007b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b88:	f7fc fb22 	bl	80041d0 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e087      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b9a:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1f0      	bne.n	8007b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69da      	ldr	r2, [r3, #28]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	019b      	lsls	r3, r3, #6
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	085b      	lsrs	r3, r3, #1
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	061b      	lsls	r3, r3, #24
 8007bca:	491b      	ldr	r1, [pc, #108]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bd0:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <HAL_RCC_OscConfig+0x478>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd6:	f7fc fafb 	bl	80041d0 <HAL_GetTick>
 8007bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bdc:	e008      	b.n	8007bf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bde:	f7fc faf7 	bl	80041d0 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d901      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e05c      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bf0:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0f0      	beq.n	8007bde <HAL_RCC_OscConfig+0x416>
 8007bfc:	e054      	b.n	8007ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bfe:	4b10      	ldr	r3, [pc, #64]	; (8007c40 <HAL_RCC_OscConfig+0x478>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c04:	f7fc fae4 	bl	80041d0 <HAL_GetTick>
 8007c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0a:	e008      	b.n	8007c1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c0c:	f7fc fae0 	bl	80041d0 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e045      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c1e:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <HAL_RCC_OscConfig+0x470>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f0      	bne.n	8007c0c <HAL_RCC_OscConfig+0x444>
 8007c2a:	e03d      	b.n	8007ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d107      	bne.n	8007c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e038      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	40007000 	.word	0x40007000
 8007c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c44:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <HAL_RCC_OscConfig+0x4ec>)
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d028      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d121      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d11a      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c74:	4013      	ands	r3, r2
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d111      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d107      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	40023800 	.word	0x40023800

08007cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e0cc      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ccc:	4b68      	ldr	r3, [pc, #416]	; (8007e70 <HAL_RCC_ClockConfig+0x1b8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d90c      	bls.n	8007cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cda:	4b65      	ldr	r3, [pc, #404]	; (8007e70 <HAL_RCC_ClockConfig+0x1b8>)
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ce2:	4b63      	ldr	r3, [pc, #396]	; (8007e70 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d001      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e0b8      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d020      	beq.n	8007d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d0c:	4b59      	ldr	r3, [pc, #356]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4a58      	ldr	r2, [pc, #352]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d24:	4b53      	ldr	r3, [pc, #332]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4a52      	ldr	r2, [pc, #328]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d30:	4b50      	ldr	r3, [pc, #320]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	494d      	ldr	r1, [pc, #308]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d044      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d107      	bne.n	8007d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d56:	4b47      	ldr	r3, [pc, #284]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d119      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e07f      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d003      	beq.n	8007d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d107      	bne.n	8007d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d76:	4b3f      	ldr	r3, [pc, #252]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e06f      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d86:	4b3b      	ldr	r3, [pc, #236]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e067      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d96:	4b37      	ldr	r3, [pc, #220]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f023 0203 	bic.w	r2, r3, #3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	4934      	ldr	r1, [pc, #208]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007da8:	f7fc fa12 	bl	80041d0 <HAL_GetTick>
 8007dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dae:	e00a      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db0:	f7fc fa0e 	bl	80041d0 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e04f      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dc6:	4b2b      	ldr	r3, [pc, #172]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 020c 	and.w	r2, r3, #12
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d1eb      	bne.n	8007db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dd8:	4b25      	ldr	r3, [pc, #148]	; (8007e70 <HAL_RCC_ClockConfig+0x1b8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d20c      	bcs.n	8007e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007de6:	4b22      	ldr	r3, [pc, #136]	; (8007e70 <HAL_RCC_ClockConfig+0x1b8>)
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dee:	4b20      	ldr	r3, [pc, #128]	; (8007e70 <HAL_RCC_ClockConfig+0x1b8>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d001      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e032      	b.n	8007e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e0c:	4b19      	ldr	r3, [pc, #100]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4916      	ldr	r1, [pc, #88]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	490e      	ldr	r1, [pc, #56]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e3e:	f000 f821 	bl	8007e84 <HAL_RCC_GetSysClockFreq>
 8007e42:	4602      	mov	r2, r0
 8007e44:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <HAL_RCC_ClockConfig+0x1bc>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	091b      	lsrs	r3, r3, #4
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	490a      	ldr	r1, [pc, #40]	; (8007e78 <HAL_RCC_ClockConfig+0x1c0>)
 8007e50:	5ccb      	ldrb	r3, [r1, r3]
 8007e52:	fa22 f303 	lsr.w	r3, r2, r3
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <HAL_RCC_ClockConfig+0x1c4>)
 8007e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <HAL_RCC_ClockConfig+0x1c8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fc f972 	bl	8004148 <HAL_InitTick>

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40023c00 	.word	0x40023c00
 8007e74:	40023800 	.word	0x40023800
 8007e78:	08014194 	.word	0x08014194
 8007e7c:	20000004 	.word	0x20000004
 8007e80:	20000028 	.word	0x20000028

08007e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e88:	b090      	sub	sp, #64	; 0x40
 8007e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e94:	2300      	movs	r3, #0
 8007e96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e9c:	4b59      	ldr	r3, [pc, #356]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 030c 	and.w	r3, r3, #12
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d00d      	beq.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	f200 80a1 	bhi.w	8007ff0 <HAL_RCC_GetSysClockFreq+0x16c>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d003      	beq.n	8007ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8007eb6:	e09b      	b.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007eb8:	4b53      	ldr	r3, [pc, #332]	; (8008008 <HAL_RCC_GetSysClockFreq+0x184>)
 8007eba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007ebc:	e09b      	b.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ebe:	4b53      	ldr	r3, [pc, #332]	; (800800c <HAL_RCC_GetSysClockFreq+0x188>)
 8007ec0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ec2:	e098      	b.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ec4:	4b4f      	ldr	r3, [pc, #316]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ece:	4b4d      	ldr	r3, [pc, #308]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d028      	beq.n	8007f2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eda:	4b4a      	ldr	r3, [pc, #296]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	099b      	lsrs	r3, r3, #6
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	623b      	str	r3, [r7, #32]
 8007ee4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007eec:	2100      	movs	r1, #0
 8007eee:	4b47      	ldr	r3, [pc, #284]	; (800800c <HAL_RCC_GetSysClockFreq+0x188>)
 8007ef0:	fb03 f201 	mul.w	r2, r3, r1
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	fb00 f303 	mul.w	r3, r0, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	4a43      	ldr	r2, [pc, #268]	; (800800c <HAL_RCC_GetSysClockFreq+0x188>)
 8007efe:	fba0 1202 	umull	r1, r2, r0, r2
 8007f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f04:	460a      	mov	r2, r1
 8007f06:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f0a:	4413      	add	r3, r2
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	2200      	movs	r2, #0
 8007f12:	61bb      	str	r3, [r7, #24]
 8007f14:	61fa      	str	r2, [r7, #28]
 8007f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f1e:	f7f8 febb 	bl	8000c98 <__aeabi_uldivmod>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4613      	mov	r3, r2
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2a:	e053      	b.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f2c:	4b35      	ldr	r3, [pc, #212]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	099b      	lsrs	r3, r3, #6
 8007f32:	2200      	movs	r2, #0
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	617a      	str	r2, [r7, #20]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f3e:	f04f 0b00 	mov.w	fp, #0
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	f04f 0000 	mov.w	r0, #0
 8007f4a:	f04f 0100 	mov.w	r1, #0
 8007f4e:	0159      	lsls	r1, r3, #5
 8007f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f54:	0150      	lsls	r0, r2, #5
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	ebb2 080a 	subs.w	r8, r2, sl
 8007f5e:	eb63 090b 	sbc.w	r9, r3, fp
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f76:	ebb2 0408 	subs.w	r4, r2, r8
 8007f7a:	eb63 0509 	sbc.w	r5, r3, r9
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	00eb      	lsls	r3, r5, #3
 8007f88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f8c:	00e2      	lsls	r2, r4, #3
 8007f8e:	4614      	mov	r4, r2
 8007f90:	461d      	mov	r5, r3
 8007f92:	eb14 030a 	adds.w	r3, r4, sl
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	eb45 030b 	adc.w	r3, r5, fp
 8007f9c:	607b      	str	r3, [r7, #4]
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	f04f 0300 	mov.w	r3, #0
 8007fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007faa:	4629      	mov	r1, r5
 8007fac:	028b      	lsls	r3, r1, #10
 8007fae:	4621      	mov	r1, r4
 8007fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	028a      	lsls	r2, r1, #10
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	60bb      	str	r3, [r7, #8]
 8007fc2:	60fa      	str	r2, [r7, #12]
 8007fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fc8:	f7f8 fe66 	bl	8000c98 <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	0c1b      	lsrs	r3, r3, #16
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	3301      	adds	r3, #1
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fee:	e002      	b.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ff2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3740      	adds	r7, #64	; 0x40
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008002:	bf00      	nop
 8008004:	40023800 	.word	0x40023800
 8008008:	00f42400 	.word	0x00f42400
 800800c:	017d7840 	.word	0x017d7840

08008010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008014:	4b03      	ldr	r3, [pc, #12]	; (8008024 <HAL_RCC_GetHCLKFreq+0x14>)
 8008016:	681b      	ldr	r3, [r3, #0]
}
 8008018:	4618      	mov	r0, r3
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000004 	.word	0x20000004

08008028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800802c:	f7ff fff0 	bl	8008010 <HAL_RCC_GetHCLKFreq>
 8008030:	4602      	mov	r2, r0
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	0a9b      	lsrs	r3, r3, #10
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	4903      	ldr	r1, [pc, #12]	; (800804c <HAL_RCC_GetPCLK1Freq+0x24>)
 800803e:	5ccb      	ldrb	r3, [r1, r3]
 8008040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008044:	4618      	mov	r0, r3
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40023800 	.word	0x40023800
 800804c:	080141a4 	.word	0x080141a4

08008050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008054:	f7ff ffdc 	bl	8008010 <HAL_RCC_GetHCLKFreq>
 8008058:	4602      	mov	r2, r0
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	0b5b      	lsrs	r3, r3, #13
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	4903      	ldr	r1, [pc, #12]	; (8008074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008066:	5ccb      	ldrb	r3, [r1, r3]
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800806c:	4618      	mov	r0, r3
 800806e:	bd80      	pop	{r7, pc}
 8008070:	40023800 	.word	0x40023800
 8008074:	080141a4 	.word	0x080141a4

08008078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e041      	b.n	800810e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fa f842 	bl	8002128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f000 f9a0 	bl	80083fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d109      	bne.n	800813c <HAL_TIM_PWM_Start+0x24>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	bf14      	ite	ne
 8008134:	2301      	movne	r3, #1
 8008136:	2300      	moveq	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	e022      	b.n	8008182 <HAL_TIM_PWM_Start+0x6a>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b04      	cmp	r3, #4
 8008140:	d109      	bne.n	8008156 <HAL_TIM_PWM_Start+0x3e>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	bf14      	ite	ne
 800814e:	2301      	movne	r3, #1
 8008150:	2300      	moveq	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	e015      	b.n	8008182 <HAL_TIM_PWM_Start+0x6a>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b08      	cmp	r3, #8
 800815a:	d109      	bne.n	8008170 <HAL_TIM_PWM_Start+0x58>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	bf14      	ite	ne
 8008168:	2301      	movne	r3, #1
 800816a:	2300      	moveq	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	e008      	b.n	8008182 <HAL_TIM_PWM_Start+0x6a>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b01      	cmp	r3, #1
 800817a:	bf14      	ite	ne
 800817c:	2301      	movne	r3, #1
 800817e:	2300      	moveq	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e068      	b.n	800825c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d104      	bne.n	800819a <HAL_TIM_PWM_Start+0x82>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008198:	e013      	b.n	80081c2 <HAL_TIM_PWM_Start+0xaa>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b04      	cmp	r3, #4
 800819e:	d104      	bne.n	80081aa <HAL_TIM_PWM_Start+0x92>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081a8:	e00b      	b.n	80081c2 <HAL_TIM_PWM_Start+0xaa>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d104      	bne.n	80081ba <HAL_TIM_PWM_Start+0xa2>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081b8:	e003      	b.n	80081c2 <HAL_TIM_PWM_Start+0xaa>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2202      	movs	r2, #2
 80081be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2201      	movs	r2, #1
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fb22 	bl	8008814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a23      	ldr	r2, [pc, #140]	; (8008264 <HAL_TIM_PWM_Start+0x14c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d107      	bne.n	80081ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a1d      	ldr	r2, [pc, #116]	; (8008264 <HAL_TIM_PWM_Start+0x14c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d018      	beq.n	8008226 <HAL_TIM_PWM_Start+0x10e>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081fc:	d013      	beq.n	8008226 <HAL_TIM_PWM_Start+0x10e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a19      	ldr	r2, [pc, #100]	; (8008268 <HAL_TIM_PWM_Start+0x150>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00e      	beq.n	8008226 <HAL_TIM_PWM_Start+0x10e>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a17      	ldr	r2, [pc, #92]	; (800826c <HAL_TIM_PWM_Start+0x154>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d009      	beq.n	8008226 <HAL_TIM_PWM_Start+0x10e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a16      	ldr	r2, [pc, #88]	; (8008270 <HAL_TIM_PWM_Start+0x158>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d004      	beq.n	8008226 <HAL_TIM_PWM_Start+0x10e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a14      	ldr	r2, [pc, #80]	; (8008274 <HAL_TIM_PWM_Start+0x15c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d111      	bne.n	800824a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b06      	cmp	r3, #6
 8008236:	d010      	beq.n	800825a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008248:	e007      	b.n	800825a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0201 	orr.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40010000 	.word	0x40010000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40014000 	.word	0x40014000

08008278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008292:	2302      	movs	r3, #2
 8008294:	e0ae      	b.n	80083f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b0c      	cmp	r3, #12
 80082a2:	f200 809f 	bhi.w	80083e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082e1 	.word	0x080082e1
 80082b0:	080083e5 	.word	0x080083e5
 80082b4:	080083e5 	.word	0x080083e5
 80082b8:	080083e5 	.word	0x080083e5
 80082bc:	08008321 	.word	0x08008321
 80082c0:	080083e5 	.word	0x080083e5
 80082c4:	080083e5 	.word	0x080083e5
 80082c8:	080083e5 	.word	0x080083e5
 80082cc:	08008363 	.word	0x08008363
 80082d0:	080083e5 	.word	0x080083e5
 80082d4:	080083e5 	.word	0x080083e5
 80082d8:	080083e5 	.word	0x080083e5
 80082dc:	080083a3 	.word	0x080083a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 f908 	bl	80084fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0208 	orr.w	r2, r2, #8
 80082fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0204 	bic.w	r2, r2, #4
 800830a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6999      	ldr	r1, [r3, #24]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	619a      	str	r2, [r3, #24]
      break;
 800831e:	e064      	b.n	80083ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f94e 	bl	80085c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800833a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800834a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6999      	ldr	r1, [r3, #24]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	021a      	lsls	r2, r3, #8
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	619a      	str	r2, [r3, #24]
      break;
 8008360:	e043      	b.n	80083ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	4618      	mov	r0, r3
 800836a:	f000 f999 	bl	80086a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69da      	ldr	r2, [r3, #28]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f042 0208 	orr.w	r2, r2, #8
 800837c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69da      	ldr	r2, [r3, #28]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0204 	bic.w	r2, r2, #4
 800838c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69d9      	ldr	r1, [r3, #28]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	61da      	str	r2, [r3, #28]
      break;
 80083a0:	e023      	b.n	80083ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 f9e3 	bl	8008774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69da      	ldr	r2, [r3, #28]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69d9      	ldr	r1, [r3, #28]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	021a      	lsls	r2, r3, #8
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	61da      	str	r2, [r3, #28]
      break;
 80083e2:	e002      	b.n	80083ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]
      break;
 80083e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a34      	ldr	r2, [pc, #208]	; (80084e0 <TIM_Base_SetConfig+0xe4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00f      	beq.n	8008434 <TIM_Base_SetConfig+0x38>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841a:	d00b      	beq.n	8008434 <TIM_Base_SetConfig+0x38>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a31      	ldr	r2, [pc, #196]	; (80084e4 <TIM_Base_SetConfig+0xe8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d007      	beq.n	8008434 <TIM_Base_SetConfig+0x38>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a30      	ldr	r2, [pc, #192]	; (80084e8 <TIM_Base_SetConfig+0xec>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_Base_SetConfig+0x38>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a2f      	ldr	r2, [pc, #188]	; (80084ec <TIM_Base_SetConfig+0xf0>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d108      	bne.n	8008446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a25      	ldr	r2, [pc, #148]	; (80084e0 <TIM_Base_SetConfig+0xe4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d01b      	beq.n	8008486 <TIM_Base_SetConfig+0x8a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008454:	d017      	beq.n	8008486 <TIM_Base_SetConfig+0x8a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a22      	ldr	r2, [pc, #136]	; (80084e4 <TIM_Base_SetConfig+0xe8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <TIM_Base_SetConfig+0x8a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a21      	ldr	r2, [pc, #132]	; (80084e8 <TIM_Base_SetConfig+0xec>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00f      	beq.n	8008486 <TIM_Base_SetConfig+0x8a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a20      	ldr	r2, [pc, #128]	; (80084ec <TIM_Base_SetConfig+0xf0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_Base_SetConfig+0x8a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <TIM_Base_SetConfig+0xf4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <TIM_Base_SetConfig+0x8a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a1e      	ldr	r2, [pc, #120]	; (80084f4 <TIM_Base_SetConfig+0xf8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_Base_SetConfig+0x8a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a1d      	ldr	r2, [pc, #116]	; (80084f8 <TIM_Base_SetConfig+0xfc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d108      	bne.n	8008498 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a08      	ldr	r2, [pc, #32]	; (80084e0 <TIM_Base_SetConfig+0xe4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d103      	bne.n	80084cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	615a      	str	r2, [r3, #20]
}
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	40010000 	.word	0x40010000
 80084e4:	40000400 	.word	0x40000400
 80084e8:	40000800 	.word	0x40000800
 80084ec:	40000c00 	.word	0x40000c00
 80084f0:	40014000 	.word	0x40014000
 80084f4:	40014400 	.word	0x40014400
 80084f8:	40014800 	.word	0x40014800

080084fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	f023 0201 	bic.w	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0303 	bic.w	r3, r3, #3
 8008532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f023 0302 	bic.w	r3, r3, #2
 8008544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a1c      	ldr	r2, [pc, #112]	; (80085c4 <TIM_OC1_SetConfig+0xc8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d10c      	bne.n	8008572 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f023 0308 	bic.w	r3, r3, #8
 800855e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 0304 	bic.w	r3, r3, #4
 8008570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a13      	ldr	r2, [pc, #76]	; (80085c4 <TIM_OC1_SetConfig+0xc8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d111      	bne.n	800859e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	4313      	orrs	r3, r2
 8008592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	4313      	orrs	r3, r2
 800859c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	621a      	str	r2, [r3, #32]
}
 80085b8:	bf00      	nop
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	40010000 	.word	0x40010000

080085c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f023 0210 	bic.w	r2, r3, #16
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f023 0320 	bic.w	r3, r3, #32
 8008612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a1e      	ldr	r2, [pc, #120]	; (800869c <TIM_OC2_SetConfig+0xd4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10d      	bne.n	8008644 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a15      	ldr	r2, [pc, #84]	; (800869c <TIM_OC2_SetConfig+0xd4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d113      	bne.n	8008674 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800865a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40010000 	.word	0x40010000

080086a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0303 	bic.w	r3, r3, #3
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a1d      	ldr	r2, [pc, #116]	; (8008770 <TIM_OC3_SetConfig+0xd0>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d10d      	bne.n	800871a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	021b      	lsls	r3, r3, #8
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a14      	ldr	r2, [pc, #80]	; (8008770 <TIM_OC3_SetConfig+0xd0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d113      	bne.n	800874a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	621a      	str	r2, [r3, #32]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	40010000 	.word	0x40010000

08008774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	021b      	lsls	r3, r3, #8
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	031b      	lsls	r3, r3, #12
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a10      	ldr	r2, [pc, #64]	; (8008810 <TIM_OC4_SetConfig+0x9c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d109      	bne.n	80087e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	019b      	lsls	r3, r3, #6
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	621a      	str	r2, [r3, #32]
}
 8008802:	bf00      	nop
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	40010000 	.word	0x40010000

08008814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f003 031f 	and.w	r3, r3, #31
 8008826:	2201      	movs	r2, #1
 8008828:	fa02 f303 	lsl.w	r3, r2, r3
 800882c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6a1a      	ldr	r2, [r3, #32]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	43db      	mvns	r3, r3
 8008836:	401a      	ands	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a1a      	ldr	r2, [r3, #32]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f003 031f 	and.w	r3, r3, #31
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	fa01 f303 	lsl.w	r3, r1, r3
 800884c:	431a      	orrs	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	621a      	str	r2, [r3, #32]
}
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008874:	2302      	movs	r3, #2
 8008876:	e050      	b.n	800891a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a1c      	ldr	r2, [pc, #112]	; (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c4:	d013      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a18      	ldr	r2, [pc, #96]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00e      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a16      	ldr	r2, [pc, #88]	; (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a15      	ldr	r2, [pc, #84]	; (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a13      	ldr	r2, [pc, #76]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d10c      	bne.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40010000 	.word	0x40010000
 800892c:	40000400 	.word	0x40000400
 8008930:	40000800 	.word	0x40000800
 8008934:	40000c00 	.word	0x40000c00
 8008938:	40014000 	.word	0x40014000

0800893c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e03f      	b.n	80089ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7f9 fc5c 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2224      	movs	r2, #36	; 0x24
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800897e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 faa5 	bl	8008ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	691a      	ldr	r2, [r3, #16]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	4613      	mov	r3, r2
 80089e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b20      	cmp	r3, #32
 80089ee:	d11d      	bne.n	8008a2c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <HAL_UART_Receive_DMA+0x26>
 80089f6:	88fb      	ldrh	r3, [r7, #6]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e016      	b.n	8008a2e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_UART_Receive_DMA+0x38>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e00f      	b.n	8008a2e <HAL_UART_Receive_DMA+0x58>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f92a 	bl	8008c7c <UART_Start_Receive_DMA>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	e000      	b.n	8008a2e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008a2c:	2302      	movs	r3, #2
  }
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008a3e:	bf00      	nop
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b09c      	sub	sp, #112	; 0x70
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d172      	bne.n	8008b8c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	330c      	adds	r3, #12
 8008ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	330c      	adds	r3, #12
 8008aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008acc:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ace:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e5      	bne.n	8008aac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3314      	adds	r3, #20
 8008ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	667b      	str	r3, [r7, #100]	; 0x64
 8008af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3314      	adds	r3, #20
 8008afe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b00:	647a      	str	r2, [r7, #68]	; 0x44
 8008b02:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e5      	bne.n	8008ae0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3314      	adds	r3, #20
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	623b      	str	r3, [r7, #32]
   return(result);
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8008b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3314      	adds	r3, #20
 8008b32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b34:	633a      	str	r2, [r7, #48]	; 0x30
 8008b36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e5      	bne.n	8008b14 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d119      	bne.n	8008b8c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	330c      	adds	r3, #12
 8008b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0310 	bic.w	r3, r3, #16
 8008b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	330c      	adds	r3, #12
 8008b76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b78:	61fa      	str	r2, [r7, #28]
 8008b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	69b9      	ldr	r1, [r7, #24]
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	617b      	str	r3, [r7, #20]
   return(result);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e5      	bne.n	8008b58 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d106      	bne.n	8008ba2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b9c:	f7ff ff69 	bl	8008a72 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ba0:	e002      	b.n	8008ba8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008ba2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ba4:	f7ff ff47 	bl	8008a36 <HAL_UART_RxCpltCallback>
}
 8008ba8:	bf00      	nop
 8008baa:	3770      	adds	r7, #112	; 0x70
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d108      	bne.n	8008bd8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	4619      	mov	r1, r3
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff ff4e 	bl	8008a72 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bd6:	e002      	b.n	8008bde <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7ff ff36 	bl	8008a4a <HAL_UART_RxHalfCpltCallback>
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	bf0c      	ite	eq
 8008c06:	2301      	moveq	r3, #1
 8008c08:	2300      	movne	r3, #0
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b21      	cmp	r3, #33	; 0x21
 8008c18:	d108      	bne.n	8008c2c <UART_DMAError+0x46>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c26:	68b8      	ldr	r0, [r7, #8]
 8008c28:	f000 f8c6 	bl	8008db8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	bf0c      	ite	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	2300      	movne	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b22      	cmp	r3, #34	; 0x22
 8008c4c:	d108      	bne.n	8008c60 <UART_DMAError+0x7a>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2200      	movs	r2, #0
 8008c58:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c5a:	68b8      	ldr	r0, [r7, #8]
 8008c5c:	f000 f8d4 	bl	8008e08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c64:	f043 0210 	orr.w	r2, r3, #16
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c6c:	68b8      	ldr	r0, [r7, #8]
 8008c6e:	f7ff fef6 	bl	8008a5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c72:	bf00      	nop
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b098      	sub	sp, #96	; 0x60
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2222      	movs	r2, #34	; 0x22
 8008ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	4a40      	ldr	r2, [pc, #256]	; (8008dac <UART_Start_Receive_DMA+0x130>)
 8008caa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	4a3f      	ldr	r2, [pc, #252]	; (8008db0 <UART_Start_Receive_DMA+0x134>)
 8008cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	4a3e      	ldr	r2, [pc, #248]	; (8008db4 <UART_Start_Receive_DMA+0x138>)
 8008cba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008cc4:	f107 0308 	add.w	r3, r7, #8
 8008cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	88fb      	ldrh	r3, [r7, #6]
 8008cdc:	f7fc f830 	bl	8004d40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	613b      	str	r3, [r7, #16]
 8008cf4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d019      	beq.n	8008d3a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	330c      	adds	r3, #12
 8008d0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	330c      	adds	r3, #12
 8008d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008d28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e5      	bne.n	8008d06 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3314      	adds	r3, #20
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	f043 0301 	orr.w	r3, r3, #1
 8008d50:	657b      	str	r3, [r7, #84]	; 0x54
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3314      	adds	r3, #20
 8008d58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d5a:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e5      	bne.n	8008d3a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3314      	adds	r3, #20
 8008d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d84:	653b      	str	r3, [r7, #80]	; 0x50
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3314      	adds	r3, #20
 8008d8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d8e:	627a      	str	r2, [r7, #36]	; 0x24
 8008d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6a39      	ldr	r1, [r7, #32]
 8008d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3760      	adds	r7, #96	; 0x60
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	08008a8b 	.word	0x08008a8b
 8008db0:	08008bb1 	.word	0x08008bb1
 8008db4:	08008be7 	.word	0x08008be7

08008db8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b089      	sub	sp, #36	; 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	330c      	adds	r3, #12
 8008dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	e853 3f00 	ldrex	r3, [r3]
 8008dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008dd6:	61fb      	str	r3, [r7, #28]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	330c      	adds	r3, #12
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	61ba      	str	r2, [r7, #24]
 8008de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de4:	6979      	ldr	r1, [r7, #20]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	e841 2300 	strex	r3, r2, [r1]
 8008dec:	613b      	str	r3, [r7, #16]
   return(result);
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e5      	bne.n	8008dc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2220      	movs	r2, #32
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008dfc:	bf00      	nop
 8008dfe:	3724      	adds	r7, #36	; 0x24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b095      	sub	sp, #84	; 0x54
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	330c      	adds	r3, #12
 8008e16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e30:	643a      	str	r2, [r7, #64]	; 0x40
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e5      	bne.n	8008e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3314      	adds	r3, #20
 8008e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	e853 3f00 	ldrex	r3, [r3]
 8008e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	f023 0301 	bic.w	r3, r3, #1
 8008e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3314      	adds	r3, #20
 8008e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e5      	bne.n	8008e44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d119      	bne.n	8008eb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	330c      	adds	r3, #12
 8008e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f023 0310 	bic.w	r3, r3, #16
 8008e96:	647b      	str	r3, [r7, #68]	; 0x44
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	330c      	adds	r3, #12
 8008e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ea0:	61ba      	str	r2, [r7, #24]
 8008ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6979      	ldr	r1, [r7, #20]
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	613b      	str	r3, [r7, #16]
   return(result);
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e5      	bne.n	8008e80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ec2:	bf00      	nop
 8008ec4:	3754      	adds	r7, #84	; 0x54
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
	...

08008ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ed4:	b0c0      	sub	sp, #256	; 0x100
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eec:	68d9      	ldr	r1, [r3, #12]
 8008eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	ea40 0301 	orr.w	r3, r0, r1
 8008ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	431a      	orrs	r2, r3
 8008f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f28:	f021 010c 	bic.w	r1, r1, #12
 8008f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f36:	430b      	orrs	r3, r1
 8008f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4a:	6999      	ldr	r1, [r3, #24]
 8008f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	ea40 0301 	orr.w	r3, r0, r1
 8008f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4b8f      	ldr	r3, [pc, #572]	; (800919c <UART_SetConfig+0x2cc>)
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d005      	beq.n	8008f70 <UART_SetConfig+0xa0>
 8008f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	4b8d      	ldr	r3, [pc, #564]	; (80091a0 <UART_SetConfig+0x2d0>)
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d104      	bne.n	8008f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f70:	f7ff f86e 	bl	8008050 <HAL_RCC_GetPCLK2Freq>
 8008f74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f78:	e003      	b.n	8008f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f7a:	f7ff f855 	bl	8008028 <HAL_RCC_GetPCLK1Freq>
 8008f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8c:	f040 810c 	bne.w	80091a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	1891      	adds	r1, r2, r2
 8008fa8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008faa:	415b      	adcs	r3, r3
 8008fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	eb12 0801 	adds.w	r8, r2, r1
 8008fb8:	4629      	mov	r1, r5
 8008fba:	eb43 0901 	adc.w	r9, r3, r1
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	f04f 0300 	mov.w	r3, #0
 8008fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fd2:	4690      	mov	r8, r2
 8008fd4:	4699      	mov	r9, r3
 8008fd6:	4623      	mov	r3, r4
 8008fd8:	eb18 0303 	adds.w	r3, r8, r3
 8008fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fe0:	462b      	mov	r3, r5
 8008fe2:	eb49 0303 	adc.w	r3, r9, r3
 8008fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ffe:	460b      	mov	r3, r1
 8009000:	18db      	adds	r3, r3, r3
 8009002:	653b      	str	r3, [r7, #80]	; 0x50
 8009004:	4613      	mov	r3, r2
 8009006:	eb42 0303 	adc.w	r3, r2, r3
 800900a:	657b      	str	r3, [r7, #84]	; 0x54
 800900c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009014:	f7f7 fe40 	bl	8000c98 <__aeabi_uldivmod>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4b61      	ldr	r3, [pc, #388]	; (80091a4 <UART_SetConfig+0x2d4>)
 800901e:	fba3 2302 	umull	r2, r3, r3, r2
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	011c      	lsls	r4, r3, #4
 8009026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800902a:	2200      	movs	r2, #0
 800902c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009030:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009038:	4642      	mov	r2, r8
 800903a:	464b      	mov	r3, r9
 800903c:	1891      	adds	r1, r2, r2
 800903e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009040:	415b      	adcs	r3, r3
 8009042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009048:	4641      	mov	r1, r8
 800904a:	eb12 0a01 	adds.w	sl, r2, r1
 800904e:	4649      	mov	r1, r9
 8009050:	eb43 0b01 	adc.w	fp, r3, r1
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009068:	4692      	mov	sl, r2
 800906a:	469b      	mov	fp, r3
 800906c:	4643      	mov	r3, r8
 800906e:	eb1a 0303 	adds.w	r3, sl, r3
 8009072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009076:	464b      	mov	r3, r9
 8009078:	eb4b 0303 	adc.w	r3, fp, r3
 800907c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800908c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009094:	460b      	mov	r3, r1
 8009096:	18db      	adds	r3, r3, r3
 8009098:	643b      	str	r3, [r7, #64]	; 0x40
 800909a:	4613      	mov	r3, r2
 800909c:	eb42 0303 	adc.w	r3, r2, r3
 80090a0:	647b      	str	r3, [r7, #68]	; 0x44
 80090a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80090a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80090aa:	f7f7 fdf5 	bl	8000c98 <__aeabi_uldivmod>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4611      	mov	r1, r2
 80090b4:	4b3b      	ldr	r3, [pc, #236]	; (80091a4 <UART_SetConfig+0x2d4>)
 80090b6:	fba3 2301 	umull	r2, r3, r3, r1
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	2264      	movs	r2, #100	; 0x64
 80090be:	fb02 f303 	mul.w	r3, r2, r3
 80090c2:	1acb      	subs	r3, r1, r3
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80090ca:	4b36      	ldr	r3, [pc, #216]	; (80091a4 <UART_SetConfig+0x2d4>)
 80090cc:	fba3 2302 	umull	r2, r3, r3, r2
 80090d0:	095b      	lsrs	r3, r3, #5
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090d8:	441c      	add	r4, r3
 80090da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80090e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80090ec:	4642      	mov	r2, r8
 80090ee:	464b      	mov	r3, r9
 80090f0:	1891      	adds	r1, r2, r2
 80090f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80090f4:	415b      	adcs	r3, r3
 80090f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80090fc:	4641      	mov	r1, r8
 80090fe:	1851      	adds	r1, r2, r1
 8009100:	6339      	str	r1, [r7, #48]	; 0x30
 8009102:	4649      	mov	r1, r9
 8009104:	414b      	adcs	r3, r1
 8009106:	637b      	str	r3, [r7, #52]	; 0x34
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009114:	4659      	mov	r1, fp
 8009116:	00cb      	lsls	r3, r1, #3
 8009118:	4651      	mov	r1, sl
 800911a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800911e:	4651      	mov	r1, sl
 8009120:	00ca      	lsls	r2, r1, #3
 8009122:	4610      	mov	r0, r2
 8009124:	4619      	mov	r1, r3
 8009126:	4603      	mov	r3, r0
 8009128:	4642      	mov	r2, r8
 800912a:	189b      	adds	r3, r3, r2
 800912c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009130:	464b      	mov	r3, r9
 8009132:	460a      	mov	r2, r1
 8009134:	eb42 0303 	adc.w	r3, r2, r3
 8009138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800913c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009148:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800914c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009150:	460b      	mov	r3, r1
 8009152:	18db      	adds	r3, r3, r3
 8009154:	62bb      	str	r3, [r7, #40]	; 0x28
 8009156:	4613      	mov	r3, r2
 8009158:	eb42 0303 	adc.w	r3, r2, r3
 800915c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800915e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009166:	f7f7 fd97 	bl	8000c98 <__aeabi_uldivmod>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <UART_SetConfig+0x2d4>)
 8009170:	fba3 1302 	umull	r1, r3, r3, r2
 8009174:	095b      	lsrs	r3, r3, #5
 8009176:	2164      	movs	r1, #100	; 0x64
 8009178:	fb01 f303 	mul.w	r3, r1, r3
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	3332      	adds	r3, #50	; 0x32
 8009182:	4a08      	ldr	r2, [pc, #32]	; (80091a4 <UART_SetConfig+0x2d4>)
 8009184:	fba2 2303 	umull	r2, r3, r2, r3
 8009188:	095b      	lsrs	r3, r3, #5
 800918a:	f003 0207 	and.w	r2, r3, #7
 800918e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4422      	add	r2, r4
 8009196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009198:	e106      	b.n	80093a8 <UART_SetConfig+0x4d8>
 800919a:	bf00      	nop
 800919c:	40011000 	.word	0x40011000
 80091a0:	40011400 	.word	0x40011400
 80091a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091ac:	2200      	movs	r2, #0
 80091ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80091b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80091b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80091ba:	4642      	mov	r2, r8
 80091bc:	464b      	mov	r3, r9
 80091be:	1891      	adds	r1, r2, r2
 80091c0:	6239      	str	r1, [r7, #32]
 80091c2:	415b      	adcs	r3, r3
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
 80091c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091ca:	4641      	mov	r1, r8
 80091cc:	1854      	adds	r4, r2, r1
 80091ce:	4649      	mov	r1, r9
 80091d0:	eb43 0501 	adc.w	r5, r3, r1
 80091d4:	f04f 0200 	mov.w	r2, #0
 80091d8:	f04f 0300 	mov.w	r3, #0
 80091dc:	00eb      	lsls	r3, r5, #3
 80091de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091e2:	00e2      	lsls	r2, r4, #3
 80091e4:	4614      	mov	r4, r2
 80091e6:	461d      	mov	r5, r3
 80091e8:	4643      	mov	r3, r8
 80091ea:	18e3      	adds	r3, r4, r3
 80091ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091f0:	464b      	mov	r3, r9
 80091f2:	eb45 0303 	adc.w	r3, r5, r3
 80091f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009206:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	f04f 0300 	mov.w	r3, #0
 8009212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009216:	4629      	mov	r1, r5
 8009218:	008b      	lsls	r3, r1, #2
 800921a:	4621      	mov	r1, r4
 800921c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009220:	4621      	mov	r1, r4
 8009222:	008a      	lsls	r2, r1, #2
 8009224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009228:	f7f7 fd36 	bl	8000c98 <__aeabi_uldivmod>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4b60      	ldr	r3, [pc, #384]	; (80093b4 <UART_SetConfig+0x4e4>)
 8009232:	fba3 2302 	umull	r2, r3, r3, r2
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	011c      	lsls	r4, r3, #4
 800923a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800923e:	2200      	movs	r2, #0
 8009240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009244:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800924c:	4642      	mov	r2, r8
 800924e:	464b      	mov	r3, r9
 8009250:	1891      	adds	r1, r2, r2
 8009252:	61b9      	str	r1, [r7, #24]
 8009254:	415b      	adcs	r3, r3
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800925c:	4641      	mov	r1, r8
 800925e:	1851      	adds	r1, r2, r1
 8009260:	6139      	str	r1, [r7, #16]
 8009262:	4649      	mov	r1, r9
 8009264:	414b      	adcs	r3, r1
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	f04f 0300 	mov.w	r3, #0
 8009270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009274:	4659      	mov	r1, fp
 8009276:	00cb      	lsls	r3, r1, #3
 8009278:	4651      	mov	r1, sl
 800927a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800927e:	4651      	mov	r1, sl
 8009280:	00ca      	lsls	r2, r1, #3
 8009282:	4610      	mov	r0, r2
 8009284:	4619      	mov	r1, r3
 8009286:	4603      	mov	r3, r0
 8009288:	4642      	mov	r2, r8
 800928a:	189b      	adds	r3, r3, r2
 800928c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009290:	464b      	mov	r3, r9
 8009292:	460a      	mov	r2, r1
 8009294:	eb42 0303 	adc.w	r3, r2, r3
 8009298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800929c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80092a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80092b4:	4649      	mov	r1, r9
 80092b6:	008b      	lsls	r3, r1, #2
 80092b8:	4641      	mov	r1, r8
 80092ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092be:	4641      	mov	r1, r8
 80092c0:	008a      	lsls	r2, r1, #2
 80092c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80092c6:	f7f7 fce7 	bl	8000c98 <__aeabi_uldivmod>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	4b38      	ldr	r3, [pc, #224]	; (80093b4 <UART_SetConfig+0x4e4>)
 80092d2:	fba3 2301 	umull	r2, r3, r3, r1
 80092d6:	095b      	lsrs	r3, r3, #5
 80092d8:	2264      	movs	r2, #100	; 0x64
 80092da:	fb02 f303 	mul.w	r3, r2, r3
 80092de:	1acb      	subs	r3, r1, r3
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	3332      	adds	r3, #50	; 0x32
 80092e4:	4a33      	ldr	r2, [pc, #204]	; (80093b4 <UART_SetConfig+0x4e4>)
 80092e6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ea:	095b      	lsrs	r3, r3, #5
 80092ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092f0:	441c      	add	r4, r3
 80092f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092f6:	2200      	movs	r2, #0
 80092f8:	673b      	str	r3, [r7, #112]	; 0x70
 80092fa:	677a      	str	r2, [r7, #116]	; 0x74
 80092fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	1891      	adds	r1, r2, r2
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	415b      	adcs	r3, r3
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009310:	4641      	mov	r1, r8
 8009312:	1851      	adds	r1, r2, r1
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	4649      	mov	r1, r9
 8009318:	414b      	adcs	r3, r1
 800931a:	607b      	str	r3, [r7, #4]
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009328:	4659      	mov	r1, fp
 800932a:	00cb      	lsls	r3, r1, #3
 800932c:	4651      	mov	r1, sl
 800932e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009332:	4651      	mov	r1, sl
 8009334:	00ca      	lsls	r2, r1, #3
 8009336:	4610      	mov	r0, r2
 8009338:	4619      	mov	r1, r3
 800933a:	4603      	mov	r3, r0
 800933c:	4642      	mov	r2, r8
 800933e:	189b      	adds	r3, r3, r2
 8009340:	66bb      	str	r3, [r7, #104]	; 0x68
 8009342:	464b      	mov	r3, r9
 8009344:	460a      	mov	r2, r1
 8009346:	eb42 0303 	adc.w	r3, r2, r3
 800934a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800934c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	663b      	str	r3, [r7, #96]	; 0x60
 8009356:	667a      	str	r2, [r7, #100]	; 0x64
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009364:	4649      	mov	r1, r9
 8009366:	008b      	lsls	r3, r1, #2
 8009368:	4641      	mov	r1, r8
 800936a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800936e:	4641      	mov	r1, r8
 8009370:	008a      	lsls	r2, r1, #2
 8009372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009376:	f7f7 fc8f 	bl	8000c98 <__aeabi_uldivmod>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <UART_SetConfig+0x4e4>)
 8009380:	fba3 1302 	umull	r1, r3, r3, r2
 8009384:	095b      	lsrs	r3, r3, #5
 8009386:	2164      	movs	r1, #100	; 0x64
 8009388:	fb01 f303 	mul.w	r3, r1, r3
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	3332      	adds	r3, #50	; 0x32
 8009392:	4a08      	ldr	r2, [pc, #32]	; (80093b4 <UART_SetConfig+0x4e4>)
 8009394:	fba2 2303 	umull	r2, r3, r2, r3
 8009398:	095b      	lsrs	r3, r3, #5
 800939a:	f003 020f 	and.w	r2, r3, #15
 800939e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4422      	add	r2, r4
 80093a6:	609a      	str	r2, [r3, #8]
}
 80093a8:	bf00      	nop
 80093aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80093ae:	46bd      	mov	sp, r7
 80093b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093b4:	51eb851f 	.word	0x51eb851f

080093b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093b8:	b084      	sub	sp, #16
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	f107 001c 	add.w	r0, r7, #28
 80093c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d122      	bne.n	8009416 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80093e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d105      	bne.n	800940a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 fbee 	bl	800abec <USB_CoreReset>
 8009410:	4603      	mov	r3, r0
 8009412:	73fb      	strb	r3, [r7, #15]
 8009414:	e01a      	b.n	800944c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f001 fbe2 	bl	800abec <USB_CoreReset>
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800942c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d106      	bne.n	8009440 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	639a      	str	r2, [r3, #56]	; 0x38
 800943e:	e005      	b.n	800944c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009444:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	2b01      	cmp	r3, #1
 8009450:	d10b      	bne.n	800946a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f043 0206 	orr.w	r2, r3, #6
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f043 0220 	orr.w	r2, r3, #32
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009476:	b004      	add	sp, #16
 8009478:	4770      	bx	lr
	...

0800947c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800948a:	79fb      	ldrb	r3, [r7, #7]
 800948c:	2b02      	cmp	r3, #2
 800948e:	d165      	bne.n	800955c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	4a41      	ldr	r2, [pc, #260]	; (8009598 <USB_SetTurnaroundTime+0x11c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d906      	bls.n	80094a6 <USB_SetTurnaroundTime+0x2a>
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4a40      	ldr	r2, [pc, #256]	; (800959c <USB_SetTurnaroundTime+0x120>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d202      	bcs.n	80094a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80094a0:	230f      	movs	r3, #15
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	e062      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	4a3c      	ldr	r2, [pc, #240]	; (800959c <USB_SetTurnaroundTime+0x120>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d306      	bcc.n	80094bc <USB_SetTurnaroundTime+0x40>
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	4a3b      	ldr	r2, [pc, #236]	; (80095a0 <USB_SetTurnaroundTime+0x124>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d202      	bcs.n	80094bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80094b6:	230e      	movs	r3, #14
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	e057      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4a38      	ldr	r2, [pc, #224]	; (80095a0 <USB_SetTurnaroundTime+0x124>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d306      	bcc.n	80094d2 <USB_SetTurnaroundTime+0x56>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4a37      	ldr	r2, [pc, #220]	; (80095a4 <USB_SetTurnaroundTime+0x128>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d202      	bcs.n	80094d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80094cc:	230d      	movs	r3, #13
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	e04c      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	4a33      	ldr	r2, [pc, #204]	; (80095a4 <USB_SetTurnaroundTime+0x128>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d306      	bcc.n	80094e8 <USB_SetTurnaroundTime+0x6c>
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4a32      	ldr	r2, [pc, #200]	; (80095a8 <USB_SetTurnaroundTime+0x12c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d802      	bhi.n	80094e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80094e2:	230c      	movs	r3, #12
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	e041      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	4a2f      	ldr	r2, [pc, #188]	; (80095a8 <USB_SetTurnaroundTime+0x12c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d906      	bls.n	80094fe <USB_SetTurnaroundTime+0x82>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4a2e      	ldr	r2, [pc, #184]	; (80095ac <USB_SetTurnaroundTime+0x130>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d802      	bhi.n	80094fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80094f8:	230b      	movs	r3, #11
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	e036      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4a2a      	ldr	r2, [pc, #168]	; (80095ac <USB_SetTurnaroundTime+0x130>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d906      	bls.n	8009514 <USB_SetTurnaroundTime+0x98>
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	4a29      	ldr	r2, [pc, #164]	; (80095b0 <USB_SetTurnaroundTime+0x134>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d802      	bhi.n	8009514 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800950e:	230a      	movs	r3, #10
 8009510:	617b      	str	r3, [r7, #20]
 8009512:	e02b      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4a26      	ldr	r2, [pc, #152]	; (80095b0 <USB_SetTurnaroundTime+0x134>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d906      	bls.n	800952a <USB_SetTurnaroundTime+0xae>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4a25      	ldr	r2, [pc, #148]	; (80095b4 <USB_SetTurnaroundTime+0x138>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d202      	bcs.n	800952a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009524:	2309      	movs	r3, #9
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e020      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	4a21      	ldr	r2, [pc, #132]	; (80095b4 <USB_SetTurnaroundTime+0x138>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d306      	bcc.n	8009540 <USB_SetTurnaroundTime+0xc4>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	4a20      	ldr	r2, [pc, #128]	; (80095b8 <USB_SetTurnaroundTime+0x13c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d802      	bhi.n	8009540 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800953a:	2308      	movs	r3, #8
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	e015      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4a1d      	ldr	r2, [pc, #116]	; (80095b8 <USB_SetTurnaroundTime+0x13c>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d906      	bls.n	8009556 <USB_SetTurnaroundTime+0xda>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4a1c      	ldr	r2, [pc, #112]	; (80095bc <USB_SetTurnaroundTime+0x140>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d202      	bcs.n	8009556 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009550:	2307      	movs	r3, #7
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e00a      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009556:	2306      	movs	r3, #6
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	e007      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009562:	2309      	movs	r3, #9
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	e001      	b.n	800956c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009568:	2309      	movs	r3, #9
 800956a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	029b      	lsls	r3, r3, #10
 8009580:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009584:	431a      	orrs	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	371c      	adds	r7, #28
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	00d8acbf 	.word	0x00d8acbf
 800959c:	00e4e1c0 	.word	0x00e4e1c0
 80095a0:	00f42400 	.word	0x00f42400
 80095a4:	01067380 	.word	0x01067380
 80095a8:	011a499f 	.word	0x011a499f
 80095ac:	01312cff 	.word	0x01312cff
 80095b0:	014ca43f 	.word	0x014ca43f
 80095b4:	016e3600 	.word	0x016e3600
 80095b8:	01a6ab1f 	.word	0x01a6ab1f
 80095bc:	01e84800 	.word	0x01e84800

080095c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f043 0201 	orr.w	r2, r3, #1
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f023 0201 	bic.w	r2, r3, #1
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d115      	bne.n	8009652 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009632:	2001      	movs	r0, #1
 8009634:	f7fa fdd8 	bl	80041e8 <HAL_Delay>
      ms++;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 fa45 	bl	800aace <USB_GetMode>
 8009644:	4603      	mov	r3, r0
 8009646:	2b01      	cmp	r3, #1
 8009648:	d01e      	beq.n	8009688 <USB_SetCurrentMode+0x84>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b31      	cmp	r3, #49	; 0x31
 800964e:	d9f0      	bls.n	8009632 <USB_SetCurrentMode+0x2e>
 8009650:	e01a      	b.n	8009688 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d115      	bne.n	8009684 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009664:	2001      	movs	r0, #1
 8009666:	f7fa fdbf 	bl	80041e8 <HAL_Delay>
      ms++;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3301      	adds	r3, #1
 800966e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 fa2c 	bl	800aace <USB_GetMode>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <USB_SetCurrentMode+0x84>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b31      	cmp	r3, #49	; 0x31
 8009680:	d9f0      	bls.n	8009664 <USB_SetCurrentMode+0x60>
 8009682:	e001      	b.n	8009688 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e005      	b.n	8009694 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b32      	cmp	r3, #50	; 0x32
 800968c:	d101      	bne.n	8009692 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e000      	b.n	8009694 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800969c:	b084      	sub	sp, #16
 800969e:	b580      	push	{r7, lr}
 80096a0:	b086      	sub	sp, #24
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80096aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096b6:	2300      	movs	r3, #0
 80096b8:	613b      	str	r3, [r7, #16]
 80096ba:	e009      	b.n	80096d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	3340      	adds	r3, #64	; 0x40
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	2200      	movs	r2, #0
 80096c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	3301      	adds	r3, #1
 80096ce:	613b      	str	r3, [r7, #16]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	2b0e      	cmp	r3, #14
 80096d4:	d9f2      	bls.n	80096bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d11c      	bne.n	8009716 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096ea:	f043 0302 	orr.w	r3, r3, #2
 80096ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	639a      	str	r2, [r3, #56]	; 0x38
 8009714:	e00b      	b.n	800972e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009734:	461a      	mov	r2, r3
 8009736:	2300      	movs	r3, #0
 8009738:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009740:	4619      	mov	r1, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009748:	461a      	mov	r2, r3
 800974a:	680b      	ldr	r3, [r1, #0]
 800974c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	2b01      	cmp	r3, #1
 8009752:	d10c      	bne.n	800976e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	2b00      	cmp	r3, #0
 8009758:	d104      	bne.n	8009764 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800975a:	2100      	movs	r1, #0
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f965 	bl	8009a2c <USB_SetDevSpeed>
 8009762:	e008      	b.n	8009776 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009764:	2101      	movs	r1, #1
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f960 	bl	8009a2c <USB_SetDevSpeed>
 800976c:	e003      	b.n	8009776 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800976e:	2103      	movs	r1, #3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f95b 	bl	8009a2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009776:	2110      	movs	r1, #16
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f8f3 	bl	8009964 <USB_FlushTxFifo>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f91f 	bl	80099cc <USB_FlushRxFifo>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979e:	461a      	mov	r2, r3
 80097a0:	2300      	movs	r3, #0
 80097a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097aa:	461a      	mov	r2, r3
 80097ac:	2300      	movs	r3, #0
 80097ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b6:	461a      	mov	r2, r3
 80097b8:	2300      	movs	r3, #0
 80097ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097bc:	2300      	movs	r3, #0
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	e043      	b.n	800984a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097d8:	d118      	bne.n	800980c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ec:	461a      	mov	r2, r3
 80097ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	e013      	b.n	800981e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009802:	461a      	mov	r2, r3
 8009804:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	e008      	b.n	800981e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009818:	461a      	mov	r2, r3
 800981a:	2300      	movs	r3, #0
 800981c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982a:	461a      	mov	r2, r3
 800982c:	2300      	movs	r3, #0
 800982e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983c:	461a      	mov	r2, r3
 800983e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009842:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3301      	adds	r3, #1
 8009848:	613b      	str	r3, [r7, #16]
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	429a      	cmp	r2, r3
 8009850:	d3b7      	bcc.n	80097c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009852:	2300      	movs	r3, #0
 8009854:	613b      	str	r3, [r7, #16]
 8009856:	e043      	b.n	80098e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800986a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800986e:	d118      	bne.n	80098a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10a      	bne.n	800988c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009882:	461a      	mov	r2, r3
 8009884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	e013      	b.n	80098b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009898:	461a      	mov	r2, r3
 800989a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	e008      	b.n	80098b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ae:	461a      	mov	r2, r3
 80098b0:	2300      	movs	r3, #0
 80098b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c0:	461a      	mov	r2, r3
 80098c2:	2300      	movs	r3, #0
 80098c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	461a      	mov	r2, r3
 80098d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	3301      	adds	r3, #1
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d3b7      	bcc.n	8009858 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009908:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	2b00      	cmp	r3, #0
 800990e:	d105      	bne.n	800991c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	f043 0210 	orr.w	r2, r3, #16
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	699a      	ldr	r2, [r3, #24]
 8009920:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <USB_DevInit+0x2c4>)
 8009922:	4313      	orrs	r3, r2
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d005      	beq.n	800993a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	f043 0208 	orr.w	r2, r3, #8
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800993a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800993c:	2b01      	cmp	r3, #1
 800993e:	d107      	bne.n	8009950 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009948:	f043 0304 	orr.w	r3, r3, #4
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800995c:	b004      	add	sp, #16
 800995e:	4770      	bx	lr
 8009960:	803c3800 	.word	0x803c3800

08009964 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3301      	adds	r3, #1
 8009976:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4a13      	ldr	r2, [pc, #76]	; (80099c8 <USB_FlushTxFifo+0x64>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d901      	bls.n	8009984 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e01b      	b.n	80099bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	daf2      	bge.n	8009972 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	019b      	lsls	r3, r3, #6
 8009994:	f043 0220 	orr.w	r2, r3, #32
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3301      	adds	r3, #1
 80099a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <USB_FlushTxFifo+0x64>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d901      	bls.n	80099ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e006      	b.n	80099bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b20      	cmp	r3, #32
 80099b8:	d0f0      	beq.n	800999c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	00030d40 	.word	0x00030d40

080099cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3301      	adds	r3, #1
 80099dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4a11      	ldr	r2, [pc, #68]	; (8009a28 <USB_FlushRxFifo+0x5c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d901      	bls.n	80099ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e018      	b.n	8009a1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	daf2      	bge.n	80099d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2210      	movs	r2, #16
 80099fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3301      	adds	r3, #1
 8009a00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4a08      	ldr	r2, [pc, #32]	; (8009a28 <USB_FlushRxFifo+0x5c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d901      	bls.n	8009a0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e006      	b.n	8009a1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	d0f0      	beq.n	80099fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	00030d40 	.word	0x00030d40

08009a2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	68f9      	ldr	r1, [r7, #12]
 8009a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b087      	sub	sp, #28
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f003 0306 	and.w	r3, r3, #6
 8009a76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d102      	bne.n	8009a84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	75fb      	strb	r3, [r7, #23]
 8009a82:	e00a      	b.n	8009a9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d002      	beq.n	8009a90 <USB_GetDevSpeed+0x32>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b06      	cmp	r3, #6
 8009a8e:	d102      	bne.n	8009a96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009a90:	2302      	movs	r3, #2
 8009a92:	75fb      	strb	r3, [r7, #23]
 8009a94:	e001      	b.n	8009a9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009a96:	230f      	movs	r3, #15
 8009a98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	785b      	ldrb	r3, [r3, #1]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d13a      	bne.n	8009b3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aca:	69da      	ldr	r2, [r3, #28]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	f003 030f 	and.w	r3, r3, #15
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	68f9      	ldr	r1, [r7, #12]
 8009ade:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d155      	bne.n	8009ba8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	791b      	ldrb	r3, [r3, #4]
 8009b16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	059b      	lsls	r3, r3, #22
 8009b1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b20:	4313      	orrs	r3, r2
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	0151      	lsls	r1, r2, #5
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	440a      	add	r2, r1
 8009b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	e036      	b.n	8009ba8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b40:	69da      	ldr	r2, [r3, #28]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	f003 030f 	and.w	r3, r3, #15
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b50:	041b      	lsls	r3, r3, #16
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d11a      	bne.n	8009ba8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	791b      	ldrb	r3, [r3, #4]
 8009b8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	4313      	orrs	r3, r2
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	0151      	lsls	r1, r2, #5
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	440a      	add	r2, r1
 8009b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
	...

08009bb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d161      	bne.n	8009c98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bea:	d11f      	bne.n	8009c2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	0151      	lsls	r1, r2, #5
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	440a      	add	r2, r1
 8009c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	0151      	lsls	r1, r2, #5
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	440a      	add	r2, r1
 8009c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	f003 030f 	and.w	r3, r3, #15
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	43db      	mvns	r3, r3
 8009c46:	68f9      	ldr	r1, [r7, #12]
 8009c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c56:	69da      	ldr	r2, [r3, #28]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	2101      	movs	r1, #1
 8009c62:	fa01 f303 	lsl.w	r3, r1, r3
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	43db      	mvns	r3, r3
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c70:	4013      	ands	r3, r2
 8009c72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	0159      	lsls	r1, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	440b      	add	r3, r1
 8009c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8e:	4619      	mov	r1, r3
 8009c90:	4b35      	ldr	r3, [pc, #212]	; (8009d68 <USB_DeactivateEndpoint+0x1b0>)
 8009c92:	4013      	ands	r3, r2
 8009c94:	600b      	str	r3, [r1, #0]
 8009c96:	e060      	b.n	8009d5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cae:	d11f      	bne.n	8009cf0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	0151      	lsls	r1, r2, #5
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	f003 030f 	and.w	r3, r3, #15
 8009d00:	2101      	movs	r1, #1
 8009d02:	fa01 f303 	lsl.w	r3, r1, r3
 8009d06:	041b      	lsls	r3, r3, #16
 8009d08:	43db      	mvns	r3, r3
 8009d0a:	68f9      	ldr	r1, [r7, #12]
 8009d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d10:	4013      	ands	r3, r2
 8009d12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1a:	69da      	ldr	r2, [r3, #28]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 030f 	and.w	r3, r3, #15
 8009d24:	2101      	movs	r1, #1
 8009d26:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2a:	041b      	lsls	r3, r3, #16
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d34:	4013      	ands	r3, r2
 8009d36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	0159      	lsls	r1, r3, #5
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	440b      	add	r3, r1
 8009d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d52:	4619      	mov	r1, r3
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <USB_DeactivateEndpoint+0x1b4>)
 8009d56:	4013      	ands	r3, r2
 8009d58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	ec337800 	.word	0xec337800
 8009d6c:	eff37800 	.word	0xeff37800

08009d70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08a      	sub	sp, #40	; 0x28
 8009d74:	af02      	add	r7, sp, #8
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	f040 815c 	bne.w	800a04a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d132      	bne.n	8009e00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	0151      	lsls	r1, r2, #5
 8009dac:	69fa      	ldr	r2, [r7, #28]
 8009dae:	440a      	add	r2, r1
 8009db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009db4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009db8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009dbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	0151      	lsls	r1, r2, #5
 8009dd0:	69fa      	ldr	r2, [r7, #28]
 8009dd2:	440a      	add	r2, r1
 8009dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df8:	0cdb      	lsrs	r3, r3, #19
 8009dfa:	04db      	lsls	r3, r3, #19
 8009dfc:	6113      	str	r3, [r2, #16]
 8009dfe:	e074      	b.n	8009eea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	69ba      	ldr	r2, [r7, #24]
 8009e10:	0151      	lsls	r1, r2, #5
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	440a      	add	r2, r1
 8009e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1a:	0cdb      	lsrs	r3, r3, #19
 8009e1c:	04db      	lsls	r3, r3, #19
 8009e1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	0151      	lsls	r1, r2, #5
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	440a      	add	r2, r1
 8009e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6999      	ldr	r1, [r3, #24]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	440b      	add	r3, r1
 8009e5c:	1e59      	subs	r1, r3, #1
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009e68:	4b9d      	ldr	r3, [pc, #628]	; (800a0e0 <USB_EPStartXfer+0x370>)
 8009e6a:	400b      	ands	r3, r1
 8009e6c:	69b9      	ldr	r1, [r7, #24]
 8009e6e:	0148      	lsls	r0, r1, #5
 8009e70:	69f9      	ldr	r1, [r7, #28]
 8009e72:	4401      	add	r1, r0
 8009e74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e92:	69b9      	ldr	r1, [r7, #24]
 8009e94:	0148      	lsls	r0, r1, #5
 8009e96:	69f9      	ldr	r1, [r7, #28]
 8009e98:	4401      	add	r1, r0
 8009e9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	791b      	ldrb	r3, [r3, #4]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d11f      	bne.n	8009eea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	0151      	lsls	r1, r2, #5
 8009ebc:	69fa      	ldr	r2, [r7, #28]
 8009ebe:	440a      	add	r2, r1
 8009ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009ec8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	69ba      	ldr	r2, [r7, #24]
 8009eda:	0151      	lsls	r1, r2, #5
 8009edc:	69fa      	ldr	r2, [r7, #28]
 8009ede:	440a      	add	r2, r1
 8009ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ee8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d14b      	bne.n	8009f88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d009      	beq.n	8009f0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f04:	461a      	mov	r2, r3
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	791b      	ldrb	r3, [r3, #4]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d128      	bne.n	8009f66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d110      	bne.n	8009f46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	0151      	lsls	r1, r2, #5
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	440a      	add	r2, r1
 8009f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	e00f      	b.n	8009f66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	0151      	lsls	r1, r2, #5
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	440a      	add	r2, r1
 8009f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	015a      	lsls	r2, r3, #5
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	69ba      	ldr	r2, [r7, #24]
 8009f76:	0151      	lsls	r1, r2, #5
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	440a      	add	r2, r1
 8009f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	e133      	b.n	800a1f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	0151      	lsls	r1, r2, #5
 8009f9a:	69fa      	ldr	r2, [r7, #28]
 8009f9c:	440a      	add	r2, r1
 8009f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fa6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	791b      	ldrb	r3, [r3, #4]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d015      	beq.n	8009fdc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 811b 	beq.w	800a1f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	f003 030f 	and.w	r3, r3, #15
 8009fca:	2101      	movs	r1, #1
 8009fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd0:	69f9      	ldr	r1, [r7, #28]
 8009fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	634b      	str	r3, [r1, #52]	; 0x34
 8009fda:	e109      	b.n	800a1f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d110      	bne.n	800a00e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69ba      	ldr	r2, [r7, #24]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	69fa      	ldr	r2, [r7, #28]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a006:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	e00f      	b.n	800a02e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	69fa      	ldr	r2, [r7, #28]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a02c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	6919      	ldr	r1, [r3, #16]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	781a      	ldrb	r2, [r3, #0]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	b298      	uxth	r0, r3
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	4603      	mov	r3, r0
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fade 	bl	800a604 <USB_WritePacket>
 800a048:	e0d2      	b.n	800a1f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	0151      	lsls	r1, r2, #5
 800a05c:	69fa      	ldr	r2, [r7, #28]
 800a05e:	440a      	add	r2, r1
 800a060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a064:	0cdb      	lsrs	r3, r3, #19
 800a066:	04db      	lsls	r3, r3, #19
 800a068:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	0151      	lsls	r1, r2, #5
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	440a      	add	r2, r1
 800a080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a084:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a088:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a08c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d126      	bne.n	800a0e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a2:	691a      	ldr	r2, [r3, #16]
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0ac:	69b9      	ldr	r1, [r7, #24]
 800a0ae:	0148      	lsls	r0, r1, #5
 800a0b0:	69f9      	ldr	r1, [r7, #28]
 800a0b2:	4401      	add	r1, r0
 800a0b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	0151      	lsls	r1, r2, #5
 800a0ce:	69fa      	ldr	r2, [r7, #28]
 800a0d0:	440a      	add	r2, r1
 800a0d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0da:	6113      	str	r3, [r2, #16]
 800a0dc:	e03a      	b.n	800a154 <USB_EPStartXfer+0x3e4>
 800a0de:	bf00      	nop
 800a0e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	699a      	ldr	r2, [r3, #24]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	1e5a      	subs	r2, r3, #1
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	8afa      	ldrh	r2, [r7, #22]
 800a100:	fb03 f202 	mul.w	r2, r3, r2
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a114:	691a      	ldr	r2, [r3, #16]
 800a116:	8afb      	ldrh	r3, [r7, #22]
 800a118:	04d9      	lsls	r1, r3, #19
 800a11a:	4b38      	ldr	r3, [pc, #224]	; (800a1fc <USB_EPStartXfer+0x48c>)
 800a11c:	400b      	ands	r3, r1
 800a11e:	69b9      	ldr	r1, [r7, #24]
 800a120:	0148      	lsls	r0, r1, #5
 800a122:	69f9      	ldr	r1, [r7, #28]
 800a124:	4401      	add	r1, r0
 800a126:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a12a:	4313      	orrs	r3, r2
 800a12c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13a:	691a      	ldr	r2, [r3, #16]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a144:	69b9      	ldr	r1, [r7, #24]
 800a146:	0148      	lsls	r0, r1, #5
 800a148:	69f9      	ldr	r1, [r7, #28]
 800a14a:	4401      	add	r1, r0
 800a14c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a150:	4313      	orrs	r3, r2
 800a152:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d10d      	bne.n	800a176 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6919      	ldr	r1, [r3, #16]
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a172:	460a      	mov	r2, r1
 800a174:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d128      	bne.n	800a1d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d110      	bne.n	800a1b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	69fa      	ldr	r2, [r7, #28]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	e00f      	b.n	800a1d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	0151      	lsls	r1, r2, #5
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	440a      	add	r2, r1
 800a1e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3720      	adds	r7, #32
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	1ff80000 	.word	0x1ff80000

0800a200 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	4613      	mov	r3, r2
 800a20c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	f040 80ce 	bne.w	800a3be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d132      	bne.n	800a290 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	4413      	add	r3, r2
 800a232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	0151      	lsls	r1, r2, #5
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	440a      	add	r2, r1
 800a240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a24c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	0151      	lsls	r1, r2, #5
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	440a      	add	r2, r1
 800a264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a26c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	0151      	lsls	r1, r2, #5
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	440a      	add	r2, r1
 800a284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a288:	0cdb      	lsrs	r3, r3, #19
 800a28a:	04db      	lsls	r3, r3, #19
 800a28c:	6113      	str	r3, [r2, #16]
 800a28e:	e04e      	b.n	800a32e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	0151      	lsls	r1, r2, #5
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2aa:	0cdb      	lsrs	r3, r3, #19
 800a2ac:	04db      	lsls	r3, r3, #19
 800a2ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	0151      	lsls	r1, r2, #5
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	440a      	add	r2, r1
 800a2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	699a      	ldr	r2, [r3, #24]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d903      	bls.n	800a2e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	0151      	lsls	r1, r2, #5
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	691a      	ldr	r2, [r3, #16]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a31e:	6939      	ldr	r1, [r7, #16]
 800a320:	0148      	lsls	r0, r1, #5
 800a322:	6979      	ldr	r1, [r7, #20]
 800a324:	4401      	add	r1, r0
 800a326:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a32a:	4313      	orrs	r3, r2
 800a32c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d11e      	bne.n	800a372 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d009      	beq.n	800a350 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a348:	461a      	mov	r2, r3
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	0151      	lsls	r1, r2, #5
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	440a      	add	r2, r1
 800a366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a36a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	e097      	b.n	800a4a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	0151      	lsls	r1, r2, #5
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	440a      	add	r2, r1
 800a388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a38c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a390:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 8083 	beq.w	800a4a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b2:	6979      	ldr	r1, [r7, #20]
 800a3b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	634b      	str	r3, [r1, #52]	; 0x34
 800a3bc:	e071      	b.n	800a4a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	0151      	lsls	r1, r2, #5
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	440a      	add	r2, r1
 800a3d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3d8:	0cdb      	lsrs	r3, r3, #19
 800a3da:	04db      	lsls	r3, r3, #19
 800a3dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	0151      	lsls	r1, r2, #5
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	440a      	add	r2, r1
 800a3f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a400:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a446:	691a      	ldr	r2, [r3, #16]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a450:	6939      	ldr	r1, [r7, #16]
 800a452:	0148      	lsls	r0, r1, #5
 800a454:	6979      	ldr	r1, [r7, #20]
 800a456:	4401      	add	r1, r0
 800a458:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a45c:	4313      	orrs	r3, r2
 800a45e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d10d      	bne.n	800a482 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d009      	beq.n	800a482 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	6919      	ldr	r1, [r3, #16]
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47e:	460a      	mov	r2, r1
 800a480:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	0151      	lsls	r1, r2, #5
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	440a      	add	r2, r1
 800a498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a49c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	371c      	adds	r7, #28
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	785b      	ldrb	r3, [r3, #1]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d14a      	bne.n	800a564 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4e6:	f040 8086 	bne.w	800a5f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	7812      	ldrb	r2, [r2, #0]
 800a4fe:	0151      	lsls	r1, r2, #5
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	440a      	add	r2, r1
 800a504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a508:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a50c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	7812      	ldrb	r2, [r2, #0]
 800a522:	0151      	lsls	r1, r2, #5
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	440a      	add	r2, r1
 800a528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a52c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a530:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3301      	adds	r3, #1
 800a536:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a53e:	4293      	cmp	r3, r2
 800a540:	d902      	bls.n	800a548 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	75fb      	strb	r3, [r7, #23]
          break;
 800a546:	e056      	b.n	800a5f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a55c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a560:	d0e7      	beq.n	800a532 <USB_EPStopXfer+0x82>
 800a562:	e048      	b.n	800a5f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a57c:	d13b      	bne.n	800a5f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	015a      	lsls	r2, r3, #5
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	4413      	add	r3, r2
 800a588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	7812      	ldrb	r2, [r2, #0]
 800a592:	0151      	lsls	r1, r2, #5
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	440a      	add	r2, r1
 800a598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a59c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	7812      	ldrb	r2, [r2, #0]
 800a5b6:	0151      	lsls	r1, r2, #5
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	440a      	add	r2, r1
 800a5bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d902      	bls.n	800a5dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a5da:	e00c      	b.n	800a5f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5f4:	d0e7      	beq.n	800a5c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	371c      	adds	r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a604:	b480      	push	{r7}
 800a606:	b089      	sub	sp, #36	; 0x24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4611      	mov	r1, r2
 800a610:	461a      	mov	r2, r3
 800a612:	460b      	mov	r3, r1
 800a614:	71fb      	strb	r3, [r7, #7]
 800a616:	4613      	mov	r3, r2
 800a618:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a622:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a626:	2b00      	cmp	r3, #0
 800a628:	d123      	bne.n	800a672 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a62a:	88bb      	ldrh	r3, [r7, #4]
 800a62c:	3303      	adds	r3, #3
 800a62e:	089b      	lsrs	r3, r3, #2
 800a630:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
 800a636:	e018      	b.n	800a66a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	031a      	lsls	r2, r3, #12
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a644:	461a      	mov	r2, r3
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	3301      	adds	r3, #1
 800a650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	3301      	adds	r3, #1
 800a656:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	3301      	adds	r3, #1
 800a65c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	3301      	adds	r3, #1
 800a662:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	3301      	adds	r3, #1
 800a668:	61bb      	str	r3, [r7, #24]
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d3e2      	bcc.n	800a638 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3724      	adds	r7, #36	; 0x24
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a680:	b480      	push	{r7}
 800a682:	b08b      	sub	sp, #44	; 0x2c
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a696:	88fb      	ldrh	r3, [r7, #6]
 800a698:	089b      	lsrs	r3, r3, #2
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a69e:	88fb      	ldrh	r3, [r7, #6]
 800a6a0:	f003 0303 	and.w	r3, r3, #3
 800a6a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	623b      	str	r3, [r7, #32]
 800a6aa:	e014      	b.n	800a6d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	623b      	str	r3, [r7, #32]
 800a6d6:	6a3a      	ldr	r2, [r7, #32]
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d3e6      	bcc.n	800a6ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a6de:	8bfb      	ldrh	r3, [r7, #30]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01e      	beq.n	800a722 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f107 0310 	add.w	r3, r7, #16
 800a6f4:	6812      	ldr	r2, [r2, #0]
 800a6f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	fa22 f303 	lsr.w	r3, r2, r3
 800a704:	b2da      	uxtb	r2, r3
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	701a      	strb	r2, [r3, #0]
      i++;
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	3301      	adds	r3, #1
 800a70e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	3301      	adds	r3, #1
 800a714:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a716:	8bfb      	ldrh	r3, [r7, #30]
 800a718:	3b01      	subs	r3, #1
 800a71a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a71c:	8bfb      	ldrh	r3, [r7, #30]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1ea      	bne.n	800a6f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a724:	4618      	mov	r0, r3
 800a726:	372c      	adds	r7, #44	; 0x2c
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d12c      	bne.n	800a7a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	db12      	blt.n	800a784 <USB_EPSetStall+0x54>
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00f      	beq.n	800a784 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	0151      	lsls	r1, r2, #5
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	440a      	add	r2, r1
 800a77a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a77e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a782:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a79e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	e02b      	b.n	800a7fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	db12      	blt.n	800a7de <USB_EPSetStall+0xae>
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00f      	beq.n	800a7de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	0151      	lsls	r1, r2, #5
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a7dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	0151      	lsls	r1, r2, #5
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	440a      	add	r2, r1
 800a7f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	785b      	ldrb	r3, [r3, #1]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d128      	bne.n	800a87a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	015a      	lsls	r2, r3, #5
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4413      	add	r3, r2
 800a830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	0151      	lsls	r1, r2, #5
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	440a      	add	r2, r1
 800a83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a846:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	791b      	ldrb	r3, [r3, #4]
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d003      	beq.n	800a858 <USB_EPClearStall+0x4c>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	791b      	ldrb	r3, [r3, #4]
 800a854:	2b02      	cmp	r3, #2
 800a856:	d138      	bne.n	800a8ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	0151      	lsls	r1, r2, #5
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	440a      	add	r2, r1
 800a86e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	e027      	b.n	800a8ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a898:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d003      	beq.n	800a8aa <USB_EPClearStall+0x9e>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	791b      	ldrb	r3, [r3, #4]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d10f      	bne.n	800a8ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	0151      	lsls	r1, r2, #5
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	440a      	add	r2, r1
 800a8c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a8fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	78fb      	ldrb	r3, [r7, #3]
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a90c:	68f9      	ldr	r1, [r7, #12]
 800a90e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a912:	4313      	orrs	r3, r2
 800a914:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a952:	f023 0302 	bic.w	r3, r3, #2
 800a956:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a980:	f023 0303 	bic.w	r3, r3, #3
 800a984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a994:	f043 0302 	orr.w	r3, r3, #2
 800a998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	4013      	ands	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	0c1b      	lsrs	r3, r3, #16
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b085      	sub	sp, #20
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	4013      	ands	r3, r2
 800aa24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	b29b      	uxth	r3, r3
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b085      	sub	sp, #20
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aa46:	78fb      	ldrb	r3, [r7, #3]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	4013      	ands	r3, r2
 800aa62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa64:	68bb      	ldr	r3, [r7, #8]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b087      	sub	sp, #28
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa96:	78fb      	ldrb	r3, [r7, #3]
 800aa98:	f003 030f 	and.w	r3, r3, #15
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa2:	01db      	lsls	r3, r3, #7
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	4013      	ands	r3, r2
 800aabe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aac0:	68bb      	ldr	r3, [r7, #8]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	371c      	adds	r7, #28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	f003 0301 	and.w	r3, r3, #1
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b085      	sub	sp, #20
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ab08:	f023 0307 	bic.w	r3, r3, #7
 800ab0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	333c      	adds	r3, #60	; 0x3c
 800ab46:	3304      	adds	r3, #4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	4a26      	ldr	r2, [pc, #152]	; (800abe8 <USB_EP0_OutStart+0xb8>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d90a      	bls.n	800ab6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab64:	d101      	bne.n	800ab6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	e037      	b.n	800abda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab70:	461a      	mov	r2, r3
 800ab72:	2300      	movs	r3, #0
 800ab74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab98:	f043 0318 	orr.w	r3, r3, #24
 800ab9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800abb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800abb2:	7afb      	ldrb	r3, [r7, #11]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d10f      	bne.n	800abd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abbe:	461a      	mov	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800abd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	371c      	adds	r7, #28
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	4f54300a 	.word	0x4f54300a

0800abec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3301      	adds	r3, #1
 800abfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	4a13      	ldr	r2, [pc, #76]	; (800ac50 <USB_CoreReset+0x64>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d901      	bls.n	800ac0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e01b      	b.n	800ac42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	daf2      	bge.n	800abf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f043 0201 	orr.w	r2, r3, #1
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3301      	adds	r3, #1
 800ac26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4a09      	ldr	r2, [pc, #36]	; (800ac50 <USB_CoreReset+0x64>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d901      	bls.n	800ac34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e006      	b.n	800ac42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d0f0      	beq.n	800ac22 <USB_CoreReset+0x36>

  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	00030d40 	.word	0x00030d40

0800ac54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ac64:	f005 f8a0 	bl	800fda8 <USBD_static_malloc>
 800ac68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d109      	bne.n	800ac84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	32b0      	adds	r2, #176	; 0xb0
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac80:	2302      	movs	r3, #2
 800ac82:	e0d4      	b.n	800ae2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ac88:	2100      	movs	r1, #0
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f005 ff05 	bl	8010a9a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	32b0      	adds	r2, #176	; 0xb0
 800ac9a:	68f9      	ldr	r1, [r7, #12]
 800ac9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	32b0      	adds	r2, #176	; 0xb0
 800acaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	7c1b      	ldrb	r3, [r3, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d138      	bne.n	800ad2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acbc:	4b5e      	ldr	r3, [pc, #376]	; (800ae38 <USBD_CDC_Init+0x1e4>)
 800acbe:	7819      	ldrb	r1, [r3, #0]
 800acc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acc4:	2202      	movs	r2, #2
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f004 ff4b 	bl	800fb62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800accc:	4b5a      	ldr	r3, [pc, #360]	; (800ae38 <USBD_CDC_Init+0x1e4>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 020f 	and.w	r2, r3, #15
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	440b      	add	r3, r1
 800ace0:	3324      	adds	r3, #36	; 0x24
 800ace2:	2201      	movs	r2, #1
 800ace4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ace6:	4b55      	ldr	r3, [pc, #340]	; (800ae3c <USBD_CDC_Init+0x1e8>)
 800ace8:	7819      	ldrb	r1, [r3, #0]
 800acea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acee:	2202      	movs	r2, #2
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f004 ff36 	bl	800fb62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acf6:	4b51      	ldr	r3, [pc, #324]	; (800ae3c <USBD_CDC_Init+0x1e8>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	f003 020f 	and.w	r2, r3, #15
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	4613      	mov	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad0e:	2201      	movs	r2, #1
 800ad10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad12:	4b4b      	ldr	r3, [pc, #300]	; (800ae40 <USBD_CDC_Init+0x1ec>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	f003 020f 	and.w	r2, r3, #15
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	3326      	adds	r3, #38	; 0x26
 800ad28:	2210      	movs	r2, #16
 800ad2a:	801a      	strh	r2, [r3, #0]
 800ad2c:	e035      	b.n	800ad9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad2e:	4b42      	ldr	r3, [pc, #264]	; (800ae38 <USBD_CDC_Init+0x1e4>)
 800ad30:	7819      	ldrb	r1, [r3, #0]
 800ad32:	2340      	movs	r3, #64	; 0x40
 800ad34:	2202      	movs	r2, #2
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f004 ff13 	bl	800fb62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad3c:	4b3e      	ldr	r3, [pc, #248]	; (800ae38 <USBD_CDC_Init+0x1e4>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	f003 020f 	and.w	r2, r3, #15
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	4613      	mov	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	440b      	add	r3, r1
 800ad50:	3324      	adds	r3, #36	; 0x24
 800ad52:	2201      	movs	r2, #1
 800ad54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad56:	4b39      	ldr	r3, [pc, #228]	; (800ae3c <USBD_CDC_Init+0x1e8>)
 800ad58:	7819      	ldrb	r1, [r3, #0]
 800ad5a:	2340      	movs	r3, #64	; 0x40
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f004 feff 	bl	800fb62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad64:	4b35      	ldr	r3, [pc, #212]	; (800ae3c <USBD_CDC_Init+0x1e8>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 020f 	and.w	r2, r3, #15
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	440b      	add	r3, r1
 800ad78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad80:	4b2f      	ldr	r3, [pc, #188]	; (800ae40 <USBD_CDC_Init+0x1ec>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	f003 020f 	and.w	r2, r3, #15
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	440b      	add	r3, r1
 800ad94:	3326      	adds	r3, #38	; 0x26
 800ad96:	2210      	movs	r2, #16
 800ad98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad9a:	4b29      	ldr	r3, [pc, #164]	; (800ae40 <USBD_CDC_Init+0x1ec>)
 800ad9c:	7819      	ldrb	r1, [r3, #0]
 800ad9e:	2308      	movs	r3, #8
 800ada0:	2203      	movs	r2, #3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f004 fedd 	bl	800fb62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ada8:	4b25      	ldr	r3, [pc, #148]	; (800ae40 <USBD_CDC_Init+0x1ec>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 020f 	and.w	r2, r3, #15
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	4613      	mov	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	440b      	add	r3, r1
 800adbc:	3324      	adds	r3, #36	; 0x24
 800adbe:	2201      	movs	r2, #1
 800adc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	33b0      	adds	r3, #176	; 0xb0
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800adf8:	2302      	movs	r3, #2
 800adfa:	e018      	b.n	800ae2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7c1b      	ldrb	r3, [r3, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae04:	4b0d      	ldr	r3, [pc, #52]	; (800ae3c <USBD_CDC_Init+0x1e8>)
 800ae06:	7819      	ldrb	r1, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f004 ff94 	bl	800fd40 <USBD_LL_PrepareReceive>
 800ae18:	e008      	b.n	800ae2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae1a:	4b08      	ldr	r3, [pc, #32]	; (800ae3c <USBD_CDC_Init+0x1e8>)
 800ae1c:	7819      	ldrb	r1, [r3, #0]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae24:	2340      	movs	r3, #64	; 0x40
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f004 ff8a 	bl	800fd40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	200000b7 	.word	0x200000b7
 800ae3c:	200000b8 	.word	0x200000b8
 800ae40:	200000b9 	.word	0x200000b9

0800ae44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ae50:	4b3a      	ldr	r3, [pc, #232]	; (800af3c <USBD_CDC_DeInit+0xf8>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f004 fea9 	bl	800fbae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ae5c:	4b37      	ldr	r3, [pc, #220]	; (800af3c <USBD_CDC_DeInit+0xf8>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	f003 020f 	and.w	r2, r3, #15
 800ae64:	6879      	ldr	r1, [r7, #4]
 800ae66:	4613      	mov	r3, r2
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	440b      	add	r3, r1
 800ae70:	3324      	adds	r3, #36	; 0x24
 800ae72:	2200      	movs	r2, #0
 800ae74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ae76:	4b32      	ldr	r3, [pc, #200]	; (800af40 <USBD_CDC_DeInit+0xfc>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f004 fe96 	bl	800fbae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae82:	4b2f      	ldr	r3, [pc, #188]	; (800af40 <USBD_CDC_DeInit+0xfc>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	f003 020f 	and.w	r2, r3, #15
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	440b      	add	r3, r1
 800ae96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae9e:	4b29      	ldr	r3, [pc, #164]	; (800af44 <USBD_CDC_DeInit+0x100>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f004 fe82 	bl	800fbae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aeaa:	4b26      	ldr	r3, [pc, #152]	; (800af44 <USBD_CDC_DeInit+0x100>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	f003 020f 	and.w	r2, r3, #15
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	440b      	add	r3, r1
 800aebe:	3324      	adds	r3, #36	; 0x24
 800aec0:	2200      	movs	r2, #0
 800aec2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aec4:	4b1f      	ldr	r3, [pc, #124]	; (800af44 <USBD_CDC_DeInit+0x100>)
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	f003 020f 	and.w	r2, r3, #15
 800aecc:	6879      	ldr	r1, [r7, #4]
 800aece:	4613      	mov	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	440b      	add	r3, r1
 800aed8:	3326      	adds	r3, #38	; 0x26
 800aeda:	2200      	movs	r2, #0
 800aedc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	32b0      	adds	r2, #176	; 0xb0
 800aee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01f      	beq.n	800af30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	33b0      	adds	r3, #176	; 0xb0
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	32b0      	adds	r2, #176	; 0xb0
 800af0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af12:	4618      	mov	r0, r3
 800af14:	f004 ff56 	bl	800fdc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	32b0      	adds	r2, #176	; 0xb0
 800af22:	2100      	movs	r1, #0
 800af24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	200000b7 	.word	0x200000b7
 800af40:	200000b8 	.word	0x200000b8
 800af44:	200000b9 	.word	0x200000b9

0800af48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	32b0      	adds	r2, #176	; 0xb0
 800af5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800af74:	2303      	movs	r3, #3
 800af76:	e0bf      	b.n	800b0f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af80:	2b00      	cmp	r3, #0
 800af82:	d050      	beq.n	800b026 <USBD_CDC_Setup+0xde>
 800af84:	2b20      	cmp	r3, #32
 800af86:	f040 80af 	bne.w	800b0e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	88db      	ldrh	r3, [r3, #6]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d03a      	beq.n	800b008 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	b25b      	sxtb	r3, r3
 800af98:	2b00      	cmp	r3, #0
 800af9a:	da1b      	bge.n	800afd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	33b0      	adds	r3, #176	; 0xb0
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800afb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	88d2      	ldrh	r2, [r2, #6]
 800afb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	88db      	ldrh	r3, [r3, #6]
 800afbe:	2b07      	cmp	r3, #7
 800afc0:	bf28      	it	cs
 800afc2:	2307      	movcs	r3, #7
 800afc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	89fa      	ldrh	r2, [r7, #14]
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 fd89 	bl	800cae4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800afd2:	e090      	b.n	800b0f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	785a      	ldrb	r2, [r3, #1]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	88db      	ldrh	r3, [r3, #6]
 800afe2:	2b3f      	cmp	r3, #63	; 0x3f
 800afe4:	d803      	bhi.n	800afee <USBD_CDC_Setup+0xa6>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	88db      	ldrh	r3, [r3, #6]
 800afea:	b2da      	uxtb	r2, r3
 800afec:	e000      	b.n	800aff0 <USBD_CDC_Setup+0xa8>
 800afee:	2240      	movs	r2, #64	; 0x40
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aff6:	6939      	ldr	r1, [r7, #16]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800affe:	461a      	mov	r2, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 fd9b 	bl	800cb3c <USBD_CtlPrepareRx>
      break;
 800b006:	e076      	b.n	800b0f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	33b0      	adds	r3, #176	; 0xb0
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	7850      	ldrb	r0, [r2, #1]
 800b01e:	2200      	movs	r2, #0
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	4798      	blx	r3
      break;
 800b024:	e067      	b.n	800b0f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	785b      	ldrb	r3, [r3, #1]
 800b02a:	2b0b      	cmp	r3, #11
 800b02c:	d851      	bhi.n	800b0d2 <USBD_CDC_Setup+0x18a>
 800b02e:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <USBD_CDC_Setup+0xec>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b065 	.word	0x0800b065
 800b038:	0800b0e1 	.word	0x0800b0e1
 800b03c:	0800b0d3 	.word	0x0800b0d3
 800b040:	0800b0d3 	.word	0x0800b0d3
 800b044:	0800b0d3 	.word	0x0800b0d3
 800b048:	0800b0d3 	.word	0x0800b0d3
 800b04c:	0800b0d3 	.word	0x0800b0d3
 800b050:	0800b0d3 	.word	0x0800b0d3
 800b054:	0800b0d3 	.word	0x0800b0d3
 800b058:	0800b0d3 	.word	0x0800b0d3
 800b05c:	0800b08f 	.word	0x0800b08f
 800b060:	0800b0b9 	.word	0x0800b0b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d107      	bne.n	800b080 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b070:	f107 030a 	add.w	r3, r7, #10
 800b074:	2202      	movs	r2, #2
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 fd33 	bl	800cae4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b07e:	e032      	b.n	800b0e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f001 fcbd 	bl	800ca02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b088:	2303      	movs	r3, #3
 800b08a:	75fb      	strb	r3, [r7, #23]
          break;
 800b08c:	e02b      	b.n	800b0e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b03      	cmp	r3, #3
 800b098:	d107      	bne.n	800b0aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b09a:	f107 030d 	add.w	r3, r7, #13
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f001 fd1e 	bl	800cae4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0a8:	e01d      	b.n	800b0e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 fca8 	bl	800ca02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b0b6:	e016      	b.n	800b0e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d00f      	beq.n	800b0e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f001 fc9b 	bl	800ca02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b0d0:	e008      	b.n	800b0e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 fc94 	bl	800ca02 <USBD_CtlError>
          ret = USBD_FAIL;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b0de:	e002      	b.n	800b0e6 <USBD_CDC_Setup+0x19e>
          break;
 800b0e0:	bf00      	nop
 800b0e2:	e008      	b.n	800b0f6 <USBD_CDC_Setup+0x1ae>
          break;
 800b0e4:	bf00      	nop
      }
      break;
 800b0e6:	e006      	b.n	800b0f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f001 fc89 	bl	800ca02 <USBD_CtlError>
      ret = USBD_FAIL;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b0f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b112:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	32b0      	adds	r2, #176	; 0xb0
 800b11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b126:	2303      	movs	r3, #3
 800b128:	e065      	b.n	800b1f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	32b0      	adds	r2, #176	; 0xb0
 800b134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b138:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b13a:	78fb      	ldrb	r3, [r7, #3]
 800b13c:	f003 020f 	and.w	r2, r3, #15
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	440b      	add	r3, r1
 800b14c:	3318      	adds	r3, #24
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d02f      	beq.n	800b1b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	f003 020f 	and.w	r2, r3, #15
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	4613      	mov	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	3318      	adds	r3, #24
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	f003 010f 	and.w	r1, r3, #15
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	460b      	mov	r3, r1
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	440b      	add	r3, r1
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4403      	add	r3, r0
 800b17c:	3348      	adds	r3, #72	; 0x48
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	fbb2 f1f3 	udiv	r1, r2, r3
 800b184:	fb01 f303 	mul.w	r3, r1, r3
 800b188:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d112      	bne.n	800b1b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b18e:	78fb      	ldrb	r3, [r7, #3]
 800b190:	f003 020f 	and.w	r2, r3, #15
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	4613      	mov	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	440b      	add	r3, r1
 800b1a0:	3318      	adds	r3, #24
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1a6:	78f9      	ldrb	r1, [r7, #3]
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f004 fda6 	bl	800fcfe <USBD_LL_Transmit>
 800b1b2:	e01f      	b.n	800b1f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	33b0      	adds	r3, #176	; 0xb0
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d010      	beq.n	800b1f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	33b0      	adds	r3, #176	; 0xb0
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b1f0:	78fa      	ldrb	r2, [r7, #3]
 800b1f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	460b      	mov	r3, r1
 800b208:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	32b0      	adds	r2, #176	; 0xb0
 800b214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b218:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	32b0      	adds	r2, #176	; 0xb0
 800b224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e01a      	b.n	800b266 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f004 fda4 	bl	800fd82 <USBD_LL_GetRxDataSize>
 800b23a:	4602      	mov	r2, r0
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	33b0      	adds	r3, #176	; 0xb0
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b260:	4611      	mov	r1, r2
 800b262:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	32b0      	adds	r2, #176	; 0xb0
 800b280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b284:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e025      	b.n	800b2dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	33b0      	adds	r3, #176	; 0xb0
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d01a      	beq.n	800b2da <USBD_CDC_EP0_RxReady+0x6c>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b2aa:	2bff      	cmp	r3, #255	; 0xff
 800b2ac:	d015      	beq.n	800b2da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	33b0      	adds	r3, #176	; 0xb0
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4413      	add	r3, r2
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b2c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2ce:	b292      	uxth	r2, r2
 800b2d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	22ff      	movs	r2, #255	; 0xff
 800b2d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2ec:	2182      	movs	r1, #130	; 0x82
 800b2ee:	4818      	ldr	r0, [pc, #96]	; (800b350 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2f0:	f000 fd4f 	bl	800bd92 <USBD_GetEpDesc>
 800b2f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	4815      	ldr	r0, [pc, #84]	; (800b350 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2fa:	f000 fd4a 	bl	800bd92 <USBD_GetEpDesc>
 800b2fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b300:	2181      	movs	r1, #129	; 0x81
 800b302:	4813      	ldr	r0, [pc, #76]	; (800b350 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b304:	f000 fd45 	bl	800bd92 <USBD_GetEpDesc>
 800b308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2210      	movs	r2, #16
 800b314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d006      	beq.n	800b32a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	2200      	movs	r2, #0
 800b320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b324:	711a      	strb	r2, [r3, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d006      	beq.n	800b33e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b338:	711a      	strb	r2, [r3, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2243      	movs	r2, #67	; 0x43
 800b342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b344:	4b02      	ldr	r3, [pc, #8]	; (800b350 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b346:	4618      	mov	r0, r3
 800b348:	3718      	adds	r7, #24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	20000074 	.word	0x20000074

0800b354 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b35c:	2182      	movs	r1, #130	; 0x82
 800b35e:	4818      	ldr	r0, [pc, #96]	; (800b3c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b360:	f000 fd17 	bl	800bd92 <USBD_GetEpDesc>
 800b364:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b366:	2101      	movs	r1, #1
 800b368:	4815      	ldr	r0, [pc, #84]	; (800b3c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b36a:	f000 fd12 	bl	800bd92 <USBD_GetEpDesc>
 800b36e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b370:	2181      	movs	r1, #129	; 0x81
 800b372:	4813      	ldr	r0, [pc, #76]	; (800b3c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b374:	f000 fd0d 	bl	800bd92 <USBD_GetEpDesc>
 800b378:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2210      	movs	r2, #16
 800b384:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d006      	beq.n	800b39a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	2200      	movs	r2, #0
 800b390:	711a      	strb	r2, [r3, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f042 0202 	orr.w	r2, r2, #2
 800b398:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d006      	beq.n	800b3ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	711a      	strb	r2, [r3, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f042 0202 	orr.w	r2, r2, #2
 800b3ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2243      	movs	r2, #67	; 0x43
 800b3b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3b4:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	20000074 	.word	0x20000074

0800b3c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3cc:	2182      	movs	r1, #130	; 0x82
 800b3ce:	4818      	ldr	r0, [pc, #96]	; (800b430 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3d0:	f000 fcdf 	bl	800bd92 <USBD_GetEpDesc>
 800b3d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	4815      	ldr	r0, [pc, #84]	; (800b430 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3da:	f000 fcda 	bl	800bd92 <USBD_GetEpDesc>
 800b3de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3e0:	2181      	movs	r1, #129	; 0x81
 800b3e2:	4813      	ldr	r0, [pc, #76]	; (800b430 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3e4:	f000 fcd5 	bl	800bd92 <USBD_GetEpDesc>
 800b3e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	2210      	movs	r2, #16
 800b3f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d006      	beq.n	800b40a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b404:	711a      	strb	r2, [r3, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d006      	beq.n	800b41e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b418:	711a      	strb	r2, [r3, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2243      	movs	r2, #67	; 0x43
 800b422:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b424:	4b02      	ldr	r3, [pc, #8]	; (800b430 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b426:	4618      	mov	r0, r3
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20000074 	.word	0x20000074

0800b434 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	220a      	movs	r2, #10
 800b440:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b442:	4b03      	ldr	r3, [pc, #12]	; (800b450 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b444:	4618      	mov	r0, r3
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	20000030 	.word	0x20000030

0800b454 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b464:	2303      	movs	r3, #3
 800b466:	e009      	b.n	800b47c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	33b0      	adds	r3, #176	; 0xb0
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b488:	b480      	push	{r7}
 800b48a:	b087      	sub	sp, #28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	32b0      	adds	r2, #176	; 0xb0
 800b49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e008      	b.n	800b4c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	371c      	adds	r7, #28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	32b0      	adds	r2, #176	; 0xb0
 800b4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e004      	b.n	800b4fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
	...

0800b508 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	32b0      	adds	r2, #176	; 0xb0
 800b51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b520:	2301      	movs	r3, #1
 800b522:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	32b0      	adds	r2, #176	; 0xb0
 800b52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b536:	2303      	movs	r3, #3
 800b538:	e025      	b.n	800b586 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b540:	2b00      	cmp	r3, #0
 800b542:	d11f      	bne.n	800b584 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	2201      	movs	r2, #1
 800b548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b54c:	4b10      	ldr	r3, [pc, #64]	; (800b590 <USBD_CDC_TransmitPacket+0x88>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	f003 020f 	and.w	r2, r3, #15
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4403      	add	r3, r0
 800b566:	3318      	adds	r3, #24
 800b568:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b56a:	4b09      	ldr	r3, [pc, #36]	; (800b590 <USBD_CDC_TransmitPacket+0x88>)
 800b56c:	7819      	ldrb	r1, [r3, #0]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f004 fbbf 	bl	800fcfe <USBD_LL_Transmit>

    ret = USBD_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	200000b7 	.word	0x200000b7

0800b594 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	32b0      	adds	r2, #176	; 0xb0
 800b5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	32b0      	adds	r2, #176	; 0xb0
 800b5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d101      	bne.n	800b5c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e018      	b.n	800b5f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	7c1b      	ldrb	r3, [r3, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10a      	bne.n	800b5e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5ca:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <USBD_CDC_ReceivePacket+0x68>)
 800b5cc:	7819      	ldrb	r1, [r3, #0]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f004 fbb1 	bl	800fd40 <USBD_LL_PrepareReceive>
 800b5de:	e008      	b.n	800b5f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5e0:	4b06      	ldr	r3, [pc, #24]	; (800b5fc <USBD_CDC_ReceivePacket+0x68>)
 800b5e2:	7819      	ldrb	r1, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5ea:	2340      	movs	r3, #64	; 0x40
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f004 fba7 	bl	800fd40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	200000b8 	.word	0x200000b8

0800b600 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	4613      	mov	r3, r2
 800b60c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b614:	2303      	movs	r3, #3
 800b616:	e01f      	b.n	800b658 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	79fa      	ldrb	r2, [r7, #7]
 800b64a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f004 fa21 	bl	800fa94 <USBD_LL_Init>
 800b652:	4603      	mov	r3, r0
 800b654:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b656:	7dfb      	ldrb	r3, [r7, #23]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b674:	2303      	movs	r3, #3
 800b676:	e025      	b.n	800b6c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	32ae      	adds	r2, #174	; 0xae
 800b68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00f      	beq.n	800b6b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	32ae      	adds	r2, #174	; 0xae
 800b69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	f107 020e 	add.w	r2, r7, #14
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	4798      	blx	r3
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f004 fa29 	bl	800fb2c <USBD_LL_Start>
 800b6da:	4603      	mov	r3, r0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	460b      	mov	r3, r1
 800b704:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b710:	2b00      	cmp	r3, #0
 800b712:	d009      	beq.n	800b728 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	78fa      	ldrb	r2, [r7, #3]
 800b71e:	4611      	mov	r1, r2
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	4798      	blx	r3
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b084      	sub	sp, #16
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	460b      	mov	r3, r1
 800b73c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	78fa      	ldrb	r2, [r7, #3]
 800b74c:	4611      	mov	r1, r2
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	4798      	blx	r3
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b758:	2303      	movs	r3, #3
 800b75a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	4618      	mov	r0, r3
 800b77a:	f001 f908 	bl	800c98e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b78c:	461a      	mov	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b79a:	f003 031f 	and.w	r3, r3, #31
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d01a      	beq.n	800b7d8 <USBD_LL_SetupStage+0x72>
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d822      	bhi.n	800b7ec <USBD_LL_SetupStage+0x86>
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <USBD_LL_SetupStage+0x4a>
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d00a      	beq.n	800b7c4 <USBD_LL_SetupStage+0x5e>
 800b7ae:	e01d      	b.n	800b7ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fb5f 	bl	800be7c <USBD_StdDevReq>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c2:	e020      	b.n	800b806 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fbc7 	bl	800bf60 <USBD_StdItfReq>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b7d6:	e016      	b.n	800b806 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fc29 	bl	800c038 <USBD_StdEPReq>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ea:	e00c      	b.n	800b806 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f004 f9f6 	bl	800fbec <USBD_LL_StallEP>
 800b800:	4603      	mov	r3, r0
 800b802:	73fb      	strb	r3, [r7, #15]
      break;
 800b804:	bf00      	nop
  }

  return ret;
 800b806:	7bfb      	ldrb	r3, [r7, #15]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	460b      	mov	r3, r1
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b822:	7afb      	ldrb	r3, [r7, #11]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d16e      	bne.n	800b906 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b82e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b836:	2b03      	cmp	r3, #3
 800b838:	f040 8098 	bne.w	800b96c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	429a      	cmp	r2, r3
 800b846:	d913      	bls.n	800b870 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	1ad2      	subs	r2, r2, r3
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	68da      	ldr	r2, [r3, #12]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	4293      	cmp	r3, r2
 800b860:	bf28      	it	cs
 800b862:	4613      	movcs	r3, r2
 800b864:	461a      	mov	r2, r3
 800b866:	6879      	ldr	r1, [r7, #4]
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f001 f984 	bl	800cb76 <USBD_CtlContinueRx>
 800b86e:	e07d      	b.n	800b96c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b876:	f003 031f 	and.w	r3, r3, #31
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d014      	beq.n	800b8a8 <USBD_LL_DataOutStage+0x98>
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d81d      	bhi.n	800b8be <USBD_LL_DataOutStage+0xae>
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <USBD_LL_DataOutStage+0x7c>
 800b886:	2b01      	cmp	r3, #1
 800b888:	d003      	beq.n	800b892 <USBD_LL_DataOutStage+0x82>
 800b88a:	e018      	b.n	800b8be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	75bb      	strb	r3, [r7, #22]
            break;
 800b890:	e018      	b.n	800b8c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	4619      	mov	r1, r3
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 fa5e 	bl	800bd5e <USBD_CoreFindIF>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	75bb      	strb	r3, [r7, #22]
            break;
 800b8a6:	e00d      	b.n	800b8c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f000 fa60 	bl	800bd78 <USBD_CoreFindEP>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	75bb      	strb	r3, [r7, #22]
            break;
 800b8bc:	e002      	b.n	800b8c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	75bb      	strb	r3, [r7, #22]
            break;
 800b8c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b8c4:	7dbb      	ldrb	r3, [r7, #22]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d119      	bne.n	800b8fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d113      	bne.n	800b8fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b8d6:	7dba      	ldrb	r2, [r7, #22]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	32ae      	adds	r2, #174	; 0xae
 800b8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00b      	beq.n	800b8fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b8e6:	7dba      	ldrb	r2, [r7, #22]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b8ee:	7dba      	ldrb	r2, [r7, #22]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	32ae      	adds	r2, #174	; 0xae
 800b8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f001 f94a 	bl	800cb98 <USBD_CtlSendStatus>
 800b904:	e032      	b.n	800b96c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b906:	7afb      	ldrb	r3, [r7, #11]
 800b908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	4619      	mov	r1, r3
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 fa31 	bl	800bd78 <USBD_CoreFindEP>
 800b916:	4603      	mov	r3, r0
 800b918:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b91a:	7dbb      	ldrb	r3, [r7, #22]
 800b91c:	2bff      	cmp	r3, #255	; 0xff
 800b91e:	d025      	beq.n	800b96c <USBD_LL_DataOutStage+0x15c>
 800b920:	7dbb      	ldrb	r3, [r7, #22]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d122      	bne.n	800b96c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d117      	bne.n	800b962 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b932:	7dba      	ldrb	r2, [r7, #22]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	32ae      	adds	r2, #174	; 0xae
 800b938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00f      	beq.n	800b962 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b942:	7dba      	ldrb	r2, [r7, #22]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b94a:	7dba      	ldrb	r2, [r7, #22]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	32ae      	adds	r2, #174	; 0xae
 800b950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	7afa      	ldrb	r2, [r7, #11]
 800b958:	4611      	mov	r1, r2
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	4798      	blx	r3
 800b95e:	4603      	mov	r3, r0
 800b960:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	e000      	b.n	800b96e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b086      	sub	sp, #24
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	460b      	mov	r3, r1
 800b980:	607a      	str	r2, [r7, #4]
 800b982:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b984:	7afb      	ldrb	r3, [r7, #11]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d16f      	bne.n	800ba6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3314      	adds	r3, #20
 800b98e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b996:	2b02      	cmp	r3, #2
 800b998:	d15a      	bne.n	800ba50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	689a      	ldr	r2, [r3, #8]
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d914      	bls.n	800b9d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	689a      	ldr	r2, [r3, #8]
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	1ad2      	subs	r2, r2, r3
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	6879      	ldr	r1, [r7, #4]
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f001 f8ac 	bl	800cb1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f004 f9b9 	bl	800fd40 <USBD_LL_PrepareReceive>
 800b9ce:	e03f      	b.n	800ba50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	68da      	ldr	r2, [r3, #12]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d11c      	bne.n	800ba16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d316      	bcc.n	800ba16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d20f      	bcs.n	800ba16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f001 f88d 	bl	800cb1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f004 f996 	bl	800fd40 <USBD_LL_PrepareReceive>
 800ba14:	e01c      	b.n	800ba50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d10f      	bne.n	800ba42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d009      	beq.n	800ba42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba42:	2180      	movs	r1, #128	; 0x80
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f004 f8d1 	bl	800fbec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f001 f8b7 	bl	800cbbe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d03a      	beq.n	800bad0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f7ff fe42 	bl	800b6e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ba68:	e032      	b.n	800bad0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba6a:	7afb      	ldrb	r3, [r7, #11]
 800ba6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	4619      	mov	r1, r3
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f000 f97f 	bl	800bd78 <USBD_CoreFindEP>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	2bff      	cmp	r3, #255	; 0xff
 800ba82:	d025      	beq.n	800bad0 <USBD_LL_DataInStage+0x15a>
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d122      	bne.n	800bad0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d11c      	bne.n	800bad0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba96:	7dfa      	ldrb	r2, [r7, #23]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	32ae      	adds	r2, #174	; 0xae
 800ba9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d014      	beq.n	800bad0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800baa6:	7dfa      	ldrb	r2, [r7, #23]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800baae:	7dfa      	ldrb	r2, [r7, #23]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	32ae      	adds	r2, #174	; 0xae
 800bab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	7afa      	ldrb	r2, [r7, #11]
 800babc:	4611      	mov	r1, r2
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	4798      	blx	r3
 800bac2:	4603      	mov	r3, r0
 800bac4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bac6:	7dbb      	ldrb	r3, [r7, #22]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bacc:	7dbb      	ldrb	r3, [r7, #22]
 800bace:	e000      	b.n	800bad2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3718      	adds	r7, #24
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d014      	beq.n	800bb40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00e      	beq.n	800bb40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	6852      	ldr	r2, [r2, #4]
 800bb2e:	b2d2      	uxtb	r2, r2
 800bb30:	4611      	mov	r1, r2
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb40:	2340      	movs	r3, #64	; 0x40
 800bb42:	2200      	movs	r2, #0
 800bb44:	2100      	movs	r1, #0
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f004 f80b 	bl	800fb62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2240      	movs	r2, #64	; 0x40
 800bb58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb5c:	2340      	movs	r3, #64	; 0x40
 800bb5e:	2200      	movs	r2, #0
 800bb60:	2180      	movs	r1, #128	; 0x80
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f003 fffd 	bl	800fb62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2240      	movs	r2, #64	; 0x40
 800bb72:	621a      	str	r2, [r3, #32]

  return ret;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b083      	sub	sp, #12
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	78fa      	ldrb	r2, [r7, #3]
 800bb8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b083      	sub	sp, #12
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2204      	movs	r2, #4
 800bbb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b04      	cmp	r3, #4
 800bbdc:	d106      	bne.n	800bbec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b082      	sub	sp, #8
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d110      	bne.n	800bc30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1e:	69db      	ldr	r3, [r3, #28]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d005      	beq.n	800bc30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc2a:	69db      	ldr	r3, [r3, #28]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	32ae      	adds	r2, #174	; 0xae
 800bc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d101      	bne.n	800bc5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	e01c      	b.n	800bc96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d115      	bne.n	800bc94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	32ae      	adds	r2, #174	; 0xae
 800bc72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	32ae      	adds	r2, #174	; 0xae
 800bc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8a:	6a1b      	ldr	r3, [r3, #32]
 800bc8c:	78fa      	ldrb	r2, [r7, #3]
 800bc8e:	4611      	mov	r1, r2
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	32ae      	adds	r2, #174	; 0xae
 800bcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bcbc:	2303      	movs	r3, #3
 800bcbe:	e01c      	b.n	800bcfa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d115      	bne.n	800bcf8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	32ae      	adds	r2, #174	; 0xae
 800bcd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00b      	beq.n	800bcf8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	32ae      	adds	r2, #174	; 0xae
 800bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	78fa      	ldrb	r2, [r7, #3]
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00e      	beq.n	800bd54 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	6852      	ldr	r2, [r2, #4]
 800bd42:	b2d2      	uxtb	r2, r2
 800bd44:	4611      	mov	r1, r2
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	4798      	blx	r3
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd50:	2303      	movs	r3, #3
 800bd52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	460b      	mov	r3, r1
 800bd68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	460b      	mov	r3, r1
 800bd82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b086      	sub	sp, #24
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	885b      	ldrh	r3, [r3, #2]
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d920      	bls.n	800bdfc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bdc2:	e013      	b.n	800bdec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bdc4:	f107 030a 	add.w	r3, r7, #10
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6978      	ldr	r0, [r7, #20]
 800bdcc:	f000 f81b 	bl	800be06 <USBD_GetNextDesc>
 800bdd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2b05      	cmp	r3, #5
 800bdd8:	d108      	bne.n	800bdec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	789b      	ldrb	r3, [r3, #2]
 800bde2:	78fa      	ldrb	r2, [r7, #3]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d008      	beq.n	800bdfa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	885b      	ldrh	r3, [r3, #2]
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	897b      	ldrh	r3, [r7, #10]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d8e5      	bhi.n	800bdc4 <USBD_GetEpDesc+0x32>
 800bdf8:	e000      	b.n	800bdfc <USBD_GetEpDesc+0x6a>
          break;
 800bdfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bdfc:	693b      	ldr	r3, [r7, #16]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3718      	adds	r7, #24
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be06:	b480      	push	{r7}
 800be08:	b085      	sub	sp, #20
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	881a      	ldrh	r2, [r3, #0]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	4413      	add	r3, r2
 800be20:	b29a      	uxth	r2, r3
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4413      	add	r3, r2
 800be30:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be32:	68fb      	ldr	r3, [r7, #12]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be40:	b480      	push	{r7}
 800be42:	b087      	sub	sp, #28
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	3301      	adds	r3, #1
 800be56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be5e:	8a3b      	ldrh	r3, [r7, #16]
 800be60:	021b      	lsls	r3, r3, #8
 800be62:	b21a      	sxth	r2, r3
 800be64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be68:	4313      	orrs	r3, r2
 800be6a:	b21b      	sxth	r3, r3
 800be6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be6e:	89fb      	ldrh	r3, [r7, #14]
}
 800be70:	4618      	mov	r0, r3
 800be72:	371c      	adds	r7, #28
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be92:	2b40      	cmp	r3, #64	; 0x40
 800be94:	d005      	beq.n	800bea2 <USBD_StdDevReq+0x26>
 800be96:	2b40      	cmp	r3, #64	; 0x40
 800be98:	d857      	bhi.n	800bf4a <USBD_StdDevReq+0xce>
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00f      	beq.n	800bebe <USBD_StdDevReq+0x42>
 800be9e:	2b20      	cmp	r3, #32
 800bea0:	d153      	bne.n	800bf4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	32ae      	adds	r2, #174	; 0xae
 800beac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	4798      	blx	r3
 800beb8:	4603      	mov	r3, r0
 800beba:	73fb      	strb	r3, [r7, #15]
      break;
 800bebc:	e04a      	b.n	800bf54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	785b      	ldrb	r3, [r3, #1]
 800bec2:	2b09      	cmp	r3, #9
 800bec4:	d83b      	bhi.n	800bf3e <USBD_StdDevReq+0xc2>
 800bec6:	a201      	add	r2, pc, #4	; (adr r2, 800becc <USBD_StdDevReq+0x50>)
 800bec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800becc:	0800bf21 	.word	0x0800bf21
 800bed0:	0800bf35 	.word	0x0800bf35
 800bed4:	0800bf3f 	.word	0x0800bf3f
 800bed8:	0800bf2b 	.word	0x0800bf2b
 800bedc:	0800bf3f 	.word	0x0800bf3f
 800bee0:	0800beff 	.word	0x0800beff
 800bee4:	0800bef5 	.word	0x0800bef5
 800bee8:	0800bf3f 	.word	0x0800bf3f
 800beec:	0800bf17 	.word	0x0800bf17
 800bef0:	0800bf09 	.word	0x0800bf09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fa3c 	bl	800c374 <USBD_GetDescriptor>
          break;
 800befc:	e024      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fba1 	bl	800c648 <USBD_SetAddress>
          break;
 800bf06:	e01f      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fbe0 	bl	800c6d0 <USBD_SetConfig>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73fb      	strb	r3, [r7, #15]
          break;
 800bf14:	e018      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fc83 	bl	800c824 <USBD_GetConfig>
          break;
 800bf1e:	e013      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fcb4 	bl	800c890 <USBD_GetStatus>
          break;
 800bf28:	e00e      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fce3 	bl	800c8f8 <USBD_SetFeature>
          break;
 800bf32:	e009      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fd07 	bl	800c94a <USBD_ClrFeature>
          break;
 800bf3c:	e004      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf3e:	6839      	ldr	r1, [r7, #0]
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fd5e 	bl	800ca02 <USBD_CtlError>
          break;
 800bf46:	bf00      	nop
      }
      break;
 800bf48:	e004      	b.n	800bf54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fd58 	bl	800ca02 <USBD_CtlError>
      break;
 800bf52:	bf00      	nop
  }

  return ret;
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop

0800bf60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf76:	2b40      	cmp	r3, #64	; 0x40
 800bf78:	d005      	beq.n	800bf86 <USBD_StdItfReq+0x26>
 800bf7a:	2b40      	cmp	r3, #64	; 0x40
 800bf7c:	d852      	bhi.n	800c024 <USBD_StdItfReq+0xc4>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <USBD_StdItfReq+0x26>
 800bf82:	2b20      	cmp	r3, #32
 800bf84:	d14e      	bne.n	800c024 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d840      	bhi.n	800c016 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	889b      	ldrh	r3, [r3, #4]
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d836      	bhi.n	800c00c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	889b      	ldrh	r3, [r3, #4]
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff fed9 	bl	800bd5e <USBD_CoreFindIF>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfb0:	7bbb      	ldrb	r3, [r7, #14]
 800bfb2:	2bff      	cmp	r3, #255	; 0xff
 800bfb4:	d01d      	beq.n	800bff2 <USBD_StdItfReq+0x92>
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d11a      	bne.n	800bff2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bfbc:	7bba      	ldrb	r2, [r7, #14]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	32ae      	adds	r2, #174	; 0xae
 800bfc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00f      	beq.n	800bfec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bfcc:	7bba      	ldrb	r2, [r7, #14]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfd4:	7bba      	ldrb	r2, [r7, #14]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	32ae      	adds	r2, #174	; 0xae
 800bfda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	4798      	blx	r3
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bfea:	e004      	b.n	800bff6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bfec:	2303      	movs	r3, #3
 800bfee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bff0:	e001      	b.n	800bff6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bff2:	2303      	movs	r3, #3
 800bff4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	88db      	ldrh	r3, [r3, #6]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d110      	bne.n	800c020 <USBD_StdItfReq+0xc0>
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10d      	bne.n	800c020 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fdc7 	bl	800cb98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c00a:	e009      	b.n	800c020 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fcf7 	bl	800ca02 <USBD_CtlError>
          break;
 800c014:	e004      	b.n	800c020 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fcf2 	bl	800ca02 <USBD_CtlError>
          break;
 800c01e:	e000      	b.n	800c022 <USBD_StdItfReq+0xc2>
          break;
 800c020:	bf00      	nop
      }
      break;
 800c022:	e004      	b.n	800c02e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fceb 	bl	800ca02 <USBD_CtlError>
      break;
 800c02c:	bf00      	nop
  }

  return ret;
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	889b      	ldrh	r3, [r3, #4]
 800c04a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c054:	2b40      	cmp	r3, #64	; 0x40
 800c056:	d007      	beq.n	800c068 <USBD_StdEPReq+0x30>
 800c058:	2b40      	cmp	r3, #64	; 0x40
 800c05a:	f200 817f 	bhi.w	800c35c <USBD_StdEPReq+0x324>
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d02a      	beq.n	800c0b8 <USBD_StdEPReq+0x80>
 800c062:	2b20      	cmp	r3, #32
 800c064:	f040 817a 	bne.w	800c35c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7ff fe83 	bl	800bd78 <USBD_CoreFindEP>
 800c072:	4603      	mov	r3, r0
 800c074:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c076:	7b7b      	ldrb	r3, [r7, #13]
 800c078:	2bff      	cmp	r3, #255	; 0xff
 800c07a:	f000 8174 	beq.w	800c366 <USBD_StdEPReq+0x32e>
 800c07e:	7b7b      	ldrb	r3, [r7, #13]
 800c080:	2b00      	cmp	r3, #0
 800c082:	f040 8170 	bne.w	800c366 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c086:	7b7a      	ldrb	r2, [r7, #13]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c08e:	7b7a      	ldrb	r2, [r7, #13]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	32ae      	adds	r2, #174	; 0xae
 800c094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 8163 	beq.w	800c366 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c0a0:	7b7a      	ldrb	r2, [r7, #13]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	32ae      	adds	r2, #174	; 0xae
 800c0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	4798      	blx	r3
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c0b6:	e156      	b.n	800c366 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	785b      	ldrb	r3, [r3, #1]
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d008      	beq.n	800c0d2 <USBD_StdEPReq+0x9a>
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	f300 8145 	bgt.w	800c350 <USBD_StdEPReq+0x318>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 809b 	beq.w	800c202 <USBD_StdEPReq+0x1ca>
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d03c      	beq.n	800c14a <USBD_StdEPReq+0x112>
 800c0d0:	e13e      	b.n	800c350 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d002      	beq.n	800c0e4 <USBD_StdEPReq+0xac>
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d016      	beq.n	800c110 <USBD_StdEPReq+0xd8>
 800c0e2:	e02c      	b.n	800c13e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00d      	beq.n	800c106 <USBD_StdEPReq+0xce>
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	2b80      	cmp	r3, #128	; 0x80
 800c0ee:	d00a      	beq.n	800c106 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f003 fd79 	bl	800fbec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0fa:	2180      	movs	r1, #128	; 0x80
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f003 fd75 	bl	800fbec <USBD_LL_StallEP>
 800c102:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c104:	e020      	b.n	800c148 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fc7a 	bl	800ca02 <USBD_CtlError>
              break;
 800c10e:	e01b      	b.n	800c148 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	885b      	ldrh	r3, [r3, #2]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10e      	bne.n	800c136 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00b      	beq.n	800c136 <USBD_StdEPReq+0xfe>
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
 800c120:	2b80      	cmp	r3, #128	; 0x80
 800c122:	d008      	beq.n	800c136 <USBD_StdEPReq+0xfe>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	88db      	ldrh	r3, [r3, #6]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d104      	bne.n	800c136 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f003 fd5b 	bl	800fbec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fd2e 	bl	800cb98 <USBD_CtlSendStatus>

              break;
 800c13c:	e004      	b.n	800c148 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fc5e 	bl	800ca02 <USBD_CtlError>
              break;
 800c146:	bf00      	nop
          }
          break;
 800c148:	e107      	b.n	800c35a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d002      	beq.n	800c15c <USBD_StdEPReq+0x124>
 800c156:	2b03      	cmp	r3, #3
 800c158:	d016      	beq.n	800c188 <USBD_StdEPReq+0x150>
 800c15a:	e04b      	b.n	800c1f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00d      	beq.n	800c17e <USBD_StdEPReq+0x146>
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	2b80      	cmp	r3, #128	; 0x80
 800c166:	d00a      	beq.n	800c17e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f003 fd3d 	bl	800fbec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c172:	2180      	movs	r1, #128	; 0x80
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f003 fd39 	bl	800fbec <USBD_LL_StallEP>
 800c17a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c17c:	e040      	b.n	800c200 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fc3e 	bl	800ca02 <USBD_CtlError>
              break;
 800c186:	e03b      	b.n	800c200 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	885b      	ldrh	r3, [r3, #2]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d136      	bne.n	800c1fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f003 fd43 	bl	800fc2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fcf7 	bl	800cb98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff fde2 	bl	800bd78 <USBD_CoreFindEP>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1b8:	7b7b      	ldrb	r3, [r7, #13]
 800c1ba:	2bff      	cmp	r3, #255	; 0xff
 800c1bc:	d01f      	beq.n	800c1fe <USBD_StdEPReq+0x1c6>
 800c1be:	7b7b      	ldrb	r3, [r7, #13]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d11c      	bne.n	800c1fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c1c4:	7b7a      	ldrb	r2, [r7, #13]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c1cc:	7b7a      	ldrb	r2, [r7, #13]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	32ae      	adds	r2, #174	; 0xae
 800c1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d010      	beq.n	800c1fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1dc:	7b7a      	ldrb	r2, [r7, #13]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	32ae      	adds	r2, #174	; 0xae
 800c1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	4798      	blx	r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c1f2:	e004      	b.n	800c1fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fc03 	bl	800ca02 <USBD_CtlError>
              break;
 800c1fc:	e000      	b.n	800c200 <USBD_StdEPReq+0x1c8>
              break;
 800c1fe:	bf00      	nop
          }
          break;
 800c200:	e0ab      	b.n	800c35a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d002      	beq.n	800c214 <USBD_StdEPReq+0x1dc>
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d032      	beq.n	800c278 <USBD_StdEPReq+0x240>
 800c212:	e097      	b.n	800c344 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d007      	beq.n	800c22a <USBD_StdEPReq+0x1f2>
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	2b80      	cmp	r3, #128	; 0x80
 800c21e:	d004      	beq.n	800c22a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fbed 	bl	800ca02 <USBD_CtlError>
                break;
 800c228:	e091      	b.n	800c34e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c22a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da0b      	bge.n	800c24a <USBD_StdEPReq+0x212>
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	3310      	adds	r3, #16
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	e00b      	b.n	800c262 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	4413      	add	r3, r2
 800c260:	3304      	adds	r3, #4
 800c262:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2200      	movs	r2, #0
 800c268:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2202      	movs	r2, #2
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fc37 	bl	800cae4 <USBD_CtlSendData>
              break;
 800c276:	e06a      	b.n	800c34e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	da11      	bge.n	800c2a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c280:	7bbb      	ldrb	r3, [r7, #14]
 800c282:	f003 020f 	and.w	r2, r3, #15
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	440b      	add	r3, r1
 800c292:	3324      	adds	r3, #36	; 0x24
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d117      	bne.n	800c2ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fbb0 	bl	800ca02 <USBD_CtlError>
                  break;
 800c2a2:	e054      	b.n	800c34e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2a4:	7bbb      	ldrb	r3, [r7, #14]
 800c2a6:	f003 020f 	and.w	r2, r3, #15
 800c2aa:	6879      	ldr	r1, [r7, #4]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	440b      	add	r3, r1
 800c2b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d104      	bne.n	800c2ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fb9d 	bl	800ca02 <USBD_CtlError>
                  break;
 800c2c8:	e041      	b.n	800c34e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	da0b      	bge.n	800c2ea <USBD_StdEPReq+0x2b2>
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2d8:	4613      	mov	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4413      	add	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	3310      	adds	r3, #16
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	e00b      	b.n	800c302 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	4413      	add	r3, r2
 800c300:	3304      	adds	r3, #4
 800c302:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <USBD_StdEPReq+0x2d8>
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
 800c30c:	2b80      	cmp	r3, #128	; 0x80
 800c30e:	d103      	bne.n	800c318 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2200      	movs	r2, #0
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	e00e      	b.n	800c336 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c318:	7bbb      	ldrb	r3, [r7, #14]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f003 fca3 	bl	800fc68 <USBD_LL_IsStallEP>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d003      	beq.n	800c330 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2201      	movs	r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
 800c32e:	e002      	b.n	800c336 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2202      	movs	r2, #2
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fbd1 	bl	800cae4 <USBD_CtlSendData>
              break;
 800c342:	e004      	b.n	800c34e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c344:	6839      	ldr	r1, [r7, #0]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fb5b 	bl	800ca02 <USBD_CtlError>
              break;
 800c34c:	bf00      	nop
          }
          break;
 800c34e:	e004      	b.n	800c35a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fb55 	bl	800ca02 <USBD_CtlError>
          break;
 800c358:	bf00      	nop
      }
      break;
 800c35a:	e005      	b.n	800c368 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fb4f 	bl	800ca02 <USBD_CtlError>
      break;
 800c364:	e000      	b.n	800c368 <USBD_StdEPReq+0x330>
      break;
 800c366:	bf00      	nop
  }

  return ret;
 800c368:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
	...

0800c374 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c37e:	2300      	movs	r3, #0
 800c380:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c386:	2300      	movs	r3, #0
 800c388:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	885b      	ldrh	r3, [r3, #2]
 800c38e:	0a1b      	lsrs	r3, r3, #8
 800c390:	b29b      	uxth	r3, r3
 800c392:	3b01      	subs	r3, #1
 800c394:	2b06      	cmp	r3, #6
 800c396:	f200 8128 	bhi.w	800c5ea <USBD_GetDescriptor+0x276>
 800c39a:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <USBD_GetDescriptor+0x2c>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c3bd 	.word	0x0800c3bd
 800c3a4:	0800c3d5 	.word	0x0800c3d5
 800c3a8:	0800c415 	.word	0x0800c415
 800c3ac:	0800c5eb 	.word	0x0800c5eb
 800c3b0:	0800c5eb 	.word	0x0800c5eb
 800c3b4:	0800c58b 	.word	0x0800c58b
 800c3b8:	0800c5b7 	.word	0x0800c5b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
      break;
 800c3d2:	e112      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	7c1b      	ldrb	r3, [r3, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10d      	bne.n	800c3f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e4:	f107 0208 	add.w	r2, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3f6:	e100      	b.n	800c5fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c400:	f107 0208 	add.w	r2, r7, #8
 800c404:	4610      	mov	r0, r2
 800c406:	4798      	blx	r3
 800c408:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3301      	adds	r3, #1
 800c40e:	2202      	movs	r2, #2
 800c410:	701a      	strb	r2, [r3, #0]
      break;
 800c412:	e0f2      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	885b      	ldrh	r3, [r3, #2]
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	f200 80ac 	bhi.w	800c578 <USBD_GetDescriptor+0x204>
 800c420:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <USBD_GetDescriptor+0xb4>)
 800c422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c426:	bf00      	nop
 800c428:	0800c441 	.word	0x0800c441
 800c42c:	0800c475 	.word	0x0800c475
 800c430:	0800c4a9 	.word	0x0800c4a9
 800c434:	0800c4dd 	.word	0x0800c4dd
 800c438:	0800c511 	.word	0x0800c511
 800c43c:	0800c545 	.word	0x0800c545
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00b      	beq.n	800c464 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	7c12      	ldrb	r2, [r2, #16]
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	4610      	mov	r0, r2
 800c45e:	4798      	blx	r3
 800c460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c462:	e091      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 facb 	bl	800ca02 <USBD_CtlError>
            err++;
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	3301      	adds	r3, #1
 800c470:	72fb      	strb	r3, [r7, #11]
          break;
 800c472:	e089      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7c12      	ldrb	r2, [r2, #16]
 800c48c:	f107 0108 	add.w	r1, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c496:	e077      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fab1 	bl	800ca02 <USBD_CtlError>
            err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a6:	e06f      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	7c12      	ldrb	r2, [r2, #16]
 800c4c0:	f107 0108 	add.w	r1, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ca:	e05d      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa97 	bl	800ca02 <USBD_CtlError>
            err++;
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4da:	e055      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00b      	beq.n	800c500 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7c12      	ldrb	r2, [r2, #16]
 800c4f4:	f107 0108 	add.w	r1, r7, #8
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fe:	e043      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fa7d 	bl	800ca02 <USBD_CtlError>
            err++;
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	3301      	adds	r3, #1
 800c50c:	72fb      	strb	r3, [r7, #11]
          break;
 800c50e:	e03b      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	7c12      	ldrb	r2, [r2, #16]
 800c528:	f107 0108 	add.w	r1, r7, #8
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c532:	e029      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fa63 	bl	800ca02 <USBD_CtlError>
            err++;
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	3301      	adds	r3, #1
 800c540:	72fb      	strb	r3, [r7, #11]
          break;
 800c542:	e021      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00b      	beq.n	800c568 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	7c12      	ldrb	r2, [r2, #16]
 800c55c:	f107 0108 	add.w	r1, r7, #8
 800c560:	4610      	mov	r0, r2
 800c562:	4798      	blx	r3
 800c564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c566:	e00f      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fa49 	bl	800ca02 <USBD_CtlError>
            err++;
 800c570:	7afb      	ldrb	r3, [r7, #11]
 800c572:	3301      	adds	r3, #1
 800c574:	72fb      	strb	r3, [r7, #11]
          break;
 800c576:	e007      	b.n	800c588 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa41 	bl	800ca02 <USBD_CtlError>
          err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c586:	bf00      	nop
      }
      break;
 800c588:	e037      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7c1b      	ldrb	r3, [r3, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59a:	f107 0208 	add.w	r2, r7, #8
 800c59e:	4610      	mov	r0, r2
 800c5a0:	4798      	blx	r3
 800c5a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5a4:	e029      	b.n	800c5fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fa2a 	bl	800ca02 <USBD_CtlError>
        err++;
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b4:	e021      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7c1b      	ldrb	r3, [r3, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10d      	bne.n	800c5da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c6:	f107 0208 	add.w	r2, r7, #8
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	4798      	blx	r3
 800c5ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	2207      	movs	r2, #7
 800c5d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5d8:	e00f      	b.n	800c5fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fa10 	bl	800ca02 <USBD_CtlError>
        err++;
 800c5e2:	7afb      	ldrb	r3, [r7, #11]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5e8:	e007      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fa08 	bl	800ca02 <USBD_CtlError>
      err++;
 800c5f2:	7afb      	ldrb	r3, [r7, #11]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5f8:	bf00      	nop
  }

  if (err != 0U)
 800c5fa:	7afb      	ldrb	r3, [r7, #11]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d11e      	bne.n	800c63e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	88db      	ldrh	r3, [r3, #6]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d016      	beq.n	800c636 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c608:	893b      	ldrh	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00e      	beq.n	800c62c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	88da      	ldrh	r2, [r3, #6]
 800c612:	893b      	ldrh	r3, [r7, #8]
 800c614:	4293      	cmp	r3, r2
 800c616:	bf28      	it	cs
 800c618:	4613      	movcs	r3, r2
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c61e:	893b      	ldrh	r3, [r7, #8]
 800c620:	461a      	mov	r2, r3
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fa5d 	bl	800cae4 <USBD_CtlSendData>
 800c62a:	e009      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f9e7 	bl	800ca02 <USBD_CtlError>
 800c634:	e004      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 faae 	bl	800cb98 <USBD_CtlSendStatus>
 800c63c:	e000      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
    return;
 800c63e:	bf00      	nop
  }
}
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop

0800c648 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	889b      	ldrh	r3, [r3, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d131      	bne.n	800c6be <USBD_SetAddress+0x76>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d12d      	bne.n	800c6be <USBD_SetAddress+0x76>
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	885b      	ldrh	r3, [r3, #2]
 800c666:	2b7f      	cmp	r3, #127	; 0x7f
 800c668:	d829      	bhi.n	800c6be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	885b      	ldrh	r3, [r3, #2]
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c674:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b03      	cmp	r3, #3
 800c680:	d104      	bne.n	800c68c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f9bc 	bl	800ca02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c68a:	e01d      	b.n	800c6c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	7bfa      	ldrb	r2, [r7, #15]
 800c690:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f003 fb11 	bl	800fcc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fa7a 	bl	800cb98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d004      	beq.n	800c6b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b2:	e009      	b.n	800c6c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6bc:	e004      	b.n	800c6c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f99e 	bl	800ca02 <USBD_CtlError>
  }
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	885b      	ldrh	r3, [r3, #2]
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	4b4e      	ldr	r3, [pc, #312]	; (800c820 <USBD_SetConfig+0x150>)
 800c6e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6e8:	4b4d      	ldr	r3, [pc, #308]	; (800c820 <USBD_SetConfig+0x150>)
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d905      	bls.n	800c6fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f985 	bl	800ca02 <USBD_CtlError>
    return USBD_FAIL;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e08c      	b.n	800c816 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b02      	cmp	r3, #2
 800c706:	d002      	beq.n	800c70e <USBD_SetConfig+0x3e>
 800c708:	2b03      	cmp	r3, #3
 800c70a:	d029      	beq.n	800c760 <USBD_SetConfig+0x90>
 800c70c:	e075      	b.n	800c7fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c70e:	4b44      	ldr	r3, [pc, #272]	; (800c820 <USBD_SetConfig+0x150>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d020      	beq.n	800c758 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c716:	4b42      	ldr	r3, [pc, #264]	; (800c820 <USBD_SetConfig+0x150>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c720:	4b3f      	ldr	r3, [pc, #252]	; (800c820 <USBD_SetConfig+0x150>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7fe ffe7 	bl	800b6fa <USBD_SetClassConfig>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d008      	beq.n	800c748 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f962 	bl	800ca02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2202      	movs	r2, #2
 800c742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c746:	e065      	b.n	800c814 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fa25 	bl	800cb98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2203      	movs	r2, #3
 800c752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c756:	e05d      	b.n	800c814 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fa1d 	bl	800cb98 <USBD_CtlSendStatus>
      break;
 800c75e:	e059      	b.n	800c814 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c760:	4b2f      	ldr	r3, [pc, #188]	; (800c820 <USBD_SetConfig+0x150>)
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d112      	bne.n	800c78e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2202      	movs	r2, #2
 800c76c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c770:	4b2b      	ldr	r3, [pc, #172]	; (800c820 <USBD_SetConfig+0x150>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c77a:	4b29      	ldr	r3, [pc, #164]	; (800c820 <USBD_SetConfig+0x150>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7fe ffd6 	bl	800b732 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fa06 	bl	800cb98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c78c:	e042      	b.n	800c814 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c78e:	4b24      	ldr	r3, [pc, #144]	; (800c820 <USBD_SetConfig+0x150>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d02a      	beq.n	800c7f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7fe ffc4 	bl	800b732 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c7aa:	4b1d      	ldr	r3, [pc, #116]	; (800c820 <USBD_SetConfig+0x150>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7b4:	4b1a      	ldr	r3, [pc, #104]	; (800c820 <USBD_SetConfig+0x150>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f7fe ff9d 	bl	800b6fa <USBD_SetClassConfig>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00f      	beq.n	800c7ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 f918 	bl	800ca02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7fe ffa9 	bl	800b732 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c7e8:	e014      	b.n	800c814 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f9d4 	bl	800cb98 <USBD_CtlSendStatus>
      break;
 800c7f0:	e010      	b.n	800c814 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f9d0 	bl	800cb98 <USBD_CtlSendStatus>
      break;
 800c7f8:	e00c      	b.n	800c814 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f900 	bl	800ca02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c802:	4b07      	ldr	r3, [pc, #28]	; (800c820 <USBD_SetConfig+0x150>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7fe ff92 	bl	800b732 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c80e:	2303      	movs	r3, #3
 800c810:	73fb      	strb	r3, [r7, #15]
      break;
 800c812:	bf00      	nop
  }

  return ret;
 800c814:	7bfb      	ldrb	r3, [r7, #15]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	20000c1c 	.word	0x20000c1c

0800c824 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	88db      	ldrh	r3, [r3, #6]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d004      	beq.n	800c840 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c836:	6839      	ldr	r1, [r7, #0]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f8e2 	bl	800ca02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c83e:	e023      	b.n	800c888 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b02      	cmp	r3, #2
 800c84a:	dc02      	bgt.n	800c852 <USBD_GetConfig+0x2e>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	dc03      	bgt.n	800c858 <USBD_GetConfig+0x34>
 800c850:	e015      	b.n	800c87e <USBD_GetConfig+0x5a>
 800c852:	2b03      	cmp	r3, #3
 800c854:	d00b      	beq.n	800c86e <USBD_GetConfig+0x4a>
 800c856:	e012      	b.n	800c87e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	3308      	adds	r3, #8
 800c862:	2201      	movs	r2, #1
 800c864:	4619      	mov	r1, r3
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f93c 	bl	800cae4 <USBD_CtlSendData>
        break;
 800c86c:	e00c      	b.n	800c888 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3304      	adds	r3, #4
 800c872:	2201      	movs	r2, #1
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f934 	bl	800cae4 <USBD_CtlSendData>
        break;
 800c87c:	e004      	b.n	800c888 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f8be 	bl	800ca02 <USBD_CtlError>
        break;
 800c886:	bf00      	nop
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d81e      	bhi.n	800c8e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	88db      	ldrh	r3, [r3, #6]
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d004      	beq.n	800c8ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c8b0:	6839      	ldr	r1, [r7, #0]
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f8a5 	bl	800ca02 <USBD_CtlError>
        break;
 800c8b8:	e01a      	b.n	800c8f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d005      	beq.n	800c8d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f043 0202 	orr.w	r2, r3, #2
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	330c      	adds	r3, #12
 800c8da:	2202      	movs	r2, #2
 800c8dc:	4619      	mov	r1, r3
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f900 	bl	800cae4 <USBD_CtlSendData>
      break;
 800c8e4:	e004      	b.n	800c8f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f88a 	bl	800ca02 <USBD_CtlError>
      break;
 800c8ee:	bf00      	nop
  }
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	885b      	ldrh	r3, [r3, #2]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d107      	bne.n	800c91a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2201      	movs	r2, #1
 800c90e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f940 	bl	800cb98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c918:	e013      	b.n	800c942 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	885b      	ldrh	r3, [r3, #2]
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d10b      	bne.n	800c93a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	889b      	ldrh	r3, [r3, #4]
 800c926:	0a1b      	lsrs	r3, r3, #8
 800c928:	b29b      	uxth	r3, r3
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f930 	bl	800cb98 <USBD_CtlSendStatus>
}
 800c938:	e003      	b.n	800c942 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f860 	bl	800ca02 <USBD_CtlError>
}
 800c942:	bf00      	nop
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	3b01      	subs	r3, #1
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d80b      	bhi.n	800c97a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	885b      	ldrh	r3, [r3, #2]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d10c      	bne.n	800c984 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f910 	bl	800cb98 <USBD_CtlSendStatus>
      }
      break;
 800c978:	e004      	b.n	800c984 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c97a:	6839      	ldr	r1, [r7, #0]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f840 	bl	800ca02 <USBD_CtlError>
      break;
 800c982:	e000      	b.n	800c986 <USBD_ClrFeature+0x3c>
      break;
 800c984:	bf00      	nop
  }
}
 800c986:	bf00      	nop
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b084      	sub	sp, #16
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	781a      	ldrb	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	781a      	ldrb	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff fa41 	bl	800be40 <SWAPBYTE>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f7ff fa34 	bl	800be40 <SWAPBYTE>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	461a      	mov	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f7ff fa27 	bl	800be40 <SWAPBYTE>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	80da      	strh	r2, [r3, #6]
}
 800c9fa:	bf00      	nop
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b082      	sub	sp, #8
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca0c:	2180      	movs	r1, #128	; 0x80
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f003 f8ec 	bl	800fbec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca14:	2100      	movs	r1, #0
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f003 f8e8 	bl	800fbec <USBD_LL_StallEP>
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca30:	2300      	movs	r3, #0
 800ca32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d036      	beq.n	800caa8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca3e:	6938      	ldr	r0, [r7, #16]
 800ca40:	f000 f836 	bl	800cab0 <USBD_GetLen>
 800ca44:	4603      	mov	r3, r0
 800ca46:	3301      	adds	r3, #1
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	4413      	add	r3, r2
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	7812      	ldrb	r2, [r2, #0]
 800ca5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	3301      	adds	r3, #1
 800ca62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	4413      	add	r3, r2
 800ca6a:	2203      	movs	r2, #3
 800ca6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	3301      	adds	r3, #1
 800ca72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca74:	e013      	b.n	800ca9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca76:	7dfb      	ldrb	r3, [r7, #23]
 800ca78:	68ba      	ldr	r2, [r7, #8]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	7812      	ldrb	r2, [r2, #0]
 800ca80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	3301      	adds	r3, #1
 800ca86:	613b      	str	r3, [r7, #16]
    idx++;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	4413      	add	r3, r2
 800ca94:	2200      	movs	r2, #0
 800ca96:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1e7      	bne.n	800ca76 <USBD_GetString+0x52>
 800caa6:	e000      	b.n	800caaa <USBD_GetString+0x86>
    return;
 800caa8:	bf00      	nop
  }
}
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cac0:	e005      	b.n	800cace <USBD_GetLen+0x1e>
  {
    len++;
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	3301      	adds	r3, #1
 800cac6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	3301      	adds	r3, #1
 800cacc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1f5      	bne.n	800cac2 <USBD_GetLen+0x12>
  }

  return len;
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2202      	movs	r2, #2
 800caf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	2100      	movs	r1, #0
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f003 f8f7 	bl	800fcfe <USBD_LL_Transmit>

  return USBD_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	60f8      	str	r0, [r7, #12]
 800cb22:	60b9      	str	r1, [r7, #8]
 800cb24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f003 f8e6 	bl	800fcfe <USBD_LL_Transmit>

  return USBD_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2203      	movs	r2, #3
 800cb4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	68ba      	ldr	r2, [r7, #8]
 800cb64:	2100      	movs	r1, #0
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f003 f8ea 	bl	800fd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	60f8      	str	r0, [r7, #12]
 800cb7e:	60b9      	str	r1, [r7, #8]
 800cb80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	2100      	movs	r1, #0
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f003 f8d9 	bl	800fd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2204      	movs	r2, #4
 800cba4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cba8:	2300      	movs	r3, #0
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2100      	movs	r1, #0
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f003 f8a5 	bl	800fcfe <USBD_LL_Transmit>

  return USBD_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2205      	movs	r2, #5
 800cbca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbce:	2300      	movs	r3, #0
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f003 f8b3 	bl	800fd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	4603      	mov	r3, r0
 800cbec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 800cbf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cbf6:	2b84      	cmp	r3, #132	; 0x84
 800cbf8:	d005      	beq.n	800cc06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cbfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4413      	add	r3, r2
 800cc02:	3303      	adds	r3, #3
 800cc04:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 800cc06:	68fb      	ldr	r3, [r7, #12]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cc18:	f001 f8d6 	bl	800ddc8 <vTaskStartScheduler>

  return osOK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cc22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc24:	b089      	sub	sp, #36	; 0x24
 800cc26:	af04      	add	r7, sp, #16
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d020      	beq.n	800cc76 <osThreadCreate+0x54>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	699b      	ldr	r3, [r3, #24]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d01c      	beq.n	800cc76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	685c      	ldr	r4, [r3, #4]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	691e      	ldr	r6, [r3, #16]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff ffc8 	bl	800cbe4 <makeFreeRtosPriority>
 800cc54:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc5e:	9202      	str	r2, [sp, #8]
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	9100      	str	r1, [sp, #0]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	4632      	mov	r2, r6
 800cc68:	4629      	mov	r1, r5
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f000 fdc8 	bl	800d800 <xTaskCreateStatic>
 800cc70:	4603      	mov	r3, r0
 800cc72:	60fb      	str	r3, [r7, #12]
 800cc74:	e01c      	b.n	800ccb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685c      	ldr	r4, [r3, #4]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc82:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff ffaa 	bl	800cbe4 <makeFreeRtosPriority>
 800cc90:	4602      	mov	r2, r0
 800cc92:	f107 030c 	add.w	r3, r7, #12
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	9200      	str	r2, [sp, #0]
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	4629      	mov	r1, r5
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 fe0a 	bl	800d8ba <xTaskCreate>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d001      	beq.n	800ccb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	e000      	b.n	800ccb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <osDelay+0x16>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	e000      	b.n	800ccd2 <osDelay+0x18>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 ffb2 	bl	800dc3c <vTaskDelay>

  return osOK;
 800ccd8:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f103 0208 	add.w	r2, r3, #8
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccfa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f103 0208 	add.w	r2, r3, #8
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f103 0208 	add.w	r2, r3, #8
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd16:	bf00      	nop
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd22:	b480      	push	{r7}
 800cd24:	b083      	sub	sp, #12
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	689a      	ldr	r2, [r3, #8]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	601a      	str	r2, [r3, #0]
}
 800cd78:	bf00      	nop
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd9a:	d103      	bne.n	800cda4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	691b      	ldr	r3, [r3, #16]
 800cda0:	60fb      	str	r3, [r7, #12]
 800cda2:	e00c      	b.n	800cdbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	3308      	adds	r3, #8
 800cda8:	60fb      	str	r3, [r7, #12]
 800cdaa:	e002      	b.n	800cdb2 <vListInsert+0x2e>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d2f6      	bcs.n	800cdac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	685a      	ldr	r2, [r3, #4]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	601a      	str	r2, [r3, #0]
}
 800cdea:	bf00      	nop
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b085      	sub	sp, #20
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	6892      	ldr	r2, [r2, #8]
 800ce0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	6852      	ldr	r2, [r2, #4]
 800ce16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d103      	bne.n	800ce2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689a      	ldr	r2, [r3, #8]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	1e5a      	subs	r2, r3, #1
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
	...

0800ce4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10a      	bne.n	800ce76 <xQueueGenericReset+0x2a>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	60bb      	str	r3, [r7, #8]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce76:	f002 f985 	bl	800f184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce82:	68f9      	ldr	r1, [r7, #12]
 800ce84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce86:	fb01 f303 	mul.w	r3, r1, r3
 800ce8a:	441a      	add	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cea6:	3b01      	subs	r3, #1
 800cea8:	68f9      	ldr	r1, [r7, #12]
 800ceaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ceac:	fb01 f303 	mul.w	r3, r1, r3
 800ceb0:	441a      	add	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	22ff      	movs	r2, #255	; 0xff
 800ceba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	22ff      	movs	r2, #255	; 0xff
 800cec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d114      	bne.n	800cef6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	691b      	ldr	r3, [r3, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01a      	beq.n	800cf0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	3310      	adds	r3, #16
 800ced8:	4618      	mov	r0, r3
 800ceda:	f001 f9f9 	bl	800e2d0 <xTaskRemoveFromEventList>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d012      	beq.n	800cf0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cee4:	4b0c      	ldr	r3, [pc, #48]	; (800cf18 <xQueueGenericReset+0xcc>)
 800cee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceea:	601a      	str	r2, [r3, #0]
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	e009      	b.n	800cf0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	3310      	adds	r3, #16
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7ff fef1 	bl	800cce2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	3324      	adds	r3, #36	; 0x24
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7ff feec 	bl	800cce2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf0a:	f002 f96b 	bl	800f1e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf0e:	2301      	movs	r3, #1
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	e000ed04 	.word	0xe000ed04

0800cf1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08e      	sub	sp, #56	; 0x38
 800cf20:	af02      	add	r7, sp, #8
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10a      	bne.n	800cf46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf42:	bf00      	nop
 800cf44:	e7fe      	b.n	800cf44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10a      	bne.n	800cf62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <xQueueGenericCreateStatic+0x52>
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <xQueueGenericCreateStatic+0x56>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e000      	b.n	800cf74 <xQueueGenericCreateStatic+0x58>
 800cf72:	2300      	movs	r3, #0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10a      	bne.n	800cf8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	623b      	str	r3, [r7, #32]
}
 800cf8a:	bf00      	nop
 800cf8c:	e7fe      	b.n	800cf8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <xQueueGenericCreateStatic+0x7e>
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <xQueueGenericCreateStatic+0x82>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e000      	b.n	800cfa0 <xQueueGenericCreateStatic+0x84>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10a      	bne.n	800cfba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	61fb      	str	r3, [r7, #28]
}
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cfba:	2348      	movs	r3, #72	; 0x48
 800cfbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b48      	cmp	r3, #72	; 0x48
 800cfc2:	d00a      	beq.n	800cfda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	61bb      	str	r3, [r7, #24]
}
 800cfd6:	bf00      	nop
 800cfd8:	e7fe      	b.n	800cfd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00d      	beq.n	800d002 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	4613      	mov	r3, r2
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	68b9      	ldr	r1, [r7, #8]
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f000 f805 	bl	800d00c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d004:	4618      	mov	r0, r3
 800d006:	3730      	adds	r7, #48	; 0x30
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d103      	bne.n	800d028 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	e002      	b.n	800d02e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d03a:	2101      	movs	r1, #1
 800d03c:	69b8      	ldr	r0, [r7, #24]
 800d03e:	f7ff ff05 	bl	800ce4c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d042:	bf00      	nop
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08e      	sub	sp, #56	; 0x38
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d05a:	2300      	movs	r3, #0
 800d05c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10a      	bne.n	800d07e <xQueueGenericSend+0x32>
	__asm volatile
 800d068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d103      	bne.n	800d08c <xQueueGenericSend+0x40>
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <xQueueGenericSend+0x44>
 800d08c:	2301      	movs	r3, #1
 800d08e:	e000      	b.n	800d092 <xQueueGenericSend+0x46>
 800d090:	2300      	movs	r3, #0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10a      	bne.n	800d0ac <xQueueGenericSend+0x60>
	__asm volatile
 800d096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0a8:	bf00      	nop
 800d0aa:	e7fe      	b.n	800d0aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d103      	bne.n	800d0ba <xQueueGenericSend+0x6e>
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d101      	bne.n	800d0be <xQueueGenericSend+0x72>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e000      	b.n	800d0c0 <xQueueGenericSend+0x74>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <xQueueGenericSend+0x8e>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	623b      	str	r3, [r7, #32]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0da:	f001 fab5 	bl	800e648 <xTaskGetSchedulerState>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d102      	bne.n	800d0ea <xQueueGenericSend+0x9e>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <xQueueGenericSend+0xa2>
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e000      	b.n	800d0f0 <xQueueGenericSend+0xa4>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10a      	bne.n	800d10a <xQueueGenericSend+0xbe>
	__asm volatile
 800d0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	61fb      	str	r3, [r7, #28]
}
 800d106:	bf00      	nop
 800d108:	e7fe      	b.n	800d108 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d10a:	f002 f83b 	bl	800f184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d116:	429a      	cmp	r2, r3
 800d118:	d302      	bcc.n	800d120 <xQueueGenericSend+0xd4>
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	d129      	bne.n	800d174 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	68b9      	ldr	r1, [r7, #8]
 800d124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d126:	f000 fa0b 	bl	800d540 <prvCopyDataToQueue>
 800d12a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d130:	2b00      	cmp	r3, #0
 800d132:	d010      	beq.n	800d156 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	3324      	adds	r3, #36	; 0x24
 800d138:	4618      	mov	r0, r3
 800d13a:	f001 f8c9 	bl	800e2d0 <xTaskRemoveFromEventList>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d013      	beq.n	800d16c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d144:	4b3f      	ldr	r3, [pc, #252]	; (800d244 <xQueueGenericSend+0x1f8>)
 800d146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	e00a      	b.n	800d16c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d007      	beq.n	800d16c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d15c:	4b39      	ldr	r3, [pc, #228]	; (800d244 <xQueueGenericSend+0x1f8>)
 800d15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d16c:	f002 f83a 	bl	800f1e4 <vPortExitCritical>
				return pdPASS;
 800d170:	2301      	movs	r3, #1
 800d172:	e063      	b.n	800d23c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d103      	bne.n	800d182 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d17a:	f002 f833 	bl	800f1e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	e05c      	b.n	800d23c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d188:	f107 0314 	add.w	r3, r7, #20
 800d18c:	4618      	mov	r0, r3
 800d18e:	f001 f901 	bl	800e394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d192:	2301      	movs	r3, #1
 800d194:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d196:	f002 f825 	bl	800f1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d19a:	f000 fe7b 	bl	800de94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d19e:	f001 fff1 	bl	800f184 <vPortEnterCritical>
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1a8:	b25b      	sxtb	r3, r3
 800d1aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1ae:	d103      	bne.n	800d1b8 <xQueueGenericSend+0x16c>
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1be:	b25b      	sxtb	r3, r3
 800d1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1c4:	d103      	bne.n	800d1ce <xQueueGenericSend+0x182>
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ce:	f002 f809 	bl	800f1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1d2:	1d3a      	adds	r2, r7, #4
 800d1d4:	f107 0314 	add.w	r3, r7, #20
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f001 f8f0 	bl	800e3c0 <xTaskCheckForTimeOut>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d124      	bne.n	800d230 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d1e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e8:	f000 fa94 	bl	800d714 <prvIsQueueFull>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d018      	beq.n	800d224 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	3310      	adds	r3, #16
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f001 f818 	bl	800e230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d202:	f000 fa1f 	bl	800d644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d206:	f000 fe53 	bl	800deb0 <xTaskResumeAll>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f47f af7c 	bne.w	800d10a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d212:	4b0c      	ldr	r3, [pc, #48]	; (800d244 <xQueueGenericSend+0x1f8>)
 800d214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	e772      	b.n	800d10a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d226:	f000 fa0d 	bl	800d644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d22a:	f000 fe41 	bl	800deb0 <xTaskResumeAll>
 800d22e:	e76c      	b.n	800d10a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d232:	f000 fa07 	bl	800d644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d236:	f000 fe3b 	bl	800deb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d23a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3738      	adds	r7, #56	; 0x38
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	e000ed04 	.word	0xe000ed04

0800d248 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b090      	sub	sp, #64	; 0x40
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
 800d254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10a      	bne.n	800d276 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d272:	bf00      	nop
 800d274:	e7fe      	b.n	800d274 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <xQueueGenericSendFromISR+0x3c>
 800d27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <xQueueGenericSendFromISR+0x40>
 800d284:	2301      	movs	r3, #1
 800d286:	e000      	b.n	800d28a <xQueueGenericSendFromISR+0x42>
 800d288:	2300      	movs	r3, #0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10a      	bne.n	800d2a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2a0:	bf00      	nop
 800d2a2:	e7fe      	b.n	800d2a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d103      	bne.n	800d2b2 <xQueueGenericSendFromISR+0x6a>
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d101      	bne.n	800d2b6 <xQueueGenericSendFromISR+0x6e>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e000      	b.n	800d2b8 <xQueueGenericSendFromISR+0x70>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10a      	bne.n	800d2d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	623b      	str	r3, [r7, #32]
}
 800d2ce:	bf00      	nop
 800d2d0:	e7fe      	b.n	800d2d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2d2:	f002 f839 	bl	800f348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d2d6:	f3ef 8211 	mrs	r2, BASEPRI
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	61fa      	str	r2, [r7, #28]
 800d2ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d2ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d302      	bcc.n	800d304 <xQueueGenericSendFromISR+0xbc>
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b02      	cmp	r3, #2
 800d302:	d12f      	bne.n	800d364 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d312:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	68b9      	ldr	r1, [r7, #8]
 800d318:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d31a:	f000 f911 	bl	800d540 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d31e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d326:	d112      	bne.n	800d34e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d016      	beq.n	800d35e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d332:	3324      	adds	r3, #36	; 0x24
 800d334:	4618      	mov	r0, r3
 800d336:	f000 ffcb 	bl	800e2d0 <xTaskRemoveFromEventList>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00e      	beq.n	800d35e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00b      	beq.n	800d35e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	601a      	str	r2, [r3, #0]
 800d34c:	e007      	b.n	800d35e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d34e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d352:	3301      	adds	r3, #1
 800d354:	b2db      	uxtb	r3, r3
 800d356:	b25a      	sxtb	r2, r3
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d35e:	2301      	movs	r3, #1
 800d360:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d362:	e001      	b.n	800d368 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d364:	2300      	movs	r3, #0
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d372:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d376:	4618      	mov	r0, r3
 800d378:	3740      	adds	r7, #64	; 0x40
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
	...

0800d380 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b08c      	sub	sp, #48	; 0x30
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d38c:	2300      	movs	r3, #0
 800d38e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10a      	bne.n	800d3b0 <xQueueReceive+0x30>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	623b      	str	r3, [r7, #32]
}
 800d3ac:	bf00      	nop
 800d3ae:	e7fe      	b.n	800d3ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d103      	bne.n	800d3be <xQueueReceive+0x3e>
 800d3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <xQueueReceive+0x42>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e000      	b.n	800d3c4 <xQueueReceive+0x44>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10a      	bne.n	800d3de <xQueueReceive+0x5e>
	__asm volatile
 800d3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3cc:	f383 8811 	msr	BASEPRI, r3
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	61fb      	str	r3, [r7, #28]
}
 800d3da:	bf00      	nop
 800d3dc:	e7fe      	b.n	800d3dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3de:	f001 f933 	bl	800e648 <xTaskGetSchedulerState>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d102      	bne.n	800d3ee <xQueueReceive+0x6e>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <xQueueReceive+0x72>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e000      	b.n	800d3f4 <xQueueReceive+0x74>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <xQueueReceive+0x8e>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	61bb      	str	r3, [r7, #24]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d40e:	f001 feb9 	bl	800f184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d416:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d01f      	beq.n	800d45e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d422:	f000 f8e9 	bl	800d5f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	1e5a      	subs	r2, r3, #1
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00f      	beq.n	800d456 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d438:	3310      	adds	r3, #16
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 ff48 	bl	800e2d0 <xTaskRemoveFromEventList>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d007      	beq.n	800d456 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d446:	4b3d      	ldr	r3, [pc, #244]	; (800d53c <xQueueReceive+0x1bc>)
 800d448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d456:	f001 fec5 	bl	800f1e4 <vPortExitCritical>
				return pdPASS;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e069      	b.n	800d532 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d103      	bne.n	800d46c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d464:	f001 febe 	bl	800f1e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d468:	2300      	movs	r3, #0
 800d46a:	e062      	b.n	800d532 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d106      	bne.n	800d480 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d472:	f107 0310 	add.w	r3, r7, #16
 800d476:	4618      	mov	r0, r3
 800d478:	f000 ff8c 	bl	800e394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d480:	f001 feb0 	bl	800f1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d484:	f000 fd06 	bl	800de94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d488:	f001 fe7c 	bl	800f184 <vPortEnterCritical>
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d492:	b25b      	sxtb	r3, r3
 800d494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d498:	d103      	bne.n	800d4a2 <xQueueReceive+0x122>
 800d49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4a8:	b25b      	sxtb	r3, r3
 800d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4ae:	d103      	bne.n	800d4b8 <xQueueReceive+0x138>
 800d4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4b8:	f001 fe94 	bl	800f1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4bc:	1d3a      	adds	r2, r7, #4
 800d4be:	f107 0310 	add.w	r3, r7, #16
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 ff7b 	bl	800e3c0 <xTaskCheckForTimeOut>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d123      	bne.n	800d518 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4d2:	f000 f909 	bl	800d6e8 <prvIsQueueEmpty>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d017      	beq.n	800d50c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	3324      	adds	r3, #36	; 0x24
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 fea3 	bl	800e230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ec:	f000 f8aa 	bl	800d644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4f0:	f000 fcde 	bl	800deb0 <xTaskResumeAll>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d189      	bne.n	800d40e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d4fa:	4b10      	ldr	r3, [pc, #64]	; (800d53c <xQueueReceive+0x1bc>)
 800d4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	e780      	b.n	800d40e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d50c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d50e:	f000 f899 	bl	800d644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d512:	f000 fccd 	bl	800deb0 <xTaskResumeAll>
 800d516:	e77a      	b.n	800d40e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d51a:	f000 f893 	bl	800d644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d51e:	f000 fcc7 	bl	800deb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d524:	f000 f8e0 	bl	800d6e8 <prvIsQueueEmpty>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f43f af6f 	beq.w	800d40e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d532:	4618      	mov	r0, r3
 800d534:	3730      	adds	r7, #48	; 0x30
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	e000ed04 	.word	0xe000ed04

0800d540 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d54c:	2300      	movs	r3, #0
 800d54e:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d554:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d043      	beq.n	800d5e6 <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d119      	bne.n	800d598 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6858      	ldr	r0, [r3, #4]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d56c:	461a      	mov	r2, r3
 800d56e:	68b9      	ldr	r1, [r7, #8]
 800d570:	f003 fb30 	bl	8010bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	685a      	ldr	r2, [r3, #4]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57c:	441a      	add	r2, r3
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	685a      	ldr	r2, [r3, #4]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d32b      	bcc.n	800d5e6 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	605a      	str	r2, [r3, #4]
 800d596:	e026      	b.n	800d5e6 <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	68d8      	ldr	r0, [r3, #12]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	f003 fb16 	bl	8010bd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	68da      	ldr	r2, [r3, #12]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b0:	425b      	negs	r3, r3
 800d5b2:	441a      	add	r2, r3
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	68da      	ldr	r2, [r3, #12]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d207      	bcs.n	800d5d4 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	689a      	ldr	r2, [r3, #8]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5cc:	425b      	negs	r3, r3
 800d5ce:	441a      	add	r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d105      	bne.n	800d5e6 <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d5ee:	693b      	ldr	r3, [r7, #16]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d606:	2b00      	cmp	r3, #0
 800d608:	d018      	beq.n	800d63c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	68da      	ldr	r2, [r3, #12]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d612:	441a      	add	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68da      	ldr	r2, [r3, #12]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	429a      	cmp	r2, r3
 800d622:	d303      	bcc.n	800d62c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	68d9      	ldr	r1, [r3, #12]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d634:	461a      	mov	r2, r3
 800d636:	6838      	ldr	r0, [r7, #0]
 800d638:	f003 facc 	bl	8010bd4 <memcpy>
	}
}
 800d63c:	bf00      	nop
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d64c:	f001 fd9a 	bl	800f184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d658:	e011      	b.n	800d67e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d012      	beq.n	800d688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3324      	adds	r3, #36	; 0x24
 800d666:	4618      	mov	r0, r3
 800d668:	f000 fe32 	bl	800e2d0 <xTaskRemoveFromEventList>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d672:	f000 ff07 	bl	800e484 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d676:	7bfb      	ldrb	r3, [r7, #15]
 800d678:	3b01      	subs	r3, #1
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d682:	2b00      	cmp	r3, #0
 800d684:	dce9      	bgt.n	800d65a <prvUnlockQueue+0x16>
 800d686:	e000      	b.n	800d68a <prvUnlockQueue+0x46>
					break;
 800d688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	22ff      	movs	r2, #255	; 0xff
 800d68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d692:	f001 fda7 	bl	800f1e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d696:	f001 fd75 	bl	800f184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6a2:	e011      	b.n	800d6c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d012      	beq.n	800d6d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	3310      	adds	r3, #16
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 fe0d 	bl	800e2d0 <xTaskRemoveFromEventList>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d001      	beq.n	800d6c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6bc:	f000 fee2 	bl	800e484 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6c0:	7bbb      	ldrb	r3, [r7, #14]
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	dce9      	bgt.n	800d6a4 <prvUnlockQueue+0x60>
 800d6d0:	e000      	b.n	800d6d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d6d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	22ff      	movs	r2, #255	; 0xff
 800d6d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d6dc:	f001 fd82 	bl	800f1e4 <vPortExitCritical>
}
 800d6e0:	bf00      	nop
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6f0:	f001 fd48 	bl	800f184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d102      	bne.n	800d702 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	60fb      	str	r3, [r7, #12]
 800d700:	e001      	b.n	800d706 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d702:	2300      	movs	r3, #0
 800d704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d706:	f001 fd6d 	bl	800f1e4 <vPortExitCritical>

	return xReturn;
 800d70a:	68fb      	ldr	r3, [r7, #12]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d71c:	f001 fd32 	bl	800f184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d728:	429a      	cmp	r2, r3
 800d72a:	d102      	bne.n	800d732 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d72c:	2301      	movs	r3, #1
 800d72e:	60fb      	str	r3, [r7, #12]
 800d730:	e001      	b.n	800d736 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d732:	2300      	movs	r3, #0
 800d734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d736:	f001 fd55 	bl	800f1e4 <vPortExitCritical>

	return xReturn;
 800d73a:	68fb      	ldr	r3, [r7, #12]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3710      	adds	r7, #16
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d74e:	2300      	movs	r3, #0
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	e014      	b.n	800d77e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d754:	4a0f      	ldr	r2, [pc, #60]	; (800d794 <vQueueAddToRegistry+0x50>)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10b      	bne.n	800d778 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d760:	490c      	ldr	r1, [pc, #48]	; (800d794 <vQueueAddToRegistry+0x50>)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d76a:	4a0a      	ldr	r2, [pc, #40]	; (800d794 <vQueueAddToRegistry+0x50>)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	4413      	add	r3, r2
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d776:	e006      	b.n	800d786 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	3301      	adds	r3, #1
 800d77c:	60fb      	str	r3, [r7, #12]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2b07      	cmp	r3, #7
 800d782:	d9e7      	bls.n	800d754 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d784:	bf00      	nop
 800d786:	bf00      	nop
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	20000c20 	.word	0x20000c20

0800d798 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d7a8:	f001 fcec 	bl	800f184 <vPortEnterCritical>
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7b2:	b25b      	sxtb	r3, r3
 800d7b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7b8:	d103      	bne.n	800d7c2 <vQueueWaitForMessageRestricted+0x2a>
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7c8:	b25b      	sxtb	r3, r3
 800d7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7ce:	d103      	bne.n	800d7d8 <vQueueWaitForMessageRestricted+0x40>
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7d8:	f001 fd04 	bl	800f1e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d106      	bne.n	800d7f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	3324      	adds	r3, #36	; 0x24
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f000 fd43 	bl	800e278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d7f2:	6978      	ldr	r0, [r7, #20]
 800d7f4:	f7ff ff26 	bl	800d644 <prvUnlockQueue>
	}
 800d7f8:	bf00      	nop
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08e      	sub	sp, #56	; 0x38
 800d804:	af04      	add	r7, sp, #16
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
 800d80c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10a      	bne.n	800d82a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	623b      	str	r3, [r7, #32]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10a      	bne.n	800d846 <xTaskCreateStatic+0x46>
	__asm volatile
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	61fb      	str	r3, [r7, #28]
}
 800d842:	bf00      	nop
 800d844:	e7fe      	b.n	800d844 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d846:	235c      	movs	r3, #92	; 0x5c
 800d848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	2b5c      	cmp	r3, #92	; 0x5c
 800d84e:	d00a      	beq.n	800d866 <xTaskCreateStatic+0x66>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	61bb      	str	r3, [r7, #24]
}
 800d862:	bf00      	nop
 800d864:	e7fe      	b.n	800d864 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d866:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d01e      	beq.n	800d8ac <xTaskCreateStatic+0xac>
 800d86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d870:	2b00      	cmp	r3, #0
 800d872:	d01b      	beq.n	800d8ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d876:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d87c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	2202      	movs	r2, #2
 800d882:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d886:	2300      	movs	r3, #0
 800d888:	9303      	str	r3, [sp, #12]
 800d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88c:	9302      	str	r3, [sp, #8]
 800d88e:	f107 0314 	add.w	r3, r7, #20
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	68b9      	ldr	r1, [r7, #8]
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f000 f850 	bl	800d944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8a6:	f000 f8cf 	bl	800da48 <prvAddNewTaskToReadyList>
 800d8aa:	e001      	b.n	800d8b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8b0:	697b      	ldr	r3, [r7, #20]
	}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3728      	adds	r7, #40	; 0x28
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b08c      	sub	sp, #48	; 0x30
 800d8be:	af04      	add	r7, sp, #16
 800d8c0:	60f8      	str	r0, [r7, #12]
 800d8c2:	60b9      	str	r1, [r7, #8]
 800d8c4:	603b      	str	r3, [r7, #0]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8ca:	88fb      	ldrh	r3, [r7, #6]
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fd7a 	bl	800f3c8 <pvPortMalloc>
 800d8d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00e      	beq.n	800d8fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8dc:	205c      	movs	r0, #92	; 0x5c
 800d8de:	f001 fd73 	bl	800f3c8 <pvPortMalloc>
 800d8e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	631a      	str	r2, [r3, #48]	; 0x30
 800d8f0:	e005      	b.n	800d8fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8f2:	6978      	ldr	r0, [r7, #20]
 800d8f4:	f001 fd7a 	bl	800f3ec <vPortFree>
 800d8f8:	e001      	b.n	800d8fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d017      	beq.n	800d934 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d90c:	88fa      	ldrh	r2, [r7, #6]
 800d90e:	2300      	movs	r3, #0
 800d910:	9303      	str	r3, [sp, #12]
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	9302      	str	r3, [sp, #8]
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	68b9      	ldr	r1, [r7, #8]
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 f80e 	bl	800d944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d928:	69f8      	ldr	r0, [r7, #28]
 800d92a:	f000 f88d 	bl	800da48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d92e:	2301      	movs	r3, #1
 800d930:	61bb      	str	r3, [r7, #24]
 800d932:	e002      	b.n	800d93a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d938:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d93a:	69bb      	ldr	r3, [r7, #24]
	}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3720      	adds	r7, #32
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d95c:	3b01      	subs	r3, #1
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	f023 0307 	bic.w	r3, r3, #7
 800d96a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	f003 0307 	and.w	r3, r3, #7
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00a      	beq.n	800d98c <prvInitialiseNewTask+0x48>
	__asm volatile
 800d976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	617b      	str	r3, [r7, #20]
}
 800d988:	bf00      	nop
 800d98a:	e7fe      	b.n	800d98a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d01f      	beq.n	800d9d2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d992:	2300      	movs	r3, #0
 800d994:	61fb      	str	r3, [r7, #28]
 800d996:	e012      	b.n	800d9be <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	4413      	add	r3, r2
 800d99e:	7819      	ldrb	r1, [r3, #0]
 800d9a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	3334      	adds	r3, #52	; 0x34
 800d9a8:	460a      	mov	r2, r1
 800d9aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d006      	beq.n	800d9c6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	61fb      	str	r3, [r7, #28]
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	2b1f      	cmp	r3, #31
 800d9c2:	d9e9      	bls.n	800d998 <prvInitialiseNewTask+0x54>
 800d9c4:	e000      	b.n	800d9c8 <prvInitialiseNewTask+0x84>
			{
				break;
 800d9c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800d9d0:	e003      	b.n	800d9da <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	2b06      	cmp	r3, #6
 800d9de:	d901      	bls.n	800d9e4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9e0:	2306      	movs	r3, #6
 800d9e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9e8:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7ff f997 	bl	800cd22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f6:	3318      	adds	r3, #24
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7ff f992 	bl	800cd22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da06:	f1c3 0207 	rsb	r2, r3, #7
 800da0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da16:	2200      	movs	r2, #0
 800da18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da22:	683a      	ldr	r2, [r7, #0]
 800da24:	68f9      	ldr	r1, [r7, #12]
 800da26:	69b8      	ldr	r0, [r7, #24]
 800da28:	f001 fa7c 	bl	800ef24 <pxPortInitialiseStack>
 800da2c:	4602      	mov	r2, r0
 800da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <prvInitialiseNewTask+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da3e:	bf00      	nop
 800da40:	3720      	adds	r7, #32
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
	...

0800da48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da50:	f001 fb98 	bl	800f184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da54:	4b2a      	ldr	r3, [pc, #168]	; (800db00 <prvAddNewTaskToReadyList+0xb8>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3301      	adds	r3, #1
 800da5a:	4a29      	ldr	r2, [pc, #164]	; (800db00 <prvAddNewTaskToReadyList+0xb8>)
 800da5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da5e:	4b29      	ldr	r3, [pc, #164]	; (800db04 <prvAddNewTaskToReadyList+0xbc>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d109      	bne.n	800da7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da66:	4a27      	ldr	r2, [pc, #156]	; (800db04 <prvAddNewTaskToReadyList+0xbc>)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da6c:	4b24      	ldr	r3, [pc, #144]	; (800db00 <prvAddNewTaskToReadyList+0xb8>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b01      	cmp	r3, #1
 800da72:	d110      	bne.n	800da96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da74:	f000 fd2a 	bl	800e4cc <prvInitialiseTaskLists>
 800da78:	e00d      	b.n	800da96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da7a:	4b23      	ldr	r3, [pc, #140]	; (800db08 <prvAddNewTaskToReadyList+0xc0>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d109      	bne.n	800da96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da82:	4b20      	ldr	r3, [pc, #128]	; (800db04 <prvAddNewTaskToReadyList+0xbc>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d802      	bhi.n	800da96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da90:	4a1c      	ldr	r2, [pc, #112]	; (800db04 <prvAddNewTaskToReadyList+0xbc>)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da96:	4b1d      	ldr	r3, [pc, #116]	; (800db0c <prvAddNewTaskToReadyList+0xc4>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3301      	adds	r3, #1
 800da9c:	4a1b      	ldr	r2, [pc, #108]	; (800db0c <prvAddNewTaskToReadyList+0xc4>)
 800da9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa4:	2201      	movs	r2, #1
 800daa6:	409a      	lsls	r2, r3
 800daa8:	4b19      	ldr	r3, [pc, #100]	; (800db10 <prvAddNewTaskToReadyList+0xc8>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4313      	orrs	r3, r2
 800daae:	4a18      	ldr	r2, [pc, #96]	; (800db10 <prvAddNewTaskToReadyList+0xc8>)
 800dab0:	6013      	str	r3, [r2, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab6:	4613      	mov	r3, r2
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	4413      	add	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4a15      	ldr	r2, [pc, #84]	; (800db14 <prvAddNewTaskToReadyList+0xcc>)
 800dac0:	441a      	add	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	3304      	adds	r3, #4
 800dac6:	4619      	mov	r1, r3
 800dac8:	4610      	mov	r0, r2
 800daca:	f7ff f937 	bl	800cd3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dace:	f001 fb89 	bl	800f1e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dad2:	4b0d      	ldr	r3, [pc, #52]	; (800db08 <prvAddNewTaskToReadyList+0xc0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00e      	beq.n	800daf8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dada:	4b0a      	ldr	r3, [pc, #40]	; (800db04 <prvAddNewTaskToReadyList+0xbc>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d207      	bcs.n	800daf8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dae8:	4b0b      	ldr	r3, [pc, #44]	; (800db18 <prvAddNewTaskToReadyList+0xd0>)
 800daea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daf8:	bf00      	nop
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	20000d60 	.word	0x20000d60
 800db04:	20000c60 	.word	0x20000c60
 800db08:	20000d6c 	.word	0x20000d6c
 800db0c:	20000d7c 	.word	0x20000d7c
 800db10:	20000d68 	.word	0x20000d68
 800db14:	20000c64 	.word	0x20000c64
 800db18:	e000ed04 	.word	0xe000ed04

0800db1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800db24:	f001 fb2e 	bl	800f184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d102      	bne.n	800db34 <vTaskDelete+0x18>
 800db2e:	4b39      	ldr	r3, [pc, #228]	; (800dc14 <vTaskDelete+0xf8>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	e000      	b.n	800db36 <vTaskDelete+0x1a>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	3304      	adds	r3, #4
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7ff f95a 	bl	800cdf6 <uxListRemove>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d115      	bne.n	800db74 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db4c:	4932      	ldr	r1, [pc, #200]	; (800dc18 <vTaskDelete+0xfc>)
 800db4e:	4613      	mov	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	440b      	add	r3, r1
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10a      	bne.n	800db74 <vTaskDelete+0x58>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db62:	2201      	movs	r2, #1
 800db64:	fa02 f303 	lsl.w	r3, r2, r3
 800db68:	43da      	mvns	r2, r3
 800db6a:	4b2c      	ldr	r3, [pc, #176]	; (800dc1c <vTaskDelete+0x100>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4013      	ands	r3, r2
 800db70:	4a2a      	ldr	r2, [pc, #168]	; (800dc1c <vTaskDelete+0x100>)
 800db72:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	3318      	adds	r3, #24
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff f938 	bl	800cdf6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800db86:	4b26      	ldr	r3, [pc, #152]	; (800dc20 <vTaskDelete+0x104>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	3301      	adds	r3, #1
 800db8c:	4a24      	ldr	r2, [pc, #144]	; (800dc20 <vTaskDelete+0x104>)
 800db8e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800db90:	4b20      	ldr	r3, [pc, #128]	; (800dc14 <vTaskDelete+0xf8>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	429a      	cmp	r2, r3
 800db98:	d10b      	bne.n	800dbb2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	3304      	adds	r3, #4
 800db9e:	4619      	mov	r1, r3
 800dba0:	4820      	ldr	r0, [pc, #128]	; (800dc24 <vTaskDelete+0x108>)
 800dba2:	f7ff f8cb 	bl	800cd3c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800dba6:	4b20      	ldr	r3, [pc, #128]	; (800dc28 <vTaskDelete+0x10c>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	4a1e      	ldr	r2, [pc, #120]	; (800dc28 <vTaskDelete+0x10c>)
 800dbae:	6013      	str	r3, [r2, #0]
 800dbb0:	e009      	b.n	800dbc6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800dbb2:	4b1e      	ldr	r3, [pc, #120]	; (800dc2c <vTaskDelete+0x110>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	4a1c      	ldr	r2, [pc, #112]	; (800dc2c <vTaskDelete+0x110>)
 800dbba:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f000 fcf3 	bl	800e5a8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800dbc2:	f000 fd21 	bl	800e608 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800dbc6:	f001 fb0d 	bl	800f1e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800dbca:	4b19      	ldr	r3, [pc, #100]	; (800dc30 <vTaskDelete+0x114>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d01b      	beq.n	800dc0a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800dbd2:	4b10      	ldr	r3, [pc, #64]	; (800dc14 <vTaskDelete+0xf8>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d116      	bne.n	800dc0a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800dbdc:	4b15      	ldr	r3, [pc, #84]	; (800dc34 <vTaskDelete+0x118>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00a      	beq.n	800dbfa <vTaskDelete+0xde>
	__asm volatile
 800dbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe8:	f383 8811 	msr	BASEPRI, r3
 800dbec:	f3bf 8f6f 	isb	sy
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	60bb      	str	r3, [r7, #8]
}
 800dbf6:	bf00      	nop
 800dbf8:	e7fe      	b.n	800dbf8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800dbfa:	4b0f      	ldr	r3, [pc, #60]	; (800dc38 <vTaskDelete+0x11c>)
 800dbfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc0a:	bf00      	nop
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	20000c60 	.word	0x20000c60
 800dc18:	20000c64 	.word	0x20000c64
 800dc1c:	20000d68 	.word	0x20000d68
 800dc20:	20000d7c 	.word	0x20000d7c
 800dc24:	20000d34 	.word	0x20000d34
 800dc28:	20000d48 	.word	0x20000d48
 800dc2c:	20000d60 	.word	0x20000d60
 800dc30:	20000d6c 	.word	0x20000d6c
 800dc34:	20000d88 	.word	0x20000d88
 800dc38:	e000ed04 	.word	0xe000ed04

0800dc3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d017      	beq.n	800dc7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc4e:	4b13      	ldr	r3, [pc, #76]	; (800dc9c <vTaskDelay+0x60>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00a      	beq.n	800dc6c <vTaskDelay+0x30>
	__asm volatile
 800dc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	60bb      	str	r3, [r7, #8]
}
 800dc68:	bf00      	nop
 800dc6a:	e7fe      	b.n	800dc6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc6c:	f000 f912 	bl	800de94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc70:	2100      	movs	r1, #0
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 fd06 	bl	800e684 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc78:	f000 f91a 	bl	800deb0 <xTaskResumeAll>
 800dc7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d107      	bne.n	800dc94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dc84:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <vTaskDelay+0x64>)
 800dc86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc8a:	601a      	str	r2, [r3, #0]
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc94:	bf00      	nop
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	20000d88 	.word	0x20000d88
 800dca0:	e000ed04 	.word	0xe000ed04

0800dca4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dcac:	f001 fa6a 	bl	800f184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d102      	bne.n	800dcbc <vTaskSuspend+0x18>
 800dcb6:	4b3c      	ldr	r3, [pc, #240]	; (800dda8 <vTaskSuspend+0x104>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	e000      	b.n	800dcbe <vTaskSuspend+0x1a>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff f896 	bl	800cdf6 <uxListRemove>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d115      	bne.n	800dcfc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd4:	4935      	ldr	r1, [pc, #212]	; (800ddac <vTaskSuspend+0x108>)
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	4413      	add	r3, r2
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	440b      	add	r3, r1
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d10a      	bne.n	800dcfc <vTaskSuspend+0x58>
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcea:	2201      	movs	r2, #1
 800dcec:	fa02 f303 	lsl.w	r3, r2, r3
 800dcf0:	43da      	mvns	r2, r3
 800dcf2:	4b2f      	ldr	r3, [pc, #188]	; (800ddb0 <vTaskSuspend+0x10c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4013      	ands	r3, r2
 800dcf8:	4a2d      	ldr	r2, [pc, #180]	; (800ddb0 <vTaskSuspend+0x10c>)
 800dcfa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d004      	beq.n	800dd0e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	3318      	adds	r3, #24
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7ff f874 	bl	800cdf6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3304      	adds	r3, #4
 800dd12:	4619      	mov	r1, r3
 800dd14:	4827      	ldr	r0, [pc, #156]	; (800ddb4 <vTaskSuspend+0x110>)
 800dd16:	f7ff f811 	bl	800cd3c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d103      	bne.n	800dd2e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dd2e:	f001 fa59 	bl	800f1e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dd32:	4b21      	ldr	r3, [pc, #132]	; (800ddb8 <vTaskSuspend+0x114>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d005      	beq.n	800dd46 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dd3a:	f001 fa23 	bl	800f184 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dd3e:	f000 fc63 	bl	800e608 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dd42:	f001 fa4f 	bl	800f1e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dd46:	4b18      	ldr	r3, [pc, #96]	; (800dda8 <vTaskSuspend+0x104>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d127      	bne.n	800dda0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800dd50:	4b19      	ldr	r3, [pc, #100]	; (800ddb8 <vTaskSuspend+0x114>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d017      	beq.n	800dd88 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dd58:	4b18      	ldr	r3, [pc, #96]	; (800ddbc <vTaskSuspend+0x118>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00a      	beq.n	800dd76 <vTaskSuspend+0xd2>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	60bb      	str	r3, [r7, #8]
}
 800dd72:	bf00      	nop
 800dd74:	e7fe      	b.n	800dd74 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800dd76:	4b12      	ldr	r3, [pc, #72]	; (800ddc0 <vTaskSuspend+0x11c>)
 800dd78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd86:	e00b      	b.n	800dda0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dd88:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <vTaskSuspend+0x110>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	4b0d      	ldr	r3, [pc, #52]	; (800ddc4 <vTaskSuspend+0x120>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d103      	bne.n	800dd9c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800dd94:	4b04      	ldr	r3, [pc, #16]	; (800dda8 <vTaskSuspend+0x104>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	601a      	str	r2, [r3, #0]
	}
 800dd9a:	e001      	b.n	800dda0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800dd9c:	f000 f9ec 	bl	800e178 <vTaskSwitchContext>
	}
 800dda0:	bf00      	nop
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	20000c60 	.word	0x20000c60
 800ddac:	20000c64 	.word	0x20000c64
 800ddb0:	20000d68 	.word	0x20000d68
 800ddb4:	20000d4c 	.word	0x20000d4c
 800ddb8:	20000d6c 	.word	0x20000d6c
 800ddbc:	20000d88 	.word	0x20000d88
 800ddc0:	e000ed04 	.word	0xe000ed04
 800ddc4:	20000d60 	.word	0x20000d60

0800ddc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b08a      	sub	sp, #40	; 0x28
 800ddcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ddd6:	463a      	mov	r2, r7
 800ddd8:	1d39      	adds	r1, r7, #4
 800ddda:	f107 0308 	add.w	r3, r7, #8
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7f3 fe34 	bl	8001a4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dde4:	6839      	ldr	r1, [r7, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	9202      	str	r2, [sp, #8]
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	460a      	mov	r2, r1
 800ddf6:	4921      	ldr	r1, [pc, #132]	; (800de7c <vTaskStartScheduler+0xb4>)
 800ddf8:	4821      	ldr	r0, [pc, #132]	; (800de80 <vTaskStartScheduler+0xb8>)
 800ddfa:	f7ff fd01 	bl	800d800 <xTaskCreateStatic>
 800ddfe:	4603      	mov	r3, r0
 800de00:	4a20      	ldr	r2, [pc, #128]	; (800de84 <vTaskStartScheduler+0xbc>)
 800de02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de04:	4b1f      	ldr	r3, [pc, #124]	; (800de84 <vTaskStartScheduler+0xbc>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de0c:	2301      	movs	r3, #1
 800de0e:	617b      	str	r3, [r7, #20]
 800de10:	e001      	b.n	800de16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de12:	2300      	movs	r3, #0
 800de14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d102      	bne.n	800de22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de1c:	f000 fc98 	bl	800e750 <xTimerCreateTimerTask>
 800de20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d116      	bne.n	800de56 <vTaskStartScheduler+0x8e>
	__asm volatile
 800de28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	613b      	str	r3, [r7, #16]
}
 800de3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de3c:	4b12      	ldr	r3, [pc, #72]	; (800de88 <vTaskStartScheduler+0xc0>)
 800de3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de44:	4b11      	ldr	r3, [pc, #68]	; (800de8c <vTaskStartScheduler+0xc4>)
 800de46:	2201      	movs	r2, #1
 800de48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de4a:	4b11      	ldr	r3, [pc, #68]	; (800de90 <vTaskStartScheduler+0xc8>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de50:	f001 f8f6 	bl	800f040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de54:	e00e      	b.n	800de74 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de5c:	d10a      	bne.n	800de74 <vTaskStartScheduler+0xac>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	60fb      	str	r3, [r7, #12]
}
 800de70:	bf00      	nop
 800de72:	e7fe      	b.n	800de72 <vTaskStartScheduler+0xaa>
}
 800de74:	bf00      	nop
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	08014134 	.word	0x08014134
 800de80:	0800e49d 	.word	0x0800e49d
 800de84:	20000d84 	.word	0x20000d84
 800de88:	20000d80 	.word	0x20000d80
 800de8c:	20000d6c 	.word	0x20000d6c
 800de90:	20000d64 	.word	0x20000d64

0800de94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de94:	b480      	push	{r7}
 800de96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de98:	4b04      	ldr	r3, [pc, #16]	; (800deac <vTaskSuspendAll+0x18>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	3301      	adds	r3, #1
 800de9e:	4a03      	ldr	r2, [pc, #12]	; (800deac <vTaskSuspendAll+0x18>)
 800dea0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dea2:	bf00      	nop
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	20000d88 	.word	0x20000d88

0800deb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800deb6:	2300      	movs	r3, #0
 800deb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800deba:	2300      	movs	r3, #0
 800debc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800debe:	4b41      	ldr	r3, [pc, #260]	; (800dfc4 <xTaskResumeAll+0x114>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d10a      	bne.n	800dedc <xTaskResumeAll+0x2c>
	__asm volatile
 800dec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deca:	f383 8811 	msr	BASEPRI, r3
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f3bf 8f4f 	dsb	sy
 800ded6:	603b      	str	r3, [r7, #0]
}
 800ded8:	bf00      	nop
 800deda:	e7fe      	b.n	800deda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dedc:	f001 f952 	bl	800f184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dee0:	4b38      	ldr	r3, [pc, #224]	; (800dfc4 <xTaskResumeAll+0x114>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	4a37      	ldr	r2, [pc, #220]	; (800dfc4 <xTaskResumeAll+0x114>)
 800dee8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deea:	4b36      	ldr	r3, [pc, #216]	; (800dfc4 <xTaskResumeAll+0x114>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d161      	bne.n	800dfb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800def2:	4b35      	ldr	r3, [pc, #212]	; (800dfc8 <xTaskResumeAll+0x118>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d05d      	beq.n	800dfb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800defa:	e02e      	b.n	800df5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800defc:	4b33      	ldr	r3, [pc, #204]	; (800dfcc <xTaskResumeAll+0x11c>)
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3318      	adds	r3, #24
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fe ff74 	bl	800cdf6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3304      	adds	r3, #4
 800df12:	4618      	mov	r0, r3
 800df14:	f7fe ff6f 	bl	800cdf6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1c:	2201      	movs	r2, #1
 800df1e:	409a      	lsls	r2, r3
 800df20:	4b2b      	ldr	r3, [pc, #172]	; (800dfd0 <xTaskResumeAll+0x120>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4313      	orrs	r3, r2
 800df26:	4a2a      	ldr	r2, [pc, #168]	; (800dfd0 <xTaskResumeAll+0x120>)
 800df28:	6013      	str	r3, [r2, #0]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df2e:	4613      	mov	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	4a27      	ldr	r2, [pc, #156]	; (800dfd4 <xTaskResumeAll+0x124>)
 800df38:	441a      	add	r2, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3304      	adds	r3, #4
 800df3e:	4619      	mov	r1, r3
 800df40:	4610      	mov	r0, r2
 800df42:	f7fe fefb 	bl	800cd3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4a:	4b23      	ldr	r3, [pc, #140]	; (800dfd8 <xTaskResumeAll+0x128>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df50:	429a      	cmp	r2, r3
 800df52:	d302      	bcc.n	800df5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800df54:	4b21      	ldr	r3, [pc, #132]	; (800dfdc <xTaskResumeAll+0x12c>)
 800df56:	2201      	movs	r2, #1
 800df58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df5a:	4b1c      	ldr	r3, [pc, #112]	; (800dfcc <xTaskResumeAll+0x11c>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1cc      	bne.n	800defc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df68:	f000 fb4e 	bl	800e608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df6c:	4b1c      	ldr	r3, [pc, #112]	; (800dfe0 <xTaskResumeAll+0x130>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d010      	beq.n	800df9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df78:	f000 f846 	bl	800e008 <xTaskIncrementTick>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d002      	beq.n	800df88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800df82:	4b16      	ldr	r3, [pc, #88]	; (800dfdc <xTaskResumeAll+0x12c>)
 800df84:	2201      	movs	r2, #1
 800df86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	3b01      	subs	r3, #1
 800df8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1f1      	bne.n	800df78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800df94:	4b12      	ldr	r3, [pc, #72]	; (800dfe0 <xTaskResumeAll+0x130>)
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df9a:	4b10      	ldr	r3, [pc, #64]	; (800dfdc <xTaskResumeAll+0x12c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d009      	beq.n	800dfb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfa6:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <xTaskResumeAll+0x134>)
 800dfa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfac:	601a      	str	r2, [r3, #0]
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfb6:	f001 f915 	bl	800f1e4 <vPortExitCritical>

	return xAlreadyYielded;
 800dfba:	68bb      	ldr	r3, [r7, #8]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	20000d88 	.word	0x20000d88
 800dfc8:	20000d60 	.word	0x20000d60
 800dfcc:	20000d20 	.word	0x20000d20
 800dfd0:	20000d68 	.word	0x20000d68
 800dfd4:	20000c64 	.word	0x20000c64
 800dfd8:	20000c60 	.word	0x20000c60
 800dfdc:	20000d74 	.word	0x20000d74
 800dfe0:	20000d70 	.word	0x20000d70
 800dfe4:	e000ed04 	.word	0xe000ed04

0800dfe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dfee:	4b05      	ldr	r3, [pc, #20]	; (800e004 <xTaskGetTickCount+0x1c>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dff4:	687b      	ldr	r3, [r7, #4]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	370c      	adds	r7, #12
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	20000d64 	.word	0x20000d64

0800e008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e00e:	2300      	movs	r3, #0
 800e010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e012:	4b4e      	ldr	r3, [pc, #312]	; (800e14c <xTaskIncrementTick+0x144>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	f040 808e 	bne.w	800e138 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e01c:	4b4c      	ldr	r3, [pc, #304]	; (800e150 <xTaskIncrementTick+0x148>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	3301      	adds	r3, #1
 800e022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e024:	4a4a      	ldr	r2, [pc, #296]	; (800e150 <xTaskIncrementTick+0x148>)
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d120      	bne.n	800e072 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e030:	4b48      	ldr	r3, [pc, #288]	; (800e154 <xTaskIncrementTick+0x14c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00a      	beq.n	800e050 <xTaskIncrementTick+0x48>
	__asm volatile
 800e03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03e:	f383 8811 	msr	BASEPRI, r3
 800e042:	f3bf 8f6f 	isb	sy
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	603b      	str	r3, [r7, #0]
}
 800e04c:	bf00      	nop
 800e04e:	e7fe      	b.n	800e04e <xTaskIncrementTick+0x46>
 800e050:	4b40      	ldr	r3, [pc, #256]	; (800e154 <xTaskIncrementTick+0x14c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	60fb      	str	r3, [r7, #12]
 800e056:	4b40      	ldr	r3, [pc, #256]	; (800e158 <xTaskIncrementTick+0x150>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a3e      	ldr	r2, [pc, #248]	; (800e154 <xTaskIncrementTick+0x14c>)
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	4a3e      	ldr	r2, [pc, #248]	; (800e158 <xTaskIncrementTick+0x150>)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6013      	str	r3, [r2, #0]
 800e064:	4b3d      	ldr	r3, [pc, #244]	; (800e15c <xTaskIncrementTick+0x154>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3301      	adds	r3, #1
 800e06a:	4a3c      	ldr	r2, [pc, #240]	; (800e15c <xTaskIncrementTick+0x154>)
 800e06c:	6013      	str	r3, [r2, #0]
 800e06e:	f000 facb 	bl	800e608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e072:	4b3b      	ldr	r3, [pc, #236]	; (800e160 <xTaskIncrementTick+0x158>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	693a      	ldr	r2, [r7, #16]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d348      	bcc.n	800e10e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e07c:	4b35      	ldr	r3, [pc, #212]	; (800e154 <xTaskIncrementTick+0x14c>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d104      	bne.n	800e090 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e086:	4b36      	ldr	r3, [pc, #216]	; (800e160 <xTaskIncrementTick+0x158>)
 800e088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e08c:	601a      	str	r2, [r3, #0]
					break;
 800e08e:	e03e      	b.n	800e10e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e090:	4b30      	ldr	r3, [pc, #192]	; (800e154 <xTaskIncrementTick+0x14c>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0a0:	693a      	ldr	r2, [r7, #16]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d203      	bcs.n	800e0b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0a8:	4a2d      	ldr	r2, [pc, #180]	; (800e160 <xTaskIncrementTick+0x158>)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0ae:	e02e      	b.n	800e10e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fe fe9e 	bl	800cdf6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d004      	beq.n	800e0cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	3318      	adds	r3, #24
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fe fe95 	bl	800cdf6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	409a      	lsls	r2, r3
 800e0d4:	4b23      	ldr	r3, [pc, #140]	; (800e164 <xTaskIncrementTick+0x15c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	4a22      	ldr	r2, [pc, #136]	; (800e164 <xTaskIncrementTick+0x15c>)
 800e0dc:	6013      	str	r3, [r2, #0]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4a1f      	ldr	r2, [pc, #124]	; (800e168 <xTaskIncrementTick+0x160>)
 800e0ec:	441a      	add	r2, r3
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	3304      	adds	r3, #4
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	f7fe fe21 	bl	800cd3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0fe:	4b1b      	ldr	r3, [pc, #108]	; (800e16c <xTaskIncrementTick+0x164>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e104:	429a      	cmp	r2, r3
 800e106:	d3b9      	bcc.n	800e07c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e108:	2301      	movs	r3, #1
 800e10a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e10c:	e7b6      	b.n	800e07c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e10e:	4b17      	ldr	r3, [pc, #92]	; (800e16c <xTaskIncrementTick+0x164>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e114:	4914      	ldr	r1, [pc, #80]	; (800e168 <xTaskIncrementTick+0x160>)
 800e116:	4613      	mov	r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4413      	add	r3, r2
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	440b      	add	r3, r1
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b01      	cmp	r3, #1
 800e124:	d901      	bls.n	800e12a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e126:	2301      	movs	r3, #1
 800e128:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e12a:	4b11      	ldr	r3, [pc, #68]	; (800e170 <xTaskIncrementTick+0x168>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d007      	beq.n	800e142 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e132:	2301      	movs	r3, #1
 800e134:	617b      	str	r3, [r7, #20]
 800e136:	e004      	b.n	800e142 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e138:	4b0e      	ldr	r3, [pc, #56]	; (800e174 <xTaskIncrementTick+0x16c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	4a0d      	ldr	r2, [pc, #52]	; (800e174 <xTaskIncrementTick+0x16c>)
 800e140:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e142:	697b      	ldr	r3, [r7, #20]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	20000d88 	.word	0x20000d88
 800e150:	20000d64 	.word	0x20000d64
 800e154:	20000d18 	.word	0x20000d18
 800e158:	20000d1c 	.word	0x20000d1c
 800e15c:	20000d78 	.word	0x20000d78
 800e160:	20000d80 	.word	0x20000d80
 800e164:	20000d68 	.word	0x20000d68
 800e168:	20000c64 	.word	0x20000c64
 800e16c:	20000c60 	.word	0x20000c60
 800e170:	20000d74 	.word	0x20000d74
 800e174:	20000d70 	.word	0x20000d70

0800e178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e178:	b480      	push	{r7}
 800e17a:	b087      	sub	sp, #28
 800e17c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e17e:	4b27      	ldr	r3, [pc, #156]	; (800e21c <vTaskSwitchContext+0xa4>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d003      	beq.n	800e18e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e186:	4b26      	ldr	r3, [pc, #152]	; (800e220 <vTaskSwitchContext+0xa8>)
 800e188:	2201      	movs	r2, #1
 800e18a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e18c:	e03f      	b.n	800e20e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e18e:	4b24      	ldr	r3, [pc, #144]	; (800e220 <vTaskSwitchContext+0xa8>)
 800e190:	2200      	movs	r2, #0
 800e192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e194:	4b23      	ldr	r3, [pc, #140]	; (800e224 <vTaskSwitchContext+0xac>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	fab3 f383 	clz	r3, r3
 800e1a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e1a2:	7afb      	ldrb	r3, [r7, #11]
 800e1a4:	f1c3 031f 	rsb	r3, r3, #31
 800e1a8:	617b      	str	r3, [r7, #20]
 800e1aa:	491f      	ldr	r1, [pc, #124]	; (800e228 <vTaskSwitchContext+0xb0>)
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	440b      	add	r3, r1
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10a      	bne.n	800e1d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	607b      	str	r3, [r7, #4]
}
 800e1d0:	bf00      	nop
 800e1d2:	e7fe      	b.n	800e1d2 <vTaskSwitchContext+0x5a>
 800e1d4:	697a      	ldr	r2, [r7, #20]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	4413      	add	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4a12      	ldr	r2, [pc, #72]	; (800e228 <vTaskSwitchContext+0xb0>)
 800e1e0:	4413      	add	r3, r2
 800e1e2:	613b      	str	r3, [r7, #16]
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	685a      	ldr	r2, [r3, #4]
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	605a      	str	r2, [r3, #4]
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	685a      	ldr	r2, [r3, #4]
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	3308      	adds	r3, #8
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d104      	bne.n	800e204 <vTaskSwitchContext+0x8c>
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	605a      	str	r2, [r3, #4]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	4a08      	ldr	r2, [pc, #32]	; (800e22c <vTaskSwitchContext+0xb4>)
 800e20c:	6013      	str	r3, [r2, #0]
}
 800e20e:	bf00      	nop
 800e210:	371c      	adds	r7, #28
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	20000d88 	.word	0x20000d88
 800e220:	20000d74 	.word	0x20000d74
 800e224:	20000d68 	.word	0x20000d68
 800e228:	20000c64 	.word	0x20000c64
 800e22c:	20000c60 	.word	0x20000c60

0800e230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10a      	bne.n	800e256 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	60fb      	str	r3, [r7, #12]
}
 800e252:	bf00      	nop
 800e254:	e7fe      	b.n	800e254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e256:	4b07      	ldr	r3, [pc, #28]	; (800e274 <vTaskPlaceOnEventList+0x44>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3318      	adds	r3, #24
 800e25c:	4619      	mov	r1, r3
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7fe fd90 	bl	800cd84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e264:	2101      	movs	r1, #1
 800e266:	6838      	ldr	r0, [r7, #0]
 800e268:	f000 fa0c 	bl	800e684 <prvAddCurrentTaskToDelayedList>
}
 800e26c:	bf00      	nop
 800e26e:	3710      	adds	r7, #16
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	20000c60 	.word	0x20000c60

0800e278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10a      	bne.n	800e2a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	617b      	str	r3, [r7, #20]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2a0:	4b0a      	ldr	r3, [pc, #40]	; (800e2cc <vTaskPlaceOnEventListRestricted+0x54>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3318      	adds	r3, #24
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7fe fd47 	bl	800cd3c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e2b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e2ba:	6879      	ldr	r1, [r7, #4]
 800e2bc:	68b8      	ldr	r0, [r7, #8]
 800e2be:	f000 f9e1 	bl	800e684 <prvAddCurrentTaskToDelayedList>
	}
 800e2c2:	bf00      	nop
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20000c60 	.word	0x20000c60

0800e2d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10a      	bne.n	800e2fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	60fb      	str	r3, [r7, #12]
}
 800e2f8:	bf00      	nop
 800e2fa:	e7fe      	b.n	800e2fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	3318      	adds	r3, #24
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe fd78 	bl	800cdf6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e306:	4b1d      	ldr	r3, [pc, #116]	; (800e37c <xTaskRemoveFromEventList+0xac>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d11c      	bne.n	800e348 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	3304      	adds	r3, #4
 800e312:	4618      	mov	r0, r3
 800e314:	f7fe fd6f 	bl	800cdf6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31c:	2201      	movs	r2, #1
 800e31e:	409a      	lsls	r2, r3
 800e320:	4b17      	ldr	r3, [pc, #92]	; (800e380 <xTaskRemoveFromEventList+0xb0>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4313      	orrs	r3, r2
 800e326:	4a16      	ldr	r2, [pc, #88]	; (800e380 <xTaskRemoveFromEventList+0xb0>)
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32e:	4613      	mov	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4a13      	ldr	r2, [pc, #76]	; (800e384 <xTaskRemoveFromEventList+0xb4>)
 800e338:	441a      	add	r2, r3
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4619      	mov	r1, r3
 800e340:	4610      	mov	r0, r2
 800e342:	f7fe fcfb 	bl	800cd3c <vListInsertEnd>
 800e346:	e005      	b.n	800e354 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	3318      	adds	r3, #24
 800e34c:	4619      	mov	r1, r3
 800e34e:	480e      	ldr	r0, [pc, #56]	; (800e388 <xTaskRemoveFromEventList+0xb8>)
 800e350:	f7fe fcf4 	bl	800cd3c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e358:	4b0c      	ldr	r3, [pc, #48]	; (800e38c <xTaskRemoveFromEventList+0xbc>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e35e:	429a      	cmp	r2, r3
 800e360:	d905      	bls.n	800e36e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e362:	2301      	movs	r3, #1
 800e364:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e366:	4b0a      	ldr	r3, [pc, #40]	; (800e390 <xTaskRemoveFromEventList+0xc0>)
 800e368:	2201      	movs	r2, #1
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	e001      	b.n	800e372 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e36e:	2300      	movs	r3, #0
 800e370:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e372:	697b      	ldr	r3, [r7, #20]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3718      	adds	r7, #24
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	20000d88 	.word	0x20000d88
 800e380:	20000d68 	.word	0x20000d68
 800e384:	20000c64 	.word	0x20000c64
 800e388:	20000d20 	.word	0x20000d20
 800e38c:	20000c60 	.word	0x20000c60
 800e390:	20000d74 	.word	0x20000d74

0800e394 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e39c:	4b06      	ldr	r3, [pc, #24]	; (800e3b8 <vTaskInternalSetTimeOutState+0x24>)
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e3a4:	4b05      	ldr	r3, [pc, #20]	; (800e3bc <vTaskInternalSetTimeOutState+0x28>)
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	605a      	str	r2, [r3, #4]
}
 800e3ac:	bf00      	nop
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	20000d78 	.word	0x20000d78
 800e3bc:	20000d64 	.word	0x20000d64

0800e3c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10a      	bne.n	800e3e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	613b      	str	r3, [r7, #16]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10a      	bne.n	800e402 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	60fb      	str	r3, [r7, #12]
}
 800e3fe:	bf00      	nop
 800e400:	e7fe      	b.n	800e400 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e402:	f000 febf 	bl	800f184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e406:	4b1d      	ldr	r3, [pc, #116]	; (800e47c <xTaskCheckForTimeOut+0xbc>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	69ba      	ldr	r2, [r7, #24]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e41e:	d102      	bne.n	800e426 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e420:	2300      	movs	r3, #0
 800e422:	61fb      	str	r3, [r7, #28]
 800e424:	e023      	b.n	800e46e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	4b15      	ldr	r3, [pc, #84]	; (800e480 <xTaskCheckForTimeOut+0xc0>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d007      	beq.n	800e442 <xTaskCheckForTimeOut+0x82>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d302      	bcc.n	800e442 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e43c:	2301      	movs	r3, #1
 800e43e:	61fb      	str	r3, [r7, #28]
 800e440:	e015      	b.n	800e46e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	697a      	ldr	r2, [r7, #20]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d20b      	bcs.n	800e464 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	1ad2      	subs	r2, r2, r3
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7ff ff9b 	bl	800e394 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e45e:	2300      	movs	r3, #0
 800e460:	61fb      	str	r3, [r7, #28]
 800e462:	e004      	b.n	800e46e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2200      	movs	r2, #0
 800e468:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e46a:	2301      	movs	r3, #1
 800e46c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e46e:	f000 feb9 	bl	800f1e4 <vPortExitCritical>

	return xReturn;
 800e472:	69fb      	ldr	r3, [r7, #28]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3720      	adds	r7, #32
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	20000d64 	.word	0x20000d64
 800e480:	20000d78 	.word	0x20000d78

0800e484 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e484:	b480      	push	{r7}
 800e486:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e488:	4b03      	ldr	r3, [pc, #12]	; (800e498 <vTaskMissedYield+0x14>)
 800e48a:	2201      	movs	r2, #1
 800e48c:	601a      	str	r2, [r3, #0]
}
 800e48e:	bf00      	nop
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	20000d74 	.word	0x20000d74

0800e49c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e4a4:	f000 f852 	bl	800e54c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4a8:	4b06      	ldr	r3, [pc, #24]	; (800e4c4 <prvIdleTask+0x28>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d9f9      	bls.n	800e4a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <prvIdleTask+0x2c>)
 800e4b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4b6:	601a      	str	r2, [r3, #0]
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e4c0:	e7f0      	b.n	800e4a4 <prvIdleTask+0x8>
 800e4c2:	bf00      	nop
 800e4c4:	20000c64 	.word	0x20000c64
 800e4c8:	e000ed04 	.word	0xe000ed04

0800e4cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	607b      	str	r3, [r7, #4]
 800e4d6:	e00c      	b.n	800e4f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	4413      	add	r3, r2
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	4a12      	ldr	r2, [pc, #72]	; (800e52c <prvInitialiseTaskLists+0x60>)
 800e4e4:	4413      	add	r3, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe fbfb 	bl	800cce2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	607b      	str	r3, [r7, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2b06      	cmp	r3, #6
 800e4f6:	d9ef      	bls.n	800e4d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e4f8:	480d      	ldr	r0, [pc, #52]	; (800e530 <prvInitialiseTaskLists+0x64>)
 800e4fa:	f7fe fbf2 	bl	800cce2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4fe:	480d      	ldr	r0, [pc, #52]	; (800e534 <prvInitialiseTaskLists+0x68>)
 800e500:	f7fe fbef 	bl	800cce2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e504:	480c      	ldr	r0, [pc, #48]	; (800e538 <prvInitialiseTaskLists+0x6c>)
 800e506:	f7fe fbec 	bl	800cce2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e50a:	480c      	ldr	r0, [pc, #48]	; (800e53c <prvInitialiseTaskLists+0x70>)
 800e50c:	f7fe fbe9 	bl	800cce2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e510:	480b      	ldr	r0, [pc, #44]	; (800e540 <prvInitialiseTaskLists+0x74>)
 800e512:	f7fe fbe6 	bl	800cce2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e516:	4b0b      	ldr	r3, [pc, #44]	; (800e544 <prvInitialiseTaskLists+0x78>)
 800e518:	4a05      	ldr	r2, [pc, #20]	; (800e530 <prvInitialiseTaskLists+0x64>)
 800e51a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e51c:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <prvInitialiseTaskLists+0x7c>)
 800e51e:	4a05      	ldr	r2, [pc, #20]	; (800e534 <prvInitialiseTaskLists+0x68>)
 800e520:	601a      	str	r2, [r3, #0]
}
 800e522:	bf00      	nop
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	20000c64 	.word	0x20000c64
 800e530:	20000cf0 	.word	0x20000cf0
 800e534:	20000d04 	.word	0x20000d04
 800e538:	20000d20 	.word	0x20000d20
 800e53c:	20000d34 	.word	0x20000d34
 800e540:	20000d4c 	.word	0x20000d4c
 800e544:	20000d18 	.word	0x20000d18
 800e548:	20000d1c 	.word	0x20000d1c

0800e54c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e552:	e019      	b.n	800e588 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e554:	f000 fe16 	bl	800f184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e558:	4b10      	ldr	r3, [pc, #64]	; (800e59c <prvCheckTasksWaitingTermination+0x50>)
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	3304      	adds	r3, #4
 800e564:	4618      	mov	r0, r3
 800e566:	f7fe fc46 	bl	800cdf6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e56a:	4b0d      	ldr	r3, [pc, #52]	; (800e5a0 <prvCheckTasksWaitingTermination+0x54>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	3b01      	subs	r3, #1
 800e570:	4a0b      	ldr	r2, [pc, #44]	; (800e5a0 <prvCheckTasksWaitingTermination+0x54>)
 800e572:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e574:	4b0b      	ldr	r3, [pc, #44]	; (800e5a4 <prvCheckTasksWaitingTermination+0x58>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3b01      	subs	r3, #1
 800e57a:	4a0a      	ldr	r2, [pc, #40]	; (800e5a4 <prvCheckTasksWaitingTermination+0x58>)
 800e57c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e57e:	f000 fe31 	bl	800f1e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 f810 	bl	800e5a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e588:	4b06      	ldr	r3, [pc, #24]	; (800e5a4 <prvCheckTasksWaitingTermination+0x58>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1e1      	bne.n	800e554 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e590:	bf00      	nop
 800e592:	bf00      	nop
 800e594:	3708      	adds	r7, #8
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	20000d34 	.word	0x20000d34
 800e5a0:	20000d60 	.word	0x20000d60
 800e5a4:	20000d48 	.word	0x20000d48

0800e5a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d108      	bne.n	800e5cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f000 ff14 	bl	800f3ec <vPortFree>
				vPortFree( pxTCB );
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 ff11 	bl	800f3ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e5ca:	e018      	b.n	800e5fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d103      	bne.n	800e5de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 ff08 	bl	800f3ec <vPortFree>
	}
 800e5dc:	e00f      	b.n	800e5fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d00a      	beq.n	800e5fe <prvDeleteTCB+0x56>
	__asm volatile
 800e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	60fb      	str	r3, [r7, #12]
}
 800e5fa:	bf00      	nop
 800e5fc:	e7fe      	b.n	800e5fc <prvDeleteTCB+0x54>
	}
 800e5fe:	bf00      	nop
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
	...

0800e608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e60e:	4b0c      	ldr	r3, [pc, #48]	; (800e640 <prvResetNextTaskUnblockTime+0x38>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d104      	bne.n	800e622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e618:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <prvResetNextTaskUnblockTime+0x3c>)
 800e61a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e61e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e620:	e008      	b.n	800e634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e622:	4b07      	ldr	r3, [pc, #28]	; (800e640 <prvResetNextTaskUnblockTime+0x38>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	68db      	ldr	r3, [r3, #12]
 800e62a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	4a04      	ldr	r2, [pc, #16]	; (800e644 <prvResetNextTaskUnblockTime+0x3c>)
 800e632:	6013      	str	r3, [r2, #0]
}
 800e634:	bf00      	nop
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr
 800e640:	20000d18 	.word	0x20000d18
 800e644:	20000d80 	.word	0x20000d80

0800e648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e64e:	4b0b      	ldr	r3, [pc, #44]	; (800e67c <xTaskGetSchedulerState+0x34>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d102      	bne.n	800e65c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e656:	2301      	movs	r3, #1
 800e658:	607b      	str	r3, [r7, #4]
 800e65a:	e008      	b.n	800e66e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e65c:	4b08      	ldr	r3, [pc, #32]	; (800e680 <xTaskGetSchedulerState+0x38>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e664:	2302      	movs	r3, #2
 800e666:	607b      	str	r3, [r7, #4]
 800e668:	e001      	b.n	800e66e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e66a:	2300      	movs	r3, #0
 800e66c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e66e:	687b      	ldr	r3, [r7, #4]
	}
 800e670:	4618      	mov	r0, r3
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	20000d6c 	.word	0x20000d6c
 800e680:	20000d88 	.word	0x20000d88

0800e684 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e68e:	4b29      	ldr	r3, [pc, #164]	; (800e734 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e694:	4b28      	ldr	r3, [pc, #160]	; (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3304      	adds	r3, #4
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe fbab 	bl	800cdf6 <uxListRemove>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10b      	bne.n	800e6be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e6a6:	4b24      	ldr	r3, [pc, #144]	; (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e6b2:	43da      	mvns	r2, r3
 800e6b4:	4b21      	ldr	r3, [pc, #132]	; (800e73c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	4a20      	ldr	r2, [pc, #128]	; (800e73c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6c4:	d10a      	bne.n	800e6dc <prvAddCurrentTaskToDelayedList+0x58>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d007      	beq.n	800e6dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6cc:	4b1a      	ldr	r3, [pc, #104]	; (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	481a      	ldr	r0, [pc, #104]	; (800e740 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e6d6:	f7fe fb31 	bl	800cd3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e6da:	e026      	b.n	800e72a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6e4:	4b14      	ldr	r3, [pc, #80]	; (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d209      	bcs.n	800e708 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6f4:	4b13      	ldr	r3, [pc, #76]	; (800e744 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	4b0f      	ldr	r3, [pc, #60]	; (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7fe fb3f 	bl	800cd84 <vListInsert>
}
 800e706:	e010      	b.n	800e72a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e708:	4b0f      	ldr	r3, [pc, #60]	; (800e748 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	4b0a      	ldr	r3, [pc, #40]	; (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3304      	adds	r3, #4
 800e712:	4619      	mov	r1, r3
 800e714:	4610      	mov	r0, r2
 800e716:	f7fe fb35 	bl	800cd84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e71a:	4b0c      	ldr	r3, [pc, #48]	; (800e74c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	429a      	cmp	r2, r3
 800e722:	d202      	bcs.n	800e72a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e724:	4a09      	ldr	r2, [pc, #36]	; (800e74c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	6013      	str	r3, [r2, #0]
}
 800e72a:	bf00      	nop
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20000d64 	.word	0x20000d64
 800e738:	20000c60 	.word	0x20000c60
 800e73c:	20000d68 	.word	0x20000d68
 800e740:	20000d4c 	.word	0x20000d4c
 800e744:	20000d1c 	.word	0x20000d1c
 800e748:	20000d18 	.word	0x20000d18
 800e74c:	20000d80 	.word	0x20000d80

0800e750 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b08a      	sub	sp, #40	; 0x28
 800e754:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e756:	2300      	movs	r3, #0
 800e758:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e75a:	f000 fb63 	bl	800ee24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e75e:	4b1c      	ldr	r3, [pc, #112]	; (800e7d0 <xTimerCreateTimerTask+0x80>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d021      	beq.n	800e7aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e766:	2300      	movs	r3, #0
 800e768:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e76a:	2300      	movs	r3, #0
 800e76c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e76e:	1d3a      	adds	r2, r7, #4
 800e770:	f107 0108 	add.w	r1, r7, #8
 800e774:	f107 030c 	add.w	r3, r7, #12
 800e778:	4618      	mov	r0, r3
 800e77a:	f7f3 f981 	bl	8001a80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e77e:	6879      	ldr	r1, [r7, #4]
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	9202      	str	r2, [sp, #8]
 800e786:	9301      	str	r3, [sp, #4]
 800e788:	2303      	movs	r3, #3
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	2300      	movs	r3, #0
 800e78e:	460a      	mov	r2, r1
 800e790:	4910      	ldr	r1, [pc, #64]	; (800e7d4 <xTimerCreateTimerTask+0x84>)
 800e792:	4811      	ldr	r0, [pc, #68]	; (800e7d8 <xTimerCreateTimerTask+0x88>)
 800e794:	f7ff f834 	bl	800d800 <xTaskCreateStatic>
 800e798:	4603      	mov	r3, r0
 800e79a:	4a10      	ldr	r2, [pc, #64]	; (800e7dc <xTimerCreateTimerTask+0x8c>)
 800e79c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e79e:	4b0f      	ldr	r3, [pc, #60]	; (800e7dc <xTimerCreateTimerTask+0x8c>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d001      	beq.n	800e7aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10a      	bne.n	800e7c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	613b      	str	r3, [r7, #16]
}
 800e7c2:	bf00      	nop
 800e7c4:	e7fe      	b.n	800e7c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e7c6:	697b      	ldr	r3, [r7, #20]
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3718      	adds	r7, #24
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	20000dbc 	.word	0x20000dbc
 800e7d4:	0801413c 	.word	0x0801413c
 800e7d8:	0800ea05 	.word	0x0800ea05
 800e7dc:	20000dc0 	.word	0x20000dc0

0800e7e0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b088      	sub	sp, #32
 800e7e4:	af02      	add	r7, sp, #8
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e7ee:	2028      	movs	r0, #40	; 0x28
 800e7f0:	f000 fdea 	bl	800f3c8 <pvPortMalloc>
 800e7f4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00d      	beq.n	800e818 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	9301      	str	r3, [sp, #4]
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	68b9      	ldr	r1, [r7, #8]
 800e812:	68f8      	ldr	r0, [r7, #12]
 800e814:	f000 f805 	bl	800e822 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e818:	697b      	ldr	r3, [r7, #20]
	}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3718      	adds	r7, #24
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b086      	sub	sp, #24
 800e826:	af00      	add	r7, sp, #0
 800e828:	60f8      	str	r0, [r7, #12]
 800e82a:	60b9      	str	r1, [r7, #8]
 800e82c:	607a      	str	r2, [r7, #4]
 800e82e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10a      	bne.n	800e84c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	617b      	str	r3, [r7, #20]
}
 800e848:	bf00      	nop
 800e84a:	e7fe      	b.n	800e84a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d01e      	beq.n	800e890 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e852:	f000 fae7 	bl	800ee24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	683a      	ldr	r2, [r7, #0]
 800e866:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	6a3a      	ldr	r2, [r7, #32]
 800e86c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	3304      	adds	r3, #4
 800e872:	4618      	mov	r0, r3
 800e874:	f7fe fa55 	bl	800cd22 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d008      	beq.n	800e890 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e884:	f043 0304 	orr.w	r3, r3, #4
 800e888:	b2da      	uxtb	r2, r3
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e890:	bf00      	nop
 800e892:	3718      	adds	r7, #24
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b08a      	sub	sp, #40	; 0x28
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
 800e8a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d10a      	bne.n	800e8c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b4:	f383 8811 	msr	BASEPRI, r3
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	623b      	str	r3, [r7, #32]
}
 800e8c2:	bf00      	nop
 800e8c4:	e7fe      	b.n	800e8c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e8c6:	4b1a      	ldr	r3, [pc, #104]	; (800e930 <xTimerGenericCommand+0x98>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d02a      	beq.n	800e924 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	2b05      	cmp	r3, #5
 800e8de:	dc18      	bgt.n	800e912 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e8e0:	f7ff feb2 	bl	800e648 <xTaskGetSchedulerState>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d109      	bne.n	800e8fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e8ea:	4b11      	ldr	r3, [pc, #68]	; (800e930 <xTimerGenericCommand+0x98>)
 800e8ec:	6818      	ldr	r0, [r3, #0]
 800e8ee:	f107 0114 	add.w	r1, r7, #20
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8f6:	f7fe fba9 	bl	800d04c <xQueueGenericSend>
 800e8fa:	6278      	str	r0, [r7, #36]	; 0x24
 800e8fc:	e012      	b.n	800e924 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e8fe:	4b0c      	ldr	r3, [pc, #48]	; (800e930 <xTimerGenericCommand+0x98>)
 800e900:	6818      	ldr	r0, [r3, #0]
 800e902:	f107 0114 	add.w	r1, r7, #20
 800e906:	2300      	movs	r3, #0
 800e908:	2200      	movs	r2, #0
 800e90a:	f7fe fb9f 	bl	800d04c <xQueueGenericSend>
 800e90e:	6278      	str	r0, [r7, #36]	; 0x24
 800e910:	e008      	b.n	800e924 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e912:	4b07      	ldr	r3, [pc, #28]	; (800e930 <xTimerGenericCommand+0x98>)
 800e914:	6818      	ldr	r0, [r3, #0]
 800e916:	f107 0114 	add.w	r1, r7, #20
 800e91a:	2300      	movs	r3, #0
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	f7fe fc93 	bl	800d248 <xQueueGenericSendFromISR>
 800e922:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e926:	4618      	mov	r0, r3
 800e928:	3728      	adds	r7, #40	; 0x28
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	20000dbc 	.word	0x20000dbc

0800e934 <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 800e934:	b480      	push	{r7}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10a      	bne.n	800e95c <xTimerGetPeriod+0x28>
	__asm volatile
 800e946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94a:	f383 8811 	msr	BASEPRI, r3
 800e94e:	f3bf 8f6f 	isb	sy
 800e952:	f3bf 8f4f 	dsb	sy
 800e956:	60bb      	str	r3, [r7, #8]
}
 800e958:	bf00      	nop
 800e95a:	e7fe      	b.n	800e95a <xTimerGetPeriod+0x26>
	return pxTimer->xTimerPeriodInTicks;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	699b      	ldr	r3, [r3, #24]
}
 800e960:	4618      	mov	r0, r3
 800e962:	3714      	adds	r7, #20
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b088      	sub	sp, #32
 800e970:	af02      	add	r7, sp, #8
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e976:	4b22      	ldr	r3, [pc, #136]	; (800ea00 <prvProcessExpiredTimer+0x94>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	3304      	adds	r3, #4
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe fa36 	bl	800cdf6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e990:	f003 0304 	and.w	r3, r3, #4
 800e994:	2b00      	cmp	r3, #0
 800e996:	d022      	beq.n	800e9de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	699a      	ldr	r2, [r3, #24]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	18d1      	adds	r1, r2, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	683a      	ldr	r2, [r7, #0]
 800e9a4:	6978      	ldr	r0, [r7, #20]
 800e9a6:	f000 f8d1 	bl	800eb4c <prvInsertTimerInActiveList>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d01f      	beq.n	800e9f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	6978      	ldr	r0, [r7, #20]
 800e9bc:	f7ff ff6c 	bl	800e898 <xTimerGenericCommand>
 800e9c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d113      	bne.n	800e9f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	60fb      	str	r3, [r7, #12]
}
 800e9da:	bf00      	nop
 800e9dc:	e7fe      	b.n	800e9dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e9e4:	f023 0301 	bic.w	r3, r3, #1
 800e9e8:	b2da      	uxtb	r2, r3
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	6a1b      	ldr	r3, [r3, #32]
 800e9f4:	6978      	ldr	r0, [r7, #20]
 800e9f6:	4798      	blx	r3
}
 800e9f8:	bf00      	nop
 800e9fa:	3718      	adds	r7, #24
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	20000db4 	.word	0x20000db4

0800ea04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea0c:	f107 0308 	add.w	r3, r7, #8
 800ea10:	4618      	mov	r0, r3
 800ea12:	f000 f857 	bl	800eac4 <prvGetNextExpireTime>
 800ea16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f000 f803 	bl	800ea28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea22:	f000 f8d5 	bl	800ebd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea26:	e7f1      	b.n	800ea0c <prvTimerTask+0x8>

0800ea28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea32:	f7ff fa2f 	bl	800de94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea36:	f107 0308 	add.w	r3, r7, #8
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f000 f866 	bl	800eb0c <prvSampleTimeNow>
 800ea40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d130      	bne.n	800eaaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d10a      	bne.n	800ea64 <prvProcessTimerOrBlockTask+0x3c>
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d806      	bhi.n	800ea64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ea56:	f7ff fa2b 	bl	800deb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ea5a:	68f9      	ldr	r1, [r7, #12]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff ff85 	bl	800e96c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ea62:	e024      	b.n	800eaae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d008      	beq.n	800ea7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ea6a:	4b13      	ldr	r3, [pc, #76]	; (800eab8 <prvProcessTimerOrBlockTask+0x90>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d101      	bne.n	800ea78 <prvProcessTimerOrBlockTask+0x50>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e000      	b.n	800ea7a <prvProcessTimerOrBlockTask+0x52>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea7c:	4b0f      	ldr	r3, [pc, #60]	; (800eabc <prvProcessTimerOrBlockTask+0x94>)
 800ea7e:	6818      	ldr	r0, [r3, #0]
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	1ad3      	subs	r3, r2, r3
 800ea86:	683a      	ldr	r2, [r7, #0]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	f7fe fe85 	bl	800d798 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea8e:	f7ff fa0f 	bl	800deb0 <xTaskResumeAll>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d10a      	bne.n	800eaae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ea98:	4b09      	ldr	r3, [pc, #36]	; (800eac0 <prvProcessTimerOrBlockTask+0x98>)
 800ea9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea9e:	601a      	str	r2, [r3, #0]
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	f3bf 8f6f 	isb	sy
}
 800eaa8:	e001      	b.n	800eaae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eaaa:	f7ff fa01 	bl	800deb0 <xTaskResumeAll>
}
 800eaae:	bf00      	nop
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	20000db8 	.word	0x20000db8
 800eabc:	20000dbc 	.word	0x20000dbc
 800eac0:	e000ed04 	.word	0xe000ed04

0800eac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eacc:	4b0e      	ldr	r3, [pc, #56]	; (800eb08 <prvGetNextExpireTime+0x44>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d101      	bne.n	800eada <prvGetNextExpireTime+0x16>
 800ead6:	2201      	movs	r2, #1
 800ead8:	e000      	b.n	800eadc <prvGetNextExpireTime+0x18>
 800eada:	2200      	movs	r2, #0
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d105      	bne.n	800eaf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eae8:	4b07      	ldr	r3, [pc, #28]	; (800eb08 <prvGetNextExpireTime+0x44>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e001      	b.n	800eaf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3714      	adds	r7, #20
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
 800eb06:	bf00      	nop
 800eb08:	20000db4 	.word	0x20000db4

0800eb0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eb14:	f7ff fa68 	bl	800dfe8 <xTaskGetTickCount>
 800eb18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb1a:	4b0b      	ldr	r3, [pc, #44]	; (800eb48 <prvSampleTimeNow+0x3c>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d205      	bcs.n	800eb30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb24:	f000 f91a 	bl	800ed5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	e002      	b.n	800eb36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eb36:	4a04      	ldr	r2, [pc, #16]	; (800eb48 <prvSampleTimeNow+0x3c>)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	20000dc4 	.word	0x20000dc4

0800eb4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	607a      	str	r2, [r7, #4]
 800eb58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	68ba      	ldr	r2, [r7, #8]
 800eb62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d812      	bhi.n	800eb98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	1ad2      	subs	r2, r2, r3
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	699b      	ldr	r3, [r3, #24]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d302      	bcc.n	800eb86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eb80:	2301      	movs	r3, #1
 800eb82:	617b      	str	r3, [r7, #20]
 800eb84:	e01b      	b.n	800ebbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eb86:	4b10      	ldr	r3, [pc, #64]	; (800ebc8 <prvInsertTimerInActiveList+0x7c>)
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	4619      	mov	r1, r3
 800eb90:	4610      	mov	r0, r2
 800eb92:	f7fe f8f7 	bl	800cd84 <vListInsert>
 800eb96:	e012      	b.n	800ebbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d206      	bcs.n	800ebae <prvInsertTimerInActiveList+0x62>
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d302      	bcc.n	800ebae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	617b      	str	r3, [r7, #20]
 800ebac:	e007      	b.n	800ebbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebae:	4b07      	ldr	r3, [pc, #28]	; (800ebcc <prvInsertTimerInActiveList+0x80>)
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	4610      	mov	r0, r2
 800ebba:	f7fe f8e3 	bl	800cd84 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ebbe:	697b      	ldr	r3, [r7, #20]
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3718      	adds	r7, #24
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	20000db8 	.word	0x20000db8
 800ebcc:	20000db4 	.word	0x20000db4

0800ebd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b08c      	sub	sp, #48	; 0x30
 800ebd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ebd6:	e0ae      	b.n	800ed36 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f2c0 80ab 	blt.w	800ed36 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	695b      	ldr	r3, [r3, #20]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d004      	beq.n	800ebf6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	3304      	adds	r3, #4
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fe f900 	bl	800cdf6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebf6:	1d3b      	adds	r3, r7, #4
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7ff ff87 	bl	800eb0c <prvSampleTimeNow>
 800ebfe:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2b09      	cmp	r3, #9
 800ec04:	f200 8096 	bhi.w	800ed34 <prvProcessReceivedCommands+0x164>
 800ec08:	a201      	add	r2, pc, #4	; (adr r2, 800ec10 <prvProcessReceivedCommands+0x40>)
 800ec0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0e:	bf00      	nop
 800ec10:	0800ec39 	.word	0x0800ec39
 800ec14:	0800ec39 	.word	0x0800ec39
 800ec18:	0800ec39 	.word	0x0800ec39
 800ec1c:	0800ecad 	.word	0x0800ecad
 800ec20:	0800ecc1 	.word	0x0800ecc1
 800ec24:	0800ed0b 	.word	0x0800ed0b
 800ec28:	0800ec39 	.word	0x0800ec39
 800ec2c:	0800ec39 	.word	0x0800ec39
 800ec30:	0800ecad 	.word	0x0800ecad
 800ec34:	0800ecc1 	.word	0x0800ecc1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ec3e:	f043 0301 	orr.w	r3, r3, #1
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4e:	699b      	ldr	r3, [r3, #24]
 800ec50:	18d1      	adds	r1, r2, r3
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6a3a      	ldr	r2, [r7, #32]
 800ec56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec58:	f7ff ff78 	bl	800eb4c <prvInsertTimerInActiveList>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d069      	beq.n	800ed36 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ec70:	f003 0304 	and.w	r3, r3, #4
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d05e      	beq.n	800ed36 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	699b      	ldr	r3, [r3, #24]
 800ec7e:	441a      	add	r2, r3
 800ec80:	2300      	movs	r3, #0
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	2300      	movs	r3, #0
 800ec86:	2100      	movs	r1, #0
 800ec88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec8a:	f7ff fe05 	bl	800e898 <xTimerGenericCommand>
 800ec8e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d14f      	bne.n	800ed36 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800ec96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	61bb      	str	r3, [r7, #24]
}
 800eca8:	bf00      	nop
 800ecaa:	e7fe      	b.n	800ecaa <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ecb2:	f023 0301 	bic.w	r3, r3, #1
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ecbe:	e03a      	b.n	800ed36 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ecc6:	f043 0301 	orr.w	r3, r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecda:	699b      	ldr	r3, [r3, #24]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10a      	bne.n	800ecf6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800ece0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	617b      	str	r3, [r7, #20]
}
 800ecf2:	bf00      	nop
 800ecf4:	e7fe      	b.n	800ecf4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf8:	699a      	ldr	r2, [r3, #24]
 800ecfa:	6a3b      	ldr	r3, [r7, #32]
 800ecfc:	18d1      	adds	r1, r2, r3
 800ecfe:	6a3b      	ldr	r3, [r7, #32]
 800ed00:	6a3a      	ldr	r2, [r7, #32]
 800ed02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed04:	f7ff ff22 	bl	800eb4c <prvInsertTimerInActiveList>
					break;
 800ed08:	e015      	b.n	800ed36 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ed10:	f003 0302 	and.w	r3, r3, #2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d103      	bne.n	800ed20 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800ed18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed1a:	f000 fb67 	bl	800f3ec <vPortFree>
 800ed1e:	e00a      	b.n	800ed36 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ed26:	f023 0301 	bic.w	r3, r3, #1
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ed32:	e000      	b.n	800ed36 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800ed34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed36:	4b08      	ldr	r3, [pc, #32]	; (800ed58 <prvProcessReceivedCommands+0x188>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f107 0108 	add.w	r1, r7, #8
 800ed3e:	2200      	movs	r2, #0
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fe fb1d 	bl	800d380 <xQueueReceive>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f47f af45 	bne.w	800ebd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ed4e:	bf00      	nop
 800ed50:	bf00      	nop
 800ed52:	3728      	adds	r7, #40	; 0x28
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20000dbc 	.word	0x20000dbc

0800ed5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b088      	sub	sp, #32
 800ed60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed62:	e048      	b.n	800edf6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed64:	4b2d      	ldr	r3, [pc, #180]	; (800ee1c <prvSwitchTimerLists+0xc0>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed6e:	4b2b      	ldr	r3, [pc, #172]	; (800ee1c <prvSwitchTimerLists+0xc0>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fe f83a 	bl	800cdf6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6a1b      	ldr	r3, [r3, #32]
 800ed86:	68f8      	ldr	r0, [r7, #12]
 800ed88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ed90:	f003 0304 	and.w	r3, r3, #4
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d02e      	beq.n	800edf6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	699b      	ldr	r3, [r3, #24]
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	4413      	add	r3, r2
 800eda0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eda2:	68ba      	ldr	r2, [r7, #8]
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d90e      	bls.n	800edc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edb6:	4b19      	ldr	r3, [pc, #100]	; (800ee1c <prvSwitchTimerLists+0xc0>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4619      	mov	r1, r3
 800edc0:	4610      	mov	r0, r2
 800edc2:	f7fd ffdf 	bl	800cd84 <vListInsert>
 800edc6:	e016      	b.n	800edf6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edc8:	2300      	movs	r3, #0
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	2300      	movs	r3, #0
 800edce:	693a      	ldr	r2, [r7, #16]
 800edd0:	2100      	movs	r1, #0
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f7ff fd60 	bl	800e898 <xTimerGenericCommand>
 800edd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10a      	bne.n	800edf6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede4:	f383 8811 	msr	BASEPRI, r3
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	603b      	str	r3, [r7, #0]
}
 800edf2:	bf00      	nop
 800edf4:	e7fe      	b.n	800edf4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edf6:	4b09      	ldr	r3, [pc, #36]	; (800ee1c <prvSwitchTimerLists+0xc0>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d1b1      	bne.n	800ed64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ee00:	4b06      	ldr	r3, [pc, #24]	; (800ee1c <prvSwitchTimerLists+0xc0>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ee06:	4b06      	ldr	r3, [pc, #24]	; (800ee20 <prvSwitchTimerLists+0xc4>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a04      	ldr	r2, [pc, #16]	; (800ee1c <prvSwitchTimerLists+0xc0>)
 800ee0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ee0e:	4a04      	ldr	r2, [pc, #16]	; (800ee20 <prvSwitchTimerLists+0xc4>)
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	6013      	str	r3, [r2, #0]
}
 800ee14:	bf00      	nop
 800ee16:	3718      	adds	r7, #24
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20000db4 	.word	0x20000db4
 800ee20:	20000db8 	.word	0x20000db8

0800ee24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee2a:	f000 f9ab 	bl	800f184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee2e:	4b15      	ldr	r3, [pc, #84]	; (800ee84 <prvCheckForValidListAndQueue+0x60>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d120      	bne.n	800ee78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ee36:	4814      	ldr	r0, [pc, #80]	; (800ee88 <prvCheckForValidListAndQueue+0x64>)
 800ee38:	f7fd ff53 	bl	800cce2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee3c:	4813      	ldr	r0, [pc, #76]	; (800ee8c <prvCheckForValidListAndQueue+0x68>)
 800ee3e:	f7fd ff50 	bl	800cce2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ee42:	4b13      	ldr	r3, [pc, #76]	; (800ee90 <prvCheckForValidListAndQueue+0x6c>)
 800ee44:	4a10      	ldr	r2, [pc, #64]	; (800ee88 <prvCheckForValidListAndQueue+0x64>)
 800ee46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ee48:	4b12      	ldr	r3, [pc, #72]	; (800ee94 <prvCheckForValidListAndQueue+0x70>)
 800ee4a:	4a10      	ldr	r2, [pc, #64]	; (800ee8c <prvCheckForValidListAndQueue+0x68>)
 800ee4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ee4e:	2300      	movs	r3, #0
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	4b11      	ldr	r3, [pc, #68]	; (800ee98 <prvCheckForValidListAndQueue+0x74>)
 800ee54:	4a11      	ldr	r2, [pc, #68]	; (800ee9c <prvCheckForValidListAndQueue+0x78>)
 800ee56:	210c      	movs	r1, #12
 800ee58:	200a      	movs	r0, #10
 800ee5a:	f7fe f85f 	bl	800cf1c <xQueueGenericCreateStatic>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	4a08      	ldr	r2, [pc, #32]	; (800ee84 <prvCheckForValidListAndQueue+0x60>)
 800ee62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ee64:	4b07      	ldr	r3, [pc, #28]	; (800ee84 <prvCheckForValidListAndQueue+0x60>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d005      	beq.n	800ee78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee6c:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <prvCheckForValidListAndQueue+0x60>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	490b      	ldr	r1, [pc, #44]	; (800eea0 <prvCheckForValidListAndQueue+0x7c>)
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fe fc66 	bl	800d744 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee78:	f000 f9b4 	bl	800f1e4 <vPortExitCritical>
}
 800ee7c:	bf00      	nop
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	20000dbc 	.word	0x20000dbc
 800ee88:	20000d8c 	.word	0x20000d8c
 800ee8c:	20000da0 	.word	0x20000da0
 800ee90:	20000db4 	.word	0x20000db4
 800ee94:	20000db8 	.word	0x20000db8
 800ee98:	20000e40 	.word	0x20000e40
 800ee9c:	20000dc8 	.word	0x20000dc8
 800eea0:	08014144 	.word	0x08014144

0800eea4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d10a      	bne.n	800eecc <pvTimerGetTimerID+0x28>
	__asm volatile
 800eeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeba:	f383 8811 	msr	BASEPRI, r3
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	f3bf 8f4f 	dsb	sy
 800eec6:	60fb      	str	r3, [r7, #12]
}
 800eec8:	bf00      	nop
 800eeca:	e7fe      	b.n	800eeca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800eecc:	f000 f95a 	bl	800f184 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800eed6:	f000 f985 	bl	800f1e4 <vPortExitCritical>

	return pvReturn;
 800eeda:	693b      	ldr	r3, [r7, #16]
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3718      	adds	r7, #24
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d10a      	bne.n	800ef0e <vTimerSetTimerID+0x2a>
	__asm volatile
 800eef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefc:	f383 8811 	msr	BASEPRI, r3
 800ef00:	f3bf 8f6f 	isb	sy
 800ef04:	f3bf 8f4f 	dsb	sy
 800ef08:	60bb      	str	r3, [r7, #8]
}
 800ef0a:	bf00      	nop
 800ef0c:	e7fe      	b.n	800ef0c <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800ef0e:	f000 f939 	bl	800f184 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800ef18:	f000 f964 	bl	800f1e4 <vPortExitCritical>
}
 800ef1c:	bf00      	nop
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3b04      	subs	r3, #4
 800ef34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	3b04      	subs	r3, #4
 800ef42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	f023 0201 	bic.w	r2, r3, #1
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3b04      	subs	r3, #4
 800ef52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef54:	4a0c      	ldr	r2, [pc, #48]	; (800ef88 <pxPortInitialiseStack+0x64>)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	3b14      	subs	r3, #20
 800ef5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	3b04      	subs	r3, #4
 800ef6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f06f 0202 	mvn.w	r2, #2
 800ef72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	3b20      	subs	r3, #32
 800ef78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3714      	adds	r7, #20
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	0800ef8d 	.word	0x0800ef8d

0800ef8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ef96:	4b12      	ldr	r3, [pc, #72]	; (800efe0 <prvTaskExitError+0x54>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef9e:	d00a      	beq.n	800efb6 <prvTaskExitError+0x2a>
	__asm volatile
 800efa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	60fb      	str	r3, [r7, #12]
}
 800efb2:	bf00      	nop
 800efb4:	e7fe      	b.n	800efb4 <prvTaskExitError+0x28>
	__asm volatile
 800efb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efba:	f383 8811 	msr	BASEPRI, r3
 800efbe:	f3bf 8f6f 	isb	sy
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	60bb      	str	r3, [r7, #8]
}
 800efc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800efca:	bf00      	nop
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d0fc      	beq.n	800efcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800efd2:	bf00      	nop
 800efd4:	bf00      	nop
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	200000bc 	.word	0x200000bc
	...

0800eff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eff0:	4b07      	ldr	r3, [pc, #28]	; (800f010 <pxCurrentTCBConst2>)
 800eff2:	6819      	ldr	r1, [r3, #0]
 800eff4:	6808      	ldr	r0, [r1, #0]
 800eff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effa:	f380 8809 	msr	PSP, r0
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	f04f 0000 	mov.w	r0, #0
 800f006:	f380 8811 	msr	BASEPRI, r0
 800f00a:	4770      	bx	lr
 800f00c:	f3af 8000 	nop.w

0800f010 <pxCurrentTCBConst2>:
 800f010:	20000c60 	.word	0x20000c60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f014:	bf00      	nop
 800f016:	bf00      	nop

0800f018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f018:	4808      	ldr	r0, [pc, #32]	; (800f03c <prvPortStartFirstTask+0x24>)
 800f01a:	6800      	ldr	r0, [r0, #0]
 800f01c:	6800      	ldr	r0, [r0, #0]
 800f01e:	f380 8808 	msr	MSP, r0
 800f022:	f04f 0000 	mov.w	r0, #0
 800f026:	f380 8814 	msr	CONTROL, r0
 800f02a:	b662      	cpsie	i
 800f02c:	b661      	cpsie	f
 800f02e:	f3bf 8f4f 	dsb	sy
 800f032:	f3bf 8f6f 	isb	sy
 800f036:	df00      	svc	0
 800f038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f03a:	bf00      	nop
 800f03c:	e000ed08 	.word	0xe000ed08

0800f040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f046:	4b46      	ldr	r3, [pc, #280]	; (800f160 <xPortStartScheduler+0x120>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	4a46      	ldr	r2, [pc, #280]	; (800f164 <xPortStartScheduler+0x124>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d10a      	bne.n	800f066 <xPortStartScheduler+0x26>
	__asm volatile
 800f050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	613b      	str	r3, [r7, #16]
}
 800f062:	bf00      	nop
 800f064:	e7fe      	b.n	800f064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f066:	4b3e      	ldr	r3, [pc, #248]	; (800f160 <xPortStartScheduler+0x120>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4a3f      	ldr	r2, [pc, #252]	; (800f168 <xPortStartScheduler+0x128>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d10a      	bne.n	800f086 <xPortStartScheduler+0x46>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	60fb      	str	r3, [r7, #12]
}
 800f082:	bf00      	nop
 800f084:	e7fe      	b.n	800f084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f086:	4b39      	ldr	r3, [pc, #228]	; (800f16c <xPortStartScheduler+0x12c>)
 800f088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	22ff      	movs	r2, #255	; 0xff
 800f096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0a0:	78fb      	ldrb	r3, [r7, #3]
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f0a8:	b2da      	uxtb	r2, r3
 800f0aa:	4b31      	ldr	r3, [pc, #196]	; (800f170 <xPortStartScheduler+0x130>)
 800f0ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f0ae:	4b31      	ldr	r3, [pc, #196]	; (800f174 <xPortStartScheduler+0x134>)
 800f0b0:	2207      	movs	r2, #7
 800f0b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0b4:	e009      	b.n	800f0ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f0b6:	4b2f      	ldr	r3, [pc, #188]	; (800f174 <xPortStartScheduler+0x134>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	4a2d      	ldr	r2, [pc, #180]	; (800f174 <xPortStartScheduler+0x134>)
 800f0be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f0c0:	78fb      	ldrb	r3, [r7, #3]
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	005b      	lsls	r3, r3, #1
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0ca:	78fb      	ldrb	r3, [r7, #3]
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0d2:	2b80      	cmp	r3, #128	; 0x80
 800f0d4:	d0ef      	beq.n	800f0b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f0d6:	4b27      	ldr	r3, [pc, #156]	; (800f174 <xPortStartScheduler+0x134>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f1c3 0307 	rsb	r3, r3, #7
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	d00a      	beq.n	800f0f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e6:	f383 8811 	msr	BASEPRI, r3
 800f0ea:	f3bf 8f6f 	isb	sy
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	60bb      	str	r3, [r7, #8]
}
 800f0f4:	bf00      	nop
 800f0f6:	e7fe      	b.n	800f0f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f0f8:	4b1e      	ldr	r3, [pc, #120]	; (800f174 <xPortStartScheduler+0x134>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	021b      	lsls	r3, r3, #8
 800f0fe:	4a1d      	ldr	r2, [pc, #116]	; (800f174 <xPortStartScheduler+0x134>)
 800f100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f102:	4b1c      	ldr	r3, [pc, #112]	; (800f174 <xPortStartScheduler+0x134>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f10a:	4a1a      	ldr	r2, [pc, #104]	; (800f174 <xPortStartScheduler+0x134>)
 800f10c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	b2da      	uxtb	r2, r3
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f116:	4b18      	ldr	r3, [pc, #96]	; (800f178 <xPortStartScheduler+0x138>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a17      	ldr	r2, [pc, #92]	; (800f178 <xPortStartScheduler+0x138>)
 800f11c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f122:	4b15      	ldr	r3, [pc, #84]	; (800f178 <xPortStartScheduler+0x138>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4a14      	ldr	r2, [pc, #80]	; (800f178 <xPortStartScheduler+0x138>)
 800f128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f12c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f12e:	f000 f8dd 	bl	800f2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f132:	4b12      	ldr	r3, [pc, #72]	; (800f17c <xPortStartScheduler+0x13c>)
 800f134:	2200      	movs	r2, #0
 800f136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f138:	f000 f8fc 	bl	800f334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f13c:	4b10      	ldr	r3, [pc, #64]	; (800f180 <xPortStartScheduler+0x140>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a0f      	ldr	r2, [pc, #60]	; (800f180 <xPortStartScheduler+0x140>)
 800f142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f148:	f7ff ff66 	bl	800f018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f14c:	f7ff f814 	bl	800e178 <vTaskSwitchContext>
	prvTaskExitError();
 800f150:	f7ff ff1c 	bl	800ef8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	e000ed00 	.word	0xe000ed00
 800f164:	410fc271 	.word	0x410fc271
 800f168:	410fc270 	.word	0x410fc270
 800f16c:	e000e400 	.word	0xe000e400
 800f170:	20000e88 	.word	0x20000e88
 800f174:	20000e8c 	.word	0x20000e8c
 800f178:	e000ed20 	.word	0xe000ed20
 800f17c:	200000bc 	.word	0x200000bc
 800f180:	e000ef34 	.word	0xe000ef34

0800f184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
	__asm volatile
 800f18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18e:	f383 8811 	msr	BASEPRI, r3
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	f3bf 8f4f 	dsb	sy
 800f19a:	607b      	str	r3, [r7, #4]
}
 800f19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f19e:	4b0f      	ldr	r3, [pc, #60]	; (800f1dc <vPortEnterCritical+0x58>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	4a0d      	ldr	r2, [pc, #52]	; (800f1dc <vPortEnterCritical+0x58>)
 800f1a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f1a8:	4b0c      	ldr	r3, [pc, #48]	; (800f1dc <vPortEnterCritical+0x58>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d10f      	bne.n	800f1d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f1b0:	4b0b      	ldr	r3, [pc, #44]	; (800f1e0 <vPortEnterCritical+0x5c>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00a      	beq.n	800f1d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1be:	f383 8811 	msr	BASEPRI, r3
 800f1c2:	f3bf 8f6f 	isb	sy
 800f1c6:	f3bf 8f4f 	dsb	sy
 800f1ca:	603b      	str	r3, [r7, #0]
}
 800f1cc:	bf00      	nop
 800f1ce:	e7fe      	b.n	800f1ce <vPortEnterCritical+0x4a>
	}
}
 800f1d0:	bf00      	nop
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	200000bc 	.word	0x200000bc
 800f1e0:	e000ed04 	.word	0xe000ed04

0800f1e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f1ea:	4b12      	ldr	r3, [pc, #72]	; (800f234 <vPortExitCritical+0x50>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d10a      	bne.n	800f208 <vPortExitCritical+0x24>
	__asm volatile
 800f1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f6:	f383 8811 	msr	BASEPRI, r3
 800f1fa:	f3bf 8f6f 	isb	sy
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	607b      	str	r3, [r7, #4]
}
 800f204:	bf00      	nop
 800f206:	e7fe      	b.n	800f206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f208:	4b0a      	ldr	r3, [pc, #40]	; (800f234 <vPortExitCritical+0x50>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	3b01      	subs	r3, #1
 800f20e:	4a09      	ldr	r2, [pc, #36]	; (800f234 <vPortExitCritical+0x50>)
 800f210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f212:	4b08      	ldr	r3, [pc, #32]	; (800f234 <vPortExitCritical+0x50>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d105      	bne.n	800f226 <vPortExitCritical+0x42>
 800f21a:	2300      	movs	r3, #0
 800f21c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	f383 8811 	msr	BASEPRI, r3
}
 800f224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f226:	bf00      	nop
 800f228:	370c      	adds	r7, #12
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	200000bc 	.word	0x200000bc
	...

0800f240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f240:	f3ef 8009 	mrs	r0, PSP
 800f244:	f3bf 8f6f 	isb	sy
 800f248:	4b15      	ldr	r3, [pc, #84]	; (800f2a0 <pxCurrentTCBConst>)
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	f01e 0f10 	tst.w	lr, #16
 800f250:	bf08      	it	eq
 800f252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25a:	6010      	str	r0, [r2, #0]
 800f25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f264:	f380 8811 	msr	BASEPRI, r0
 800f268:	f3bf 8f4f 	dsb	sy
 800f26c:	f3bf 8f6f 	isb	sy
 800f270:	f7fe ff82 	bl	800e178 <vTaskSwitchContext>
 800f274:	f04f 0000 	mov.w	r0, #0
 800f278:	f380 8811 	msr	BASEPRI, r0
 800f27c:	bc09      	pop	{r0, r3}
 800f27e:	6819      	ldr	r1, [r3, #0]
 800f280:	6808      	ldr	r0, [r1, #0]
 800f282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f286:	f01e 0f10 	tst.w	lr, #16
 800f28a:	bf08      	it	eq
 800f28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f290:	f380 8809 	msr	PSP, r0
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	f3af 8000 	nop.w

0800f2a0 <pxCurrentTCBConst>:
 800f2a0:	20000c60 	.word	0x20000c60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2a4:	bf00      	nop
 800f2a6:	bf00      	nop

0800f2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800f2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b2:	f383 8811 	msr	BASEPRI, r3
 800f2b6:	f3bf 8f6f 	isb	sy
 800f2ba:	f3bf 8f4f 	dsb	sy
 800f2be:	607b      	str	r3, [r7, #4]
}
 800f2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f2c2:	f7fe fea1 	bl	800e008 <xTaskIncrementTick>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d003      	beq.n	800f2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f2cc:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <xPortSysTickHandler+0x40>)
 800f2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2d2:	601a      	str	r2, [r3, #0]
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	f383 8811 	msr	BASEPRI, r3
}
 800f2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f2e0:	bf00      	nop
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	e000ed04 	.word	0xe000ed04

0800f2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f2f0:	4b0b      	ldr	r3, [pc, #44]	; (800f320 <vPortSetupTimerInterrupt+0x34>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f2f6:	4b0b      	ldr	r3, [pc, #44]	; (800f324 <vPortSetupTimerInterrupt+0x38>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f2fc:	4b0a      	ldr	r3, [pc, #40]	; (800f328 <vPortSetupTimerInterrupt+0x3c>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a0a      	ldr	r2, [pc, #40]	; (800f32c <vPortSetupTimerInterrupt+0x40>)
 800f302:	fba2 2303 	umull	r2, r3, r2, r3
 800f306:	099b      	lsrs	r3, r3, #6
 800f308:	4a09      	ldr	r2, [pc, #36]	; (800f330 <vPortSetupTimerInterrupt+0x44>)
 800f30a:	3b01      	subs	r3, #1
 800f30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f30e:	4b04      	ldr	r3, [pc, #16]	; (800f320 <vPortSetupTimerInterrupt+0x34>)
 800f310:	2207      	movs	r2, #7
 800f312:	601a      	str	r2, [r3, #0]
}
 800f314:	bf00      	nop
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	e000e010 	.word	0xe000e010
 800f324:	e000e018 	.word	0xe000e018
 800f328:	20000004 	.word	0x20000004
 800f32c:	10624dd3 	.word	0x10624dd3
 800f330:	e000e014 	.word	0xe000e014

0800f334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f344 <vPortEnableVFP+0x10>
 800f338:	6801      	ldr	r1, [r0, #0]
 800f33a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f33e:	6001      	str	r1, [r0, #0]
 800f340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f342:	bf00      	nop
 800f344:	e000ed88 	.word	0xe000ed88

0800f348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f348:	b480      	push	{r7}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f34e:	f3ef 8305 	mrs	r3, IPSR
 800f352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2b0f      	cmp	r3, #15
 800f358:	d914      	bls.n	800f384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f35a:	4a17      	ldr	r2, [pc, #92]	; (800f3b8 <vPortValidateInterruptPriority+0x70>)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	4413      	add	r3, r2
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f364:	4b15      	ldr	r3, [pc, #84]	; (800f3bc <vPortValidateInterruptPriority+0x74>)
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	7afa      	ldrb	r2, [r7, #11]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d20a      	bcs.n	800f384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f372:	f383 8811 	msr	BASEPRI, r3
 800f376:	f3bf 8f6f 	isb	sy
 800f37a:	f3bf 8f4f 	dsb	sy
 800f37e:	607b      	str	r3, [r7, #4]
}
 800f380:	bf00      	nop
 800f382:	e7fe      	b.n	800f382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f384:	4b0e      	ldr	r3, [pc, #56]	; (800f3c0 <vPortValidateInterruptPriority+0x78>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f38c:	4b0d      	ldr	r3, [pc, #52]	; (800f3c4 <vPortValidateInterruptPriority+0x7c>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	429a      	cmp	r2, r3
 800f392:	d90a      	bls.n	800f3aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	603b      	str	r3, [r7, #0]
}
 800f3a6:	bf00      	nop
 800f3a8:	e7fe      	b.n	800f3a8 <vPortValidateInterruptPriority+0x60>
	}
 800f3aa:	bf00      	nop
 800f3ac:	3714      	adds	r7, #20
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	e000e3f0 	.word	0xe000e3f0
 800f3bc:	20000e88 	.word	0x20000e88
 800f3c0:	e000ed0c 	.word	0xe000ed0c
 800f3c4:	20000e8c 	.word	0x20000e8c

0800f3c8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800f3d0:	f7fe fd60 	bl	800de94 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 fd2b 	bl	800fe30 <malloc>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f3de:	f7fe fd67 	bl	800deb0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
	if( pv )
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d006      	beq.n	800f408 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800f3fa:	f7fe fd4b 	bl	800de94 <vTaskSuspendAll>
		{
			free( pv );
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fd1e 	bl	800fe40 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800f404:	f7fe fd54 	bl	800deb0 <xTaskResumeAll>
	}
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f414:	2200      	movs	r2, #0
 800f416:	4912      	ldr	r1, [pc, #72]	; (800f460 <MX_USB_DEVICE_Init+0x50>)
 800f418:	4812      	ldr	r0, [pc, #72]	; (800f464 <MX_USB_DEVICE_Init+0x54>)
 800f41a:	f7fc f8f1 	bl	800b600 <USBD_Init>
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	d001      	beq.n	800f428 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f424:	f7f2 fdc0 	bl	8001fa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f428:	490f      	ldr	r1, [pc, #60]	; (800f468 <MX_USB_DEVICE_Init+0x58>)
 800f42a:	480e      	ldr	r0, [pc, #56]	; (800f464 <MX_USB_DEVICE_Init+0x54>)
 800f42c:	f7fc f918 	bl	800b660 <USBD_RegisterClass>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f436:	f7f2 fdb7 	bl	8001fa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f43a:	490c      	ldr	r1, [pc, #48]	; (800f46c <MX_USB_DEVICE_Init+0x5c>)
 800f43c:	4809      	ldr	r0, [pc, #36]	; (800f464 <MX_USB_DEVICE_Init+0x54>)
 800f43e:	f7fc f809 	bl	800b454 <USBD_CDC_RegisterInterface>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f448:	f7f2 fdae 	bl	8001fa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f44c:	4805      	ldr	r0, [pc, #20]	; (800f464 <MX_USB_DEVICE_Init+0x54>)
 800f44e:	f7fc f93d 	bl	800b6cc <USBD_Start>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f458:	f7f2 fda6 	bl	8001fa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f45c:	bf00      	nop
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	200000d4 	.word	0x200000d4
 800f464:	20000e90 	.word	0x20000e90
 800f468:	2000003c 	.word	0x2000003c
 800f46c:	200000c0 	.word	0x200000c0

0800f470 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f474:	2200      	movs	r2, #0
 800f476:	4905      	ldr	r1, [pc, #20]	; (800f48c <CDC_Init_FS+0x1c>)
 800f478:	4805      	ldr	r0, [pc, #20]	; (800f490 <CDC_Init_FS+0x20>)
 800f47a:	f7fc f805 	bl	800b488 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f47e:	4905      	ldr	r1, [pc, #20]	; (800f494 <CDC_Init_FS+0x24>)
 800f480:	4803      	ldr	r0, [pc, #12]	; (800f490 <CDC_Init_FS+0x20>)
 800f482:	f7fc f823 	bl	800b4cc <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800f486:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f488:	4618      	mov	r0, r3
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	2000156c 	.word	0x2000156c
 800f490:	20000e90 	.word	0x20000e90
 800f494:	2000116c 	.word	0x2000116c

0800f498 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f498:	b480      	push	{r7}
 800f49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800f49c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr

0800f4a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	6039      	str	r1, [r7, #0]
 800f4b2:	71fb      	strb	r3, [r7, #7]
 800f4b4:	4613      	mov	r3, r2
 800f4b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	2b23      	cmp	r3, #35	; 0x23
 800f4bc:	d84a      	bhi.n	800f554 <CDC_Control_FS+0xac>
 800f4be:	a201      	add	r2, pc, #4	; (adr r2, 800f4c4 <CDC_Control_FS+0x1c>)
 800f4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c4:	0800f555 	.word	0x0800f555
 800f4c8:	0800f555 	.word	0x0800f555
 800f4cc:	0800f555 	.word	0x0800f555
 800f4d0:	0800f555 	.word	0x0800f555
 800f4d4:	0800f555 	.word	0x0800f555
 800f4d8:	0800f555 	.word	0x0800f555
 800f4dc:	0800f555 	.word	0x0800f555
 800f4e0:	0800f555 	.word	0x0800f555
 800f4e4:	0800f555 	.word	0x0800f555
 800f4e8:	0800f555 	.word	0x0800f555
 800f4ec:	0800f555 	.word	0x0800f555
 800f4f0:	0800f555 	.word	0x0800f555
 800f4f4:	0800f555 	.word	0x0800f555
 800f4f8:	0800f555 	.word	0x0800f555
 800f4fc:	0800f555 	.word	0x0800f555
 800f500:	0800f555 	.word	0x0800f555
 800f504:	0800f555 	.word	0x0800f555
 800f508:	0800f555 	.word	0x0800f555
 800f50c:	0800f555 	.word	0x0800f555
 800f510:	0800f555 	.word	0x0800f555
 800f514:	0800f555 	.word	0x0800f555
 800f518:	0800f555 	.word	0x0800f555
 800f51c:	0800f555 	.word	0x0800f555
 800f520:	0800f555 	.word	0x0800f555
 800f524:	0800f555 	.word	0x0800f555
 800f528:	0800f555 	.word	0x0800f555
 800f52c:	0800f555 	.word	0x0800f555
 800f530:	0800f555 	.word	0x0800f555
 800f534:	0800f555 	.word	0x0800f555
 800f538:	0800f555 	.word	0x0800f555
 800f53c:	0800f555 	.word	0x0800f555
 800f540:	0800f555 	.word	0x0800f555
 800f544:	0800f555 	.word	0x0800f555
 800f548:	0800f555 	.word	0x0800f555
 800f54c:	0800f555 	.word	0x0800f555
 800f550:	0800f555 	.word	0x0800f555
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800f554:	bf00      	nop
    }

    return (USBD_OK);
 800f556:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f558:	4618      	mov	r0, r3
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f56e:	6879      	ldr	r1, [r7, #4]
 800f570:	4805      	ldr	r0, [pc, #20]	; (800f588 <CDC_Receive_FS+0x24>)
 800f572:	f7fb ffab 	bl	800b4cc <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f576:	4804      	ldr	r0, [pc, #16]	; (800f588 <CDC_Receive_FS+0x24>)
 800f578:	f7fc f80c 	bl	800b594 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800f57c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	20000e90 	.word	0x20000e90

0800f58c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	460b      	mov	r3, r1
 800f596:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f598:	2300      	movs	r3, #0
 800f59a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800f59c:	4b0d      	ldr	r3, [pc, #52]	; (800f5d4 <CDC_Transmit_FS+0x48>)
 800f59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5a2:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d001      	beq.n	800f5b2 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e00b      	b.n	800f5ca <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f5b2:	887b      	ldrh	r3, [r7, #2]
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	6879      	ldr	r1, [r7, #4]
 800f5b8:	4806      	ldr	r0, [pc, #24]	; (800f5d4 <CDC_Transmit_FS+0x48>)
 800f5ba:	f7fb ff65 	bl	800b488 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f5be:	4805      	ldr	r0, [pc, #20]	; (800f5d4 <CDC_Transmit_FS+0x48>)
 800f5c0:	f7fb ffa2 	bl	800b508 <USBD_CDC_TransmitPacket>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	20000e90 	.word	0x20000e90

0800f5d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b087      	sub	sp, #28
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f5ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	371c      	adds	r7, #28
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
	...

0800f5fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	4603      	mov	r3, r0
 800f604:	6039      	str	r1, [r7, #0]
 800f606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	2212      	movs	r2, #18
 800f60c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f60e:	4b03      	ldr	r3, [pc, #12]	; (800f61c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f610:	4618      	mov	r0, r3
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	200000f0 	.word	0x200000f0

0800f620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	4603      	mov	r3, r0
 800f628:	6039      	str	r1, [r7, #0]
 800f62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	2204      	movs	r2, #4
 800f630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f632:	4b03      	ldr	r3, [pc, #12]	; (800f640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f634:	4618      	mov	r0, r3
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr
 800f640:	20000104 	.word	0x20000104

0800f644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4603      	mov	r3, r0
 800f64c:	6039      	str	r1, [r7, #0]
 800f64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f650:	79fb      	ldrb	r3, [r7, #7]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d105      	bne.n	800f662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f656:	683a      	ldr	r2, [r7, #0]
 800f658:	4907      	ldr	r1, [pc, #28]	; (800f678 <USBD_FS_ProductStrDescriptor+0x34>)
 800f65a:	4808      	ldr	r0, [pc, #32]	; (800f67c <USBD_FS_ProductStrDescriptor+0x38>)
 800f65c:	f7fd f9e2 	bl	800ca24 <USBD_GetString>
 800f660:	e004      	b.n	800f66c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f662:	683a      	ldr	r2, [r7, #0]
 800f664:	4904      	ldr	r1, [pc, #16]	; (800f678 <USBD_FS_ProductStrDescriptor+0x34>)
 800f666:	4805      	ldr	r0, [pc, #20]	; (800f67c <USBD_FS_ProductStrDescriptor+0x38>)
 800f668:	f7fd f9dc 	bl	800ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f66c:	4b02      	ldr	r3, [pc, #8]	; (800f678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	2000196c 	.word	0x2000196c
 800f67c:	0801414c 	.word	0x0801414c

0800f680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	4603      	mov	r3, r0
 800f688:	6039      	str	r1, [r7, #0]
 800f68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f68c:	683a      	ldr	r2, [r7, #0]
 800f68e:	4904      	ldr	r1, [pc, #16]	; (800f6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f690:	4804      	ldr	r0, [pc, #16]	; (800f6a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f692:	f7fd f9c7 	bl	800ca24 <USBD_GetString>
  return USBD_StrDesc;
 800f696:	4b02      	ldr	r3, [pc, #8]	; (800f6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	2000196c 	.word	0x2000196c
 800f6a4:	08014164 	.word	0x08014164

0800f6a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	6039      	str	r1, [r7, #0]
 800f6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	221a      	movs	r2, #26
 800f6b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f6ba:	f000 f843 	bl	800f744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f6be:	4b02      	ldr	r3, [pc, #8]	; (800f6c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	20000108 	.word	0x20000108

0800f6cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	6039      	str	r1, [r7, #0]
 800f6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f6d8:	79fb      	ldrb	r3, [r7, #7]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d105      	bne.n	800f6ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	4907      	ldr	r1, [pc, #28]	; (800f700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f6e2:	4808      	ldr	r0, [pc, #32]	; (800f704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f6e4:	f7fd f99e 	bl	800ca24 <USBD_GetString>
 800f6e8:	e004      	b.n	800f6f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f6ea:	683a      	ldr	r2, [r7, #0]
 800f6ec:	4904      	ldr	r1, [pc, #16]	; (800f700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f6ee:	4805      	ldr	r0, [pc, #20]	; (800f704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f6f0:	f7fd f998 	bl	800ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6f4:	4b02      	ldr	r3, [pc, #8]	; (800f700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	2000196c 	.word	0x2000196c
 800f704:	08014178 	.word	0x08014178

0800f708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	6039      	str	r1, [r7, #0]
 800f712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f714:	79fb      	ldrb	r3, [r7, #7]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d105      	bne.n	800f726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	4907      	ldr	r1, [pc, #28]	; (800f73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f71e:	4808      	ldr	r0, [pc, #32]	; (800f740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f720:	f7fd f980 	bl	800ca24 <USBD_GetString>
 800f724:	e004      	b.n	800f730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f726:	683a      	ldr	r2, [r7, #0]
 800f728:	4904      	ldr	r1, [pc, #16]	; (800f73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f72a:	4805      	ldr	r0, [pc, #20]	; (800f740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f72c:	f7fd f97a 	bl	800ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f730:	4b02      	ldr	r3, [pc, #8]	; (800f73c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f732:	4618      	mov	r0, r3
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	2000196c 	.word	0x2000196c
 800f740:	08014184 	.word	0x08014184

0800f744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f74a:	4b0f      	ldr	r3, [pc, #60]	; (800f788 <Get_SerialNum+0x44>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f750:	4b0e      	ldr	r3, [pc, #56]	; (800f78c <Get_SerialNum+0x48>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f756:	4b0e      	ldr	r3, [pc, #56]	; (800f790 <Get_SerialNum+0x4c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4413      	add	r3, r2
 800f762:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d009      	beq.n	800f77e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f76a:	2208      	movs	r2, #8
 800f76c:	4909      	ldr	r1, [pc, #36]	; (800f794 <Get_SerialNum+0x50>)
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f000 f814 	bl	800f79c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f774:	2204      	movs	r2, #4
 800f776:	4908      	ldr	r1, [pc, #32]	; (800f798 <Get_SerialNum+0x54>)
 800f778:	68b8      	ldr	r0, [r7, #8]
 800f77a:	f000 f80f 	bl	800f79c <IntToUnicode>
  }
}
 800f77e:	bf00      	nop
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	1fff7a10 	.word	0x1fff7a10
 800f78c:	1fff7a14 	.word	0x1fff7a14
 800f790:	1fff7a18 	.word	0x1fff7a18
 800f794:	2000010a 	.word	0x2000010a
 800f798:	2000011a 	.word	0x2000011a

0800f79c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b087      	sub	sp, #28
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	60f8      	str	r0, [r7, #12]
 800f7a4:	60b9      	str	r1, [r7, #8]
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	75fb      	strb	r3, [r7, #23]
 800f7b2:	e027      	b.n	800f804 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	0f1b      	lsrs	r3, r3, #28
 800f7b8:	2b09      	cmp	r3, #9
 800f7ba:	d80b      	bhi.n	800f7d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	0f1b      	lsrs	r3, r3, #28
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	7dfb      	ldrb	r3, [r7, #23]
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	440b      	add	r3, r1
 800f7cc:	3230      	adds	r2, #48	; 0x30
 800f7ce:	b2d2      	uxtb	r2, r2
 800f7d0:	701a      	strb	r2, [r3, #0]
 800f7d2:	e00a      	b.n	800f7ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	0f1b      	lsrs	r3, r3, #28
 800f7d8:	b2da      	uxtb	r2, r3
 800f7da:	7dfb      	ldrb	r3, [r7, #23]
 800f7dc:	005b      	lsls	r3, r3, #1
 800f7de:	4619      	mov	r1, r3
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	440b      	add	r3, r1
 800f7e4:	3237      	adds	r2, #55	; 0x37
 800f7e6:	b2d2      	uxtb	r2, r2
 800f7e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	011b      	lsls	r3, r3, #4
 800f7ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f7f0:	7dfb      	ldrb	r3, [r7, #23]
 800f7f2:	005b      	lsls	r3, r3, #1
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	68ba      	ldr	r2, [r7, #8]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f7fe:	7dfb      	ldrb	r3, [r7, #23]
 800f800:	3301      	adds	r3, #1
 800f802:	75fb      	strb	r3, [r7, #23]
 800f804:	7dfa      	ldrb	r2, [r7, #23]
 800f806:	79fb      	ldrb	r3, [r7, #7]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d3d3      	bcc.n	800f7b4 <IntToUnicode+0x18>
  }
}
 800f80c:	bf00      	nop
 800f80e:	bf00      	nop
 800f810:	371c      	adds	r7, #28
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
	...

0800f81c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b08a      	sub	sp, #40	; 0x28
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f824:	f107 0314 	add.w	r3, r7, #20
 800f828:	2200      	movs	r2, #0
 800f82a:	601a      	str	r2, [r3, #0]
 800f82c:	605a      	str	r2, [r3, #4]
 800f82e:	609a      	str	r2, [r3, #8]
 800f830:	60da      	str	r2, [r3, #12]
 800f832:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f83c:	d13a      	bne.n	800f8b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f83e:	2300      	movs	r3, #0
 800f840:	613b      	str	r3, [r7, #16]
 800f842:	4b1e      	ldr	r3, [pc, #120]	; (800f8bc <HAL_PCD_MspInit+0xa0>)
 800f844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f846:	4a1d      	ldr	r2, [pc, #116]	; (800f8bc <HAL_PCD_MspInit+0xa0>)
 800f848:	f043 0301 	orr.w	r3, r3, #1
 800f84c:	6313      	str	r3, [r2, #48]	; 0x30
 800f84e:	4b1b      	ldr	r3, [pc, #108]	; (800f8bc <HAL_PCD_MspInit+0xa0>)
 800f850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f852:	f003 0301 	and.w	r3, r3, #1
 800f856:	613b      	str	r3, [r7, #16]
 800f858:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f85a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f85e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f860:	2302      	movs	r3, #2
 800f862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f864:	2300      	movs	r3, #0
 800f866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f868:	2303      	movs	r3, #3
 800f86a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f86c:	230a      	movs	r3, #10
 800f86e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f870:	f107 0314 	add.w	r3, r7, #20
 800f874:	4619      	mov	r1, r3
 800f876:	4812      	ldr	r0, [pc, #72]	; (800f8c0 <HAL_PCD_MspInit+0xa4>)
 800f878:	f7f5 fb9a 	bl	8004fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f87c:	4b0f      	ldr	r3, [pc, #60]	; (800f8bc <HAL_PCD_MspInit+0xa0>)
 800f87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f880:	4a0e      	ldr	r2, [pc, #56]	; (800f8bc <HAL_PCD_MspInit+0xa0>)
 800f882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f886:	6353      	str	r3, [r2, #52]	; 0x34
 800f888:	2300      	movs	r3, #0
 800f88a:	60fb      	str	r3, [r7, #12]
 800f88c:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <HAL_PCD_MspInit+0xa0>)
 800f88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f890:	4a0a      	ldr	r2, [pc, #40]	; (800f8bc <HAL_PCD_MspInit+0xa0>)
 800f892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f896:	6453      	str	r3, [r2, #68]	; 0x44
 800f898:	4b08      	ldr	r3, [pc, #32]	; (800f8bc <HAL_PCD_MspInit+0xa0>)
 800f89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f89c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8a0:	60fb      	str	r3, [r7, #12]
 800f8a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	2105      	movs	r1, #5
 800f8a8:	2043      	movs	r0, #67	; 0x43
 800f8aa:	f7f5 f960 	bl	8004b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8ae:	2043      	movs	r0, #67	; 0x43
 800f8b0:	f7f5 f979 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f8b4:	bf00      	nop
 800f8b6:	3728      	adds	r7, #40	; 0x28
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	40023800 	.word	0x40023800
 800f8c0:	40020000 	.word	0x40020000

0800f8c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4610      	mov	r0, r2
 800f8dc:	f7fb ff43 	bl	800b766 <USBD_LL_SetupStage>
}
 800f8e0:	bf00      	nop
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f8fa:	78fa      	ldrb	r2, [r7, #3]
 800f8fc:	6879      	ldr	r1, [r7, #4]
 800f8fe:	4613      	mov	r3, r2
 800f900:	00db      	lsls	r3, r3, #3
 800f902:	4413      	add	r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	440b      	add	r3, r1
 800f908:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	78fb      	ldrb	r3, [r7, #3]
 800f910:	4619      	mov	r1, r3
 800f912:	f7fb ff7d 	bl	800b810 <USBD_LL_DataOutStage>
}
 800f916:	bf00      	nop
 800f918:	3708      	adds	r7, #8
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b082      	sub	sp, #8
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	460b      	mov	r3, r1
 800f928:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f930:	78fa      	ldrb	r2, [r7, #3]
 800f932:	6879      	ldr	r1, [r7, #4]
 800f934:	4613      	mov	r3, r2
 800f936:	00db      	lsls	r3, r3, #3
 800f938:	4413      	add	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	440b      	add	r3, r1
 800f93e:	334c      	adds	r3, #76	; 0x4c
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	78fb      	ldrb	r3, [r7, #3]
 800f944:	4619      	mov	r1, r3
 800f946:	f7fc f816 	bl	800b976 <USBD_LL_DataInStage>
}
 800f94a:	bf00      	nop
 800f94c:	3708      	adds	r7, #8
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f952:	b580      	push	{r7, lr}
 800f954:	b082      	sub	sp, #8
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f960:	4618      	mov	r0, r3
 800f962:	f7fc f94a 	bl	800bbfa <USBD_LL_SOF>
}
 800f966:	bf00      	nop
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f96e:	b580      	push	{r7, lr}
 800f970:	b084      	sub	sp, #16
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f976:	2301      	movs	r3, #1
 800f978:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	2b02      	cmp	r3, #2
 800f980:	d001      	beq.n	800f986 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f982:	f7f2 fb11 	bl	8001fa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f98c:	7bfa      	ldrb	r2, [r7, #15]
 800f98e:	4611      	mov	r1, r2
 800f990:	4618      	mov	r0, r3
 800f992:	f7fc f8f4 	bl	800bb7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fc f89c 	bl	800bada <USBD_LL_Reset>
}
 800f9a2:	bf00      	nop
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
	...

0800f9ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fc f8ef 	bl	800bb9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	6812      	ldr	r2, [r2, #0]
 800f9ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f9d2:	f043 0301 	orr.w	r3, r3, #1
 800f9d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a1b      	ldr	r3, [r3, #32]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d005      	beq.n	800f9ec <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9e0:	4b04      	ldr	r3, [pc, #16]	; (800f9f4 <HAL_PCD_SuspendCallback+0x48>)
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	4a03      	ldr	r2, [pc, #12]	; (800f9f4 <HAL_PCD_SuspendCallback+0x48>)
 800f9e6:	f043 0306 	orr.w	r3, r3, #6
 800f9ea:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800f9ec:	bf00      	nop
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	e000ed00 	.word	0xe000ed00

0800f9f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fc f8df 	bl	800bbca <USBD_LL_Resume>
}
 800fa0c:	bf00      	nop
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa26:	78fa      	ldrb	r2, [r7, #3]
 800fa28:	4611      	mov	r1, r2
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fc f937 	bl	800bc9e <USBD_LL_IsoOUTIncomplete>
}
 800fa30:	bf00      	nop
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	460b      	mov	r3, r1
 800fa42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa4a:	78fa      	ldrb	r2, [r7, #3]
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fc f8f3 	bl	800bc3a <USBD_LL_IsoINIncomplete>
}
 800fa54:	bf00      	nop
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fc f949 	bl	800bd02 <USBD_LL_DevConnected>
}
 800fa70:	bf00      	nop
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fc f946 	bl	800bd18 <USBD_LL_DevDisconnected>
}
 800fa8c:	bf00      	nop
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d13c      	bne.n	800fb1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800faa4:	4a20      	ldr	r2, [pc, #128]	; (800fb28 <USBD_LL_Init+0x94>)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4a1e      	ldr	r2, [pc, #120]	; (800fb28 <USBD_LL_Init+0x94>)
 800fab0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fab4:	4b1c      	ldr	r3, [pc, #112]	; (800fb28 <USBD_LL_Init+0x94>)
 800fab6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800faba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fabc:	4b1a      	ldr	r3, [pc, #104]	; (800fb28 <USBD_LL_Init+0x94>)
 800fabe:	2204      	movs	r2, #4
 800fac0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fac2:	4b19      	ldr	r3, [pc, #100]	; (800fb28 <USBD_LL_Init+0x94>)
 800fac4:	2202      	movs	r2, #2
 800fac6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fac8:	4b17      	ldr	r3, [pc, #92]	; (800fb28 <USBD_LL_Init+0x94>)
 800faca:	2200      	movs	r2, #0
 800facc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800face:	4b16      	ldr	r3, [pc, #88]	; (800fb28 <USBD_LL_Init+0x94>)
 800fad0:	2202      	movs	r2, #2
 800fad2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fad4:	4b14      	ldr	r3, [pc, #80]	; (800fb28 <USBD_LL_Init+0x94>)
 800fad6:	2200      	movs	r2, #0
 800fad8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fada:	4b13      	ldr	r3, [pc, #76]	; (800fb28 <USBD_LL_Init+0x94>)
 800fadc:	2200      	movs	r2, #0
 800fade:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fae0:	4b11      	ldr	r3, [pc, #68]	; (800fb28 <USBD_LL_Init+0x94>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fae6:	4b10      	ldr	r3, [pc, #64]	; (800fb28 <USBD_LL_Init+0x94>)
 800fae8:	2200      	movs	r2, #0
 800faea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800faec:	4b0e      	ldr	r3, [pc, #56]	; (800fb28 <USBD_LL_Init+0x94>)
 800faee:	2200      	movs	r2, #0
 800faf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800faf2:	480d      	ldr	r0, [pc, #52]	; (800fb28 <USBD_LL_Init+0x94>)
 800faf4:	f7f6 fbeb 	bl	80062ce <HAL_PCD_Init>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d001      	beq.n	800fb02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fafe:	f7f2 fa53 	bl	8001fa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fb02:	2180      	movs	r1, #128	; 0x80
 800fb04:	4808      	ldr	r0, [pc, #32]	; (800fb28 <USBD_LL_Init+0x94>)
 800fb06:	f7f7 fe42 	bl	800778e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fb0a:	2240      	movs	r2, #64	; 0x40
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	4806      	ldr	r0, [pc, #24]	; (800fb28 <USBD_LL_Init+0x94>)
 800fb10:	f7f7 fdf6 	bl	8007700 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fb14:	2280      	movs	r2, #128	; 0x80
 800fb16:	2101      	movs	r1, #1
 800fb18:	4803      	ldr	r0, [pc, #12]	; (800fb28 <USBD_LL_Init+0x94>)
 800fb1a:	f7f7 fdf1 	bl	8007700 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	20001b6c 	.word	0x20001b6c

0800fb2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb34:	2300      	movs	r3, #0
 800fb36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7f6 fce0 	bl	8006508 <HAL_PCD_Start>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb4c:	7bfb      	ldrb	r3, [r7, #15]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f000 f942 	bl	800fdd8 <USBD_Get_USB_Status>
 800fb54:	4603      	mov	r3, r0
 800fb56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb58:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b084      	sub	sp, #16
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
 800fb6a:	4608      	mov	r0, r1
 800fb6c:	4611      	mov	r1, r2
 800fb6e:	461a      	mov	r2, r3
 800fb70:	4603      	mov	r3, r0
 800fb72:	70fb      	strb	r3, [r7, #3]
 800fb74:	460b      	mov	r3, r1
 800fb76:	70bb      	strb	r3, [r7, #2]
 800fb78:	4613      	mov	r3, r2
 800fb7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb80:	2300      	movs	r3, #0
 800fb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb8a:	78bb      	ldrb	r3, [r7, #2]
 800fb8c:	883a      	ldrh	r2, [r7, #0]
 800fb8e:	78f9      	ldrb	r1, [r7, #3]
 800fb90:	f7f7 f9b1 	bl	8006ef6 <HAL_PCD_EP_Open>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f91c 	bl	800fdd8 <USBD_Get_USB_Status>
 800fba0:	4603      	mov	r3, r0
 800fba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b084      	sub	sp, #16
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbc8:	78fa      	ldrb	r2, [r7, #3]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7f7 f9fa 	bl	8006fc6 <HAL_PCD_EP_Close>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbd6:	7bfb      	ldrb	r3, [r7, #15]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f000 f8fd 	bl	800fdd8 <USBD_Get_USB_Status>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc06:	78fa      	ldrb	r2, [r7, #3]
 800fc08:	4611      	mov	r1, r2
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7f7 fad2 	bl	80071b4 <HAL_PCD_EP_SetStall>
 800fc10:	4603      	mov	r3, r0
 800fc12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc14:	7bfb      	ldrb	r3, [r7, #15]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 f8de 	bl	800fdd8 <USBD_Get_USB_Status>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}

0800fc2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b084      	sub	sp, #16
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
 800fc32:	460b      	mov	r3, r1
 800fc34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc36:	2300      	movs	r3, #0
 800fc38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc44:	78fa      	ldrb	r2, [r7, #3]
 800fc46:	4611      	mov	r1, r2
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7f7 fb17 	bl	800727c <HAL_PCD_EP_ClrStall>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc52:	7bfb      	ldrb	r3, [r7, #15]
 800fc54:	4618      	mov	r0, r3
 800fc56:	f000 f8bf 	bl	800fdd8 <USBD_Get_USB_Status>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3710      	adds	r7, #16
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b085      	sub	sp, #20
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	460b      	mov	r3, r1
 800fc72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	da0b      	bge.n	800fc9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc84:	78fb      	ldrb	r3, [r7, #3]
 800fc86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc8a:	68f9      	ldr	r1, [r7, #12]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	00db      	lsls	r3, r3, #3
 800fc90:	4413      	add	r3, r2
 800fc92:	009b      	lsls	r3, r3, #2
 800fc94:	440b      	add	r3, r1
 800fc96:	333e      	adds	r3, #62	; 0x3e
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	e00b      	b.n	800fcb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fc9c:	78fb      	ldrb	r3, [r7, #3]
 800fc9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fca2:	68f9      	ldr	r1, [r7, #12]
 800fca4:	4613      	mov	r3, r2
 800fca6:	00db      	lsls	r3, r3, #3
 800fca8:	4413      	add	r3, r2
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	440b      	add	r3, r1
 800fcae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fcb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3714      	adds	r7, #20
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	460b      	mov	r3, r1
 800fcca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fccc:	2300      	movs	r3, #0
 800fcce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcda:	78fa      	ldrb	r2, [r7, #3]
 800fcdc:	4611      	mov	r1, r2
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7f7 f8e4 	bl	8006eac <HAL_PCD_SetAddress>
 800fce4:	4603      	mov	r3, r0
 800fce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fce8:	7bfb      	ldrb	r3, [r7, #15]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 f874 	bl	800fdd8 <USBD_Get_USB_Status>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	b086      	sub	sp, #24
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	60f8      	str	r0, [r7, #12]
 800fd06:	607a      	str	r2, [r7, #4]
 800fd08:	603b      	str	r3, [r7, #0]
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd12:	2300      	movs	r3, #0
 800fd14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd1c:	7af9      	ldrb	r1, [r7, #11]
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	f7f7 f9fd 	bl	8007120 <HAL_PCD_EP_Transmit>
 800fd26:	4603      	mov	r3, r0
 800fd28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd2a:	7dfb      	ldrb	r3, [r7, #23]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f000 f853 	bl	800fdd8 <USBD_Get_USB_Status>
 800fd32:	4603      	mov	r3, r0
 800fd34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd36:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3718      	adds	r7, #24
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	607a      	str	r2, [r7, #4]
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd54:	2300      	movs	r3, #0
 800fd56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd5e:	7af9      	ldrb	r1, [r7, #11]
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	f7f7 f979 	bl	800705a <HAL_PCD_EP_Receive>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd6c:	7dfb      	ldrb	r3, [r7, #23]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f000 f832 	bl	800fdd8 <USBD_Get_USB_Status>
 800fd74:	4603      	mov	r3, r0
 800fd76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd78:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b082      	sub	sp, #8
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd94:	78fa      	ldrb	r2, [r7, #3]
 800fd96:	4611      	mov	r1, r2
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7f7 f9a9 	bl	80070f0 <HAL_PCD_EP_GetRxCount>
 800fd9e:	4603      	mov	r3, r0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fdb0:	4b03      	ldr	r3, [pc, #12]	; (800fdc0 <USBD_static_malloc+0x18>)
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	370c      	adds	r7, #12
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	20002078 	.word	0x20002078

0800fdc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]

}
 800fdcc:	bf00      	nop
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	4603      	mov	r3, r0
 800fde0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fde6:	79fb      	ldrb	r3, [r7, #7]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d817      	bhi.n	800fe1c <USBD_Get_USB_Status+0x44>
 800fdec:	a201      	add	r2, pc, #4	; (adr r2, 800fdf4 <USBD_Get_USB_Status+0x1c>)
 800fdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf2:	bf00      	nop
 800fdf4:	0800fe05 	.word	0x0800fe05
 800fdf8:	0800fe0b 	.word	0x0800fe0b
 800fdfc:	0800fe11 	.word	0x0800fe11
 800fe00:	0800fe17 	.word	0x0800fe17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	73fb      	strb	r3, [r7, #15]
    break;
 800fe08:	e00b      	b.n	800fe22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe0a:	2303      	movs	r3, #3
 800fe0c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe0e:	e008      	b.n	800fe22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe10:	2301      	movs	r3, #1
 800fe12:	73fb      	strb	r3, [r7, #15]
    break;
 800fe14:	e005      	b.n	800fe22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe16:	2303      	movs	r3, #3
 800fe18:	73fb      	strb	r3, [r7, #15]
    break;
 800fe1a:	e002      	b.n	800fe22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe1c:	2303      	movs	r3, #3
 800fe1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe20:	bf00      	nop
  }
  return usb_status;
 800fe22:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3714      	adds	r7, #20
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <malloc>:
 800fe30:	4b02      	ldr	r3, [pc, #8]	; (800fe3c <malloc+0xc>)
 800fe32:	4601      	mov	r1, r0
 800fe34:	6818      	ldr	r0, [r3, #0]
 800fe36:	f000 b82b 	b.w	800fe90 <_malloc_r>
 800fe3a:	bf00      	nop
 800fe3c:	2000017c 	.word	0x2000017c

0800fe40 <free>:
 800fe40:	4b02      	ldr	r3, [pc, #8]	; (800fe4c <free+0xc>)
 800fe42:	4601      	mov	r1, r0
 800fe44:	6818      	ldr	r0, [r3, #0]
 800fe46:	f001 bd4d 	b.w	80118e4 <_free_r>
 800fe4a:	bf00      	nop
 800fe4c:	2000017c 	.word	0x2000017c

0800fe50 <sbrk_aligned>:
 800fe50:	b570      	push	{r4, r5, r6, lr}
 800fe52:	4e0e      	ldr	r6, [pc, #56]	; (800fe8c <sbrk_aligned+0x3c>)
 800fe54:	460c      	mov	r4, r1
 800fe56:	6831      	ldr	r1, [r6, #0]
 800fe58:	4605      	mov	r5, r0
 800fe5a:	b911      	cbnz	r1, 800fe62 <sbrk_aligned+0x12>
 800fe5c:	f000 fe6c 	bl	8010b38 <_sbrk_r>
 800fe60:	6030      	str	r0, [r6, #0]
 800fe62:	4621      	mov	r1, r4
 800fe64:	4628      	mov	r0, r5
 800fe66:	f000 fe67 	bl	8010b38 <_sbrk_r>
 800fe6a:	1c43      	adds	r3, r0, #1
 800fe6c:	d00a      	beq.n	800fe84 <sbrk_aligned+0x34>
 800fe6e:	1cc4      	adds	r4, r0, #3
 800fe70:	f024 0403 	bic.w	r4, r4, #3
 800fe74:	42a0      	cmp	r0, r4
 800fe76:	d007      	beq.n	800fe88 <sbrk_aligned+0x38>
 800fe78:	1a21      	subs	r1, r4, r0
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	f000 fe5c 	bl	8010b38 <_sbrk_r>
 800fe80:	3001      	adds	r0, #1
 800fe82:	d101      	bne.n	800fe88 <sbrk_aligned+0x38>
 800fe84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fe88:	4620      	mov	r0, r4
 800fe8a:	bd70      	pop	{r4, r5, r6, pc}
 800fe8c:	2000229c 	.word	0x2000229c

0800fe90 <_malloc_r>:
 800fe90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe94:	1ccd      	adds	r5, r1, #3
 800fe96:	f025 0503 	bic.w	r5, r5, #3
 800fe9a:	3508      	adds	r5, #8
 800fe9c:	2d0c      	cmp	r5, #12
 800fe9e:	bf38      	it	cc
 800fea0:	250c      	movcc	r5, #12
 800fea2:	2d00      	cmp	r5, #0
 800fea4:	4607      	mov	r7, r0
 800fea6:	db01      	blt.n	800feac <_malloc_r+0x1c>
 800fea8:	42a9      	cmp	r1, r5
 800feaa:	d905      	bls.n	800feb8 <_malloc_r+0x28>
 800feac:	230c      	movs	r3, #12
 800feae:	603b      	str	r3, [r7, #0]
 800feb0:	2600      	movs	r6, #0
 800feb2:	4630      	mov	r0, r6
 800feb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800feb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ff8c <_malloc_r+0xfc>
 800febc:	f000 f868 	bl	800ff90 <__malloc_lock>
 800fec0:	f8d8 3000 	ldr.w	r3, [r8]
 800fec4:	461c      	mov	r4, r3
 800fec6:	bb5c      	cbnz	r4, 800ff20 <_malloc_r+0x90>
 800fec8:	4629      	mov	r1, r5
 800feca:	4638      	mov	r0, r7
 800fecc:	f7ff ffc0 	bl	800fe50 <sbrk_aligned>
 800fed0:	1c43      	adds	r3, r0, #1
 800fed2:	4604      	mov	r4, r0
 800fed4:	d155      	bne.n	800ff82 <_malloc_r+0xf2>
 800fed6:	f8d8 4000 	ldr.w	r4, [r8]
 800feda:	4626      	mov	r6, r4
 800fedc:	2e00      	cmp	r6, #0
 800fede:	d145      	bne.n	800ff6c <_malloc_r+0xdc>
 800fee0:	2c00      	cmp	r4, #0
 800fee2:	d048      	beq.n	800ff76 <_malloc_r+0xe6>
 800fee4:	6823      	ldr	r3, [r4, #0]
 800fee6:	4631      	mov	r1, r6
 800fee8:	4638      	mov	r0, r7
 800feea:	eb04 0903 	add.w	r9, r4, r3
 800feee:	f000 fe23 	bl	8010b38 <_sbrk_r>
 800fef2:	4581      	cmp	r9, r0
 800fef4:	d13f      	bne.n	800ff76 <_malloc_r+0xe6>
 800fef6:	6821      	ldr	r1, [r4, #0]
 800fef8:	1a6d      	subs	r5, r5, r1
 800fefa:	4629      	mov	r1, r5
 800fefc:	4638      	mov	r0, r7
 800fefe:	f7ff ffa7 	bl	800fe50 <sbrk_aligned>
 800ff02:	3001      	adds	r0, #1
 800ff04:	d037      	beq.n	800ff76 <_malloc_r+0xe6>
 800ff06:	6823      	ldr	r3, [r4, #0]
 800ff08:	442b      	add	r3, r5
 800ff0a:	6023      	str	r3, [r4, #0]
 800ff0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d038      	beq.n	800ff86 <_malloc_r+0xf6>
 800ff14:	685a      	ldr	r2, [r3, #4]
 800ff16:	42a2      	cmp	r2, r4
 800ff18:	d12b      	bne.n	800ff72 <_malloc_r+0xe2>
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	605a      	str	r2, [r3, #4]
 800ff1e:	e00f      	b.n	800ff40 <_malloc_r+0xb0>
 800ff20:	6822      	ldr	r2, [r4, #0]
 800ff22:	1b52      	subs	r2, r2, r5
 800ff24:	d41f      	bmi.n	800ff66 <_malloc_r+0xd6>
 800ff26:	2a0b      	cmp	r2, #11
 800ff28:	d917      	bls.n	800ff5a <_malloc_r+0xca>
 800ff2a:	1961      	adds	r1, r4, r5
 800ff2c:	42a3      	cmp	r3, r4
 800ff2e:	6025      	str	r5, [r4, #0]
 800ff30:	bf18      	it	ne
 800ff32:	6059      	strne	r1, [r3, #4]
 800ff34:	6863      	ldr	r3, [r4, #4]
 800ff36:	bf08      	it	eq
 800ff38:	f8c8 1000 	streq.w	r1, [r8]
 800ff3c:	5162      	str	r2, [r4, r5]
 800ff3e:	604b      	str	r3, [r1, #4]
 800ff40:	4638      	mov	r0, r7
 800ff42:	f104 060b 	add.w	r6, r4, #11
 800ff46:	f000 f829 	bl	800ff9c <__malloc_unlock>
 800ff4a:	f026 0607 	bic.w	r6, r6, #7
 800ff4e:	1d23      	adds	r3, r4, #4
 800ff50:	1af2      	subs	r2, r6, r3
 800ff52:	d0ae      	beq.n	800feb2 <_malloc_r+0x22>
 800ff54:	1b9b      	subs	r3, r3, r6
 800ff56:	50a3      	str	r3, [r4, r2]
 800ff58:	e7ab      	b.n	800feb2 <_malloc_r+0x22>
 800ff5a:	42a3      	cmp	r3, r4
 800ff5c:	6862      	ldr	r2, [r4, #4]
 800ff5e:	d1dd      	bne.n	800ff1c <_malloc_r+0x8c>
 800ff60:	f8c8 2000 	str.w	r2, [r8]
 800ff64:	e7ec      	b.n	800ff40 <_malloc_r+0xb0>
 800ff66:	4623      	mov	r3, r4
 800ff68:	6864      	ldr	r4, [r4, #4]
 800ff6a:	e7ac      	b.n	800fec6 <_malloc_r+0x36>
 800ff6c:	4634      	mov	r4, r6
 800ff6e:	6876      	ldr	r6, [r6, #4]
 800ff70:	e7b4      	b.n	800fedc <_malloc_r+0x4c>
 800ff72:	4613      	mov	r3, r2
 800ff74:	e7cc      	b.n	800ff10 <_malloc_r+0x80>
 800ff76:	230c      	movs	r3, #12
 800ff78:	603b      	str	r3, [r7, #0]
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	f000 f80e 	bl	800ff9c <__malloc_unlock>
 800ff80:	e797      	b.n	800feb2 <_malloc_r+0x22>
 800ff82:	6025      	str	r5, [r4, #0]
 800ff84:	e7dc      	b.n	800ff40 <_malloc_r+0xb0>
 800ff86:	605b      	str	r3, [r3, #4]
 800ff88:	deff      	udf	#255	; 0xff
 800ff8a:	bf00      	nop
 800ff8c:	20002298 	.word	0x20002298

0800ff90 <__malloc_lock>:
 800ff90:	4801      	ldr	r0, [pc, #4]	; (800ff98 <__malloc_lock+0x8>)
 800ff92:	f000 be1d 	b.w	8010bd0 <__retarget_lock_acquire_recursive>
 800ff96:	bf00      	nop
 800ff98:	200023e0 	.word	0x200023e0

0800ff9c <__malloc_unlock>:
 800ff9c:	4801      	ldr	r0, [pc, #4]	; (800ffa4 <__malloc_unlock+0x8>)
 800ff9e:	f000 be18 	b.w	8010bd2 <__retarget_lock_release_recursive>
 800ffa2:	bf00      	nop
 800ffa4:	200023e0 	.word	0x200023e0

0800ffa8 <__cvt>:
 800ffa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffac:	ec55 4b10 	vmov	r4, r5, d0
 800ffb0:	2d00      	cmp	r5, #0
 800ffb2:	460e      	mov	r6, r1
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	462b      	mov	r3, r5
 800ffb8:	bfbb      	ittet	lt
 800ffba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ffbe:	461d      	movlt	r5, r3
 800ffc0:	2300      	movge	r3, #0
 800ffc2:	232d      	movlt	r3, #45	; 0x2d
 800ffc4:	700b      	strb	r3, [r1, #0]
 800ffc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ffcc:	4691      	mov	r9, r2
 800ffce:	f023 0820 	bic.w	r8, r3, #32
 800ffd2:	bfbc      	itt	lt
 800ffd4:	4622      	movlt	r2, r4
 800ffd6:	4614      	movlt	r4, r2
 800ffd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffdc:	d005      	beq.n	800ffea <__cvt+0x42>
 800ffde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffe2:	d100      	bne.n	800ffe6 <__cvt+0x3e>
 800ffe4:	3601      	adds	r6, #1
 800ffe6:	2102      	movs	r1, #2
 800ffe8:	e000      	b.n	800ffec <__cvt+0x44>
 800ffea:	2103      	movs	r1, #3
 800ffec:	ab03      	add	r3, sp, #12
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	ab02      	add	r3, sp, #8
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	ec45 4b10 	vmov	d0, r4, r5
 800fff8:	4653      	mov	r3, sl
 800fffa:	4632      	mov	r2, r6
 800fffc:	f000 fe80 	bl	8010d00 <_dtoa_r>
 8010000:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010004:	4607      	mov	r7, r0
 8010006:	d102      	bne.n	801000e <__cvt+0x66>
 8010008:	f019 0f01 	tst.w	r9, #1
 801000c:	d022      	beq.n	8010054 <__cvt+0xac>
 801000e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010012:	eb07 0906 	add.w	r9, r7, r6
 8010016:	d110      	bne.n	801003a <__cvt+0x92>
 8010018:	783b      	ldrb	r3, [r7, #0]
 801001a:	2b30      	cmp	r3, #48	; 0x30
 801001c:	d10a      	bne.n	8010034 <__cvt+0x8c>
 801001e:	2200      	movs	r2, #0
 8010020:	2300      	movs	r3, #0
 8010022:	4620      	mov	r0, r4
 8010024:	4629      	mov	r1, r5
 8010026:	f7f0 fd57 	bl	8000ad8 <__aeabi_dcmpeq>
 801002a:	b918      	cbnz	r0, 8010034 <__cvt+0x8c>
 801002c:	f1c6 0601 	rsb	r6, r6, #1
 8010030:	f8ca 6000 	str.w	r6, [sl]
 8010034:	f8da 3000 	ldr.w	r3, [sl]
 8010038:	4499      	add	r9, r3
 801003a:	2200      	movs	r2, #0
 801003c:	2300      	movs	r3, #0
 801003e:	4620      	mov	r0, r4
 8010040:	4629      	mov	r1, r5
 8010042:	f7f0 fd49 	bl	8000ad8 <__aeabi_dcmpeq>
 8010046:	b108      	cbz	r0, 801004c <__cvt+0xa4>
 8010048:	f8cd 900c 	str.w	r9, [sp, #12]
 801004c:	2230      	movs	r2, #48	; 0x30
 801004e:	9b03      	ldr	r3, [sp, #12]
 8010050:	454b      	cmp	r3, r9
 8010052:	d307      	bcc.n	8010064 <__cvt+0xbc>
 8010054:	9b03      	ldr	r3, [sp, #12]
 8010056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010058:	1bdb      	subs	r3, r3, r7
 801005a:	4638      	mov	r0, r7
 801005c:	6013      	str	r3, [r2, #0]
 801005e:	b004      	add	sp, #16
 8010060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010064:	1c59      	adds	r1, r3, #1
 8010066:	9103      	str	r1, [sp, #12]
 8010068:	701a      	strb	r2, [r3, #0]
 801006a:	e7f0      	b.n	801004e <__cvt+0xa6>

0801006c <__exponent>:
 801006c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801006e:	4603      	mov	r3, r0
 8010070:	2900      	cmp	r1, #0
 8010072:	bfb8      	it	lt
 8010074:	4249      	neglt	r1, r1
 8010076:	f803 2b02 	strb.w	r2, [r3], #2
 801007a:	bfb4      	ite	lt
 801007c:	222d      	movlt	r2, #45	; 0x2d
 801007e:	222b      	movge	r2, #43	; 0x2b
 8010080:	2909      	cmp	r1, #9
 8010082:	7042      	strb	r2, [r0, #1]
 8010084:	dd2a      	ble.n	80100dc <__exponent+0x70>
 8010086:	f10d 0207 	add.w	r2, sp, #7
 801008a:	4617      	mov	r7, r2
 801008c:	260a      	movs	r6, #10
 801008e:	4694      	mov	ip, r2
 8010090:	fb91 f5f6 	sdiv	r5, r1, r6
 8010094:	fb06 1415 	mls	r4, r6, r5, r1
 8010098:	3430      	adds	r4, #48	; 0x30
 801009a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801009e:	460c      	mov	r4, r1
 80100a0:	2c63      	cmp	r4, #99	; 0x63
 80100a2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80100a6:	4629      	mov	r1, r5
 80100a8:	dcf1      	bgt.n	801008e <__exponent+0x22>
 80100aa:	3130      	adds	r1, #48	; 0x30
 80100ac:	f1ac 0402 	sub.w	r4, ip, #2
 80100b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80100b4:	1c41      	adds	r1, r0, #1
 80100b6:	4622      	mov	r2, r4
 80100b8:	42ba      	cmp	r2, r7
 80100ba:	d30a      	bcc.n	80100d2 <__exponent+0x66>
 80100bc:	f10d 0209 	add.w	r2, sp, #9
 80100c0:	eba2 020c 	sub.w	r2, r2, ip
 80100c4:	42bc      	cmp	r4, r7
 80100c6:	bf88      	it	hi
 80100c8:	2200      	movhi	r2, #0
 80100ca:	4413      	add	r3, r2
 80100cc:	1a18      	subs	r0, r3, r0
 80100ce:	b003      	add	sp, #12
 80100d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80100d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80100da:	e7ed      	b.n	80100b8 <__exponent+0x4c>
 80100dc:	2330      	movs	r3, #48	; 0x30
 80100de:	3130      	adds	r1, #48	; 0x30
 80100e0:	7083      	strb	r3, [r0, #2]
 80100e2:	70c1      	strb	r1, [r0, #3]
 80100e4:	1d03      	adds	r3, r0, #4
 80100e6:	e7f1      	b.n	80100cc <__exponent+0x60>

080100e8 <_printf_float>:
 80100e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ec:	ed2d 8b02 	vpush	{d8}
 80100f0:	b08d      	sub	sp, #52	; 0x34
 80100f2:	460c      	mov	r4, r1
 80100f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80100f8:	4616      	mov	r6, r2
 80100fa:	461f      	mov	r7, r3
 80100fc:	4605      	mov	r5, r0
 80100fe:	f000 fce3 	bl	8010ac8 <_localeconv_r>
 8010102:	f8d0 a000 	ldr.w	sl, [r0]
 8010106:	4650      	mov	r0, sl
 8010108:	f7f0 f8ba 	bl	8000280 <strlen>
 801010c:	2300      	movs	r3, #0
 801010e:	930a      	str	r3, [sp, #40]	; 0x28
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	9305      	str	r3, [sp, #20]
 8010114:	f8d8 3000 	ldr.w	r3, [r8]
 8010118:	f894 b018 	ldrb.w	fp, [r4, #24]
 801011c:	3307      	adds	r3, #7
 801011e:	f023 0307 	bic.w	r3, r3, #7
 8010122:	f103 0208 	add.w	r2, r3, #8
 8010126:	f8c8 2000 	str.w	r2, [r8]
 801012a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801012e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010132:	9307      	str	r3, [sp, #28]
 8010134:	f8cd 8018 	str.w	r8, [sp, #24]
 8010138:	ee08 0a10 	vmov	s16, r0
 801013c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010144:	4b9e      	ldr	r3, [pc, #632]	; (80103c0 <_printf_float+0x2d8>)
 8010146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801014a:	f7f0 fcf7 	bl	8000b3c <__aeabi_dcmpun>
 801014e:	bb88      	cbnz	r0, 80101b4 <_printf_float+0xcc>
 8010150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010154:	4b9a      	ldr	r3, [pc, #616]	; (80103c0 <_printf_float+0x2d8>)
 8010156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801015a:	f7f0 fcd1 	bl	8000b00 <__aeabi_dcmple>
 801015e:	bb48      	cbnz	r0, 80101b4 <_printf_float+0xcc>
 8010160:	2200      	movs	r2, #0
 8010162:	2300      	movs	r3, #0
 8010164:	4640      	mov	r0, r8
 8010166:	4649      	mov	r1, r9
 8010168:	f7f0 fcc0 	bl	8000aec <__aeabi_dcmplt>
 801016c:	b110      	cbz	r0, 8010174 <_printf_float+0x8c>
 801016e:	232d      	movs	r3, #45	; 0x2d
 8010170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010174:	4a93      	ldr	r2, [pc, #588]	; (80103c4 <_printf_float+0x2dc>)
 8010176:	4b94      	ldr	r3, [pc, #592]	; (80103c8 <_printf_float+0x2e0>)
 8010178:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801017c:	bf94      	ite	ls
 801017e:	4690      	movls	r8, r2
 8010180:	4698      	movhi	r8, r3
 8010182:	2303      	movs	r3, #3
 8010184:	6123      	str	r3, [r4, #16]
 8010186:	9b05      	ldr	r3, [sp, #20]
 8010188:	f023 0304 	bic.w	r3, r3, #4
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	f04f 0900 	mov.w	r9, #0
 8010192:	9700      	str	r7, [sp, #0]
 8010194:	4633      	mov	r3, r6
 8010196:	aa0b      	add	r2, sp, #44	; 0x2c
 8010198:	4621      	mov	r1, r4
 801019a:	4628      	mov	r0, r5
 801019c:	f000 f9da 	bl	8010554 <_printf_common>
 80101a0:	3001      	adds	r0, #1
 80101a2:	f040 8090 	bne.w	80102c6 <_printf_float+0x1de>
 80101a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101aa:	b00d      	add	sp, #52	; 0x34
 80101ac:	ecbd 8b02 	vpop	{d8}
 80101b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b4:	4642      	mov	r2, r8
 80101b6:	464b      	mov	r3, r9
 80101b8:	4640      	mov	r0, r8
 80101ba:	4649      	mov	r1, r9
 80101bc:	f7f0 fcbe 	bl	8000b3c <__aeabi_dcmpun>
 80101c0:	b140      	cbz	r0, 80101d4 <_printf_float+0xec>
 80101c2:	464b      	mov	r3, r9
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	bfbc      	itt	lt
 80101c8:	232d      	movlt	r3, #45	; 0x2d
 80101ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80101ce:	4a7f      	ldr	r2, [pc, #508]	; (80103cc <_printf_float+0x2e4>)
 80101d0:	4b7f      	ldr	r3, [pc, #508]	; (80103d0 <_printf_float+0x2e8>)
 80101d2:	e7d1      	b.n	8010178 <_printf_float+0x90>
 80101d4:	6863      	ldr	r3, [r4, #4]
 80101d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80101da:	9206      	str	r2, [sp, #24]
 80101dc:	1c5a      	adds	r2, r3, #1
 80101de:	d13f      	bne.n	8010260 <_printf_float+0x178>
 80101e0:	2306      	movs	r3, #6
 80101e2:	6063      	str	r3, [r4, #4]
 80101e4:	9b05      	ldr	r3, [sp, #20]
 80101e6:	6861      	ldr	r1, [r4, #4]
 80101e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80101ec:	2300      	movs	r3, #0
 80101ee:	9303      	str	r3, [sp, #12]
 80101f0:	ab0a      	add	r3, sp, #40	; 0x28
 80101f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80101f6:	ab09      	add	r3, sp, #36	; 0x24
 80101f8:	ec49 8b10 	vmov	d0, r8, r9
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	6022      	str	r2, [r4, #0]
 8010200:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010204:	4628      	mov	r0, r5
 8010206:	f7ff fecf 	bl	800ffa8 <__cvt>
 801020a:	9b06      	ldr	r3, [sp, #24]
 801020c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801020e:	2b47      	cmp	r3, #71	; 0x47
 8010210:	4680      	mov	r8, r0
 8010212:	d108      	bne.n	8010226 <_printf_float+0x13e>
 8010214:	1cc8      	adds	r0, r1, #3
 8010216:	db02      	blt.n	801021e <_printf_float+0x136>
 8010218:	6863      	ldr	r3, [r4, #4]
 801021a:	4299      	cmp	r1, r3
 801021c:	dd41      	ble.n	80102a2 <_printf_float+0x1ba>
 801021e:	f1ab 0302 	sub.w	r3, fp, #2
 8010222:	fa5f fb83 	uxtb.w	fp, r3
 8010226:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801022a:	d820      	bhi.n	801026e <_printf_float+0x186>
 801022c:	3901      	subs	r1, #1
 801022e:	465a      	mov	r2, fp
 8010230:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010234:	9109      	str	r1, [sp, #36]	; 0x24
 8010236:	f7ff ff19 	bl	801006c <__exponent>
 801023a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801023c:	1813      	adds	r3, r2, r0
 801023e:	2a01      	cmp	r2, #1
 8010240:	4681      	mov	r9, r0
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	dc02      	bgt.n	801024c <_printf_float+0x164>
 8010246:	6822      	ldr	r2, [r4, #0]
 8010248:	07d2      	lsls	r2, r2, #31
 801024a:	d501      	bpl.n	8010250 <_printf_float+0x168>
 801024c:	3301      	adds	r3, #1
 801024e:	6123      	str	r3, [r4, #16]
 8010250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010254:	2b00      	cmp	r3, #0
 8010256:	d09c      	beq.n	8010192 <_printf_float+0xaa>
 8010258:	232d      	movs	r3, #45	; 0x2d
 801025a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801025e:	e798      	b.n	8010192 <_printf_float+0xaa>
 8010260:	9a06      	ldr	r2, [sp, #24]
 8010262:	2a47      	cmp	r2, #71	; 0x47
 8010264:	d1be      	bne.n	80101e4 <_printf_float+0xfc>
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1bc      	bne.n	80101e4 <_printf_float+0xfc>
 801026a:	2301      	movs	r3, #1
 801026c:	e7b9      	b.n	80101e2 <_printf_float+0xfa>
 801026e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010272:	d118      	bne.n	80102a6 <_printf_float+0x1be>
 8010274:	2900      	cmp	r1, #0
 8010276:	6863      	ldr	r3, [r4, #4]
 8010278:	dd0b      	ble.n	8010292 <_printf_float+0x1aa>
 801027a:	6121      	str	r1, [r4, #16]
 801027c:	b913      	cbnz	r3, 8010284 <_printf_float+0x19c>
 801027e:	6822      	ldr	r2, [r4, #0]
 8010280:	07d0      	lsls	r0, r2, #31
 8010282:	d502      	bpl.n	801028a <_printf_float+0x1a2>
 8010284:	3301      	adds	r3, #1
 8010286:	440b      	add	r3, r1
 8010288:	6123      	str	r3, [r4, #16]
 801028a:	65a1      	str	r1, [r4, #88]	; 0x58
 801028c:	f04f 0900 	mov.w	r9, #0
 8010290:	e7de      	b.n	8010250 <_printf_float+0x168>
 8010292:	b913      	cbnz	r3, 801029a <_printf_float+0x1b2>
 8010294:	6822      	ldr	r2, [r4, #0]
 8010296:	07d2      	lsls	r2, r2, #31
 8010298:	d501      	bpl.n	801029e <_printf_float+0x1b6>
 801029a:	3302      	adds	r3, #2
 801029c:	e7f4      	b.n	8010288 <_printf_float+0x1a0>
 801029e:	2301      	movs	r3, #1
 80102a0:	e7f2      	b.n	8010288 <_printf_float+0x1a0>
 80102a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80102a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102a8:	4299      	cmp	r1, r3
 80102aa:	db05      	blt.n	80102b8 <_printf_float+0x1d0>
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	6121      	str	r1, [r4, #16]
 80102b0:	07d8      	lsls	r0, r3, #31
 80102b2:	d5ea      	bpl.n	801028a <_printf_float+0x1a2>
 80102b4:	1c4b      	adds	r3, r1, #1
 80102b6:	e7e7      	b.n	8010288 <_printf_float+0x1a0>
 80102b8:	2900      	cmp	r1, #0
 80102ba:	bfd4      	ite	le
 80102bc:	f1c1 0202 	rsble	r2, r1, #2
 80102c0:	2201      	movgt	r2, #1
 80102c2:	4413      	add	r3, r2
 80102c4:	e7e0      	b.n	8010288 <_printf_float+0x1a0>
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	055a      	lsls	r2, r3, #21
 80102ca:	d407      	bmi.n	80102dc <_printf_float+0x1f4>
 80102cc:	6923      	ldr	r3, [r4, #16]
 80102ce:	4642      	mov	r2, r8
 80102d0:	4631      	mov	r1, r6
 80102d2:	4628      	mov	r0, r5
 80102d4:	47b8      	blx	r7
 80102d6:	3001      	adds	r0, #1
 80102d8:	d12c      	bne.n	8010334 <_printf_float+0x24c>
 80102da:	e764      	b.n	80101a6 <_printf_float+0xbe>
 80102dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102e0:	f240 80e0 	bls.w	80104a4 <_printf_float+0x3bc>
 80102e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102e8:	2200      	movs	r2, #0
 80102ea:	2300      	movs	r3, #0
 80102ec:	f7f0 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d034      	beq.n	801035e <_printf_float+0x276>
 80102f4:	4a37      	ldr	r2, [pc, #220]	; (80103d4 <_printf_float+0x2ec>)
 80102f6:	2301      	movs	r3, #1
 80102f8:	4631      	mov	r1, r6
 80102fa:	4628      	mov	r0, r5
 80102fc:	47b8      	blx	r7
 80102fe:	3001      	adds	r0, #1
 8010300:	f43f af51 	beq.w	80101a6 <_printf_float+0xbe>
 8010304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010308:	429a      	cmp	r2, r3
 801030a:	db02      	blt.n	8010312 <_printf_float+0x22a>
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	07d8      	lsls	r0, r3, #31
 8010310:	d510      	bpl.n	8010334 <_printf_float+0x24c>
 8010312:	ee18 3a10 	vmov	r3, s16
 8010316:	4652      	mov	r2, sl
 8010318:	4631      	mov	r1, r6
 801031a:	4628      	mov	r0, r5
 801031c:	47b8      	blx	r7
 801031e:	3001      	adds	r0, #1
 8010320:	f43f af41 	beq.w	80101a6 <_printf_float+0xbe>
 8010324:	f04f 0800 	mov.w	r8, #0
 8010328:	f104 091a 	add.w	r9, r4, #26
 801032c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801032e:	3b01      	subs	r3, #1
 8010330:	4543      	cmp	r3, r8
 8010332:	dc09      	bgt.n	8010348 <_printf_float+0x260>
 8010334:	6823      	ldr	r3, [r4, #0]
 8010336:	079b      	lsls	r3, r3, #30
 8010338:	f100 8107 	bmi.w	801054a <_printf_float+0x462>
 801033c:	68e0      	ldr	r0, [r4, #12]
 801033e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010340:	4298      	cmp	r0, r3
 8010342:	bfb8      	it	lt
 8010344:	4618      	movlt	r0, r3
 8010346:	e730      	b.n	80101aa <_printf_float+0xc2>
 8010348:	2301      	movs	r3, #1
 801034a:	464a      	mov	r2, r9
 801034c:	4631      	mov	r1, r6
 801034e:	4628      	mov	r0, r5
 8010350:	47b8      	blx	r7
 8010352:	3001      	adds	r0, #1
 8010354:	f43f af27 	beq.w	80101a6 <_printf_float+0xbe>
 8010358:	f108 0801 	add.w	r8, r8, #1
 801035c:	e7e6      	b.n	801032c <_printf_float+0x244>
 801035e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010360:	2b00      	cmp	r3, #0
 8010362:	dc39      	bgt.n	80103d8 <_printf_float+0x2f0>
 8010364:	4a1b      	ldr	r2, [pc, #108]	; (80103d4 <_printf_float+0x2ec>)
 8010366:	2301      	movs	r3, #1
 8010368:	4631      	mov	r1, r6
 801036a:	4628      	mov	r0, r5
 801036c:	47b8      	blx	r7
 801036e:	3001      	adds	r0, #1
 8010370:	f43f af19 	beq.w	80101a6 <_printf_float+0xbe>
 8010374:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010378:	4313      	orrs	r3, r2
 801037a:	d102      	bne.n	8010382 <_printf_float+0x29a>
 801037c:	6823      	ldr	r3, [r4, #0]
 801037e:	07d9      	lsls	r1, r3, #31
 8010380:	d5d8      	bpl.n	8010334 <_printf_float+0x24c>
 8010382:	ee18 3a10 	vmov	r3, s16
 8010386:	4652      	mov	r2, sl
 8010388:	4631      	mov	r1, r6
 801038a:	4628      	mov	r0, r5
 801038c:	47b8      	blx	r7
 801038e:	3001      	adds	r0, #1
 8010390:	f43f af09 	beq.w	80101a6 <_printf_float+0xbe>
 8010394:	f04f 0900 	mov.w	r9, #0
 8010398:	f104 0a1a 	add.w	sl, r4, #26
 801039c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801039e:	425b      	negs	r3, r3
 80103a0:	454b      	cmp	r3, r9
 80103a2:	dc01      	bgt.n	80103a8 <_printf_float+0x2c0>
 80103a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103a6:	e792      	b.n	80102ce <_printf_float+0x1e6>
 80103a8:	2301      	movs	r3, #1
 80103aa:	4652      	mov	r2, sl
 80103ac:	4631      	mov	r1, r6
 80103ae:	4628      	mov	r0, r5
 80103b0:	47b8      	blx	r7
 80103b2:	3001      	adds	r0, #1
 80103b4:	f43f aef7 	beq.w	80101a6 <_printf_float+0xbe>
 80103b8:	f109 0901 	add.w	r9, r9, #1
 80103bc:	e7ee      	b.n	801039c <_printf_float+0x2b4>
 80103be:	bf00      	nop
 80103c0:	7fefffff 	.word	0x7fefffff
 80103c4:	080141b4 	.word	0x080141b4
 80103c8:	080141b8 	.word	0x080141b8
 80103cc:	080141bc 	.word	0x080141bc
 80103d0:	080141c0 	.word	0x080141c0
 80103d4:	080141c4 	.word	0x080141c4
 80103d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103dc:	429a      	cmp	r2, r3
 80103de:	bfa8      	it	ge
 80103e0:	461a      	movge	r2, r3
 80103e2:	2a00      	cmp	r2, #0
 80103e4:	4691      	mov	r9, r2
 80103e6:	dc37      	bgt.n	8010458 <_printf_float+0x370>
 80103e8:	f04f 0b00 	mov.w	fp, #0
 80103ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103f0:	f104 021a 	add.w	r2, r4, #26
 80103f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103f6:	9305      	str	r3, [sp, #20]
 80103f8:	eba3 0309 	sub.w	r3, r3, r9
 80103fc:	455b      	cmp	r3, fp
 80103fe:	dc33      	bgt.n	8010468 <_printf_float+0x380>
 8010400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010404:	429a      	cmp	r2, r3
 8010406:	db3b      	blt.n	8010480 <_printf_float+0x398>
 8010408:	6823      	ldr	r3, [r4, #0]
 801040a:	07da      	lsls	r2, r3, #31
 801040c:	d438      	bmi.n	8010480 <_printf_float+0x398>
 801040e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010412:	eba2 0903 	sub.w	r9, r2, r3
 8010416:	9b05      	ldr	r3, [sp, #20]
 8010418:	1ad2      	subs	r2, r2, r3
 801041a:	4591      	cmp	r9, r2
 801041c:	bfa8      	it	ge
 801041e:	4691      	movge	r9, r2
 8010420:	f1b9 0f00 	cmp.w	r9, #0
 8010424:	dc35      	bgt.n	8010492 <_printf_float+0x3aa>
 8010426:	f04f 0800 	mov.w	r8, #0
 801042a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801042e:	f104 0a1a 	add.w	sl, r4, #26
 8010432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010436:	1a9b      	subs	r3, r3, r2
 8010438:	eba3 0309 	sub.w	r3, r3, r9
 801043c:	4543      	cmp	r3, r8
 801043e:	f77f af79 	ble.w	8010334 <_printf_float+0x24c>
 8010442:	2301      	movs	r3, #1
 8010444:	4652      	mov	r2, sl
 8010446:	4631      	mov	r1, r6
 8010448:	4628      	mov	r0, r5
 801044a:	47b8      	blx	r7
 801044c:	3001      	adds	r0, #1
 801044e:	f43f aeaa 	beq.w	80101a6 <_printf_float+0xbe>
 8010452:	f108 0801 	add.w	r8, r8, #1
 8010456:	e7ec      	b.n	8010432 <_printf_float+0x34a>
 8010458:	4613      	mov	r3, r2
 801045a:	4631      	mov	r1, r6
 801045c:	4642      	mov	r2, r8
 801045e:	4628      	mov	r0, r5
 8010460:	47b8      	blx	r7
 8010462:	3001      	adds	r0, #1
 8010464:	d1c0      	bne.n	80103e8 <_printf_float+0x300>
 8010466:	e69e      	b.n	80101a6 <_printf_float+0xbe>
 8010468:	2301      	movs	r3, #1
 801046a:	4631      	mov	r1, r6
 801046c:	4628      	mov	r0, r5
 801046e:	9205      	str	r2, [sp, #20]
 8010470:	47b8      	blx	r7
 8010472:	3001      	adds	r0, #1
 8010474:	f43f ae97 	beq.w	80101a6 <_printf_float+0xbe>
 8010478:	9a05      	ldr	r2, [sp, #20]
 801047a:	f10b 0b01 	add.w	fp, fp, #1
 801047e:	e7b9      	b.n	80103f4 <_printf_float+0x30c>
 8010480:	ee18 3a10 	vmov	r3, s16
 8010484:	4652      	mov	r2, sl
 8010486:	4631      	mov	r1, r6
 8010488:	4628      	mov	r0, r5
 801048a:	47b8      	blx	r7
 801048c:	3001      	adds	r0, #1
 801048e:	d1be      	bne.n	801040e <_printf_float+0x326>
 8010490:	e689      	b.n	80101a6 <_printf_float+0xbe>
 8010492:	9a05      	ldr	r2, [sp, #20]
 8010494:	464b      	mov	r3, r9
 8010496:	4442      	add	r2, r8
 8010498:	4631      	mov	r1, r6
 801049a:	4628      	mov	r0, r5
 801049c:	47b8      	blx	r7
 801049e:	3001      	adds	r0, #1
 80104a0:	d1c1      	bne.n	8010426 <_printf_float+0x33e>
 80104a2:	e680      	b.n	80101a6 <_printf_float+0xbe>
 80104a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104a6:	2a01      	cmp	r2, #1
 80104a8:	dc01      	bgt.n	80104ae <_printf_float+0x3c6>
 80104aa:	07db      	lsls	r3, r3, #31
 80104ac:	d53a      	bpl.n	8010524 <_printf_float+0x43c>
 80104ae:	2301      	movs	r3, #1
 80104b0:	4642      	mov	r2, r8
 80104b2:	4631      	mov	r1, r6
 80104b4:	4628      	mov	r0, r5
 80104b6:	47b8      	blx	r7
 80104b8:	3001      	adds	r0, #1
 80104ba:	f43f ae74 	beq.w	80101a6 <_printf_float+0xbe>
 80104be:	ee18 3a10 	vmov	r3, s16
 80104c2:	4652      	mov	r2, sl
 80104c4:	4631      	mov	r1, r6
 80104c6:	4628      	mov	r0, r5
 80104c8:	47b8      	blx	r7
 80104ca:	3001      	adds	r0, #1
 80104cc:	f43f ae6b 	beq.w	80101a6 <_printf_float+0xbe>
 80104d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104d4:	2200      	movs	r2, #0
 80104d6:	2300      	movs	r3, #0
 80104d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80104dc:	f7f0 fafc 	bl	8000ad8 <__aeabi_dcmpeq>
 80104e0:	b9d8      	cbnz	r0, 801051a <_printf_float+0x432>
 80104e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80104e6:	f108 0201 	add.w	r2, r8, #1
 80104ea:	4631      	mov	r1, r6
 80104ec:	4628      	mov	r0, r5
 80104ee:	47b8      	blx	r7
 80104f0:	3001      	adds	r0, #1
 80104f2:	d10e      	bne.n	8010512 <_printf_float+0x42a>
 80104f4:	e657      	b.n	80101a6 <_printf_float+0xbe>
 80104f6:	2301      	movs	r3, #1
 80104f8:	4652      	mov	r2, sl
 80104fa:	4631      	mov	r1, r6
 80104fc:	4628      	mov	r0, r5
 80104fe:	47b8      	blx	r7
 8010500:	3001      	adds	r0, #1
 8010502:	f43f ae50 	beq.w	80101a6 <_printf_float+0xbe>
 8010506:	f108 0801 	add.w	r8, r8, #1
 801050a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801050c:	3b01      	subs	r3, #1
 801050e:	4543      	cmp	r3, r8
 8010510:	dcf1      	bgt.n	80104f6 <_printf_float+0x40e>
 8010512:	464b      	mov	r3, r9
 8010514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010518:	e6da      	b.n	80102d0 <_printf_float+0x1e8>
 801051a:	f04f 0800 	mov.w	r8, #0
 801051e:	f104 0a1a 	add.w	sl, r4, #26
 8010522:	e7f2      	b.n	801050a <_printf_float+0x422>
 8010524:	2301      	movs	r3, #1
 8010526:	4642      	mov	r2, r8
 8010528:	e7df      	b.n	80104ea <_printf_float+0x402>
 801052a:	2301      	movs	r3, #1
 801052c:	464a      	mov	r2, r9
 801052e:	4631      	mov	r1, r6
 8010530:	4628      	mov	r0, r5
 8010532:	47b8      	blx	r7
 8010534:	3001      	adds	r0, #1
 8010536:	f43f ae36 	beq.w	80101a6 <_printf_float+0xbe>
 801053a:	f108 0801 	add.w	r8, r8, #1
 801053e:	68e3      	ldr	r3, [r4, #12]
 8010540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010542:	1a5b      	subs	r3, r3, r1
 8010544:	4543      	cmp	r3, r8
 8010546:	dcf0      	bgt.n	801052a <_printf_float+0x442>
 8010548:	e6f8      	b.n	801033c <_printf_float+0x254>
 801054a:	f04f 0800 	mov.w	r8, #0
 801054e:	f104 0919 	add.w	r9, r4, #25
 8010552:	e7f4      	b.n	801053e <_printf_float+0x456>

08010554 <_printf_common>:
 8010554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010558:	4616      	mov	r6, r2
 801055a:	4699      	mov	r9, r3
 801055c:	688a      	ldr	r2, [r1, #8]
 801055e:	690b      	ldr	r3, [r1, #16]
 8010560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010564:	4293      	cmp	r3, r2
 8010566:	bfb8      	it	lt
 8010568:	4613      	movlt	r3, r2
 801056a:	6033      	str	r3, [r6, #0]
 801056c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010570:	4607      	mov	r7, r0
 8010572:	460c      	mov	r4, r1
 8010574:	b10a      	cbz	r2, 801057a <_printf_common+0x26>
 8010576:	3301      	adds	r3, #1
 8010578:	6033      	str	r3, [r6, #0]
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	0699      	lsls	r1, r3, #26
 801057e:	bf42      	ittt	mi
 8010580:	6833      	ldrmi	r3, [r6, #0]
 8010582:	3302      	addmi	r3, #2
 8010584:	6033      	strmi	r3, [r6, #0]
 8010586:	6825      	ldr	r5, [r4, #0]
 8010588:	f015 0506 	ands.w	r5, r5, #6
 801058c:	d106      	bne.n	801059c <_printf_common+0x48>
 801058e:	f104 0a19 	add.w	sl, r4, #25
 8010592:	68e3      	ldr	r3, [r4, #12]
 8010594:	6832      	ldr	r2, [r6, #0]
 8010596:	1a9b      	subs	r3, r3, r2
 8010598:	42ab      	cmp	r3, r5
 801059a:	dc26      	bgt.n	80105ea <_printf_common+0x96>
 801059c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80105a0:	1e13      	subs	r3, r2, #0
 80105a2:	6822      	ldr	r2, [r4, #0]
 80105a4:	bf18      	it	ne
 80105a6:	2301      	movne	r3, #1
 80105a8:	0692      	lsls	r2, r2, #26
 80105aa:	d42b      	bmi.n	8010604 <_printf_common+0xb0>
 80105ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105b0:	4649      	mov	r1, r9
 80105b2:	4638      	mov	r0, r7
 80105b4:	47c0      	blx	r8
 80105b6:	3001      	adds	r0, #1
 80105b8:	d01e      	beq.n	80105f8 <_printf_common+0xa4>
 80105ba:	6823      	ldr	r3, [r4, #0]
 80105bc:	6922      	ldr	r2, [r4, #16]
 80105be:	f003 0306 	and.w	r3, r3, #6
 80105c2:	2b04      	cmp	r3, #4
 80105c4:	bf02      	ittt	eq
 80105c6:	68e5      	ldreq	r5, [r4, #12]
 80105c8:	6833      	ldreq	r3, [r6, #0]
 80105ca:	1aed      	subeq	r5, r5, r3
 80105cc:	68a3      	ldr	r3, [r4, #8]
 80105ce:	bf0c      	ite	eq
 80105d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105d4:	2500      	movne	r5, #0
 80105d6:	4293      	cmp	r3, r2
 80105d8:	bfc4      	itt	gt
 80105da:	1a9b      	subgt	r3, r3, r2
 80105dc:	18ed      	addgt	r5, r5, r3
 80105de:	2600      	movs	r6, #0
 80105e0:	341a      	adds	r4, #26
 80105e2:	42b5      	cmp	r5, r6
 80105e4:	d11a      	bne.n	801061c <_printf_common+0xc8>
 80105e6:	2000      	movs	r0, #0
 80105e8:	e008      	b.n	80105fc <_printf_common+0xa8>
 80105ea:	2301      	movs	r3, #1
 80105ec:	4652      	mov	r2, sl
 80105ee:	4649      	mov	r1, r9
 80105f0:	4638      	mov	r0, r7
 80105f2:	47c0      	blx	r8
 80105f4:	3001      	adds	r0, #1
 80105f6:	d103      	bne.n	8010600 <_printf_common+0xac>
 80105f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010600:	3501      	adds	r5, #1
 8010602:	e7c6      	b.n	8010592 <_printf_common+0x3e>
 8010604:	18e1      	adds	r1, r4, r3
 8010606:	1c5a      	adds	r2, r3, #1
 8010608:	2030      	movs	r0, #48	; 0x30
 801060a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801060e:	4422      	add	r2, r4
 8010610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010618:	3302      	adds	r3, #2
 801061a:	e7c7      	b.n	80105ac <_printf_common+0x58>
 801061c:	2301      	movs	r3, #1
 801061e:	4622      	mov	r2, r4
 8010620:	4649      	mov	r1, r9
 8010622:	4638      	mov	r0, r7
 8010624:	47c0      	blx	r8
 8010626:	3001      	adds	r0, #1
 8010628:	d0e6      	beq.n	80105f8 <_printf_common+0xa4>
 801062a:	3601      	adds	r6, #1
 801062c:	e7d9      	b.n	80105e2 <_printf_common+0x8e>
	...

08010630 <_printf_i>:
 8010630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010634:	7e0f      	ldrb	r7, [r1, #24]
 8010636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010638:	2f78      	cmp	r7, #120	; 0x78
 801063a:	4691      	mov	r9, r2
 801063c:	4680      	mov	r8, r0
 801063e:	460c      	mov	r4, r1
 8010640:	469a      	mov	sl, r3
 8010642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010646:	d807      	bhi.n	8010658 <_printf_i+0x28>
 8010648:	2f62      	cmp	r7, #98	; 0x62
 801064a:	d80a      	bhi.n	8010662 <_printf_i+0x32>
 801064c:	2f00      	cmp	r7, #0
 801064e:	f000 80d4 	beq.w	80107fa <_printf_i+0x1ca>
 8010652:	2f58      	cmp	r7, #88	; 0x58
 8010654:	f000 80c0 	beq.w	80107d8 <_printf_i+0x1a8>
 8010658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801065c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010660:	e03a      	b.n	80106d8 <_printf_i+0xa8>
 8010662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010666:	2b15      	cmp	r3, #21
 8010668:	d8f6      	bhi.n	8010658 <_printf_i+0x28>
 801066a:	a101      	add	r1, pc, #4	; (adr r1, 8010670 <_printf_i+0x40>)
 801066c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010670:	080106c9 	.word	0x080106c9
 8010674:	080106dd 	.word	0x080106dd
 8010678:	08010659 	.word	0x08010659
 801067c:	08010659 	.word	0x08010659
 8010680:	08010659 	.word	0x08010659
 8010684:	08010659 	.word	0x08010659
 8010688:	080106dd 	.word	0x080106dd
 801068c:	08010659 	.word	0x08010659
 8010690:	08010659 	.word	0x08010659
 8010694:	08010659 	.word	0x08010659
 8010698:	08010659 	.word	0x08010659
 801069c:	080107e1 	.word	0x080107e1
 80106a0:	08010709 	.word	0x08010709
 80106a4:	0801079b 	.word	0x0801079b
 80106a8:	08010659 	.word	0x08010659
 80106ac:	08010659 	.word	0x08010659
 80106b0:	08010803 	.word	0x08010803
 80106b4:	08010659 	.word	0x08010659
 80106b8:	08010709 	.word	0x08010709
 80106bc:	08010659 	.word	0x08010659
 80106c0:	08010659 	.word	0x08010659
 80106c4:	080107a3 	.word	0x080107a3
 80106c8:	682b      	ldr	r3, [r5, #0]
 80106ca:	1d1a      	adds	r2, r3, #4
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	602a      	str	r2, [r5, #0]
 80106d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106d8:	2301      	movs	r3, #1
 80106da:	e09f      	b.n	801081c <_printf_i+0x1ec>
 80106dc:	6820      	ldr	r0, [r4, #0]
 80106de:	682b      	ldr	r3, [r5, #0]
 80106e0:	0607      	lsls	r7, r0, #24
 80106e2:	f103 0104 	add.w	r1, r3, #4
 80106e6:	6029      	str	r1, [r5, #0]
 80106e8:	d501      	bpl.n	80106ee <_printf_i+0xbe>
 80106ea:	681e      	ldr	r6, [r3, #0]
 80106ec:	e003      	b.n	80106f6 <_printf_i+0xc6>
 80106ee:	0646      	lsls	r6, r0, #25
 80106f0:	d5fb      	bpl.n	80106ea <_printf_i+0xba>
 80106f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80106f6:	2e00      	cmp	r6, #0
 80106f8:	da03      	bge.n	8010702 <_printf_i+0xd2>
 80106fa:	232d      	movs	r3, #45	; 0x2d
 80106fc:	4276      	negs	r6, r6
 80106fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010702:	485a      	ldr	r0, [pc, #360]	; (801086c <_printf_i+0x23c>)
 8010704:	230a      	movs	r3, #10
 8010706:	e012      	b.n	801072e <_printf_i+0xfe>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	6820      	ldr	r0, [r4, #0]
 801070c:	1d19      	adds	r1, r3, #4
 801070e:	6029      	str	r1, [r5, #0]
 8010710:	0605      	lsls	r5, r0, #24
 8010712:	d501      	bpl.n	8010718 <_printf_i+0xe8>
 8010714:	681e      	ldr	r6, [r3, #0]
 8010716:	e002      	b.n	801071e <_printf_i+0xee>
 8010718:	0641      	lsls	r1, r0, #25
 801071a:	d5fb      	bpl.n	8010714 <_printf_i+0xe4>
 801071c:	881e      	ldrh	r6, [r3, #0]
 801071e:	4853      	ldr	r0, [pc, #332]	; (801086c <_printf_i+0x23c>)
 8010720:	2f6f      	cmp	r7, #111	; 0x6f
 8010722:	bf0c      	ite	eq
 8010724:	2308      	moveq	r3, #8
 8010726:	230a      	movne	r3, #10
 8010728:	2100      	movs	r1, #0
 801072a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801072e:	6865      	ldr	r5, [r4, #4]
 8010730:	60a5      	str	r5, [r4, #8]
 8010732:	2d00      	cmp	r5, #0
 8010734:	bfa2      	ittt	ge
 8010736:	6821      	ldrge	r1, [r4, #0]
 8010738:	f021 0104 	bicge.w	r1, r1, #4
 801073c:	6021      	strge	r1, [r4, #0]
 801073e:	b90e      	cbnz	r6, 8010744 <_printf_i+0x114>
 8010740:	2d00      	cmp	r5, #0
 8010742:	d04b      	beq.n	80107dc <_printf_i+0x1ac>
 8010744:	4615      	mov	r5, r2
 8010746:	fbb6 f1f3 	udiv	r1, r6, r3
 801074a:	fb03 6711 	mls	r7, r3, r1, r6
 801074e:	5dc7      	ldrb	r7, [r0, r7]
 8010750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010754:	4637      	mov	r7, r6
 8010756:	42bb      	cmp	r3, r7
 8010758:	460e      	mov	r6, r1
 801075a:	d9f4      	bls.n	8010746 <_printf_i+0x116>
 801075c:	2b08      	cmp	r3, #8
 801075e:	d10b      	bne.n	8010778 <_printf_i+0x148>
 8010760:	6823      	ldr	r3, [r4, #0]
 8010762:	07de      	lsls	r6, r3, #31
 8010764:	d508      	bpl.n	8010778 <_printf_i+0x148>
 8010766:	6923      	ldr	r3, [r4, #16]
 8010768:	6861      	ldr	r1, [r4, #4]
 801076a:	4299      	cmp	r1, r3
 801076c:	bfde      	ittt	le
 801076e:	2330      	movle	r3, #48	; 0x30
 8010770:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010774:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010778:	1b52      	subs	r2, r2, r5
 801077a:	6122      	str	r2, [r4, #16]
 801077c:	f8cd a000 	str.w	sl, [sp]
 8010780:	464b      	mov	r3, r9
 8010782:	aa03      	add	r2, sp, #12
 8010784:	4621      	mov	r1, r4
 8010786:	4640      	mov	r0, r8
 8010788:	f7ff fee4 	bl	8010554 <_printf_common>
 801078c:	3001      	adds	r0, #1
 801078e:	d14a      	bne.n	8010826 <_printf_i+0x1f6>
 8010790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010794:	b004      	add	sp, #16
 8010796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	f043 0320 	orr.w	r3, r3, #32
 80107a0:	6023      	str	r3, [r4, #0]
 80107a2:	4833      	ldr	r0, [pc, #204]	; (8010870 <_printf_i+0x240>)
 80107a4:	2778      	movs	r7, #120	; 0x78
 80107a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	6829      	ldr	r1, [r5, #0]
 80107ae:	061f      	lsls	r7, r3, #24
 80107b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80107b4:	d402      	bmi.n	80107bc <_printf_i+0x18c>
 80107b6:	065f      	lsls	r7, r3, #25
 80107b8:	bf48      	it	mi
 80107ba:	b2b6      	uxthmi	r6, r6
 80107bc:	07df      	lsls	r7, r3, #31
 80107be:	bf48      	it	mi
 80107c0:	f043 0320 	orrmi.w	r3, r3, #32
 80107c4:	6029      	str	r1, [r5, #0]
 80107c6:	bf48      	it	mi
 80107c8:	6023      	strmi	r3, [r4, #0]
 80107ca:	b91e      	cbnz	r6, 80107d4 <_printf_i+0x1a4>
 80107cc:	6823      	ldr	r3, [r4, #0]
 80107ce:	f023 0320 	bic.w	r3, r3, #32
 80107d2:	6023      	str	r3, [r4, #0]
 80107d4:	2310      	movs	r3, #16
 80107d6:	e7a7      	b.n	8010728 <_printf_i+0xf8>
 80107d8:	4824      	ldr	r0, [pc, #144]	; (801086c <_printf_i+0x23c>)
 80107da:	e7e4      	b.n	80107a6 <_printf_i+0x176>
 80107dc:	4615      	mov	r5, r2
 80107de:	e7bd      	b.n	801075c <_printf_i+0x12c>
 80107e0:	682b      	ldr	r3, [r5, #0]
 80107e2:	6826      	ldr	r6, [r4, #0]
 80107e4:	6961      	ldr	r1, [r4, #20]
 80107e6:	1d18      	adds	r0, r3, #4
 80107e8:	6028      	str	r0, [r5, #0]
 80107ea:	0635      	lsls	r5, r6, #24
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	d501      	bpl.n	80107f4 <_printf_i+0x1c4>
 80107f0:	6019      	str	r1, [r3, #0]
 80107f2:	e002      	b.n	80107fa <_printf_i+0x1ca>
 80107f4:	0670      	lsls	r0, r6, #25
 80107f6:	d5fb      	bpl.n	80107f0 <_printf_i+0x1c0>
 80107f8:	8019      	strh	r1, [r3, #0]
 80107fa:	2300      	movs	r3, #0
 80107fc:	6123      	str	r3, [r4, #16]
 80107fe:	4615      	mov	r5, r2
 8010800:	e7bc      	b.n	801077c <_printf_i+0x14c>
 8010802:	682b      	ldr	r3, [r5, #0]
 8010804:	1d1a      	adds	r2, r3, #4
 8010806:	602a      	str	r2, [r5, #0]
 8010808:	681d      	ldr	r5, [r3, #0]
 801080a:	6862      	ldr	r2, [r4, #4]
 801080c:	2100      	movs	r1, #0
 801080e:	4628      	mov	r0, r5
 8010810:	f7ef fce6 	bl	80001e0 <memchr>
 8010814:	b108      	cbz	r0, 801081a <_printf_i+0x1ea>
 8010816:	1b40      	subs	r0, r0, r5
 8010818:	6060      	str	r0, [r4, #4]
 801081a:	6863      	ldr	r3, [r4, #4]
 801081c:	6123      	str	r3, [r4, #16]
 801081e:	2300      	movs	r3, #0
 8010820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010824:	e7aa      	b.n	801077c <_printf_i+0x14c>
 8010826:	6923      	ldr	r3, [r4, #16]
 8010828:	462a      	mov	r2, r5
 801082a:	4649      	mov	r1, r9
 801082c:	4640      	mov	r0, r8
 801082e:	47d0      	blx	sl
 8010830:	3001      	adds	r0, #1
 8010832:	d0ad      	beq.n	8010790 <_printf_i+0x160>
 8010834:	6823      	ldr	r3, [r4, #0]
 8010836:	079b      	lsls	r3, r3, #30
 8010838:	d413      	bmi.n	8010862 <_printf_i+0x232>
 801083a:	68e0      	ldr	r0, [r4, #12]
 801083c:	9b03      	ldr	r3, [sp, #12]
 801083e:	4298      	cmp	r0, r3
 8010840:	bfb8      	it	lt
 8010842:	4618      	movlt	r0, r3
 8010844:	e7a6      	b.n	8010794 <_printf_i+0x164>
 8010846:	2301      	movs	r3, #1
 8010848:	4632      	mov	r2, r6
 801084a:	4649      	mov	r1, r9
 801084c:	4640      	mov	r0, r8
 801084e:	47d0      	blx	sl
 8010850:	3001      	adds	r0, #1
 8010852:	d09d      	beq.n	8010790 <_printf_i+0x160>
 8010854:	3501      	adds	r5, #1
 8010856:	68e3      	ldr	r3, [r4, #12]
 8010858:	9903      	ldr	r1, [sp, #12]
 801085a:	1a5b      	subs	r3, r3, r1
 801085c:	42ab      	cmp	r3, r5
 801085e:	dcf2      	bgt.n	8010846 <_printf_i+0x216>
 8010860:	e7eb      	b.n	801083a <_printf_i+0x20a>
 8010862:	2500      	movs	r5, #0
 8010864:	f104 0619 	add.w	r6, r4, #25
 8010868:	e7f5      	b.n	8010856 <_printf_i+0x226>
 801086a:	bf00      	nop
 801086c:	080141c6 	.word	0x080141c6
 8010870:	080141d7 	.word	0x080141d7

08010874 <std>:
 8010874:	2300      	movs	r3, #0
 8010876:	b510      	push	{r4, lr}
 8010878:	4604      	mov	r4, r0
 801087a:	e9c0 3300 	strd	r3, r3, [r0]
 801087e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010882:	6083      	str	r3, [r0, #8]
 8010884:	8181      	strh	r1, [r0, #12]
 8010886:	6643      	str	r3, [r0, #100]	; 0x64
 8010888:	81c2      	strh	r2, [r0, #14]
 801088a:	6183      	str	r3, [r0, #24]
 801088c:	4619      	mov	r1, r3
 801088e:	2208      	movs	r2, #8
 8010890:	305c      	adds	r0, #92	; 0x5c
 8010892:	f000 f902 	bl	8010a9a <memset>
 8010896:	4b05      	ldr	r3, [pc, #20]	; (80108ac <std+0x38>)
 8010898:	6263      	str	r3, [r4, #36]	; 0x24
 801089a:	4b05      	ldr	r3, [pc, #20]	; (80108b0 <std+0x3c>)
 801089c:	62a3      	str	r3, [r4, #40]	; 0x28
 801089e:	4b05      	ldr	r3, [pc, #20]	; (80108b4 <std+0x40>)
 80108a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80108a2:	4b05      	ldr	r3, [pc, #20]	; (80108b8 <std+0x44>)
 80108a4:	6224      	str	r4, [r4, #32]
 80108a6:	6323      	str	r3, [r4, #48]	; 0x30
 80108a8:	bd10      	pop	{r4, pc}
 80108aa:	bf00      	nop
 80108ac:	08010a15 	.word	0x08010a15
 80108b0:	08010a37 	.word	0x08010a37
 80108b4:	08010a6f 	.word	0x08010a6f
 80108b8:	08010a93 	.word	0x08010a93

080108bc <stdio_exit_handler>:
 80108bc:	4a02      	ldr	r2, [pc, #8]	; (80108c8 <stdio_exit_handler+0xc>)
 80108be:	4903      	ldr	r1, [pc, #12]	; (80108cc <stdio_exit_handler+0x10>)
 80108c0:	4803      	ldr	r0, [pc, #12]	; (80108d0 <stdio_exit_handler+0x14>)
 80108c2:	f000 b869 	b.w	8010998 <_fwalk_sglue>
 80108c6:	bf00      	nop
 80108c8:	20000124 	.word	0x20000124
 80108cc:	08012431 	.word	0x08012431
 80108d0:	20000130 	.word	0x20000130

080108d4 <cleanup_stdio>:
 80108d4:	6841      	ldr	r1, [r0, #4]
 80108d6:	4b0c      	ldr	r3, [pc, #48]	; (8010908 <cleanup_stdio+0x34>)
 80108d8:	4299      	cmp	r1, r3
 80108da:	b510      	push	{r4, lr}
 80108dc:	4604      	mov	r4, r0
 80108de:	d001      	beq.n	80108e4 <cleanup_stdio+0x10>
 80108e0:	f001 fda6 	bl	8012430 <_fflush_r>
 80108e4:	68a1      	ldr	r1, [r4, #8]
 80108e6:	4b09      	ldr	r3, [pc, #36]	; (801090c <cleanup_stdio+0x38>)
 80108e8:	4299      	cmp	r1, r3
 80108ea:	d002      	beq.n	80108f2 <cleanup_stdio+0x1e>
 80108ec:	4620      	mov	r0, r4
 80108ee:	f001 fd9f 	bl	8012430 <_fflush_r>
 80108f2:	68e1      	ldr	r1, [r4, #12]
 80108f4:	4b06      	ldr	r3, [pc, #24]	; (8010910 <cleanup_stdio+0x3c>)
 80108f6:	4299      	cmp	r1, r3
 80108f8:	d004      	beq.n	8010904 <cleanup_stdio+0x30>
 80108fa:	4620      	mov	r0, r4
 80108fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010900:	f001 bd96 	b.w	8012430 <_fflush_r>
 8010904:	bd10      	pop	{r4, pc}
 8010906:	bf00      	nop
 8010908:	200022a0 	.word	0x200022a0
 801090c:	20002308 	.word	0x20002308
 8010910:	20002370 	.word	0x20002370

08010914 <global_stdio_init.part.0>:
 8010914:	b510      	push	{r4, lr}
 8010916:	4b0b      	ldr	r3, [pc, #44]	; (8010944 <global_stdio_init.part.0+0x30>)
 8010918:	4c0b      	ldr	r4, [pc, #44]	; (8010948 <global_stdio_init.part.0+0x34>)
 801091a:	4a0c      	ldr	r2, [pc, #48]	; (801094c <global_stdio_init.part.0+0x38>)
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	4620      	mov	r0, r4
 8010920:	2200      	movs	r2, #0
 8010922:	2104      	movs	r1, #4
 8010924:	f7ff ffa6 	bl	8010874 <std>
 8010928:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801092c:	2201      	movs	r2, #1
 801092e:	2109      	movs	r1, #9
 8010930:	f7ff ffa0 	bl	8010874 <std>
 8010934:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010938:	2202      	movs	r2, #2
 801093a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801093e:	2112      	movs	r1, #18
 8010940:	f7ff bf98 	b.w	8010874 <std>
 8010944:	200023d8 	.word	0x200023d8
 8010948:	200022a0 	.word	0x200022a0
 801094c:	080108bd 	.word	0x080108bd

08010950 <__sfp_lock_acquire>:
 8010950:	4801      	ldr	r0, [pc, #4]	; (8010958 <__sfp_lock_acquire+0x8>)
 8010952:	f000 b93d 	b.w	8010bd0 <__retarget_lock_acquire_recursive>
 8010956:	bf00      	nop
 8010958:	200023e1 	.word	0x200023e1

0801095c <__sfp_lock_release>:
 801095c:	4801      	ldr	r0, [pc, #4]	; (8010964 <__sfp_lock_release+0x8>)
 801095e:	f000 b938 	b.w	8010bd2 <__retarget_lock_release_recursive>
 8010962:	bf00      	nop
 8010964:	200023e1 	.word	0x200023e1

08010968 <__sinit>:
 8010968:	b510      	push	{r4, lr}
 801096a:	4604      	mov	r4, r0
 801096c:	f7ff fff0 	bl	8010950 <__sfp_lock_acquire>
 8010970:	6a23      	ldr	r3, [r4, #32]
 8010972:	b11b      	cbz	r3, 801097c <__sinit+0x14>
 8010974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010978:	f7ff bff0 	b.w	801095c <__sfp_lock_release>
 801097c:	4b04      	ldr	r3, [pc, #16]	; (8010990 <__sinit+0x28>)
 801097e:	6223      	str	r3, [r4, #32]
 8010980:	4b04      	ldr	r3, [pc, #16]	; (8010994 <__sinit+0x2c>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1f5      	bne.n	8010974 <__sinit+0xc>
 8010988:	f7ff ffc4 	bl	8010914 <global_stdio_init.part.0>
 801098c:	e7f2      	b.n	8010974 <__sinit+0xc>
 801098e:	bf00      	nop
 8010990:	080108d5 	.word	0x080108d5
 8010994:	200023d8 	.word	0x200023d8

08010998 <_fwalk_sglue>:
 8010998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801099c:	4607      	mov	r7, r0
 801099e:	4688      	mov	r8, r1
 80109a0:	4614      	mov	r4, r2
 80109a2:	2600      	movs	r6, #0
 80109a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109a8:	f1b9 0901 	subs.w	r9, r9, #1
 80109ac:	d505      	bpl.n	80109ba <_fwalk_sglue+0x22>
 80109ae:	6824      	ldr	r4, [r4, #0]
 80109b0:	2c00      	cmp	r4, #0
 80109b2:	d1f7      	bne.n	80109a4 <_fwalk_sglue+0xc>
 80109b4:	4630      	mov	r0, r6
 80109b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109ba:	89ab      	ldrh	r3, [r5, #12]
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d907      	bls.n	80109d0 <_fwalk_sglue+0x38>
 80109c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109c4:	3301      	adds	r3, #1
 80109c6:	d003      	beq.n	80109d0 <_fwalk_sglue+0x38>
 80109c8:	4629      	mov	r1, r5
 80109ca:	4638      	mov	r0, r7
 80109cc:	47c0      	blx	r8
 80109ce:	4306      	orrs	r6, r0
 80109d0:	3568      	adds	r5, #104	; 0x68
 80109d2:	e7e9      	b.n	80109a8 <_fwalk_sglue+0x10>

080109d4 <siprintf>:
 80109d4:	b40e      	push	{r1, r2, r3}
 80109d6:	b500      	push	{lr}
 80109d8:	b09c      	sub	sp, #112	; 0x70
 80109da:	ab1d      	add	r3, sp, #116	; 0x74
 80109dc:	9002      	str	r0, [sp, #8]
 80109de:	9006      	str	r0, [sp, #24]
 80109e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80109e4:	4809      	ldr	r0, [pc, #36]	; (8010a0c <siprintf+0x38>)
 80109e6:	9107      	str	r1, [sp, #28]
 80109e8:	9104      	str	r1, [sp, #16]
 80109ea:	4909      	ldr	r1, [pc, #36]	; (8010a10 <siprintf+0x3c>)
 80109ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80109f0:	9105      	str	r1, [sp, #20]
 80109f2:	6800      	ldr	r0, [r0, #0]
 80109f4:	9301      	str	r3, [sp, #4]
 80109f6:	a902      	add	r1, sp, #8
 80109f8:	f001 fb96 	bl	8012128 <_svfiprintf_r>
 80109fc:	9b02      	ldr	r3, [sp, #8]
 80109fe:	2200      	movs	r2, #0
 8010a00:	701a      	strb	r2, [r3, #0]
 8010a02:	b01c      	add	sp, #112	; 0x70
 8010a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a08:	b003      	add	sp, #12
 8010a0a:	4770      	bx	lr
 8010a0c:	2000017c 	.word	0x2000017c
 8010a10:	ffff0208 	.word	0xffff0208

08010a14 <__sread>:
 8010a14:	b510      	push	{r4, lr}
 8010a16:	460c      	mov	r4, r1
 8010a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a1c:	f000 f87a 	bl	8010b14 <_read_r>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	bfab      	itete	ge
 8010a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a26:	89a3      	ldrhlt	r3, [r4, #12]
 8010a28:	181b      	addge	r3, r3, r0
 8010a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a2e:	bfac      	ite	ge
 8010a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a32:	81a3      	strhlt	r3, [r4, #12]
 8010a34:	bd10      	pop	{r4, pc}

08010a36 <__swrite>:
 8010a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a3a:	461f      	mov	r7, r3
 8010a3c:	898b      	ldrh	r3, [r1, #12]
 8010a3e:	05db      	lsls	r3, r3, #23
 8010a40:	4605      	mov	r5, r0
 8010a42:	460c      	mov	r4, r1
 8010a44:	4616      	mov	r6, r2
 8010a46:	d505      	bpl.n	8010a54 <__swrite+0x1e>
 8010a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f000 f84e 	bl	8010af0 <_lseek_r>
 8010a54:	89a3      	ldrh	r3, [r4, #12]
 8010a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a5e:	81a3      	strh	r3, [r4, #12]
 8010a60:	4632      	mov	r2, r6
 8010a62:	463b      	mov	r3, r7
 8010a64:	4628      	mov	r0, r5
 8010a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a6a:	f000 b875 	b.w	8010b58 <_write_r>

08010a6e <__sseek>:
 8010a6e:	b510      	push	{r4, lr}
 8010a70:	460c      	mov	r4, r1
 8010a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a76:	f000 f83b 	bl	8010af0 <_lseek_r>
 8010a7a:	1c43      	adds	r3, r0, #1
 8010a7c:	89a3      	ldrh	r3, [r4, #12]
 8010a7e:	bf15      	itete	ne
 8010a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a8a:	81a3      	strheq	r3, [r4, #12]
 8010a8c:	bf18      	it	ne
 8010a8e:	81a3      	strhne	r3, [r4, #12]
 8010a90:	bd10      	pop	{r4, pc}

08010a92 <__sclose>:
 8010a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a96:	f000 b81b 	b.w	8010ad0 <_close_r>

08010a9a <memset>:
 8010a9a:	4402      	add	r2, r0
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d100      	bne.n	8010aa4 <memset+0xa>
 8010aa2:	4770      	bx	lr
 8010aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8010aa8:	e7f9      	b.n	8010a9e <memset+0x4>

08010aaa <strcat>:
 8010aaa:	b510      	push	{r4, lr}
 8010aac:	4602      	mov	r2, r0
 8010aae:	7814      	ldrb	r4, [r2, #0]
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	3201      	adds	r2, #1
 8010ab4:	2c00      	cmp	r4, #0
 8010ab6:	d1fa      	bne.n	8010aae <strcat+0x4>
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ac2:	2a00      	cmp	r2, #0
 8010ac4:	d1f9      	bne.n	8010aba <strcat+0x10>
 8010ac6:	bd10      	pop	{r4, pc}

08010ac8 <_localeconv_r>:
 8010ac8:	4800      	ldr	r0, [pc, #0]	; (8010acc <_localeconv_r+0x4>)
 8010aca:	4770      	bx	lr
 8010acc:	20000270 	.word	0x20000270

08010ad0 <_close_r>:
 8010ad0:	b538      	push	{r3, r4, r5, lr}
 8010ad2:	4d06      	ldr	r5, [pc, #24]	; (8010aec <_close_r+0x1c>)
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	4608      	mov	r0, r1
 8010ada:	602b      	str	r3, [r5, #0]
 8010adc:	f7f1 fc9f 	bl	800241e <_close>
 8010ae0:	1c43      	adds	r3, r0, #1
 8010ae2:	d102      	bne.n	8010aea <_close_r+0x1a>
 8010ae4:	682b      	ldr	r3, [r5, #0]
 8010ae6:	b103      	cbz	r3, 8010aea <_close_r+0x1a>
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	bd38      	pop	{r3, r4, r5, pc}
 8010aec:	200023dc 	.word	0x200023dc

08010af0 <_lseek_r>:
 8010af0:	b538      	push	{r3, r4, r5, lr}
 8010af2:	4d07      	ldr	r5, [pc, #28]	; (8010b10 <_lseek_r+0x20>)
 8010af4:	4604      	mov	r4, r0
 8010af6:	4608      	mov	r0, r1
 8010af8:	4611      	mov	r1, r2
 8010afa:	2200      	movs	r2, #0
 8010afc:	602a      	str	r2, [r5, #0]
 8010afe:	461a      	mov	r2, r3
 8010b00:	f7f1 fcb4 	bl	800246c <_lseek>
 8010b04:	1c43      	adds	r3, r0, #1
 8010b06:	d102      	bne.n	8010b0e <_lseek_r+0x1e>
 8010b08:	682b      	ldr	r3, [r5, #0]
 8010b0a:	b103      	cbz	r3, 8010b0e <_lseek_r+0x1e>
 8010b0c:	6023      	str	r3, [r4, #0]
 8010b0e:	bd38      	pop	{r3, r4, r5, pc}
 8010b10:	200023dc 	.word	0x200023dc

08010b14 <_read_r>:
 8010b14:	b538      	push	{r3, r4, r5, lr}
 8010b16:	4d07      	ldr	r5, [pc, #28]	; (8010b34 <_read_r+0x20>)
 8010b18:	4604      	mov	r4, r0
 8010b1a:	4608      	mov	r0, r1
 8010b1c:	4611      	mov	r1, r2
 8010b1e:	2200      	movs	r2, #0
 8010b20:	602a      	str	r2, [r5, #0]
 8010b22:	461a      	mov	r2, r3
 8010b24:	f7f1 fc42 	bl	80023ac <_read>
 8010b28:	1c43      	adds	r3, r0, #1
 8010b2a:	d102      	bne.n	8010b32 <_read_r+0x1e>
 8010b2c:	682b      	ldr	r3, [r5, #0]
 8010b2e:	b103      	cbz	r3, 8010b32 <_read_r+0x1e>
 8010b30:	6023      	str	r3, [r4, #0]
 8010b32:	bd38      	pop	{r3, r4, r5, pc}
 8010b34:	200023dc 	.word	0x200023dc

08010b38 <_sbrk_r>:
 8010b38:	b538      	push	{r3, r4, r5, lr}
 8010b3a:	4d06      	ldr	r5, [pc, #24]	; (8010b54 <_sbrk_r+0x1c>)
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	4604      	mov	r4, r0
 8010b40:	4608      	mov	r0, r1
 8010b42:	602b      	str	r3, [r5, #0]
 8010b44:	f7f1 fca0 	bl	8002488 <_sbrk>
 8010b48:	1c43      	adds	r3, r0, #1
 8010b4a:	d102      	bne.n	8010b52 <_sbrk_r+0x1a>
 8010b4c:	682b      	ldr	r3, [r5, #0]
 8010b4e:	b103      	cbz	r3, 8010b52 <_sbrk_r+0x1a>
 8010b50:	6023      	str	r3, [r4, #0]
 8010b52:	bd38      	pop	{r3, r4, r5, pc}
 8010b54:	200023dc 	.word	0x200023dc

08010b58 <_write_r>:
 8010b58:	b538      	push	{r3, r4, r5, lr}
 8010b5a:	4d07      	ldr	r5, [pc, #28]	; (8010b78 <_write_r+0x20>)
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	4608      	mov	r0, r1
 8010b60:	4611      	mov	r1, r2
 8010b62:	2200      	movs	r2, #0
 8010b64:	602a      	str	r2, [r5, #0]
 8010b66:	461a      	mov	r2, r3
 8010b68:	f7f1 fc3d 	bl	80023e6 <_write>
 8010b6c:	1c43      	adds	r3, r0, #1
 8010b6e:	d102      	bne.n	8010b76 <_write_r+0x1e>
 8010b70:	682b      	ldr	r3, [r5, #0]
 8010b72:	b103      	cbz	r3, 8010b76 <_write_r+0x1e>
 8010b74:	6023      	str	r3, [r4, #0]
 8010b76:	bd38      	pop	{r3, r4, r5, pc}
 8010b78:	200023dc 	.word	0x200023dc

08010b7c <__errno>:
 8010b7c:	4b01      	ldr	r3, [pc, #4]	; (8010b84 <__errno+0x8>)
 8010b7e:	6818      	ldr	r0, [r3, #0]
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	2000017c 	.word	0x2000017c

08010b88 <__libc_init_array>:
 8010b88:	b570      	push	{r4, r5, r6, lr}
 8010b8a:	4d0d      	ldr	r5, [pc, #52]	; (8010bc0 <__libc_init_array+0x38>)
 8010b8c:	4c0d      	ldr	r4, [pc, #52]	; (8010bc4 <__libc_init_array+0x3c>)
 8010b8e:	1b64      	subs	r4, r4, r5
 8010b90:	10a4      	asrs	r4, r4, #2
 8010b92:	2600      	movs	r6, #0
 8010b94:	42a6      	cmp	r6, r4
 8010b96:	d109      	bne.n	8010bac <__libc_init_array+0x24>
 8010b98:	4d0b      	ldr	r5, [pc, #44]	; (8010bc8 <__libc_init_array+0x40>)
 8010b9a:	4c0c      	ldr	r4, [pc, #48]	; (8010bcc <__libc_init_array+0x44>)
 8010b9c:	f003 f99e 	bl	8013edc <_init>
 8010ba0:	1b64      	subs	r4, r4, r5
 8010ba2:	10a4      	asrs	r4, r4, #2
 8010ba4:	2600      	movs	r6, #0
 8010ba6:	42a6      	cmp	r6, r4
 8010ba8:	d105      	bne.n	8010bb6 <__libc_init_array+0x2e>
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
 8010bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bb0:	4798      	blx	r3
 8010bb2:	3601      	adds	r6, #1
 8010bb4:	e7ee      	b.n	8010b94 <__libc_init_array+0xc>
 8010bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bba:	4798      	blx	r3
 8010bbc:	3601      	adds	r6, #1
 8010bbe:	e7f2      	b.n	8010ba6 <__libc_init_array+0x1e>
 8010bc0:	080145d0 	.word	0x080145d0
 8010bc4:	080145d0 	.word	0x080145d0
 8010bc8:	080145d0 	.word	0x080145d0
 8010bcc:	080145d4 	.word	0x080145d4

08010bd0 <__retarget_lock_acquire_recursive>:
 8010bd0:	4770      	bx	lr

08010bd2 <__retarget_lock_release_recursive>:
 8010bd2:	4770      	bx	lr

08010bd4 <memcpy>:
 8010bd4:	440a      	add	r2, r1
 8010bd6:	4291      	cmp	r1, r2
 8010bd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010bdc:	d100      	bne.n	8010be0 <memcpy+0xc>
 8010bde:	4770      	bx	lr
 8010be0:	b510      	push	{r4, lr}
 8010be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bea:	4291      	cmp	r1, r2
 8010bec:	d1f9      	bne.n	8010be2 <memcpy+0xe>
 8010bee:	bd10      	pop	{r4, pc}

08010bf0 <quorem>:
 8010bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	6903      	ldr	r3, [r0, #16]
 8010bf6:	690c      	ldr	r4, [r1, #16]
 8010bf8:	42a3      	cmp	r3, r4
 8010bfa:	4607      	mov	r7, r0
 8010bfc:	db7e      	blt.n	8010cfc <quorem+0x10c>
 8010bfe:	3c01      	subs	r4, #1
 8010c00:	f101 0814 	add.w	r8, r1, #20
 8010c04:	f100 0514 	add.w	r5, r0, #20
 8010c08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c0c:	9301      	str	r3, [sp, #4]
 8010c0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010c12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c16:	3301      	adds	r3, #1
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010c1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010c22:	fbb2 f6f3 	udiv	r6, r2, r3
 8010c26:	d331      	bcc.n	8010c8c <quorem+0x9c>
 8010c28:	f04f 0e00 	mov.w	lr, #0
 8010c2c:	4640      	mov	r0, r8
 8010c2e:	46ac      	mov	ip, r5
 8010c30:	46f2      	mov	sl, lr
 8010c32:	f850 2b04 	ldr.w	r2, [r0], #4
 8010c36:	b293      	uxth	r3, r2
 8010c38:	fb06 e303 	mla	r3, r6, r3, lr
 8010c3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010c40:	0c1a      	lsrs	r2, r3, #16
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	ebaa 0303 	sub.w	r3, sl, r3
 8010c48:	f8dc a000 	ldr.w	sl, [ip]
 8010c4c:	fa13 f38a 	uxtah	r3, r3, sl
 8010c50:	fb06 220e 	mla	r2, r6, lr, r2
 8010c54:	9300      	str	r3, [sp, #0]
 8010c56:	9b00      	ldr	r3, [sp, #0]
 8010c58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010c5c:	b292      	uxth	r2, r2
 8010c5e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010c62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c66:	f8bd 3000 	ldrh.w	r3, [sp]
 8010c6a:	4581      	cmp	r9, r0
 8010c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c70:	f84c 3b04 	str.w	r3, [ip], #4
 8010c74:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010c78:	d2db      	bcs.n	8010c32 <quorem+0x42>
 8010c7a:	f855 300b 	ldr.w	r3, [r5, fp]
 8010c7e:	b92b      	cbnz	r3, 8010c8c <quorem+0x9c>
 8010c80:	9b01      	ldr	r3, [sp, #4]
 8010c82:	3b04      	subs	r3, #4
 8010c84:	429d      	cmp	r5, r3
 8010c86:	461a      	mov	r2, r3
 8010c88:	d32c      	bcc.n	8010ce4 <quorem+0xf4>
 8010c8a:	613c      	str	r4, [r7, #16]
 8010c8c:	4638      	mov	r0, r7
 8010c8e:	f001 f8f1 	bl	8011e74 <__mcmp>
 8010c92:	2800      	cmp	r0, #0
 8010c94:	db22      	blt.n	8010cdc <quorem+0xec>
 8010c96:	3601      	adds	r6, #1
 8010c98:	4629      	mov	r1, r5
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010ca0:	f8d1 c000 	ldr.w	ip, [r1]
 8010ca4:	b293      	uxth	r3, r2
 8010ca6:	1ac3      	subs	r3, r0, r3
 8010ca8:	0c12      	lsrs	r2, r2, #16
 8010caa:	fa13 f38c 	uxtah	r3, r3, ip
 8010cae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010cb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010cb6:	b29b      	uxth	r3, r3
 8010cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cbc:	45c1      	cmp	r9, r8
 8010cbe:	f841 3b04 	str.w	r3, [r1], #4
 8010cc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010cc6:	d2e9      	bcs.n	8010c9c <quorem+0xac>
 8010cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cd0:	b922      	cbnz	r2, 8010cdc <quorem+0xec>
 8010cd2:	3b04      	subs	r3, #4
 8010cd4:	429d      	cmp	r5, r3
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	d30a      	bcc.n	8010cf0 <quorem+0x100>
 8010cda:	613c      	str	r4, [r7, #16]
 8010cdc:	4630      	mov	r0, r6
 8010cde:	b003      	add	sp, #12
 8010ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce4:	6812      	ldr	r2, [r2, #0]
 8010ce6:	3b04      	subs	r3, #4
 8010ce8:	2a00      	cmp	r2, #0
 8010cea:	d1ce      	bne.n	8010c8a <quorem+0x9a>
 8010cec:	3c01      	subs	r4, #1
 8010cee:	e7c9      	b.n	8010c84 <quorem+0x94>
 8010cf0:	6812      	ldr	r2, [r2, #0]
 8010cf2:	3b04      	subs	r3, #4
 8010cf4:	2a00      	cmp	r2, #0
 8010cf6:	d1f0      	bne.n	8010cda <quorem+0xea>
 8010cf8:	3c01      	subs	r4, #1
 8010cfa:	e7eb      	b.n	8010cd4 <quorem+0xe4>
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	e7ee      	b.n	8010cde <quorem+0xee>

08010d00 <_dtoa_r>:
 8010d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	ed2d 8b04 	vpush	{d8-d9}
 8010d08:	69c5      	ldr	r5, [r0, #28]
 8010d0a:	b093      	sub	sp, #76	; 0x4c
 8010d0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010d10:	ec57 6b10 	vmov	r6, r7, d0
 8010d14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010d18:	9107      	str	r1, [sp, #28]
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	920a      	str	r2, [sp, #40]	; 0x28
 8010d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8010d20:	b975      	cbnz	r5, 8010d40 <_dtoa_r+0x40>
 8010d22:	2010      	movs	r0, #16
 8010d24:	f7ff f884 	bl	800fe30 <malloc>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	61e0      	str	r0, [r4, #28]
 8010d2c:	b920      	cbnz	r0, 8010d38 <_dtoa_r+0x38>
 8010d2e:	4bae      	ldr	r3, [pc, #696]	; (8010fe8 <_dtoa_r+0x2e8>)
 8010d30:	21ef      	movs	r1, #239	; 0xef
 8010d32:	48ae      	ldr	r0, [pc, #696]	; (8010fec <_dtoa_r+0x2ec>)
 8010d34:	f001 fbbe 	bl	80124b4 <__assert_func>
 8010d38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010d3c:	6005      	str	r5, [r0, #0]
 8010d3e:	60c5      	str	r5, [r0, #12]
 8010d40:	69e3      	ldr	r3, [r4, #28]
 8010d42:	6819      	ldr	r1, [r3, #0]
 8010d44:	b151      	cbz	r1, 8010d5c <_dtoa_r+0x5c>
 8010d46:	685a      	ldr	r2, [r3, #4]
 8010d48:	604a      	str	r2, [r1, #4]
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	4093      	lsls	r3, r2
 8010d4e:	608b      	str	r3, [r1, #8]
 8010d50:	4620      	mov	r0, r4
 8010d52:	f000 fe53 	bl	80119fc <_Bfree>
 8010d56:	69e3      	ldr	r3, [r4, #28]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	601a      	str	r2, [r3, #0]
 8010d5c:	1e3b      	subs	r3, r7, #0
 8010d5e:	bfbb      	ittet	lt
 8010d60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010d64:	9303      	strlt	r3, [sp, #12]
 8010d66:	2300      	movge	r3, #0
 8010d68:	2201      	movlt	r2, #1
 8010d6a:	bfac      	ite	ge
 8010d6c:	f8c8 3000 	strge.w	r3, [r8]
 8010d70:	f8c8 2000 	strlt.w	r2, [r8]
 8010d74:	4b9e      	ldr	r3, [pc, #632]	; (8010ff0 <_dtoa_r+0x2f0>)
 8010d76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010d7a:	ea33 0308 	bics.w	r3, r3, r8
 8010d7e:	d11b      	bne.n	8010db8 <_dtoa_r+0xb8>
 8010d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d82:	f242 730f 	movw	r3, #9999	; 0x270f
 8010d86:	6013      	str	r3, [r2, #0]
 8010d88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010d8c:	4333      	orrs	r3, r6
 8010d8e:	f000 8593 	beq.w	80118b8 <_dtoa_r+0xbb8>
 8010d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d94:	b963      	cbnz	r3, 8010db0 <_dtoa_r+0xb0>
 8010d96:	4b97      	ldr	r3, [pc, #604]	; (8010ff4 <_dtoa_r+0x2f4>)
 8010d98:	e027      	b.n	8010dea <_dtoa_r+0xea>
 8010d9a:	4b97      	ldr	r3, [pc, #604]	; (8010ff8 <_dtoa_r+0x2f8>)
 8010d9c:	9300      	str	r3, [sp, #0]
 8010d9e:	3308      	adds	r3, #8
 8010da0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010da2:	6013      	str	r3, [r2, #0]
 8010da4:	9800      	ldr	r0, [sp, #0]
 8010da6:	b013      	add	sp, #76	; 0x4c
 8010da8:	ecbd 8b04 	vpop	{d8-d9}
 8010dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db0:	4b90      	ldr	r3, [pc, #576]	; (8010ff4 <_dtoa_r+0x2f4>)
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	3303      	adds	r3, #3
 8010db6:	e7f3      	b.n	8010da0 <_dtoa_r+0xa0>
 8010db8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	ec51 0b17 	vmov	r0, r1, d7
 8010dc2:	eeb0 8a47 	vmov.f32	s16, s14
 8010dc6:	eef0 8a67 	vmov.f32	s17, s15
 8010dca:	2300      	movs	r3, #0
 8010dcc:	f7ef fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8010dd0:	4681      	mov	r9, r0
 8010dd2:	b160      	cbz	r0, 8010dee <_dtoa_r+0xee>
 8010dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	6013      	str	r3, [r2, #0]
 8010dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	f000 8568 	beq.w	80118b2 <_dtoa_r+0xbb2>
 8010de2:	4b86      	ldr	r3, [pc, #536]	; (8010ffc <_dtoa_r+0x2fc>)
 8010de4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010de6:	6013      	str	r3, [r2, #0]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	e7da      	b.n	8010da4 <_dtoa_r+0xa4>
 8010dee:	aa10      	add	r2, sp, #64	; 0x40
 8010df0:	a911      	add	r1, sp, #68	; 0x44
 8010df2:	4620      	mov	r0, r4
 8010df4:	eeb0 0a48 	vmov.f32	s0, s16
 8010df8:	eef0 0a68 	vmov.f32	s1, s17
 8010dfc:	f001 f8e0 	bl	8011fc0 <__d2b>
 8010e00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010e04:	4682      	mov	sl, r0
 8010e06:	2d00      	cmp	r5, #0
 8010e08:	d07f      	beq.n	8010f0a <_dtoa_r+0x20a>
 8010e0a:	ee18 3a90 	vmov	r3, s17
 8010e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010e16:	ec51 0b18 	vmov	r0, r1, d8
 8010e1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010e22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010e26:	4619      	mov	r1, r3
 8010e28:	2200      	movs	r2, #0
 8010e2a:	4b75      	ldr	r3, [pc, #468]	; (8011000 <_dtoa_r+0x300>)
 8010e2c:	f7ef fa34 	bl	8000298 <__aeabi_dsub>
 8010e30:	a367      	add	r3, pc, #412	; (adr r3, 8010fd0 <_dtoa_r+0x2d0>)
 8010e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e36:	f7ef fbe7 	bl	8000608 <__aeabi_dmul>
 8010e3a:	a367      	add	r3, pc, #412	; (adr r3, 8010fd8 <_dtoa_r+0x2d8>)
 8010e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e40:	f7ef fa2c 	bl	800029c <__adddf3>
 8010e44:	4606      	mov	r6, r0
 8010e46:	4628      	mov	r0, r5
 8010e48:	460f      	mov	r7, r1
 8010e4a:	f7ef fb73 	bl	8000534 <__aeabi_i2d>
 8010e4e:	a364      	add	r3, pc, #400	; (adr r3, 8010fe0 <_dtoa_r+0x2e0>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	f7ef fbd8 	bl	8000608 <__aeabi_dmul>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	460b      	mov	r3, r1
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	4639      	mov	r1, r7
 8010e60:	f7ef fa1c 	bl	800029c <__adddf3>
 8010e64:	4606      	mov	r6, r0
 8010e66:	460f      	mov	r7, r1
 8010e68:	f7ef fe7e 	bl	8000b68 <__aeabi_d2iz>
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	4683      	mov	fp, r0
 8010e70:	2300      	movs	r3, #0
 8010e72:	4630      	mov	r0, r6
 8010e74:	4639      	mov	r1, r7
 8010e76:	f7ef fe39 	bl	8000aec <__aeabi_dcmplt>
 8010e7a:	b148      	cbz	r0, 8010e90 <_dtoa_r+0x190>
 8010e7c:	4658      	mov	r0, fp
 8010e7e:	f7ef fb59 	bl	8000534 <__aeabi_i2d>
 8010e82:	4632      	mov	r2, r6
 8010e84:	463b      	mov	r3, r7
 8010e86:	f7ef fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e8a:	b908      	cbnz	r0, 8010e90 <_dtoa_r+0x190>
 8010e8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010e90:	f1bb 0f16 	cmp.w	fp, #22
 8010e94:	d857      	bhi.n	8010f46 <_dtoa_r+0x246>
 8010e96:	4b5b      	ldr	r3, [pc, #364]	; (8011004 <_dtoa_r+0x304>)
 8010e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea0:	ec51 0b18 	vmov	r0, r1, d8
 8010ea4:	f7ef fe22 	bl	8000aec <__aeabi_dcmplt>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	d04e      	beq.n	8010f4a <_dtoa_r+0x24a>
 8010eac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8010eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010eb6:	1b5b      	subs	r3, r3, r5
 8010eb8:	1e5a      	subs	r2, r3, #1
 8010eba:	bf45      	ittet	mi
 8010ebc:	f1c3 0301 	rsbmi	r3, r3, #1
 8010ec0:	9305      	strmi	r3, [sp, #20]
 8010ec2:	2300      	movpl	r3, #0
 8010ec4:	2300      	movmi	r3, #0
 8010ec6:	9206      	str	r2, [sp, #24]
 8010ec8:	bf54      	ite	pl
 8010eca:	9305      	strpl	r3, [sp, #20]
 8010ecc:	9306      	strmi	r3, [sp, #24]
 8010ece:	f1bb 0f00 	cmp.w	fp, #0
 8010ed2:	db3c      	blt.n	8010f4e <_dtoa_r+0x24e>
 8010ed4:	9b06      	ldr	r3, [sp, #24]
 8010ed6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010eda:	445b      	add	r3, fp
 8010edc:	9306      	str	r3, [sp, #24]
 8010ede:	2300      	movs	r3, #0
 8010ee0:	9308      	str	r3, [sp, #32]
 8010ee2:	9b07      	ldr	r3, [sp, #28]
 8010ee4:	2b09      	cmp	r3, #9
 8010ee6:	d868      	bhi.n	8010fba <_dtoa_r+0x2ba>
 8010ee8:	2b05      	cmp	r3, #5
 8010eea:	bfc4      	itt	gt
 8010eec:	3b04      	subgt	r3, #4
 8010eee:	9307      	strgt	r3, [sp, #28]
 8010ef0:	9b07      	ldr	r3, [sp, #28]
 8010ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8010ef6:	bfcc      	ite	gt
 8010ef8:	2500      	movgt	r5, #0
 8010efa:	2501      	movle	r5, #1
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	f200 8085 	bhi.w	801100c <_dtoa_r+0x30c>
 8010f02:	e8df f003 	tbb	[pc, r3]
 8010f06:	3b2e      	.short	0x3b2e
 8010f08:	5839      	.short	0x5839
 8010f0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010f0e:	441d      	add	r5, r3
 8010f10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010f14:	2b20      	cmp	r3, #32
 8010f16:	bfc1      	itttt	gt
 8010f18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010f1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010f20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010f24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010f28:	bfd6      	itet	le
 8010f2a:	f1c3 0320 	rsble	r3, r3, #32
 8010f2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010f32:	fa06 f003 	lslle.w	r0, r6, r3
 8010f36:	f7ef faed 	bl	8000514 <__aeabi_ui2d>
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010f40:	3d01      	subs	r5, #1
 8010f42:	920e      	str	r2, [sp, #56]	; 0x38
 8010f44:	e76f      	b.n	8010e26 <_dtoa_r+0x126>
 8010f46:	2301      	movs	r3, #1
 8010f48:	e7b3      	b.n	8010eb2 <_dtoa_r+0x1b2>
 8010f4a:	900c      	str	r0, [sp, #48]	; 0x30
 8010f4c:	e7b2      	b.n	8010eb4 <_dtoa_r+0x1b4>
 8010f4e:	9b05      	ldr	r3, [sp, #20]
 8010f50:	eba3 030b 	sub.w	r3, r3, fp
 8010f54:	9305      	str	r3, [sp, #20]
 8010f56:	f1cb 0300 	rsb	r3, fp, #0
 8010f5a:	9308      	str	r3, [sp, #32]
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f60:	e7bf      	b.n	8010ee2 <_dtoa_r+0x1e2>
 8010f62:	2300      	movs	r3, #0
 8010f64:	9309      	str	r3, [sp, #36]	; 0x24
 8010f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	dc52      	bgt.n	8011012 <_dtoa_r+0x312>
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	9301      	str	r3, [sp, #4]
 8010f70:	9304      	str	r3, [sp, #16]
 8010f72:	461a      	mov	r2, r3
 8010f74:	920a      	str	r2, [sp, #40]	; 0x28
 8010f76:	e00b      	b.n	8010f90 <_dtoa_r+0x290>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e7f3      	b.n	8010f64 <_dtoa_r+0x264>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f82:	445b      	add	r3, fp
 8010f84:	9301      	str	r3, [sp, #4]
 8010f86:	3301      	adds	r3, #1
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	9304      	str	r3, [sp, #16]
 8010f8c:	bfb8      	it	lt
 8010f8e:	2301      	movlt	r3, #1
 8010f90:	69e0      	ldr	r0, [r4, #28]
 8010f92:	2100      	movs	r1, #0
 8010f94:	2204      	movs	r2, #4
 8010f96:	f102 0614 	add.w	r6, r2, #20
 8010f9a:	429e      	cmp	r6, r3
 8010f9c:	d93d      	bls.n	801101a <_dtoa_r+0x31a>
 8010f9e:	6041      	str	r1, [r0, #4]
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f000 fceb 	bl	801197c <_Balloc>
 8010fa6:	9000      	str	r0, [sp, #0]
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	d139      	bne.n	8011020 <_dtoa_r+0x320>
 8010fac:	4b16      	ldr	r3, [pc, #88]	; (8011008 <_dtoa_r+0x308>)
 8010fae:	4602      	mov	r2, r0
 8010fb0:	f240 11af 	movw	r1, #431	; 0x1af
 8010fb4:	e6bd      	b.n	8010d32 <_dtoa_r+0x32>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e7e1      	b.n	8010f7e <_dtoa_r+0x27e>
 8010fba:	2501      	movs	r5, #1
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	9307      	str	r3, [sp, #28]
 8010fc0:	9509      	str	r5, [sp, #36]	; 0x24
 8010fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fc6:	9301      	str	r3, [sp, #4]
 8010fc8:	9304      	str	r3, [sp, #16]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	2312      	movs	r3, #18
 8010fce:	e7d1      	b.n	8010f74 <_dtoa_r+0x274>
 8010fd0:	636f4361 	.word	0x636f4361
 8010fd4:	3fd287a7 	.word	0x3fd287a7
 8010fd8:	8b60c8b3 	.word	0x8b60c8b3
 8010fdc:	3fc68a28 	.word	0x3fc68a28
 8010fe0:	509f79fb 	.word	0x509f79fb
 8010fe4:	3fd34413 	.word	0x3fd34413
 8010fe8:	080141f5 	.word	0x080141f5
 8010fec:	0801420c 	.word	0x0801420c
 8010ff0:	7ff00000 	.word	0x7ff00000
 8010ff4:	080141f1 	.word	0x080141f1
 8010ff8:	080141e8 	.word	0x080141e8
 8010ffc:	080141c5 	.word	0x080141c5
 8011000:	3ff80000 	.word	0x3ff80000
 8011004:	080142f8 	.word	0x080142f8
 8011008:	08014264 	.word	0x08014264
 801100c:	2301      	movs	r3, #1
 801100e:	9309      	str	r3, [sp, #36]	; 0x24
 8011010:	e7d7      	b.n	8010fc2 <_dtoa_r+0x2c2>
 8011012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011014:	9301      	str	r3, [sp, #4]
 8011016:	9304      	str	r3, [sp, #16]
 8011018:	e7ba      	b.n	8010f90 <_dtoa_r+0x290>
 801101a:	3101      	adds	r1, #1
 801101c:	0052      	lsls	r2, r2, #1
 801101e:	e7ba      	b.n	8010f96 <_dtoa_r+0x296>
 8011020:	69e3      	ldr	r3, [r4, #28]
 8011022:	9a00      	ldr	r2, [sp, #0]
 8011024:	601a      	str	r2, [r3, #0]
 8011026:	9b04      	ldr	r3, [sp, #16]
 8011028:	2b0e      	cmp	r3, #14
 801102a:	f200 80a8 	bhi.w	801117e <_dtoa_r+0x47e>
 801102e:	2d00      	cmp	r5, #0
 8011030:	f000 80a5 	beq.w	801117e <_dtoa_r+0x47e>
 8011034:	f1bb 0f00 	cmp.w	fp, #0
 8011038:	dd38      	ble.n	80110ac <_dtoa_r+0x3ac>
 801103a:	4bc0      	ldr	r3, [pc, #768]	; (801133c <_dtoa_r+0x63c>)
 801103c:	f00b 020f 	and.w	r2, fp, #15
 8011040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011044:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011048:	e9d3 6700 	ldrd	r6, r7, [r3]
 801104c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011050:	d019      	beq.n	8011086 <_dtoa_r+0x386>
 8011052:	4bbb      	ldr	r3, [pc, #748]	; (8011340 <_dtoa_r+0x640>)
 8011054:	ec51 0b18 	vmov	r0, r1, d8
 8011058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801105c:	f7ef fbfe 	bl	800085c <__aeabi_ddiv>
 8011060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011064:	f008 080f 	and.w	r8, r8, #15
 8011068:	2503      	movs	r5, #3
 801106a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011340 <_dtoa_r+0x640>
 801106e:	f1b8 0f00 	cmp.w	r8, #0
 8011072:	d10a      	bne.n	801108a <_dtoa_r+0x38a>
 8011074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011078:	4632      	mov	r2, r6
 801107a:	463b      	mov	r3, r7
 801107c:	f7ef fbee 	bl	800085c <__aeabi_ddiv>
 8011080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011084:	e02b      	b.n	80110de <_dtoa_r+0x3de>
 8011086:	2502      	movs	r5, #2
 8011088:	e7ef      	b.n	801106a <_dtoa_r+0x36a>
 801108a:	f018 0f01 	tst.w	r8, #1
 801108e:	d008      	beq.n	80110a2 <_dtoa_r+0x3a2>
 8011090:	4630      	mov	r0, r6
 8011092:	4639      	mov	r1, r7
 8011094:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011098:	f7ef fab6 	bl	8000608 <__aeabi_dmul>
 801109c:	3501      	adds	r5, #1
 801109e:	4606      	mov	r6, r0
 80110a0:	460f      	mov	r7, r1
 80110a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80110a6:	f109 0908 	add.w	r9, r9, #8
 80110aa:	e7e0      	b.n	801106e <_dtoa_r+0x36e>
 80110ac:	f000 809f 	beq.w	80111ee <_dtoa_r+0x4ee>
 80110b0:	f1cb 0600 	rsb	r6, fp, #0
 80110b4:	4ba1      	ldr	r3, [pc, #644]	; (801133c <_dtoa_r+0x63c>)
 80110b6:	4fa2      	ldr	r7, [pc, #648]	; (8011340 <_dtoa_r+0x640>)
 80110b8:	f006 020f 	and.w	r2, r6, #15
 80110bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c4:	ec51 0b18 	vmov	r0, r1, d8
 80110c8:	f7ef fa9e 	bl	8000608 <__aeabi_dmul>
 80110cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110d0:	1136      	asrs	r6, r6, #4
 80110d2:	2300      	movs	r3, #0
 80110d4:	2502      	movs	r5, #2
 80110d6:	2e00      	cmp	r6, #0
 80110d8:	d17e      	bne.n	80111d8 <_dtoa_r+0x4d8>
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d1d0      	bne.n	8011080 <_dtoa_r+0x380>
 80110de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f000 8084 	beq.w	80111f2 <_dtoa_r+0x4f2>
 80110ea:	4b96      	ldr	r3, [pc, #600]	; (8011344 <_dtoa_r+0x644>)
 80110ec:	2200      	movs	r2, #0
 80110ee:	4640      	mov	r0, r8
 80110f0:	4649      	mov	r1, r9
 80110f2:	f7ef fcfb 	bl	8000aec <__aeabi_dcmplt>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d07b      	beq.n	80111f2 <_dtoa_r+0x4f2>
 80110fa:	9b04      	ldr	r3, [sp, #16]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d078      	beq.n	80111f2 <_dtoa_r+0x4f2>
 8011100:	9b01      	ldr	r3, [sp, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	dd39      	ble.n	801117a <_dtoa_r+0x47a>
 8011106:	4b90      	ldr	r3, [pc, #576]	; (8011348 <_dtoa_r+0x648>)
 8011108:	2200      	movs	r2, #0
 801110a:	4640      	mov	r0, r8
 801110c:	4649      	mov	r1, r9
 801110e:	f7ef fa7b 	bl	8000608 <__aeabi_dmul>
 8011112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011116:	9e01      	ldr	r6, [sp, #4]
 8011118:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801111c:	3501      	adds	r5, #1
 801111e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011122:	4628      	mov	r0, r5
 8011124:	f7ef fa06 	bl	8000534 <__aeabi_i2d>
 8011128:	4642      	mov	r2, r8
 801112a:	464b      	mov	r3, r9
 801112c:	f7ef fa6c 	bl	8000608 <__aeabi_dmul>
 8011130:	4b86      	ldr	r3, [pc, #536]	; (801134c <_dtoa_r+0x64c>)
 8011132:	2200      	movs	r2, #0
 8011134:	f7ef f8b2 	bl	800029c <__adddf3>
 8011138:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801113c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011140:	9303      	str	r3, [sp, #12]
 8011142:	2e00      	cmp	r6, #0
 8011144:	d158      	bne.n	80111f8 <_dtoa_r+0x4f8>
 8011146:	4b82      	ldr	r3, [pc, #520]	; (8011350 <_dtoa_r+0x650>)
 8011148:	2200      	movs	r2, #0
 801114a:	4640      	mov	r0, r8
 801114c:	4649      	mov	r1, r9
 801114e:	f7ef f8a3 	bl	8000298 <__aeabi_dsub>
 8011152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011156:	4680      	mov	r8, r0
 8011158:	4689      	mov	r9, r1
 801115a:	f7ef fce5 	bl	8000b28 <__aeabi_dcmpgt>
 801115e:	2800      	cmp	r0, #0
 8011160:	f040 8296 	bne.w	8011690 <_dtoa_r+0x990>
 8011164:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011168:	4640      	mov	r0, r8
 801116a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801116e:	4649      	mov	r1, r9
 8011170:	f7ef fcbc 	bl	8000aec <__aeabi_dcmplt>
 8011174:	2800      	cmp	r0, #0
 8011176:	f040 8289 	bne.w	801168c <_dtoa_r+0x98c>
 801117a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801117e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011180:	2b00      	cmp	r3, #0
 8011182:	f2c0 814e 	blt.w	8011422 <_dtoa_r+0x722>
 8011186:	f1bb 0f0e 	cmp.w	fp, #14
 801118a:	f300 814a 	bgt.w	8011422 <_dtoa_r+0x722>
 801118e:	4b6b      	ldr	r3, [pc, #428]	; (801133c <_dtoa_r+0x63c>)
 8011190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119a:	2b00      	cmp	r3, #0
 801119c:	f280 80dc 	bge.w	8011358 <_dtoa_r+0x658>
 80111a0:	9b04      	ldr	r3, [sp, #16]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f300 80d8 	bgt.w	8011358 <_dtoa_r+0x658>
 80111a8:	f040 826f 	bne.w	801168a <_dtoa_r+0x98a>
 80111ac:	4b68      	ldr	r3, [pc, #416]	; (8011350 <_dtoa_r+0x650>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	4640      	mov	r0, r8
 80111b2:	4649      	mov	r1, r9
 80111b4:	f7ef fa28 	bl	8000608 <__aeabi_dmul>
 80111b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111bc:	f7ef fcaa 	bl	8000b14 <__aeabi_dcmpge>
 80111c0:	9e04      	ldr	r6, [sp, #16]
 80111c2:	4637      	mov	r7, r6
 80111c4:	2800      	cmp	r0, #0
 80111c6:	f040 8245 	bne.w	8011654 <_dtoa_r+0x954>
 80111ca:	9d00      	ldr	r5, [sp, #0]
 80111cc:	2331      	movs	r3, #49	; 0x31
 80111ce:	f805 3b01 	strb.w	r3, [r5], #1
 80111d2:	f10b 0b01 	add.w	fp, fp, #1
 80111d6:	e241      	b.n	801165c <_dtoa_r+0x95c>
 80111d8:	07f2      	lsls	r2, r6, #31
 80111da:	d505      	bpl.n	80111e8 <_dtoa_r+0x4e8>
 80111dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111e0:	f7ef fa12 	bl	8000608 <__aeabi_dmul>
 80111e4:	3501      	adds	r5, #1
 80111e6:	2301      	movs	r3, #1
 80111e8:	1076      	asrs	r6, r6, #1
 80111ea:	3708      	adds	r7, #8
 80111ec:	e773      	b.n	80110d6 <_dtoa_r+0x3d6>
 80111ee:	2502      	movs	r5, #2
 80111f0:	e775      	b.n	80110de <_dtoa_r+0x3de>
 80111f2:	9e04      	ldr	r6, [sp, #16]
 80111f4:	465f      	mov	r7, fp
 80111f6:	e792      	b.n	801111e <_dtoa_r+0x41e>
 80111f8:	9900      	ldr	r1, [sp, #0]
 80111fa:	4b50      	ldr	r3, [pc, #320]	; (801133c <_dtoa_r+0x63c>)
 80111fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011200:	4431      	add	r1, r6
 8011202:	9102      	str	r1, [sp, #8]
 8011204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011206:	eeb0 9a47 	vmov.f32	s18, s14
 801120a:	eef0 9a67 	vmov.f32	s19, s15
 801120e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011216:	2900      	cmp	r1, #0
 8011218:	d044      	beq.n	80112a4 <_dtoa_r+0x5a4>
 801121a:	494e      	ldr	r1, [pc, #312]	; (8011354 <_dtoa_r+0x654>)
 801121c:	2000      	movs	r0, #0
 801121e:	f7ef fb1d 	bl	800085c <__aeabi_ddiv>
 8011222:	ec53 2b19 	vmov	r2, r3, d9
 8011226:	f7ef f837 	bl	8000298 <__aeabi_dsub>
 801122a:	9d00      	ldr	r5, [sp, #0]
 801122c:	ec41 0b19 	vmov	d9, r0, r1
 8011230:	4649      	mov	r1, r9
 8011232:	4640      	mov	r0, r8
 8011234:	f7ef fc98 	bl	8000b68 <__aeabi_d2iz>
 8011238:	4606      	mov	r6, r0
 801123a:	f7ef f97b 	bl	8000534 <__aeabi_i2d>
 801123e:	4602      	mov	r2, r0
 8011240:	460b      	mov	r3, r1
 8011242:	4640      	mov	r0, r8
 8011244:	4649      	mov	r1, r9
 8011246:	f7ef f827 	bl	8000298 <__aeabi_dsub>
 801124a:	3630      	adds	r6, #48	; 0x30
 801124c:	f805 6b01 	strb.w	r6, [r5], #1
 8011250:	ec53 2b19 	vmov	r2, r3, d9
 8011254:	4680      	mov	r8, r0
 8011256:	4689      	mov	r9, r1
 8011258:	f7ef fc48 	bl	8000aec <__aeabi_dcmplt>
 801125c:	2800      	cmp	r0, #0
 801125e:	d164      	bne.n	801132a <_dtoa_r+0x62a>
 8011260:	4642      	mov	r2, r8
 8011262:	464b      	mov	r3, r9
 8011264:	4937      	ldr	r1, [pc, #220]	; (8011344 <_dtoa_r+0x644>)
 8011266:	2000      	movs	r0, #0
 8011268:	f7ef f816 	bl	8000298 <__aeabi_dsub>
 801126c:	ec53 2b19 	vmov	r2, r3, d9
 8011270:	f7ef fc3c 	bl	8000aec <__aeabi_dcmplt>
 8011274:	2800      	cmp	r0, #0
 8011276:	f040 80b6 	bne.w	80113e6 <_dtoa_r+0x6e6>
 801127a:	9b02      	ldr	r3, [sp, #8]
 801127c:	429d      	cmp	r5, r3
 801127e:	f43f af7c 	beq.w	801117a <_dtoa_r+0x47a>
 8011282:	4b31      	ldr	r3, [pc, #196]	; (8011348 <_dtoa_r+0x648>)
 8011284:	ec51 0b19 	vmov	r0, r1, d9
 8011288:	2200      	movs	r2, #0
 801128a:	f7ef f9bd 	bl	8000608 <__aeabi_dmul>
 801128e:	4b2e      	ldr	r3, [pc, #184]	; (8011348 <_dtoa_r+0x648>)
 8011290:	ec41 0b19 	vmov	d9, r0, r1
 8011294:	2200      	movs	r2, #0
 8011296:	4640      	mov	r0, r8
 8011298:	4649      	mov	r1, r9
 801129a:	f7ef f9b5 	bl	8000608 <__aeabi_dmul>
 801129e:	4680      	mov	r8, r0
 80112a0:	4689      	mov	r9, r1
 80112a2:	e7c5      	b.n	8011230 <_dtoa_r+0x530>
 80112a4:	ec51 0b17 	vmov	r0, r1, d7
 80112a8:	f7ef f9ae 	bl	8000608 <__aeabi_dmul>
 80112ac:	9b02      	ldr	r3, [sp, #8]
 80112ae:	9d00      	ldr	r5, [sp, #0]
 80112b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80112b2:	ec41 0b19 	vmov	d9, r0, r1
 80112b6:	4649      	mov	r1, r9
 80112b8:	4640      	mov	r0, r8
 80112ba:	f7ef fc55 	bl	8000b68 <__aeabi_d2iz>
 80112be:	4606      	mov	r6, r0
 80112c0:	f7ef f938 	bl	8000534 <__aeabi_i2d>
 80112c4:	3630      	adds	r6, #48	; 0x30
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4640      	mov	r0, r8
 80112cc:	4649      	mov	r1, r9
 80112ce:	f7ee ffe3 	bl	8000298 <__aeabi_dsub>
 80112d2:	f805 6b01 	strb.w	r6, [r5], #1
 80112d6:	9b02      	ldr	r3, [sp, #8]
 80112d8:	429d      	cmp	r5, r3
 80112da:	4680      	mov	r8, r0
 80112dc:	4689      	mov	r9, r1
 80112de:	f04f 0200 	mov.w	r2, #0
 80112e2:	d124      	bne.n	801132e <_dtoa_r+0x62e>
 80112e4:	4b1b      	ldr	r3, [pc, #108]	; (8011354 <_dtoa_r+0x654>)
 80112e6:	ec51 0b19 	vmov	r0, r1, d9
 80112ea:	f7ee ffd7 	bl	800029c <__adddf3>
 80112ee:	4602      	mov	r2, r0
 80112f0:	460b      	mov	r3, r1
 80112f2:	4640      	mov	r0, r8
 80112f4:	4649      	mov	r1, r9
 80112f6:	f7ef fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d173      	bne.n	80113e6 <_dtoa_r+0x6e6>
 80112fe:	ec53 2b19 	vmov	r2, r3, d9
 8011302:	4914      	ldr	r1, [pc, #80]	; (8011354 <_dtoa_r+0x654>)
 8011304:	2000      	movs	r0, #0
 8011306:	f7ee ffc7 	bl	8000298 <__aeabi_dsub>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4640      	mov	r0, r8
 8011310:	4649      	mov	r1, r9
 8011312:	f7ef fbeb 	bl	8000aec <__aeabi_dcmplt>
 8011316:	2800      	cmp	r0, #0
 8011318:	f43f af2f 	beq.w	801117a <_dtoa_r+0x47a>
 801131c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801131e:	1e6b      	subs	r3, r5, #1
 8011320:	930f      	str	r3, [sp, #60]	; 0x3c
 8011322:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011326:	2b30      	cmp	r3, #48	; 0x30
 8011328:	d0f8      	beq.n	801131c <_dtoa_r+0x61c>
 801132a:	46bb      	mov	fp, r7
 801132c:	e04a      	b.n	80113c4 <_dtoa_r+0x6c4>
 801132e:	4b06      	ldr	r3, [pc, #24]	; (8011348 <_dtoa_r+0x648>)
 8011330:	f7ef f96a 	bl	8000608 <__aeabi_dmul>
 8011334:	4680      	mov	r8, r0
 8011336:	4689      	mov	r9, r1
 8011338:	e7bd      	b.n	80112b6 <_dtoa_r+0x5b6>
 801133a:	bf00      	nop
 801133c:	080142f8 	.word	0x080142f8
 8011340:	080142d0 	.word	0x080142d0
 8011344:	3ff00000 	.word	0x3ff00000
 8011348:	40240000 	.word	0x40240000
 801134c:	401c0000 	.word	0x401c0000
 8011350:	40140000 	.word	0x40140000
 8011354:	3fe00000 	.word	0x3fe00000
 8011358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801135c:	9d00      	ldr	r5, [sp, #0]
 801135e:	4642      	mov	r2, r8
 8011360:	464b      	mov	r3, r9
 8011362:	4630      	mov	r0, r6
 8011364:	4639      	mov	r1, r7
 8011366:	f7ef fa79 	bl	800085c <__aeabi_ddiv>
 801136a:	f7ef fbfd 	bl	8000b68 <__aeabi_d2iz>
 801136e:	9001      	str	r0, [sp, #4]
 8011370:	f7ef f8e0 	bl	8000534 <__aeabi_i2d>
 8011374:	4642      	mov	r2, r8
 8011376:	464b      	mov	r3, r9
 8011378:	f7ef f946 	bl	8000608 <__aeabi_dmul>
 801137c:	4602      	mov	r2, r0
 801137e:	460b      	mov	r3, r1
 8011380:	4630      	mov	r0, r6
 8011382:	4639      	mov	r1, r7
 8011384:	f7ee ff88 	bl	8000298 <__aeabi_dsub>
 8011388:	9e01      	ldr	r6, [sp, #4]
 801138a:	9f04      	ldr	r7, [sp, #16]
 801138c:	3630      	adds	r6, #48	; 0x30
 801138e:	f805 6b01 	strb.w	r6, [r5], #1
 8011392:	9e00      	ldr	r6, [sp, #0]
 8011394:	1bae      	subs	r6, r5, r6
 8011396:	42b7      	cmp	r7, r6
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	d134      	bne.n	8011408 <_dtoa_r+0x708>
 801139e:	f7ee ff7d 	bl	800029c <__adddf3>
 80113a2:	4642      	mov	r2, r8
 80113a4:	464b      	mov	r3, r9
 80113a6:	4606      	mov	r6, r0
 80113a8:	460f      	mov	r7, r1
 80113aa:	f7ef fbbd 	bl	8000b28 <__aeabi_dcmpgt>
 80113ae:	b9c8      	cbnz	r0, 80113e4 <_dtoa_r+0x6e4>
 80113b0:	4642      	mov	r2, r8
 80113b2:	464b      	mov	r3, r9
 80113b4:	4630      	mov	r0, r6
 80113b6:	4639      	mov	r1, r7
 80113b8:	f7ef fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80113bc:	b110      	cbz	r0, 80113c4 <_dtoa_r+0x6c4>
 80113be:	9b01      	ldr	r3, [sp, #4]
 80113c0:	07db      	lsls	r3, r3, #31
 80113c2:	d40f      	bmi.n	80113e4 <_dtoa_r+0x6e4>
 80113c4:	4651      	mov	r1, sl
 80113c6:	4620      	mov	r0, r4
 80113c8:	f000 fb18 	bl	80119fc <_Bfree>
 80113cc:	2300      	movs	r3, #0
 80113ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80113d0:	702b      	strb	r3, [r5, #0]
 80113d2:	f10b 0301 	add.w	r3, fp, #1
 80113d6:	6013      	str	r3, [r2, #0]
 80113d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113da:	2b00      	cmp	r3, #0
 80113dc:	f43f ace2 	beq.w	8010da4 <_dtoa_r+0xa4>
 80113e0:	601d      	str	r5, [r3, #0]
 80113e2:	e4df      	b.n	8010da4 <_dtoa_r+0xa4>
 80113e4:	465f      	mov	r7, fp
 80113e6:	462b      	mov	r3, r5
 80113e8:	461d      	mov	r5, r3
 80113ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113ee:	2a39      	cmp	r2, #57	; 0x39
 80113f0:	d106      	bne.n	8011400 <_dtoa_r+0x700>
 80113f2:	9a00      	ldr	r2, [sp, #0]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d1f7      	bne.n	80113e8 <_dtoa_r+0x6e8>
 80113f8:	9900      	ldr	r1, [sp, #0]
 80113fa:	2230      	movs	r2, #48	; 0x30
 80113fc:	3701      	adds	r7, #1
 80113fe:	700a      	strb	r2, [r1, #0]
 8011400:	781a      	ldrb	r2, [r3, #0]
 8011402:	3201      	adds	r2, #1
 8011404:	701a      	strb	r2, [r3, #0]
 8011406:	e790      	b.n	801132a <_dtoa_r+0x62a>
 8011408:	4ba3      	ldr	r3, [pc, #652]	; (8011698 <_dtoa_r+0x998>)
 801140a:	2200      	movs	r2, #0
 801140c:	f7ef f8fc 	bl	8000608 <__aeabi_dmul>
 8011410:	2200      	movs	r2, #0
 8011412:	2300      	movs	r3, #0
 8011414:	4606      	mov	r6, r0
 8011416:	460f      	mov	r7, r1
 8011418:	f7ef fb5e 	bl	8000ad8 <__aeabi_dcmpeq>
 801141c:	2800      	cmp	r0, #0
 801141e:	d09e      	beq.n	801135e <_dtoa_r+0x65e>
 8011420:	e7d0      	b.n	80113c4 <_dtoa_r+0x6c4>
 8011422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011424:	2a00      	cmp	r2, #0
 8011426:	f000 80ca 	beq.w	80115be <_dtoa_r+0x8be>
 801142a:	9a07      	ldr	r2, [sp, #28]
 801142c:	2a01      	cmp	r2, #1
 801142e:	f300 80ad 	bgt.w	801158c <_dtoa_r+0x88c>
 8011432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011434:	2a00      	cmp	r2, #0
 8011436:	f000 80a5 	beq.w	8011584 <_dtoa_r+0x884>
 801143a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801143e:	9e08      	ldr	r6, [sp, #32]
 8011440:	9d05      	ldr	r5, [sp, #20]
 8011442:	9a05      	ldr	r2, [sp, #20]
 8011444:	441a      	add	r2, r3
 8011446:	9205      	str	r2, [sp, #20]
 8011448:	9a06      	ldr	r2, [sp, #24]
 801144a:	2101      	movs	r1, #1
 801144c:	441a      	add	r2, r3
 801144e:	4620      	mov	r0, r4
 8011450:	9206      	str	r2, [sp, #24]
 8011452:	f000 fb89 	bl	8011b68 <__i2b>
 8011456:	4607      	mov	r7, r0
 8011458:	b165      	cbz	r5, 8011474 <_dtoa_r+0x774>
 801145a:	9b06      	ldr	r3, [sp, #24]
 801145c:	2b00      	cmp	r3, #0
 801145e:	dd09      	ble.n	8011474 <_dtoa_r+0x774>
 8011460:	42ab      	cmp	r3, r5
 8011462:	9a05      	ldr	r2, [sp, #20]
 8011464:	bfa8      	it	ge
 8011466:	462b      	movge	r3, r5
 8011468:	1ad2      	subs	r2, r2, r3
 801146a:	9205      	str	r2, [sp, #20]
 801146c:	9a06      	ldr	r2, [sp, #24]
 801146e:	1aed      	subs	r5, r5, r3
 8011470:	1ad3      	subs	r3, r2, r3
 8011472:	9306      	str	r3, [sp, #24]
 8011474:	9b08      	ldr	r3, [sp, #32]
 8011476:	b1f3      	cbz	r3, 80114b6 <_dtoa_r+0x7b6>
 8011478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 80a3 	beq.w	80115c6 <_dtoa_r+0x8c6>
 8011480:	2e00      	cmp	r6, #0
 8011482:	dd10      	ble.n	80114a6 <_dtoa_r+0x7a6>
 8011484:	4639      	mov	r1, r7
 8011486:	4632      	mov	r2, r6
 8011488:	4620      	mov	r0, r4
 801148a:	f000 fc2d 	bl	8011ce8 <__pow5mult>
 801148e:	4652      	mov	r2, sl
 8011490:	4601      	mov	r1, r0
 8011492:	4607      	mov	r7, r0
 8011494:	4620      	mov	r0, r4
 8011496:	f000 fb7d 	bl	8011b94 <__multiply>
 801149a:	4651      	mov	r1, sl
 801149c:	4680      	mov	r8, r0
 801149e:	4620      	mov	r0, r4
 80114a0:	f000 faac 	bl	80119fc <_Bfree>
 80114a4:	46c2      	mov	sl, r8
 80114a6:	9b08      	ldr	r3, [sp, #32]
 80114a8:	1b9a      	subs	r2, r3, r6
 80114aa:	d004      	beq.n	80114b6 <_dtoa_r+0x7b6>
 80114ac:	4651      	mov	r1, sl
 80114ae:	4620      	mov	r0, r4
 80114b0:	f000 fc1a 	bl	8011ce8 <__pow5mult>
 80114b4:	4682      	mov	sl, r0
 80114b6:	2101      	movs	r1, #1
 80114b8:	4620      	mov	r0, r4
 80114ba:	f000 fb55 	bl	8011b68 <__i2b>
 80114be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	4606      	mov	r6, r0
 80114c4:	f340 8081 	ble.w	80115ca <_dtoa_r+0x8ca>
 80114c8:	461a      	mov	r2, r3
 80114ca:	4601      	mov	r1, r0
 80114cc:	4620      	mov	r0, r4
 80114ce:	f000 fc0b 	bl	8011ce8 <__pow5mult>
 80114d2:	9b07      	ldr	r3, [sp, #28]
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	4606      	mov	r6, r0
 80114d8:	dd7a      	ble.n	80115d0 <_dtoa_r+0x8d0>
 80114da:	f04f 0800 	mov.w	r8, #0
 80114de:	6933      	ldr	r3, [r6, #16]
 80114e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80114e4:	6918      	ldr	r0, [r3, #16]
 80114e6:	f000 faf1 	bl	8011acc <__hi0bits>
 80114ea:	f1c0 0020 	rsb	r0, r0, #32
 80114ee:	9b06      	ldr	r3, [sp, #24]
 80114f0:	4418      	add	r0, r3
 80114f2:	f010 001f 	ands.w	r0, r0, #31
 80114f6:	f000 8094 	beq.w	8011622 <_dtoa_r+0x922>
 80114fa:	f1c0 0320 	rsb	r3, r0, #32
 80114fe:	2b04      	cmp	r3, #4
 8011500:	f340 8085 	ble.w	801160e <_dtoa_r+0x90e>
 8011504:	9b05      	ldr	r3, [sp, #20]
 8011506:	f1c0 001c 	rsb	r0, r0, #28
 801150a:	4403      	add	r3, r0
 801150c:	9305      	str	r3, [sp, #20]
 801150e:	9b06      	ldr	r3, [sp, #24]
 8011510:	4403      	add	r3, r0
 8011512:	4405      	add	r5, r0
 8011514:	9306      	str	r3, [sp, #24]
 8011516:	9b05      	ldr	r3, [sp, #20]
 8011518:	2b00      	cmp	r3, #0
 801151a:	dd05      	ble.n	8011528 <_dtoa_r+0x828>
 801151c:	4651      	mov	r1, sl
 801151e:	461a      	mov	r2, r3
 8011520:	4620      	mov	r0, r4
 8011522:	f000 fc3b 	bl	8011d9c <__lshift>
 8011526:	4682      	mov	sl, r0
 8011528:	9b06      	ldr	r3, [sp, #24]
 801152a:	2b00      	cmp	r3, #0
 801152c:	dd05      	ble.n	801153a <_dtoa_r+0x83a>
 801152e:	4631      	mov	r1, r6
 8011530:	461a      	mov	r2, r3
 8011532:	4620      	mov	r0, r4
 8011534:	f000 fc32 	bl	8011d9c <__lshift>
 8011538:	4606      	mov	r6, r0
 801153a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801153c:	2b00      	cmp	r3, #0
 801153e:	d072      	beq.n	8011626 <_dtoa_r+0x926>
 8011540:	4631      	mov	r1, r6
 8011542:	4650      	mov	r0, sl
 8011544:	f000 fc96 	bl	8011e74 <__mcmp>
 8011548:	2800      	cmp	r0, #0
 801154a:	da6c      	bge.n	8011626 <_dtoa_r+0x926>
 801154c:	2300      	movs	r3, #0
 801154e:	4651      	mov	r1, sl
 8011550:	220a      	movs	r2, #10
 8011552:	4620      	mov	r0, r4
 8011554:	f000 fa74 	bl	8011a40 <__multadd>
 8011558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801155a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801155e:	4682      	mov	sl, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	f000 81b0 	beq.w	80118c6 <_dtoa_r+0xbc6>
 8011566:	2300      	movs	r3, #0
 8011568:	4639      	mov	r1, r7
 801156a:	220a      	movs	r2, #10
 801156c:	4620      	mov	r0, r4
 801156e:	f000 fa67 	bl	8011a40 <__multadd>
 8011572:	9b01      	ldr	r3, [sp, #4]
 8011574:	2b00      	cmp	r3, #0
 8011576:	4607      	mov	r7, r0
 8011578:	f300 8096 	bgt.w	80116a8 <_dtoa_r+0x9a8>
 801157c:	9b07      	ldr	r3, [sp, #28]
 801157e:	2b02      	cmp	r3, #2
 8011580:	dc59      	bgt.n	8011636 <_dtoa_r+0x936>
 8011582:	e091      	b.n	80116a8 <_dtoa_r+0x9a8>
 8011584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801158a:	e758      	b.n	801143e <_dtoa_r+0x73e>
 801158c:	9b04      	ldr	r3, [sp, #16]
 801158e:	1e5e      	subs	r6, r3, #1
 8011590:	9b08      	ldr	r3, [sp, #32]
 8011592:	42b3      	cmp	r3, r6
 8011594:	bfbf      	itttt	lt
 8011596:	9b08      	ldrlt	r3, [sp, #32]
 8011598:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801159a:	9608      	strlt	r6, [sp, #32]
 801159c:	1af3      	sublt	r3, r6, r3
 801159e:	bfb4      	ite	lt
 80115a0:	18d2      	addlt	r2, r2, r3
 80115a2:	1b9e      	subge	r6, r3, r6
 80115a4:	9b04      	ldr	r3, [sp, #16]
 80115a6:	bfbc      	itt	lt
 80115a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80115aa:	2600      	movlt	r6, #0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	bfb7      	itett	lt
 80115b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80115b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80115b8:	1a9d      	sublt	r5, r3, r2
 80115ba:	2300      	movlt	r3, #0
 80115bc:	e741      	b.n	8011442 <_dtoa_r+0x742>
 80115be:	9e08      	ldr	r6, [sp, #32]
 80115c0:	9d05      	ldr	r5, [sp, #20]
 80115c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80115c4:	e748      	b.n	8011458 <_dtoa_r+0x758>
 80115c6:	9a08      	ldr	r2, [sp, #32]
 80115c8:	e770      	b.n	80114ac <_dtoa_r+0x7ac>
 80115ca:	9b07      	ldr	r3, [sp, #28]
 80115cc:	2b01      	cmp	r3, #1
 80115ce:	dc19      	bgt.n	8011604 <_dtoa_r+0x904>
 80115d0:	9b02      	ldr	r3, [sp, #8]
 80115d2:	b9bb      	cbnz	r3, 8011604 <_dtoa_r+0x904>
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115da:	b99b      	cbnz	r3, 8011604 <_dtoa_r+0x904>
 80115dc:	9b03      	ldr	r3, [sp, #12]
 80115de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80115e2:	0d1b      	lsrs	r3, r3, #20
 80115e4:	051b      	lsls	r3, r3, #20
 80115e6:	b183      	cbz	r3, 801160a <_dtoa_r+0x90a>
 80115e8:	9b05      	ldr	r3, [sp, #20]
 80115ea:	3301      	adds	r3, #1
 80115ec:	9305      	str	r3, [sp, #20]
 80115ee:	9b06      	ldr	r3, [sp, #24]
 80115f0:	3301      	adds	r3, #1
 80115f2:	9306      	str	r3, [sp, #24]
 80115f4:	f04f 0801 	mov.w	r8, #1
 80115f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	f47f af6f 	bne.w	80114de <_dtoa_r+0x7de>
 8011600:	2001      	movs	r0, #1
 8011602:	e774      	b.n	80114ee <_dtoa_r+0x7ee>
 8011604:	f04f 0800 	mov.w	r8, #0
 8011608:	e7f6      	b.n	80115f8 <_dtoa_r+0x8f8>
 801160a:	4698      	mov	r8, r3
 801160c:	e7f4      	b.n	80115f8 <_dtoa_r+0x8f8>
 801160e:	d082      	beq.n	8011516 <_dtoa_r+0x816>
 8011610:	9a05      	ldr	r2, [sp, #20]
 8011612:	331c      	adds	r3, #28
 8011614:	441a      	add	r2, r3
 8011616:	9205      	str	r2, [sp, #20]
 8011618:	9a06      	ldr	r2, [sp, #24]
 801161a:	441a      	add	r2, r3
 801161c:	441d      	add	r5, r3
 801161e:	9206      	str	r2, [sp, #24]
 8011620:	e779      	b.n	8011516 <_dtoa_r+0x816>
 8011622:	4603      	mov	r3, r0
 8011624:	e7f4      	b.n	8011610 <_dtoa_r+0x910>
 8011626:	9b04      	ldr	r3, [sp, #16]
 8011628:	2b00      	cmp	r3, #0
 801162a:	dc37      	bgt.n	801169c <_dtoa_r+0x99c>
 801162c:	9b07      	ldr	r3, [sp, #28]
 801162e:	2b02      	cmp	r3, #2
 8011630:	dd34      	ble.n	801169c <_dtoa_r+0x99c>
 8011632:	9b04      	ldr	r3, [sp, #16]
 8011634:	9301      	str	r3, [sp, #4]
 8011636:	9b01      	ldr	r3, [sp, #4]
 8011638:	b963      	cbnz	r3, 8011654 <_dtoa_r+0x954>
 801163a:	4631      	mov	r1, r6
 801163c:	2205      	movs	r2, #5
 801163e:	4620      	mov	r0, r4
 8011640:	f000 f9fe 	bl	8011a40 <__multadd>
 8011644:	4601      	mov	r1, r0
 8011646:	4606      	mov	r6, r0
 8011648:	4650      	mov	r0, sl
 801164a:	f000 fc13 	bl	8011e74 <__mcmp>
 801164e:	2800      	cmp	r0, #0
 8011650:	f73f adbb 	bgt.w	80111ca <_dtoa_r+0x4ca>
 8011654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011656:	9d00      	ldr	r5, [sp, #0]
 8011658:	ea6f 0b03 	mvn.w	fp, r3
 801165c:	f04f 0800 	mov.w	r8, #0
 8011660:	4631      	mov	r1, r6
 8011662:	4620      	mov	r0, r4
 8011664:	f000 f9ca 	bl	80119fc <_Bfree>
 8011668:	2f00      	cmp	r7, #0
 801166a:	f43f aeab 	beq.w	80113c4 <_dtoa_r+0x6c4>
 801166e:	f1b8 0f00 	cmp.w	r8, #0
 8011672:	d005      	beq.n	8011680 <_dtoa_r+0x980>
 8011674:	45b8      	cmp	r8, r7
 8011676:	d003      	beq.n	8011680 <_dtoa_r+0x980>
 8011678:	4641      	mov	r1, r8
 801167a:	4620      	mov	r0, r4
 801167c:	f000 f9be 	bl	80119fc <_Bfree>
 8011680:	4639      	mov	r1, r7
 8011682:	4620      	mov	r0, r4
 8011684:	f000 f9ba 	bl	80119fc <_Bfree>
 8011688:	e69c      	b.n	80113c4 <_dtoa_r+0x6c4>
 801168a:	2600      	movs	r6, #0
 801168c:	4637      	mov	r7, r6
 801168e:	e7e1      	b.n	8011654 <_dtoa_r+0x954>
 8011690:	46bb      	mov	fp, r7
 8011692:	4637      	mov	r7, r6
 8011694:	e599      	b.n	80111ca <_dtoa_r+0x4ca>
 8011696:	bf00      	nop
 8011698:	40240000 	.word	0x40240000
 801169c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f000 80c8 	beq.w	8011834 <_dtoa_r+0xb34>
 80116a4:	9b04      	ldr	r3, [sp, #16]
 80116a6:	9301      	str	r3, [sp, #4]
 80116a8:	2d00      	cmp	r5, #0
 80116aa:	dd05      	ble.n	80116b8 <_dtoa_r+0x9b8>
 80116ac:	4639      	mov	r1, r7
 80116ae:	462a      	mov	r2, r5
 80116b0:	4620      	mov	r0, r4
 80116b2:	f000 fb73 	bl	8011d9c <__lshift>
 80116b6:	4607      	mov	r7, r0
 80116b8:	f1b8 0f00 	cmp.w	r8, #0
 80116bc:	d05b      	beq.n	8011776 <_dtoa_r+0xa76>
 80116be:	6879      	ldr	r1, [r7, #4]
 80116c0:	4620      	mov	r0, r4
 80116c2:	f000 f95b 	bl	801197c <_Balloc>
 80116c6:	4605      	mov	r5, r0
 80116c8:	b928      	cbnz	r0, 80116d6 <_dtoa_r+0x9d6>
 80116ca:	4b83      	ldr	r3, [pc, #524]	; (80118d8 <_dtoa_r+0xbd8>)
 80116cc:	4602      	mov	r2, r0
 80116ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80116d2:	f7ff bb2e 	b.w	8010d32 <_dtoa_r+0x32>
 80116d6:	693a      	ldr	r2, [r7, #16]
 80116d8:	3202      	adds	r2, #2
 80116da:	0092      	lsls	r2, r2, #2
 80116dc:	f107 010c 	add.w	r1, r7, #12
 80116e0:	300c      	adds	r0, #12
 80116e2:	f7ff fa77 	bl	8010bd4 <memcpy>
 80116e6:	2201      	movs	r2, #1
 80116e8:	4629      	mov	r1, r5
 80116ea:	4620      	mov	r0, r4
 80116ec:	f000 fb56 	bl	8011d9c <__lshift>
 80116f0:	9b00      	ldr	r3, [sp, #0]
 80116f2:	3301      	adds	r3, #1
 80116f4:	9304      	str	r3, [sp, #16]
 80116f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116fa:	4413      	add	r3, r2
 80116fc:	9308      	str	r3, [sp, #32]
 80116fe:	9b02      	ldr	r3, [sp, #8]
 8011700:	f003 0301 	and.w	r3, r3, #1
 8011704:	46b8      	mov	r8, r7
 8011706:	9306      	str	r3, [sp, #24]
 8011708:	4607      	mov	r7, r0
 801170a:	9b04      	ldr	r3, [sp, #16]
 801170c:	4631      	mov	r1, r6
 801170e:	3b01      	subs	r3, #1
 8011710:	4650      	mov	r0, sl
 8011712:	9301      	str	r3, [sp, #4]
 8011714:	f7ff fa6c 	bl	8010bf0 <quorem>
 8011718:	4641      	mov	r1, r8
 801171a:	9002      	str	r0, [sp, #8]
 801171c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011720:	4650      	mov	r0, sl
 8011722:	f000 fba7 	bl	8011e74 <__mcmp>
 8011726:	463a      	mov	r2, r7
 8011728:	9005      	str	r0, [sp, #20]
 801172a:	4631      	mov	r1, r6
 801172c:	4620      	mov	r0, r4
 801172e:	f000 fbbd 	bl	8011eac <__mdiff>
 8011732:	68c2      	ldr	r2, [r0, #12]
 8011734:	4605      	mov	r5, r0
 8011736:	bb02      	cbnz	r2, 801177a <_dtoa_r+0xa7a>
 8011738:	4601      	mov	r1, r0
 801173a:	4650      	mov	r0, sl
 801173c:	f000 fb9a 	bl	8011e74 <__mcmp>
 8011740:	4602      	mov	r2, r0
 8011742:	4629      	mov	r1, r5
 8011744:	4620      	mov	r0, r4
 8011746:	9209      	str	r2, [sp, #36]	; 0x24
 8011748:	f000 f958 	bl	80119fc <_Bfree>
 801174c:	9b07      	ldr	r3, [sp, #28]
 801174e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011750:	9d04      	ldr	r5, [sp, #16]
 8011752:	ea43 0102 	orr.w	r1, r3, r2
 8011756:	9b06      	ldr	r3, [sp, #24]
 8011758:	4319      	orrs	r1, r3
 801175a:	d110      	bne.n	801177e <_dtoa_r+0xa7e>
 801175c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011760:	d029      	beq.n	80117b6 <_dtoa_r+0xab6>
 8011762:	9b05      	ldr	r3, [sp, #20]
 8011764:	2b00      	cmp	r3, #0
 8011766:	dd02      	ble.n	801176e <_dtoa_r+0xa6e>
 8011768:	9b02      	ldr	r3, [sp, #8]
 801176a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801176e:	9b01      	ldr	r3, [sp, #4]
 8011770:	f883 9000 	strb.w	r9, [r3]
 8011774:	e774      	b.n	8011660 <_dtoa_r+0x960>
 8011776:	4638      	mov	r0, r7
 8011778:	e7ba      	b.n	80116f0 <_dtoa_r+0x9f0>
 801177a:	2201      	movs	r2, #1
 801177c:	e7e1      	b.n	8011742 <_dtoa_r+0xa42>
 801177e:	9b05      	ldr	r3, [sp, #20]
 8011780:	2b00      	cmp	r3, #0
 8011782:	db04      	blt.n	801178e <_dtoa_r+0xa8e>
 8011784:	9907      	ldr	r1, [sp, #28]
 8011786:	430b      	orrs	r3, r1
 8011788:	9906      	ldr	r1, [sp, #24]
 801178a:	430b      	orrs	r3, r1
 801178c:	d120      	bne.n	80117d0 <_dtoa_r+0xad0>
 801178e:	2a00      	cmp	r2, #0
 8011790:	dded      	ble.n	801176e <_dtoa_r+0xa6e>
 8011792:	4651      	mov	r1, sl
 8011794:	2201      	movs	r2, #1
 8011796:	4620      	mov	r0, r4
 8011798:	f000 fb00 	bl	8011d9c <__lshift>
 801179c:	4631      	mov	r1, r6
 801179e:	4682      	mov	sl, r0
 80117a0:	f000 fb68 	bl	8011e74 <__mcmp>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	dc03      	bgt.n	80117b0 <_dtoa_r+0xab0>
 80117a8:	d1e1      	bne.n	801176e <_dtoa_r+0xa6e>
 80117aa:	f019 0f01 	tst.w	r9, #1
 80117ae:	d0de      	beq.n	801176e <_dtoa_r+0xa6e>
 80117b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80117b4:	d1d8      	bne.n	8011768 <_dtoa_r+0xa68>
 80117b6:	9a01      	ldr	r2, [sp, #4]
 80117b8:	2339      	movs	r3, #57	; 0x39
 80117ba:	7013      	strb	r3, [r2, #0]
 80117bc:	462b      	mov	r3, r5
 80117be:	461d      	mov	r5, r3
 80117c0:	3b01      	subs	r3, #1
 80117c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80117c6:	2a39      	cmp	r2, #57	; 0x39
 80117c8:	d06c      	beq.n	80118a4 <_dtoa_r+0xba4>
 80117ca:	3201      	adds	r2, #1
 80117cc:	701a      	strb	r2, [r3, #0]
 80117ce:	e747      	b.n	8011660 <_dtoa_r+0x960>
 80117d0:	2a00      	cmp	r2, #0
 80117d2:	dd07      	ble.n	80117e4 <_dtoa_r+0xae4>
 80117d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80117d8:	d0ed      	beq.n	80117b6 <_dtoa_r+0xab6>
 80117da:	9a01      	ldr	r2, [sp, #4]
 80117dc:	f109 0301 	add.w	r3, r9, #1
 80117e0:	7013      	strb	r3, [r2, #0]
 80117e2:	e73d      	b.n	8011660 <_dtoa_r+0x960>
 80117e4:	9b04      	ldr	r3, [sp, #16]
 80117e6:	9a08      	ldr	r2, [sp, #32]
 80117e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d043      	beq.n	8011878 <_dtoa_r+0xb78>
 80117f0:	4651      	mov	r1, sl
 80117f2:	2300      	movs	r3, #0
 80117f4:	220a      	movs	r2, #10
 80117f6:	4620      	mov	r0, r4
 80117f8:	f000 f922 	bl	8011a40 <__multadd>
 80117fc:	45b8      	cmp	r8, r7
 80117fe:	4682      	mov	sl, r0
 8011800:	f04f 0300 	mov.w	r3, #0
 8011804:	f04f 020a 	mov.w	r2, #10
 8011808:	4641      	mov	r1, r8
 801180a:	4620      	mov	r0, r4
 801180c:	d107      	bne.n	801181e <_dtoa_r+0xb1e>
 801180e:	f000 f917 	bl	8011a40 <__multadd>
 8011812:	4680      	mov	r8, r0
 8011814:	4607      	mov	r7, r0
 8011816:	9b04      	ldr	r3, [sp, #16]
 8011818:	3301      	adds	r3, #1
 801181a:	9304      	str	r3, [sp, #16]
 801181c:	e775      	b.n	801170a <_dtoa_r+0xa0a>
 801181e:	f000 f90f 	bl	8011a40 <__multadd>
 8011822:	4639      	mov	r1, r7
 8011824:	4680      	mov	r8, r0
 8011826:	2300      	movs	r3, #0
 8011828:	220a      	movs	r2, #10
 801182a:	4620      	mov	r0, r4
 801182c:	f000 f908 	bl	8011a40 <__multadd>
 8011830:	4607      	mov	r7, r0
 8011832:	e7f0      	b.n	8011816 <_dtoa_r+0xb16>
 8011834:	9b04      	ldr	r3, [sp, #16]
 8011836:	9301      	str	r3, [sp, #4]
 8011838:	9d00      	ldr	r5, [sp, #0]
 801183a:	4631      	mov	r1, r6
 801183c:	4650      	mov	r0, sl
 801183e:	f7ff f9d7 	bl	8010bf0 <quorem>
 8011842:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011846:	9b00      	ldr	r3, [sp, #0]
 8011848:	f805 9b01 	strb.w	r9, [r5], #1
 801184c:	1aea      	subs	r2, r5, r3
 801184e:	9b01      	ldr	r3, [sp, #4]
 8011850:	4293      	cmp	r3, r2
 8011852:	dd07      	ble.n	8011864 <_dtoa_r+0xb64>
 8011854:	4651      	mov	r1, sl
 8011856:	2300      	movs	r3, #0
 8011858:	220a      	movs	r2, #10
 801185a:	4620      	mov	r0, r4
 801185c:	f000 f8f0 	bl	8011a40 <__multadd>
 8011860:	4682      	mov	sl, r0
 8011862:	e7ea      	b.n	801183a <_dtoa_r+0xb3a>
 8011864:	9b01      	ldr	r3, [sp, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	bfc8      	it	gt
 801186a:	461d      	movgt	r5, r3
 801186c:	9b00      	ldr	r3, [sp, #0]
 801186e:	bfd8      	it	le
 8011870:	2501      	movle	r5, #1
 8011872:	441d      	add	r5, r3
 8011874:	f04f 0800 	mov.w	r8, #0
 8011878:	4651      	mov	r1, sl
 801187a:	2201      	movs	r2, #1
 801187c:	4620      	mov	r0, r4
 801187e:	f000 fa8d 	bl	8011d9c <__lshift>
 8011882:	4631      	mov	r1, r6
 8011884:	4682      	mov	sl, r0
 8011886:	f000 faf5 	bl	8011e74 <__mcmp>
 801188a:	2800      	cmp	r0, #0
 801188c:	dc96      	bgt.n	80117bc <_dtoa_r+0xabc>
 801188e:	d102      	bne.n	8011896 <_dtoa_r+0xb96>
 8011890:	f019 0f01 	tst.w	r9, #1
 8011894:	d192      	bne.n	80117bc <_dtoa_r+0xabc>
 8011896:	462b      	mov	r3, r5
 8011898:	461d      	mov	r5, r3
 801189a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801189e:	2a30      	cmp	r2, #48	; 0x30
 80118a0:	d0fa      	beq.n	8011898 <_dtoa_r+0xb98>
 80118a2:	e6dd      	b.n	8011660 <_dtoa_r+0x960>
 80118a4:	9a00      	ldr	r2, [sp, #0]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d189      	bne.n	80117be <_dtoa_r+0xabe>
 80118aa:	f10b 0b01 	add.w	fp, fp, #1
 80118ae:	2331      	movs	r3, #49	; 0x31
 80118b0:	e796      	b.n	80117e0 <_dtoa_r+0xae0>
 80118b2:	4b0a      	ldr	r3, [pc, #40]	; (80118dc <_dtoa_r+0xbdc>)
 80118b4:	f7ff ba99 	b.w	8010dea <_dtoa_r+0xea>
 80118b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	f47f aa6d 	bne.w	8010d9a <_dtoa_r+0x9a>
 80118c0:	4b07      	ldr	r3, [pc, #28]	; (80118e0 <_dtoa_r+0xbe0>)
 80118c2:	f7ff ba92 	b.w	8010dea <_dtoa_r+0xea>
 80118c6:	9b01      	ldr	r3, [sp, #4]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	dcb5      	bgt.n	8011838 <_dtoa_r+0xb38>
 80118cc:	9b07      	ldr	r3, [sp, #28]
 80118ce:	2b02      	cmp	r3, #2
 80118d0:	f73f aeb1 	bgt.w	8011636 <_dtoa_r+0x936>
 80118d4:	e7b0      	b.n	8011838 <_dtoa_r+0xb38>
 80118d6:	bf00      	nop
 80118d8:	08014264 	.word	0x08014264
 80118dc:	080141c4 	.word	0x080141c4
 80118e0:	080141e8 	.word	0x080141e8

080118e4 <_free_r>:
 80118e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118e6:	2900      	cmp	r1, #0
 80118e8:	d044      	beq.n	8011974 <_free_r+0x90>
 80118ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118ee:	9001      	str	r0, [sp, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f1a1 0404 	sub.w	r4, r1, #4
 80118f6:	bfb8      	it	lt
 80118f8:	18e4      	addlt	r4, r4, r3
 80118fa:	f7fe fb49 	bl	800ff90 <__malloc_lock>
 80118fe:	4a1e      	ldr	r2, [pc, #120]	; (8011978 <_free_r+0x94>)
 8011900:	9801      	ldr	r0, [sp, #4]
 8011902:	6813      	ldr	r3, [r2, #0]
 8011904:	b933      	cbnz	r3, 8011914 <_free_r+0x30>
 8011906:	6063      	str	r3, [r4, #4]
 8011908:	6014      	str	r4, [r2, #0]
 801190a:	b003      	add	sp, #12
 801190c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011910:	f7fe bb44 	b.w	800ff9c <__malloc_unlock>
 8011914:	42a3      	cmp	r3, r4
 8011916:	d908      	bls.n	801192a <_free_r+0x46>
 8011918:	6825      	ldr	r5, [r4, #0]
 801191a:	1961      	adds	r1, r4, r5
 801191c:	428b      	cmp	r3, r1
 801191e:	bf01      	itttt	eq
 8011920:	6819      	ldreq	r1, [r3, #0]
 8011922:	685b      	ldreq	r3, [r3, #4]
 8011924:	1949      	addeq	r1, r1, r5
 8011926:	6021      	streq	r1, [r4, #0]
 8011928:	e7ed      	b.n	8011906 <_free_r+0x22>
 801192a:	461a      	mov	r2, r3
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	b10b      	cbz	r3, 8011934 <_free_r+0x50>
 8011930:	42a3      	cmp	r3, r4
 8011932:	d9fa      	bls.n	801192a <_free_r+0x46>
 8011934:	6811      	ldr	r1, [r2, #0]
 8011936:	1855      	adds	r5, r2, r1
 8011938:	42a5      	cmp	r5, r4
 801193a:	d10b      	bne.n	8011954 <_free_r+0x70>
 801193c:	6824      	ldr	r4, [r4, #0]
 801193e:	4421      	add	r1, r4
 8011940:	1854      	adds	r4, r2, r1
 8011942:	42a3      	cmp	r3, r4
 8011944:	6011      	str	r1, [r2, #0]
 8011946:	d1e0      	bne.n	801190a <_free_r+0x26>
 8011948:	681c      	ldr	r4, [r3, #0]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	6053      	str	r3, [r2, #4]
 801194e:	440c      	add	r4, r1
 8011950:	6014      	str	r4, [r2, #0]
 8011952:	e7da      	b.n	801190a <_free_r+0x26>
 8011954:	d902      	bls.n	801195c <_free_r+0x78>
 8011956:	230c      	movs	r3, #12
 8011958:	6003      	str	r3, [r0, #0]
 801195a:	e7d6      	b.n	801190a <_free_r+0x26>
 801195c:	6825      	ldr	r5, [r4, #0]
 801195e:	1961      	adds	r1, r4, r5
 8011960:	428b      	cmp	r3, r1
 8011962:	bf04      	itt	eq
 8011964:	6819      	ldreq	r1, [r3, #0]
 8011966:	685b      	ldreq	r3, [r3, #4]
 8011968:	6063      	str	r3, [r4, #4]
 801196a:	bf04      	itt	eq
 801196c:	1949      	addeq	r1, r1, r5
 801196e:	6021      	streq	r1, [r4, #0]
 8011970:	6054      	str	r4, [r2, #4]
 8011972:	e7ca      	b.n	801190a <_free_r+0x26>
 8011974:	b003      	add	sp, #12
 8011976:	bd30      	pop	{r4, r5, pc}
 8011978:	20002298 	.word	0x20002298

0801197c <_Balloc>:
 801197c:	b570      	push	{r4, r5, r6, lr}
 801197e:	69c6      	ldr	r6, [r0, #28]
 8011980:	4604      	mov	r4, r0
 8011982:	460d      	mov	r5, r1
 8011984:	b976      	cbnz	r6, 80119a4 <_Balloc+0x28>
 8011986:	2010      	movs	r0, #16
 8011988:	f7fe fa52 	bl	800fe30 <malloc>
 801198c:	4602      	mov	r2, r0
 801198e:	61e0      	str	r0, [r4, #28]
 8011990:	b920      	cbnz	r0, 801199c <_Balloc+0x20>
 8011992:	4b18      	ldr	r3, [pc, #96]	; (80119f4 <_Balloc+0x78>)
 8011994:	4818      	ldr	r0, [pc, #96]	; (80119f8 <_Balloc+0x7c>)
 8011996:	216b      	movs	r1, #107	; 0x6b
 8011998:	f000 fd8c 	bl	80124b4 <__assert_func>
 801199c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119a0:	6006      	str	r6, [r0, #0]
 80119a2:	60c6      	str	r6, [r0, #12]
 80119a4:	69e6      	ldr	r6, [r4, #28]
 80119a6:	68f3      	ldr	r3, [r6, #12]
 80119a8:	b183      	cbz	r3, 80119cc <_Balloc+0x50>
 80119aa:	69e3      	ldr	r3, [r4, #28]
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80119b2:	b9b8      	cbnz	r0, 80119e4 <_Balloc+0x68>
 80119b4:	2101      	movs	r1, #1
 80119b6:	fa01 f605 	lsl.w	r6, r1, r5
 80119ba:	1d72      	adds	r2, r6, #5
 80119bc:	0092      	lsls	r2, r2, #2
 80119be:	4620      	mov	r0, r4
 80119c0:	f000 fd96 	bl	80124f0 <_calloc_r>
 80119c4:	b160      	cbz	r0, 80119e0 <_Balloc+0x64>
 80119c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80119ca:	e00e      	b.n	80119ea <_Balloc+0x6e>
 80119cc:	2221      	movs	r2, #33	; 0x21
 80119ce:	2104      	movs	r1, #4
 80119d0:	4620      	mov	r0, r4
 80119d2:	f000 fd8d 	bl	80124f0 <_calloc_r>
 80119d6:	69e3      	ldr	r3, [r4, #28]
 80119d8:	60f0      	str	r0, [r6, #12]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1e4      	bne.n	80119aa <_Balloc+0x2e>
 80119e0:	2000      	movs	r0, #0
 80119e2:	bd70      	pop	{r4, r5, r6, pc}
 80119e4:	6802      	ldr	r2, [r0, #0]
 80119e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80119ea:	2300      	movs	r3, #0
 80119ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80119f0:	e7f7      	b.n	80119e2 <_Balloc+0x66>
 80119f2:	bf00      	nop
 80119f4:	080141f5 	.word	0x080141f5
 80119f8:	08014275 	.word	0x08014275

080119fc <_Bfree>:
 80119fc:	b570      	push	{r4, r5, r6, lr}
 80119fe:	69c6      	ldr	r6, [r0, #28]
 8011a00:	4605      	mov	r5, r0
 8011a02:	460c      	mov	r4, r1
 8011a04:	b976      	cbnz	r6, 8011a24 <_Bfree+0x28>
 8011a06:	2010      	movs	r0, #16
 8011a08:	f7fe fa12 	bl	800fe30 <malloc>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	61e8      	str	r0, [r5, #28]
 8011a10:	b920      	cbnz	r0, 8011a1c <_Bfree+0x20>
 8011a12:	4b09      	ldr	r3, [pc, #36]	; (8011a38 <_Bfree+0x3c>)
 8011a14:	4809      	ldr	r0, [pc, #36]	; (8011a3c <_Bfree+0x40>)
 8011a16:	218f      	movs	r1, #143	; 0x8f
 8011a18:	f000 fd4c 	bl	80124b4 <__assert_func>
 8011a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a20:	6006      	str	r6, [r0, #0]
 8011a22:	60c6      	str	r6, [r0, #12]
 8011a24:	b13c      	cbz	r4, 8011a36 <_Bfree+0x3a>
 8011a26:	69eb      	ldr	r3, [r5, #28]
 8011a28:	6862      	ldr	r2, [r4, #4]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a30:	6021      	str	r1, [r4, #0]
 8011a32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011a36:	bd70      	pop	{r4, r5, r6, pc}
 8011a38:	080141f5 	.word	0x080141f5
 8011a3c:	08014275 	.word	0x08014275

08011a40 <__multadd>:
 8011a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a44:	690d      	ldr	r5, [r1, #16]
 8011a46:	4607      	mov	r7, r0
 8011a48:	460c      	mov	r4, r1
 8011a4a:	461e      	mov	r6, r3
 8011a4c:	f101 0c14 	add.w	ip, r1, #20
 8011a50:	2000      	movs	r0, #0
 8011a52:	f8dc 3000 	ldr.w	r3, [ip]
 8011a56:	b299      	uxth	r1, r3
 8011a58:	fb02 6101 	mla	r1, r2, r1, r6
 8011a5c:	0c1e      	lsrs	r6, r3, #16
 8011a5e:	0c0b      	lsrs	r3, r1, #16
 8011a60:	fb02 3306 	mla	r3, r2, r6, r3
 8011a64:	b289      	uxth	r1, r1
 8011a66:	3001      	adds	r0, #1
 8011a68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011a6c:	4285      	cmp	r5, r0
 8011a6e:	f84c 1b04 	str.w	r1, [ip], #4
 8011a72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011a76:	dcec      	bgt.n	8011a52 <__multadd+0x12>
 8011a78:	b30e      	cbz	r6, 8011abe <__multadd+0x7e>
 8011a7a:	68a3      	ldr	r3, [r4, #8]
 8011a7c:	42ab      	cmp	r3, r5
 8011a7e:	dc19      	bgt.n	8011ab4 <__multadd+0x74>
 8011a80:	6861      	ldr	r1, [r4, #4]
 8011a82:	4638      	mov	r0, r7
 8011a84:	3101      	adds	r1, #1
 8011a86:	f7ff ff79 	bl	801197c <_Balloc>
 8011a8a:	4680      	mov	r8, r0
 8011a8c:	b928      	cbnz	r0, 8011a9a <__multadd+0x5a>
 8011a8e:	4602      	mov	r2, r0
 8011a90:	4b0c      	ldr	r3, [pc, #48]	; (8011ac4 <__multadd+0x84>)
 8011a92:	480d      	ldr	r0, [pc, #52]	; (8011ac8 <__multadd+0x88>)
 8011a94:	21ba      	movs	r1, #186	; 0xba
 8011a96:	f000 fd0d 	bl	80124b4 <__assert_func>
 8011a9a:	6922      	ldr	r2, [r4, #16]
 8011a9c:	3202      	adds	r2, #2
 8011a9e:	f104 010c 	add.w	r1, r4, #12
 8011aa2:	0092      	lsls	r2, r2, #2
 8011aa4:	300c      	adds	r0, #12
 8011aa6:	f7ff f895 	bl	8010bd4 <memcpy>
 8011aaa:	4621      	mov	r1, r4
 8011aac:	4638      	mov	r0, r7
 8011aae:	f7ff ffa5 	bl	80119fc <_Bfree>
 8011ab2:	4644      	mov	r4, r8
 8011ab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ab8:	3501      	adds	r5, #1
 8011aba:	615e      	str	r6, [r3, #20]
 8011abc:	6125      	str	r5, [r4, #16]
 8011abe:	4620      	mov	r0, r4
 8011ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac4:	08014264 	.word	0x08014264
 8011ac8:	08014275 	.word	0x08014275

08011acc <__hi0bits>:
 8011acc:	0c03      	lsrs	r3, r0, #16
 8011ace:	041b      	lsls	r3, r3, #16
 8011ad0:	b9d3      	cbnz	r3, 8011b08 <__hi0bits+0x3c>
 8011ad2:	0400      	lsls	r0, r0, #16
 8011ad4:	2310      	movs	r3, #16
 8011ad6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011ada:	bf04      	itt	eq
 8011adc:	0200      	lsleq	r0, r0, #8
 8011ade:	3308      	addeq	r3, #8
 8011ae0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ae4:	bf04      	itt	eq
 8011ae6:	0100      	lsleq	r0, r0, #4
 8011ae8:	3304      	addeq	r3, #4
 8011aea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011aee:	bf04      	itt	eq
 8011af0:	0080      	lsleq	r0, r0, #2
 8011af2:	3302      	addeq	r3, #2
 8011af4:	2800      	cmp	r0, #0
 8011af6:	db05      	blt.n	8011b04 <__hi0bits+0x38>
 8011af8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011afc:	f103 0301 	add.w	r3, r3, #1
 8011b00:	bf08      	it	eq
 8011b02:	2320      	moveq	r3, #32
 8011b04:	4618      	mov	r0, r3
 8011b06:	4770      	bx	lr
 8011b08:	2300      	movs	r3, #0
 8011b0a:	e7e4      	b.n	8011ad6 <__hi0bits+0xa>

08011b0c <__lo0bits>:
 8011b0c:	6803      	ldr	r3, [r0, #0]
 8011b0e:	f013 0207 	ands.w	r2, r3, #7
 8011b12:	d00c      	beq.n	8011b2e <__lo0bits+0x22>
 8011b14:	07d9      	lsls	r1, r3, #31
 8011b16:	d422      	bmi.n	8011b5e <__lo0bits+0x52>
 8011b18:	079a      	lsls	r2, r3, #30
 8011b1a:	bf49      	itett	mi
 8011b1c:	085b      	lsrmi	r3, r3, #1
 8011b1e:	089b      	lsrpl	r3, r3, #2
 8011b20:	6003      	strmi	r3, [r0, #0]
 8011b22:	2201      	movmi	r2, #1
 8011b24:	bf5c      	itt	pl
 8011b26:	6003      	strpl	r3, [r0, #0]
 8011b28:	2202      	movpl	r2, #2
 8011b2a:	4610      	mov	r0, r2
 8011b2c:	4770      	bx	lr
 8011b2e:	b299      	uxth	r1, r3
 8011b30:	b909      	cbnz	r1, 8011b36 <__lo0bits+0x2a>
 8011b32:	0c1b      	lsrs	r3, r3, #16
 8011b34:	2210      	movs	r2, #16
 8011b36:	b2d9      	uxtb	r1, r3
 8011b38:	b909      	cbnz	r1, 8011b3e <__lo0bits+0x32>
 8011b3a:	3208      	adds	r2, #8
 8011b3c:	0a1b      	lsrs	r3, r3, #8
 8011b3e:	0719      	lsls	r1, r3, #28
 8011b40:	bf04      	itt	eq
 8011b42:	091b      	lsreq	r3, r3, #4
 8011b44:	3204      	addeq	r2, #4
 8011b46:	0799      	lsls	r1, r3, #30
 8011b48:	bf04      	itt	eq
 8011b4a:	089b      	lsreq	r3, r3, #2
 8011b4c:	3202      	addeq	r2, #2
 8011b4e:	07d9      	lsls	r1, r3, #31
 8011b50:	d403      	bmi.n	8011b5a <__lo0bits+0x4e>
 8011b52:	085b      	lsrs	r3, r3, #1
 8011b54:	f102 0201 	add.w	r2, r2, #1
 8011b58:	d003      	beq.n	8011b62 <__lo0bits+0x56>
 8011b5a:	6003      	str	r3, [r0, #0]
 8011b5c:	e7e5      	b.n	8011b2a <__lo0bits+0x1e>
 8011b5e:	2200      	movs	r2, #0
 8011b60:	e7e3      	b.n	8011b2a <__lo0bits+0x1e>
 8011b62:	2220      	movs	r2, #32
 8011b64:	e7e1      	b.n	8011b2a <__lo0bits+0x1e>
	...

08011b68 <__i2b>:
 8011b68:	b510      	push	{r4, lr}
 8011b6a:	460c      	mov	r4, r1
 8011b6c:	2101      	movs	r1, #1
 8011b6e:	f7ff ff05 	bl	801197c <_Balloc>
 8011b72:	4602      	mov	r2, r0
 8011b74:	b928      	cbnz	r0, 8011b82 <__i2b+0x1a>
 8011b76:	4b05      	ldr	r3, [pc, #20]	; (8011b8c <__i2b+0x24>)
 8011b78:	4805      	ldr	r0, [pc, #20]	; (8011b90 <__i2b+0x28>)
 8011b7a:	f240 1145 	movw	r1, #325	; 0x145
 8011b7e:	f000 fc99 	bl	80124b4 <__assert_func>
 8011b82:	2301      	movs	r3, #1
 8011b84:	6144      	str	r4, [r0, #20]
 8011b86:	6103      	str	r3, [r0, #16]
 8011b88:	bd10      	pop	{r4, pc}
 8011b8a:	bf00      	nop
 8011b8c:	08014264 	.word	0x08014264
 8011b90:	08014275 	.word	0x08014275

08011b94 <__multiply>:
 8011b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b98:	4691      	mov	r9, r2
 8011b9a:	690a      	ldr	r2, [r1, #16]
 8011b9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	bfb8      	it	lt
 8011ba4:	460b      	movlt	r3, r1
 8011ba6:	460c      	mov	r4, r1
 8011ba8:	bfbc      	itt	lt
 8011baa:	464c      	movlt	r4, r9
 8011bac:	4699      	movlt	r9, r3
 8011bae:	6927      	ldr	r7, [r4, #16]
 8011bb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011bb4:	68a3      	ldr	r3, [r4, #8]
 8011bb6:	6861      	ldr	r1, [r4, #4]
 8011bb8:	eb07 060a 	add.w	r6, r7, sl
 8011bbc:	42b3      	cmp	r3, r6
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	bfb8      	it	lt
 8011bc2:	3101      	addlt	r1, #1
 8011bc4:	f7ff feda 	bl	801197c <_Balloc>
 8011bc8:	b930      	cbnz	r0, 8011bd8 <__multiply+0x44>
 8011bca:	4602      	mov	r2, r0
 8011bcc:	4b44      	ldr	r3, [pc, #272]	; (8011ce0 <__multiply+0x14c>)
 8011bce:	4845      	ldr	r0, [pc, #276]	; (8011ce4 <__multiply+0x150>)
 8011bd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011bd4:	f000 fc6e 	bl	80124b4 <__assert_func>
 8011bd8:	f100 0514 	add.w	r5, r0, #20
 8011bdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011be0:	462b      	mov	r3, r5
 8011be2:	2200      	movs	r2, #0
 8011be4:	4543      	cmp	r3, r8
 8011be6:	d321      	bcc.n	8011c2c <__multiply+0x98>
 8011be8:	f104 0314 	add.w	r3, r4, #20
 8011bec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011bf0:	f109 0314 	add.w	r3, r9, #20
 8011bf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011bf8:	9202      	str	r2, [sp, #8]
 8011bfa:	1b3a      	subs	r2, r7, r4
 8011bfc:	3a15      	subs	r2, #21
 8011bfe:	f022 0203 	bic.w	r2, r2, #3
 8011c02:	3204      	adds	r2, #4
 8011c04:	f104 0115 	add.w	r1, r4, #21
 8011c08:	428f      	cmp	r7, r1
 8011c0a:	bf38      	it	cc
 8011c0c:	2204      	movcc	r2, #4
 8011c0e:	9201      	str	r2, [sp, #4]
 8011c10:	9a02      	ldr	r2, [sp, #8]
 8011c12:	9303      	str	r3, [sp, #12]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d80c      	bhi.n	8011c32 <__multiply+0x9e>
 8011c18:	2e00      	cmp	r6, #0
 8011c1a:	dd03      	ble.n	8011c24 <__multiply+0x90>
 8011c1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d05b      	beq.n	8011cdc <__multiply+0x148>
 8011c24:	6106      	str	r6, [r0, #16]
 8011c26:	b005      	add	sp, #20
 8011c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2c:	f843 2b04 	str.w	r2, [r3], #4
 8011c30:	e7d8      	b.n	8011be4 <__multiply+0x50>
 8011c32:	f8b3 a000 	ldrh.w	sl, [r3]
 8011c36:	f1ba 0f00 	cmp.w	sl, #0
 8011c3a:	d024      	beq.n	8011c86 <__multiply+0xf2>
 8011c3c:	f104 0e14 	add.w	lr, r4, #20
 8011c40:	46a9      	mov	r9, r5
 8011c42:	f04f 0c00 	mov.w	ip, #0
 8011c46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011c4a:	f8d9 1000 	ldr.w	r1, [r9]
 8011c4e:	fa1f fb82 	uxth.w	fp, r2
 8011c52:	b289      	uxth	r1, r1
 8011c54:	fb0a 110b 	mla	r1, sl, fp, r1
 8011c58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8011c60:	4461      	add	r1, ip
 8011c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c66:	fb0a c20b 	mla	r2, sl, fp, ip
 8011c6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011c6e:	b289      	uxth	r1, r1
 8011c70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011c74:	4577      	cmp	r7, lr
 8011c76:	f849 1b04 	str.w	r1, [r9], #4
 8011c7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c7e:	d8e2      	bhi.n	8011c46 <__multiply+0xb2>
 8011c80:	9a01      	ldr	r2, [sp, #4]
 8011c82:	f845 c002 	str.w	ip, [r5, r2]
 8011c86:	9a03      	ldr	r2, [sp, #12]
 8011c88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011c8c:	3304      	adds	r3, #4
 8011c8e:	f1b9 0f00 	cmp.w	r9, #0
 8011c92:	d021      	beq.n	8011cd8 <__multiply+0x144>
 8011c94:	6829      	ldr	r1, [r5, #0]
 8011c96:	f104 0c14 	add.w	ip, r4, #20
 8011c9a:	46ae      	mov	lr, r5
 8011c9c:	f04f 0a00 	mov.w	sl, #0
 8011ca0:	f8bc b000 	ldrh.w	fp, [ip]
 8011ca4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011ca8:	fb09 220b 	mla	r2, r9, fp, r2
 8011cac:	4452      	add	r2, sl
 8011cae:	b289      	uxth	r1, r1
 8011cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011cb4:	f84e 1b04 	str.w	r1, [lr], #4
 8011cb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011cbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011cc0:	f8be 1000 	ldrh.w	r1, [lr]
 8011cc4:	fb09 110a 	mla	r1, r9, sl, r1
 8011cc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011ccc:	4567      	cmp	r7, ip
 8011cce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011cd2:	d8e5      	bhi.n	8011ca0 <__multiply+0x10c>
 8011cd4:	9a01      	ldr	r2, [sp, #4]
 8011cd6:	50a9      	str	r1, [r5, r2]
 8011cd8:	3504      	adds	r5, #4
 8011cda:	e799      	b.n	8011c10 <__multiply+0x7c>
 8011cdc:	3e01      	subs	r6, #1
 8011cde:	e79b      	b.n	8011c18 <__multiply+0x84>
 8011ce0:	08014264 	.word	0x08014264
 8011ce4:	08014275 	.word	0x08014275

08011ce8 <__pow5mult>:
 8011ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cec:	4615      	mov	r5, r2
 8011cee:	f012 0203 	ands.w	r2, r2, #3
 8011cf2:	4606      	mov	r6, r0
 8011cf4:	460f      	mov	r7, r1
 8011cf6:	d007      	beq.n	8011d08 <__pow5mult+0x20>
 8011cf8:	4c25      	ldr	r4, [pc, #148]	; (8011d90 <__pow5mult+0xa8>)
 8011cfa:	3a01      	subs	r2, #1
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d02:	f7ff fe9d 	bl	8011a40 <__multadd>
 8011d06:	4607      	mov	r7, r0
 8011d08:	10ad      	asrs	r5, r5, #2
 8011d0a:	d03d      	beq.n	8011d88 <__pow5mult+0xa0>
 8011d0c:	69f4      	ldr	r4, [r6, #28]
 8011d0e:	b97c      	cbnz	r4, 8011d30 <__pow5mult+0x48>
 8011d10:	2010      	movs	r0, #16
 8011d12:	f7fe f88d 	bl	800fe30 <malloc>
 8011d16:	4602      	mov	r2, r0
 8011d18:	61f0      	str	r0, [r6, #28]
 8011d1a:	b928      	cbnz	r0, 8011d28 <__pow5mult+0x40>
 8011d1c:	4b1d      	ldr	r3, [pc, #116]	; (8011d94 <__pow5mult+0xac>)
 8011d1e:	481e      	ldr	r0, [pc, #120]	; (8011d98 <__pow5mult+0xb0>)
 8011d20:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011d24:	f000 fbc6 	bl	80124b4 <__assert_func>
 8011d28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d2c:	6004      	str	r4, [r0, #0]
 8011d2e:	60c4      	str	r4, [r0, #12]
 8011d30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011d34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d38:	b94c      	cbnz	r4, 8011d4e <__pow5mult+0x66>
 8011d3a:	f240 2171 	movw	r1, #625	; 0x271
 8011d3e:	4630      	mov	r0, r6
 8011d40:	f7ff ff12 	bl	8011b68 <__i2b>
 8011d44:	2300      	movs	r3, #0
 8011d46:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	6003      	str	r3, [r0, #0]
 8011d4e:	f04f 0900 	mov.w	r9, #0
 8011d52:	07eb      	lsls	r3, r5, #31
 8011d54:	d50a      	bpl.n	8011d6c <__pow5mult+0x84>
 8011d56:	4639      	mov	r1, r7
 8011d58:	4622      	mov	r2, r4
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f7ff ff1a 	bl	8011b94 <__multiply>
 8011d60:	4639      	mov	r1, r7
 8011d62:	4680      	mov	r8, r0
 8011d64:	4630      	mov	r0, r6
 8011d66:	f7ff fe49 	bl	80119fc <_Bfree>
 8011d6a:	4647      	mov	r7, r8
 8011d6c:	106d      	asrs	r5, r5, #1
 8011d6e:	d00b      	beq.n	8011d88 <__pow5mult+0xa0>
 8011d70:	6820      	ldr	r0, [r4, #0]
 8011d72:	b938      	cbnz	r0, 8011d84 <__pow5mult+0x9c>
 8011d74:	4622      	mov	r2, r4
 8011d76:	4621      	mov	r1, r4
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f7ff ff0b 	bl	8011b94 <__multiply>
 8011d7e:	6020      	str	r0, [r4, #0]
 8011d80:	f8c0 9000 	str.w	r9, [r0]
 8011d84:	4604      	mov	r4, r0
 8011d86:	e7e4      	b.n	8011d52 <__pow5mult+0x6a>
 8011d88:	4638      	mov	r0, r7
 8011d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d8e:	bf00      	nop
 8011d90:	080143c0 	.word	0x080143c0
 8011d94:	080141f5 	.word	0x080141f5
 8011d98:	08014275 	.word	0x08014275

08011d9c <__lshift>:
 8011d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011da0:	460c      	mov	r4, r1
 8011da2:	6849      	ldr	r1, [r1, #4]
 8011da4:	6923      	ldr	r3, [r4, #16]
 8011da6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011daa:	68a3      	ldr	r3, [r4, #8]
 8011dac:	4607      	mov	r7, r0
 8011dae:	4691      	mov	r9, r2
 8011db0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011db4:	f108 0601 	add.w	r6, r8, #1
 8011db8:	42b3      	cmp	r3, r6
 8011dba:	db0b      	blt.n	8011dd4 <__lshift+0x38>
 8011dbc:	4638      	mov	r0, r7
 8011dbe:	f7ff fddd 	bl	801197c <_Balloc>
 8011dc2:	4605      	mov	r5, r0
 8011dc4:	b948      	cbnz	r0, 8011dda <__lshift+0x3e>
 8011dc6:	4602      	mov	r2, r0
 8011dc8:	4b28      	ldr	r3, [pc, #160]	; (8011e6c <__lshift+0xd0>)
 8011dca:	4829      	ldr	r0, [pc, #164]	; (8011e70 <__lshift+0xd4>)
 8011dcc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011dd0:	f000 fb70 	bl	80124b4 <__assert_func>
 8011dd4:	3101      	adds	r1, #1
 8011dd6:	005b      	lsls	r3, r3, #1
 8011dd8:	e7ee      	b.n	8011db8 <__lshift+0x1c>
 8011dda:	2300      	movs	r3, #0
 8011ddc:	f100 0114 	add.w	r1, r0, #20
 8011de0:	f100 0210 	add.w	r2, r0, #16
 8011de4:	4618      	mov	r0, r3
 8011de6:	4553      	cmp	r3, sl
 8011de8:	db33      	blt.n	8011e52 <__lshift+0xb6>
 8011dea:	6920      	ldr	r0, [r4, #16]
 8011dec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011df0:	f104 0314 	add.w	r3, r4, #20
 8011df4:	f019 091f 	ands.w	r9, r9, #31
 8011df8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011dfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011e00:	d02b      	beq.n	8011e5a <__lshift+0xbe>
 8011e02:	f1c9 0e20 	rsb	lr, r9, #32
 8011e06:	468a      	mov	sl, r1
 8011e08:	2200      	movs	r2, #0
 8011e0a:	6818      	ldr	r0, [r3, #0]
 8011e0c:	fa00 f009 	lsl.w	r0, r0, r9
 8011e10:	4310      	orrs	r0, r2
 8011e12:	f84a 0b04 	str.w	r0, [sl], #4
 8011e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e1a:	459c      	cmp	ip, r3
 8011e1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011e20:	d8f3      	bhi.n	8011e0a <__lshift+0x6e>
 8011e22:	ebac 0304 	sub.w	r3, ip, r4
 8011e26:	3b15      	subs	r3, #21
 8011e28:	f023 0303 	bic.w	r3, r3, #3
 8011e2c:	3304      	adds	r3, #4
 8011e2e:	f104 0015 	add.w	r0, r4, #21
 8011e32:	4584      	cmp	ip, r0
 8011e34:	bf38      	it	cc
 8011e36:	2304      	movcc	r3, #4
 8011e38:	50ca      	str	r2, [r1, r3]
 8011e3a:	b10a      	cbz	r2, 8011e40 <__lshift+0xa4>
 8011e3c:	f108 0602 	add.w	r6, r8, #2
 8011e40:	3e01      	subs	r6, #1
 8011e42:	4638      	mov	r0, r7
 8011e44:	612e      	str	r6, [r5, #16]
 8011e46:	4621      	mov	r1, r4
 8011e48:	f7ff fdd8 	bl	80119fc <_Bfree>
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e52:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e56:	3301      	adds	r3, #1
 8011e58:	e7c5      	b.n	8011de6 <__lshift+0x4a>
 8011e5a:	3904      	subs	r1, #4
 8011e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e60:	f841 2f04 	str.w	r2, [r1, #4]!
 8011e64:	459c      	cmp	ip, r3
 8011e66:	d8f9      	bhi.n	8011e5c <__lshift+0xc0>
 8011e68:	e7ea      	b.n	8011e40 <__lshift+0xa4>
 8011e6a:	bf00      	nop
 8011e6c:	08014264 	.word	0x08014264
 8011e70:	08014275 	.word	0x08014275

08011e74 <__mcmp>:
 8011e74:	b530      	push	{r4, r5, lr}
 8011e76:	6902      	ldr	r2, [r0, #16]
 8011e78:	690c      	ldr	r4, [r1, #16]
 8011e7a:	1b12      	subs	r2, r2, r4
 8011e7c:	d10e      	bne.n	8011e9c <__mcmp+0x28>
 8011e7e:	f100 0314 	add.w	r3, r0, #20
 8011e82:	3114      	adds	r1, #20
 8011e84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011e88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011e8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011e90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011e94:	42a5      	cmp	r5, r4
 8011e96:	d003      	beq.n	8011ea0 <__mcmp+0x2c>
 8011e98:	d305      	bcc.n	8011ea6 <__mcmp+0x32>
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	4610      	mov	r0, r2
 8011e9e:	bd30      	pop	{r4, r5, pc}
 8011ea0:	4283      	cmp	r3, r0
 8011ea2:	d3f3      	bcc.n	8011e8c <__mcmp+0x18>
 8011ea4:	e7fa      	b.n	8011e9c <__mcmp+0x28>
 8011ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011eaa:	e7f7      	b.n	8011e9c <__mcmp+0x28>

08011eac <__mdiff>:
 8011eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	460c      	mov	r4, r1
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	4611      	mov	r1, r2
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	4690      	mov	r8, r2
 8011eba:	f7ff ffdb 	bl	8011e74 <__mcmp>
 8011ebe:	1e05      	subs	r5, r0, #0
 8011ec0:	d110      	bne.n	8011ee4 <__mdiff+0x38>
 8011ec2:	4629      	mov	r1, r5
 8011ec4:	4630      	mov	r0, r6
 8011ec6:	f7ff fd59 	bl	801197c <_Balloc>
 8011eca:	b930      	cbnz	r0, 8011eda <__mdiff+0x2e>
 8011ecc:	4b3a      	ldr	r3, [pc, #232]	; (8011fb8 <__mdiff+0x10c>)
 8011ece:	4602      	mov	r2, r0
 8011ed0:	f240 2137 	movw	r1, #567	; 0x237
 8011ed4:	4839      	ldr	r0, [pc, #228]	; (8011fbc <__mdiff+0x110>)
 8011ed6:	f000 faed 	bl	80124b4 <__assert_func>
 8011eda:	2301      	movs	r3, #1
 8011edc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ee4:	bfa4      	itt	ge
 8011ee6:	4643      	movge	r3, r8
 8011ee8:	46a0      	movge	r8, r4
 8011eea:	4630      	mov	r0, r6
 8011eec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ef0:	bfa6      	itte	ge
 8011ef2:	461c      	movge	r4, r3
 8011ef4:	2500      	movge	r5, #0
 8011ef6:	2501      	movlt	r5, #1
 8011ef8:	f7ff fd40 	bl	801197c <_Balloc>
 8011efc:	b920      	cbnz	r0, 8011f08 <__mdiff+0x5c>
 8011efe:	4b2e      	ldr	r3, [pc, #184]	; (8011fb8 <__mdiff+0x10c>)
 8011f00:	4602      	mov	r2, r0
 8011f02:	f240 2145 	movw	r1, #581	; 0x245
 8011f06:	e7e5      	b.n	8011ed4 <__mdiff+0x28>
 8011f08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011f0c:	6926      	ldr	r6, [r4, #16]
 8011f0e:	60c5      	str	r5, [r0, #12]
 8011f10:	f104 0914 	add.w	r9, r4, #20
 8011f14:	f108 0514 	add.w	r5, r8, #20
 8011f18:	f100 0e14 	add.w	lr, r0, #20
 8011f1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011f20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011f24:	f108 0210 	add.w	r2, r8, #16
 8011f28:	46f2      	mov	sl, lr
 8011f2a:	2100      	movs	r1, #0
 8011f2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011f34:	fa11 f88b 	uxtah	r8, r1, fp
 8011f38:	b299      	uxth	r1, r3
 8011f3a:	0c1b      	lsrs	r3, r3, #16
 8011f3c:	eba8 0801 	sub.w	r8, r8, r1
 8011f40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011f44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011f48:	fa1f f888 	uxth.w	r8, r8
 8011f4c:	1419      	asrs	r1, r3, #16
 8011f4e:	454e      	cmp	r6, r9
 8011f50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011f54:	f84a 3b04 	str.w	r3, [sl], #4
 8011f58:	d8e8      	bhi.n	8011f2c <__mdiff+0x80>
 8011f5a:	1b33      	subs	r3, r6, r4
 8011f5c:	3b15      	subs	r3, #21
 8011f5e:	f023 0303 	bic.w	r3, r3, #3
 8011f62:	3304      	adds	r3, #4
 8011f64:	3415      	adds	r4, #21
 8011f66:	42a6      	cmp	r6, r4
 8011f68:	bf38      	it	cc
 8011f6a:	2304      	movcc	r3, #4
 8011f6c:	441d      	add	r5, r3
 8011f6e:	4473      	add	r3, lr
 8011f70:	469e      	mov	lr, r3
 8011f72:	462e      	mov	r6, r5
 8011f74:	4566      	cmp	r6, ip
 8011f76:	d30e      	bcc.n	8011f96 <__mdiff+0xea>
 8011f78:	f10c 0203 	add.w	r2, ip, #3
 8011f7c:	1b52      	subs	r2, r2, r5
 8011f7e:	f022 0203 	bic.w	r2, r2, #3
 8011f82:	3d03      	subs	r5, #3
 8011f84:	45ac      	cmp	ip, r5
 8011f86:	bf38      	it	cc
 8011f88:	2200      	movcc	r2, #0
 8011f8a:	4413      	add	r3, r2
 8011f8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011f90:	b17a      	cbz	r2, 8011fb2 <__mdiff+0x106>
 8011f92:	6107      	str	r7, [r0, #16]
 8011f94:	e7a4      	b.n	8011ee0 <__mdiff+0x34>
 8011f96:	f856 8b04 	ldr.w	r8, [r6], #4
 8011f9a:	fa11 f288 	uxtah	r2, r1, r8
 8011f9e:	1414      	asrs	r4, r2, #16
 8011fa0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011fa4:	b292      	uxth	r2, r2
 8011fa6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011faa:	f84e 2b04 	str.w	r2, [lr], #4
 8011fae:	1421      	asrs	r1, r4, #16
 8011fb0:	e7e0      	b.n	8011f74 <__mdiff+0xc8>
 8011fb2:	3f01      	subs	r7, #1
 8011fb4:	e7ea      	b.n	8011f8c <__mdiff+0xe0>
 8011fb6:	bf00      	nop
 8011fb8:	08014264 	.word	0x08014264
 8011fbc:	08014275 	.word	0x08014275

08011fc0 <__d2b>:
 8011fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011fc4:	460f      	mov	r7, r1
 8011fc6:	2101      	movs	r1, #1
 8011fc8:	ec59 8b10 	vmov	r8, r9, d0
 8011fcc:	4616      	mov	r6, r2
 8011fce:	f7ff fcd5 	bl	801197c <_Balloc>
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	b930      	cbnz	r0, 8011fe4 <__d2b+0x24>
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	4b24      	ldr	r3, [pc, #144]	; (801206c <__d2b+0xac>)
 8011fda:	4825      	ldr	r0, [pc, #148]	; (8012070 <__d2b+0xb0>)
 8011fdc:	f240 310f 	movw	r1, #783	; 0x30f
 8011fe0:	f000 fa68 	bl	80124b4 <__assert_func>
 8011fe4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011fec:	bb2d      	cbnz	r5, 801203a <__d2b+0x7a>
 8011fee:	9301      	str	r3, [sp, #4]
 8011ff0:	f1b8 0300 	subs.w	r3, r8, #0
 8011ff4:	d026      	beq.n	8012044 <__d2b+0x84>
 8011ff6:	4668      	mov	r0, sp
 8011ff8:	9300      	str	r3, [sp, #0]
 8011ffa:	f7ff fd87 	bl	8011b0c <__lo0bits>
 8011ffe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012002:	b1e8      	cbz	r0, 8012040 <__d2b+0x80>
 8012004:	f1c0 0320 	rsb	r3, r0, #32
 8012008:	fa02 f303 	lsl.w	r3, r2, r3
 801200c:	430b      	orrs	r3, r1
 801200e:	40c2      	lsrs	r2, r0
 8012010:	6163      	str	r3, [r4, #20]
 8012012:	9201      	str	r2, [sp, #4]
 8012014:	9b01      	ldr	r3, [sp, #4]
 8012016:	61a3      	str	r3, [r4, #24]
 8012018:	2b00      	cmp	r3, #0
 801201a:	bf14      	ite	ne
 801201c:	2202      	movne	r2, #2
 801201e:	2201      	moveq	r2, #1
 8012020:	6122      	str	r2, [r4, #16]
 8012022:	b1bd      	cbz	r5, 8012054 <__d2b+0x94>
 8012024:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012028:	4405      	add	r5, r0
 801202a:	603d      	str	r5, [r7, #0]
 801202c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012030:	6030      	str	r0, [r6, #0]
 8012032:	4620      	mov	r0, r4
 8012034:	b003      	add	sp, #12
 8012036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801203a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801203e:	e7d6      	b.n	8011fee <__d2b+0x2e>
 8012040:	6161      	str	r1, [r4, #20]
 8012042:	e7e7      	b.n	8012014 <__d2b+0x54>
 8012044:	a801      	add	r0, sp, #4
 8012046:	f7ff fd61 	bl	8011b0c <__lo0bits>
 801204a:	9b01      	ldr	r3, [sp, #4]
 801204c:	6163      	str	r3, [r4, #20]
 801204e:	3020      	adds	r0, #32
 8012050:	2201      	movs	r2, #1
 8012052:	e7e5      	b.n	8012020 <__d2b+0x60>
 8012054:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012058:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801205c:	6038      	str	r0, [r7, #0]
 801205e:	6918      	ldr	r0, [r3, #16]
 8012060:	f7ff fd34 	bl	8011acc <__hi0bits>
 8012064:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012068:	e7e2      	b.n	8012030 <__d2b+0x70>
 801206a:	bf00      	nop
 801206c:	08014264 	.word	0x08014264
 8012070:	08014275 	.word	0x08014275

08012074 <__ssputs_r>:
 8012074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012078:	688e      	ldr	r6, [r1, #8]
 801207a:	461f      	mov	r7, r3
 801207c:	42be      	cmp	r6, r7
 801207e:	680b      	ldr	r3, [r1, #0]
 8012080:	4682      	mov	sl, r0
 8012082:	460c      	mov	r4, r1
 8012084:	4690      	mov	r8, r2
 8012086:	d82c      	bhi.n	80120e2 <__ssputs_r+0x6e>
 8012088:	898a      	ldrh	r2, [r1, #12]
 801208a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801208e:	d026      	beq.n	80120de <__ssputs_r+0x6a>
 8012090:	6965      	ldr	r5, [r4, #20]
 8012092:	6909      	ldr	r1, [r1, #16]
 8012094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012098:	eba3 0901 	sub.w	r9, r3, r1
 801209c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120a0:	1c7b      	adds	r3, r7, #1
 80120a2:	444b      	add	r3, r9
 80120a4:	106d      	asrs	r5, r5, #1
 80120a6:	429d      	cmp	r5, r3
 80120a8:	bf38      	it	cc
 80120aa:	461d      	movcc	r5, r3
 80120ac:	0553      	lsls	r3, r2, #21
 80120ae:	d527      	bpl.n	8012100 <__ssputs_r+0x8c>
 80120b0:	4629      	mov	r1, r5
 80120b2:	f7fd feed 	bl	800fe90 <_malloc_r>
 80120b6:	4606      	mov	r6, r0
 80120b8:	b360      	cbz	r0, 8012114 <__ssputs_r+0xa0>
 80120ba:	6921      	ldr	r1, [r4, #16]
 80120bc:	464a      	mov	r2, r9
 80120be:	f7fe fd89 	bl	8010bd4 <memcpy>
 80120c2:	89a3      	ldrh	r3, [r4, #12]
 80120c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80120c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120cc:	81a3      	strh	r3, [r4, #12]
 80120ce:	6126      	str	r6, [r4, #16]
 80120d0:	6165      	str	r5, [r4, #20]
 80120d2:	444e      	add	r6, r9
 80120d4:	eba5 0509 	sub.w	r5, r5, r9
 80120d8:	6026      	str	r6, [r4, #0]
 80120da:	60a5      	str	r5, [r4, #8]
 80120dc:	463e      	mov	r6, r7
 80120de:	42be      	cmp	r6, r7
 80120e0:	d900      	bls.n	80120e4 <__ssputs_r+0x70>
 80120e2:	463e      	mov	r6, r7
 80120e4:	6820      	ldr	r0, [r4, #0]
 80120e6:	4632      	mov	r2, r6
 80120e8:	4641      	mov	r1, r8
 80120ea:	f000 f9c9 	bl	8012480 <memmove>
 80120ee:	68a3      	ldr	r3, [r4, #8]
 80120f0:	1b9b      	subs	r3, r3, r6
 80120f2:	60a3      	str	r3, [r4, #8]
 80120f4:	6823      	ldr	r3, [r4, #0]
 80120f6:	4433      	add	r3, r6
 80120f8:	6023      	str	r3, [r4, #0]
 80120fa:	2000      	movs	r0, #0
 80120fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012100:	462a      	mov	r2, r5
 8012102:	f000 fa1d 	bl	8012540 <_realloc_r>
 8012106:	4606      	mov	r6, r0
 8012108:	2800      	cmp	r0, #0
 801210a:	d1e0      	bne.n	80120ce <__ssputs_r+0x5a>
 801210c:	6921      	ldr	r1, [r4, #16]
 801210e:	4650      	mov	r0, sl
 8012110:	f7ff fbe8 	bl	80118e4 <_free_r>
 8012114:	230c      	movs	r3, #12
 8012116:	f8ca 3000 	str.w	r3, [sl]
 801211a:	89a3      	ldrh	r3, [r4, #12]
 801211c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012120:	81a3      	strh	r3, [r4, #12]
 8012122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012126:	e7e9      	b.n	80120fc <__ssputs_r+0x88>

08012128 <_svfiprintf_r>:
 8012128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801212c:	4698      	mov	r8, r3
 801212e:	898b      	ldrh	r3, [r1, #12]
 8012130:	061b      	lsls	r3, r3, #24
 8012132:	b09d      	sub	sp, #116	; 0x74
 8012134:	4607      	mov	r7, r0
 8012136:	460d      	mov	r5, r1
 8012138:	4614      	mov	r4, r2
 801213a:	d50e      	bpl.n	801215a <_svfiprintf_r+0x32>
 801213c:	690b      	ldr	r3, [r1, #16]
 801213e:	b963      	cbnz	r3, 801215a <_svfiprintf_r+0x32>
 8012140:	2140      	movs	r1, #64	; 0x40
 8012142:	f7fd fea5 	bl	800fe90 <_malloc_r>
 8012146:	6028      	str	r0, [r5, #0]
 8012148:	6128      	str	r0, [r5, #16]
 801214a:	b920      	cbnz	r0, 8012156 <_svfiprintf_r+0x2e>
 801214c:	230c      	movs	r3, #12
 801214e:	603b      	str	r3, [r7, #0]
 8012150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012154:	e0d0      	b.n	80122f8 <_svfiprintf_r+0x1d0>
 8012156:	2340      	movs	r3, #64	; 0x40
 8012158:	616b      	str	r3, [r5, #20]
 801215a:	2300      	movs	r3, #0
 801215c:	9309      	str	r3, [sp, #36]	; 0x24
 801215e:	2320      	movs	r3, #32
 8012160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012164:	f8cd 800c 	str.w	r8, [sp, #12]
 8012168:	2330      	movs	r3, #48	; 0x30
 801216a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012310 <_svfiprintf_r+0x1e8>
 801216e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012172:	f04f 0901 	mov.w	r9, #1
 8012176:	4623      	mov	r3, r4
 8012178:	469a      	mov	sl, r3
 801217a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801217e:	b10a      	cbz	r2, 8012184 <_svfiprintf_r+0x5c>
 8012180:	2a25      	cmp	r2, #37	; 0x25
 8012182:	d1f9      	bne.n	8012178 <_svfiprintf_r+0x50>
 8012184:	ebba 0b04 	subs.w	fp, sl, r4
 8012188:	d00b      	beq.n	80121a2 <_svfiprintf_r+0x7a>
 801218a:	465b      	mov	r3, fp
 801218c:	4622      	mov	r2, r4
 801218e:	4629      	mov	r1, r5
 8012190:	4638      	mov	r0, r7
 8012192:	f7ff ff6f 	bl	8012074 <__ssputs_r>
 8012196:	3001      	adds	r0, #1
 8012198:	f000 80a9 	beq.w	80122ee <_svfiprintf_r+0x1c6>
 801219c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801219e:	445a      	add	r2, fp
 80121a0:	9209      	str	r2, [sp, #36]	; 0x24
 80121a2:	f89a 3000 	ldrb.w	r3, [sl]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f000 80a1 	beq.w	80122ee <_svfiprintf_r+0x1c6>
 80121ac:	2300      	movs	r3, #0
 80121ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121b6:	f10a 0a01 	add.w	sl, sl, #1
 80121ba:	9304      	str	r3, [sp, #16]
 80121bc:	9307      	str	r3, [sp, #28]
 80121be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121c2:	931a      	str	r3, [sp, #104]	; 0x68
 80121c4:	4654      	mov	r4, sl
 80121c6:	2205      	movs	r2, #5
 80121c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121cc:	4850      	ldr	r0, [pc, #320]	; (8012310 <_svfiprintf_r+0x1e8>)
 80121ce:	f7ee f807 	bl	80001e0 <memchr>
 80121d2:	9a04      	ldr	r2, [sp, #16]
 80121d4:	b9d8      	cbnz	r0, 801220e <_svfiprintf_r+0xe6>
 80121d6:	06d0      	lsls	r0, r2, #27
 80121d8:	bf44      	itt	mi
 80121da:	2320      	movmi	r3, #32
 80121dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121e0:	0711      	lsls	r1, r2, #28
 80121e2:	bf44      	itt	mi
 80121e4:	232b      	movmi	r3, #43	; 0x2b
 80121e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121ea:	f89a 3000 	ldrb.w	r3, [sl]
 80121ee:	2b2a      	cmp	r3, #42	; 0x2a
 80121f0:	d015      	beq.n	801221e <_svfiprintf_r+0xf6>
 80121f2:	9a07      	ldr	r2, [sp, #28]
 80121f4:	4654      	mov	r4, sl
 80121f6:	2000      	movs	r0, #0
 80121f8:	f04f 0c0a 	mov.w	ip, #10
 80121fc:	4621      	mov	r1, r4
 80121fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012202:	3b30      	subs	r3, #48	; 0x30
 8012204:	2b09      	cmp	r3, #9
 8012206:	d94d      	bls.n	80122a4 <_svfiprintf_r+0x17c>
 8012208:	b1b0      	cbz	r0, 8012238 <_svfiprintf_r+0x110>
 801220a:	9207      	str	r2, [sp, #28]
 801220c:	e014      	b.n	8012238 <_svfiprintf_r+0x110>
 801220e:	eba0 0308 	sub.w	r3, r0, r8
 8012212:	fa09 f303 	lsl.w	r3, r9, r3
 8012216:	4313      	orrs	r3, r2
 8012218:	9304      	str	r3, [sp, #16]
 801221a:	46a2      	mov	sl, r4
 801221c:	e7d2      	b.n	80121c4 <_svfiprintf_r+0x9c>
 801221e:	9b03      	ldr	r3, [sp, #12]
 8012220:	1d19      	adds	r1, r3, #4
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	9103      	str	r1, [sp, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	bfbb      	ittet	lt
 801222a:	425b      	neglt	r3, r3
 801222c:	f042 0202 	orrlt.w	r2, r2, #2
 8012230:	9307      	strge	r3, [sp, #28]
 8012232:	9307      	strlt	r3, [sp, #28]
 8012234:	bfb8      	it	lt
 8012236:	9204      	strlt	r2, [sp, #16]
 8012238:	7823      	ldrb	r3, [r4, #0]
 801223a:	2b2e      	cmp	r3, #46	; 0x2e
 801223c:	d10c      	bne.n	8012258 <_svfiprintf_r+0x130>
 801223e:	7863      	ldrb	r3, [r4, #1]
 8012240:	2b2a      	cmp	r3, #42	; 0x2a
 8012242:	d134      	bne.n	80122ae <_svfiprintf_r+0x186>
 8012244:	9b03      	ldr	r3, [sp, #12]
 8012246:	1d1a      	adds	r2, r3, #4
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	9203      	str	r2, [sp, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	bfb8      	it	lt
 8012250:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012254:	3402      	adds	r4, #2
 8012256:	9305      	str	r3, [sp, #20]
 8012258:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012320 <_svfiprintf_r+0x1f8>
 801225c:	7821      	ldrb	r1, [r4, #0]
 801225e:	2203      	movs	r2, #3
 8012260:	4650      	mov	r0, sl
 8012262:	f7ed ffbd 	bl	80001e0 <memchr>
 8012266:	b138      	cbz	r0, 8012278 <_svfiprintf_r+0x150>
 8012268:	9b04      	ldr	r3, [sp, #16]
 801226a:	eba0 000a 	sub.w	r0, r0, sl
 801226e:	2240      	movs	r2, #64	; 0x40
 8012270:	4082      	lsls	r2, r0
 8012272:	4313      	orrs	r3, r2
 8012274:	3401      	adds	r4, #1
 8012276:	9304      	str	r3, [sp, #16]
 8012278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801227c:	4825      	ldr	r0, [pc, #148]	; (8012314 <_svfiprintf_r+0x1ec>)
 801227e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012282:	2206      	movs	r2, #6
 8012284:	f7ed ffac 	bl	80001e0 <memchr>
 8012288:	2800      	cmp	r0, #0
 801228a:	d038      	beq.n	80122fe <_svfiprintf_r+0x1d6>
 801228c:	4b22      	ldr	r3, [pc, #136]	; (8012318 <_svfiprintf_r+0x1f0>)
 801228e:	bb1b      	cbnz	r3, 80122d8 <_svfiprintf_r+0x1b0>
 8012290:	9b03      	ldr	r3, [sp, #12]
 8012292:	3307      	adds	r3, #7
 8012294:	f023 0307 	bic.w	r3, r3, #7
 8012298:	3308      	adds	r3, #8
 801229a:	9303      	str	r3, [sp, #12]
 801229c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801229e:	4433      	add	r3, r6
 80122a0:	9309      	str	r3, [sp, #36]	; 0x24
 80122a2:	e768      	b.n	8012176 <_svfiprintf_r+0x4e>
 80122a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80122a8:	460c      	mov	r4, r1
 80122aa:	2001      	movs	r0, #1
 80122ac:	e7a6      	b.n	80121fc <_svfiprintf_r+0xd4>
 80122ae:	2300      	movs	r3, #0
 80122b0:	3401      	adds	r4, #1
 80122b2:	9305      	str	r3, [sp, #20]
 80122b4:	4619      	mov	r1, r3
 80122b6:	f04f 0c0a 	mov.w	ip, #10
 80122ba:	4620      	mov	r0, r4
 80122bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122c0:	3a30      	subs	r2, #48	; 0x30
 80122c2:	2a09      	cmp	r2, #9
 80122c4:	d903      	bls.n	80122ce <_svfiprintf_r+0x1a6>
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d0c6      	beq.n	8012258 <_svfiprintf_r+0x130>
 80122ca:	9105      	str	r1, [sp, #20]
 80122cc:	e7c4      	b.n	8012258 <_svfiprintf_r+0x130>
 80122ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80122d2:	4604      	mov	r4, r0
 80122d4:	2301      	movs	r3, #1
 80122d6:	e7f0      	b.n	80122ba <_svfiprintf_r+0x192>
 80122d8:	ab03      	add	r3, sp, #12
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	462a      	mov	r2, r5
 80122de:	4b0f      	ldr	r3, [pc, #60]	; (801231c <_svfiprintf_r+0x1f4>)
 80122e0:	a904      	add	r1, sp, #16
 80122e2:	4638      	mov	r0, r7
 80122e4:	f7fd ff00 	bl	80100e8 <_printf_float>
 80122e8:	1c42      	adds	r2, r0, #1
 80122ea:	4606      	mov	r6, r0
 80122ec:	d1d6      	bne.n	801229c <_svfiprintf_r+0x174>
 80122ee:	89ab      	ldrh	r3, [r5, #12]
 80122f0:	065b      	lsls	r3, r3, #25
 80122f2:	f53f af2d 	bmi.w	8012150 <_svfiprintf_r+0x28>
 80122f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122f8:	b01d      	add	sp, #116	; 0x74
 80122fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122fe:	ab03      	add	r3, sp, #12
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	462a      	mov	r2, r5
 8012304:	4b05      	ldr	r3, [pc, #20]	; (801231c <_svfiprintf_r+0x1f4>)
 8012306:	a904      	add	r1, sp, #16
 8012308:	4638      	mov	r0, r7
 801230a:	f7fe f991 	bl	8010630 <_printf_i>
 801230e:	e7eb      	b.n	80122e8 <_svfiprintf_r+0x1c0>
 8012310:	080143cc 	.word	0x080143cc
 8012314:	080143d6 	.word	0x080143d6
 8012318:	080100e9 	.word	0x080100e9
 801231c:	08012075 	.word	0x08012075
 8012320:	080143d2 	.word	0x080143d2

08012324 <__sflush_r>:
 8012324:	898a      	ldrh	r2, [r1, #12]
 8012326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801232a:	4605      	mov	r5, r0
 801232c:	0710      	lsls	r0, r2, #28
 801232e:	460c      	mov	r4, r1
 8012330:	d458      	bmi.n	80123e4 <__sflush_r+0xc0>
 8012332:	684b      	ldr	r3, [r1, #4]
 8012334:	2b00      	cmp	r3, #0
 8012336:	dc05      	bgt.n	8012344 <__sflush_r+0x20>
 8012338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801233a:	2b00      	cmp	r3, #0
 801233c:	dc02      	bgt.n	8012344 <__sflush_r+0x20>
 801233e:	2000      	movs	r0, #0
 8012340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012346:	2e00      	cmp	r6, #0
 8012348:	d0f9      	beq.n	801233e <__sflush_r+0x1a>
 801234a:	2300      	movs	r3, #0
 801234c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012350:	682f      	ldr	r7, [r5, #0]
 8012352:	6a21      	ldr	r1, [r4, #32]
 8012354:	602b      	str	r3, [r5, #0]
 8012356:	d032      	beq.n	80123be <__sflush_r+0x9a>
 8012358:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801235a:	89a3      	ldrh	r3, [r4, #12]
 801235c:	075a      	lsls	r2, r3, #29
 801235e:	d505      	bpl.n	801236c <__sflush_r+0x48>
 8012360:	6863      	ldr	r3, [r4, #4]
 8012362:	1ac0      	subs	r0, r0, r3
 8012364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012366:	b10b      	cbz	r3, 801236c <__sflush_r+0x48>
 8012368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801236a:	1ac0      	subs	r0, r0, r3
 801236c:	2300      	movs	r3, #0
 801236e:	4602      	mov	r2, r0
 8012370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012372:	6a21      	ldr	r1, [r4, #32]
 8012374:	4628      	mov	r0, r5
 8012376:	47b0      	blx	r6
 8012378:	1c43      	adds	r3, r0, #1
 801237a:	89a3      	ldrh	r3, [r4, #12]
 801237c:	d106      	bne.n	801238c <__sflush_r+0x68>
 801237e:	6829      	ldr	r1, [r5, #0]
 8012380:	291d      	cmp	r1, #29
 8012382:	d82b      	bhi.n	80123dc <__sflush_r+0xb8>
 8012384:	4a29      	ldr	r2, [pc, #164]	; (801242c <__sflush_r+0x108>)
 8012386:	410a      	asrs	r2, r1
 8012388:	07d6      	lsls	r6, r2, #31
 801238a:	d427      	bmi.n	80123dc <__sflush_r+0xb8>
 801238c:	2200      	movs	r2, #0
 801238e:	6062      	str	r2, [r4, #4]
 8012390:	04d9      	lsls	r1, r3, #19
 8012392:	6922      	ldr	r2, [r4, #16]
 8012394:	6022      	str	r2, [r4, #0]
 8012396:	d504      	bpl.n	80123a2 <__sflush_r+0x7e>
 8012398:	1c42      	adds	r2, r0, #1
 801239a:	d101      	bne.n	80123a0 <__sflush_r+0x7c>
 801239c:	682b      	ldr	r3, [r5, #0]
 801239e:	b903      	cbnz	r3, 80123a2 <__sflush_r+0x7e>
 80123a0:	6560      	str	r0, [r4, #84]	; 0x54
 80123a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123a4:	602f      	str	r7, [r5, #0]
 80123a6:	2900      	cmp	r1, #0
 80123a8:	d0c9      	beq.n	801233e <__sflush_r+0x1a>
 80123aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123ae:	4299      	cmp	r1, r3
 80123b0:	d002      	beq.n	80123b8 <__sflush_r+0x94>
 80123b2:	4628      	mov	r0, r5
 80123b4:	f7ff fa96 	bl	80118e4 <_free_r>
 80123b8:	2000      	movs	r0, #0
 80123ba:	6360      	str	r0, [r4, #52]	; 0x34
 80123bc:	e7c0      	b.n	8012340 <__sflush_r+0x1c>
 80123be:	2301      	movs	r3, #1
 80123c0:	4628      	mov	r0, r5
 80123c2:	47b0      	blx	r6
 80123c4:	1c41      	adds	r1, r0, #1
 80123c6:	d1c8      	bne.n	801235a <__sflush_r+0x36>
 80123c8:	682b      	ldr	r3, [r5, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d0c5      	beq.n	801235a <__sflush_r+0x36>
 80123ce:	2b1d      	cmp	r3, #29
 80123d0:	d001      	beq.n	80123d6 <__sflush_r+0xb2>
 80123d2:	2b16      	cmp	r3, #22
 80123d4:	d101      	bne.n	80123da <__sflush_r+0xb6>
 80123d6:	602f      	str	r7, [r5, #0]
 80123d8:	e7b1      	b.n	801233e <__sflush_r+0x1a>
 80123da:	89a3      	ldrh	r3, [r4, #12]
 80123dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123e0:	81a3      	strh	r3, [r4, #12]
 80123e2:	e7ad      	b.n	8012340 <__sflush_r+0x1c>
 80123e4:	690f      	ldr	r7, [r1, #16]
 80123e6:	2f00      	cmp	r7, #0
 80123e8:	d0a9      	beq.n	801233e <__sflush_r+0x1a>
 80123ea:	0793      	lsls	r3, r2, #30
 80123ec:	680e      	ldr	r6, [r1, #0]
 80123ee:	bf08      	it	eq
 80123f0:	694b      	ldreq	r3, [r1, #20]
 80123f2:	600f      	str	r7, [r1, #0]
 80123f4:	bf18      	it	ne
 80123f6:	2300      	movne	r3, #0
 80123f8:	eba6 0807 	sub.w	r8, r6, r7
 80123fc:	608b      	str	r3, [r1, #8]
 80123fe:	f1b8 0f00 	cmp.w	r8, #0
 8012402:	dd9c      	ble.n	801233e <__sflush_r+0x1a>
 8012404:	6a21      	ldr	r1, [r4, #32]
 8012406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012408:	4643      	mov	r3, r8
 801240a:	463a      	mov	r2, r7
 801240c:	4628      	mov	r0, r5
 801240e:	47b0      	blx	r6
 8012410:	2800      	cmp	r0, #0
 8012412:	dc06      	bgt.n	8012422 <__sflush_r+0xfe>
 8012414:	89a3      	ldrh	r3, [r4, #12]
 8012416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801241a:	81a3      	strh	r3, [r4, #12]
 801241c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012420:	e78e      	b.n	8012340 <__sflush_r+0x1c>
 8012422:	4407      	add	r7, r0
 8012424:	eba8 0800 	sub.w	r8, r8, r0
 8012428:	e7e9      	b.n	80123fe <__sflush_r+0xda>
 801242a:	bf00      	nop
 801242c:	dfbffffe 	.word	0xdfbffffe

08012430 <_fflush_r>:
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	690b      	ldr	r3, [r1, #16]
 8012434:	4605      	mov	r5, r0
 8012436:	460c      	mov	r4, r1
 8012438:	b913      	cbnz	r3, 8012440 <_fflush_r+0x10>
 801243a:	2500      	movs	r5, #0
 801243c:	4628      	mov	r0, r5
 801243e:	bd38      	pop	{r3, r4, r5, pc}
 8012440:	b118      	cbz	r0, 801244a <_fflush_r+0x1a>
 8012442:	6a03      	ldr	r3, [r0, #32]
 8012444:	b90b      	cbnz	r3, 801244a <_fflush_r+0x1a>
 8012446:	f7fe fa8f 	bl	8010968 <__sinit>
 801244a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d0f3      	beq.n	801243a <_fflush_r+0xa>
 8012452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012454:	07d0      	lsls	r0, r2, #31
 8012456:	d404      	bmi.n	8012462 <_fflush_r+0x32>
 8012458:	0599      	lsls	r1, r3, #22
 801245a:	d402      	bmi.n	8012462 <_fflush_r+0x32>
 801245c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801245e:	f7fe fbb7 	bl	8010bd0 <__retarget_lock_acquire_recursive>
 8012462:	4628      	mov	r0, r5
 8012464:	4621      	mov	r1, r4
 8012466:	f7ff ff5d 	bl	8012324 <__sflush_r>
 801246a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801246c:	07da      	lsls	r2, r3, #31
 801246e:	4605      	mov	r5, r0
 8012470:	d4e4      	bmi.n	801243c <_fflush_r+0xc>
 8012472:	89a3      	ldrh	r3, [r4, #12]
 8012474:	059b      	lsls	r3, r3, #22
 8012476:	d4e1      	bmi.n	801243c <_fflush_r+0xc>
 8012478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801247a:	f7fe fbaa 	bl	8010bd2 <__retarget_lock_release_recursive>
 801247e:	e7dd      	b.n	801243c <_fflush_r+0xc>

08012480 <memmove>:
 8012480:	4288      	cmp	r0, r1
 8012482:	b510      	push	{r4, lr}
 8012484:	eb01 0402 	add.w	r4, r1, r2
 8012488:	d902      	bls.n	8012490 <memmove+0x10>
 801248a:	4284      	cmp	r4, r0
 801248c:	4623      	mov	r3, r4
 801248e:	d807      	bhi.n	80124a0 <memmove+0x20>
 8012490:	1e43      	subs	r3, r0, #1
 8012492:	42a1      	cmp	r1, r4
 8012494:	d008      	beq.n	80124a8 <memmove+0x28>
 8012496:	f811 2b01 	ldrb.w	r2, [r1], #1
 801249a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801249e:	e7f8      	b.n	8012492 <memmove+0x12>
 80124a0:	4402      	add	r2, r0
 80124a2:	4601      	mov	r1, r0
 80124a4:	428a      	cmp	r2, r1
 80124a6:	d100      	bne.n	80124aa <memmove+0x2a>
 80124a8:	bd10      	pop	{r4, pc}
 80124aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124b2:	e7f7      	b.n	80124a4 <memmove+0x24>

080124b4 <__assert_func>:
 80124b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124b6:	4614      	mov	r4, r2
 80124b8:	461a      	mov	r2, r3
 80124ba:	4b09      	ldr	r3, [pc, #36]	; (80124e0 <__assert_func+0x2c>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4605      	mov	r5, r0
 80124c0:	68d8      	ldr	r0, [r3, #12]
 80124c2:	b14c      	cbz	r4, 80124d8 <__assert_func+0x24>
 80124c4:	4b07      	ldr	r3, [pc, #28]	; (80124e4 <__assert_func+0x30>)
 80124c6:	9100      	str	r1, [sp, #0]
 80124c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80124cc:	4906      	ldr	r1, [pc, #24]	; (80124e8 <__assert_func+0x34>)
 80124ce:	462b      	mov	r3, r5
 80124d0:	f000 f872 	bl	80125b8 <fiprintf>
 80124d4:	f000 f882 	bl	80125dc <abort>
 80124d8:	4b04      	ldr	r3, [pc, #16]	; (80124ec <__assert_func+0x38>)
 80124da:	461c      	mov	r4, r3
 80124dc:	e7f3      	b.n	80124c6 <__assert_func+0x12>
 80124de:	bf00      	nop
 80124e0:	2000017c 	.word	0x2000017c
 80124e4:	080143e7 	.word	0x080143e7
 80124e8:	080143f4 	.word	0x080143f4
 80124ec:	08014422 	.word	0x08014422

080124f0 <_calloc_r>:
 80124f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124f2:	fba1 2402 	umull	r2, r4, r1, r2
 80124f6:	b94c      	cbnz	r4, 801250c <_calloc_r+0x1c>
 80124f8:	4611      	mov	r1, r2
 80124fa:	9201      	str	r2, [sp, #4]
 80124fc:	f7fd fcc8 	bl	800fe90 <_malloc_r>
 8012500:	9a01      	ldr	r2, [sp, #4]
 8012502:	4605      	mov	r5, r0
 8012504:	b930      	cbnz	r0, 8012514 <_calloc_r+0x24>
 8012506:	4628      	mov	r0, r5
 8012508:	b003      	add	sp, #12
 801250a:	bd30      	pop	{r4, r5, pc}
 801250c:	220c      	movs	r2, #12
 801250e:	6002      	str	r2, [r0, #0]
 8012510:	2500      	movs	r5, #0
 8012512:	e7f8      	b.n	8012506 <_calloc_r+0x16>
 8012514:	4621      	mov	r1, r4
 8012516:	f7fe fac0 	bl	8010a9a <memset>
 801251a:	e7f4      	b.n	8012506 <_calloc_r+0x16>

0801251c <__ascii_mbtowc>:
 801251c:	b082      	sub	sp, #8
 801251e:	b901      	cbnz	r1, 8012522 <__ascii_mbtowc+0x6>
 8012520:	a901      	add	r1, sp, #4
 8012522:	b142      	cbz	r2, 8012536 <__ascii_mbtowc+0x1a>
 8012524:	b14b      	cbz	r3, 801253a <__ascii_mbtowc+0x1e>
 8012526:	7813      	ldrb	r3, [r2, #0]
 8012528:	600b      	str	r3, [r1, #0]
 801252a:	7812      	ldrb	r2, [r2, #0]
 801252c:	1e10      	subs	r0, r2, #0
 801252e:	bf18      	it	ne
 8012530:	2001      	movne	r0, #1
 8012532:	b002      	add	sp, #8
 8012534:	4770      	bx	lr
 8012536:	4610      	mov	r0, r2
 8012538:	e7fb      	b.n	8012532 <__ascii_mbtowc+0x16>
 801253a:	f06f 0001 	mvn.w	r0, #1
 801253e:	e7f8      	b.n	8012532 <__ascii_mbtowc+0x16>

08012540 <_realloc_r>:
 8012540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012544:	4680      	mov	r8, r0
 8012546:	4614      	mov	r4, r2
 8012548:	460e      	mov	r6, r1
 801254a:	b921      	cbnz	r1, 8012556 <_realloc_r+0x16>
 801254c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012550:	4611      	mov	r1, r2
 8012552:	f7fd bc9d 	b.w	800fe90 <_malloc_r>
 8012556:	b92a      	cbnz	r2, 8012564 <_realloc_r+0x24>
 8012558:	f7ff f9c4 	bl	80118e4 <_free_r>
 801255c:	4625      	mov	r5, r4
 801255e:	4628      	mov	r0, r5
 8012560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012564:	f000 f841 	bl	80125ea <_malloc_usable_size_r>
 8012568:	4284      	cmp	r4, r0
 801256a:	4607      	mov	r7, r0
 801256c:	d802      	bhi.n	8012574 <_realloc_r+0x34>
 801256e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012572:	d812      	bhi.n	801259a <_realloc_r+0x5a>
 8012574:	4621      	mov	r1, r4
 8012576:	4640      	mov	r0, r8
 8012578:	f7fd fc8a 	bl	800fe90 <_malloc_r>
 801257c:	4605      	mov	r5, r0
 801257e:	2800      	cmp	r0, #0
 8012580:	d0ed      	beq.n	801255e <_realloc_r+0x1e>
 8012582:	42bc      	cmp	r4, r7
 8012584:	4622      	mov	r2, r4
 8012586:	4631      	mov	r1, r6
 8012588:	bf28      	it	cs
 801258a:	463a      	movcs	r2, r7
 801258c:	f7fe fb22 	bl	8010bd4 <memcpy>
 8012590:	4631      	mov	r1, r6
 8012592:	4640      	mov	r0, r8
 8012594:	f7ff f9a6 	bl	80118e4 <_free_r>
 8012598:	e7e1      	b.n	801255e <_realloc_r+0x1e>
 801259a:	4635      	mov	r5, r6
 801259c:	e7df      	b.n	801255e <_realloc_r+0x1e>

0801259e <__ascii_wctomb>:
 801259e:	b149      	cbz	r1, 80125b4 <__ascii_wctomb+0x16>
 80125a0:	2aff      	cmp	r2, #255	; 0xff
 80125a2:	bf85      	ittet	hi
 80125a4:	238a      	movhi	r3, #138	; 0x8a
 80125a6:	6003      	strhi	r3, [r0, #0]
 80125a8:	700a      	strbls	r2, [r1, #0]
 80125aa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80125ae:	bf98      	it	ls
 80125b0:	2001      	movls	r0, #1
 80125b2:	4770      	bx	lr
 80125b4:	4608      	mov	r0, r1
 80125b6:	4770      	bx	lr

080125b8 <fiprintf>:
 80125b8:	b40e      	push	{r1, r2, r3}
 80125ba:	b503      	push	{r0, r1, lr}
 80125bc:	4601      	mov	r1, r0
 80125be:	ab03      	add	r3, sp, #12
 80125c0:	4805      	ldr	r0, [pc, #20]	; (80125d8 <fiprintf+0x20>)
 80125c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125c6:	6800      	ldr	r0, [r0, #0]
 80125c8:	9301      	str	r3, [sp, #4]
 80125ca:	f000 f83f 	bl	801264c <_vfiprintf_r>
 80125ce:	b002      	add	sp, #8
 80125d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125d4:	b003      	add	sp, #12
 80125d6:	4770      	bx	lr
 80125d8:	2000017c 	.word	0x2000017c

080125dc <abort>:
 80125dc:	b508      	push	{r3, lr}
 80125de:	2006      	movs	r0, #6
 80125e0:	f000 fa0c 	bl	80129fc <raise>
 80125e4:	2001      	movs	r0, #1
 80125e6:	f7ef fed7 	bl	8002398 <_exit>

080125ea <_malloc_usable_size_r>:
 80125ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125ee:	1f18      	subs	r0, r3, #4
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	bfbc      	itt	lt
 80125f4:	580b      	ldrlt	r3, [r1, r0]
 80125f6:	18c0      	addlt	r0, r0, r3
 80125f8:	4770      	bx	lr

080125fa <__sfputc_r>:
 80125fa:	6893      	ldr	r3, [r2, #8]
 80125fc:	3b01      	subs	r3, #1
 80125fe:	2b00      	cmp	r3, #0
 8012600:	b410      	push	{r4}
 8012602:	6093      	str	r3, [r2, #8]
 8012604:	da08      	bge.n	8012618 <__sfputc_r+0x1e>
 8012606:	6994      	ldr	r4, [r2, #24]
 8012608:	42a3      	cmp	r3, r4
 801260a:	db01      	blt.n	8012610 <__sfputc_r+0x16>
 801260c:	290a      	cmp	r1, #10
 801260e:	d103      	bne.n	8012618 <__sfputc_r+0x1e>
 8012610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012614:	f000 b934 	b.w	8012880 <__swbuf_r>
 8012618:	6813      	ldr	r3, [r2, #0]
 801261a:	1c58      	adds	r0, r3, #1
 801261c:	6010      	str	r0, [r2, #0]
 801261e:	7019      	strb	r1, [r3, #0]
 8012620:	4608      	mov	r0, r1
 8012622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012626:	4770      	bx	lr

08012628 <__sfputs_r>:
 8012628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262a:	4606      	mov	r6, r0
 801262c:	460f      	mov	r7, r1
 801262e:	4614      	mov	r4, r2
 8012630:	18d5      	adds	r5, r2, r3
 8012632:	42ac      	cmp	r4, r5
 8012634:	d101      	bne.n	801263a <__sfputs_r+0x12>
 8012636:	2000      	movs	r0, #0
 8012638:	e007      	b.n	801264a <__sfputs_r+0x22>
 801263a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801263e:	463a      	mov	r2, r7
 8012640:	4630      	mov	r0, r6
 8012642:	f7ff ffda 	bl	80125fa <__sfputc_r>
 8012646:	1c43      	adds	r3, r0, #1
 8012648:	d1f3      	bne.n	8012632 <__sfputs_r+0xa>
 801264a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801264c <_vfiprintf_r>:
 801264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012650:	460d      	mov	r5, r1
 8012652:	b09d      	sub	sp, #116	; 0x74
 8012654:	4614      	mov	r4, r2
 8012656:	4698      	mov	r8, r3
 8012658:	4606      	mov	r6, r0
 801265a:	b118      	cbz	r0, 8012664 <_vfiprintf_r+0x18>
 801265c:	6a03      	ldr	r3, [r0, #32]
 801265e:	b90b      	cbnz	r3, 8012664 <_vfiprintf_r+0x18>
 8012660:	f7fe f982 	bl	8010968 <__sinit>
 8012664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012666:	07d9      	lsls	r1, r3, #31
 8012668:	d405      	bmi.n	8012676 <_vfiprintf_r+0x2a>
 801266a:	89ab      	ldrh	r3, [r5, #12]
 801266c:	059a      	lsls	r2, r3, #22
 801266e:	d402      	bmi.n	8012676 <_vfiprintf_r+0x2a>
 8012670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012672:	f7fe faad 	bl	8010bd0 <__retarget_lock_acquire_recursive>
 8012676:	89ab      	ldrh	r3, [r5, #12]
 8012678:	071b      	lsls	r3, r3, #28
 801267a:	d501      	bpl.n	8012680 <_vfiprintf_r+0x34>
 801267c:	692b      	ldr	r3, [r5, #16]
 801267e:	b99b      	cbnz	r3, 80126a8 <_vfiprintf_r+0x5c>
 8012680:	4629      	mov	r1, r5
 8012682:	4630      	mov	r0, r6
 8012684:	f000 f93a 	bl	80128fc <__swsetup_r>
 8012688:	b170      	cbz	r0, 80126a8 <_vfiprintf_r+0x5c>
 801268a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801268c:	07dc      	lsls	r4, r3, #31
 801268e:	d504      	bpl.n	801269a <_vfiprintf_r+0x4e>
 8012690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012694:	b01d      	add	sp, #116	; 0x74
 8012696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269a:	89ab      	ldrh	r3, [r5, #12]
 801269c:	0598      	lsls	r0, r3, #22
 801269e:	d4f7      	bmi.n	8012690 <_vfiprintf_r+0x44>
 80126a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126a2:	f7fe fa96 	bl	8010bd2 <__retarget_lock_release_recursive>
 80126a6:	e7f3      	b.n	8012690 <_vfiprintf_r+0x44>
 80126a8:	2300      	movs	r3, #0
 80126aa:	9309      	str	r3, [sp, #36]	; 0x24
 80126ac:	2320      	movs	r3, #32
 80126ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80126b6:	2330      	movs	r3, #48	; 0x30
 80126b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801286c <_vfiprintf_r+0x220>
 80126bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126c0:	f04f 0901 	mov.w	r9, #1
 80126c4:	4623      	mov	r3, r4
 80126c6:	469a      	mov	sl, r3
 80126c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126cc:	b10a      	cbz	r2, 80126d2 <_vfiprintf_r+0x86>
 80126ce:	2a25      	cmp	r2, #37	; 0x25
 80126d0:	d1f9      	bne.n	80126c6 <_vfiprintf_r+0x7a>
 80126d2:	ebba 0b04 	subs.w	fp, sl, r4
 80126d6:	d00b      	beq.n	80126f0 <_vfiprintf_r+0xa4>
 80126d8:	465b      	mov	r3, fp
 80126da:	4622      	mov	r2, r4
 80126dc:	4629      	mov	r1, r5
 80126de:	4630      	mov	r0, r6
 80126e0:	f7ff ffa2 	bl	8012628 <__sfputs_r>
 80126e4:	3001      	adds	r0, #1
 80126e6:	f000 80a9 	beq.w	801283c <_vfiprintf_r+0x1f0>
 80126ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126ec:	445a      	add	r2, fp
 80126ee:	9209      	str	r2, [sp, #36]	; 0x24
 80126f0:	f89a 3000 	ldrb.w	r3, [sl]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f000 80a1 	beq.w	801283c <_vfiprintf_r+0x1f0>
 80126fa:	2300      	movs	r3, #0
 80126fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012704:	f10a 0a01 	add.w	sl, sl, #1
 8012708:	9304      	str	r3, [sp, #16]
 801270a:	9307      	str	r3, [sp, #28]
 801270c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012710:	931a      	str	r3, [sp, #104]	; 0x68
 8012712:	4654      	mov	r4, sl
 8012714:	2205      	movs	r2, #5
 8012716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801271a:	4854      	ldr	r0, [pc, #336]	; (801286c <_vfiprintf_r+0x220>)
 801271c:	f7ed fd60 	bl	80001e0 <memchr>
 8012720:	9a04      	ldr	r2, [sp, #16]
 8012722:	b9d8      	cbnz	r0, 801275c <_vfiprintf_r+0x110>
 8012724:	06d1      	lsls	r1, r2, #27
 8012726:	bf44      	itt	mi
 8012728:	2320      	movmi	r3, #32
 801272a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801272e:	0713      	lsls	r3, r2, #28
 8012730:	bf44      	itt	mi
 8012732:	232b      	movmi	r3, #43	; 0x2b
 8012734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012738:	f89a 3000 	ldrb.w	r3, [sl]
 801273c:	2b2a      	cmp	r3, #42	; 0x2a
 801273e:	d015      	beq.n	801276c <_vfiprintf_r+0x120>
 8012740:	9a07      	ldr	r2, [sp, #28]
 8012742:	4654      	mov	r4, sl
 8012744:	2000      	movs	r0, #0
 8012746:	f04f 0c0a 	mov.w	ip, #10
 801274a:	4621      	mov	r1, r4
 801274c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012750:	3b30      	subs	r3, #48	; 0x30
 8012752:	2b09      	cmp	r3, #9
 8012754:	d94d      	bls.n	80127f2 <_vfiprintf_r+0x1a6>
 8012756:	b1b0      	cbz	r0, 8012786 <_vfiprintf_r+0x13a>
 8012758:	9207      	str	r2, [sp, #28]
 801275a:	e014      	b.n	8012786 <_vfiprintf_r+0x13a>
 801275c:	eba0 0308 	sub.w	r3, r0, r8
 8012760:	fa09 f303 	lsl.w	r3, r9, r3
 8012764:	4313      	orrs	r3, r2
 8012766:	9304      	str	r3, [sp, #16]
 8012768:	46a2      	mov	sl, r4
 801276a:	e7d2      	b.n	8012712 <_vfiprintf_r+0xc6>
 801276c:	9b03      	ldr	r3, [sp, #12]
 801276e:	1d19      	adds	r1, r3, #4
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	9103      	str	r1, [sp, #12]
 8012774:	2b00      	cmp	r3, #0
 8012776:	bfbb      	ittet	lt
 8012778:	425b      	neglt	r3, r3
 801277a:	f042 0202 	orrlt.w	r2, r2, #2
 801277e:	9307      	strge	r3, [sp, #28]
 8012780:	9307      	strlt	r3, [sp, #28]
 8012782:	bfb8      	it	lt
 8012784:	9204      	strlt	r2, [sp, #16]
 8012786:	7823      	ldrb	r3, [r4, #0]
 8012788:	2b2e      	cmp	r3, #46	; 0x2e
 801278a:	d10c      	bne.n	80127a6 <_vfiprintf_r+0x15a>
 801278c:	7863      	ldrb	r3, [r4, #1]
 801278e:	2b2a      	cmp	r3, #42	; 0x2a
 8012790:	d134      	bne.n	80127fc <_vfiprintf_r+0x1b0>
 8012792:	9b03      	ldr	r3, [sp, #12]
 8012794:	1d1a      	adds	r2, r3, #4
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	9203      	str	r2, [sp, #12]
 801279a:	2b00      	cmp	r3, #0
 801279c:	bfb8      	it	lt
 801279e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80127a2:	3402      	adds	r4, #2
 80127a4:	9305      	str	r3, [sp, #20]
 80127a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801287c <_vfiprintf_r+0x230>
 80127aa:	7821      	ldrb	r1, [r4, #0]
 80127ac:	2203      	movs	r2, #3
 80127ae:	4650      	mov	r0, sl
 80127b0:	f7ed fd16 	bl	80001e0 <memchr>
 80127b4:	b138      	cbz	r0, 80127c6 <_vfiprintf_r+0x17a>
 80127b6:	9b04      	ldr	r3, [sp, #16]
 80127b8:	eba0 000a 	sub.w	r0, r0, sl
 80127bc:	2240      	movs	r2, #64	; 0x40
 80127be:	4082      	lsls	r2, r0
 80127c0:	4313      	orrs	r3, r2
 80127c2:	3401      	adds	r4, #1
 80127c4:	9304      	str	r3, [sp, #16]
 80127c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ca:	4829      	ldr	r0, [pc, #164]	; (8012870 <_vfiprintf_r+0x224>)
 80127cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127d0:	2206      	movs	r2, #6
 80127d2:	f7ed fd05 	bl	80001e0 <memchr>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d03f      	beq.n	801285a <_vfiprintf_r+0x20e>
 80127da:	4b26      	ldr	r3, [pc, #152]	; (8012874 <_vfiprintf_r+0x228>)
 80127dc:	bb1b      	cbnz	r3, 8012826 <_vfiprintf_r+0x1da>
 80127de:	9b03      	ldr	r3, [sp, #12]
 80127e0:	3307      	adds	r3, #7
 80127e2:	f023 0307 	bic.w	r3, r3, #7
 80127e6:	3308      	adds	r3, #8
 80127e8:	9303      	str	r3, [sp, #12]
 80127ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ec:	443b      	add	r3, r7
 80127ee:	9309      	str	r3, [sp, #36]	; 0x24
 80127f0:	e768      	b.n	80126c4 <_vfiprintf_r+0x78>
 80127f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80127f6:	460c      	mov	r4, r1
 80127f8:	2001      	movs	r0, #1
 80127fa:	e7a6      	b.n	801274a <_vfiprintf_r+0xfe>
 80127fc:	2300      	movs	r3, #0
 80127fe:	3401      	adds	r4, #1
 8012800:	9305      	str	r3, [sp, #20]
 8012802:	4619      	mov	r1, r3
 8012804:	f04f 0c0a 	mov.w	ip, #10
 8012808:	4620      	mov	r0, r4
 801280a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801280e:	3a30      	subs	r2, #48	; 0x30
 8012810:	2a09      	cmp	r2, #9
 8012812:	d903      	bls.n	801281c <_vfiprintf_r+0x1d0>
 8012814:	2b00      	cmp	r3, #0
 8012816:	d0c6      	beq.n	80127a6 <_vfiprintf_r+0x15a>
 8012818:	9105      	str	r1, [sp, #20]
 801281a:	e7c4      	b.n	80127a6 <_vfiprintf_r+0x15a>
 801281c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012820:	4604      	mov	r4, r0
 8012822:	2301      	movs	r3, #1
 8012824:	e7f0      	b.n	8012808 <_vfiprintf_r+0x1bc>
 8012826:	ab03      	add	r3, sp, #12
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	462a      	mov	r2, r5
 801282c:	4b12      	ldr	r3, [pc, #72]	; (8012878 <_vfiprintf_r+0x22c>)
 801282e:	a904      	add	r1, sp, #16
 8012830:	4630      	mov	r0, r6
 8012832:	f7fd fc59 	bl	80100e8 <_printf_float>
 8012836:	4607      	mov	r7, r0
 8012838:	1c78      	adds	r0, r7, #1
 801283a:	d1d6      	bne.n	80127ea <_vfiprintf_r+0x19e>
 801283c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801283e:	07d9      	lsls	r1, r3, #31
 8012840:	d405      	bmi.n	801284e <_vfiprintf_r+0x202>
 8012842:	89ab      	ldrh	r3, [r5, #12]
 8012844:	059a      	lsls	r2, r3, #22
 8012846:	d402      	bmi.n	801284e <_vfiprintf_r+0x202>
 8012848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801284a:	f7fe f9c2 	bl	8010bd2 <__retarget_lock_release_recursive>
 801284e:	89ab      	ldrh	r3, [r5, #12]
 8012850:	065b      	lsls	r3, r3, #25
 8012852:	f53f af1d 	bmi.w	8012690 <_vfiprintf_r+0x44>
 8012856:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012858:	e71c      	b.n	8012694 <_vfiprintf_r+0x48>
 801285a:	ab03      	add	r3, sp, #12
 801285c:	9300      	str	r3, [sp, #0]
 801285e:	462a      	mov	r2, r5
 8012860:	4b05      	ldr	r3, [pc, #20]	; (8012878 <_vfiprintf_r+0x22c>)
 8012862:	a904      	add	r1, sp, #16
 8012864:	4630      	mov	r0, r6
 8012866:	f7fd fee3 	bl	8010630 <_printf_i>
 801286a:	e7e4      	b.n	8012836 <_vfiprintf_r+0x1ea>
 801286c:	080143cc 	.word	0x080143cc
 8012870:	080143d6 	.word	0x080143d6
 8012874:	080100e9 	.word	0x080100e9
 8012878:	08012629 	.word	0x08012629
 801287c:	080143d2 	.word	0x080143d2

08012880 <__swbuf_r>:
 8012880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012882:	460e      	mov	r6, r1
 8012884:	4614      	mov	r4, r2
 8012886:	4605      	mov	r5, r0
 8012888:	b118      	cbz	r0, 8012892 <__swbuf_r+0x12>
 801288a:	6a03      	ldr	r3, [r0, #32]
 801288c:	b90b      	cbnz	r3, 8012892 <__swbuf_r+0x12>
 801288e:	f7fe f86b 	bl	8010968 <__sinit>
 8012892:	69a3      	ldr	r3, [r4, #24]
 8012894:	60a3      	str	r3, [r4, #8]
 8012896:	89a3      	ldrh	r3, [r4, #12]
 8012898:	071a      	lsls	r2, r3, #28
 801289a:	d525      	bpl.n	80128e8 <__swbuf_r+0x68>
 801289c:	6923      	ldr	r3, [r4, #16]
 801289e:	b31b      	cbz	r3, 80128e8 <__swbuf_r+0x68>
 80128a0:	6823      	ldr	r3, [r4, #0]
 80128a2:	6922      	ldr	r2, [r4, #16]
 80128a4:	1a98      	subs	r0, r3, r2
 80128a6:	6963      	ldr	r3, [r4, #20]
 80128a8:	b2f6      	uxtb	r6, r6
 80128aa:	4283      	cmp	r3, r0
 80128ac:	4637      	mov	r7, r6
 80128ae:	dc04      	bgt.n	80128ba <__swbuf_r+0x3a>
 80128b0:	4621      	mov	r1, r4
 80128b2:	4628      	mov	r0, r5
 80128b4:	f7ff fdbc 	bl	8012430 <_fflush_r>
 80128b8:	b9e0      	cbnz	r0, 80128f4 <__swbuf_r+0x74>
 80128ba:	68a3      	ldr	r3, [r4, #8]
 80128bc:	3b01      	subs	r3, #1
 80128be:	60a3      	str	r3, [r4, #8]
 80128c0:	6823      	ldr	r3, [r4, #0]
 80128c2:	1c5a      	adds	r2, r3, #1
 80128c4:	6022      	str	r2, [r4, #0]
 80128c6:	701e      	strb	r6, [r3, #0]
 80128c8:	6962      	ldr	r2, [r4, #20]
 80128ca:	1c43      	adds	r3, r0, #1
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d004      	beq.n	80128da <__swbuf_r+0x5a>
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	07db      	lsls	r3, r3, #31
 80128d4:	d506      	bpl.n	80128e4 <__swbuf_r+0x64>
 80128d6:	2e0a      	cmp	r6, #10
 80128d8:	d104      	bne.n	80128e4 <__swbuf_r+0x64>
 80128da:	4621      	mov	r1, r4
 80128dc:	4628      	mov	r0, r5
 80128de:	f7ff fda7 	bl	8012430 <_fflush_r>
 80128e2:	b938      	cbnz	r0, 80128f4 <__swbuf_r+0x74>
 80128e4:	4638      	mov	r0, r7
 80128e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128e8:	4621      	mov	r1, r4
 80128ea:	4628      	mov	r0, r5
 80128ec:	f000 f806 	bl	80128fc <__swsetup_r>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d0d5      	beq.n	80128a0 <__swbuf_r+0x20>
 80128f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80128f8:	e7f4      	b.n	80128e4 <__swbuf_r+0x64>
	...

080128fc <__swsetup_r>:
 80128fc:	b538      	push	{r3, r4, r5, lr}
 80128fe:	4b2a      	ldr	r3, [pc, #168]	; (80129a8 <__swsetup_r+0xac>)
 8012900:	4605      	mov	r5, r0
 8012902:	6818      	ldr	r0, [r3, #0]
 8012904:	460c      	mov	r4, r1
 8012906:	b118      	cbz	r0, 8012910 <__swsetup_r+0x14>
 8012908:	6a03      	ldr	r3, [r0, #32]
 801290a:	b90b      	cbnz	r3, 8012910 <__swsetup_r+0x14>
 801290c:	f7fe f82c 	bl	8010968 <__sinit>
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012916:	0718      	lsls	r0, r3, #28
 8012918:	d422      	bmi.n	8012960 <__swsetup_r+0x64>
 801291a:	06d9      	lsls	r1, r3, #27
 801291c:	d407      	bmi.n	801292e <__swsetup_r+0x32>
 801291e:	2309      	movs	r3, #9
 8012920:	602b      	str	r3, [r5, #0]
 8012922:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012926:	81a3      	strh	r3, [r4, #12]
 8012928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801292c:	e034      	b.n	8012998 <__swsetup_r+0x9c>
 801292e:	0758      	lsls	r0, r3, #29
 8012930:	d512      	bpl.n	8012958 <__swsetup_r+0x5c>
 8012932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012934:	b141      	cbz	r1, 8012948 <__swsetup_r+0x4c>
 8012936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801293a:	4299      	cmp	r1, r3
 801293c:	d002      	beq.n	8012944 <__swsetup_r+0x48>
 801293e:	4628      	mov	r0, r5
 8012940:	f7fe ffd0 	bl	80118e4 <_free_r>
 8012944:	2300      	movs	r3, #0
 8012946:	6363      	str	r3, [r4, #52]	; 0x34
 8012948:	89a3      	ldrh	r3, [r4, #12]
 801294a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801294e:	81a3      	strh	r3, [r4, #12]
 8012950:	2300      	movs	r3, #0
 8012952:	6063      	str	r3, [r4, #4]
 8012954:	6923      	ldr	r3, [r4, #16]
 8012956:	6023      	str	r3, [r4, #0]
 8012958:	89a3      	ldrh	r3, [r4, #12]
 801295a:	f043 0308 	orr.w	r3, r3, #8
 801295e:	81a3      	strh	r3, [r4, #12]
 8012960:	6923      	ldr	r3, [r4, #16]
 8012962:	b94b      	cbnz	r3, 8012978 <__swsetup_r+0x7c>
 8012964:	89a3      	ldrh	r3, [r4, #12]
 8012966:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801296a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801296e:	d003      	beq.n	8012978 <__swsetup_r+0x7c>
 8012970:	4621      	mov	r1, r4
 8012972:	4628      	mov	r0, r5
 8012974:	f000 f884 	bl	8012a80 <__smakebuf_r>
 8012978:	89a0      	ldrh	r0, [r4, #12]
 801297a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801297e:	f010 0301 	ands.w	r3, r0, #1
 8012982:	d00a      	beq.n	801299a <__swsetup_r+0x9e>
 8012984:	2300      	movs	r3, #0
 8012986:	60a3      	str	r3, [r4, #8]
 8012988:	6963      	ldr	r3, [r4, #20]
 801298a:	425b      	negs	r3, r3
 801298c:	61a3      	str	r3, [r4, #24]
 801298e:	6923      	ldr	r3, [r4, #16]
 8012990:	b943      	cbnz	r3, 80129a4 <__swsetup_r+0xa8>
 8012992:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012996:	d1c4      	bne.n	8012922 <__swsetup_r+0x26>
 8012998:	bd38      	pop	{r3, r4, r5, pc}
 801299a:	0781      	lsls	r1, r0, #30
 801299c:	bf58      	it	pl
 801299e:	6963      	ldrpl	r3, [r4, #20]
 80129a0:	60a3      	str	r3, [r4, #8]
 80129a2:	e7f4      	b.n	801298e <__swsetup_r+0x92>
 80129a4:	2000      	movs	r0, #0
 80129a6:	e7f7      	b.n	8012998 <__swsetup_r+0x9c>
 80129a8:	2000017c 	.word	0x2000017c

080129ac <_raise_r>:
 80129ac:	291f      	cmp	r1, #31
 80129ae:	b538      	push	{r3, r4, r5, lr}
 80129b0:	4604      	mov	r4, r0
 80129b2:	460d      	mov	r5, r1
 80129b4:	d904      	bls.n	80129c0 <_raise_r+0x14>
 80129b6:	2316      	movs	r3, #22
 80129b8:	6003      	str	r3, [r0, #0]
 80129ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129be:	bd38      	pop	{r3, r4, r5, pc}
 80129c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80129c2:	b112      	cbz	r2, 80129ca <_raise_r+0x1e>
 80129c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129c8:	b94b      	cbnz	r3, 80129de <_raise_r+0x32>
 80129ca:	4620      	mov	r0, r4
 80129cc:	f000 f830 	bl	8012a30 <_getpid_r>
 80129d0:	462a      	mov	r2, r5
 80129d2:	4601      	mov	r1, r0
 80129d4:	4620      	mov	r0, r4
 80129d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129da:	f000 b817 	b.w	8012a0c <_kill_r>
 80129de:	2b01      	cmp	r3, #1
 80129e0:	d00a      	beq.n	80129f8 <_raise_r+0x4c>
 80129e2:	1c59      	adds	r1, r3, #1
 80129e4:	d103      	bne.n	80129ee <_raise_r+0x42>
 80129e6:	2316      	movs	r3, #22
 80129e8:	6003      	str	r3, [r0, #0]
 80129ea:	2001      	movs	r0, #1
 80129ec:	e7e7      	b.n	80129be <_raise_r+0x12>
 80129ee:	2400      	movs	r4, #0
 80129f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80129f4:	4628      	mov	r0, r5
 80129f6:	4798      	blx	r3
 80129f8:	2000      	movs	r0, #0
 80129fa:	e7e0      	b.n	80129be <_raise_r+0x12>

080129fc <raise>:
 80129fc:	4b02      	ldr	r3, [pc, #8]	; (8012a08 <raise+0xc>)
 80129fe:	4601      	mov	r1, r0
 8012a00:	6818      	ldr	r0, [r3, #0]
 8012a02:	f7ff bfd3 	b.w	80129ac <_raise_r>
 8012a06:	bf00      	nop
 8012a08:	2000017c 	.word	0x2000017c

08012a0c <_kill_r>:
 8012a0c:	b538      	push	{r3, r4, r5, lr}
 8012a0e:	4d07      	ldr	r5, [pc, #28]	; (8012a2c <_kill_r+0x20>)
 8012a10:	2300      	movs	r3, #0
 8012a12:	4604      	mov	r4, r0
 8012a14:	4608      	mov	r0, r1
 8012a16:	4611      	mov	r1, r2
 8012a18:	602b      	str	r3, [r5, #0]
 8012a1a:	f7ef fcad 	bl	8002378 <_kill>
 8012a1e:	1c43      	adds	r3, r0, #1
 8012a20:	d102      	bne.n	8012a28 <_kill_r+0x1c>
 8012a22:	682b      	ldr	r3, [r5, #0]
 8012a24:	b103      	cbz	r3, 8012a28 <_kill_r+0x1c>
 8012a26:	6023      	str	r3, [r4, #0]
 8012a28:	bd38      	pop	{r3, r4, r5, pc}
 8012a2a:	bf00      	nop
 8012a2c:	200023dc 	.word	0x200023dc

08012a30 <_getpid_r>:
 8012a30:	f7ef bc9a 	b.w	8002368 <_getpid>

08012a34 <__swhatbuf_r>:
 8012a34:	b570      	push	{r4, r5, r6, lr}
 8012a36:	460c      	mov	r4, r1
 8012a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a3c:	2900      	cmp	r1, #0
 8012a3e:	b096      	sub	sp, #88	; 0x58
 8012a40:	4615      	mov	r5, r2
 8012a42:	461e      	mov	r6, r3
 8012a44:	da0d      	bge.n	8012a62 <__swhatbuf_r+0x2e>
 8012a46:	89a3      	ldrh	r3, [r4, #12]
 8012a48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012a4c:	f04f 0100 	mov.w	r1, #0
 8012a50:	bf0c      	ite	eq
 8012a52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012a56:	2340      	movne	r3, #64	; 0x40
 8012a58:	2000      	movs	r0, #0
 8012a5a:	6031      	str	r1, [r6, #0]
 8012a5c:	602b      	str	r3, [r5, #0]
 8012a5e:	b016      	add	sp, #88	; 0x58
 8012a60:	bd70      	pop	{r4, r5, r6, pc}
 8012a62:	466a      	mov	r2, sp
 8012a64:	f000 f848 	bl	8012af8 <_fstat_r>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	dbec      	blt.n	8012a46 <__swhatbuf_r+0x12>
 8012a6c:	9901      	ldr	r1, [sp, #4]
 8012a6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012a72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012a76:	4259      	negs	r1, r3
 8012a78:	4159      	adcs	r1, r3
 8012a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a7e:	e7eb      	b.n	8012a58 <__swhatbuf_r+0x24>

08012a80 <__smakebuf_r>:
 8012a80:	898b      	ldrh	r3, [r1, #12]
 8012a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a84:	079d      	lsls	r5, r3, #30
 8012a86:	4606      	mov	r6, r0
 8012a88:	460c      	mov	r4, r1
 8012a8a:	d507      	bpl.n	8012a9c <__smakebuf_r+0x1c>
 8012a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a90:	6023      	str	r3, [r4, #0]
 8012a92:	6123      	str	r3, [r4, #16]
 8012a94:	2301      	movs	r3, #1
 8012a96:	6163      	str	r3, [r4, #20]
 8012a98:	b002      	add	sp, #8
 8012a9a:	bd70      	pop	{r4, r5, r6, pc}
 8012a9c:	ab01      	add	r3, sp, #4
 8012a9e:	466a      	mov	r2, sp
 8012aa0:	f7ff ffc8 	bl	8012a34 <__swhatbuf_r>
 8012aa4:	9900      	ldr	r1, [sp, #0]
 8012aa6:	4605      	mov	r5, r0
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f7fd f9f1 	bl	800fe90 <_malloc_r>
 8012aae:	b948      	cbnz	r0, 8012ac4 <__smakebuf_r+0x44>
 8012ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ab4:	059a      	lsls	r2, r3, #22
 8012ab6:	d4ef      	bmi.n	8012a98 <__smakebuf_r+0x18>
 8012ab8:	f023 0303 	bic.w	r3, r3, #3
 8012abc:	f043 0302 	orr.w	r3, r3, #2
 8012ac0:	81a3      	strh	r3, [r4, #12]
 8012ac2:	e7e3      	b.n	8012a8c <__smakebuf_r+0xc>
 8012ac4:	89a3      	ldrh	r3, [r4, #12]
 8012ac6:	6020      	str	r0, [r4, #0]
 8012ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012acc:	81a3      	strh	r3, [r4, #12]
 8012ace:	9b00      	ldr	r3, [sp, #0]
 8012ad0:	6163      	str	r3, [r4, #20]
 8012ad2:	9b01      	ldr	r3, [sp, #4]
 8012ad4:	6120      	str	r0, [r4, #16]
 8012ad6:	b15b      	cbz	r3, 8012af0 <__smakebuf_r+0x70>
 8012ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012adc:	4630      	mov	r0, r6
 8012ade:	f000 f81d 	bl	8012b1c <_isatty_r>
 8012ae2:	b128      	cbz	r0, 8012af0 <__smakebuf_r+0x70>
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	f023 0303 	bic.w	r3, r3, #3
 8012aea:	f043 0301 	orr.w	r3, r3, #1
 8012aee:	81a3      	strh	r3, [r4, #12]
 8012af0:	89a3      	ldrh	r3, [r4, #12]
 8012af2:	431d      	orrs	r5, r3
 8012af4:	81a5      	strh	r5, [r4, #12]
 8012af6:	e7cf      	b.n	8012a98 <__smakebuf_r+0x18>

08012af8 <_fstat_r>:
 8012af8:	b538      	push	{r3, r4, r5, lr}
 8012afa:	4d07      	ldr	r5, [pc, #28]	; (8012b18 <_fstat_r+0x20>)
 8012afc:	2300      	movs	r3, #0
 8012afe:	4604      	mov	r4, r0
 8012b00:	4608      	mov	r0, r1
 8012b02:	4611      	mov	r1, r2
 8012b04:	602b      	str	r3, [r5, #0]
 8012b06:	f7ef fc96 	bl	8002436 <_fstat>
 8012b0a:	1c43      	adds	r3, r0, #1
 8012b0c:	d102      	bne.n	8012b14 <_fstat_r+0x1c>
 8012b0e:	682b      	ldr	r3, [r5, #0]
 8012b10:	b103      	cbz	r3, 8012b14 <_fstat_r+0x1c>
 8012b12:	6023      	str	r3, [r4, #0]
 8012b14:	bd38      	pop	{r3, r4, r5, pc}
 8012b16:	bf00      	nop
 8012b18:	200023dc 	.word	0x200023dc

08012b1c <_isatty_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4d06      	ldr	r5, [pc, #24]	; (8012b38 <_isatty_r+0x1c>)
 8012b20:	2300      	movs	r3, #0
 8012b22:	4604      	mov	r4, r0
 8012b24:	4608      	mov	r0, r1
 8012b26:	602b      	str	r3, [r5, #0]
 8012b28:	f7ef fc95 	bl	8002456 <_isatty>
 8012b2c:	1c43      	adds	r3, r0, #1
 8012b2e:	d102      	bne.n	8012b36 <_isatty_r+0x1a>
 8012b30:	682b      	ldr	r3, [r5, #0]
 8012b32:	b103      	cbz	r3, 8012b36 <_isatty_r+0x1a>
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	bd38      	pop	{r3, r4, r5, pc}
 8012b38:	200023dc 	.word	0x200023dc

08012b3c <atan2>:
 8012b3c:	f000 bb2c 	b.w	8013198 <__ieee754_atan2>

08012b40 <pow>:
 8012b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b42:	ed2d 8b02 	vpush	{d8}
 8012b46:	eeb0 8a40 	vmov.f32	s16, s0
 8012b4a:	eef0 8a60 	vmov.f32	s17, s1
 8012b4e:	ec55 4b11 	vmov	r4, r5, d1
 8012b52:	f000 fbe9 	bl	8013328 <__ieee754_pow>
 8012b56:	4622      	mov	r2, r4
 8012b58:	462b      	mov	r3, r5
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	ec57 6b10 	vmov	r6, r7, d0
 8012b62:	f7ed ffeb 	bl	8000b3c <__aeabi_dcmpun>
 8012b66:	2800      	cmp	r0, #0
 8012b68:	d13b      	bne.n	8012be2 <pow+0xa2>
 8012b6a:	ec51 0b18 	vmov	r0, r1, d8
 8012b6e:	2200      	movs	r2, #0
 8012b70:	2300      	movs	r3, #0
 8012b72:	f7ed ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8012b76:	b1b8      	cbz	r0, 8012ba8 <pow+0x68>
 8012b78:	2200      	movs	r2, #0
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	4629      	mov	r1, r5
 8012b80:	f7ed ffaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d146      	bne.n	8012c16 <pow+0xd6>
 8012b88:	ec45 4b10 	vmov	d0, r4, r5
 8012b8c:	f000 fa1d 	bl	8012fca <finite>
 8012b90:	b338      	cbz	r0, 8012be2 <pow+0xa2>
 8012b92:	2200      	movs	r2, #0
 8012b94:	2300      	movs	r3, #0
 8012b96:	4620      	mov	r0, r4
 8012b98:	4629      	mov	r1, r5
 8012b9a:	f7ed ffa7 	bl	8000aec <__aeabi_dcmplt>
 8012b9e:	b300      	cbz	r0, 8012be2 <pow+0xa2>
 8012ba0:	f7fd ffec 	bl	8010b7c <__errno>
 8012ba4:	2322      	movs	r3, #34	; 0x22
 8012ba6:	e01b      	b.n	8012be0 <pow+0xa0>
 8012ba8:	ec47 6b10 	vmov	d0, r6, r7
 8012bac:	f000 fa0d 	bl	8012fca <finite>
 8012bb0:	b9e0      	cbnz	r0, 8012bec <pow+0xac>
 8012bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8012bb6:	eef0 0a68 	vmov.f32	s1, s17
 8012bba:	f000 fa06 	bl	8012fca <finite>
 8012bbe:	b1a8      	cbz	r0, 8012bec <pow+0xac>
 8012bc0:	ec45 4b10 	vmov	d0, r4, r5
 8012bc4:	f000 fa01 	bl	8012fca <finite>
 8012bc8:	b180      	cbz	r0, 8012bec <pow+0xac>
 8012bca:	4632      	mov	r2, r6
 8012bcc:	463b      	mov	r3, r7
 8012bce:	4630      	mov	r0, r6
 8012bd0:	4639      	mov	r1, r7
 8012bd2:	f7ed ffb3 	bl	8000b3c <__aeabi_dcmpun>
 8012bd6:	2800      	cmp	r0, #0
 8012bd8:	d0e2      	beq.n	8012ba0 <pow+0x60>
 8012bda:	f7fd ffcf 	bl	8010b7c <__errno>
 8012bde:	2321      	movs	r3, #33	; 0x21
 8012be0:	6003      	str	r3, [r0, #0]
 8012be2:	ecbd 8b02 	vpop	{d8}
 8012be6:	ec47 6b10 	vmov	d0, r6, r7
 8012bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bec:	2200      	movs	r2, #0
 8012bee:	2300      	movs	r3, #0
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	4639      	mov	r1, r7
 8012bf4:	f7ed ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d0f2      	beq.n	8012be2 <pow+0xa2>
 8012bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8012c00:	eef0 0a68 	vmov.f32	s1, s17
 8012c04:	f000 f9e1 	bl	8012fca <finite>
 8012c08:	2800      	cmp	r0, #0
 8012c0a:	d0ea      	beq.n	8012be2 <pow+0xa2>
 8012c0c:	ec45 4b10 	vmov	d0, r4, r5
 8012c10:	f000 f9db 	bl	8012fca <finite>
 8012c14:	e7c3      	b.n	8012b9e <pow+0x5e>
 8012c16:	4f01      	ldr	r7, [pc, #4]	; (8012c1c <pow+0xdc>)
 8012c18:	2600      	movs	r6, #0
 8012c1a:	e7e2      	b.n	8012be2 <pow+0xa2>
 8012c1c:	3ff00000 	.word	0x3ff00000

08012c20 <sqrt>:
 8012c20:	b538      	push	{r3, r4, r5, lr}
 8012c22:	ed2d 8b02 	vpush	{d8}
 8012c26:	ec55 4b10 	vmov	r4, r5, d0
 8012c2a:	f000 f9d9 	bl	8012fe0 <__ieee754_sqrt>
 8012c2e:	4622      	mov	r2, r4
 8012c30:	462b      	mov	r3, r5
 8012c32:	4620      	mov	r0, r4
 8012c34:	4629      	mov	r1, r5
 8012c36:	eeb0 8a40 	vmov.f32	s16, s0
 8012c3a:	eef0 8a60 	vmov.f32	s17, s1
 8012c3e:	f7ed ff7d 	bl	8000b3c <__aeabi_dcmpun>
 8012c42:	b990      	cbnz	r0, 8012c6a <sqrt+0x4a>
 8012c44:	2200      	movs	r2, #0
 8012c46:	2300      	movs	r3, #0
 8012c48:	4620      	mov	r0, r4
 8012c4a:	4629      	mov	r1, r5
 8012c4c:	f7ed ff4e 	bl	8000aec <__aeabi_dcmplt>
 8012c50:	b158      	cbz	r0, 8012c6a <sqrt+0x4a>
 8012c52:	f7fd ff93 	bl	8010b7c <__errno>
 8012c56:	2321      	movs	r3, #33	; 0x21
 8012c58:	6003      	str	r3, [r0, #0]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	4610      	mov	r0, r2
 8012c60:	4619      	mov	r1, r3
 8012c62:	f7ed fdfb 	bl	800085c <__aeabi_ddiv>
 8012c66:	ec41 0b18 	vmov	d8, r0, r1
 8012c6a:	eeb0 0a48 	vmov.f32	s0, s16
 8012c6e:	eef0 0a68 	vmov.f32	s1, s17
 8012c72:	ecbd 8b02 	vpop	{d8}
 8012c76:	bd38      	pop	{r3, r4, r5, pc}

08012c78 <atan>:
 8012c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c7c:	ec55 4b10 	vmov	r4, r5, d0
 8012c80:	4bc3      	ldr	r3, [pc, #780]	; (8012f90 <atan+0x318>)
 8012c82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012c86:	429e      	cmp	r6, r3
 8012c88:	46ab      	mov	fp, r5
 8012c8a:	dd18      	ble.n	8012cbe <atan+0x46>
 8012c8c:	4bc1      	ldr	r3, [pc, #772]	; (8012f94 <atan+0x31c>)
 8012c8e:	429e      	cmp	r6, r3
 8012c90:	dc01      	bgt.n	8012c96 <atan+0x1e>
 8012c92:	d109      	bne.n	8012ca8 <atan+0x30>
 8012c94:	b144      	cbz	r4, 8012ca8 <atan+0x30>
 8012c96:	4622      	mov	r2, r4
 8012c98:	462b      	mov	r3, r5
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	f7ed fafd 	bl	800029c <__adddf3>
 8012ca2:	4604      	mov	r4, r0
 8012ca4:	460d      	mov	r5, r1
 8012ca6:	e006      	b.n	8012cb6 <atan+0x3e>
 8012ca8:	f1bb 0f00 	cmp.w	fp, #0
 8012cac:	f300 8131 	bgt.w	8012f12 <atan+0x29a>
 8012cb0:	a59b      	add	r5, pc, #620	; (adr r5, 8012f20 <atan+0x2a8>)
 8012cb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012cb6:	ec45 4b10 	vmov	d0, r4, r5
 8012cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cbe:	4bb6      	ldr	r3, [pc, #728]	; (8012f98 <atan+0x320>)
 8012cc0:	429e      	cmp	r6, r3
 8012cc2:	dc14      	bgt.n	8012cee <atan+0x76>
 8012cc4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012cc8:	429e      	cmp	r6, r3
 8012cca:	dc0d      	bgt.n	8012ce8 <atan+0x70>
 8012ccc:	a396      	add	r3, pc, #600	; (adr r3, 8012f28 <atan+0x2b0>)
 8012cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd2:	ee10 0a10 	vmov	r0, s0
 8012cd6:	4629      	mov	r1, r5
 8012cd8:	f7ed fae0 	bl	800029c <__adddf3>
 8012cdc:	4baf      	ldr	r3, [pc, #700]	; (8012f9c <atan+0x324>)
 8012cde:	2200      	movs	r2, #0
 8012ce0:	f7ed ff22 	bl	8000b28 <__aeabi_dcmpgt>
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	d1e6      	bne.n	8012cb6 <atan+0x3e>
 8012ce8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012cec:	e02b      	b.n	8012d46 <atan+0xce>
 8012cee:	f000 f963 	bl	8012fb8 <fabs>
 8012cf2:	4bab      	ldr	r3, [pc, #684]	; (8012fa0 <atan+0x328>)
 8012cf4:	429e      	cmp	r6, r3
 8012cf6:	ec55 4b10 	vmov	r4, r5, d0
 8012cfa:	f300 80bf 	bgt.w	8012e7c <atan+0x204>
 8012cfe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012d02:	429e      	cmp	r6, r3
 8012d04:	f300 80a0 	bgt.w	8012e48 <atan+0x1d0>
 8012d08:	ee10 2a10 	vmov	r2, s0
 8012d0c:	ee10 0a10 	vmov	r0, s0
 8012d10:	462b      	mov	r3, r5
 8012d12:	4629      	mov	r1, r5
 8012d14:	f7ed fac2 	bl	800029c <__adddf3>
 8012d18:	4ba0      	ldr	r3, [pc, #640]	; (8012f9c <atan+0x324>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f7ed fabc 	bl	8000298 <__aeabi_dsub>
 8012d20:	2200      	movs	r2, #0
 8012d22:	4606      	mov	r6, r0
 8012d24:	460f      	mov	r7, r1
 8012d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	4629      	mov	r1, r5
 8012d2e:	f7ed fab5 	bl	800029c <__adddf3>
 8012d32:	4602      	mov	r2, r0
 8012d34:	460b      	mov	r3, r1
 8012d36:	4630      	mov	r0, r6
 8012d38:	4639      	mov	r1, r7
 8012d3a:	f7ed fd8f 	bl	800085c <__aeabi_ddiv>
 8012d3e:	f04f 0a00 	mov.w	sl, #0
 8012d42:	4604      	mov	r4, r0
 8012d44:	460d      	mov	r5, r1
 8012d46:	4622      	mov	r2, r4
 8012d48:	462b      	mov	r3, r5
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	f7ed fc5b 	bl	8000608 <__aeabi_dmul>
 8012d52:	4602      	mov	r2, r0
 8012d54:	460b      	mov	r3, r1
 8012d56:	4680      	mov	r8, r0
 8012d58:	4689      	mov	r9, r1
 8012d5a:	f7ed fc55 	bl	8000608 <__aeabi_dmul>
 8012d5e:	a374      	add	r3, pc, #464	; (adr r3, 8012f30 <atan+0x2b8>)
 8012d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d64:	4606      	mov	r6, r0
 8012d66:	460f      	mov	r7, r1
 8012d68:	f7ed fc4e 	bl	8000608 <__aeabi_dmul>
 8012d6c:	a372      	add	r3, pc, #456	; (adr r3, 8012f38 <atan+0x2c0>)
 8012d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d72:	f7ed fa93 	bl	800029c <__adddf3>
 8012d76:	4632      	mov	r2, r6
 8012d78:	463b      	mov	r3, r7
 8012d7a:	f7ed fc45 	bl	8000608 <__aeabi_dmul>
 8012d7e:	a370      	add	r3, pc, #448	; (adr r3, 8012f40 <atan+0x2c8>)
 8012d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d84:	f7ed fa8a 	bl	800029c <__adddf3>
 8012d88:	4632      	mov	r2, r6
 8012d8a:	463b      	mov	r3, r7
 8012d8c:	f7ed fc3c 	bl	8000608 <__aeabi_dmul>
 8012d90:	a36d      	add	r3, pc, #436	; (adr r3, 8012f48 <atan+0x2d0>)
 8012d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d96:	f7ed fa81 	bl	800029c <__adddf3>
 8012d9a:	4632      	mov	r2, r6
 8012d9c:	463b      	mov	r3, r7
 8012d9e:	f7ed fc33 	bl	8000608 <__aeabi_dmul>
 8012da2:	a36b      	add	r3, pc, #428	; (adr r3, 8012f50 <atan+0x2d8>)
 8012da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da8:	f7ed fa78 	bl	800029c <__adddf3>
 8012dac:	4632      	mov	r2, r6
 8012dae:	463b      	mov	r3, r7
 8012db0:	f7ed fc2a 	bl	8000608 <__aeabi_dmul>
 8012db4:	a368      	add	r3, pc, #416	; (adr r3, 8012f58 <atan+0x2e0>)
 8012db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dba:	f7ed fa6f 	bl	800029c <__adddf3>
 8012dbe:	4642      	mov	r2, r8
 8012dc0:	464b      	mov	r3, r9
 8012dc2:	f7ed fc21 	bl	8000608 <__aeabi_dmul>
 8012dc6:	a366      	add	r3, pc, #408	; (adr r3, 8012f60 <atan+0x2e8>)
 8012dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dcc:	4680      	mov	r8, r0
 8012dce:	4689      	mov	r9, r1
 8012dd0:	4630      	mov	r0, r6
 8012dd2:	4639      	mov	r1, r7
 8012dd4:	f7ed fc18 	bl	8000608 <__aeabi_dmul>
 8012dd8:	a363      	add	r3, pc, #396	; (adr r3, 8012f68 <atan+0x2f0>)
 8012dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dde:	f7ed fa5b 	bl	8000298 <__aeabi_dsub>
 8012de2:	4632      	mov	r2, r6
 8012de4:	463b      	mov	r3, r7
 8012de6:	f7ed fc0f 	bl	8000608 <__aeabi_dmul>
 8012dea:	a361      	add	r3, pc, #388	; (adr r3, 8012f70 <atan+0x2f8>)
 8012dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df0:	f7ed fa52 	bl	8000298 <__aeabi_dsub>
 8012df4:	4632      	mov	r2, r6
 8012df6:	463b      	mov	r3, r7
 8012df8:	f7ed fc06 	bl	8000608 <__aeabi_dmul>
 8012dfc:	a35e      	add	r3, pc, #376	; (adr r3, 8012f78 <atan+0x300>)
 8012dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e02:	f7ed fa49 	bl	8000298 <__aeabi_dsub>
 8012e06:	4632      	mov	r2, r6
 8012e08:	463b      	mov	r3, r7
 8012e0a:	f7ed fbfd 	bl	8000608 <__aeabi_dmul>
 8012e0e:	a35c      	add	r3, pc, #368	; (adr r3, 8012f80 <atan+0x308>)
 8012e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e14:	f7ed fa40 	bl	8000298 <__aeabi_dsub>
 8012e18:	4632      	mov	r2, r6
 8012e1a:	463b      	mov	r3, r7
 8012e1c:	f7ed fbf4 	bl	8000608 <__aeabi_dmul>
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
 8012e24:	4640      	mov	r0, r8
 8012e26:	4649      	mov	r1, r9
 8012e28:	f7ed fa38 	bl	800029c <__adddf3>
 8012e2c:	4622      	mov	r2, r4
 8012e2e:	462b      	mov	r3, r5
 8012e30:	f7ed fbea 	bl	8000608 <__aeabi_dmul>
 8012e34:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012e38:	4602      	mov	r2, r0
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	d14b      	bne.n	8012ed6 <atan+0x25e>
 8012e3e:	4620      	mov	r0, r4
 8012e40:	4629      	mov	r1, r5
 8012e42:	f7ed fa29 	bl	8000298 <__aeabi_dsub>
 8012e46:	e72c      	b.n	8012ca2 <atan+0x2a>
 8012e48:	ee10 0a10 	vmov	r0, s0
 8012e4c:	4b53      	ldr	r3, [pc, #332]	; (8012f9c <atan+0x324>)
 8012e4e:	2200      	movs	r2, #0
 8012e50:	4629      	mov	r1, r5
 8012e52:	f7ed fa21 	bl	8000298 <__aeabi_dsub>
 8012e56:	4b51      	ldr	r3, [pc, #324]	; (8012f9c <atan+0x324>)
 8012e58:	4606      	mov	r6, r0
 8012e5a:	460f      	mov	r7, r1
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	4620      	mov	r0, r4
 8012e60:	4629      	mov	r1, r5
 8012e62:	f7ed fa1b 	bl	800029c <__adddf3>
 8012e66:	4602      	mov	r2, r0
 8012e68:	460b      	mov	r3, r1
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	4639      	mov	r1, r7
 8012e6e:	f7ed fcf5 	bl	800085c <__aeabi_ddiv>
 8012e72:	f04f 0a01 	mov.w	sl, #1
 8012e76:	4604      	mov	r4, r0
 8012e78:	460d      	mov	r5, r1
 8012e7a:	e764      	b.n	8012d46 <atan+0xce>
 8012e7c:	4b49      	ldr	r3, [pc, #292]	; (8012fa4 <atan+0x32c>)
 8012e7e:	429e      	cmp	r6, r3
 8012e80:	da1d      	bge.n	8012ebe <atan+0x246>
 8012e82:	ee10 0a10 	vmov	r0, s0
 8012e86:	4b48      	ldr	r3, [pc, #288]	; (8012fa8 <atan+0x330>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	4629      	mov	r1, r5
 8012e8c:	f7ed fa04 	bl	8000298 <__aeabi_dsub>
 8012e90:	4b45      	ldr	r3, [pc, #276]	; (8012fa8 <atan+0x330>)
 8012e92:	4606      	mov	r6, r0
 8012e94:	460f      	mov	r7, r1
 8012e96:	2200      	movs	r2, #0
 8012e98:	4620      	mov	r0, r4
 8012e9a:	4629      	mov	r1, r5
 8012e9c:	f7ed fbb4 	bl	8000608 <__aeabi_dmul>
 8012ea0:	4b3e      	ldr	r3, [pc, #248]	; (8012f9c <atan+0x324>)
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	f7ed f9fa 	bl	800029c <__adddf3>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	460b      	mov	r3, r1
 8012eac:	4630      	mov	r0, r6
 8012eae:	4639      	mov	r1, r7
 8012eb0:	f7ed fcd4 	bl	800085c <__aeabi_ddiv>
 8012eb4:	f04f 0a02 	mov.w	sl, #2
 8012eb8:	4604      	mov	r4, r0
 8012eba:	460d      	mov	r5, r1
 8012ebc:	e743      	b.n	8012d46 <atan+0xce>
 8012ebe:	462b      	mov	r3, r5
 8012ec0:	ee10 2a10 	vmov	r2, s0
 8012ec4:	4939      	ldr	r1, [pc, #228]	; (8012fac <atan+0x334>)
 8012ec6:	2000      	movs	r0, #0
 8012ec8:	f7ed fcc8 	bl	800085c <__aeabi_ddiv>
 8012ecc:	f04f 0a03 	mov.w	sl, #3
 8012ed0:	4604      	mov	r4, r0
 8012ed2:	460d      	mov	r5, r1
 8012ed4:	e737      	b.n	8012d46 <atan+0xce>
 8012ed6:	4b36      	ldr	r3, [pc, #216]	; (8012fb0 <atan+0x338>)
 8012ed8:	4e36      	ldr	r6, [pc, #216]	; (8012fb4 <atan+0x33c>)
 8012eda:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee2:	f7ed f9d9 	bl	8000298 <__aeabi_dsub>
 8012ee6:	4622      	mov	r2, r4
 8012ee8:	462b      	mov	r3, r5
 8012eea:	f7ed f9d5 	bl	8000298 <__aeabi_dsub>
 8012eee:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012efa:	f7ed f9cd 	bl	8000298 <__aeabi_dsub>
 8012efe:	f1bb 0f00 	cmp.w	fp, #0
 8012f02:	4604      	mov	r4, r0
 8012f04:	460d      	mov	r5, r1
 8012f06:	f6bf aed6 	bge.w	8012cb6 <atan+0x3e>
 8012f0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f0e:	461d      	mov	r5, r3
 8012f10:	e6d1      	b.n	8012cb6 <atan+0x3e>
 8012f12:	a51d      	add	r5, pc, #116	; (adr r5, 8012f88 <atan+0x310>)
 8012f14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012f18:	e6cd      	b.n	8012cb6 <atan+0x3e>
 8012f1a:	bf00      	nop
 8012f1c:	f3af 8000 	nop.w
 8012f20:	54442d18 	.word	0x54442d18
 8012f24:	bff921fb 	.word	0xbff921fb
 8012f28:	8800759c 	.word	0x8800759c
 8012f2c:	7e37e43c 	.word	0x7e37e43c
 8012f30:	e322da11 	.word	0xe322da11
 8012f34:	3f90ad3a 	.word	0x3f90ad3a
 8012f38:	24760deb 	.word	0x24760deb
 8012f3c:	3fa97b4b 	.word	0x3fa97b4b
 8012f40:	a0d03d51 	.word	0xa0d03d51
 8012f44:	3fb10d66 	.word	0x3fb10d66
 8012f48:	c54c206e 	.word	0xc54c206e
 8012f4c:	3fb745cd 	.word	0x3fb745cd
 8012f50:	920083ff 	.word	0x920083ff
 8012f54:	3fc24924 	.word	0x3fc24924
 8012f58:	5555550d 	.word	0x5555550d
 8012f5c:	3fd55555 	.word	0x3fd55555
 8012f60:	2c6a6c2f 	.word	0x2c6a6c2f
 8012f64:	bfa2b444 	.word	0xbfa2b444
 8012f68:	52defd9a 	.word	0x52defd9a
 8012f6c:	3fadde2d 	.word	0x3fadde2d
 8012f70:	af749a6d 	.word	0xaf749a6d
 8012f74:	3fb3b0f2 	.word	0x3fb3b0f2
 8012f78:	fe231671 	.word	0xfe231671
 8012f7c:	3fbc71c6 	.word	0x3fbc71c6
 8012f80:	9998ebc4 	.word	0x9998ebc4
 8012f84:	3fc99999 	.word	0x3fc99999
 8012f88:	54442d18 	.word	0x54442d18
 8012f8c:	3ff921fb 	.word	0x3ff921fb
 8012f90:	440fffff 	.word	0x440fffff
 8012f94:	7ff00000 	.word	0x7ff00000
 8012f98:	3fdbffff 	.word	0x3fdbffff
 8012f9c:	3ff00000 	.word	0x3ff00000
 8012fa0:	3ff2ffff 	.word	0x3ff2ffff
 8012fa4:	40038000 	.word	0x40038000
 8012fa8:	3ff80000 	.word	0x3ff80000
 8012fac:	bff00000 	.word	0xbff00000
 8012fb0:	08014548 	.word	0x08014548
 8012fb4:	08014528 	.word	0x08014528

08012fb8 <fabs>:
 8012fb8:	ec51 0b10 	vmov	r0, r1, d0
 8012fbc:	ee10 2a10 	vmov	r2, s0
 8012fc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012fc4:	ec43 2b10 	vmov	d0, r2, r3
 8012fc8:	4770      	bx	lr

08012fca <finite>:
 8012fca:	b082      	sub	sp, #8
 8012fcc:	ed8d 0b00 	vstr	d0, [sp]
 8012fd0:	9801      	ldr	r0, [sp, #4]
 8012fd2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012fd6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012fda:	0fc0      	lsrs	r0, r0, #31
 8012fdc:	b002      	add	sp, #8
 8012fde:	4770      	bx	lr

08012fe0 <__ieee754_sqrt>:
 8012fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe4:	ec55 4b10 	vmov	r4, r5, d0
 8012fe8:	4e67      	ldr	r6, [pc, #412]	; (8013188 <__ieee754_sqrt+0x1a8>)
 8012fea:	43ae      	bics	r6, r5
 8012fec:	ee10 0a10 	vmov	r0, s0
 8012ff0:	ee10 2a10 	vmov	r2, s0
 8012ff4:	4629      	mov	r1, r5
 8012ff6:	462b      	mov	r3, r5
 8012ff8:	d10d      	bne.n	8013016 <__ieee754_sqrt+0x36>
 8012ffa:	f7ed fb05 	bl	8000608 <__aeabi_dmul>
 8012ffe:	4602      	mov	r2, r0
 8013000:	460b      	mov	r3, r1
 8013002:	4620      	mov	r0, r4
 8013004:	4629      	mov	r1, r5
 8013006:	f7ed f949 	bl	800029c <__adddf3>
 801300a:	4604      	mov	r4, r0
 801300c:	460d      	mov	r5, r1
 801300e:	ec45 4b10 	vmov	d0, r4, r5
 8013012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013016:	2d00      	cmp	r5, #0
 8013018:	dc0b      	bgt.n	8013032 <__ieee754_sqrt+0x52>
 801301a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801301e:	4326      	orrs	r6, r4
 8013020:	d0f5      	beq.n	801300e <__ieee754_sqrt+0x2e>
 8013022:	b135      	cbz	r5, 8013032 <__ieee754_sqrt+0x52>
 8013024:	f7ed f938 	bl	8000298 <__aeabi_dsub>
 8013028:	4602      	mov	r2, r0
 801302a:	460b      	mov	r3, r1
 801302c:	f7ed fc16 	bl	800085c <__aeabi_ddiv>
 8013030:	e7eb      	b.n	801300a <__ieee754_sqrt+0x2a>
 8013032:	1509      	asrs	r1, r1, #20
 8013034:	f000 808d 	beq.w	8013152 <__ieee754_sqrt+0x172>
 8013038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801303c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8013040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013044:	07c9      	lsls	r1, r1, #31
 8013046:	bf5c      	itt	pl
 8013048:	005b      	lslpl	r3, r3, #1
 801304a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801304e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013052:	bf58      	it	pl
 8013054:	0052      	lslpl	r2, r2, #1
 8013056:	2500      	movs	r5, #0
 8013058:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801305c:	1076      	asrs	r6, r6, #1
 801305e:	0052      	lsls	r2, r2, #1
 8013060:	f04f 0e16 	mov.w	lr, #22
 8013064:	46ac      	mov	ip, r5
 8013066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801306a:	eb0c 0001 	add.w	r0, ip, r1
 801306e:	4298      	cmp	r0, r3
 8013070:	bfde      	ittt	le
 8013072:	1a1b      	suble	r3, r3, r0
 8013074:	eb00 0c01 	addle.w	ip, r0, r1
 8013078:	186d      	addle	r5, r5, r1
 801307a:	005b      	lsls	r3, r3, #1
 801307c:	f1be 0e01 	subs.w	lr, lr, #1
 8013080:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013084:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013088:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801308c:	d1ed      	bne.n	801306a <__ieee754_sqrt+0x8a>
 801308e:	4674      	mov	r4, lr
 8013090:	2720      	movs	r7, #32
 8013092:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013096:	4563      	cmp	r3, ip
 8013098:	eb01 000e 	add.w	r0, r1, lr
 801309c:	dc02      	bgt.n	80130a4 <__ieee754_sqrt+0xc4>
 801309e:	d113      	bne.n	80130c8 <__ieee754_sqrt+0xe8>
 80130a0:	4290      	cmp	r0, r2
 80130a2:	d811      	bhi.n	80130c8 <__ieee754_sqrt+0xe8>
 80130a4:	2800      	cmp	r0, #0
 80130a6:	eb00 0e01 	add.w	lr, r0, r1
 80130aa:	da57      	bge.n	801315c <__ieee754_sqrt+0x17c>
 80130ac:	f1be 0f00 	cmp.w	lr, #0
 80130b0:	db54      	blt.n	801315c <__ieee754_sqrt+0x17c>
 80130b2:	f10c 0801 	add.w	r8, ip, #1
 80130b6:	eba3 030c 	sub.w	r3, r3, ip
 80130ba:	4290      	cmp	r0, r2
 80130bc:	bf88      	it	hi
 80130be:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80130c2:	1a12      	subs	r2, r2, r0
 80130c4:	440c      	add	r4, r1
 80130c6:	46c4      	mov	ip, r8
 80130c8:	005b      	lsls	r3, r3, #1
 80130ca:	3f01      	subs	r7, #1
 80130cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80130d0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80130d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80130d8:	d1dd      	bne.n	8013096 <__ieee754_sqrt+0xb6>
 80130da:	4313      	orrs	r3, r2
 80130dc:	d01b      	beq.n	8013116 <__ieee754_sqrt+0x136>
 80130de:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801318c <__ieee754_sqrt+0x1ac>
 80130e2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8013190 <__ieee754_sqrt+0x1b0>
 80130e6:	e9da 0100 	ldrd	r0, r1, [sl]
 80130ea:	e9db 2300 	ldrd	r2, r3, [fp]
 80130ee:	f7ed f8d3 	bl	8000298 <__aeabi_dsub>
 80130f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80130f6:	4602      	mov	r2, r0
 80130f8:	460b      	mov	r3, r1
 80130fa:	4640      	mov	r0, r8
 80130fc:	4649      	mov	r1, r9
 80130fe:	f7ed fcff 	bl	8000b00 <__aeabi_dcmple>
 8013102:	b140      	cbz	r0, 8013116 <__ieee754_sqrt+0x136>
 8013104:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8013108:	e9da 0100 	ldrd	r0, r1, [sl]
 801310c:	e9db 2300 	ldrd	r2, r3, [fp]
 8013110:	d126      	bne.n	8013160 <__ieee754_sqrt+0x180>
 8013112:	3501      	adds	r5, #1
 8013114:	463c      	mov	r4, r7
 8013116:	106a      	asrs	r2, r5, #1
 8013118:	0863      	lsrs	r3, r4, #1
 801311a:	07e9      	lsls	r1, r5, #31
 801311c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013120:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013124:	bf48      	it	mi
 8013126:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801312a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801312e:	461c      	mov	r4, r3
 8013130:	e76d      	b.n	801300e <__ieee754_sqrt+0x2e>
 8013132:	0ad3      	lsrs	r3, r2, #11
 8013134:	3815      	subs	r0, #21
 8013136:	0552      	lsls	r2, r2, #21
 8013138:	2b00      	cmp	r3, #0
 801313a:	d0fa      	beq.n	8013132 <__ieee754_sqrt+0x152>
 801313c:	02dc      	lsls	r4, r3, #11
 801313e:	d50a      	bpl.n	8013156 <__ieee754_sqrt+0x176>
 8013140:	f1c1 0420 	rsb	r4, r1, #32
 8013144:	fa22 f404 	lsr.w	r4, r2, r4
 8013148:	1e4d      	subs	r5, r1, #1
 801314a:	408a      	lsls	r2, r1
 801314c:	4323      	orrs	r3, r4
 801314e:	1b41      	subs	r1, r0, r5
 8013150:	e772      	b.n	8013038 <__ieee754_sqrt+0x58>
 8013152:	4608      	mov	r0, r1
 8013154:	e7f0      	b.n	8013138 <__ieee754_sqrt+0x158>
 8013156:	005b      	lsls	r3, r3, #1
 8013158:	3101      	adds	r1, #1
 801315a:	e7ef      	b.n	801313c <__ieee754_sqrt+0x15c>
 801315c:	46e0      	mov	r8, ip
 801315e:	e7aa      	b.n	80130b6 <__ieee754_sqrt+0xd6>
 8013160:	f7ed f89c 	bl	800029c <__adddf3>
 8013164:	e9da 8900 	ldrd	r8, r9, [sl]
 8013168:	4602      	mov	r2, r0
 801316a:	460b      	mov	r3, r1
 801316c:	4640      	mov	r0, r8
 801316e:	4649      	mov	r1, r9
 8013170:	f7ed fcbc 	bl	8000aec <__aeabi_dcmplt>
 8013174:	b120      	cbz	r0, 8013180 <__ieee754_sqrt+0x1a0>
 8013176:	1ca0      	adds	r0, r4, #2
 8013178:	bf08      	it	eq
 801317a:	3501      	addeq	r5, #1
 801317c:	3402      	adds	r4, #2
 801317e:	e7ca      	b.n	8013116 <__ieee754_sqrt+0x136>
 8013180:	3401      	adds	r4, #1
 8013182:	f024 0401 	bic.w	r4, r4, #1
 8013186:	e7c6      	b.n	8013116 <__ieee754_sqrt+0x136>
 8013188:	7ff00000 	.word	0x7ff00000
 801318c:	200002f0 	.word	0x200002f0
 8013190:	200002f8 	.word	0x200002f8
 8013194:	00000000 	.word	0x00000000

08013198 <__ieee754_atan2>:
 8013198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801319c:	ec57 6b11 	vmov	r6, r7, d1
 80131a0:	4273      	negs	r3, r6
 80131a2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8013320 <__ieee754_atan2+0x188>
 80131a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80131aa:	4333      	orrs	r3, r6
 80131ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80131b0:	4543      	cmp	r3, r8
 80131b2:	ec51 0b10 	vmov	r0, r1, d0
 80131b6:	ee11 5a10 	vmov	r5, s2
 80131ba:	d80a      	bhi.n	80131d2 <__ieee754_atan2+0x3a>
 80131bc:	4244      	negs	r4, r0
 80131be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80131c2:	4304      	orrs	r4, r0
 80131c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80131c8:	4544      	cmp	r4, r8
 80131ca:	ee10 9a10 	vmov	r9, s0
 80131ce:	468e      	mov	lr, r1
 80131d0:	d907      	bls.n	80131e2 <__ieee754_atan2+0x4a>
 80131d2:	4632      	mov	r2, r6
 80131d4:	463b      	mov	r3, r7
 80131d6:	f7ed f861 	bl	800029c <__adddf3>
 80131da:	ec41 0b10 	vmov	d0, r0, r1
 80131de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80131e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80131ea:	4334      	orrs	r4, r6
 80131ec:	d103      	bne.n	80131f6 <__ieee754_atan2+0x5e>
 80131ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131f2:	f7ff bd41 	b.w	8012c78 <atan>
 80131f6:	17bc      	asrs	r4, r7, #30
 80131f8:	f004 0402 	and.w	r4, r4, #2
 80131fc:	ea53 0909 	orrs.w	r9, r3, r9
 8013200:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013204:	d107      	bne.n	8013216 <__ieee754_atan2+0x7e>
 8013206:	2c02      	cmp	r4, #2
 8013208:	d05f      	beq.n	80132ca <__ieee754_atan2+0x132>
 801320a:	2c03      	cmp	r4, #3
 801320c:	d1e5      	bne.n	80131da <__ieee754_atan2+0x42>
 801320e:	a140      	add	r1, pc, #256	; (adr r1, 8013310 <__ieee754_atan2+0x178>)
 8013210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013214:	e7e1      	b.n	80131da <__ieee754_atan2+0x42>
 8013216:	4315      	orrs	r5, r2
 8013218:	d106      	bne.n	8013228 <__ieee754_atan2+0x90>
 801321a:	f1be 0f00 	cmp.w	lr, #0
 801321e:	da5f      	bge.n	80132e0 <__ieee754_atan2+0x148>
 8013220:	a13d      	add	r1, pc, #244	; (adr r1, 8013318 <__ieee754_atan2+0x180>)
 8013222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013226:	e7d8      	b.n	80131da <__ieee754_atan2+0x42>
 8013228:	4542      	cmp	r2, r8
 801322a:	d10f      	bne.n	801324c <__ieee754_atan2+0xb4>
 801322c:	4293      	cmp	r3, r2
 801322e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013232:	d107      	bne.n	8013244 <__ieee754_atan2+0xac>
 8013234:	2c02      	cmp	r4, #2
 8013236:	d84c      	bhi.n	80132d2 <__ieee754_atan2+0x13a>
 8013238:	4b33      	ldr	r3, [pc, #204]	; (8013308 <__ieee754_atan2+0x170>)
 801323a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801323e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013242:	e7ca      	b.n	80131da <__ieee754_atan2+0x42>
 8013244:	2c02      	cmp	r4, #2
 8013246:	d848      	bhi.n	80132da <__ieee754_atan2+0x142>
 8013248:	4b30      	ldr	r3, [pc, #192]	; (801330c <__ieee754_atan2+0x174>)
 801324a:	e7f6      	b.n	801323a <__ieee754_atan2+0xa2>
 801324c:	4543      	cmp	r3, r8
 801324e:	d0e4      	beq.n	801321a <__ieee754_atan2+0x82>
 8013250:	1a9b      	subs	r3, r3, r2
 8013252:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013256:	ea4f 5223 	mov.w	r2, r3, asr #20
 801325a:	da1e      	bge.n	801329a <__ieee754_atan2+0x102>
 801325c:	2f00      	cmp	r7, #0
 801325e:	da01      	bge.n	8013264 <__ieee754_atan2+0xcc>
 8013260:	323c      	adds	r2, #60	; 0x3c
 8013262:	db1e      	blt.n	80132a2 <__ieee754_atan2+0x10a>
 8013264:	4632      	mov	r2, r6
 8013266:	463b      	mov	r3, r7
 8013268:	f7ed faf8 	bl	800085c <__aeabi_ddiv>
 801326c:	ec41 0b10 	vmov	d0, r0, r1
 8013270:	f7ff fea2 	bl	8012fb8 <fabs>
 8013274:	f7ff fd00 	bl	8012c78 <atan>
 8013278:	ec51 0b10 	vmov	r0, r1, d0
 801327c:	2c01      	cmp	r4, #1
 801327e:	d013      	beq.n	80132a8 <__ieee754_atan2+0x110>
 8013280:	2c02      	cmp	r4, #2
 8013282:	d015      	beq.n	80132b0 <__ieee754_atan2+0x118>
 8013284:	2c00      	cmp	r4, #0
 8013286:	d0a8      	beq.n	80131da <__ieee754_atan2+0x42>
 8013288:	a317      	add	r3, pc, #92	; (adr r3, 80132e8 <__ieee754_atan2+0x150>)
 801328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328e:	f7ed f803 	bl	8000298 <__aeabi_dsub>
 8013292:	a317      	add	r3, pc, #92	; (adr r3, 80132f0 <__ieee754_atan2+0x158>)
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	e014      	b.n	80132c4 <__ieee754_atan2+0x12c>
 801329a:	a117      	add	r1, pc, #92	; (adr r1, 80132f8 <__ieee754_atan2+0x160>)
 801329c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132a0:	e7ec      	b.n	801327c <__ieee754_atan2+0xe4>
 80132a2:	2000      	movs	r0, #0
 80132a4:	2100      	movs	r1, #0
 80132a6:	e7e9      	b.n	801327c <__ieee754_atan2+0xe4>
 80132a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80132ac:	4619      	mov	r1, r3
 80132ae:	e794      	b.n	80131da <__ieee754_atan2+0x42>
 80132b0:	a30d      	add	r3, pc, #52	; (adr r3, 80132e8 <__ieee754_atan2+0x150>)
 80132b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b6:	f7ec ffef 	bl	8000298 <__aeabi_dsub>
 80132ba:	4602      	mov	r2, r0
 80132bc:	460b      	mov	r3, r1
 80132be:	a10c      	add	r1, pc, #48	; (adr r1, 80132f0 <__ieee754_atan2+0x158>)
 80132c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132c4:	f7ec ffe8 	bl	8000298 <__aeabi_dsub>
 80132c8:	e787      	b.n	80131da <__ieee754_atan2+0x42>
 80132ca:	a109      	add	r1, pc, #36	; (adr r1, 80132f0 <__ieee754_atan2+0x158>)
 80132cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132d0:	e783      	b.n	80131da <__ieee754_atan2+0x42>
 80132d2:	a10b      	add	r1, pc, #44	; (adr r1, 8013300 <__ieee754_atan2+0x168>)
 80132d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132d8:	e77f      	b.n	80131da <__ieee754_atan2+0x42>
 80132da:	2000      	movs	r0, #0
 80132dc:	2100      	movs	r1, #0
 80132de:	e77c      	b.n	80131da <__ieee754_atan2+0x42>
 80132e0:	a105      	add	r1, pc, #20	; (adr r1, 80132f8 <__ieee754_atan2+0x160>)
 80132e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132e6:	e778      	b.n	80131da <__ieee754_atan2+0x42>
 80132e8:	33145c07 	.word	0x33145c07
 80132ec:	3ca1a626 	.word	0x3ca1a626
 80132f0:	54442d18 	.word	0x54442d18
 80132f4:	400921fb 	.word	0x400921fb
 80132f8:	54442d18 	.word	0x54442d18
 80132fc:	3ff921fb 	.word	0x3ff921fb
 8013300:	54442d18 	.word	0x54442d18
 8013304:	3fe921fb 	.word	0x3fe921fb
 8013308:	08014568 	.word	0x08014568
 801330c:	08014580 	.word	0x08014580
 8013310:	54442d18 	.word	0x54442d18
 8013314:	c00921fb 	.word	0xc00921fb
 8013318:	54442d18 	.word	0x54442d18
 801331c:	bff921fb 	.word	0xbff921fb
 8013320:	7ff00000 	.word	0x7ff00000
 8013324:	00000000 	.word	0x00000000

08013328 <__ieee754_pow>:
 8013328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801332c:	ed2d 8b06 	vpush	{d8-d10}
 8013330:	b089      	sub	sp, #36	; 0x24
 8013332:	ed8d 1b00 	vstr	d1, [sp]
 8013336:	e9dd 2900 	ldrd	r2, r9, [sp]
 801333a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801333e:	ea58 0102 	orrs.w	r1, r8, r2
 8013342:	ec57 6b10 	vmov	r6, r7, d0
 8013346:	d115      	bne.n	8013374 <__ieee754_pow+0x4c>
 8013348:	19b3      	adds	r3, r6, r6
 801334a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801334e:	4152      	adcs	r2, r2
 8013350:	4299      	cmp	r1, r3
 8013352:	4b89      	ldr	r3, [pc, #548]	; (8013578 <__ieee754_pow+0x250>)
 8013354:	4193      	sbcs	r3, r2
 8013356:	f080 84d1 	bcs.w	8013cfc <__ieee754_pow+0x9d4>
 801335a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801335e:	4630      	mov	r0, r6
 8013360:	4639      	mov	r1, r7
 8013362:	f7ec ff9b 	bl	800029c <__adddf3>
 8013366:	ec41 0b10 	vmov	d0, r0, r1
 801336a:	b009      	add	sp, #36	; 0x24
 801336c:	ecbd 8b06 	vpop	{d8-d10}
 8013370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013374:	4b81      	ldr	r3, [pc, #516]	; (801357c <__ieee754_pow+0x254>)
 8013376:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801337a:	429c      	cmp	r4, r3
 801337c:	ee10 aa10 	vmov	sl, s0
 8013380:	463d      	mov	r5, r7
 8013382:	dc06      	bgt.n	8013392 <__ieee754_pow+0x6a>
 8013384:	d101      	bne.n	801338a <__ieee754_pow+0x62>
 8013386:	2e00      	cmp	r6, #0
 8013388:	d1e7      	bne.n	801335a <__ieee754_pow+0x32>
 801338a:	4598      	cmp	r8, r3
 801338c:	dc01      	bgt.n	8013392 <__ieee754_pow+0x6a>
 801338e:	d10f      	bne.n	80133b0 <__ieee754_pow+0x88>
 8013390:	b172      	cbz	r2, 80133b0 <__ieee754_pow+0x88>
 8013392:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013396:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801339a:	ea55 050a 	orrs.w	r5, r5, sl
 801339e:	d1dc      	bne.n	801335a <__ieee754_pow+0x32>
 80133a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80133a4:	18db      	adds	r3, r3, r3
 80133a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80133aa:	4152      	adcs	r2, r2
 80133ac:	429d      	cmp	r5, r3
 80133ae:	e7d0      	b.n	8013352 <__ieee754_pow+0x2a>
 80133b0:	2d00      	cmp	r5, #0
 80133b2:	da3b      	bge.n	801342c <__ieee754_pow+0x104>
 80133b4:	4b72      	ldr	r3, [pc, #456]	; (8013580 <__ieee754_pow+0x258>)
 80133b6:	4598      	cmp	r8, r3
 80133b8:	dc51      	bgt.n	801345e <__ieee754_pow+0x136>
 80133ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80133be:	4598      	cmp	r8, r3
 80133c0:	f340 84ab 	ble.w	8013d1a <__ieee754_pow+0x9f2>
 80133c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80133c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80133cc:	2b14      	cmp	r3, #20
 80133ce:	dd0f      	ble.n	80133f0 <__ieee754_pow+0xc8>
 80133d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80133d4:	fa22 f103 	lsr.w	r1, r2, r3
 80133d8:	fa01 f303 	lsl.w	r3, r1, r3
 80133dc:	4293      	cmp	r3, r2
 80133de:	f040 849c 	bne.w	8013d1a <__ieee754_pow+0x9f2>
 80133e2:	f001 0101 	and.w	r1, r1, #1
 80133e6:	f1c1 0302 	rsb	r3, r1, #2
 80133ea:	9304      	str	r3, [sp, #16]
 80133ec:	b182      	cbz	r2, 8013410 <__ieee754_pow+0xe8>
 80133ee:	e05f      	b.n	80134b0 <__ieee754_pow+0x188>
 80133f0:	2a00      	cmp	r2, #0
 80133f2:	d15b      	bne.n	80134ac <__ieee754_pow+0x184>
 80133f4:	f1c3 0314 	rsb	r3, r3, #20
 80133f8:	fa48 f103 	asr.w	r1, r8, r3
 80133fc:	fa01 f303 	lsl.w	r3, r1, r3
 8013400:	4543      	cmp	r3, r8
 8013402:	f040 8487 	bne.w	8013d14 <__ieee754_pow+0x9ec>
 8013406:	f001 0101 	and.w	r1, r1, #1
 801340a:	f1c1 0302 	rsb	r3, r1, #2
 801340e:	9304      	str	r3, [sp, #16]
 8013410:	4b5c      	ldr	r3, [pc, #368]	; (8013584 <__ieee754_pow+0x25c>)
 8013412:	4598      	cmp	r8, r3
 8013414:	d132      	bne.n	801347c <__ieee754_pow+0x154>
 8013416:	f1b9 0f00 	cmp.w	r9, #0
 801341a:	f280 8477 	bge.w	8013d0c <__ieee754_pow+0x9e4>
 801341e:	4959      	ldr	r1, [pc, #356]	; (8013584 <__ieee754_pow+0x25c>)
 8013420:	4632      	mov	r2, r6
 8013422:	463b      	mov	r3, r7
 8013424:	2000      	movs	r0, #0
 8013426:	f7ed fa19 	bl	800085c <__aeabi_ddiv>
 801342a:	e79c      	b.n	8013366 <__ieee754_pow+0x3e>
 801342c:	2300      	movs	r3, #0
 801342e:	9304      	str	r3, [sp, #16]
 8013430:	2a00      	cmp	r2, #0
 8013432:	d13d      	bne.n	80134b0 <__ieee754_pow+0x188>
 8013434:	4b51      	ldr	r3, [pc, #324]	; (801357c <__ieee754_pow+0x254>)
 8013436:	4598      	cmp	r8, r3
 8013438:	d1ea      	bne.n	8013410 <__ieee754_pow+0xe8>
 801343a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801343e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013442:	ea53 030a 	orrs.w	r3, r3, sl
 8013446:	f000 8459 	beq.w	8013cfc <__ieee754_pow+0x9d4>
 801344a:	4b4f      	ldr	r3, [pc, #316]	; (8013588 <__ieee754_pow+0x260>)
 801344c:	429c      	cmp	r4, r3
 801344e:	dd08      	ble.n	8013462 <__ieee754_pow+0x13a>
 8013450:	f1b9 0f00 	cmp.w	r9, #0
 8013454:	f2c0 8456 	blt.w	8013d04 <__ieee754_pow+0x9dc>
 8013458:	e9dd 0100 	ldrd	r0, r1, [sp]
 801345c:	e783      	b.n	8013366 <__ieee754_pow+0x3e>
 801345e:	2302      	movs	r3, #2
 8013460:	e7e5      	b.n	801342e <__ieee754_pow+0x106>
 8013462:	f1b9 0f00 	cmp.w	r9, #0
 8013466:	f04f 0000 	mov.w	r0, #0
 801346a:	f04f 0100 	mov.w	r1, #0
 801346e:	f6bf af7a 	bge.w	8013366 <__ieee754_pow+0x3e>
 8013472:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013476:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801347a:	e774      	b.n	8013366 <__ieee754_pow+0x3e>
 801347c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013480:	d106      	bne.n	8013490 <__ieee754_pow+0x168>
 8013482:	4632      	mov	r2, r6
 8013484:	463b      	mov	r3, r7
 8013486:	4630      	mov	r0, r6
 8013488:	4639      	mov	r1, r7
 801348a:	f7ed f8bd 	bl	8000608 <__aeabi_dmul>
 801348e:	e76a      	b.n	8013366 <__ieee754_pow+0x3e>
 8013490:	4b3e      	ldr	r3, [pc, #248]	; (801358c <__ieee754_pow+0x264>)
 8013492:	4599      	cmp	r9, r3
 8013494:	d10c      	bne.n	80134b0 <__ieee754_pow+0x188>
 8013496:	2d00      	cmp	r5, #0
 8013498:	db0a      	blt.n	80134b0 <__ieee754_pow+0x188>
 801349a:	ec47 6b10 	vmov	d0, r6, r7
 801349e:	b009      	add	sp, #36	; 0x24
 80134a0:	ecbd 8b06 	vpop	{d8-d10}
 80134a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a8:	f7ff bd9a 	b.w	8012fe0 <__ieee754_sqrt>
 80134ac:	2300      	movs	r3, #0
 80134ae:	9304      	str	r3, [sp, #16]
 80134b0:	ec47 6b10 	vmov	d0, r6, r7
 80134b4:	f7ff fd80 	bl	8012fb8 <fabs>
 80134b8:	ec51 0b10 	vmov	r0, r1, d0
 80134bc:	f1ba 0f00 	cmp.w	sl, #0
 80134c0:	d129      	bne.n	8013516 <__ieee754_pow+0x1ee>
 80134c2:	b124      	cbz	r4, 80134ce <__ieee754_pow+0x1a6>
 80134c4:	4b2f      	ldr	r3, [pc, #188]	; (8013584 <__ieee754_pow+0x25c>)
 80134c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d123      	bne.n	8013516 <__ieee754_pow+0x1ee>
 80134ce:	f1b9 0f00 	cmp.w	r9, #0
 80134d2:	da05      	bge.n	80134e0 <__ieee754_pow+0x1b8>
 80134d4:	4602      	mov	r2, r0
 80134d6:	460b      	mov	r3, r1
 80134d8:	2000      	movs	r0, #0
 80134da:	492a      	ldr	r1, [pc, #168]	; (8013584 <__ieee754_pow+0x25c>)
 80134dc:	f7ed f9be 	bl	800085c <__aeabi_ddiv>
 80134e0:	2d00      	cmp	r5, #0
 80134e2:	f6bf af40 	bge.w	8013366 <__ieee754_pow+0x3e>
 80134e6:	9b04      	ldr	r3, [sp, #16]
 80134e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80134ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80134f0:	431c      	orrs	r4, r3
 80134f2:	d108      	bne.n	8013506 <__ieee754_pow+0x1de>
 80134f4:	4602      	mov	r2, r0
 80134f6:	460b      	mov	r3, r1
 80134f8:	4610      	mov	r0, r2
 80134fa:	4619      	mov	r1, r3
 80134fc:	f7ec fecc 	bl	8000298 <__aeabi_dsub>
 8013500:	4602      	mov	r2, r0
 8013502:	460b      	mov	r3, r1
 8013504:	e78f      	b.n	8013426 <__ieee754_pow+0xfe>
 8013506:	9b04      	ldr	r3, [sp, #16]
 8013508:	2b01      	cmp	r3, #1
 801350a:	f47f af2c 	bne.w	8013366 <__ieee754_pow+0x3e>
 801350e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013512:	4619      	mov	r1, r3
 8013514:	e727      	b.n	8013366 <__ieee754_pow+0x3e>
 8013516:	0feb      	lsrs	r3, r5, #31
 8013518:	3b01      	subs	r3, #1
 801351a:	9306      	str	r3, [sp, #24]
 801351c:	9a06      	ldr	r2, [sp, #24]
 801351e:	9b04      	ldr	r3, [sp, #16]
 8013520:	4313      	orrs	r3, r2
 8013522:	d102      	bne.n	801352a <__ieee754_pow+0x202>
 8013524:	4632      	mov	r2, r6
 8013526:	463b      	mov	r3, r7
 8013528:	e7e6      	b.n	80134f8 <__ieee754_pow+0x1d0>
 801352a:	4b19      	ldr	r3, [pc, #100]	; (8013590 <__ieee754_pow+0x268>)
 801352c:	4598      	cmp	r8, r3
 801352e:	f340 80fb 	ble.w	8013728 <__ieee754_pow+0x400>
 8013532:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013536:	4598      	cmp	r8, r3
 8013538:	4b13      	ldr	r3, [pc, #76]	; (8013588 <__ieee754_pow+0x260>)
 801353a:	dd0c      	ble.n	8013556 <__ieee754_pow+0x22e>
 801353c:	429c      	cmp	r4, r3
 801353e:	dc0f      	bgt.n	8013560 <__ieee754_pow+0x238>
 8013540:	f1b9 0f00 	cmp.w	r9, #0
 8013544:	da0f      	bge.n	8013566 <__ieee754_pow+0x23e>
 8013546:	2000      	movs	r0, #0
 8013548:	b009      	add	sp, #36	; 0x24
 801354a:	ecbd 8b06 	vpop	{d8-d10}
 801354e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013552:	f000 bcba 	b.w	8013eca <__math_oflow>
 8013556:	429c      	cmp	r4, r3
 8013558:	dbf2      	blt.n	8013540 <__ieee754_pow+0x218>
 801355a:	4b0a      	ldr	r3, [pc, #40]	; (8013584 <__ieee754_pow+0x25c>)
 801355c:	429c      	cmp	r4, r3
 801355e:	dd19      	ble.n	8013594 <__ieee754_pow+0x26c>
 8013560:	f1b9 0f00 	cmp.w	r9, #0
 8013564:	dcef      	bgt.n	8013546 <__ieee754_pow+0x21e>
 8013566:	2000      	movs	r0, #0
 8013568:	b009      	add	sp, #36	; 0x24
 801356a:	ecbd 8b06 	vpop	{d8-d10}
 801356e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013572:	f000 bca1 	b.w	8013eb8 <__math_uflow>
 8013576:	bf00      	nop
 8013578:	fff00000 	.word	0xfff00000
 801357c:	7ff00000 	.word	0x7ff00000
 8013580:	433fffff 	.word	0x433fffff
 8013584:	3ff00000 	.word	0x3ff00000
 8013588:	3fefffff 	.word	0x3fefffff
 801358c:	3fe00000 	.word	0x3fe00000
 8013590:	41e00000 	.word	0x41e00000
 8013594:	4b60      	ldr	r3, [pc, #384]	; (8013718 <__ieee754_pow+0x3f0>)
 8013596:	2200      	movs	r2, #0
 8013598:	f7ec fe7e 	bl	8000298 <__aeabi_dsub>
 801359c:	a354      	add	r3, pc, #336	; (adr r3, 80136f0 <__ieee754_pow+0x3c8>)
 801359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a2:	4604      	mov	r4, r0
 80135a4:	460d      	mov	r5, r1
 80135a6:	f7ed f82f 	bl	8000608 <__aeabi_dmul>
 80135aa:	a353      	add	r3, pc, #332	; (adr r3, 80136f8 <__ieee754_pow+0x3d0>)
 80135ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b0:	4606      	mov	r6, r0
 80135b2:	460f      	mov	r7, r1
 80135b4:	4620      	mov	r0, r4
 80135b6:	4629      	mov	r1, r5
 80135b8:	f7ed f826 	bl	8000608 <__aeabi_dmul>
 80135bc:	4b57      	ldr	r3, [pc, #348]	; (801371c <__ieee754_pow+0x3f4>)
 80135be:	4682      	mov	sl, r0
 80135c0:	468b      	mov	fp, r1
 80135c2:	2200      	movs	r2, #0
 80135c4:	4620      	mov	r0, r4
 80135c6:	4629      	mov	r1, r5
 80135c8:	f7ed f81e 	bl	8000608 <__aeabi_dmul>
 80135cc:	4602      	mov	r2, r0
 80135ce:	460b      	mov	r3, r1
 80135d0:	a14b      	add	r1, pc, #300	; (adr r1, 8013700 <__ieee754_pow+0x3d8>)
 80135d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135d6:	f7ec fe5f 	bl	8000298 <__aeabi_dsub>
 80135da:	4622      	mov	r2, r4
 80135dc:	462b      	mov	r3, r5
 80135de:	f7ed f813 	bl	8000608 <__aeabi_dmul>
 80135e2:	4602      	mov	r2, r0
 80135e4:	460b      	mov	r3, r1
 80135e6:	2000      	movs	r0, #0
 80135e8:	494d      	ldr	r1, [pc, #308]	; (8013720 <__ieee754_pow+0x3f8>)
 80135ea:	f7ec fe55 	bl	8000298 <__aeabi_dsub>
 80135ee:	4622      	mov	r2, r4
 80135f0:	4680      	mov	r8, r0
 80135f2:	4689      	mov	r9, r1
 80135f4:	462b      	mov	r3, r5
 80135f6:	4620      	mov	r0, r4
 80135f8:	4629      	mov	r1, r5
 80135fa:	f7ed f805 	bl	8000608 <__aeabi_dmul>
 80135fe:	4602      	mov	r2, r0
 8013600:	460b      	mov	r3, r1
 8013602:	4640      	mov	r0, r8
 8013604:	4649      	mov	r1, r9
 8013606:	f7ec ffff 	bl	8000608 <__aeabi_dmul>
 801360a:	a33f      	add	r3, pc, #252	; (adr r3, 8013708 <__ieee754_pow+0x3e0>)
 801360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013610:	f7ec fffa 	bl	8000608 <__aeabi_dmul>
 8013614:	4602      	mov	r2, r0
 8013616:	460b      	mov	r3, r1
 8013618:	4650      	mov	r0, sl
 801361a:	4659      	mov	r1, fp
 801361c:	f7ec fe3c 	bl	8000298 <__aeabi_dsub>
 8013620:	4602      	mov	r2, r0
 8013622:	460b      	mov	r3, r1
 8013624:	4680      	mov	r8, r0
 8013626:	4689      	mov	r9, r1
 8013628:	4630      	mov	r0, r6
 801362a:	4639      	mov	r1, r7
 801362c:	f7ec fe36 	bl	800029c <__adddf3>
 8013630:	2000      	movs	r0, #0
 8013632:	4632      	mov	r2, r6
 8013634:	463b      	mov	r3, r7
 8013636:	4604      	mov	r4, r0
 8013638:	460d      	mov	r5, r1
 801363a:	f7ec fe2d 	bl	8000298 <__aeabi_dsub>
 801363e:	4602      	mov	r2, r0
 8013640:	460b      	mov	r3, r1
 8013642:	4640      	mov	r0, r8
 8013644:	4649      	mov	r1, r9
 8013646:	f7ec fe27 	bl	8000298 <__aeabi_dsub>
 801364a:	9b04      	ldr	r3, [sp, #16]
 801364c:	9a06      	ldr	r2, [sp, #24]
 801364e:	3b01      	subs	r3, #1
 8013650:	4313      	orrs	r3, r2
 8013652:	4682      	mov	sl, r0
 8013654:	468b      	mov	fp, r1
 8013656:	f040 81e7 	bne.w	8013a28 <__ieee754_pow+0x700>
 801365a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013710 <__ieee754_pow+0x3e8>
 801365e:	eeb0 8a47 	vmov.f32	s16, s14
 8013662:	eef0 8a67 	vmov.f32	s17, s15
 8013666:	e9dd 6700 	ldrd	r6, r7, [sp]
 801366a:	2600      	movs	r6, #0
 801366c:	4632      	mov	r2, r6
 801366e:	463b      	mov	r3, r7
 8013670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013674:	f7ec fe10 	bl	8000298 <__aeabi_dsub>
 8013678:	4622      	mov	r2, r4
 801367a:	462b      	mov	r3, r5
 801367c:	f7ec ffc4 	bl	8000608 <__aeabi_dmul>
 8013680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013684:	4680      	mov	r8, r0
 8013686:	4689      	mov	r9, r1
 8013688:	4650      	mov	r0, sl
 801368a:	4659      	mov	r1, fp
 801368c:	f7ec ffbc 	bl	8000608 <__aeabi_dmul>
 8013690:	4602      	mov	r2, r0
 8013692:	460b      	mov	r3, r1
 8013694:	4640      	mov	r0, r8
 8013696:	4649      	mov	r1, r9
 8013698:	f7ec fe00 	bl	800029c <__adddf3>
 801369c:	4632      	mov	r2, r6
 801369e:	463b      	mov	r3, r7
 80136a0:	4680      	mov	r8, r0
 80136a2:	4689      	mov	r9, r1
 80136a4:	4620      	mov	r0, r4
 80136a6:	4629      	mov	r1, r5
 80136a8:	f7ec ffae 	bl	8000608 <__aeabi_dmul>
 80136ac:	460b      	mov	r3, r1
 80136ae:	4604      	mov	r4, r0
 80136b0:	460d      	mov	r5, r1
 80136b2:	4602      	mov	r2, r0
 80136b4:	4649      	mov	r1, r9
 80136b6:	4640      	mov	r0, r8
 80136b8:	f7ec fdf0 	bl	800029c <__adddf3>
 80136bc:	4b19      	ldr	r3, [pc, #100]	; (8013724 <__ieee754_pow+0x3fc>)
 80136be:	4299      	cmp	r1, r3
 80136c0:	ec45 4b19 	vmov	d9, r4, r5
 80136c4:	4606      	mov	r6, r0
 80136c6:	460f      	mov	r7, r1
 80136c8:	468b      	mov	fp, r1
 80136ca:	f340 82f0 	ble.w	8013cae <__ieee754_pow+0x986>
 80136ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80136d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80136d6:	4303      	orrs	r3, r0
 80136d8:	f000 81e4 	beq.w	8013aa4 <__ieee754_pow+0x77c>
 80136dc:	ec51 0b18 	vmov	r0, r1, d8
 80136e0:	2200      	movs	r2, #0
 80136e2:	2300      	movs	r3, #0
 80136e4:	f7ed fa02 	bl	8000aec <__aeabi_dcmplt>
 80136e8:	3800      	subs	r0, #0
 80136ea:	bf18      	it	ne
 80136ec:	2001      	movne	r0, #1
 80136ee:	e72b      	b.n	8013548 <__ieee754_pow+0x220>
 80136f0:	60000000 	.word	0x60000000
 80136f4:	3ff71547 	.word	0x3ff71547
 80136f8:	f85ddf44 	.word	0xf85ddf44
 80136fc:	3e54ae0b 	.word	0x3e54ae0b
 8013700:	55555555 	.word	0x55555555
 8013704:	3fd55555 	.word	0x3fd55555
 8013708:	652b82fe 	.word	0x652b82fe
 801370c:	3ff71547 	.word	0x3ff71547
 8013710:	00000000 	.word	0x00000000
 8013714:	bff00000 	.word	0xbff00000
 8013718:	3ff00000 	.word	0x3ff00000
 801371c:	3fd00000 	.word	0x3fd00000
 8013720:	3fe00000 	.word	0x3fe00000
 8013724:	408fffff 	.word	0x408fffff
 8013728:	4bd5      	ldr	r3, [pc, #852]	; (8013a80 <__ieee754_pow+0x758>)
 801372a:	402b      	ands	r3, r5
 801372c:	2200      	movs	r2, #0
 801372e:	b92b      	cbnz	r3, 801373c <__ieee754_pow+0x414>
 8013730:	4bd4      	ldr	r3, [pc, #848]	; (8013a84 <__ieee754_pow+0x75c>)
 8013732:	f7ec ff69 	bl	8000608 <__aeabi_dmul>
 8013736:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801373a:	460c      	mov	r4, r1
 801373c:	1523      	asrs	r3, r4, #20
 801373e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013742:	4413      	add	r3, r2
 8013744:	9305      	str	r3, [sp, #20]
 8013746:	4bd0      	ldr	r3, [pc, #832]	; (8013a88 <__ieee754_pow+0x760>)
 8013748:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801374c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013750:	429c      	cmp	r4, r3
 8013752:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013756:	dd08      	ble.n	801376a <__ieee754_pow+0x442>
 8013758:	4bcc      	ldr	r3, [pc, #816]	; (8013a8c <__ieee754_pow+0x764>)
 801375a:	429c      	cmp	r4, r3
 801375c:	f340 8162 	ble.w	8013a24 <__ieee754_pow+0x6fc>
 8013760:	9b05      	ldr	r3, [sp, #20]
 8013762:	3301      	adds	r3, #1
 8013764:	9305      	str	r3, [sp, #20]
 8013766:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801376a:	2400      	movs	r4, #0
 801376c:	00e3      	lsls	r3, r4, #3
 801376e:	9307      	str	r3, [sp, #28]
 8013770:	4bc7      	ldr	r3, [pc, #796]	; (8013a90 <__ieee754_pow+0x768>)
 8013772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013776:	ed93 7b00 	vldr	d7, [r3]
 801377a:	4629      	mov	r1, r5
 801377c:	ec53 2b17 	vmov	r2, r3, d7
 8013780:	eeb0 9a47 	vmov.f32	s18, s14
 8013784:	eef0 9a67 	vmov.f32	s19, s15
 8013788:	4682      	mov	sl, r0
 801378a:	f7ec fd85 	bl	8000298 <__aeabi_dsub>
 801378e:	4652      	mov	r2, sl
 8013790:	4606      	mov	r6, r0
 8013792:	460f      	mov	r7, r1
 8013794:	462b      	mov	r3, r5
 8013796:	ec51 0b19 	vmov	r0, r1, d9
 801379a:	f7ec fd7f 	bl	800029c <__adddf3>
 801379e:	4602      	mov	r2, r0
 80137a0:	460b      	mov	r3, r1
 80137a2:	2000      	movs	r0, #0
 80137a4:	49bb      	ldr	r1, [pc, #748]	; (8013a94 <__ieee754_pow+0x76c>)
 80137a6:	f7ed f859 	bl	800085c <__aeabi_ddiv>
 80137aa:	ec41 0b1a 	vmov	d10, r0, r1
 80137ae:	4602      	mov	r2, r0
 80137b0:	460b      	mov	r3, r1
 80137b2:	4630      	mov	r0, r6
 80137b4:	4639      	mov	r1, r7
 80137b6:	f7ec ff27 	bl	8000608 <__aeabi_dmul>
 80137ba:	2300      	movs	r3, #0
 80137bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137c0:	9302      	str	r3, [sp, #8]
 80137c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80137c6:	46ab      	mov	fp, r5
 80137c8:	106d      	asrs	r5, r5, #1
 80137ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80137ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80137d2:	ec41 0b18 	vmov	d8, r0, r1
 80137d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80137da:	2200      	movs	r2, #0
 80137dc:	4640      	mov	r0, r8
 80137de:	4649      	mov	r1, r9
 80137e0:	4614      	mov	r4, r2
 80137e2:	461d      	mov	r5, r3
 80137e4:	f7ec ff10 	bl	8000608 <__aeabi_dmul>
 80137e8:	4602      	mov	r2, r0
 80137ea:	460b      	mov	r3, r1
 80137ec:	4630      	mov	r0, r6
 80137ee:	4639      	mov	r1, r7
 80137f0:	f7ec fd52 	bl	8000298 <__aeabi_dsub>
 80137f4:	ec53 2b19 	vmov	r2, r3, d9
 80137f8:	4606      	mov	r6, r0
 80137fa:	460f      	mov	r7, r1
 80137fc:	4620      	mov	r0, r4
 80137fe:	4629      	mov	r1, r5
 8013800:	f7ec fd4a 	bl	8000298 <__aeabi_dsub>
 8013804:	4602      	mov	r2, r0
 8013806:	460b      	mov	r3, r1
 8013808:	4650      	mov	r0, sl
 801380a:	4659      	mov	r1, fp
 801380c:	f7ec fd44 	bl	8000298 <__aeabi_dsub>
 8013810:	4642      	mov	r2, r8
 8013812:	464b      	mov	r3, r9
 8013814:	f7ec fef8 	bl	8000608 <__aeabi_dmul>
 8013818:	4602      	mov	r2, r0
 801381a:	460b      	mov	r3, r1
 801381c:	4630      	mov	r0, r6
 801381e:	4639      	mov	r1, r7
 8013820:	f7ec fd3a 	bl	8000298 <__aeabi_dsub>
 8013824:	ec53 2b1a 	vmov	r2, r3, d10
 8013828:	f7ec feee 	bl	8000608 <__aeabi_dmul>
 801382c:	ec53 2b18 	vmov	r2, r3, d8
 8013830:	ec41 0b19 	vmov	d9, r0, r1
 8013834:	ec51 0b18 	vmov	r0, r1, d8
 8013838:	f7ec fee6 	bl	8000608 <__aeabi_dmul>
 801383c:	a37c      	add	r3, pc, #496	; (adr r3, 8013a30 <__ieee754_pow+0x708>)
 801383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013842:	4604      	mov	r4, r0
 8013844:	460d      	mov	r5, r1
 8013846:	f7ec fedf 	bl	8000608 <__aeabi_dmul>
 801384a:	a37b      	add	r3, pc, #492	; (adr r3, 8013a38 <__ieee754_pow+0x710>)
 801384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013850:	f7ec fd24 	bl	800029c <__adddf3>
 8013854:	4622      	mov	r2, r4
 8013856:	462b      	mov	r3, r5
 8013858:	f7ec fed6 	bl	8000608 <__aeabi_dmul>
 801385c:	a378      	add	r3, pc, #480	; (adr r3, 8013a40 <__ieee754_pow+0x718>)
 801385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013862:	f7ec fd1b 	bl	800029c <__adddf3>
 8013866:	4622      	mov	r2, r4
 8013868:	462b      	mov	r3, r5
 801386a:	f7ec fecd 	bl	8000608 <__aeabi_dmul>
 801386e:	a376      	add	r3, pc, #472	; (adr r3, 8013a48 <__ieee754_pow+0x720>)
 8013870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013874:	f7ec fd12 	bl	800029c <__adddf3>
 8013878:	4622      	mov	r2, r4
 801387a:	462b      	mov	r3, r5
 801387c:	f7ec fec4 	bl	8000608 <__aeabi_dmul>
 8013880:	a373      	add	r3, pc, #460	; (adr r3, 8013a50 <__ieee754_pow+0x728>)
 8013882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013886:	f7ec fd09 	bl	800029c <__adddf3>
 801388a:	4622      	mov	r2, r4
 801388c:	462b      	mov	r3, r5
 801388e:	f7ec febb 	bl	8000608 <__aeabi_dmul>
 8013892:	a371      	add	r3, pc, #452	; (adr r3, 8013a58 <__ieee754_pow+0x730>)
 8013894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013898:	f7ec fd00 	bl	800029c <__adddf3>
 801389c:	4622      	mov	r2, r4
 801389e:	4606      	mov	r6, r0
 80138a0:	460f      	mov	r7, r1
 80138a2:	462b      	mov	r3, r5
 80138a4:	4620      	mov	r0, r4
 80138a6:	4629      	mov	r1, r5
 80138a8:	f7ec feae 	bl	8000608 <__aeabi_dmul>
 80138ac:	4602      	mov	r2, r0
 80138ae:	460b      	mov	r3, r1
 80138b0:	4630      	mov	r0, r6
 80138b2:	4639      	mov	r1, r7
 80138b4:	f7ec fea8 	bl	8000608 <__aeabi_dmul>
 80138b8:	4642      	mov	r2, r8
 80138ba:	4604      	mov	r4, r0
 80138bc:	460d      	mov	r5, r1
 80138be:	464b      	mov	r3, r9
 80138c0:	ec51 0b18 	vmov	r0, r1, d8
 80138c4:	f7ec fcea 	bl	800029c <__adddf3>
 80138c8:	ec53 2b19 	vmov	r2, r3, d9
 80138cc:	f7ec fe9c 	bl	8000608 <__aeabi_dmul>
 80138d0:	4622      	mov	r2, r4
 80138d2:	462b      	mov	r3, r5
 80138d4:	f7ec fce2 	bl	800029c <__adddf3>
 80138d8:	4642      	mov	r2, r8
 80138da:	4682      	mov	sl, r0
 80138dc:	468b      	mov	fp, r1
 80138de:	464b      	mov	r3, r9
 80138e0:	4640      	mov	r0, r8
 80138e2:	4649      	mov	r1, r9
 80138e4:	f7ec fe90 	bl	8000608 <__aeabi_dmul>
 80138e8:	4b6b      	ldr	r3, [pc, #428]	; (8013a98 <__ieee754_pow+0x770>)
 80138ea:	2200      	movs	r2, #0
 80138ec:	4606      	mov	r6, r0
 80138ee:	460f      	mov	r7, r1
 80138f0:	f7ec fcd4 	bl	800029c <__adddf3>
 80138f4:	4652      	mov	r2, sl
 80138f6:	465b      	mov	r3, fp
 80138f8:	f7ec fcd0 	bl	800029c <__adddf3>
 80138fc:	2000      	movs	r0, #0
 80138fe:	4604      	mov	r4, r0
 8013900:	460d      	mov	r5, r1
 8013902:	4602      	mov	r2, r0
 8013904:	460b      	mov	r3, r1
 8013906:	4640      	mov	r0, r8
 8013908:	4649      	mov	r1, r9
 801390a:	f7ec fe7d 	bl	8000608 <__aeabi_dmul>
 801390e:	4b62      	ldr	r3, [pc, #392]	; (8013a98 <__ieee754_pow+0x770>)
 8013910:	4680      	mov	r8, r0
 8013912:	4689      	mov	r9, r1
 8013914:	2200      	movs	r2, #0
 8013916:	4620      	mov	r0, r4
 8013918:	4629      	mov	r1, r5
 801391a:	f7ec fcbd 	bl	8000298 <__aeabi_dsub>
 801391e:	4632      	mov	r2, r6
 8013920:	463b      	mov	r3, r7
 8013922:	f7ec fcb9 	bl	8000298 <__aeabi_dsub>
 8013926:	4602      	mov	r2, r0
 8013928:	460b      	mov	r3, r1
 801392a:	4650      	mov	r0, sl
 801392c:	4659      	mov	r1, fp
 801392e:	f7ec fcb3 	bl	8000298 <__aeabi_dsub>
 8013932:	ec53 2b18 	vmov	r2, r3, d8
 8013936:	f7ec fe67 	bl	8000608 <__aeabi_dmul>
 801393a:	4622      	mov	r2, r4
 801393c:	4606      	mov	r6, r0
 801393e:	460f      	mov	r7, r1
 8013940:	462b      	mov	r3, r5
 8013942:	ec51 0b19 	vmov	r0, r1, d9
 8013946:	f7ec fe5f 	bl	8000608 <__aeabi_dmul>
 801394a:	4602      	mov	r2, r0
 801394c:	460b      	mov	r3, r1
 801394e:	4630      	mov	r0, r6
 8013950:	4639      	mov	r1, r7
 8013952:	f7ec fca3 	bl	800029c <__adddf3>
 8013956:	4606      	mov	r6, r0
 8013958:	460f      	mov	r7, r1
 801395a:	4602      	mov	r2, r0
 801395c:	460b      	mov	r3, r1
 801395e:	4640      	mov	r0, r8
 8013960:	4649      	mov	r1, r9
 8013962:	f7ec fc9b 	bl	800029c <__adddf3>
 8013966:	a33e      	add	r3, pc, #248	; (adr r3, 8013a60 <__ieee754_pow+0x738>)
 8013968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396c:	2000      	movs	r0, #0
 801396e:	4604      	mov	r4, r0
 8013970:	460d      	mov	r5, r1
 8013972:	f7ec fe49 	bl	8000608 <__aeabi_dmul>
 8013976:	4642      	mov	r2, r8
 8013978:	ec41 0b18 	vmov	d8, r0, r1
 801397c:	464b      	mov	r3, r9
 801397e:	4620      	mov	r0, r4
 8013980:	4629      	mov	r1, r5
 8013982:	f7ec fc89 	bl	8000298 <__aeabi_dsub>
 8013986:	4602      	mov	r2, r0
 8013988:	460b      	mov	r3, r1
 801398a:	4630      	mov	r0, r6
 801398c:	4639      	mov	r1, r7
 801398e:	f7ec fc83 	bl	8000298 <__aeabi_dsub>
 8013992:	a335      	add	r3, pc, #212	; (adr r3, 8013a68 <__ieee754_pow+0x740>)
 8013994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013998:	f7ec fe36 	bl	8000608 <__aeabi_dmul>
 801399c:	a334      	add	r3, pc, #208	; (adr r3, 8013a70 <__ieee754_pow+0x748>)
 801399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a2:	4606      	mov	r6, r0
 80139a4:	460f      	mov	r7, r1
 80139a6:	4620      	mov	r0, r4
 80139a8:	4629      	mov	r1, r5
 80139aa:	f7ec fe2d 	bl	8000608 <__aeabi_dmul>
 80139ae:	4602      	mov	r2, r0
 80139b0:	460b      	mov	r3, r1
 80139b2:	4630      	mov	r0, r6
 80139b4:	4639      	mov	r1, r7
 80139b6:	f7ec fc71 	bl	800029c <__adddf3>
 80139ba:	9a07      	ldr	r2, [sp, #28]
 80139bc:	4b37      	ldr	r3, [pc, #220]	; (8013a9c <__ieee754_pow+0x774>)
 80139be:	4413      	add	r3, r2
 80139c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c4:	f7ec fc6a 	bl	800029c <__adddf3>
 80139c8:	4682      	mov	sl, r0
 80139ca:	9805      	ldr	r0, [sp, #20]
 80139cc:	468b      	mov	fp, r1
 80139ce:	f7ec fdb1 	bl	8000534 <__aeabi_i2d>
 80139d2:	9a07      	ldr	r2, [sp, #28]
 80139d4:	4b32      	ldr	r3, [pc, #200]	; (8013aa0 <__ieee754_pow+0x778>)
 80139d6:	4413      	add	r3, r2
 80139d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80139dc:	4606      	mov	r6, r0
 80139de:	460f      	mov	r7, r1
 80139e0:	4652      	mov	r2, sl
 80139e2:	465b      	mov	r3, fp
 80139e4:	ec51 0b18 	vmov	r0, r1, d8
 80139e8:	f7ec fc58 	bl	800029c <__adddf3>
 80139ec:	4642      	mov	r2, r8
 80139ee:	464b      	mov	r3, r9
 80139f0:	f7ec fc54 	bl	800029c <__adddf3>
 80139f4:	4632      	mov	r2, r6
 80139f6:	463b      	mov	r3, r7
 80139f8:	f7ec fc50 	bl	800029c <__adddf3>
 80139fc:	2000      	movs	r0, #0
 80139fe:	4632      	mov	r2, r6
 8013a00:	463b      	mov	r3, r7
 8013a02:	4604      	mov	r4, r0
 8013a04:	460d      	mov	r5, r1
 8013a06:	f7ec fc47 	bl	8000298 <__aeabi_dsub>
 8013a0a:	4642      	mov	r2, r8
 8013a0c:	464b      	mov	r3, r9
 8013a0e:	f7ec fc43 	bl	8000298 <__aeabi_dsub>
 8013a12:	ec53 2b18 	vmov	r2, r3, d8
 8013a16:	f7ec fc3f 	bl	8000298 <__aeabi_dsub>
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	4650      	mov	r0, sl
 8013a20:	4659      	mov	r1, fp
 8013a22:	e610      	b.n	8013646 <__ieee754_pow+0x31e>
 8013a24:	2401      	movs	r4, #1
 8013a26:	e6a1      	b.n	801376c <__ieee754_pow+0x444>
 8013a28:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013a78 <__ieee754_pow+0x750>
 8013a2c:	e617      	b.n	801365e <__ieee754_pow+0x336>
 8013a2e:	bf00      	nop
 8013a30:	4a454eef 	.word	0x4a454eef
 8013a34:	3fca7e28 	.word	0x3fca7e28
 8013a38:	93c9db65 	.word	0x93c9db65
 8013a3c:	3fcd864a 	.word	0x3fcd864a
 8013a40:	a91d4101 	.word	0xa91d4101
 8013a44:	3fd17460 	.word	0x3fd17460
 8013a48:	518f264d 	.word	0x518f264d
 8013a4c:	3fd55555 	.word	0x3fd55555
 8013a50:	db6fabff 	.word	0xdb6fabff
 8013a54:	3fdb6db6 	.word	0x3fdb6db6
 8013a58:	33333303 	.word	0x33333303
 8013a5c:	3fe33333 	.word	0x3fe33333
 8013a60:	e0000000 	.word	0xe0000000
 8013a64:	3feec709 	.word	0x3feec709
 8013a68:	dc3a03fd 	.word	0xdc3a03fd
 8013a6c:	3feec709 	.word	0x3feec709
 8013a70:	145b01f5 	.word	0x145b01f5
 8013a74:	be3e2fe0 	.word	0xbe3e2fe0
 8013a78:	00000000 	.word	0x00000000
 8013a7c:	3ff00000 	.word	0x3ff00000
 8013a80:	7ff00000 	.word	0x7ff00000
 8013a84:	43400000 	.word	0x43400000
 8013a88:	0003988e 	.word	0x0003988e
 8013a8c:	000bb679 	.word	0x000bb679
 8013a90:	08014598 	.word	0x08014598
 8013a94:	3ff00000 	.word	0x3ff00000
 8013a98:	40080000 	.word	0x40080000
 8013a9c:	080145b8 	.word	0x080145b8
 8013aa0:	080145a8 	.word	0x080145a8
 8013aa4:	a3b3      	add	r3, pc, #716	; (adr r3, 8013d74 <__ieee754_pow+0xa4c>)
 8013aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aaa:	4640      	mov	r0, r8
 8013aac:	4649      	mov	r1, r9
 8013aae:	f7ec fbf5 	bl	800029c <__adddf3>
 8013ab2:	4622      	mov	r2, r4
 8013ab4:	ec41 0b1a 	vmov	d10, r0, r1
 8013ab8:	462b      	mov	r3, r5
 8013aba:	4630      	mov	r0, r6
 8013abc:	4639      	mov	r1, r7
 8013abe:	f7ec fbeb 	bl	8000298 <__aeabi_dsub>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	ec51 0b1a 	vmov	r0, r1, d10
 8013aca:	f7ed f82d 	bl	8000b28 <__aeabi_dcmpgt>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	f47f ae04 	bne.w	80136dc <__ieee754_pow+0x3b4>
 8013ad4:	4aa2      	ldr	r2, [pc, #648]	; (8013d60 <__ieee754_pow+0xa38>)
 8013ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013ada:	4293      	cmp	r3, r2
 8013adc:	f340 8107 	ble.w	8013cee <__ieee754_pow+0x9c6>
 8013ae0:	151b      	asrs	r3, r3, #20
 8013ae2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013ae6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013aea:	fa4a fa03 	asr.w	sl, sl, r3
 8013aee:	44da      	add	sl, fp
 8013af0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013af4:	489b      	ldr	r0, [pc, #620]	; (8013d64 <__ieee754_pow+0xa3c>)
 8013af6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013afa:	4108      	asrs	r0, r1
 8013afc:	ea00 030a 	and.w	r3, r0, sl
 8013b00:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013b04:	f1c1 0114 	rsb	r1, r1, #20
 8013b08:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013b0c:	fa4a fa01 	asr.w	sl, sl, r1
 8013b10:	f1bb 0f00 	cmp.w	fp, #0
 8013b14:	f04f 0200 	mov.w	r2, #0
 8013b18:	4620      	mov	r0, r4
 8013b1a:	4629      	mov	r1, r5
 8013b1c:	bfb8      	it	lt
 8013b1e:	f1ca 0a00 	rsblt	sl, sl, #0
 8013b22:	f7ec fbb9 	bl	8000298 <__aeabi_dsub>
 8013b26:	ec41 0b19 	vmov	d9, r0, r1
 8013b2a:	4642      	mov	r2, r8
 8013b2c:	464b      	mov	r3, r9
 8013b2e:	ec51 0b19 	vmov	r0, r1, d9
 8013b32:	f7ec fbb3 	bl	800029c <__adddf3>
 8013b36:	a37a      	add	r3, pc, #488	; (adr r3, 8013d20 <__ieee754_pow+0x9f8>)
 8013b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b3c:	2000      	movs	r0, #0
 8013b3e:	4604      	mov	r4, r0
 8013b40:	460d      	mov	r5, r1
 8013b42:	f7ec fd61 	bl	8000608 <__aeabi_dmul>
 8013b46:	ec53 2b19 	vmov	r2, r3, d9
 8013b4a:	4606      	mov	r6, r0
 8013b4c:	460f      	mov	r7, r1
 8013b4e:	4620      	mov	r0, r4
 8013b50:	4629      	mov	r1, r5
 8013b52:	f7ec fba1 	bl	8000298 <__aeabi_dsub>
 8013b56:	4602      	mov	r2, r0
 8013b58:	460b      	mov	r3, r1
 8013b5a:	4640      	mov	r0, r8
 8013b5c:	4649      	mov	r1, r9
 8013b5e:	f7ec fb9b 	bl	8000298 <__aeabi_dsub>
 8013b62:	a371      	add	r3, pc, #452	; (adr r3, 8013d28 <__ieee754_pow+0xa00>)
 8013b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b68:	f7ec fd4e 	bl	8000608 <__aeabi_dmul>
 8013b6c:	a370      	add	r3, pc, #448	; (adr r3, 8013d30 <__ieee754_pow+0xa08>)
 8013b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b72:	4680      	mov	r8, r0
 8013b74:	4689      	mov	r9, r1
 8013b76:	4620      	mov	r0, r4
 8013b78:	4629      	mov	r1, r5
 8013b7a:	f7ec fd45 	bl	8000608 <__aeabi_dmul>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	460b      	mov	r3, r1
 8013b82:	4640      	mov	r0, r8
 8013b84:	4649      	mov	r1, r9
 8013b86:	f7ec fb89 	bl	800029c <__adddf3>
 8013b8a:	4604      	mov	r4, r0
 8013b8c:	460d      	mov	r5, r1
 8013b8e:	4602      	mov	r2, r0
 8013b90:	460b      	mov	r3, r1
 8013b92:	4630      	mov	r0, r6
 8013b94:	4639      	mov	r1, r7
 8013b96:	f7ec fb81 	bl	800029c <__adddf3>
 8013b9a:	4632      	mov	r2, r6
 8013b9c:	463b      	mov	r3, r7
 8013b9e:	4680      	mov	r8, r0
 8013ba0:	4689      	mov	r9, r1
 8013ba2:	f7ec fb79 	bl	8000298 <__aeabi_dsub>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	460b      	mov	r3, r1
 8013baa:	4620      	mov	r0, r4
 8013bac:	4629      	mov	r1, r5
 8013bae:	f7ec fb73 	bl	8000298 <__aeabi_dsub>
 8013bb2:	4642      	mov	r2, r8
 8013bb4:	4606      	mov	r6, r0
 8013bb6:	460f      	mov	r7, r1
 8013bb8:	464b      	mov	r3, r9
 8013bba:	4640      	mov	r0, r8
 8013bbc:	4649      	mov	r1, r9
 8013bbe:	f7ec fd23 	bl	8000608 <__aeabi_dmul>
 8013bc2:	a35d      	add	r3, pc, #372	; (adr r3, 8013d38 <__ieee754_pow+0xa10>)
 8013bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc8:	4604      	mov	r4, r0
 8013bca:	460d      	mov	r5, r1
 8013bcc:	f7ec fd1c 	bl	8000608 <__aeabi_dmul>
 8013bd0:	a35b      	add	r3, pc, #364	; (adr r3, 8013d40 <__ieee754_pow+0xa18>)
 8013bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd6:	f7ec fb5f 	bl	8000298 <__aeabi_dsub>
 8013bda:	4622      	mov	r2, r4
 8013bdc:	462b      	mov	r3, r5
 8013bde:	f7ec fd13 	bl	8000608 <__aeabi_dmul>
 8013be2:	a359      	add	r3, pc, #356	; (adr r3, 8013d48 <__ieee754_pow+0xa20>)
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	f7ec fb58 	bl	800029c <__adddf3>
 8013bec:	4622      	mov	r2, r4
 8013bee:	462b      	mov	r3, r5
 8013bf0:	f7ec fd0a 	bl	8000608 <__aeabi_dmul>
 8013bf4:	a356      	add	r3, pc, #344	; (adr r3, 8013d50 <__ieee754_pow+0xa28>)
 8013bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bfa:	f7ec fb4d 	bl	8000298 <__aeabi_dsub>
 8013bfe:	4622      	mov	r2, r4
 8013c00:	462b      	mov	r3, r5
 8013c02:	f7ec fd01 	bl	8000608 <__aeabi_dmul>
 8013c06:	a354      	add	r3, pc, #336	; (adr r3, 8013d58 <__ieee754_pow+0xa30>)
 8013c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0c:	f7ec fb46 	bl	800029c <__adddf3>
 8013c10:	4622      	mov	r2, r4
 8013c12:	462b      	mov	r3, r5
 8013c14:	f7ec fcf8 	bl	8000608 <__aeabi_dmul>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	4640      	mov	r0, r8
 8013c1e:	4649      	mov	r1, r9
 8013c20:	f7ec fb3a 	bl	8000298 <__aeabi_dsub>
 8013c24:	4604      	mov	r4, r0
 8013c26:	460d      	mov	r5, r1
 8013c28:	4602      	mov	r2, r0
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	4640      	mov	r0, r8
 8013c2e:	4649      	mov	r1, r9
 8013c30:	f7ec fcea 	bl	8000608 <__aeabi_dmul>
 8013c34:	2200      	movs	r2, #0
 8013c36:	ec41 0b19 	vmov	d9, r0, r1
 8013c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c3e:	4620      	mov	r0, r4
 8013c40:	4629      	mov	r1, r5
 8013c42:	f7ec fb29 	bl	8000298 <__aeabi_dsub>
 8013c46:	4602      	mov	r2, r0
 8013c48:	460b      	mov	r3, r1
 8013c4a:	ec51 0b19 	vmov	r0, r1, d9
 8013c4e:	f7ec fe05 	bl	800085c <__aeabi_ddiv>
 8013c52:	4632      	mov	r2, r6
 8013c54:	4604      	mov	r4, r0
 8013c56:	460d      	mov	r5, r1
 8013c58:	463b      	mov	r3, r7
 8013c5a:	4640      	mov	r0, r8
 8013c5c:	4649      	mov	r1, r9
 8013c5e:	f7ec fcd3 	bl	8000608 <__aeabi_dmul>
 8013c62:	4632      	mov	r2, r6
 8013c64:	463b      	mov	r3, r7
 8013c66:	f7ec fb19 	bl	800029c <__adddf3>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	4620      	mov	r0, r4
 8013c70:	4629      	mov	r1, r5
 8013c72:	f7ec fb11 	bl	8000298 <__aeabi_dsub>
 8013c76:	4642      	mov	r2, r8
 8013c78:	464b      	mov	r3, r9
 8013c7a:	f7ec fb0d 	bl	8000298 <__aeabi_dsub>
 8013c7e:	460b      	mov	r3, r1
 8013c80:	4602      	mov	r2, r0
 8013c82:	4939      	ldr	r1, [pc, #228]	; (8013d68 <__ieee754_pow+0xa40>)
 8013c84:	2000      	movs	r0, #0
 8013c86:	f7ec fb07 	bl	8000298 <__aeabi_dsub>
 8013c8a:	ec41 0b10 	vmov	d0, r0, r1
 8013c8e:	ee10 3a90 	vmov	r3, s1
 8013c92:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c9a:	da2b      	bge.n	8013cf4 <__ieee754_pow+0x9cc>
 8013c9c:	4650      	mov	r0, sl
 8013c9e:	f000 f86f 	bl	8013d80 <scalbn>
 8013ca2:	ec51 0b10 	vmov	r0, r1, d0
 8013ca6:	ec53 2b18 	vmov	r2, r3, d8
 8013caa:	f7ff bbee 	b.w	801348a <__ieee754_pow+0x162>
 8013cae:	4b2f      	ldr	r3, [pc, #188]	; (8013d6c <__ieee754_pow+0xa44>)
 8013cb0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013cb4:	429e      	cmp	r6, r3
 8013cb6:	f77f af0d 	ble.w	8013ad4 <__ieee754_pow+0x7ac>
 8013cba:	4b2d      	ldr	r3, [pc, #180]	; (8013d70 <__ieee754_pow+0xa48>)
 8013cbc:	440b      	add	r3, r1
 8013cbe:	4303      	orrs	r3, r0
 8013cc0:	d009      	beq.n	8013cd6 <__ieee754_pow+0x9ae>
 8013cc2:	ec51 0b18 	vmov	r0, r1, d8
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	2300      	movs	r3, #0
 8013cca:	f7ec ff0f 	bl	8000aec <__aeabi_dcmplt>
 8013cce:	3800      	subs	r0, #0
 8013cd0:	bf18      	it	ne
 8013cd2:	2001      	movne	r0, #1
 8013cd4:	e448      	b.n	8013568 <__ieee754_pow+0x240>
 8013cd6:	4622      	mov	r2, r4
 8013cd8:	462b      	mov	r3, r5
 8013cda:	f7ec fadd 	bl	8000298 <__aeabi_dsub>
 8013cde:	4642      	mov	r2, r8
 8013ce0:	464b      	mov	r3, r9
 8013ce2:	f7ec ff17 	bl	8000b14 <__aeabi_dcmpge>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	f43f aef4 	beq.w	8013ad4 <__ieee754_pow+0x7ac>
 8013cec:	e7e9      	b.n	8013cc2 <__ieee754_pow+0x99a>
 8013cee:	f04f 0a00 	mov.w	sl, #0
 8013cf2:	e71a      	b.n	8013b2a <__ieee754_pow+0x802>
 8013cf4:	ec51 0b10 	vmov	r0, r1, d0
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	e7d4      	b.n	8013ca6 <__ieee754_pow+0x97e>
 8013cfc:	491a      	ldr	r1, [pc, #104]	; (8013d68 <__ieee754_pow+0xa40>)
 8013cfe:	2000      	movs	r0, #0
 8013d00:	f7ff bb31 	b.w	8013366 <__ieee754_pow+0x3e>
 8013d04:	2000      	movs	r0, #0
 8013d06:	2100      	movs	r1, #0
 8013d08:	f7ff bb2d 	b.w	8013366 <__ieee754_pow+0x3e>
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	4639      	mov	r1, r7
 8013d10:	f7ff bb29 	b.w	8013366 <__ieee754_pow+0x3e>
 8013d14:	9204      	str	r2, [sp, #16]
 8013d16:	f7ff bb7b 	b.w	8013410 <__ieee754_pow+0xe8>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	f7ff bb65 	b.w	80133ea <__ieee754_pow+0xc2>
 8013d20:	00000000 	.word	0x00000000
 8013d24:	3fe62e43 	.word	0x3fe62e43
 8013d28:	fefa39ef 	.word	0xfefa39ef
 8013d2c:	3fe62e42 	.word	0x3fe62e42
 8013d30:	0ca86c39 	.word	0x0ca86c39
 8013d34:	be205c61 	.word	0xbe205c61
 8013d38:	72bea4d0 	.word	0x72bea4d0
 8013d3c:	3e663769 	.word	0x3e663769
 8013d40:	c5d26bf1 	.word	0xc5d26bf1
 8013d44:	3ebbbd41 	.word	0x3ebbbd41
 8013d48:	af25de2c 	.word	0xaf25de2c
 8013d4c:	3f11566a 	.word	0x3f11566a
 8013d50:	16bebd93 	.word	0x16bebd93
 8013d54:	3f66c16c 	.word	0x3f66c16c
 8013d58:	5555553e 	.word	0x5555553e
 8013d5c:	3fc55555 	.word	0x3fc55555
 8013d60:	3fe00000 	.word	0x3fe00000
 8013d64:	fff00000 	.word	0xfff00000
 8013d68:	3ff00000 	.word	0x3ff00000
 8013d6c:	4090cbff 	.word	0x4090cbff
 8013d70:	3f6f3400 	.word	0x3f6f3400
 8013d74:	652b82fe 	.word	0x652b82fe
 8013d78:	3c971547 	.word	0x3c971547
 8013d7c:	00000000 	.word	0x00000000

08013d80 <scalbn>:
 8013d80:	b570      	push	{r4, r5, r6, lr}
 8013d82:	ec55 4b10 	vmov	r4, r5, d0
 8013d86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	462b      	mov	r3, r5
 8013d8e:	b999      	cbnz	r1, 8013db8 <scalbn+0x38>
 8013d90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d94:	4323      	orrs	r3, r4
 8013d96:	d03f      	beq.n	8013e18 <scalbn+0x98>
 8013d98:	4b35      	ldr	r3, [pc, #212]	; (8013e70 <scalbn+0xf0>)
 8013d9a:	4629      	mov	r1, r5
 8013d9c:	ee10 0a10 	vmov	r0, s0
 8013da0:	2200      	movs	r2, #0
 8013da2:	f7ec fc31 	bl	8000608 <__aeabi_dmul>
 8013da6:	4b33      	ldr	r3, [pc, #204]	; (8013e74 <scalbn+0xf4>)
 8013da8:	429e      	cmp	r6, r3
 8013daa:	4604      	mov	r4, r0
 8013dac:	460d      	mov	r5, r1
 8013dae:	da10      	bge.n	8013dd2 <scalbn+0x52>
 8013db0:	a327      	add	r3, pc, #156	; (adr r3, 8013e50 <scalbn+0xd0>)
 8013db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db6:	e01f      	b.n	8013df8 <scalbn+0x78>
 8013db8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013dbc:	4291      	cmp	r1, r2
 8013dbe:	d10c      	bne.n	8013dda <scalbn+0x5a>
 8013dc0:	ee10 2a10 	vmov	r2, s0
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	4629      	mov	r1, r5
 8013dc8:	f7ec fa68 	bl	800029c <__adddf3>
 8013dcc:	4604      	mov	r4, r0
 8013dce:	460d      	mov	r5, r1
 8013dd0:	e022      	b.n	8013e18 <scalbn+0x98>
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013dd8:	3936      	subs	r1, #54	; 0x36
 8013dda:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013dde:	4296      	cmp	r6, r2
 8013de0:	dd0d      	ble.n	8013dfe <scalbn+0x7e>
 8013de2:	2d00      	cmp	r5, #0
 8013de4:	a11c      	add	r1, pc, #112	; (adr r1, 8013e58 <scalbn+0xd8>)
 8013de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dea:	da02      	bge.n	8013df2 <scalbn+0x72>
 8013dec:	a11c      	add	r1, pc, #112	; (adr r1, 8013e60 <scalbn+0xe0>)
 8013dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013df2:	a319      	add	r3, pc, #100	; (adr r3, 8013e58 <scalbn+0xd8>)
 8013df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df8:	f7ec fc06 	bl	8000608 <__aeabi_dmul>
 8013dfc:	e7e6      	b.n	8013dcc <scalbn+0x4c>
 8013dfe:	1872      	adds	r2, r6, r1
 8013e00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013e04:	428a      	cmp	r2, r1
 8013e06:	dcec      	bgt.n	8013de2 <scalbn+0x62>
 8013e08:	2a00      	cmp	r2, #0
 8013e0a:	dd08      	ble.n	8013e1e <scalbn+0x9e>
 8013e0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013e10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013e14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013e18:	ec45 4b10 	vmov	d0, r4, r5
 8013e1c:	bd70      	pop	{r4, r5, r6, pc}
 8013e1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013e22:	da08      	bge.n	8013e36 <scalbn+0xb6>
 8013e24:	2d00      	cmp	r5, #0
 8013e26:	a10a      	add	r1, pc, #40	; (adr r1, 8013e50 <scalbn+0xd0>)
 8013e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e2c:	dac0      	bge.n	8013db0 <scalbn+0x30>
 8013e2e:	a10e      	add	r1, pc, #56	; (adr r1, 8013e68 <scalbn+0xe8>)
 8013e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e34:	e7bc      	b.n	8013db0 <scalbn+0x30>
 8013e36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013e3a:	3236      	adds	r2, #54	; 0x36
 8013e3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013e40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013e44:	4620      	mov	r0, r4
 8013e46:	4b0c      	ldr	r3, [pc, #48]	; (8013e78 <scalbn+0xf8>)
 8013e48:	2200      	movs	r2, #0
 8013e4a:	e7d5      	b.n	8013df8 <scalbn+0x78>
 8013e4c:	f3af 8000 	nop.w
 8013e50:	c2f8f359 	.word	0xc2f8f359
 8013e54:	01a56e1f 	.word	0x01a56e1f
 8013e58:	8800759c 	.word	0x8800759c
 8013e5c:	7e37e43c 	.word	0x7e37e43c
 8013e60:	8800759c 	.word	0x8800759c
 8013e64:	fe37e43c 	.word	0xfe37e43c
 8013e68:	c2f8f359 	.word	0xc2f8f359
 8013e6c:	81a56e1f 	.word	0x81a56e1f
 8013e70:	43500000 	.word	0x43500000
 8013e74:	ffff3cb0 	.word	0xffff3cb0
 8013e78:	3c900000 	.word	0x3c900000

08013e7c <with_errno>:
 8013e7c:	b570      	push	{r4, r5, r6, lr}
 8013e7e:	4604      	mov	r4, r0
 8013e80:	460d      	mov	r5, r1
 8013e82:	4616      	mov	r6, r2
 8013e84:	f7fc fe7a 	bl	8010b7c <__errno>
 8013e88:	4629      	mov	r1, r5
 8013e8a:	6006      	str	r6, [r0, #0]
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	bd70      	pop	{r4, r5, r6, pc}

08013e90 <xflow>:
 8013e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e92:	4614      	mov	r4, r2
 8013e94:	461d      	mov	r5, r3
 8013e96:	b108      	cbz	r0, 8013e9c <xflow+0xc>
 8013e98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8013ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	4629      	mov	r1, r5
 8013ea8:	f7ec fbae 	bl	8000608 <__aeabi_dmul>
 8013eac:	2222      	movs	r2, #34	; 0x22
 8013eae:	b003      	add	sp, #12
 8013eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013eb4:	f7ff bfe2 	b.w	8013e7c <with_errno>

08013eb8 <__math_uflow>:
 8013eb8:	b508      	push	{r3, lr}
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013ec0:	f7ff ffe6 	bl	8013e90 <xflow>
 8013ec4:	ec41 0b10 	vmov	d0, r0, r1
 8013ec8:	bd08      	pop	{r3, pc}

08013eca <__math_oflow>:
 8013eca:	b508      	push	{r3, lr}
 8013ecc:	2200      	movs	r2, #0
 8013ece:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013ed2:	f7ff ffdd 	bl	8013e90 <xflow>
 8013ed6:	ec41 0b10 	vmov	d0, r0, r1
 8013eda:	bd08      	pop	{r3, pc}

08013edc <_init>:
 8013edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ede:	bf00      	nop
 8013ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ee2:	bc08      	pop	{r3}
 8013ee4:	469e      	mov	lr, r3
 8013ee6:	4770      	bx	lr

08013ee8 <_fini>:
 8013ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eea:	bf00      	nop
 8013eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eee:	bc08      	pop	{r3}
 8013ef0:	469e      	mov	lr, r3
 8013ef2:	4770      	bx	lr
