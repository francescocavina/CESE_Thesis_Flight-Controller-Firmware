
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800d2b8  0800d2b8  0001d2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5f0  0800d5f0  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5f0  0800d5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5f8  0800d5f8  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5f8  0800d5f8  0001d5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5fc  0800d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800d600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000568c  20000170  0800d770  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057fc  0800d770  000257fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000222f3  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056be  00000000  00000000  000424d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d60  00000000  00000000  00047b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a5  00000000  00000000  000498f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001df1e  00000000  00000000  0004af9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027899  00000000  00000000  00068ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f405  00000000  00000000  00090754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081b8  00000000  00000000  0012fb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00137d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d29c 	.word	0x0800d29c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	0800d29c 	.word	0x0800d29c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 b970 	b.w	8000f14 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	460d      	mov	r5, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	460f      	mov	r7, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14a      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4694      	mov	ip, r2
 8000c60:	d965      	bls.n	8000d2e <__udivmoddi4+0xe2>
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	b143      	cbz	r3, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c6c:	f1c3 0220 	rsb	r2, r3, #32
 8000c70:	409f      	lsls	r7, r3
 8000c72:	fa20 f202 	lsr.w	r2, r0, r2
 8000c76:	4317      	orrs	r7, r2
 8000c78:	409c      	lsls	r4, r3
 8000c7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7e:	fa1f f58c 	uxth.w	r5, ip
 8000c82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c86:	0c22      	lsrs	r2, r4, #16
 8000c88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c90:	fb01 f005 	mul.w	r0, r1, r5
 8000c94:	4290      	cmp	r0, r2
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x62>
 8000c98:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ca0:	f080 811c 	bcs.w	8000edc <__udivmoddi4+0x290>
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	f240 8119 	bls.w	8000edc <__udivmoddi4+0x290>
 8000caa:	3902      	subs	r1, #2
 8000cac:	4462      	add	r2, ip
 8000cae:	1a12      	subs	r2, r2, r0
 8000cb0:	b2a4      	uxth	r4, r4
 8000cb2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cbe:	fb00 f505 	mul.w	r5, r0, r5
 8000cc2:	42a5      	cmp	r5, r4
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x90>
 8000cc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cca:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cce:	f080 8107 	bcs.w	8000ee0 <__udivmoddi4+0x294>
 8000cd2:	42a5      	cmp	r5, r4
 8000cd4:	f240 8104 	bls.w	8000ee0 <__udivmoddi4+0x294>
 8000cd8:	4464      	add	r4, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11e      	cbz	r6, 8000cee <__udivmoddi4+0xa2>
 8000ce6:	40dc      	lsrs	r4, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e9c6 4300 	strd	r4, r3, [r6]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0xbc>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	f000 80ed 	beq.w	8000ed6 <__udivmoddi4+0x28a>
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e9c6 0500 	strd	r0, r5, [r6]
 8000d02:	4608      	mov	r0, r1
 8000d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d08:	fab3 f183 	clz	r1, r3
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	d149      	bne.n	8000da4 <__udivmoddi4+0x158>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d302      	bcc.n	8000d1a <__udivmoddi4+0xce>
 8000d14:	4282      	cmp	r2, r0
 8000d16:	f200 80f8 	bhi.w	8000f0a <__udivmoddi4+0x2be>
 8000d1a:	1a84      	subs	r4, r0, r2
 8000d1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d20:	2001      	movs	r0, #1
 8000d22:	4617      	mov	r7, r2
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d0e2      	beq.n	8000cee <__udivmoddi4+0xa2>
 8000d28:	e9c6 4700 	strd	r4, r7, [r6]
 8000d2c:	e7df      	b.n	8000cee <__udivmoddi4+0xa2>
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xe6>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f382 	clz	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x210>
 8000d3c:	1a8a      	subs	r2, r1, r2
 8000d3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	2101      	movs	r1, #1
 8000d48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d50:	0c22      	lsrs	r2, r4, #16
 8000d52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d56:	fb0e f005 	mul.w	r0, lr, r5
 8000d5a:	4290      	cmp	r0, r2
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d62:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x122>
 8000d68:	4290      	cmp	r0, r2
 8000d6a:	f200 80cb 	bhi.w	8000f04 <__udivmoddi4+0x2b8>
 8000d6e:	4645      	mov	r5, r8
 8000d70:	1a12      	subs	r2, r2, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d78:	fb07 2210 	mls	r2, r7, r0, r2
 8000d7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d80:	fb0e fe00 	mul.w	lr, lr, r0
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x14e>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d90:	d202      	bcs.n	8000d98 <__udivmoddi4+0x14c>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	f200 80bb 	bhi.w	8000f0e <__udivmoddi4+0x2c2>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	eba4 040e 	sub.w	r4, r4, lr
 8000d9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000da2:	e79f      	b.n	8000ce4 <__udivmoddi4+0x98>
 8000da4:	f1c1 0720 	rsb	r7, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db2:	fa05 f401 	lsl.w	r4, r5, r1
 8000db6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dba:	40fd      	lsrs	r5, r7
 8000dbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	fb09 5518 	mls	r5, r9, r8, r5
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd8:	42a5      	cmp	r5, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	fa00 f001 	lsl.w	r0, r0, r1
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dec:	f080 8088 	bcs.w	8000f00 <__udivmoddi4+0x2b4>
 8000df0:	42a5      	cmp	r5, r4
 8000df2:	f240 8085 	bls.w	8000f00 <__udivmoddi4+0x2b4>
 8000df6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfa:	4464      	add	r4, ip
 8000dfc:	1b64      	subs	r4, r4, r5
 8000dfe:	b29d      	uxth	r5, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1da>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e1c:	d26c      	bcs.n	8000ef8 <__udivmoddi4+0x2ac>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	d96a      	bls.n	8000ef8 <__udivmoddi4+0x2ac>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	4464      	add	r4, ip
 8000e26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	42ac      	cmp	r4, r5
 8000e34:	46c8      	mov	r8, r9
 8000e36:	46ae      	mov	lr, r5
 8000e38:	d356      	bcc.n	8000ee8 <__udivmoddi4+0x29c>
 8000e3a:	d053      	beq.n	8000ee4 <__udivmoddi4+0x298>
 8000e3c:	b156      	cbz	r6, 8000e54 <__udivmoddi4+0x208>
 8000e3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e42:	eb64 040e 	sbc.w	r4, r4, lr
 8000e46:	fa04 f707 	lsl.w	r7, r4, r7
 8000e4a:	40ca      	lsrs	r2, r1
 8000e4c:	40cc      	lsrs	r4, r1
 8000e4e:	4317      	orrs	r7, r2
 8000e50:	e9c6 7400 	strd	r7, r4, [r6]
 8000e54:	4618      	mov	r0, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	f1c3 0120 	rsb	r1, r3, #32
 8000e60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e64:	fa20 f201 	lsr.w	r2, r0, r1
 8000e68:	fa25 f101 	lsr.w	r1, r5, r1
 8000e6c:	409d      	lsls	r5, r3
 8000e6e:	432a      	orrs	r2, r5
 8000e70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e74:	fa1f fe8c 	uxth.w	lr, ip
 8000e78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e80:	0c11      	lsrs	r1, r2, #16
 8000e82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e86:	fb00 f50e 	mul.w	r5, r0, lr
 8000e8a:	428d      	cmp	r5, r1
 8000e8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x258>
 8000e92:	eb1c 0101 	adds.w	r1, ip, r1
 8000e96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9a:	d22f      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000e9c:	428d      	cmp	r5, r1
 8000e9e:	d92d      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4461      	add	r1, ip
 8000ea4:	1b49      	subs	r1, r1, r5
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eac:	fb07 1115 	mls	r1, r7, r5, r1
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb8:	4291      	cmp	r1, r2
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x282>
 8000ebc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ec4:	d216      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000ec6:	4291      	cmp	r1, r2
 8000ec8:	d914      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000eca:	3d02      	subs	r5, #2
 8000ecc:	4462      	add	r2, ip
 8000ece:	1a52      	subs	r2, r2, r1
 8000ed0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed4:	e738      	b.n	8000d48 <__udivmoddi4+0xfc>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xa2>
 8000edc:	4639      	mov	r1, r7
 8000ede:	e6e6      	b.n	8000cae <__udivmoddi4+0x62>
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	e6fb      	b.n	8000cdc <__udivmoddi4+0x90>
 8000ee4:	4548      	cmp	r0, r9
 8000ee6:	d2a9      	bcs.n	8000e3c <__udivmoddi4+0x1f0>
 8000ee8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	e7a3      	b.n	8000e3c <__udivmoddi4+0x1f0>
 8000ef4:	4645      	mov	r5, r8
 8000ef6:	e7ea      	b.n	8000ece <__udivmoddi4+0x282>
 8000ef8:	462b      	mov	r3, r5
 8000efa:	e794      	b.n	8000e26 <__udivmoddi4+0x1da>
 8000efc:	4640      	mov	r0, r8
 8000efe:	e7d1      	b.n	8000ea4 <__udivmoddi4+0x258>
 8000f00:	46d0      	mov	r8, sl
 8000f02:	e77b      	b.n	8000dfc <__udivmoddi4+0x1b0>
 8000f04:	3d02      	subs	r5, #2
 8000f06:	4462      	add	r2, ip
 8000f08:	e732      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e70a      	b.n	8000d24 <__udivmoddi4+0xd8>
 8000f0e:	4464      	add	r4, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e742      	b.n	8000d9a <__udivmoddi4+0x14e>

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <FlightController_HeartbeatLight>:
static IBUS_HandleTypeDef_t * rc_controller;
static MPU6050_HandleTypeDef_t * hmpu6050;
static ESC_HandleTypeDef_t * hesc;

/* --- Private function implementation --------------------------------------------------------- */
void FlightController_HeartbeatLight(void *ptr) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_DELAY);
 8000f24:	23c8      	movs	r3, #200	; 0xc8
 8000f26:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState); //TODO
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <FlightController_HeartbeatLight+0x38>)
 8000f32:	f002 f8b3 	bl	800309c <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e001      	b.n	8000f46 <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
        }

        /* Set time delay */
        vTaskDelay(xDelay);
 8000f46:	68b8      	ldr	r0, [r7, #8]
 8000f48:	f009 fdbc 	bl	800aac4 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState); //TODO
 8000f4c:	e7ec      	b.n	8000f28 <FlightController_HeartbeatLight+0x10>
 8000f4e:	bf00      	nop
 8000f50:	40020800 	.word	0x40020800

08000f54 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void *ptr) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	while(1) {
 8000f5c:	e7fe      	b.n	8000f5c <FlightController_FlightLights+0x8>
	...

08000f60 <FlightController_Read_FSA8S>:

	}
}

void FlightController_Read_FSA8S(void *ptr) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

    uint8_t channel = CHANNEL_1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    static uint16_t channelValue;
    uint8_t str[20];

	const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8000f6e:	2332      	movs	r3, #50	; 0x32
 8000f70:	623b      	str	r3, [r7, #32]

    while (1) {

        channelValue = FSA8S_ReadChannel(rc_controller, channel);
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <FlightController_Read_FSA8S+0x60>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 f8bd 	bl	80020fc <FSA8S_ReadChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <FlightController_Read_FSA8S+0x64>)
 8000f88:	801a      	strh	r2, [r3, #0]
        sprintf((char *)str, (const char *)"Channel %d: %d\r\n", channel, channelValue);
 8000f8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <FlightController_Read_FSA8S+0x64>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	f107 000c 	add.w	r0, r7, #12
 8000f96:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <FlightController_Read_FSA8S+0x68>)
 8000f98:	f00b fb04 	bl	800c5a4 <siprintf>
        CDC_Transmit_FS(str, strlen((const char *)str));
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f91d 	bl	80001e0 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00a fde9 	bl	800bb88 <CDC_Transmit_FS>

        vTaskDelay(xDelay);
 8000fb6:	6a38      	ldr	r0, [r7, #32]
 8000fb8:	f009 fd84 	bl	800aac4 <vTaskDelay>
        channelValue = FSA8S_ReadChannel(rc_controller, channel);
 8000fbc:	e7d9      	b.n	8000f72 <FlightController_Read_FSA8S+0x12>
 8000fbe:	bf00      	nop
 8000fc0:	200001a0 	.word	0x200001a0
 8000fc4:	200001ac 	.word	0x200001ac
 8000fc8:	0800d2b8 	.word	0x0800d2b8

08000fcc <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void *ptr) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0ba      	sub	sp, #232	; 0xe8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    accelerometerValues_t * accelerometerValues;
    uint16_t tempVal;
    magnetometerValues_t * magnetometerValues;

    while (1) {
    	HAL_Delay(1000);
 8000fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd8:	f001 fbc0 	bl	800275c <HAL_Delay>

		MPU6050_ReadGyroscope(hmpu6050, gyroscopeValues);
 8000fdc:	4b7c      	ldr	r3, [pc, #496]	; (80011d0 <FlightController_Read_GY87+0x204>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f903 	bl	80021f0 <MPU6050_ReadGyroscope>
		sprintf((char *)str1, (const char *)"Value Gyro X: %d\r\n", gyroscopeValues->gyroscopeX);
 8000fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ff8:	4976      	ldr	r1, [pc, #472]	; (80011d4 <FlightController_Read_GY87+0x208>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00b fad2 	bl	800c5a4 <siprintf>
		LOG(str1, LOG_DEBUGGING);
 8001000:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fad4 	bl	80025b4 <LOG>
		HAL_Delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f001 fba5 	bl	800275c <HAL_Delay>
		sprintf((char *)str1, (const char *)"Value Gyro Y: %d\r\n", gyroscopeValues->gyroscopeY);
 8001012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001016:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800101a:	461a      	mov	r2, r3
 800101c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001020:	496d      	ldr	r1, [pc, #436]	; (80011d8 <FlightController_Read_GY87+0x20c>)
 8001022:	4618      	mov	r0, r3
 8001024:	f00b fabe 	bl	800c5a4 <siprintf>
		LOG(str1, LOG_DEBUGGING);
 8001028:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800102c:	2101      	movs	r1, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fac0 	bl	80025b4 <LOG>
		HAL_Delay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f001 fb91 	bl	800275c <HAL_Delay>
		sprintf((char *)str1, (const char *)"Value Gyro Z: %d\r\n\n", gyroscopeValues->gyroscopeZ);
 800103a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800103e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001042:	461a      	mov	r2, r3
 8001044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001048:	4964      	ldr	r1, [pc, #400]	; (80011dc <FlightController_Read_GY87+0x210>)
 800104a:	4618      	mov	r0, r3
 800104c:	f00b faaa 	bl	800c5a4 <siprintf>
		LOG(str1, LOG_DEBUGGING);
 8001050:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f001 faac 	bl	80025b4 <LOG>
		HAL_Delay(10);
 800105c:	200a      	movs	r0, #10
 800105e:	f001 fb7d 	bl	800275c <HAL_Delay>

		MPU6050_ReadAccelerometer(hmpu6050, accelerometerValues);
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <FlightController_Read_GY87+0x204>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800106a:	4618      	mov	r0, r3
 800106c:	f001 f92a 	bl	80022c4 <MPU6050_ReadAccelerometer>
		sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n", accelerometerValues->accelerometerX);
 8001070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	461a      	mov	r2, r3
 800107a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800107e:	4958      	ldr	r1, [pc, #352]	; (80011e0 <FlightController_Read_GY87+0x214>)
 8001080:	4618      	mov	r0, r3
 8001082:	f00b fa8f 	bl	800c5a4 <siprintf>
		LOG(str2, LOG_DEBUGGING);
 8001086:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fa91 	bl	80025b4 <LOG>
		HAL_Delay(10);
 8001092:	200a      	movs	r0, #10
 8001094:	f001 fb62 	bl	800275c <HAL_Delay>
		sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n", accelerometerValues->accelerometerY);
 8001098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800109c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010a6:	494f      	ldr	r1, [pc, #316]	; (80011e4 <FlightController_Read_GY87+0x218>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00b fa7b 	bl	800c5a4 <siprintf>
		LOG(str2, LOG_DEBUGGING);
 80010ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fa7d 	bl	80025b4 <LOG>
		HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f001 fb4e 	bl	800275c <HAL_Delay>
		sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n", accelerometerValues->accelerometerZ);
 80010c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80010c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010c8:	461a      	mov	r2, r3
 80010ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ce:	4946      	ldr	r1, [pc, #280]	; (80011e8 <FlightController_Read_GY87+0x21c>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00b fa67 	bl	800c5a4 <siprintf>
		LOG(str2, LOG_DEBUGGING);
 80010d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010da:	2101      	movs	r1, #1
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fa69 	bl	80025b4 <LOG>
		HAL_Delay(10);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f001 fb3a 	bl	800275c <HAL_Delay>

		tempVal = MPU6050_ReadTemperatureSensor(hmpu6050);
 80010e8:	4b39      	ldr	r3, [pc, #228]	; (80011d0 <FlightController_Read_GY87+0x204>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f954 	bl	800239a <MPU6050_ReadTemperatureSensor>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n", tempVal);
 80010f8:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 80010fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001100:	493a      	ldr	r1, [pc, #232]	; (80011ec <FlightController_Read_GY87+0x220>)
 8001102:	4618      	mov	r0, r3
 8001104:	f00b fa4e 	bl	800c5a4 <siprintf>
		LOG(str3, LOG_DEBUGGING);
 8001108:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800110c:	2101      	movs	r1, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fa50 	bl	80025b4 <LOG>
		HAL_Delay(10);
 8001114:	200a      	movs	r0, #10
 8001116:	f001 fb21 	bl	800275c <HAL_Delay>

		MPU6050_ReadMagnetometer(hmpu6050, magnetometerValues);
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <FlightController_Read_GY87+0x204>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f967 	bl	80023f6 <MPU6050_ReadMagnetometer>
		sprintf((char *)str4, (const char *)"Value Mag X: %d\r\n", magnetometerValues->magnetometerX);
 8001128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	461a      	mov	r2, r3
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	492e      	ldr	r1, [pc, #184]	; (80011f0 <FlightController_Read_GY87+0x224>)
 8001138:	4618      	mov	r0, r3
 800113a:	f00b fa33 	bl	800c5a4 <siprintf>
		LOG(str4, LOG_DEBUGGING);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	2101      	movs	r1, #1
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fa35 	bl	80025b4 <LOG>
		HAL_Delay(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f001 fb06 	bl	800275c <HAL_Delay>
		sprintf((char *)str4, (const char *)"Value Mag Y: %d\r\n", magnetometerValues->magnetometerY);
 8001150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001154:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001158:	461a      	mov	r2, r3
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4925      	ldr	r1, [pc, #148]	; (80011f4 <FlightController_Read_GY87+0x228>)
 8001160:	4618      	mov	r0, r3
 8001162:	f00b fa1f 	bl	800c5a4 <siprintf>
		LOG(str4, LOG_DEBUGGING);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2101      	movs	r1, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fa21 	bl	80025b4 <LOG>
		HAL_Delay(10);
 8001172:	200a      	movs	r0, #10
 8001174:	f001 faf2 	bl	800275c <HAL_Delay>
		sprintf((char *)str4, (const char *)"Value Mag Z: %d\r\n\n", magnetometerValues->magnetometerZ);
 8001178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800117c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001180:	461a      	mov	r2, r3
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	491c      	ldr	r1, [pc, #112]	; (80011f8 <FlightController_Read_GY87+0x22c>)
 8001188:	4618      	mov	r0, r3
 800118a:	f00b fa0b 	bl	800c5a4 <siprintf>
		LOG(str4, LOG_DEBUGGING);
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fa0d 	bl	80025b4 <LOG>
		HAL_Delay(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f001 fade 	bl	800275c <HAL_Delay>

		int16_t heading = MPU6050_ReadMagnetometerHeading(hmpu6050);
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <FlightController_Read_GY87+0x204>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 f993 	bl	80024d0 <MPU6050_ReadMagnetometerHeading>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		sprintf((char *)str4, (const char *)"Heading Value: %d\r\n\n", heading);
 80011b0:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4910      	ldr	r1, [pc, #64]	; (80011fc <FlightController_Read_GY87+0x230>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00b f9f2 	bl	800c5a4 <siprintf>
		LOG(str4, LOG_DEBUGGING);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	2101      	movs	r1, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f9f4 	bl	80025b4 <LOG>
    while (1) {
 80011cc:	e702      	b.n	8000fd4 <FlightController_Read_GY87+0x8>
 80011ce:	bf00      	nop
 80011d0:	200001a4 	.word	0x200001a4
 80011d4:	0800d2cc 	.word	0x0800d2cc
 80011d8:	0800d2e0 	.word	0x0800d2e0
 80011dc:	0800d2f4 	.word	0x0800d2f4
 80011e0:	0800d308 	.word	0x0800d308
 80011e4:	0800d31c 	.word	0x0800d31c
 80011e8:	0800d330 	.word	0x0800d330
 80011ec:	0800d348 	.word	0x0800d348
 80011f0:	0800d364 	.word	0x0800d364
 80011f4:	0800d378 	.word	0x0800d378
 80011f8:	0800d38c 	.word	0x0800d38c
 80011fc:	0800d3a0 	.word	0x0800d3a0

08001200 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void *ptr) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

    while (1) {
        ESC_SetSpeed(hesc, hesc->channel1, 100);
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <FlightController_Write_ESCs+0x64>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <FlightController_Write_ESCs+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001268 <FlightController_Write_ESCs+0x68>
 8001216:	4619      	mov	r1, r3
 8001218:	4610      	mov	r0, r2
 800121a:	f000 fdcb 	bl	8001db4 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->channel2, 100);
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <FlightController_Write_ESCs+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <FlightController_Write_ESCs+0x64>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001268 <FlightController_Write_ESCs+0x68>
 800122c:	4619      	mov	r1, r3
 800122e:	4610      	mov	r0, r2
 8001230:	f000 fdc0 	bl	8001db4 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->channel3, 100);
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <FlightController_Write_ESCs+0x64>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <FlightController_Write_ESCs+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001268 <FlightController_Write_ESCs+0x68>
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f000 fdb5 	bl	8001db4 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->channel4, 100);
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <FlightController_Write_ESCs+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <FlightController_Write_ESCs+0x64>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001268 <FlightController_Write_ESCs+0x68>
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f000 fdaa 	bl	8001db4 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->channel1, 100);
 8001260:	e7d2      	b.n	8001208 <FlightController_Write_ESCs+0x8>
 8001262:	bf00      	nop
 8001264:	200001a8 	.word	0x200001a8
 8001268:	42c80000 	.word	0x42c80000

0800126c <FlightController_Init>:
    }
}

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

	/* Welcome message */
	LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 8001270:	2100      	movs	r1, #0
 8001272:	4808      	ldr	r0, [pc, #32]	; (8001294 <FlightController_Init+0x28>)
 8001274:	f001 f99e 	bl	80025b4 <LOG>
	HAL_Delay(10000);
 8001278:	f242 7010 	movw	r0, #10000	; 0x2710
 800127c:	f001 fa6e 	bl	800275c <HAL_Delay>

    /* Create system tasks */
    FreeRTOS_CreateTasks();
 8001280:	f000 f80e 	bl	80012a0 <FreeRTOS_CreateTasks>

    /* Initialize drivers */
    rc_controller = FSA8S_Init(&huart2);
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <FlightController_Init+0x2c>)
 8001286:	f000 fedf 	bl	8002048 <FSA8S_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	4a03      	ldr	r2, [pc, #12]	; (800129c <FlightController_Init+0x30>)
 800128e:	6013      	str	r3, [r2, #0]
//	hmpu6050 = MPU6050_Init(&hi2c1);
//	hesc = ESC_Init(&htim3);
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	0800d3b8 	.word	0x0800d3b8
 8001298:	200004a0 	.word	0x200004a0
 800129c:	200001a0 	.word	0x200001a0

080012a0 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8

    BaseType_t ret;


    /* Task 1: FlightController_HeartbeatLight */
    ret = xTaskCreate(	FlightController_HeartbeatLight,
 80012a6:	4b59      	ldr	r3, [pc, #356]	; (800140c <FreeRTOS_CreateTasks+0x16c>)
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b4:	4956      	ldr	r1, [pc, #344]	; (8001410 <FreeRTOS_CreateTasks+0x170>)
 80012b6:	4857      	ldr	r0, [pc, #348]	; (8001414 <FreeRTOS_CreateTasks+0x174>)
 80012b8:	f009 fa3e 	bl	800a738 <xTaskCreate>
 80012bc:	6178      	str	r0, [r7, #20]
						(tskIDLE_PRIORITY + 1UL),
						&FlightController_HeartbeatLight_Handle
					 );

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d00a      	beq.n	80012da <FreeRTOS_CreateTasks+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c8:	f383 8811 	msr	BASEPRI, r3
 80012cc:	f3bf 8f6f 	isb	sy
 80012d0:	f3bf 8f4f 	dsb	sy
 80012d4:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80012d6:	bf00      	nop
 80012d8:	e7fe      	b.n	80012d8 <FreeRTOS_CreateTasks+0x38>

    if(FlightController_HeartbeatLight_Handle == NULL) {
 80012da:	4b4c      	ldr	r3, [pc, #304]	; (800140c <FreeRTOS_CreateTasks+0x16c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d104      	bne.n	80012ec <FreeRTOS_CreateTasks+0x4c>
		vTaskDelete(FlightController_HeartbeatLight_Handle);
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <FreeRTOS_CreateTasks+0x16c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f009 fb5c 	bl	800a9a4 <vTaskDelete>
    }


    /* Task 2: FlightController_FlightLights */
    ret = xTaskCreate(  FlightController_FlightLights,
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <FreeRTOS_CreateTasks+0x178>)
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fa:	4948      	ldr	r1, [pc, #288]	; (800141c <FreeRTOS_CreateTasks+0x17c>)
 80012fc:	4848      	ldr	r0, [pc, #288]	; (8001420 <FreeRTOS_CreateTasks+0x180>)
 80012fe:	f009 fa1b 	bl	800a738 <xTaskCreate>
 8001302:	6178      	str	r0, [r7, #20]
						NULL,
						(tskIDLE_PRIORITY + 1UL),
						&FlightController_FlightLights_Handle);

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d00a      	beq.n	8001320 <FreeRTOS_CreateTasks+0x80>
	__asm volatile
 800130a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800130e:	f383 8811 	msr	BASEPRI, r3
 8001312:	f3bf 8f6f 	isb	sy
 8001316:	f3bf 8f4f 	dsb	sy
 800131a:	60fb      	str	r3, [r7, #12]
}
 800131c:	bf00      	nop
 800131e:	e7fe      	b.n	800131e <FreeRTOS_CreateTasks+0x7e>

    if(FlightController_FlightLights_Handle == NULL) {
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <FreeRTOS_CreateTasks+0x178>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d104      	bne.n	8001332 <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_FlightLights_Handle);
 8001328:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <FreeRTOS_CreateTasks+0x178>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f009 fb39 	bl	800a9a4 <vTaskDelete>
    }


    /* Task 3: FlightController_Read_FSA8S */
    ret = xTaskCreate(  FlightController_Read_FSA8S,
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <FreeRTOS_CreateTasks+0x184>)
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2301      	movs	r3, #1
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001340:	4939      	ldr	r1, [pc, #228]	; (8001428 <FreeRTOS_CreateTasks+0x188>)
 8001342:	483a      	ldr	r0, [pc, #232]	; (800142c <FreeRTOS_CreateTasks+0x18c>)
 8001344:	f009 f9f8 	bl	800a738 <xTaskCreate>
 8001348:	6178      	str	r0, [r7, #20]
						NULL,
						(tskIDLE_PRIORITY + 1UL),
						&FlightController_Read_FSA8S_Handle);

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d00a      	beq.n	8001366 <FreeRTOS_CreateTasks+0xc6>
	__asm volatile
 8001350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001354:	f383 8811 	msr	BASEPRI, r3
 8001358:	f3bf 8f6f 	isb	sy
 800135c:	f3bf 8f4f 	dsb	sy
 8001360:	60bb      	str	r3, [r7, #8]
}
 8001362:	bf00      	nop
 8001364:	e7fe      	b.n	8001364 <FreeRTOS_CreateTasks+0xc4>

    if(FlightController_Read_FSA8S_Handle == NULL) {
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <FreeRTOS_CreateTasks+0x184>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d104      	bne.n	8001378 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <FreeRTOS_CreateTasks+0x184>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f009 fb16 	bl	800a9a4 <vTaskDelete>
    }


    /* Task 4: FlightController_Read_GY87 */
    ret = xTaskCreate(  FlightController_Read_GY87,
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <FreeRTOS_CreateTasks+0x190>)
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	2301      	movs	r3, #1
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001386:	492b      	ldr	r1, [pc, #172]	; (8001434 <FreeRTOS_CreateTasks+0x194>)
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <FreeRTOS_CreateTasks+0x198>)
 800138a:	f009 f9d5 	bl	800a738 <xTaskCreate>
 800138e:	6178      	str	r0, [r7, #20]
						NULL,
						(tskIDLE_PRIORITY + 1UL),
						&FlightController_Read_GY87_Handle);

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d00a      	beq.n	80013ac <FreeRTOS_CreateTasks+0x10c>
	__asm volatile
 8001396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800139a:	f383 8811 	msr	BASEPRI, r3
 800139e:	f3bf 8f6f 	isb	sy
 80013a2:	f3bf 8f4f 	dsb	sy
 80013a6:	607b      	str	r3, [r7, #4]
}
 80013a8:	bf00      	nop
 80013aa:	e7fe      	b.n	80013aa <FreeRTOS_CreateTasks+0x10a>

    if(FlightController_Read_GY87_Handle == NULL) {
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <FreeRTOS_CreateTasks+0x190>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Read_GY87_Handle);
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <FreeRTOS_CreateTasks+0x190>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f009 faf3 	bl	800a9a4 <vTaskDelete>
    }


    /* Task 5: FlightController_Write_ESCs */
    ret = xTaskCreate(  FlightController_Write_ESCs,
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <FreeRTOS_CreateTasks+0x19c>)
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013cc:	491c      	ldr	r1, [pc, #112]	; (8001440 <FreeRTOS_CreateTasks+0x1a0>)
 80013ce:	481d      	ldr	r0, [pc, #116]	; (8001444 <FreeRTOS_CreateTasks+0x1a4>)
 80013d0:	f009 f9b2 	bl	800a738 <xTaskCreate>
 80013d4:	6178      	str	r0, [r7, #20]
						NULL,
						(tskIDLE_PRIORITY + 1UL),
						&FlightController_Write_ESCs_Handle);

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d00a      	beq.n	80013f2 <FreeRTOS_CreateTasks+0x152>
	__asm volatile
 80013dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e0:	f383 8811 	msr	BASEPRI, r3
 80013e4:	f3bf 8f6f 	isb	sy
 80013e8:	f3bf 8f4f 	dsb	sy
 80013ec:	603b      	str	r3, [r7, #0]
}
 80013ee:	bf00      	nop
 80013f0:	e7fe      	b.n	80013f0 <FreeRTOS_CreateTasks+0x150>

    if(FlightController_Write_ESCs_Handle == NULL) {
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <FreeRTOS_CreateTasks+0x19c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d104      	bne.n	8001404 <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <FreeRTOS_CreateTasks+0x19c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f009 fad0 	bl	800a9a4 <vTaskDelete>
    }
}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000018c 	.word	0x2000018c
 8001410:	0800d3e0 	.word	0x0800d3e0
 8001414:	08000f19 	.word	0x08000f19
 8001418:	20000198 	.word	0x20000198
 800141c:	0800d400 	.word	0x0800d400
 8001420:	08000f55 	.word	0x08000f55
 8001424:	20000190 	.word	0x20000190
 8001428:	0800d420 	.word	0x0800d420
 800142c:	08000f61 	.word	0x08000f61
 8001430:	20000194 	.word	0x20000194
 8001434:	0800d43c 	.word	0x0800d43c
 8001438:	08000fcd 	.word	0x08000fcd
 800143c:	2000019c 	.word	0x2000019c
 8001440:	0800d458 	.word	0x0800d458
 8001444:	08001201 	.word	0x08001201

08001448 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <vApplicationGetIdleTaskMemory+0x2c>)
 8001458:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <vApplicationGetIdleTaskMemory+0x30>)
 800145e:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200001b0 	.word	0x200001b0
 8001478:	20000204 	.word	0x20000204

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001482:	f001 f8f9 	bl	8002678 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001486:	f000 f825 	bl	80014d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148a:	f000 f979 	bl	8001780 <MX_GPIO_Init>
  MX_DMA_Init();
 800148e:	f000 f95d 	bl	800174c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001492:	f000 f931 	bl	80016f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001496:	f000 f887 	bl	80015a8 <MX_I2C1_Init>
  MX_TIM3_Init();
 800149a:	f000 f8b3 	bl	8001604 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 800149e:	f7ff fee5 	bl	800126c <FlightController_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <main+0x50>)
 80014a4:	1d3c      	adds	r4, r7, #4
 80014a6:	461d      	mov	r5, r3
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f008 ffcc 	bl	800a456 <osThreadCreate>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <main+0x54>)
 80014c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014c4:	f008 ffc0 	bl	800a448 <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // flightController_App();
    while (1) {
 80014c8:	e7fe      	b.n	80014c8 <main+0x4c>
 80014ca:	bf00      	nop
 80014cc:	0800d480 	.word	0x0800d480
 80014d0:	20000544 	.word	0x20000544

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	2230      	movs	r2, #48	; 0x30
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00b f87e 	bl	800c5e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <SystemClock_Config+0xcc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <SystemClock_Config+0xcc>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <SystemClock_Config+0xcc>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <SystemClock_Config+0xd0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001520:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <SystemClock_Config+0xd0>)
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <SystemClock_Config+0xd0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001534:	2301      	movs	r3, #1
 8001536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001548:	2319      	movs	r3, #25
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800154c:	2390      	movs	r3, #144	; 0x90
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001550:	2302      	movs	r3, #2
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001554:	2303      	movs	r3, #3
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fe23 	bl	80051a8 <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001568:	f000 f974 	bl	8001854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	230f      	movs	r3, #15
 800156e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001570:	2302      	movs	r3, #2
 8001572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2102      	movs	r1, #2
 8001588:	4618      	mov	r0, r3
 800158a:	f004 f885 	bl	8005698 <HAL_RCC_ClockConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001594:	f000 f95e 	bl	8001854 <Error_Handler>
  }
}
 8001598:	bf00      	nop
 800159a:	3750      	adds	r7, #80	; 0x50
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <MX_I2C1_Init+0x54>)
 80015b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_I2C1_Init+0x58>)
 80015b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015e6:	f001 fd73 	bl	80030d0 <HAL_I2C_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015f0:	f000 f930 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000404 	.word	0x20000404
 80015fc:	40005400 	.word	0x40005400
 8001600:	000186a0 	.word	0x000186a0

08001604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001626:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <MX_TIM3_Init+0xec>)
 8001628:	4a32      	ldr	r2, [pc, #200]	; (80016f4 <MX_TIM3_Init+0xf0>)
 800162a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <MX_TIM3_Init+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <MX_TIM3_Init+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <MX_TIM3_Init+0xec>)
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <MX_TIM3_Init+0xec>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <MX_TIM3_Init+0xec>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800164c:	4828      	ldr	r0, [pc, #160]	; (80016f0 <MX_TIM3_Init+0xec>)
 800164e:	f004 fa03 	bl	8005a58 <HAL_TIM_PWM_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001658:	f000 f8fc 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	4619      	mov	r1, r3
 800166a:	4821      	ldr	r0, [pc, #132]	; (80016f0 <MX_TIM3_Init+0xec>)
 800166c:	f004 fd12 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001676:	f000 f8ed 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167a:	2360      	movs	r3, #96	; 0x60
 800167c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	4619      	mov	r1, r3
 8001690:	4817      	ldr	r0, [pc, #92]	; (80016f0 <MX_TIM3_Init+0xec>)
 8001692:	f004 fa31 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800169c:	f000 f8da 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2204      	movs	r2, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4812      	ldr	r0, [pc, #72]	; (80016f0 <MX_TIM3_Init+0xec>)
 80016a8:	f004 fa26 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016b2:	f000 f8cf 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_TIM3_Init+0xec>)
 80016be:	f004 fa1b 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80016c8:	f000 f8c4 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	220c      	movs	r2, #12
 80016d0:	4619      	mov	r1, r3
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <MX_TIM3_Init+0xec>)
 80016d4:	f004 fa10 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80016de:	f000 f8b9 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016e2:	4803      	ldr	r0, [pc, #12]	; (80016f0 <MX_TIM3_Init+0xec>)
 80016e4:	f000 f954 	bl	8001990 <HAL_TIM_MspPostInit>

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000458 	.word	0x20000458
 80016f4:	40000400 	.word	0x40000400

080016f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <MX_USART2_UART_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800171e:	2204      	movs	r2, #4
 8001720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART2_UART_Init+0x4c>)
 8001730:	f004 fd1e 	bl	8006170 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800173a:	f000 f88b 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200004a0 	.word	0x200004a0
 8001748:	40004400 	.word	0x40004400

0800174c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_DMA_Init+0x30>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <MX_DMA_Init+0x30>)
 800175c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_DMA_Init+0x30>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <MX_GPIO_Init+0xb8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a26      	ldr	r2, [pc, #152]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_GPIO_Init+0xb8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <MX_GPIO_Init+0xbc>)
 800180e:	f001 fc45 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_GPIO_Init+0xbc>)
 800182c:	f001 fab2 	bl	8002d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800

08001840 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001848:	f00a f8e0 	bl	800ba0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f008 fe4e 	bl	800a4ee <osDelay>
 8001852:	e7fb      	b.n	800184c <StartDefaultTask+0xc>

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_MspInit+0x54>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_MspInit+0x54>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x54>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_MspInit+0x54>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_MspInit+0x54>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_MspInit+0x54>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	210f      	movs	r1, #15
 80018a6:	f06f 0001 	mvn.w	r0, #1
 80018aa:	f001 f856 	bl	800295a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_I2C_MspInit+0x84>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12b      	bne.n	8001936 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_I2C_MspInit+0x88>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_I2C_MspInit+0x88>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_I2C_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fa:	23c0      	movs	r3, #192	; 0xc0
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fe:	2312      	movs	r3, #18
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800190a:	2304      	movs	r3, #4
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <HAL_I2C_MspInit+0x8c>)
 8001916:	f001 fa3d 	bl	8002d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_I2C_MspInit+0x88>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_I2C_MspInit+0x88>)
 8001924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_I2C_MspInit+0x88>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40005400 	.word	0x40005400
 8001944:	40023800 	.word	0x40023800
 8001948:	40020400 	.word	0x40020400

0800194c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <HAL_TIM_PWM_MspInit+0x3c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10d      	bne.n	800197a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_TIM_PWM_MspInit+0x40>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_TIM_PWM_MspInit+0x40>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_TIM_PWM_MspInit+0x40>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40000400 	.word	0x40000400
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <HAL_TIM_MspPostInit+0xa4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d13b      	bne.n	8001a2a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_TIM_MspPostInit+0xa8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_TIM_MspPostInit+0xa8>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_TIM_MspPostInit+0xa8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_TIM_MspPostInit+0xa8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <HAL_TIM_MspPostInit+0xa8>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_TIM_MspPostInit+0xa8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019fa:	2302      	movs	r3, #2
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <HAL_TIM_MspPostInit+0xac>)
 8001a06:	f001 f9c5 	bl	8002d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_TIM_MspPostInit+0xb0>)
 8001a26:	f001 f9b5 	bl	8002d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400

08001a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a30      	ldr	r2, [pc, #192]	; (8001b24 <HAL_UART_MspInit+0xe0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d15a      	bne.n	8001b1c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <HAL_UART_MspInit+0xe4>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a2e      	ldr	r2, [pc, #184]	; (8001b28 <HAL_UART_MspInit+0xe4>)
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_UART_MspInit+0xe4>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_UART_MspInit+0xe4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a27      	ldr	r2, [pc, #156]	; (8001b28 <HAL_UART_MspInit+0xe4>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <HAL_UART_MspInit+0xe4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481c      	ldr	r0, [pc, #112]	; (8001b2c <HAL_UART_MspInit+0xe8>)
 8001aba:	f001 f96b 	bl	8002d94 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_UART_MspInit+0xf0>)
 8001ac2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ade:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001b02:	f000 ff61 	bl	80029c8 <HAL_DMA_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b0c:	f7ff fea2 	bl	8001854 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
 8001b16:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <HAL_UART_MspInit+0xec>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	; 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40004400 	.word	0x40004400
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	200004e4 	.word	0x200004e4
 8001b34:	40026088 	.word	0x40026088

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler+0x4>

08001b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b68:	f000 fdd8 	bl	800271c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b6c:	f009 fad2 	bl	800b114 <xTaskGetSchedulerState>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b76:	f009 fd0f 	bl	800b598 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <OTG_FS_IRQHandler+0x10>)
 8001b86:	f002 f9e1 	bl	8003f4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20004f88 	.word	0x20004f88

08001b94 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
        errno = ENOMEM;
 8001bc4:	f00a fd36 	bl	800c634 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20010000 	.word	0x20010000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	20000548 	.word	0x20000548
 8001bfc:	20005800 	.word	0x20005800

08001c00 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <SystemInit+0x20>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <SystemInit+0x20>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c2a:	490e      	ldr	r1, [pc, #56]	; (8001c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c40:	4c0b      	ldr	r4, [pc, #44]	; (8001c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c4e:	f7ff ffd7 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f00a fcf5 	bl	800c640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c56:	f7ff fc11 	bl	800147c <main>
  bx  lr
 8001c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001c68:	0800d600 	.word	0x0800d600
  ldr r2, =_sbss
 8001c6c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001c70:	200057fc 	.word	0x200057fc

08001c74 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC_IRQHandler>

08001c76 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint32_t channel, uint16_t dutyCycle) {
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	4613      	mov	r3, r2
 8001c82:	80fb      	strh	r3, [r7, #6]

    /* Check parameters */
    if (NULL == hesc) {
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <PWM_SetDutyCycle+0x18>
        return false;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e046      	b.n	8001d1c <PWM_SetDutyCycle+0xa6>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d010      	beq.n	8001cba <PWM_SetDutyCycle+0x44>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d00b      	beq.n	8001cba <PWM_SetDutyCycle+0x44>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d006      	beq.n	8001cba <PWM_SetDutyCycle+0x44>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <PWM_SetDutyCycle+0x44>
        return false;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e030      	b.n	8001d1c <PWM_SetDutyCycle+0xa6>
    }
    if (dutyCycle > MAX_PWM_VALUE) {
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cc0:	d301      	bcc.n	8001cc6 <PWM_SetDutyCycle+0x50>
        return false;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e02a      	b.n	8001d1c <PWM_SetDutyCycle+0xa6>
    }

    /* Set duty cycle */
    if (hesc->channel1 == channel) {
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d104      	bne.n	8001cda <PWM_SetDutyCycle+0x64>

        *(hesc->CCR1) = dutyCycle;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e01f      	b.n	8001d1a <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel2 == channel) {
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d104      	bne.n	8001cee <PWM_SetDutyCycle+0x78>

        *(hesc->CCR2) = dutyCycle;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e015      	b.n	8001d1a <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel3 == channel) {
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d104      	bne.n	8001d02 <PWM_SetDutyCycle+0x8c>

        *(hesc->CCR3) = dutyCycle;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e00b      	b.n	8001d1a <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel4 == channel) {
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d104      	bne.n	8001d16 <PWM_SetDutyCycle+0xa0>

        *(hesc->CCR4) = dutyCycle;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	88fa      	ldrh	r2, [r7, #6]
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e001      	b.n	8001d1a <PWM_SetDutyCycle+0xa4>
    } else {

        return false;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <PWM_SetDutyCycle+0xa6>
    }

    return true;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint16_t * pwmValue) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d32:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (speed < 0 || speed > 100) {
 8001d34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d408      	bmi.n	8001d54 <ESC_CalculatePWMDutyCycle+0x2c>
 8001d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d46:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001db0 <ESC_CalculatePWMDutyCycle+0x88>
 8001d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d52:	dd01      	ble.n	8001d58 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e022      	b.n	8001d9e <ESC_CalculatePWMDutyCycle+0x76>
    }

    /* Calculate PWM value */
    *pwmValue = (MAX_ESC_SPEED - MIN_ESC_SPEED) * (speed / 100) + MIN_ESC_SPEED;
 8001d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001db0 <ESC_CalculatePWMDutyCycle+0x88>
 8001d60:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d64:	ee16 0a90 	vmov	r0, s13
 8001d68:	f7fe fbf6 	bl	8000558 <__aeabi_f2d>
 8001d6c:	a30e      	add	r3, pc, #56	; (adr r3, 8001da8 <ESC_CalculatePWMDutyCycle+0x80>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc49 	bl	8000608 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	a30a      	add	r3, pc, #40	; (adr r3, 8001da8 <ESC_CalculatePWMDutyCycle+0x80>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fa8a 	bl	800029c <__adddf3>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fed4 	bl	8000b3c <__aeabi_d2uiz>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	801a      	strh	r2, [r3, #0]

    return true;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	33333334 	.word	0x33333334
 8001dac:	40899933 	.word	0x40899933
 8001db0:	42c80000 	.word	0x42c80000

08001db4 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint32_t channel, float speed) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	ed87 0a01 	vstr	s0, [r7, #4]

    uint16_t pwmValue;
    uint16_t * pwmValuePtr = &pwmValue;
 8001dc2:	f107 0312 	add.w	r3, r7, #18
 8001dc6:	617b      	str	r3, [r7, #20]

    /* Check parameters */
    if (NULL == hesc->htim) {
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <ESC_SetSpeed+0x20>
        return false;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e044      	b.n	8001e5e <ESC_SetSpeed+0xaa>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d010      	beq.n	8001e00 <ESC_SetSpeed+0x4c>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d00b      	beq.n	8001e00 <ESC_SetSpeed+0x4c>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d006      	beq.n	8001e00 <ESC_SetSpeed+0x4c>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <ESC_SetSpeed+0x4c>
        return false;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e02e      	b.n	8001e5e <ESC_SetSpeed+0xaa>
    }
    if (speed < 0 || speed > 100) {
 8001e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d408      	bmi.n	8001e20 <ESC_SetSpeed+0x6c>
 8001e0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e12:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e68 <ESC_SetSpeed+0xb4>
 8001e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	dd01      	ble.n	8001e24 <ESC_SetSpeed+0x70>
        return false;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e01c      	b.n	8001e5e <ESC_SetSpeed+0xaa>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, pwmValuePtr)) {
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e2a:	f7ff ff7d 	bl	8001d28 <ESC_CalculatePWMDutyCycle>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f083 0301 	eor.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <ESC_SetSpeed+0x8a>
        return false;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e00f      	b.n	8001e5e <ESC_SetSpeed+0xaa>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, *pwmValuePtr)) {
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff ff15 	bl	8001c76 <PWM_SetDutyCycle>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f083 0301 	eor.w	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <ESC_SetSpeed+0xa8>
        return false;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e000      	b.n	8001e5e <ESC_SetSpeed+0xaa>
    };

    return true;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	42c80000 	.word	0x42c80000

08001e6c <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <IBUS_Init+0x12>
        return false;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e00f      	b.n	8001e9e <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7a1b      	ldrb	r3, [r3, #8]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f004 f9bc 	bl	800620a <HAL_UART_Receive_DMA>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <FSA8S_CheckFirstBytes+0x12>
        return false;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e00d      	b.n	8001ed4 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d107      	bne.n	8001ed2 <FSA8S_CheckFirstBytes+0x2c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d101      	bne.n	8001ed2 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8001ed2:	2300      	movs	r3, #0
    }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 8001ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eec:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <FSA8S_Checksum+0x18>
        return false;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e02c      	b.n	8001f52 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum =
        (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7a1b      	ldrb	r3, [r3, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7a1b      	ldrb	r3, [r3, #8]
 8001f12:	3b02      	subs	r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b21b      	sxth	r3, r3
    sentChecksum =
 8001f1e:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 8001f20:	2300      	movs	r3, #0
 8001f22:	737b      	strb	r3, [r7, #13]
 8001f24:	e00b      	b.n	8001f3e <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	7b7b      	ldrb	r3, [r7, #13]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	89fa      	ldrh	r2, [r7, #14]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8001f38:	7b7b      	ldrb	r3, [r7, #13]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	737b      	strb	r3, [r7, #13]
 8001f3e:	7b7b      	ldrb	r3, [r7, #13]
 8001f40:	2b1d      	cmp	r3, #29
 8001f42:	d9f0      	bls.n	8001f26 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8001f44:	897a      	ldrh	r2, [r7, #10]
 8001f46:	89fb      	ldrh	r3, [r7, #14]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d101      	bne.n	8001f50 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 8001f50:	2300      	movs	r3, #0
    }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d062      	beq.n	8002034 <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8001f6e:	2302      	movs	r3, #2
 8001f70:	737b      	strb	r3, [r7, #13]
 8001f72:	e059      	b.n	8002028 <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue =
                ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	7b7b      	ldrb	r3, [r7, #13]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	7b7b      	ldrb	r3, [r7, #13]
 8001f8e:	440b      	add	r3, r1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	7b7b      	ldrb	r3, [r7, #13]
 8001f9c:	3b02      	subs	r3, #2
 8001f9e:	0fd9      	lsrs	r1, r3, #31
 8001fa0:	440b      	add	r3, r1
 8001fa2:	105b      	asrs	r3, r3, #1
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <FSA8S_AmendData+0xe0>)
 8001fa8:	5c5b      	ldrb	r3, [r3, r1]
 8001faa:	b29b      	uxth	r3, r3
            channelValue =
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) &&
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
 8001fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb6:	d308      	bcc.n	8001fca <FSA8S_AmendData+0x6a>
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fbe:	d804      	bhi.n	8001fca <FSA8S_AmendData+0x6a>
                (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001fc6:	81fb      	strh	r3, [r7, #14]
 8001fc8:	e001      	b.n	8001fce <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] =
                channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] *
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd8:	7b7b      	ldrb	r3, [r7, #13]
 8001fda:	3b02      	subs	r3, #2
 8001fdc:	0fda      	lsrs	r2, r3, #31
 8001fde:	4413      	add	r3, r2
 8001fe0:	105b      	asrs	r3, r3, #1
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <FSA8S_AmendData+0xe0>)
 8001fe6:	5c9b      	ldrb	r3, [r3, r2]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002044 <FSA8S_AmendData+0xe4>
 8001ff4:	ee77 6aa6 	vadd.f32	s13, s15, s13
                                                                  ((float)IBUS_CHANNEL_MAX_VALUE /
                                                                   IBUS_CHANNEL_MIN_RAW_VALUE))) /
 8001ff8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8002044 <FSA8S_AmendData+0xe4>
 8001ffc:	eec6 7a86 	vdiv.f32	s15, s13, s12
                channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] *
 8002000:	ee67 7a27 	vmul.f32	s15, s14, s15
            hibus->data[(i - 2) / 2] =
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	7b7b      	ldrb	r3, [r7, #13]
 800200a:	3b02      	subs	r3, #2
 800200c:	0fd9      	lsrs	r1, r3, #31
 800200e:	440b      	add	r3, r1
 8002010:	105b      	asrs	r3, r3, #1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201a:	ee17 2a90 	vmov	r2, s15
 800201e:	b292      	uxth	r2, r2
 8002020:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8002022:	7b7b      	ldrb	r3, [r7, #13]
 8002024:	3302      	adds	r3, #2
 8002026:	737b      	strb	r3, [r7, #13]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7a1b      	ldrb	r3, [r3, #8]
 800202c:	1e5a      	subs	r2, r3, #1
 800202e:	7b7b      	ldrb	r3, [r7, #13]
 8002030:	429a      	cmp	r2, r3
 8002032:	dc9f      	bgt.n	8001f74 <FSA8S_AmendData+0x14>
                                IBUS_CHANNEL_MIN_RAW_VALUE);
        }
    }
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20000004 	.word	0x20000004
 8002044:	447a0000 	.word	0x447a0000

08002048 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <FSA8S_Init+0x12>
        return NULL;
 8002056:	2300      	movs	r3, #0
 8002058:	e049      	b.n	80020ee <FSA8S_Init+0xa6>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <FSA8S_Init+0xb0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <FSA8S_Init+0x1e>
        return NULL;
 8002062:	2300      	movs	r3, #0
 8002064:	e043      	b.n	80020ee <FSA8S_Init+0xa6>
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(IBUS_HandleTypeDef_t));
    uint8_t * buffer = pvortMalloc(sizeof(IBUS_BUFFER_LENGTH));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    IBUS_HandleTypeDef_t * hibus = malloc(sizeof(IBUS_HandleTypeDef_t));
 8002066:	2014      	movs	r0, #20
 8002068:	f00a f9e0 	bl	800c42c <malloc>
 800206c:	4603      	mov	r3, r0
 800206e:	617b      	str	r3, [r7, #20]
    uint8_t * buffer = malloc(sizeof(IBUS_BUFFER_LENGTH));
 8002070:	2004      	movs	r0, #4
 8002072:	f00a f9db 	bl	800c42c <malloc>
 8002076:	4603      	mov	r3, r0
 8002078:	613b      	str	r3, [r7, #16]
    uint16_t * data = malloc(sizeof(uint16_t));
 800207a:	2002      	movs	r0, #2
 800207c:	f00a f9d6 	bl	800c42c <malloc>
 8002080:	4603      	mov	r3, r0
 8002082:	60fb      	str	r3, [r7, #12]
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00f      	beq.n	80020aa <FSA8S_Init+0x62>
        hibus->huart = huart;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2220      	movs	r2, #32
 800209a:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	220e      	movs	r2, #14
 80020a6:	741a      	strb	r2, [r3, #16]
 80020a8:	e00a      	b.n	80020c0 <FSA8S_Init+0x78>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f00a f9c1 	bl	800c43c <free>
        free(hibus);
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f00a f9be 	bl	800c43c <free>
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 80020c0:	6978      	ldr	r0, [r7, #20]
 80020c2:	f7ff fed3 	bl	8001e6c <IBUS_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <FSA8S_Init+0x8e>
        /* Initialization was successful */
        alreadyInitialized = true;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <FSA8S_Init+0xb0>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
        return hibus;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	e00b      	b.n	80020ee <FSA8S_Init+0xa6>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00a f9ab 	bl	800c43c <free>
        free(hibus);
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f00a f9a8 	bl	800c43c <free>
#endif
        return NULL;
 80020ec:	2300      	movs	r3, #0
    }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000054c 	.word	0x2000054c

080020fc <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 800210e:	2300      	movs	r3, #0
 8002110:	e029      	b.n	8002166 <FSA8S_ReadChannel+0x6a>
    }
    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <FSA8S_ReadChannel+0x22>
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	2b0e      	cmp	r3, #14
 800211c:	d901      	bls.n	8002122 <FSA8S_ReadChannel+0x26>
        return IBUS_CHANNEL_VALUE_NULL;
 800211e:	2300      	movs	r3, #0
 8002120:	e021      	b.n	8002166 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002122:	bf00      	nop
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff febe 	bl	8001ea6 <FSA8S_CheckFirstBytes>
 800212a:	4603      	mov	r3, r0
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f6      	bne.n	8002124 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fed2 	bl	8001ee0 <FSA8S_Checksum>
 800213c:	4603      	mov	r3, r0
 800213e:	f083 0301 	eor.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8002148:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 800214a:	e7ea      	b.n	8002122 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 800214c:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ff06 	bl	8001f60 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800215e:	3b01      	subs	r3, #1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	881b      	ldrh	r3, [r3, #0]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <I2C_Read>:
        /* Wrong IMU device ID */
        return false;
    }
}

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 800216e:	b580      	push	{r7, lr}
 8002170:	b088      	sub	sp, #32
 8002172:	af04      	add	r7, sp, #16
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	72fb      	strb	r3, [r7, #11]
 800217c:	4613      	mov	r3, r2
 800217e:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <I2C_Read+0x1c>
        return false;
 8002186:	2300      	movs	r3, #0
 8002188:	e019      	b.n	80021be <I2C_Read+0x50>
    }
    if (NULL == data) {
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <I2C_Read+0x26>
        return false;
 8002190:	2300      	movs	r3, #0
 8002192:	e014      	b.n	80021be <I2C_Read+0x50>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	b299      	uxth	r1, r3
 8002198:	7abb      	ldrb	r3, [r7, #10]
 800219a:	b29a      	uxth	r2, r3
 800219c:	7e3b      	ldrb	r3, [r7, #24]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2064      	movs	r0, #100	; 0x64
 80021a2:	9002      	str	r0, [sp, #8]
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2301      	movs	r3, #1
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f001 f8d3 	bl	8003358 <HAL_I2C_Mem_Read>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_Read+0x4e>

        /* Data couldn't be read */
        return false;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <I2C_Read+0x50>
    } else {

        /* Data read successfully */
        return true;
 80021bc:	2301      	movs	r3, #1
    }
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <MPU6050_ReadRegister>:

    /* Configure slave QMC5883L magnetometer */
    MPU6050_Configure_QMC5883l(hmpu6050);
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af02      	add	r7, sp, #8
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	72fb      	strb	r3, [r7, #11]
 80021d4:	4613      	mov	r3, r2
 80021d6:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 80021d8:	7aba      	ldrb	r2, [r7, #10]
 80021da:	7af9      	ldrb	r1, [r7, #11]
 80021dc:	7e3b      	ldrb	r3, [r7, #24]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff ffc3 	bl	800216e <I2C_Read>
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <MPU6050_ReadGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

void MPU6050_ReadGyroscope(MPU6050_HandleTypeDef_t * hmpu6050, gyroscopeValues_t * gyroscopeValues) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_2000;
 80021fa:	2310      	movs	r3, #16
 80021fc:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hmpu6050 && NULL != gyroscopeValues) {
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d051      	beq.n	80022a8 <MPU6050_ReadGyroscope+0xb8>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d04e      	beq.n	80022a8 <MPU6050_ReadGyroscope+0xb8>

        /* Read gyroscope in axis X */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6858      	ldr	r0, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7a19      	ldrb	r1, [r3, #8]
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	2202      	movs	r2, #2
 8002218:	9200      	str	r2, [sp, #0]
 800221a:	2243      	movs	r2, #67	; 0x43
 800221c:	f7ff ffd3 	bl	80021c6 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002220:	7b3b      	ldrb	r3, [r7, #12]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b21a      	sxth	r2, r3
 8002226:	7b7b      	ldrb	r3, [r7, #13]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21b      	sxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002234:	fb92 f3f3 	sdiv	r3, r2, r3
 8002238:	b21a      	sxth	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	801a      	strh	r2, [r3, #0]

        /* Read gyroscope in axis Y */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6858      	ldr	r0, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7a19      	ldrb	r1, [r3, #8]
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	2202      	movs	r2, #2
 800224c:	9200      	str	r2, [sp, #0]
 800224e:	2245      	movs	r2, #69	; 0x45
 8002250:	f7ff ffb9 	bl	80021c6 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002254:	7b3b      	ldrb	r3, [r7, #12]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	b21a      	sxth	r2, r3
 800225a:	7b7b      	ldrb	r3, [r7, #13]
 800225c:	b21b      	sxth	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b21b      	sxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002268:	fb92 f3f3 	sdiv	r3, r2, r3
 800226c:	b21a      	sxth	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	805a      	strh	r2, [r3, #2]

        /* Read gyroscope in axis Z */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6858      	ldr	r0, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7a19      	ldrb	r1, [r3, #8]
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	2202      	movs	r2, #2
 8002280:	9200      	str	r2, [sp, #0]
 8002282:	2247      	movs	r2, #71	; 0x47
 8002284:	f7ff ff9f 	bl	80021c6 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002288:	7b3b      	ldrb	r3, [r7, #12]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	7b7b      	ldrb	r3, [r7, #13]
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21b      	sxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800229c:	fb92 f3f3 	sdiv	r3, r2, r3
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	809a      	strh	r2, [r3, #4]
 80022a6:	e009      	b.n	80022bc <MPU6050_ReadGyroscope+0xcc>

    } else {
        /* Wrong parameters */
        gyroscopeValues->gyroscopeX = 0;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->gyroscopeY = 0;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2200      	movs	r2, #0
 80022b2:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->gyroscopeZ = 0;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2200      	movs	r2, #0
 80022b8:	809a      	strh	r2, [r3, #4]
    }
}
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <MPU6050_ReadAccelerometer>:

void MPU6050_ReadAccelerometer(MPU6050_HandleTypeDef_t * hmpu6050, accelerometerValues_t * accelerometerValues) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_16;
 80022ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d2:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hmpu6050 && NULL != accelerometerValues) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d051      	beq.n	800237e <MPU6050_ReadAccelerometer+0xba>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d04e      	beq.n	800237e <MPU6050_ReadAccelerometer+0xba>

        /* Read accelerometer in axis X */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6858      	ldr	r0, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7a19      	ldrb	r1, [r3, #8]
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	2202      	movs	r2, #2
 80022ee:	9200      	str	r2, [sp, #0]
 80022f0:	223b      	movs	r2, #59	; 0x3b
 80022f2:	f7ff ff68 	bl	80021c6 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80022f6:	7b3b      	ldrb	r3, [r7, #12]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	7b7b      	ldrb	r3, [r7, #13]
 80022fe:	b21b      	sxth	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	b21b      	sxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800230a:	fb92 f3f3 	sdiv	r3, r2, r3
 800230e:	b21a      	sxth	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	801a      	strh	r2, [r3, #0]

        /* Read accelerometer in axis Y */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6858      	ldr	r0, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7a19      	ldrb	r1, [r3, #8]
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2202      	movs	r2, #2
 8002322:	9200      	str	r2, [sp, #0]
 8002324:	223d      	movs	r2, #61	; 0x3d
 8002326:	f7ff ff4e 	bl	80021c6 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 800232a:	7b3b      	ldrb	r3, [r7, #12]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b21a      	sxth	r2, r3
 8002330:	7b7b      	ldrb	r3, [r7, #13]
 8002332:	b21b      	sxth	r3, r3
 8002334:	4313      	orrs	r3, r2
 8002336:	b21b      	sxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800233e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002342:	b21a      	sxth	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	805a      	strh	r2, [r3, #2]

        /* Read accelerometer in axis Z */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6858      	ldr	r0, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7a19      	ldrb	r1, [r3, #8]
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2202      	movs	r2, #2
 8002356:	9200      	str	r2, [sp, #0]
 8002358:	223f      	movs	r2, #63	; 0x3f
 800235a:	f7ff ff34 	bl	80021c6 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 800235e:	7b3b      	ldrb	r3, [r7, #12]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	b21a      	sxth	r2, r3
 8002364:	7b7b      	ldrb	r3, [r7, #13]
 8002366:	b21b      	sxth	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b21b      	sxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002372:	fb92 f3f3 	sdiv	r3, r2, r3
 8002376:	b21a      	sxth	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	809a      	strh	r2, [r3, #4]
 800237c:	e009      	b.n	8002392 <MPU6050_ReadAccelerometer+0xce>

    } else {
        /* Wrong parameters */
        accelerometerValues->accelerometerX = 0;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	801a      	strh	r2, [r3, #0]
        accelerometerValues->accelerometerY = 0;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	805a      	strh	r2, [r3, #2]
        accelerometerValues->accelerometerZ = 0;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	809a      	strh	r2, [r3, #4]
    }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <MPU6050_ReadTemperatureSensor>:

int16_t MPU6050_ReadTemperatureSensor(MPU6050_HandleTypeDef_t * hmpu6050) {
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af02      	add	r7, sp, #8
 80023a0:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 80023a2:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80023a6:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 80023a8:	2324      	movs	r3, #36	; 0x24
 80023aa:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hmpu6050) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <MPU6050_ReadTemperatureSensor+0x1c>
        return 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e01b      	b.n	80023ee <MPU6050_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6858      	ldr	r0, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7a19      	ldrb	r1, [r3, #8]
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	2202      	movs	r2, #2
 80023c4:	9200      	str	r2, [sp, #0]
 80023c6:	2241      	movs	r2, #65	; 0x41
 80023c8:	f7ff fefd 	bl	80021c6 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 80023cc:	7a3b      	ldrb	r3, [r7, #8]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	7a7b      	ldrb	r3, [r7, #9]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21b      	sxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	89bb      	ldrh	r3, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b21b      	sxth	r3, r3
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <MPU6050_ReadMagnetometer>:

void MPU6050_ReadMagnetometer(MPU6050_HandleTypeDef_t * hmpu6050, magnetometerValues_t * magnetometerValues) {
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 1;
 8002400:	2301      	movs	r3, #1
 8002402:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hmpu6050 && NULL != magnetometerValues) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d051      	beq.n	80024ae <MPU6050_ReadMagnetometer+0xb8>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d04e      	beq.n	80024ae <MPU6050_ReadMagnetometer+0xb8>

        /* Read magnetometer in axis X */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6858      	ldr	r0, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7a19      	ldrb	r1, [r3, #8]
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	2202      	movs	r2, #2
 800241e:	9200      	str	r2, [sp, #0]
 8002420:	2249      	movs	r2, #73	; 0x49
 8002422:	f7ff fed0 	bl	80021c6 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8002426:	7b7b      	ldrb	r3, [r7, #13]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	7b3b      	ldrb	r3, [r7, #12]
 800242e:	b21b      	sxth	r3, r3
 8002430:	4313      	orrs	r3, r2
 8002432:	b21b      	sxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800243a:	fb92 f3f3 	sdiv	r3, r2, r3
 800243e:	b21a      	sxth	r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	801a      	strh	r2, [r3, #0]

        /* Read magnetometer in axis Y */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6858      	ldr	r0, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7a19      	ldrb	r1, [r3, #8]
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2202      	movs	r2, #2
 8002452:	9200      	str	r2, [sp, #0]
 8002454:	224b      	movs	r2, #75	; 0x4b
 8002456:	f7ff feb6 	bl	80021c6 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 800245a:	7b7b      	ldrb	r3, [r7, #13]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b21a      	sxth	r2, r3
 8002460:	7b3b      	ldrb	r3, [r7, #12]
 8002462:	b21b      	sxth	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	b21b      	sxth	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800246e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002472:	b21a      	sxth	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	805a      	strh	r2, [r3, #2]

        /* Read magnetometer in axis Z */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6858      	ldr	r0, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7a19      	ldrb	r1, [r3, #8]
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2202      	movs	r2, #2
 8002486:	9200      	str	r2, [sp, #0]
 8002488:	224d      	movs	r2, #77	; 0x4d
 800248a:	f7ff fe9c 	bl	80021c6 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 800248e:	7b7b      	ldrb	r3, [r7, #13]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b21a      	sxth	r2, r3
 8002494:	7b3b      	ldrb	r3, [r7, #12]
 8002496:	b21b      	sxth	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	b21b      	sxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80024a6:	b21a      	sxth	r2, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	809a      	strh	r2, [r3, #4]
 80024ac:	e009      	b.n	80024c2 <MPU6050_ReadMagnetometer+0xcc>

    } else {
        /* Wrong parameters */
        magnetometerValues->magnetometerX = 0;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	801a      	strh	r2, [r3, #0]
        magnetometerValues->magnetometerY = 0;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	805a      	strh	r2, [r3, #2]
        magnetometerValues->magnetometerZ = 0;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	809a      	strh	r2, [r3, #4]
    }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	0000      	movs	r0, r0
 80024cc:	0000      	movs	r0, r0
	...

080024d0 <MPU6050_ReadMagnetometerHeading>:

int16_t MPU6050_ReadMagnetometerHeading(MPU6050_HandleTypeDef_t * hmpu6050) {
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

    /* Allocate dynamic memory for the magnetometerValues_t structure */
#ifdef USE_FREERTOS
    magnetometerValues_t * magnetometerValues = pvPortmalloc(sizeof(magnetometerValues_t));
#else
    magnetometerValues_t * magnetometerValues = malloc(sizeof(magnetometerValues_t));
 80024d8:	2006      	movs	r0, #6
 80024da:	f009 ffa7 	bl	800c42c <malloc>
 80024de:	4603      	mov	r3, r0
 80024e0:	60bb      	str	r3, [r7, #8]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameters */
    if (NULL != hmpu6050) {
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d038      	beq.n	800255a <MPU6050_ReadMagnetometerHeading+0x8a>

        MPU6050_ReadMagnetometer(hmpu6050, magnetometerValues);
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ff83 	bl	80023f6 <MPU6050_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(magnetometerValues->magnetometerY, magnetometerValues->magnetometerX) * RADIANS_TO_DEGREES_CONST;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f81c 	bl	8000534 <__aeabi_i2d>
 80024fc:	4604      	mov	r4, r0
 80024fe:	460d      	mov	r5, r1
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f814 	bl	8000534 <__aeabi_i2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	ec43 2b11 	vmov	d1, r2, r3
 8002514:	ec45 4b10 	vmov	d0, r4, r5
 8002518:	f00a fc4b 	bl	800cdb2 <atan2>
 800251c:	ec51 0b10 	vmov	r0, r1, d0
 8002520:	a319      	add	r3, pc, #100	; (adr r3, 8002588 <MPU6050_ReadMagnetometerHeading+0xb8>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f86f 	bl	8000608 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe fb23 	bl	8000b7c <__aeabi_d2f>
 8002536:	4603      	mov	r3, r0
 8002538:	60fb      	str	r3, [r7, #12]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 800253a:	edd7 7a03 	vldr	s15, [r7, #12]
 800253e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002546:	d50a      	bpl.n	800255e <MPU6050_ReadMagnetometerHeading+0x8e>
            heading += 360;
 8002548:	edd7 7a03 	vldr	s15, [r7, #12]
 800254c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002580 <MPU6050_ReadMagnetometerHeading+0xb0>
 8002550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002554:	edc7 7a03 	vstr	s15, [r7, #12]
 8002558:	e001      	b.n	800255e <MPU6050_ReadMagnetometerHeading+0x8e>
        }

    } else {

        heading = -1;
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <MPU6050_ReadMagnetometerHeading+0xb4>)
 800255c:	60fb      	str	r3, [r7, #12]

    /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
    vPortFree(magnetometerValues);
#else
    free(magnetometerValues);
 800255e:	68b8      	ldr	r0, [r7, #8]
 8002560:	f009 ff6c 	bl	800c43c <free>
#endif

    return heading;
 8002564:	edd7 7a03 	vldr	s15, [r7, #12]
 8002568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256c:	ee17 3a90 	vmov	r3, s15
 8002570:	b21b      	sxth	r3, r3
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bdb0      	pop	{r4, r5, r7, pc}
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w
 8002580:	43b40000 	.word	0x43b40000
 8002584:	bf800000 	.word	0xbf800000
 8002588:	1a63c1f8 	.word	0x1a63c1f8
 800258c:	404ca5dc 	.word	0x404ca5dc

08002590 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS(string, strlen((const char *)string));
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fd fe21 	bl	80001e0 <strlen>
 800259e:	4603      	mov	r3, r0
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f009 faef 	bl	800bb88 <CDC_Transmit_FS>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b090      	sub	sp, #64	; 0x40
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <LOG+0x18>
        return -1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ca:	e049      	b.n	8002660 <LOG+0xac>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d902      	bls.n	80025d8 <LOG+0x24>
        return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d6:	e043      	b.n	8002660 <LOG+0xac>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	222e      	movs	r2, #46	; 0x2e
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f009 fffd 	bl	800c5e4 <memset>

    if (LOG_INFORMATION == logType) {
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d108      	bne.n	8002602 <LOG+0x4e>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <LOG+0xb4>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f009 fffa 	bl	800c5f4 <strcat>
 8002600:	e022      	b.n	8002648 <LOG+0x94>
    } else if (LOG_DEBUGGING == logType) {
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d108      	bne.n	800261a <LOG+0x66>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <LOG+0xb8>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f009 ffee 	bl	800c5f4 <strcat>
 8002618:	e016      	b.n	8002648 <LOG+0x94>
    } else if (LOG_WARNING == logType) {
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d108      	bne.n	8002632 <LOG+0x7e>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <LOG+0xbc>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f009 ffe2 	bl	800c5f4 <strcat>
 8002630:	e00a      	b.n	8002648 <LOG+0x94>
    } else if (LOG_ERROR == logType) {
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d107      	bne.n	8002648 <LOG+0x94>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <LOG+0xc0>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f009 ffd6 	bl	800c5f4 <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	f009 ffd0 	bl	800c5f4 <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff99 	bl	8002590 <USB_Write>

    return 0;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3740      	adds	r7, #64	; 0x40
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000014 	.word	0x20000014
 800266c:	20000018 	.word	0x20000018
 8002670:	2000001c 	.word	0x2000001c
 8002674:	20000020 	.word	0x20000020

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <HAL_Init+0x40>)
 8002682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <HAL_Init+0x40>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_Init+0x40>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 f94f 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a6:	200f      	movs	r0, #15
 80026a8:	f000 f808 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ac:	f7ff f8da 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00

080026bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f967 	bl	80029ae <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026f8:	f000 f92f 	bl	800295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000000 	.word	0x20000000
 8002714:	20000028 	.word	0x20000028
 8002718:	20000024 	.word	0x20000024

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000028 	.word	0x20000028
 8002740:	20000550 	.word	0x20000550

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000550 	.word	0x20000550

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000028 	.word	0x20000028

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff feb6 	bl	8002744 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e099      	b.n	8002b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fe9d 	bl	8002744 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d908      	bls.n	8002a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e078      	b.n	8002b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e8      	bne.n	8002a06 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_DMA_Init+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d117      	bne.n	8002aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8e5 	bl	8002c9c <DMA_CheckFifoParam>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f89c 	bl	8002c30 <DMA_CalcBaseAndBitshift>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	f010803f 	.word	0xf010803f

08002b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Start_IT+0x26>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e040      	b.n	8002bcc <HAL_DMA_Start_IT+0xa8>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d12f      	bne.n	8002bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f82e 	bl	8002bd4 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0216 	orr.w	r2, r2, #22
 8002b92:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0208 	orr.w	r2, r2, #8
 8002baa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e005      	b.n	8002bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d108      	bne.n	8002c14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c12:	e007      	b.n	8002c24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	3b10      	subs	r3, #16
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <DMA_CalcBaseAndBitshift+0x64>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <DMA_CalcBaseAndBitshift+0x68>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d909      	bls.n	8002c72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	1d1a      	adds	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c70:	e007      	b.n	8002c82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	aaaaaaab 	.word	0xaaaaaaab
 8002c98:	0800d544 	.word	0x0800d544

08002c9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11f      	bne.n	8002cf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d856      	bhi.n	8002d6a <DMA_CheckFifoParam+0xce>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <DMA_CheckFifoParam+0x28>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002ce7 	.word	0x08002ce7
 8002ccc:	08002cd5 	.word	0x08002cd5
 8002cd0:	08002d6b 	.word	0x08002d6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d046      	beq.n	8002d6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce4:	e043      	b.n	8002d6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cee:	d140      	bne.n	8002d72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e03d      	b.n	8002d72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	d121      	bne.n	8002d44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d837      	bhi.n	8002d76 <DMA_CheckFifoParam+0xda>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <DMA_CheckFifoParam+0x70>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d23 	.word	0x08002d23
 8002d14:	08002d1d 	.word	0x08002d1d
 8002d18:	08002d35 	.word	0x08002d35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d20:	e030      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d025      	beq.n	8002d7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d32:	e022      	b.n	8002d7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d3c:	d11f      	bne.n	8002d7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d42:	e01c      	b.n	8002d7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d903      	bls.n	8002d52 <DMA_CheckFifoParam+0xb6>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d003      	beq.n	8002d58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d50:	e018      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      break;
 8002d56:	e015      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00e      	beq.n	8002d82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      break;
 8002d68:	e00b      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e00a      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e008      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d72:	bf00      	nop
 8002d74:	e006      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d76:	bf00      	nop
 8002d78:	e004      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
    }
  }

  return status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e159      	b.n	8003064 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002db0:	2201      	movs	r2, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	f040 8148 	bne.w	800305e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d005      	beq.n	8002de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d130      	bne.n	8002e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0201 	and.w	r2, r3, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d017      	beq.n	8002e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d123      	bne.n	8002ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	08da      	lsrs	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3208      	adds	r2, #8
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0203 	and.w	r2, r3, #3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80a2 	beq.w	800305e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b57      	ldr	r3, [pc, #348]	; (800307c <HAL_GPIO_Init+0x2e8>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_GPIO_Init+0x2e8>)
 8002f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b54      	ldr	r3, [pc, #336]	; (800307c <HAL_GPIO_Init+0x2e8>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f36:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_GPIO_Init+0x2ec>)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a49      	ldr	r2, [pc, #292]	; (8003084 <HAL_GPIO_Init+0x2f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_Init+0x202>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a48      	ldr	r2, [pc, #288]	; (8003088 <HAL_GPIO_Init+0x2f4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x1fe>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a47      	ldr	r2, [pc, #284]	; (800308c <HAL_GPIO_Init+0x2f8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x1fa>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a46      	ldr	r2, [pc, #280]	; (8003090 <HAL_GPIO_Init+0x2fc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x1f6>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a45      	ldr	r2, [pc, #276]	; (8003094 <HAL_GPIO_Init+0x300>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x1f2>
 8002f82:	2304      	movs	r3, #4
 8002f84:	e008      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f86:	2307      	movs	r3, #7
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e004      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x204>
 8002f96:	2300      	movs	r3, #0
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	f002 0203 	and.w	r2, r2, #3
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	4093      	lsls	r3, r2
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa8:	4935      	ldr	r1, [pc, #212]	; (8003080 <HAL_GPIO_Init+0x2ec>)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_GPIO_Init+0x304>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fda:	4a2f      	ldr	r2, [pc, #188]	; (8003098 <HAL_GPIO_Init+0x304>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <HAL_GPIO_Init+0x304>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <HAL_GPIO_Init+0x304>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <HAL_GPIO_Init+0x304>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800302e:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <HAL_GPIO_Init+0x304>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_GPIO_Init+0x304>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003058:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <HAL_GPIO_Init+0x304>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3301      	adds	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	f67f aea2 	bls.w	8002db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	40013800 	.word	0x40013800
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40020800 	.word	0x40020800
 8003090:	40020c00 	.word	0x40020c00
 8003094:	40021000 	.word	0x40021000
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e12b      	b.n	800333a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fbe0 	bl	80018bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003134:	f002 fc68 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a81      	ldr	r2, [pc, #516]	; (8003344 <HAL_I2C_Init+0x274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d807      	bhi.n	8003154 <HAL_I2C_Init+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_I2C_Init+0x278>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e006      	b.n	8003162 <HAL_I2C_Init+0x92>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a7d      	ldr	r2, [pc, #500]	; (800334c <HAL_I2C_Init+0x27c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e7      	b.n	800333a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a78      	ldr	r2, [pc, #480]	; (8003350 <HAL_I2C_Init+0x280>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_I2C_Init+0x274>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <HAL_I2C_Init+0xd4>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	e009      	b.n	80031b8 <HAL_I2C_Init+0xe8>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_I2C_Init+0x284>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	3301      	adds	r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	495c      	ldr	r1, [pc, #368]	; (8003344 <HAL_I2C_Init+0x274>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d819      	bhi.n	800320c <HAL_I2C_Init+0x13c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e59      	subs	r1, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e6:	1c59      	adds	r1, r3, #1
 80031e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ec:	400b      	ands	r3, r1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_I2C_Init+0x138>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e59      	subs	r1, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	e051      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003208:	2304      	movs	r3, #4
 800320a:	e04f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_I2C_Init+0x168>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e012      	b.n	800325e <HAL_I2C_Init+0x18e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x196>
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_I2C_Init+0x1bc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6911      	ldr	r1, [r2, #16]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	000186a0 	.word	0x000186a0
 8003348:	001e847f 	.word	0x001e847f
 800334c:	003d08ff 	.word	0x003d08ff
 8003350:	431bde83 	.word	0x431bde83
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4603      	mov	r3, r0
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	460b      	mov	r3, r1
 800336c:	813b      	strh	r3, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003372:	f7ff f9e7 	bl	8002744 <HAL_GetTick>
 8003376:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b20      	cmp	r3, #32
 8003382:	f040 8208 	bne.w	8003796 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	2319      	movs	r3, #25
 800338c:	2201      	movs	r2, #1
 800338e:	497b      	ldr	r1, [pc, #492]	; (800357c <HAL_I2C_Mem_Read+0x224>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 faef 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
 800339e:	e1fb      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Mem_Read+0x56>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e1f4      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d007      	beq.n	80033d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2222      	movs	r2, #34	; 0x22
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a5b      	ldr	r2, [pc, #364]	; (8003580 <HAL_I2C_Mem_Read+0x228>)
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003416:	88f8      	ldrh	r0, [r7, #6]
 8003418:	893a      	ldrh	r2, [r7, #8]
 800341a:	8979      	ldrh	r1, [r7, #10]
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	4603      	mov	r3, r0
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f9bc 	bl	80037a4 <I2C_RequestMemoryRead>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1b0      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e184      	b.n	8003770 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	2b01      	cmp	r3, #1
 800346c:	d11b      	bne.n	80034a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e164      	b.n	8003770 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d11b      	bne.n	80034e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	e144      	b.n	8003770 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034fc:	e138      	b.n	8003770 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	2b03      	cmp	r3, #3
 8003504:	f200 80f1 	bhi.w	80036ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b01      	cmp	r3, #1
 800350e:	d123      	bne.n	8003558 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fb44 	bl	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e139      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003556:	e10b      	b.n	8003770 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	2b02      	cmp	r3, #2
 800355e:	d14e      	bne.n	80035fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	2200      	movs	r2, #0
 8003568:	4906      	ldr	r1, [pc, #24]	; (8003584 <HAL_I2C_Mem_Read+0x22c>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fa02 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e10e      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
 800357a:	bf00      	nop
 800357c:	00100002 	.word	0x00100002
 8003580:	ffff0000 	.word	0xffff0000
 8003584:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035fc:	e0b8      	b.n	8003770 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	2200      	movs	r2, #0
 8003606:	4966      	ldr	r1, [pc, #408]	; (80037a0 <HAL_I2C_Mem_Read+0x448>)
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f9b3 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0bf      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2200      	movs	r2, #0
 8003662:	494f      	ldr	r1, [pc, #316]	; (80037a0 <HAL_I2C_Mem_Read+0x448>)
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f985 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e091      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036e8:	e042      	b.n	8003770 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fa57 	bl	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e04c      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d118      	bne.n	8003770 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	f47f aec2 	bne.w	80034fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3728      	adds	r7, #40	; 0x28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	00010004 	.word	0x00010004

080037a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	4608      	mov	r0, r1
 80037ae:	4611      	mov	r1, r2
 80037b0:	461a      	mov	r2, r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	817b      	strh	r3, [r7, #10]
 80037b6:	460b      	mov	r3, r1
 80037b8:	813b      	strh	r3, [r7, #8]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f8c2 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003804:	d103      	bne.n	800380e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0aa      	b.n	8003968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	4952      	ldr	r1, [pc, #328]	; (8003970 <I2C_RequestMemoryRead+0x1cc>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f8fa 	bl	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e097      	b.n	8003968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f964 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b04      	cmp	r3, #4
 8003864:	d107      	bne.n	8003876 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e076      	b.n	8003968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003880:	893b      	ldrh	r3, [r7, #8]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	611a      	str	r2, [r3, #16]
 800388a:	e021      	b.n	80038d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800388c:	893b      	ldrh	r3, [r7, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	b29b      	uxth	r3, r3
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	6a39      	ldr	r1, [r7, #32]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f93e 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d107      	bne.n	80038c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e050      	b.n	8003968 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	6a39      	ldr	r1, [r7, #32]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f923 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d107      	bne.n	80038f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e035      	b.n	8003968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800390a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	2200      	movs	r2, #0
 8003914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f82b 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00d      	beq.n	8003940 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003932:	d103      	bne.n	800393c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e013      	b.n	8003968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003940:	897b      	ldrh	r3, [r7, #10]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	4906      	ldr	r1, [pc, #24]	; (8003970 <I2C_RequestMemoryRead+0x1cc>)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f863 	bl	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	00010002 	.word	0x00010002

08003974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	e025      	b.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398c:	d021      	beq.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe fed9 	bl	8002744 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e023      	b.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10d      	bne.n	80039f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	e00c      	b.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d0b6      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a30:	e051      	b.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a40:	d123      	bne.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e046      	b.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a90:	d021      	beq.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fe fe57 	bl	8002744 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e020      	b.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10c      	bne.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf14      	ite	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2300      	moveq	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e00b      	b.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	43da      	mvns	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4013      	ands	r3, r2
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d18d      	bne.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b2c:	e02d      	b.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f88d 	bl	8003c4e <I2C_IsAcknowledgeFailed>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e02d      	b.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b44:	d021      	beq.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fe fdfd 	bl	8002744 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d116      	bne.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e007      	b.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d1ca      	bne.n	8003b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bae:	e042      	b.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d119      	bne.n	8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f06f 0210 	mvn.w	r2, #16
 8003bc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e029      	b.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe fda7 	bl	8002744 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e007      	b.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d1b5      	bne.n	8003bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c64:	d11b      	bne.n	8003c9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cae:	b08f      	sub	sp, #60	; 0x3c
 8003cb0:	af0a      	add	r7, sp, #40	; 0x28
 8003cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e10f      	b.n	8003ede <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f008 f89d 	bl	800be18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f003 f88a 	bl	8006e16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	687e      	ldr	r6, [r7, #4]
 8003d0a:	466d      	mov	r5, sp
 8003d0c:	f106 0410 	add.w	r4, r6, #16
 8003d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d20:	1d33      	adds	r3, r6, #4
 8003d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d24:	6838      	ldr	r0, [r7, #0]
 8003d26:	f002 ff61 	bl	8006bec <USB_CoreInit>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0d0      	b.n	8003ede <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f003 f878 	bl	8006e38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e04a      	b.n	8003de4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	333d      	adds	r3, #61	; 0x3d
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	333c      	adds	r3, #60	; 0x3c
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d76:	7bfa      	ldrb	r2, [r7, #15]
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	b298      	uxth	r0, r3
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	3344      	adds	r3, #68	; 0x44
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3340      	adds	r3, #64	; 0x40
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3348      	adds	r3, #72	; 0x48
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	334c      	adds	r3, #76	; 0x4c
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3354      	adds	r3, #84	; 0x54
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	3301      	adds	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d3af      	bcc.n	8003d4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e044      	b.n	8003e7e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e06:	2200      	movs	r2, #0
 8003e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d3b5      	bcc.n	8003df4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	687e      	ldr	r6, [r7, #4]
 8003e90:	466d      	mov	r5, sp
 8003e92:	f106 0410 	add.w	r4, r6, #16
 8003e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ea2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ea6:	1d33      	adds	r3, r6, #4
 8003ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eaa:	6838      	ldr	r0, [r7, #0]
 8003eac:	f003 f810 	bl	8006ed0 <USB_DevInit>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e00d      	b.n	8003ede <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 f95f 	bl	800819a <USB_DevDisconnect>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ee6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_PCD_Start+0x1c>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e020      	b.n	8003f44 <HAL_PCD_Start+0x5e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d109      	bne.n	8003f26 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d005      	beq.n	8003f26 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f002 ff62 	bl	8006df4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f004 f90f 	bl	8008158 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b08d      	sub	sp, #52	; 0x34
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f004 f9cd 	bl	8008302 <USB_GetMode>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 848a 	bne.w	8004884 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f004 f931 	bl	80081dc <USB_ReadInterrupts>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8480 	beq.w	8004882 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f004 f91e 	bl	80081dc <USB_ReadInterrupts>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d107      	bne.n	8003fba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f002 0202 	and.w	r2, r2, #2
 8003fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f004 f90c 	bl	80081dc <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d161      	bne.n	8004092 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0210 	bic.w	r2, r2, #16
 8003fdc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 020f 	and.w	r2, r3, #15
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	0c5b      	lsrs	r3, r3, #17
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	2b02      	cmp	r3, #2
 8004008:	d124      	bne.n	8004054 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d035      	beq.n	8004082 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004024:	b29b      	uxth	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	6a38      	ldr	r0, [r7, #32]
 800402a:	f003 ff43 	bl	8007eb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800403a:	441a      	add	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800404c:	441a      	add	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	621a      	str	r2, [r3, #32]
 8004052:	e016      	b.n	8004082 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	0c5b      	lsrs	r3, r3, #17
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	2b06      	cmp	r3, #6
 800405e:	d110      	bne.n	8004082 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004066:	2208      	movs	r2, #8
 8004068:	4619      	mov	r1, r3
 800406a:	6a38      	ldr	r0, [r7, #32]
 800406c:	f003 ff22 	bl	8007eb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800407c:	441a      	add	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0210 	orr.w	r2, r2, #16
 8004090:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f004 f8a0 	bl	80081dc <USB_ReadInterrupts>
 800409c:	4603      	mov	r3, r0
 800409e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040a6:	f040 80a7 	bne.w	80041f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 f8a5 	bl	8008202 <USB_ReadDevAllOutEpInterrupt>
 80040b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80040ba:	e099      	b.n	80041f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 808e 	beq.w	80041e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f004 f8c9 	bl	800826a <USB_ReadDevOutEPInterrupt>
 80040d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00c      	beq.n	80040fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	461a      	mov	r2, r3
 80040f2:	2301      	movs	r3, #1
 80040f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fec3 	bl	8004e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	461a      	mov	r2, r3
 8004116:	2308      	movs	r3, #8
 8004118:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800411a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 ff99 	bl	8005054 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	461a      	mov	r2, r3
 800413a:	2310      	movs	r3, #16
 800413c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d030      	beq.n	80041aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d109      	bne.n	8004168 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004166:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	3304      	adds	r3, #4
 800417c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	78db      	ldrb	r3, [r3, #3]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d108      	bne.n	8004198 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2200      	movs	r2, #0
 800418a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	b2db      	uxtb	r3, r3
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f007 ff3c 	bl	800c010 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	461a      	mov	r2, r3
 80041a6:	2302      	movs	r3, #2
 80041a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	2320      	movs	r3, #32
 80041c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	3301      	adds	r3, #1
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f47f af62 	bne.w	80040bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f003 ffed 	bl	80081dc <USB_ReadInterrupts>
 8004202:	4603      	mov	r3, r0
 8004204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004208:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800420c:	f040 80db 	bne.w	80043c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f004 f80e 	bl	8008236 <USB_ReadDevAllInEpInterrupt>
 800421a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004220:	e0cd      	b.n	80043be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80c2 	beq.w	80043b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f004 f834 	bl	80082a6 <USB_ReadDevInEPInterrupt>
 800423e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d057      	beq.n	80042fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	2201      	movs	r2, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43db      	mvns	r3, r3
 8004264:	69f9      	ldr	r1, [r7, #28]
 8004266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800426a:	4013      	ands	r3, r2
 800426c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	461a      	mov	r2, r3
 800427c:	2301      	movs	r3, #1
 800427e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d132      	bne.n	80042ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	334c      	adds	r3, #76	; 0x4c
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4403      	add	r3, r0
 80042a8:	3348      	adds	r3, #72	; 0x48
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4419      	add	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4403      	add	r3, r0
 80042bc:	334c      	adds	r3, #76	; 0x4c
 80042be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d113      	bne.n	80042ee <HAL_PCD_IRQHandler+0x3a2>
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	3354      	adds	r3, #84	; 0x54
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d108      	bne.n	80042ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042e6:	461a      	mov	r2, r3
 80042e8:	2101      	movs	r1, #1
 80042ea:	f004 f83b 	bl	8008364 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f007 fe10 	bl	800bf1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004310:	461a      	mov	r2, r3
 8004312:	2308      	movs	r3, #8
 8004314:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	461a      	mov	r2, r3
 800432e:	2310      	movs	r3, #16
 8004330:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	461a      	mov	r2, r3
 800434a:	2340      	movs	r3, #64	; 0x40
 800434c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d023      	beq.n	80043a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800435a:	6a38      	ldr	r0, [r7, #32]
 800435c:	f002 ff1c 	bl	8007198 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	3338      	adds	r3, #56	; 0x38
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	3304      	adds	r3, #4
 8004372:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	78db      	ldrb	r3, [r3, #3]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d108      	bne.n	800438e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	b2db      	uxtb	r3, r3
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f007 fe53 	bl	800c034 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439a:	461a      	mov	r2, r3
 800439c:	2302      	movs	r3, #2
 800439e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fcdb 	bl	8004d68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	3301      	adds	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f af2e 	bne.w	8004222 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f003 ff06 	bl	80081dc <USB_ReadInterrupts>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043da:	d122      	bne.n	8004422 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d108      	bne.n	800440c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004402:	2100      	movs	r1, #0
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fec3 	bl	8005190 <HAL_PCDEx_LPM_Callback>
 800440a:	e002      	b.n	8004412 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f007 fdf1 	bl	800bff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004420:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f003 fed8 	bl	80081dc <USB_ReadInterrupts>
 800442c:	4603      	mov	r3, r0
 800442e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004436:	d112      	bne.n	800445e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b01      	cmp	r3, #1
 8004446:	d102      	bne.n	800444e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f007 fdad 	bl	800bfa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800445c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f003 feba 	bl	80081dc <USB_ReadInterrupts>
 8004468:	4603      	mov	r3, r0
 800446a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	f040 80b7 	bne.w	80045e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2110      	movs	r1, #16
 8004490:	4618      	mov	r0, r3
 8004492:	f002 fe81 	bl	8007198 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449a:	e046      	b.n	800452a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	461a      	mov	r2, r3
 80044aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	461a      	mov	r2, r3
 80044de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004502:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004522:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	3301      	adds	r3, #1
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004530:	429a      	cmp	r2, r3
 8004532:	d3b3      	bcc.n	800449c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004542:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004546:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004560:	f043 030b 	orr.w	r3, r3, #11
 8004564:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004576:	f043 030b 	orr.w	r3, r3, #11
 800457a:	6453      	str	r3, [r2, #68]	; 0x44
 800457c:	e015      	b.n	80045aa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004590:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004594:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a4:	f043 030b 	orr.w	r3, r3, #11
 80045a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80045bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045ce:	461a      	mov	r2, r3
 80045d0:	f003 fec8 	bl	8008364 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f003 fdf7 	bl	80081dc <USB_ReadInterrupts>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f8:	d124      	bne.n	8004644 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f003 fe8d 	bl	800831e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f002 fe42 	bl	8007292 <USB_GetDevSpeed>
 800460e:	4603      	mov	r3, r0
 8004610:	461a      	mov	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681c      	ldr	r4, [r3, #0]
 800461a:	f001 f9e9 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 800461e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	4620      	mov	r0, r4
 800462a:	f002 fb41 	bl	8006cb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f007 fc9b 	bl	800bf6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004642:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f003 fdc7 	bl	80081dc <USB_ReadInterrupts>
 800464e:	4603      	mov	r3, r0
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d10a      	bne.n	800466e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f007 fc78 	bl	800bf4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 0208 	and.w	r2, r2, #8
 800466c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f003 fdb2 	bl	80081dc <USB_ReadInterrupts>
 8004678:	4603      	mov	r3, r0
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b80      	cmp	r3, #128	; 0x80
 8004680:	d122      	bne.n	80046c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800468e:	2301      	movs	r3, #1
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
 8004692:	e014      	b.n	80046be <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fb27 	bl	8004d06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	3301      	adds	r3, #1
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d3e5      	bcc.n	8004694 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 fd85 	bl	80081dc <USB_ReadInterrupts>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046dc:	d13b      	bne.n	8004756 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046de:	2301      	movs	r3, #1
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	e02b      	b.n	800473c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	3340      	adds	r3, #64	; 0x40
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d115      	bne.n	8004736 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800470a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800470c:	2b00      	cmp	r3, #0
 800470e:	da12      	bge.n	8004736 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	333f      	adds	r3, #63	; 0x3f
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800472c:	b2db      	uxtb	r3, r3
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fae8 	bl	8004d06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	3301      	adds	r3, #1
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	429a      	cmp	r2, r3
 8004744:	d3ce      	bcc.n	80046e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f003 fd3e 	bl	80081dc <USB_ReadInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800476a:	d155      	bne.n	8004818 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800476c:	2301      	movs	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	e045      	b.n	80047fe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d12e      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800479a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800479c:	2b00      	cmp	r3, #0
 800479e:	da2b      	bge.n	80047f8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80047ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d121      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f4:	6053      	str	r3, [r2, #4]
            break;
 80047f6:	e007      	b.n	8004808 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	3301      	adds	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004804:	429a      	cmp	r2, r3
 8004806:	d3b4      	bcc.n	8004772 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f003 fcdd 	bl	80081dc <USB_ReadInterrupts>
 8004822:	4603      	mov	r3, r0
 8004824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d10a      	bne.n	8004844 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f007 fc12 	bl	800c058 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f003 fcc7 	bl	80081dc <USB_ReadInterrupts>
 800484e:	4603      	mov	r3, r0
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d115      	bne.n	8004884 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f007 fc02 	bl	800c074 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	e000      	b.n	8004884 <HAL_PCD_IRQHandler+0x938>
      return;
 8004882:	bf00      	nop
    }
  }
}
 8004884:	3734      	adds	r7, #52	; 0x34
 8004886:	46bd      	mov	sp, r7
 8004888:	bd90      	pop	{r4, r7, pc}

0800488a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_PCD_SetAddress+0x1a>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e013      	b.n	80048cc <HAL_PCD_SetAddress+0x42>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	78fa      	ldrb	r2, [r7, #3]
 80048b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	78fa      	ldrb	r2, [r7, #3]
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f003 fc25 	bl	800810c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	4608      	mov	r0, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	461a      	mov	r2, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	70fb      	strb	r3, [r7, #3]
 80048e6:	460b      	mov	r3, r1
 80048e8:	803b      	strh	r3, [r7, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	da0f      	bge.n	800491a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	f003 020f 	and.w	r2, r3, #15
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	3338      	adds	r3, #56	; 0x38
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	3304      	adds	r3, #4
 8004910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	705a      	strb	r2, [r3, #1]
 8004918:	e00f      	b.n	800493a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	4613      	mov	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4413      	add	r3, r2
 8004930:	3304      	adds	r3, #4
 8004932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004946:	883a      	ldrh	r2, [r7, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	78ba      	ldrb	r2, [r7, #2]
 8004950:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d004      	beq.n	8004964 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004964:	78bb      	ldrb	r3, [r7, #2]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d102      	bne.n	8004970 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_PCD_EP_Open+0xaa>
 800497a:	2302      	movs	r3, #2
 800497c:	e00e      	b.n	800499c <HAL_PCD_EP_Open+0xc8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	4618      	mov	r0, r3
 800498e:	f002 fca5 	bl	80072dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800499a:	7afb      	ldrb	r3, [r7, #11]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da0f      	bge.n	80049d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	f003 020f 	and.w	r2, r3, #15
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	3338      	adds	r3, #56	; 0x38
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4413      	add	r3, r2
 80049cc:	3304      	adds	r3, #4
 80049ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	705a      	strb	r2, [r3, #1]
 80049d6:	e00f      	b.n	80049f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_PCD_EP_Close+0x6e>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e00e      	b.n	8004a30 <HAL_PCD_EP_Close+0x8c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f002 fce3 	bl	80073ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	460b      	mov	r3, r1
 8004a46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a48:	7afb      	ldrb	r3, [r7, #11]
 8004a4a:	f003 020f 	and.w	r2, r3, #15
 8004a4e:	4613      	mov	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3304      	adds	r3, #4
 8004a60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2200      	movs	r2, #0
 8004a78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d102      	bne.n	8004a94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a94:	7afb      	ldrb	r3, [r7, #11]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6979      	ldr	r1, [r7, #20]
 8004aac:	f002 ffc2 	bl	8007a34 <USB_EP0StartXfer>
 8004ab0:	e008      	b.n	8004ac4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	6979      	ldr	r1, [r7, #20]
 8004ac0:	f002 fd70 	bl	80075a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	f003 020f 	and.w	r2, r3, #15
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004af0:	681b      	ldr	r3, [r3, #0]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b0e:	7afb      	ldrb	r3, [r7, #11]
 8004b10:	f003 020f 	and.w	r2, r3, #15
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	3338      	adds	r3, #56	; 0x38
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	3304      	adds	r3, #4
 8004b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2200      	movs	r2, #0
 8004b36:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b3e:	7afb      	ldrb	r3, [r7, #11]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d102      	bne.n	8004b58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b58:	7afb      	ldrb	r3, [r7, #11]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	f002 ff60 	bl	8007a34 <USB_EP0StartXfer>
 8004b74:	e008      	b.n	8004b88 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	f002 fd0e 	bl	80075a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	f003 020f 	and.w	r2, r3, #15
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d901      	bls.n	8004bb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e050      	b.n	8004c52 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	da0f      	bge.n	8004bd8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	3338      	adds	r3, #56	; 0x38
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3304      	adds	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	705a      	strb	r2, [r3, #1]
 8004bd6:	e00d      	b.n	8004bf4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	3304      	adds	r3, #4
 8004bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_PCD_EP_SetStall+0x82>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e01e      	b.n	8004c52 <HAL_PCD_EP_SetStall+0xc0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68f9      	ldr	r1, [r7, #12]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f003 f99e 	bl	8007f64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	b2d9      	uxtb	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c42:	461a      	mov	r2, r3
 8004c44:	f003 fb8e 	bl	8008364 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	460b      	mov	r3, r1
 8004c64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	f003 020f 	and.w	r2, r3, #15
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d901      	bls.n	8004c78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e042      	b.n	8004cfe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	da0f      	bge.n	8004ca0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	3338      	adds	r3, #56	; 0x38
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	4413      	add	r3, r2
 8004c94:	3304      	adds	r3, #4
 8004c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	705a      	strb	r2, [r3, #1]
 8004c9e:	e00f      	b.n	8004cc0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	f003 020f 	and.w	r2, r3, #15
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_PCD_EP_ClrStall+0x86>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e00e      	b.n	8004cfe <HAL_PCD_EP_ClrStall+0xa4>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f003 f9a6 	bl	8008040 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da0c      	bge.n	8004d34 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	f003 020f 	and.w	r2, r3, #15
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	3338      	adds	r3, #56	; 0x38
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3304      	adds	r3, #4
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e00c      	b.n	8004d4e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	f003 020f 	and.w	r2, r3, #15
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4413      	add	r3, r2
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f002 ffc5 	bl	8007ce4 <USB_EPStopXfer>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	; 0x28
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	3338      	adds	r3, #56	; 0x38
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1a      	ldr	r2, [r3, #32]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d901      	bls.n	8004da0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e06c      	b.n	8004e7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d902      	bls.n	8004dbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3303      	adds	r3, #3
 8004dc0:	089b      	lsrs	r3, r3, #2
 8004dc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dc4:	e02b      	b.n	8004e1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d902      	bls.n	8004de2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3303      	adds	r3, #3
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6919      	ldr	r1, [r3, #16]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4603      	mov	r3, r0
 8004e00:	6978      	ldr	r0, [r7, #20]
 8004e02:	f003 f819 	bl	8007e38 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1a      	ldr	r2, [r3, #32]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	441a      	add	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d809      	bhi.n	8004e48 <PCD_WriteEmptyTxFifo+0xe0>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1a      	ldr	r2, [r3, #32]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d203      	bcs.n	8004e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1be      	bne.n	8004dc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d811      	bhi.n	8004e78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	6939      	ldr	r1, [r7, #16]
 8004e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e74:	4013      	ands	r3, r2
 8004e76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	333c      	adds	r3, #60	; 0x3c
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d17b      	bne.n	8004fb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d015      	beq.n	8004ef0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4a61      	ldr	r2, [pc, #388]	; (800504c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	f240 80b9 	bls.w	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80b3 	beq.w	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eec:	6093      	str	r3, [r2, #8]
 8004eee:	e0a7      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	461a      	mov	r2, r3
 8004f08:	2320      	movs	r3, #32
 8004f0a:	6093      	str	r3, [r2, #8]
 8004f0c:	e098      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 8093 	bne.w	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	4a4b      	ldr	r2, [pc, #300]	; (800504c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d90f      	bls.n	8004f42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3e:	6093      	str	r3, [r2, #8]
 8004f40:	e07e      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3304      	adds	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	0159      	lsls	r1, r3, #5
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	440b      	add	r3, r1
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d114      	bne.n	8004fa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2101      	movs	r1, #1
 8004f90:	f003 f9e8 	bl	8008364 <USB_EP0_OutStart>
 8004f94:	e006      	b.n	8004fa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f006 ff9a 	bl	800bee4 <HAL_PCD_DataOutStageCallback>
 8004fb0:	e046      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4a26      	ldr	r2, [pc, #152]	; (8005050 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d124      	bne.n	8005004 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd6:	6093      	str	r3, [r2, #8]
 8004fd8:	e032      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f006 ff71 	bl	800bee4 <HAL_PCD_DataOutStageCallback>
 8005002:	e01d      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d114      	bne.n	8005034 <PCD_EP_OutXfrComplete_int+0x1b0>
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	4613      	mov	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d108      	bne.n	8005034 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800502c:	461a      	mov	r2, r3
 800502e:	2100      	movs	r1, #0
 8005030:	f003 f998 	bl	8008364 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f006 ff52 	bl	800bee4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	4f54300a 	.word	0x4f54300a
 8005050:	4f54310a 	.word	0x4f54310a

08005054 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	333c      	adds	r3, #60	; 0x3c
 800506c:	3304      	adds	r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <PCD_EP_OutSetupPacket_int+0x88>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d90e      	bls.n	80050a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	461a      	mov	r2, r3
 80050a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f006 ff09 	bl	800bec0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <PCD_EP_OutSetupPacket_int+0x88>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d90c      	bls.n	80050d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d108      	bne.n	80050d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050c8:	461a      	mov	r2, r3
 80050ca:	2101      	movs	r1, #1
 80050cc:	f003 f94a 	bl	8008364 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	4f54300a 	.word	0x4f54300a

080050e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	70fb      	strb	r3, [r7, #3]
 80050ec:	4613      	mov	r3, r2
 80050ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050fe:	883b      	ldrh	r3, [r7, #0]
 8005100:	0419      	lsls	r1, r3, #16
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	430a      	orrs	r2, r1
 800510a:	629a      	str	r2, [r3, #40]	; 0x28
 800510c:	e028      	b.n	8005160 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4413      	add	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
 8005120:	e00d      	b.n	800513e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	3340      	adds	r3, #64	; 0x40
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	4413      	add	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	3301      	adds	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	7bfa      	ldrb	r2, [r7, #15]
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	3b01      	subs	r3, #1
 8005144:	429a      	cmp	r2, r3
 8005146:	d3ec      	bcc.n	8005122 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005148:	883b      	ldrh	r3, [r7, #0]
 800514a:	0418      	lsls	r0, r3, #16
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6819      	ldr	r1, [r3, #0]
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	3b01      	subs	r3, #1
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	4302      	orrs	r2, r0
 8005158:	3340      	adds	r3, #64	; 0x40
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	460b      	mov	r3, r1
 8005178:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e267      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d075      	beq.n	80052b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051c6:	4b88      	ldr	r3, [pc, #544]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d00c      	beq.n	80051ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d2:	4b85      	ldr	r3, [pc, #532]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d112      	bne.n	8005204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051de:	4b82      	ldr	r3, [pc, #520]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ea:	d10b      	bne.n	8005204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	4b7e      	ldr	r3, [pc, #504]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05b      	beq.n	80052b0 <HAL_RCC_OscConfig+0x108>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d157      	bne.n	80052b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e242      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x74>
 800520e:	4b76      	ldr	r3, [pc, #472]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a75      	ldr	r2, [pc, #468]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e01d      	b.n	8005258 <HAL_RCC_OscConfig+0xb0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x98>
 8005226:	4b70      	ldr	r3, [pc, #448]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6f      	ldr	r2, [pc, #444]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b6d      	ldr	r3, [pc, #436]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6c      	ldr	r2, [pc, #432]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0xb0>
 8005240:	4b69      	ldr	r3, [pc, #420]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a68      	ldr	r2, [pc, #416]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b66      	ldr	r3, [pc, #408]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a65      	ldr	r2, [pc, #404]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fd fa70 	bl	8002744 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005268:	f7fd fa6c 	bl	8002744 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e207      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	4b5b      	ldr	r3, [pc, #364]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0xc0>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005288:	f7fd fa5c 	bl	8002744 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005290:	f7fd fa58 	bl	8002744 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1f3      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	4b51      	ldr	r3, [pc, #324]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0xe8>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d063      	beq.n	8005386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052be:	4b4a      	ldr	r3, [pc, #296]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ca:	4b47      	ldr	r3, [pc, #284]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d11c      	bne.n	8005310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052d6:	4b44      	ldr	r3, [pc, #272]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e2:	4b41      	ldr	r3, [pc, #260]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_RCC_OscConfig+0x152>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d001      	beq.n	80052fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e1c7      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fa:	4b3b      	ldr	r3, [pc, #236]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4937      	ldr	r1, [pc, #220]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 800530a:	4313      	orrs	r3, r2
 800530c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530e:	e03a      	b.n	8005386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d020      	beq.n	800535a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005318:	4b34      	ldr	r3, [pc, #208]	; (80053ec <HAL_RCC_OscConfig+0x244>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fd fa11 	bl	8002744 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005326:	f7fd fa0d 	bl	8002744 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e1a8      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005344:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4925      	ldr	r1, [pc, #148]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 8005354:	4313      	orrs	r3, r2
 8005356:	600b      	str	r3, [r1, #0]
 8005358:	e015      	b.n	8005386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <HAL_RCC_OscConfig+0x244>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005360:	f7fd f9f0 	bl	8002744 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005368:	f7fd f9ec 	bl	8002744 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e187      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537a:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d036      	beq.n	8005400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539a:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <HAL_RCC_OscConfig+0x248>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a0:	f7fd f9d0 	bl	8002744 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053a8:	f7fd f9cc 	bl	8002744 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e167      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ba:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <HAL_RCC_OscConfig+0x240>)
 80053bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x200>
 80053c6:	e01b      	b.n	8005400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_OscConfig+0x248>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ce:	f7fd f9b9 	bl	8002744 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d4:	e00e      	b.n	80053f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053d6:	f7fd f9b5 	bl	8002744 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d907      	bls.n	80053f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e150      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
 80053e8:	40023800 	.word	0x40023800
 80053ec:	42470000 	.word	0x42470000
 80053f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f4:	4b88      	ldr	r3, [pc, #544]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80053f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ea      	bne.n	80053d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8097 	beq.w	800553c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005412:	4b81      	ldr	r3, [pc, #516]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	4b7d      	ldr	r3, [pc, #500]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a7c      	ldr	r2, [pc, #496]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
 800542e:	4b7a      	ldr	r3, [pc, #488]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005436:	60bb      	str	r3, [r7, #8]
 8005438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543a:	2301      	movs	r3, #1
 800543c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543e:	4b77      	ldr	r3, [pc, #476]	; (800561c <HAL_RCC_OscConfig+0x474>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d118      	bne.n	800547c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800544a:	4b74      	ldr	r3, [pc, #464]	; (800561c <HAL_RCC_OscConfig+0x474>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a73      	ldr	r2, [pc, #460]	; (800561c <HAL_RCC_OscConfig+0x474>)
 8005450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005456:	f7fd f975 	bl	8002744 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800545e:	f7fd f971 	bl	8002744 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e10c      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005470:	4b6a      	ldr	r3, [pc, #424]	; (800561c <HAL_RCC_OscConfig+0x474>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0f0      	beq.n	800545e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d106      	bne.n	8005492 <HAL_RCC_OscConfig+0x2ea>
 8005484:	4b64      	ldr	r3, [pc, #400]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	4a63      	ldr	r2, [pc, #396]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6713      	str	r3, [r2, #112]	; 0x70
 8005490:	e01c      	b.n	80054cc <HAL_RCC_OscConfig+0x324>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b05      	cmp	r3, #5
 8005498:	d10c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x30c>
 800549a:	4b5f      	ldr	r3, [pc, #380]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a5e      	ldr	r2, [pc, #376]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80054a0:	f043 0304 	orr.w	r3, r3, #4
 80054a4:	6713      	str	r3, [r2, #112]	; 0x70
 80054a6:	4b5c      	ldr	r3, [pc, #368]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	4a5b      	ldr	r2, [pc, #364]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	6713      	str	r3, [r2, #112]	; 0x70
 80054b2:	e00b      	b.n	80054cc <HAL_RCC_OscConfig+0x324>
 80054b4:	4b58      	ldr	r3, [pc, #352]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a57      	ldr	r2, [pc, #348]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
 80054c0:	4b55      	ldr	r3, [pc, #340]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	4a54      	ldr	r2, [pc, #336]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80054c6:	f023 0304 	bic.w	r3, r3, #4
 80054ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d015      	beq.n	8005500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d4:	f7fd f936 	bl	8002744 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054da:	e00a      	b.n	80054f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054dc:	f7fd f932 	bl	8002744 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e0cb      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f2:	4b49      	ldr	r3, [pc, #292]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0ee      	beq.n	80054dc <HAL_RCC_OscConfig+0x334>
 80054fe:	e014      	b.n	800552a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005500:	f7fd f920 	bl	8002744 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005506:	e00a      	b.n	800551e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005508:	f7fd f91c 	bl	8002744 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	; 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e0b5      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551e:	4b3e      	ldr	r3, [pc, #248]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ee      	bne.n	8005508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800552a:	7dfb      	ldrb	r3, [r7, #23]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d105      	bne.n	800553c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005530:	4b39      	ldr	r3, [pc, #228]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	4a38      	ldr	r2, [pc, #224]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80a1 	beq.w	8005688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005546:	4b34      	ldr	r3, [pc, #208]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b08      	cmp	r3, #8
 8005550:	d05c      	beq.n	800560c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d141      	bne.n	80055de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555a:	4b31      	ldr	r3, [pc, #196]	; (8005620 <HAL_RCC_OscConfig+0x478>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005560:	f7fd f8f0 	bl	8002744 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005568:	f7fd f8ec 	bl	8002744 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e087      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557a:	4b27      	ldr	r3, [pc, #156]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	019b      	lsls	r3, r3, #6
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	3b01      	subs	r3, #1
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	491b      	ldr	r1, [pc, #108]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <HAL_RCC_OscConfig+0x478>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fd f8c5 	bl	8002744 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055be:	f7fd f8c1 	bl	8002744 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e05c      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d0:	4b11      	ldr	r3, [pc, #68]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCC_OscConfig+0x416>
 80055dc:	e054      	b.n	8005688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <HAL_RCC_OscConfig+0x478>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7fd f8ae 	bl	8002744 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fd f8aa 	bl	8002744 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e045      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_RCC_OscConfig+0x470>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x444>
 800560a:	e03d      	b.n	8005688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d107      	bne.n	8005624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e038      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
 8005618:	40023800 	.word	0x40023800
 800561c:	40007000 	.word	0x40007000
 8005620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <HAL_RCC_OscConfig+0x4ec>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d028      	beq.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800563c:	429a      	cmp	r2, r3
 800563e:	d121      	bne.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d11a      	bne.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005654:	4013      	ands	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800565a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800565c:	4293      	cmp	r3, r2
 800565e:	d111      	bne.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	3b01      	subs	r3, #1
 800566e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005670:	429a      	cmp	r2, r3
 8005672:	d107      	bne.n	8005684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40023800 	.word	0x40023800

08005698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0cc      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056ac:	4b68      	ldr	r3, [pc, #416]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d90c      	bls.n	80056d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b65      	ldr	r3, [pc, #404]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b63      	ldr	r3, [pc, #396]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0b8      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d020      	beq.n	8005722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ec:	4b59      	ldr	r3, [pc, #356]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a58      	ldr	r2, [pc, #352]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005704:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a52      	ldr	r2, [pc, #328]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800570e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005710:	4b50      	ldr	r3, [pc, #320]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	494d      	ldr	r1, [pc, #308]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d044      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005736:	4b47      	ldr	r3, [pc, #284]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d119      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d003      	beq.n	8005756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005752:	2b03      	cmp	r3, #3
 8005754:	d107      	bne.n	8005766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005756:	4b3f      	ldr	r3, [pc, #252]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e06f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005766:	4b3b      	ldr	r3, [pc, #236]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e067      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005776:	4b37      	ldr	r3, [pc, #220]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 0203 	bic.w	r2, r3, #3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4934      	ldr	r1, [pc, #208]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	4313      	orrs	r3, r2
 8005786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005788:	f7fc ffdc 	bl	8002744 <HAL_GetTick>
 800578c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fc ffd8 	bl	8002744 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	; 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e04f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 020c 	and.w	r2, r3, #12
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d1eb      	bne.n	8005790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057b8:	4b25      	ldr	r3, [pc, #148]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d20c      	bcs.n	80057e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c6:	4b22      	ldr	r3, [pc, #136]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b20      	ldr	r3, [pc, #128]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e032      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ec:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4916      	ldr	r1, [pc, #88]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	490e      	ldr	r1, [pc, #56]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800581e:	f000 f821 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8005822:	4602      	mov	r2, r0
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	490a      	ldr	r1, [pc, #40]	; (8005858 <HAL_RCC_ClockConfig+0x1c0>)
 8005830:	5ccb      	ldrb	r3, [r1, r3]
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	4a09      	ldr	r2, [pc, #36]	; (800585c <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_RCC_ClockConfig+0x1c8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fc ff3c 	bl	80026bc <HAL_InitTick>

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40023c00 	.word	0x40023c00
 8005854:	40023800 	.word	0x40023800
 8005858:	0800d52c 	.word	0x0800d52c
 800585c:	20000000 	.word	0x20000000
 8005860:	20000024 	.word	0x20000024

08005864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005868:	b090      	sub	sp, #64	; 0x40
 800586a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	637b      	str	r3, [r7, #52]	; 0x34
 8005870:	2300      	movs	r3, #0
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005874:	2300      	movs	r3, #0
 8005876:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800587c:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d00d      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005888:	2b08      	cmp	r3, #8
 800588a:	f200 80a1 	bhi.w	80059d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x34>
 8005892:	2b04      	cmp	r3, #4
 8005894:	d003      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0x3a>
 8005896:	e09b      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005898:	4b53      	ldr	r3, [pc, #332]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800589a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800589c:	e09b      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800589e:	4b53      	ldr	r3, [pc, #332]	; (80059ec <HAL_RCC_GetSysClockFreq+0x188>)
 80058a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058a2:	e098      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a4:	4b4f      	ldr	r3, [pc, #316]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ae:	4b4d      	ldr	r3, [pc, #308]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d028      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ba:	4b4a      	ldr	r3, [pc, #296]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	099b      	lsrs	r3, r3, #6
 80058c0:	2200      	movs	r2, #0
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	627a      	str	r2, [r7, #36]	; 0x24
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058cc:	2100      	movs	r1, #0
 80058ce:	4b47      	ldr	r3, [pc, #284]	; (80059ec <HAL_RCC_GetSysClockFreq+0x188>)
 80058d0:	fb03 f201 	mul.w	r2, r3, r1
 80058d4:	2300      	movs	r3, #0
 80058d6:	fb00 f303 	mul.w	r3, r0, r3
 80058da:	4413      	add	r3, r2
 80058dc:	4a43      	ldr	r2, [pc, #268]	; (80059ec <HAL_RCC_GetSysClockFreq+0x188>)
 80058de:	fba0 1202 	umull	r1, r2, r0, r2
 80058e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058e4:	460a      	mov	r2, r1
 80058e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80058e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ea:	4413      	add	r3, r2
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	2200      	movs	r2, #0
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	61fa      	str	r2, [r7, #28]
 80058f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058fe:	f7fb f98d 	bl	8000c1c <__aeabi_uldivmod>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4613      	mov	r3, r2
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590a:	e053      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590c:	4b35      	ldr	r3, [pc, #212]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	099b      	lsrs	r3, r3, #6
 8005912:	2200      	movs	r2, #0
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	617a      	str	r2, [r7, #20]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800591e:	f04f 0b00 	mov.w	fp, #0
 8005922:	4652      	mov	r2, sl
 8005924:	465b      	mov	r3, fp
 8005926:	f04f 0000 	mov.w	r0, #0
 800592a:	f04f 0100 	mov.w	r1, #0
 800592e:	0159      	lsls	r1, r3, #5
 8005930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005934:	0150      	lsls	r0, r2, #5
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	ebb2 080a 	subs.w	r8, r2, sl
 800593e:	eb63 090b 	sbc.w	r9, r3, fp
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800594e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005952:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005956:	ebb2 0408 	subs.w	r4, r2, r8
 800595a:	eb63 0509 	sbc.w	r5, r3, r9
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	00eb      	lsls	r3, r5, #3
 8005968:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800596c:	00e2      	lsls	r2, r4, #3
 800596e:	4614      	mov	r4, r2
 8005970:	461d      	mov	r5, r3
 8005972:	eb14 030a 	adds.w	r3, r4, sl
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	eb45 030b 	adc.w	r3, r5, fp
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800598a:	4629      	mov	r1, r5
 800598c:	028b      	lsls	r3, r1, #10
 800598e:	4621      	mov	r1, r4
 8005990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005994:	4621      	mov	r1, r4
 8005996:	028a      	lsls	r2, r1, #10
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	2200      	movs	r2, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	60fa      	str	r2, [r7, #12]
 80059a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a8:	f7fb f938 	bl	8000c1c <__aeabi_uldivmod>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4613      	mov	r3, r2
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	3301      	adds	r3, #1
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80059c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059ce:	e002      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80059d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3740      	adds	r7, #64	; 0x40
 80059dc:	46bd      	mov	sp, r7
 80059de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	00f42400 	.word	0x00f42400
 80059ec:	017d7840 	.word	0x017d7840

080059f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f4:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000000 	.word	0x20000000

08005a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a0c:	f7ff fff0 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a10:	4602      	mov	r2, r0
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	0a9b      	lsrs	r3, r3, #10
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	4903      	ldr	r1, [pc, #12]	; (8005a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a1e:	5ccb      	ldrb	r3, [r1, r3]
 8005a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	0800d53c 	.word	0x0800d53c

08005a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a34:	f7ff ffdc 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	0b5b      	lsrs	r3, r3, #13
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	4903      	ldr	r1, [pc, #12]	; (8005a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40023800 	.word	0x40023800
 8005a54:	0800d53c 	.word	0x0800d53c

08005a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e041      	b.n	8005aee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fb ff64 	bl	800194c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f000 f8f0 	bl	8005c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0ae      	b.n	8005c74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	f200 809f 	bhi.w	8005c64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005c65 	.word	0x08005c65
 8005b34:	08005c65 	.word	0x08005c65
 8005b38:	08005c65 	.word	0x08005c65
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005c65 	.word	0x08005c65
 8005b44:	08005c65 	.word	0x08005c65
 8005b48:	08005c65 	.word	0x08005c65
 8005b4c:	08005be3 	.word	0x08005be3
 8005b50:	08005c65 	.word	0x08005c65
 8005b54:	08005c65 	.word	0x08005c65
 8005b58:	08005c65 	.word	0x08005c65
 8005b5c:	08005c23 	.word	0x08005c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f908 	bl	8005d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	619a      	str	r2, [r3, #24]
      break;
 8005b9e:	e064      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f94e 	bl	8005e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6999      	ldr	r1, [r3, #24]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	021a      	lsls	r2, r3, #8
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	619a      	str	r2, [r3, #24]
      break;
 8005be0:	e043      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f999 	bl	8005f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0208 	orr.w	r2, r2, #8
 8005bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0204 	bic.w	r2, r2, #4
 8005c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	61da      	str	r2, [r3, #28]
      break;
 8005c20:	e023      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 f9e3 	bl	8005ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	61da      	str	r2, [r3, #28]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
      break;
 8005c68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a34      	ldr	r2, [pc, #208]	; (8005d60 <TIM_Base_SetConfig+0xe4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00f      	beq.n	8005cb4 <TIM_Base_SetConfig+0x38>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d00b      	beq.n	8005cb4 <TIM_Base_SetConfig+0x38>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a31      	ldr	r2, [pc, #196]	; (8005d64 <TIM_Base_SetConfig+0xe8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <TIM_Base_SetConfig+0x38>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a30      	ldr	r2, [pc, #192]	; (8005d68 <TIM_Base_SetConfig+0xec>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_Base_SetConfig+0x38>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a2f      	ldr	r2, [pc, #188]	; (8005d6c <TIM_Base_SetConfig+0xf0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d108      	bne.n	8005cc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a25      	ldr	r2, [pc, #148]	; (8005d60 <TIM_Base_SetConfig+0xe4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01b      	beq.n	8005d06 <TIM_Base_SetConfig+0x8a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd4:	d017      	beq.n	8005d06 <TIM_Base_SetConfig+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <TIM_Base_SetConfig+0xe8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <TIM_Base_SetConfig+0x8a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a21      	ldr	r2, [pc, #132]	; (8005d68 <TIM_Base_SetConfig+0xec>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_Base_SetConfig+0x8a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a20      	ldr	r2, [pc, #128]	; (8005d6c <TIM_Base_SetConfig+0xf0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_Base_SetConfig+0x8a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1f      	ldr	r2, [pc, #124]	; (8005d70 <TIM_Base_SetConfig+0xf4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_Base_SetConfig+0x8a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <TIM_Base_SetConfig+0xf8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0x8a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <TIM_Base_SetConfig+0xfc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <TIM_Base_SetConfig+0xe4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d103      	bne.n	8005d4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	615a      	str	r2, [r3, #20]
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800

08005d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f023 0302 	bic.w	r3, r3, #2
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <TIM_OC1_SetConfig+0xc8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d10c      	bne.n	8005df2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 0308 	bic.w	r3, r3, #8
 8005dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f023 0304 	bic.w	r3, r3, #4
 8005df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <TIM_OC1_SetConfig+0xc8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d111      	bne.n	8005e1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	621a      	str	r2, [r3, #32]
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	40010000 	.word	0x40010000

08005e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f023 0210 	bic.w	r2, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0320 	bic.w	r3, r3, #32
 8005e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <TIM_OC2_SetConfig+0xd4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d10d      	bne.n	8005ec4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a15      	ldr	r2, [pc, #84]	; (8005f1c <TIM_OC2_SetConfig+0xd4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d113      	bne.n	8005ef4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000

08005f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0303 	bic.w	r3, r3, #3
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <TIM_OC3_SetConfig+0xd0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d10d      	bne.n	8005f9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <TIM_OC3_SetConfig+0xd0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d113      	bne.n	8005fca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	621a      	str	r2, [r3, #32]
}
 8005fe4:	bf00      	nop
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	40010000 	.word	0x40010000

08005ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800603e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	031b      	lsls	r3, r3, #12
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a10      	ldr	r2, [pc, #64]	; (8006090 <TIM_OC4_SetConfig+0x9c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d109      	bne.n	8006068 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800605a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	019b      	lsls	r3, r3, #6
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40010000 	.word	0x40010000

08006094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e050      	b.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f8:	d013      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a15      	ldr	r2, [pc, #84]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10c      	bne.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4313      	orrs	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40014000 	.word	0x40014000

08006170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e03f      	b.n	8006202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fb fc54 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2224      	movs	r2, #36	; 0x24
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 faa5 	bl	8006704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b20      	cmp	r3, #32
 8006222:	d11d      	bne.n	8006260 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_UART_Receive_DMA+0x26>
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e016      	b.n	8006262 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_UART_Receive_DMA+0x38>
 800623e:	2302      	movs	r3, #2
 8006240:	e00f      	b.n	8006262 <HAL_UART_Receive_DMA+0x58>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	461a      	mov	r2, r3
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f92a 	bl	80064b0 <UART_Start_Receive_DMA>
 800625c:	4603      	mov	r3, r0
 800625e:	e000      	b.n	8006262 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b09c      	sub	sp, #112	; 0x70
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d172      	bne.n	80063c0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80062da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062dc:	2200      	movs	r2, #0
 80062de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006300:	65ba      	str	r2, [r7, #88]	; 0x58
 8006302:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800630e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e5      	bne.n	80062e0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3314      	adds	r3, #20
 800631a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	667b      	str	r3, [r7, #100]	; 0x64
 800632c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3314      	adds	r3, #20
 8006332:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006334:	647a      	str	r2, [r7, #68]	; 0x44
 8006336:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800633a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3314      	adds	r3, #20
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	623b      	str	r3, [r7, #32]
   return(result);
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635e:	663b      	str	r3, [r7, #96]	; 0x60
 8006360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006368:	633a      	str	r2, [r7, #48]	; 0x30
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800636e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800637c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637e:	2220      	movs	r2, #32
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	2b01      	cmp	r3, #1
 800638a:	d119      	bne.n	80063c0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	60fb      	str	r3, [r7, #12]
   return(result);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0310 	bic.w	r3, r3, #16
 80063a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063ac:	61fa      	str	r2, [r7, #28]
 80063ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	69b9      	ldr	r1, [r7, #24]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	617b      	str	r3, [r7, #20]
   return(result);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e5      	bne.n	800638c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d106      	bne.n	80063d6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063cc:	4619      	mov	r1, r3
 80063ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063d0:	f7ff ff69 	bl	80062a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063d4:	e002      	b.n	80063dc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80063d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063d8:	f7ff ff47 	bl	800626a <HAL_UART_RxCpltCallback>
}
 80063dc:	bf00      	nop
 80063de:	3770      	adds	r7, #112	; 0x70
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d108      	bne.n	800640c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	4619      	mov	r1, r3
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff ff4e 	bl	80062a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800640a:	e002      	b.n	8006412 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff ff36 	bl	800627e <HAL_UART_RxHalfCpltCallback>
}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	bf0c      	ite	eq
 800643a:	2301      	moveq	r3, #1
 800643c:	2300      	movne	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b21      	cmp	r3, #33	; 0x21
 800644c:	d108      	bne.n	8006460 <UART_DMAError+0x46>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2200      	movs	r2, #0
 8006458:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800645a:	68b8      	ldr	r0, [r7, #8]
 800645c:	f000 f8c6 	bl	80065ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b22      	cmp	r3, #34	; 0x22
 8006480:	d108      	bne.n	8006494 <UART_DMAError+0x7a>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800648e:	68b8      	ldr	r0, [r7, #8]
 8006490:	f000 f8d4 	bl	800663c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	f043 0210 	orr.w	r2, r3, #16
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064a0:	68b8      	ldr	r0, [r7, #8]
 80064a2:	f7ff fef6 	bl	8006292 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b098      	sub	sp, #96	; 0x60
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	88fa      	ldrh	r2, [r7, #6]
 80064c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2222      	movs	r2, #34	; 0x22
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	4a40      	ldr	r2, [pc, #256]	; (80065e0 <UART_Start_Receive_DMA+0x130>)
 80064de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	4a3f      	ldr	r2, [pc, #252]	; (80065e4 <UART_Start_Receive_DMA+0x134>)
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	4a3e      	ldr	r2, [pc, #248]	; (80065e8 <UART_Start_Receive_DMA+0x138>)
 80064ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	2200      	movs	r2, #0
 80064f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	f7fc fb08 	bl	8002b24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006514:	2300      	movs	r3, #0
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d019      	beq.n	800656e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006550:	65bb      	str	r3, [r7, #88]	; 0x58
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800655a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800655c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e5      	bne.n	800653a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	657b      	str	r3, [r7, #84]	; 0x54
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3314      	adds	r3, #20
 800658c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800658e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e5      	bne.n	800656e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3314      	adds	r3, #20
 80065a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	617b      	str	r3, [r7, #20]
   return(result);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b8:	653b      	str	r3, [r7, #80]	; 0x50
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065c2:	627a      	str	r2, [r7, #36]	; 0x24
 80065c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6a39      	ldr	r1, [r7, #32]
 80065c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3760      	adds	r7, #96	; 0x60
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	080062bf 	.word	0x080062bf
 80065e4:	080063e5 	.word	0x080063e5
 80065e8:	0800641b 	.word	0x0800641b

080065ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b089      	sub	sp, #36	; 0x24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	60bb      	str	r3, [r7, #8]
   return(result);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	61ba      	str	r2, [r7, #24]
 8006616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6979      	ldr	r1, [r7, #20]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	613b      	str	r3, [r7, #16]
   return(result);
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e5      	bne.n	80065f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006630:	bf00      	nop
 8006632:	3724      	adds	r7, #36	; 0x24
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800663c:	b480      	push	{r7}
 800663e:	b095      	sub	sp, #84	; 0x54
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800665a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006664:	643a      	str	r2, [r7, #64]	; 0x40
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800666a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e5      	bne.n	8006644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	61fb      	str	r3, [r7, #28]
   return(result);
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3314      	adds	r3, #20
 8006696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800669e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e5      	bne.n	8006678 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d119      	bne.n	80066e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f023 0310 	bic.w	r3, r3, #16
 80066ca:	647b      	str	r3, [r7, #68]	; 0x44
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d4:	61ba      	str	r2, [r7, #24]
 80066d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	6979      	ldr	r1, [r7, #20]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	613b      	str	r3, [r7, #16]
   return(result);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e5      	bne.n	80066b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066f6:	bf00      	nop
 80066f8:	3754      	adds	r7, #84	; 0x54
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006708:	b0c0      	sub	sp, #256	; 0x100
 800670a:	af00      	add	r7, sp, #0
 800670c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	68d9      	ldr	r1, [r3, #12]
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	ea40 0301 	orr.w	r3, r0, r1
 800672c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800672e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	431a      	orrs	r2, r3
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	431a      	orrs	r2, r3
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800675c:	f021 010c 	bic.w	r1, r1, #12
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800676a:	430b      	orrs	r3, r1
 800676c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800676e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800677a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677e:	6999      	ldr	r1, [r3, #24]
 8006780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	ea40 0301 	orr.w	r3, r0, r1
 800678a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b8f      	ldr	r3, [pc, #572]	; (80069d0 <UART_SetConfig+0x2cc>)
 8006794:	429a      	cmp	r2, r3
 8006796:	d005      	beq.n	80067a4 <UART_SetConfig+0xa0>
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b8d      	ldr	r3, [pc, #564]	; (80069d4 <UART_SetConfig+0x2d0>)
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d104      	bne.n	80067ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067a4:	f7ff f944 	bl	8005a30 <HAL_RCC_GetPCLK2Freq>
 80067a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067ac:	e003      	b.n	80067b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067ae:	f7ff f92b 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 80067b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c0:	f040 810c 	bne.w	80069dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067d6:	4622      	mov	r2, r4
 80067d8:	462b      	mov	r3, r5
 80067da:	1891      	adds	r1, r2, r2
 80067dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80067de:	415b      	adcs	r3, r3
 80067e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067e6:	4621      	mov	r1, r4
 80067e8:	eb12 0801 	adds.w	r8, r2, r1
 80067ec:	4629      	mov	r1, r5
 80067ee:	eb43 0901 	adc.w	r9, r3, r1
 80067f2:	f04f 0200 	mov.w	r2, #0
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006806:	4690      	mov	r8, r2
 8006808:	4699      	mov	r9, r3
 800680a:	4623      	mov	r3, r4
 800680c:	eb18 0303 	adds.w	r3, r8, r3
 8006810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006814:	462b      	mov	r3, r5
 8006816:	eb49 0303 	adc.w	r3, r9, r3
 800681a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800682a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800682e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006832:	460b      	mov	r3, r1
 8006834:	18db      	adds	r3, r3, r3
 8006836:	653b      	str	r3, [r7, #80]	; 0x50
 8006838:	4613      	mov	r3, r2
 800683a:	eb42 0303 	adc.w	r3, r2, r3
 800683e:	657b      	str	r3, [r7, #84]	; 0x54
 8006840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006844:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006848:	f7fa f9e8 	bl	8000c1c <__aeabi_uldivmod>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4b61      	ldr	r3, [pc, #388]	; (80069d8 <UART_SetConfig+0x2d4>)
 8006852:	fba3 2302 	umull	r2, r3, r3, r2
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	011c      	lsls	r4, r3, #4
 800685a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800685e:	2200      	movs	r2, #0
 8006860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006864:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006868:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800686c:	4642      	mov	r2, r8
 800686e:	464b      	mov	r3, r9
 8006870:	1891      	adds	r1, r2, r2
 8006872:	64b9      	str	r1, [r7, #72]	; 0x48
 8006874:	415b      	adcs	r3, r3
 8006876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800687c:	4641      	mov	r1, r8
 800687e:	eb12 0a01 	adds.w	sl, r2, r1
 8006882:	4649      	mov	r1, r9
 8006884:	eb43 0b01 	adc.w	fp, r3, r1
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006894:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800689c:	4692      	mov	sl, r2
 800689e:	469b      	mov	fp, r3
 80068a0:	4643      	mov	r3, r8
 80068a2:	eb1a 0303 	adds.w	r3, sl, r3
 80068a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068aa:	464b      	mov	r3, r9
 80068ac:	eb4b 0303 	adc.w	r3, fp, r3
 80068b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068c8:	460b      	mov	r3, r1
 80068ca:	18db      	adds	r3, r3, r3
 80068cc:	643b      	str	r3, [r7, #64]	; 0x40
 80068ce:	4613      	mov	r3, r2
 80068d0:	eb42 0303 	adc.w	r3, r2, r3
 80068d4:	647b      	str	r3, [r7, #68]	; 0x44
 80068d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068de:	f7fa f99d 	bl	8000c1c <__aeabi_uldivmod>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	4b3b      	ldr	r3, [pc, #236]	; (80069d8 <UART_SetConfig+0x2d4>)
 80068ea:	fba3 2301 	umull	r2, r3, r3, r1
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	2264      	movs	r2, #100	; 0x64
 80068f2:	fb02 f303 	mul.w	r3, r2, r3
 80068f6:	1acb      	subs	r3, r1, r3
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068fe:	4b36      	ldr	r3, [pc, #216]	; (80069d8 <UART_SetConfig+0x2d4>)
 8006900:	fba3 2302 	umull	r2, r3, r3, r2
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800690c:	441c      	add	r4, r3
 800690e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006912:	2200      	movs	r2, #0
 8006914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006918:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800691c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006920:	4642      	mov	r2, r8
 8006922:	464b      	mov	r3, r9
 8006924:	1891      	adds	r1, r2, r2
 8006926:	63b9      	str	r1, [r7, #56]	; 0x38
 8006928:	415b      	adcs	r3, r3
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006930:	4641      	mov	r1, r8
 8006932:	1851      	adds	r1, r2, r1
 8006934:	6339      	str	r1, [r7, #48]	; 0x30
 8006936:	4649      	mov	r1, r9
 8006938:	414b      	adcs	r3, r1
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006948:	4659      	mov	r1, fp
 800694a:	00cb      	lsls	r3, r1, #3
 800694c:	4651      	mov	r1, sl
 800694e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006952:	4651      	mov	r1, sl
 8006954:	00ca      	lsls	r2, r1, #3
 8006956:	4610      	mov	r0, r2
 8006958:	4619      	mov	r1, r3
 800695a:	4603      	mov	r3, r0
 800695c:	4642      	mov	r2, r8
 800695e:	189b      	adds	r3, r3, r2
 8006960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006964:	464b      	mov	r3, r9
 8006966:	460a      	mov	r2, r1
 8006968:	eb42 0303 	adc.w	r3, r2, r3
 800696c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800697c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006984:	460b      	mov	r3, r1
 8006986:	18db      	adds	r3, r3, r3
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28
 800698a:	4613      	mov	r3, r2
 800698c:	eb42 0303 	adc.w	r3, r2, r3
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006996:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800699a:	f7fa f93f 	bl	8000c1c <__aeabi_uldivmod>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4b0d      	ldr	r3, [pc, #52]	; (80069d8 <UART_SetConfig+0x2d4>)
 80069a4:	fba3 1302 	umull	r1, r3, r3, r2
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	2164      	movs	r1, #100	; 0x64
 80069ac:	fb01 f303 	mul.w	r3, r1, r3
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	3332      	adds	r3, #50	; 0x32
 80069b6:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <UART_SetConfig+0x2d4>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	f003 0207 	and.w	r2, r3, #7
 80069c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4422      	add	r2, r4
 80069ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069cc:	e106      	b.n	8006bdc <UART_SetConfig+0x4d8>
 80069ce:	bf00      	nop
 80069d0:	40011000 	.word	0x40011000
 80069d4:	40011400 	.word	0x40011400
 80069d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069ee:	4642      	mov	r2, r8
 80069f0:	464b      	mov	r3, r9
 80069f2:	1891      	adds	r1, r2, r2
 80069f4:	6239      	str	r1, [r7, #32]
 80069f6:	415b      	adcs	r3, r3
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
 80069fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069fe:	4641      	mov	r1, r8
 8006a00:	1854      	adds	r4, r2, r1
 8006a02:	4649      	mov	r1, r9
 8006a04:	eb43 0501 	adc.w	r5, r3, r1
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	00eb      	lsls	r3, r5, #3
 8006a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a16:	00e2      	lsls	r2, r4, #3
 8006a18:	4614      	mov	r4, r2
 8006a1a:	461d      	mov	r5, r3
 8006a1c:	4643      	mov	r3, r8
 8006a1e:	18e3      	adds	r3, r4, r3
 8006a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a24:	464b      	mov	r3, r9
 8006a26:	eb45 0303 	adc.w	r3, r5, r3
 8006a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	f04f 0300 	mov.w	r3, #0
 8006a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	008b      	lsls	r3, r1, #2
 8006a4e:	4621      	mov	r1, r4
 8006a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a54:	4621      	mov	r1, r4
 8006a56:	008a      	lsls	r2, r1, #2
 8006a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a5c:	f7fa f8de 	bl	8000c1c <__aeabi_uldivmod>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4b60      	ldr	r3, [pc, #384]	; (8006be8 <UART_SetConfig+0x4e4>)
 8006a66:	fba3 2302 	umull	r2, r3, r3, r2
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	011c      	lsls	r4, r3, #4
 8006a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	1891      	adds	r1, r2, r2
 8006a86:	61b9      	str	r1, [r7, #24]
 8006a88:	415b      	adcs	r3, r3
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a90:	4641      	mov	r1, r8
 8006a92:	1851      	adds	r1, r2, r1
 8006a94:	6139      	str	r1, [r7, #16]
 8006a96:	4649      	mov	r1, r9
 8006a98:	414b      	adcs	r3, r1
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	00cb      	lsls	r3, r1, #3
 8006aac:	4651      	mov	r1, sl
 8006aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ab2:	4651      	mov	r1, sl
 8006ab4:	00ca      	lsls	r2, r1, #3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	4642      	mov	r2, r8
 8006abe:	189b      	adds	r3, r3, r2
 8006ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	460a      	mov	r2, r1
 8006ac8:	eb42 0303 	adc.w	r3, r2, r3
 8006acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ada:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ae8:	4649      	mov	r1, r9
 8006aea:	008b      	lsls	r3, r1, #2
 8006aec:	4641      	mov	r1, r8
 8006aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006af2:	4641      	mov	r1, r8
 8006af4:	008a      	lsls	r2, r1, #2
 8006af6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006afa:	f7fa f88f 	bl	8000c1c <__aeabi_uldivmod>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	4b38      	ldr	r3, [pc, #224]	; (8006be8 <UART_SetConfig+0x4e4>)
 8006b06:	fba3 2301 	umull	r2, r3, r3, r1
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	2264      	movs	r2, #100	; 0x64
 8006b0e:	fb02 f303 	mul.w	r3, r2, r3
 8006b12:	1acb      	subs	r3, r1, r3
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	3332      	adds	r3, #50	; 0x32
 8006b18:	4a33      	ldr	r2, [pc, #204]	; (8006be8 <UART_SetConfig+0x4e4>)
 8006b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b24:	441c      	add	r4, r3
 8006b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	673b      	str	r3, [r7, #112]	; 0x70
 8006b2e:	677a      	str	r2, [r7, #116]	; 0x74
 8006b30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b34:	4642      	mov	r2, r8
 8006b36:	464b      	mov	r3, r9
 8006b38:	1891      	adds	r1, r2, r2
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	415b      	adcs	r3, r3
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b44:	4641      	mov	r1, r8
 8006b46:	1851      	adds	r1, r2, r1
 8006b48:	6039      	str	r1, [r7, #0]
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	414b      	adcs	r3, r1
 8006b4e:	607b      	str	r3, [r7, #4]
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b5c:	4659      	mov	r1, fp
 8006b5e:	00cb      	lsls	r3, r1, #3
 8006b60:	4651      	mov	r1, sl
 8006b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b66:	4651      	mov	r1, sl
 8006b68:	00ca      	lsls	r2, r1, #3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4642      	mov	r2, r8
 8006b72:	189b      	adds	r3, r3, r2
 8006b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b76:	464b      	mov	r3, r9
 8006b78:	460a      	mov	r2, r1
 8006b7a:	eb42 0303 	adc.w	r3, r2, r3
 8006b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	663b      	str	r3, [r7, #96]	; 0x60
 8006b8a:	667a      	str	r2, [r7, #100]	; 0x64
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b98:	4649      	mov	r1, r9
 8006b9a:	008b      	lsls	r3, r1, #2
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ba2:	4641      	mov	r1, r8
 8006ba4:	008a      	lsls	r2, r1, #2
 8006ba6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006baa:	f7fa f837 	bl	8000c1c <__aeabi_uldivmod>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <UART_SetConfig+0x4e4>)
 8006bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	2164      	movs	r1, #100	; 0x64
 8006bbc:	fb01 f303 	mul.w	r3, r1, r3
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	3332      	adds	r3, #50	; 0x32
 8006bc6:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <UART_SetConfig+0x4e4>)
 8006bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	f003 020f 	and.w	r2, r3, #15
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4422      	add	r2, r4
 8006bda:	609a      	str	r2, [r3, #8]
}
 8006bdc:	bf00      	nop
 8006bde:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006be2:	46bd      	mov	sp, r7
 8006be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006be8:	51eb851f 	.word	0x51eb851f

08006bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 001c 	add.w	r0, r7, #28
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d122      	bne.n	8006c4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d105      	bne.n	8006c3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fbee 	bl	8008420 <USB_CoreReset>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	e01a      	b.n	8006c80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fbe2 	bl	8008420 <USB_CoreReset>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
 8006c72:	e005      	b.n	8006c80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d10b      	bne.n	8006c9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f043 0206 	orr.w	r2, r3, #6
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006caa:	b004      	add	sp, #16
 8006cac:	4770      	bx	lr
	...

08006cb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d165      	bne.n	8006d90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4a41      	ldr	r2, [pc, #260]	; (8006dcc <USB_SetTurnaroundTime+0x11c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d906      	bls.n	8006cda <USB_SetTurnaroundTime+0x2a>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4a40      	ldr	r2, [pc, #256]	; (8006dd0 <USB_SetTurnaroundTime+0x120>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d202      	bcs.n	8006cda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cd4:	230f      	movs	r3, #15
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e062      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4a3c      	ldr	r2, [pc, #240]	; (8006dd0 <USB_SetTurnaroundTime+0x120>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d306      	bcc.n	8006cf0 <USB_SetTurnaroundTime+0x40>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <USB_SetTurnaroundTime+0x124>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d202      	bcs.n	8006cf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cea:	230e      	movs	r3, #14
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e057      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4a38      	ldr	r2, [pc, #224]	; (8006dd4 <USB_SetTurnaroundTime+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d306      	bcc.n	8006d06 <USB_SetTurnaroundTime+0x56>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4a37      	ldr	r2, [pc, #220]	; (8006dd8 <USB_SetTurnaroundTime+0x128>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d202      	bcs.n	8006d06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d00:	230d      	movs	r3, #13
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e04c      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4a33      	ldr	r2, [pc, #204]	; (8006dd8 <USB_SetTurnaroundTime+0x128>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d306      	bcc.n	8006d1c <USB_SetTurnaroundTime+0x6c>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	4a32      	ldr	r2, [pc, #200]	; (8006ddc <USB_SetTurnaroundTime+0x12c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d802      	bhi.n	8006d1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d16:	230c      	movs	r3, #12
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	e041      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4a2f      	ldr	r2, [pc, #188]	; (8006ddc <USB_SetTurnaroundTime+0x12c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d906      	bls.n	8006d32 <USB_SetTurnaroundTime+0x82>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4a2e      	ldr	r2, [pc, #184]	; (8006de0 <USB_SetTurnaroundTime+0x130>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d802      	bhi.n	8006d32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d2c:	230b      	movs	r3, #11
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e036      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <USB_SetTurnaroundTime+0x130>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d906      	bls.n	8006d48 <USB_SetTurnaroundTime+0x98>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <USB_SetTurnaroundTime+0x134>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d802      	bhi.n	8006d48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d42:	230a      	movs	r3, #10
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e02b      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <USB_SetTurnaroundTime+0x134>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d906      	bls.n	8006d5e <USB_SetTurnaroundTime+0xae>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a25      	ldr	r2, [pc, #148]	; (8006de8 <USB_SetTurnaroundTime+0x138>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d202      	bcs.n	8006d5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d58:	2309      	movs	r3, #9
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e020      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a21      	ldr	r2, [pc, #132]	; (8006de8 <USB_SetTurnaroundTime+0x138>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d306      	bcc.n	8006d74 <USB_SetTurnaroundTime+0xc4>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4a20      	ldr	r2, [pc, #128]	; (8006dec <USB_SetTurnaroundTime+0x13c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d802      	bhi.n	8006d74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d6e:	2308      	movs	r3, #8
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e015      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <USB_SetTurnaroundTime+0x13c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d906      	bls.n	8006d8a <USB_SetTurnaroundTime+0xda>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4a1c      	ldr	r2, [pc, #112]	; (8006df0 <USB_SetTurnaroundTime+0x140>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d202      	bcs.n	8006d8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d84:	2307      	movs	r3, #7
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e00a      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d8a:	2306      	movs	r3, #6
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e007      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d96:	2309      	movs	r3, #9
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e001      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d9c:	2309      	movs	r3, #9
 8006d9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006db8:	431a      	orrs	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	00d8acbf 	.word	0x00d8acbf
 8006dd0:	00e4e1c0 	.word	0x00e4e1c0
 8006dd4:	00f42400 	.word	0x00f42400
 8006dd8:	01067380 	.word	0x01067380
 8006ddc:	011a499f 	.word	0x011a499f
 8006de0:	01312cff 	.word	0x01312cff
 8006de4:	014ca43f 	.word	0x014ca43f
 8006de8:	016e3600 	.word	0x016e3600
 8006dec:	01a6ab1f 	.word	0x01a6ab1f
 8006df0:	01e84800 	.word	0x01e84800

08006df4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f043 0201 	orr.w	r2, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f023 0201 	bic.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e54:	78fb      	ldrb	r3, [r7, #3]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d115      	bne.n	8006e86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e66:	2001      	movs	r0, #1
 8006e68:	f7fb fc78 	bl	800275c <HAL_Delay>
      ms++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fa45 	bl	8008302 <USB_GetMode>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d01e      	beq.n	8006ebc <USB_SetCurrentMode+0x84>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b31      	cmp	r3, #49	; 0x31
 8006e82:	d9f0      	bls.n	8006e66 <USB_SetCurrentMode+0x2e>
 8006e84:	e01a      	b.n	8006ebc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d115      	bne.n	8006eb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e98:	2001      	movs	r0, #1
 8006e9a:	f7fb fc5f 	bl	800275c <HAL_Delay>
      ms++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fa2c 	bl	8008302 <USB_GetMode>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <USB_SetCurrentMode+0x84>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b31      	cmp	r3, #49	; 0x31
 8006eb4:	d9f0      	bls.n	8006e98 <USB_SetCurrentMode+0x60>
 8006eb6:	e001      	b.n	8006ebc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e005      	b.n	8006ec8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b32      	cmp	r3, #50	; 0x32
 8006ec0:	d101      	bne.n	8006ec6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	e009      	b.n	8006f04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3340      	adds	r3, #64	; 0x40
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	3301      	adds	r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b0e      	cmp	r3, #14
 8006f08:	d9f2      	bls.n	8006ef0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d11c      	bne.n	8006f4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f1e:	f043 0302 	orr.w	r3, r3, #2
 8006f22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
 8006f48:	e00b      	b.n	8006f62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f74:	4619      	mov	r1, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	680b      	ldr	r3, [r1, #0]
 8006f80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d10c      	bne.n	8006fa2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f8e:	2100      	movs	r1, #0
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f965 	bl	8007260 <USB_SetDevSpeed>
 8006f96:	e008      	b.n	8006faa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f98:	2101      	movs	r1, #1
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f960 	bl	8007260 <USB_SetDevSpeed>
 8006fa0:	e003      	b.n	8006faa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fa2:	2103      	movs	r1, #3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f95b 	bl	8007260 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006faa:	2110      	movs	r1, #16
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f8f3 	bl	8007198 <USB_FlushTxFifo>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f91f 	bl	8007200 <USB_FlushRxFifo>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fde:	461a      	mov	r2, r3
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fea:	461a      	mov	r2, r3
 8006fec:	2300      	movs	r3, #0
 8006fee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	e043      	b.n	800707e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800700c:	d118      	bne.n	8007040 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10a      	bne.n	800702a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	461a      	mov	r2, r3
 8007022:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	e013      	b.n	8007052 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	461a      	mov	r2, r3
 8007038:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	e008      	b.n	8007052 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704c:	461a      	mov	r2, r3
 800704e:	2300      	movs	r3, #0
 8007050:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	461a      	mov	r2, r3
 8007060:	2300      	movs	r3, #0
 8007062:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	461a      	mov	r2, r3
 8007072:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007076:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	3301      	adds	r3, #1
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	429a      	cmp	r2, r3
 8007084:	d3b7      	bcc.n	8006ff6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007086:	2300      	movs	r3, #0
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	e043      	b.n	8007114 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800709e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a2:	d118      	bne.n	80070d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b6:	461a      	mov	r2, r3
 80070b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	e013      	b.n	80070e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	461a      	mov	r2, r3
 80070ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	e008      	b.n	80070e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e2:	461a      	mov	r2, r3
 80070e4:	2300      	movs	r3, #0
 80070e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	461a      	mov	r2, r3
 80070f6:	2300      	movs	r3, #0
 80070f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007106:	461a      	mov	r2, r3
 8007108:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800710c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3301      	adds	r3, #1
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	429a      	cmp	r2, r3
 800711a:	d3b7      	bcc.n	800708c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800712a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800712e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800713c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	2b00      	cmp	r3, #0
 8007142:	d105      	bne.n	8007150 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f043 0210 	orr.w	r2, r3, #16
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <USB_DevInit+0x2c4>)
 8007156:	4313      	orrs	r3, r2
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	f043 0208 	orr.w	r2, r3, #8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800716e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d107      	bne.n	8007184 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800717c:	f043 0304 	orr.w	r3, r3, #4
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007190:	b004      	add	sp, #16
 8007192:	4770      	bx	lr
 8007194:	803c3800 	.word	0x803c3800

08007198 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a13      	ldr	r2, [pc, #76]	; (80071fc <USB_FlushTxFifo+0x64>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d901      	bls.n	80071b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e01b      	b.n	80071f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	daf2      	bge.n	80071a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	019b      	lsls	r3, r3, #6
 80071c8:	f043 0220 	orr.w	r2, r3, #32
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a08      	ldr	r2, [pc, #32]	; (80071fc <USB_FlushTxFifo+0x64>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d901      	bls.n	80071e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e006      	b.n	80071f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d0f0      	beq.n	80071d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	00030d40 	.word	0x00030d40

08007200 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a11      	ldr	r2, [pc, #68]	; (800725c <USB_FlushRxFifo+0x5c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d901      	bls.n	800721e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e018      	b.n	8007250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	daf2      	bge.n	800720c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2210      	movs	r2, #16
 800722e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <USB_FlushRxFifo+0x5c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d901      	bls.n	8007242 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e006      	b.n	8007250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b10      	cmp	r3, #16
 800724c:	d0f0      	beq.n	8007230 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	00030d40 	.word	0x00030d40

08007260 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007280:	4313      	orrs	r3, r2
 8007282:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007292:	b480      	push	{r7}
 8007294:	b087      	sub	sp, #28
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0306 	and.w	r3, r3, #6
 80072aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]
 80072b6:	e00a      	b.n	80072ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d002      	beq.n	80072c4 <USB_GetDevSpeed+0x32>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	d102      	bne.n	80072ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072c4:	2302      	movs	r3, #2
 80072c6:	75fb      	strb	r3, [r7, #23]
 80072c8:	e001      	b.n	80072ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072ca:	230f      	movs	r3, #15
 80072cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d13a      	bne.n	800736e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 030f 	and.w	r3, r3, #15
 8007308:	2101      	movs	r1, #1
 800730a:	fa01 f303 	lsl.w	r3, r1, r3
 800730e:	b29b      	uxth	r3, r3
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007316:	4313      	orrs	r3, r2
 8007318:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d155      	bne.n	80073dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	791b      	ldrb	r3, [r3, #4]
 800734a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800734c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	059b      	lsls	r3, r3, #22
 8007352:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007354:	4313      	orrs	r3, r2
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	0151      	lsls	r1, r2, #5
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	440a      	add	r2, r1
 800735e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	e036      	b.n	80073dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007374:	69da      	ldr	r2, [r3, #28]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	2101      	movs	r1, #1
 8007380:	fa01 f303 	lsl.w	r3, r1, r3
 8007384:	041b      	lsls	r3, r3, #16
 8007386:	68f9      	ldr	r1, [r7, #12]
 8007388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800738c:	4313      	orrs	r3, r2
 800738e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d11a      	bne.n	80073dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	791b      	ldrb	r3, [r3, #4]
 80073c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073c2:	430b      	orrs	r3, r1
 80073c4:	4313      	orrs	r3, r2
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d161      	bne.n	80074cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800741a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800741e:	d11f      	bne.n	8007460 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800743e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	0151      	lsls	r1, r2, #5
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	440a      	add	r2, r1
 8007456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800745e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	2101      	movs	r1, #1
 8007472:	fa01 f303 	lsl.w	r3, r1, r3
 8007476:	b29b      	uxth	r3, r3
 8007478:	43db      	mvns	r3, r3
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007480:	4013      	ands	r3, r2
 8007482:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	2101      	movs	r1, #1
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	b29b      	uxth	r3, r3
 800749c:	43db      	mvns	r3, r3
 800749e:	68f9      	ldr	r1, [r7, #12]
 80074a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074a4:	4013      	ands	r3, r2
 80074a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	0159      	lsls	r1, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	440b      	add	r3, r1
 80074be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c2:	4619      	mov	r1, r3
 80074c4:	4b35      	ldr	r3, [pc, #212]	; (800759c <USB_DeactivateEndpoint+0x1b0>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	600b      	str	r3, [r1, #0]
 80074ca:	e060      	b.n	800758e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074e2:	d11f      	bne.n	8007524 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007502:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007522:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	f003 030f 	and.w	r3, r3, #15
 8007534:	2101      	movs	r1, #1
 8007536:	fa01 f303 	lsl.w	r3, r1, r3
 800753a:	041b      	lsls	r3, r3, #16
 800753c:	43db      	mvns	r3, r3
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007544:	4013      	ands	r3, r2
 8007546:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	2101      	movs	r1, #1
 800755a:	fa01 f303 	lsl.w	r3, r1, r3
 800755e:	041b      	lsls	r3, r3, #16
 8007560:	43db      	mvns	r3, r3
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007568:	4013      	ands	r3, r2
 800756a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	0159      	lsls	r1, r3, #5
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	440b      	add	r3, r1
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	4619      	mov	r1, r3
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <USB_DeactivateEndpoint+0x1b4>)
 800758a:	4013      	ands	r3, r2
 800758c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	ec337800 	.word	0xec337800
 80075a0:	eff37800 	.word	0xeff37800

080075a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	; 0x28
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f040 815c 	bne.w	800787e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d132      	bne.n	8007634 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	440a      	add	r2, r1
 8007628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762c:	0cdb      	lsrs	r3, r3, #19
 800762e:	04db      	lsls	r3, r3, #19
 8007630:	6113      	str	r3, [r2, #16]
 8007632:	e074      	b.n	800771e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764e:	0cdb      	lsrs	r3, r3, #19
 8007650:	04db      	lsls	r3, r3, #19
 8007652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007672:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007676:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6999      	ldr	r1, [r3, #24]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	440b      	add	r3, r1
 8007690:	1e59      	subs	r1, r3, #1
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	fbb1 f3f3 	udiv	r3, r1, r3
 800769a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800769c:	4b9d      	ldr	r3, [pc, #628]	; (8007914 <USB_EPStartXfer+0x370>)
 800769e:	400b      	ands	r3, r1
 80076a0:	69b9      	ldr	r1, [r7, #24]
 80076a2:	0148      	lsls	r0, r1, #5
 80076a4:	69f9      	ldr	r1, [r7, #28]
 80076a6:	4401      	add	r1, r0
 80076a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076ac:	4313      	orrs	r3, r2
 80076ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076bc:	691a      	ldr	r2, [r3, #16]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c6:	69b9      	ldr	r1, [r7, #24]
 80076c8:	0148      	lsls	r0, r1, #5
 80076ca:	69f9      	ldr	r1, [r7, #28]
 80076cc:	4401      	add	r1, r0
 80076ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076d2:	4313      	orrs	r3, r2
 80076d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d11f      	bne.n	800771e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80076fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800771c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d14b      	bne.n	80077bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d009      	beq.n	8007740 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007738:	461a      	mov	r2, r3
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	791b      	ldrb	r3, [r3, #4]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d128      	bne.n	800779a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d110      	bne.n	800777a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	0151      	lsls	r1, r2, #5
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	440a      	add	r2, r1
 800776e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	e00f      	b.n	800779a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	440a      	add	r2, r1
 8007790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007798:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	e133      	b.n	8007a24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d015      	beq.n	8007810 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 811b 	beq.w	8007a24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	2101      	movs	r1, #1
 8007800:	fa01 f303 	lsl.w	r3, r1, r3
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780a:	4313      	orrs	r3, r2
 800780c:	634b      	str	r3, [r1, #52]	; 0x34
 800780e:	e109      	b.n	8007a24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781c:	2b00      	cmp	r3, #0
 800781e:	d110      	bne.n	8007842 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	440a      	add	r2, r1
 8007836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	e00f      	b.n	8007862 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007860:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6919      	ldr	r1, [r3, #16]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	b298      	uxth	r0, r3
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fade 	bl	8007e38 <USB_WritePacket>
 800787c:	e0d2      	b.n	8007a24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	0151      	lsls	r1, r2, #5
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	440a      	add	r2, r1
 8007894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007898:	0cdb      	lsrs	r3, r3, #19
 800789a:	04db      	lsls	r3, r3, #19
 800789c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	0151      	lsls	r1, r2, #5
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	440a      	add	r2, r1
 80078b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d126      	bne.n	8007918 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078e0:	69b9      	ldr	r1, [r7, #24]
 80078e2:	0148      	lsls	r0, r1, #5
 80078e4:	69f9      	ldr	r1, [r7, #28]
 80078e6:	4401      	add	r1, r0
 80078e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078ec:	4313      	orrs	r3, r2
 80078ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	0151      	lsls	r1, r2, #5
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	440a      	add	r2, r1
 8007906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800790a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800790e:	6113      	str	r3, [r2, #16]
 8007910:	e03a      	b.n	8007988 <USB_EPStartXfer+0x3e4>
 8007912:	bf00      	nop
 8007914:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	4413      	add	r3, r2
 8007922:	1e5a      	subs	r2, r3, #1
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	8afa      	ldrh	r2, [r7, #22]
 8007934:	fb03 f202 	mul.w	r2, r3, r2
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	8afb      	ldrh	r3, [r7, #22]
 800794c:	04d9      	lsls	r1, r3, #19
 800794e:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <USB_EPStartXfer+0x48c>)
 8007950:	400b      	ands	r3, r1
 8007952:	69b9      	ldr	r1, [r7, #24]
 8007954:	0148      	lsls	r0, r1, #5
 8007956:	69f9      	ldr	r1, [r7, #28]
 8007958:	4401      	add	r1, r0
 800795a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800795e:	4313      	orrs	r3, r2
 8007960:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007978:	69b9      	ldr	r1, [r7, #24]
 800797a:	0148      	lsls	r0, r1, #5
 800797c:	69f9      	ldr	r1, [r7, #28]
 800797e:	4401      	add	r1, r0
 8007980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007984:	4313      	orrs	r3, r2
 8007986:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d10d      	bne.n	80079aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6919      	ldr	r1, [r3, #16]
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	460a      	mov	r2, r1
 80079a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	791b      	ldrb	r3, [r3, #4]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d128      	bne.n	8007a04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d110      	bne.n	80079e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	0151      	lsls	r1, r2, #5
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	440a      	add	r2, r1
 80079d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	e00f      	b.n	8007a04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	0151      	lsls	r1, r2, #5
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	440a      	add	r2, r1
 8007a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3720      	adds	r7, #32
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	1ff80000 	.word	0x1ff80000

08007a34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	f040 80ce 	bne.w	8007bf2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d132      	bne.n	8007ac4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	0151      	lsls	r1, r2, #5
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	440a      	add	r2, r1
 8007a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007abc:	0cdb      	lsrs	r3, r3, #19
 8007abe:	04db      	lsls	r3, r3, #19
 8007ac0:	6113      	str	r3, [r2, #16]
 8007ac2:	e04e      	b.n	8007b62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ade:	0cdb      	lsrs	r3, r3, #19
 8007ae0:	04db      	lsls	r3, r3, #19
 8007ae2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	0151      	lsls	r1, r2, #5
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	440a      	add	r2, r1
 8007afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d903      	bls.n	8007b1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	0151      	lsls	r1, r2, #5
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	440a      	add	r2, r1
 8007b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	691a      	ldr	r2, [r3, #16]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b52:	6939      	ldr	r1, [r7, #16]
 8007b54:	0148      	lsls	r0, r1, #5
 8007b56:	6979      	ldr	r1, [r7, #20]
 8007b58:	4401      	add	r1, r0
 8007b5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d11e      	bne.n	8007ba6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	e097      	b.n	8007cd6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8083 	beq.w	8007cd6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	2101      	movs	r1, #1
 8007be2:	fa01 f303 	lsl.w	r3, r1, r3
 8007be6:	6979      	ldr	r1, [r7, #20]
 8007be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bec:	4313      	orrs	r3, r2
 8007bee:	634b      	str	r3, [r1, #52]	; 0x34
 8007bf0:	e071      	b.n	8007cd6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	0151      	lsls	r1, r2, #5
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	440a      	add	r2, r1
 8007c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0c:	0cdb      	lsrs	r3, r3, #19
 8007c0e:	04db      	lsls	r3, r3, #19
 8007c10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7a:	691a      	ldr	r2, [r3, #16]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c84:	6939      	ldr	r1, [r7, #16]
 8007c86:	0148      	lsls	r0, r1, #5
 8007c88:	6979      	ldr	r1, [r7, #20]
 8007c8a:	4401      	add	r1, r0
 8007c8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c90:	4313      	orrs	r3, r2
 8007c92:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c94:	79fb      	ldrb	r3, [r7, #7]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d10d      	bne.n	8007cb6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d009      	beq.n	8007cb6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6919      	ldr	r1, [r3, #16]
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb2:	460a      	mov	r2, r1
 8007cb4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d14a      	bne.n	8007d98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d1a:	f040 8086 	bne.w	8007e2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	7812      	ldrb	r2, [r2, #0]
 8007d32:	0151      	lsls	r1, r2, #5
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	440a      	add	r2, r1
 8007d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	7812      	ldrb	r2, [r2, #0]
 8007d56:	0151      	lsls	r1, r2, #5
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	440a      	add	r2, r1
 8007d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d902      	bls.n	8007d7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]
          break;
 8007d7a:	e056      	b.n	8007e2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d94:	d0e7      	beq.n	8007d66 <USB_EPStopXfer+0x82>
 8007d96:	e048      	b.n	8007e2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007db0:	d13b      	bne.n	8007e2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007dd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	0151      	lsls	r1, r2, #5
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	440a      	add	r2, r1
 8007df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d902      	bls.n	8007e10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e0e:	e00c      	b.n	8007e2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e28:	d0e7      	beq.n	8007dfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	371c      	adds	r7, #28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b089      	sub	sp, #36	; 0x24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	460b      	mov	r3, r1
 8007e48:	71fb      	strb	r3, [r7, #7]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d123      	bne.n	8007ea6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	3303      	adds	r3, #3
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e018      	b.n	8007e9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	031a      	lsls	r2, r3, #12
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e78:	461a      	mov	r2, r3
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	3301      	adds	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	3301      	adds	r3, #1
 8007e96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	61bb      	str	r3, [r7, #24]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3e2      	bcc.n	8007e6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3724      	adds	r7, #36	; 0x24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b08b      	sub	sp, #44	; 0x2c
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	089b      	lsrs	r3, r3, #2
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	623b      	str	r3, [r7, #32]
 8007ede:	e014      	b.n	8007f0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	601a      	str	r2, [r3, #0]
    pDest++;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	3301      	adds	r3, #1
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	3301      	adds	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	3301      	adds	r3, #1
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	3301      	adds	r3, #1
 8007f08:	623b      	str	r3, [r7, #32]
 8007f0a:	6a3a      	ldr	r2, [r7, #32]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d3e6      	bcc.n	8007ee0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f12:	8bfb      	ldrh	r3, [r7, #30]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01e      	beq.n	8007f56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f22:	461a      	mov	r2, r3
 8007f24:	f107 0310 	add.w	r3, r7, #16
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	701a      	strb	r2, [r3, #0]
      i++;
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	3301      	adds	r3, #1
 8007f42:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	3301      	adds	r3, #1
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f4a:	8bfb      	ldrh	r3, [r7, #30]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f50:	8bfb      	ldrh	r3, [r7, #30]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1ea      	bne.n	8007f2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	372c      	adds	r7, #44	; 0x2c
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d12c      	bne.n	8007fda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	db12      	blt.n	8007fb8 <USB_EPSetStall+0x54>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00f      	beq.n	8007fb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	e02b      	b.n	8008032 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	db12      	blt.n	8008012 <USB_EPSetStall+0xae>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00f      	beq.n	8008012 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800800c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008010:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008030:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	785b      	ldrb	r3, [r3, #1]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d128      	bne.n	80080ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800807a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d003      	beq.n	800808c <USB_EPClearStall+0x4c>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d138      	bne.n	80080fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	e027      	b.n	80080fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d003      	beq.n	80080de <USB_EPClearStall+0x9e>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	791b      	ldrb	r3, [r3, #4]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d10f      	bne.n	80080fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800812a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800812e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008140:	68f9      	ldr	r1, [r7, #12]
 8008142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008146:	4313      	orrs	r3, r2
 8008148:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008186:	f023 0302 	bic.w	r3, r3, #2
 800818a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081c8:	f043 0302 	orr.w	r3, r3, #2
 80081cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4013      	ands	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008202:	b480      	push	{r7}
 8008204:	b085      	sub	sp, #20
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	4013      	ands	r3, r2
 8008224:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	0c1b      	lsrs	r3, r3, #16
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	b29b      	uxth	r3, r3
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800826a:	b480      	push	{r7}
 800826c:	b085      	sub	sp, #20
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4013      	ands	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008298:	68bb      	ldr	r3, [r7, #8]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b087      	sub	sp, #28
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	fa22 f303 	lsr.w	r3, r2, r3
 80082d6:	01db      	lsls	r3, r3, #7
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4013      	ands	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082f4:	68bb      	ldr	r3, [r7, #8]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f003 0301 	and.w	r3, r3, #1
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008338:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	460b      	mov	r3, r1
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	333c      	adds	r3, #60	; 0x3c
 800837a:	3304      	adds	r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	4a26      	ldr	r2, [pc, #152]	; (800841c <USB_EP0_OutStart+0xb8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d90a      	bls.n	800839e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008398:	d101      	bne.n	800839e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	e037      	b.n	800840e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a4:	461a      	mov	r2, r3
 80083a6:	2300      	movs	r3, #0
 80083a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083cc:	f043 0318 	orr.w	r3, r3, #24
 80083d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083e6:	7afb      	ldrb	r3, [r7, #11]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d10f      	bne.n	800840c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f2:	461a      	mov	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008406:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800840a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	4f54300a 	.word	0x4f54300a

08008420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4a13      	ldr	r2, [pc, #76]	; (8008484 <USB_CoreReset+0x64>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d901      	bls.n	800843e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e01b      	b.n	8008476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	daf2      	bge.n	800842c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	f043 0201 	orr.w	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3301      	adds	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4a09      	ldr	r2, [pc, #36]	; (8008484 <USB_CoreReset+0x64>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d901      	bls.n	8008468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e006      	b.n	8008476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b01      	cmp	r3, #1
 8008472:	d0f0      	beq.n	8008456 <USB_CoreReset+0x36>

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	00030d40 	.word	0x00030d40

08008488 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008494:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008498:	f003 ff84 	bl	800c3a4 <USBD_static_malloc>
 800849c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32b0      	adds	r2, #176	; 0xb0
 80084ae:	2100      	movs	r1, #0
 80084b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80084b4:	2302      	movs	r3, #2
 80084b6:	e0d4      	b.n	8008662 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80084b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80084bc:	2100      	movs	r1, #0
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f004 f890 	bl	800c5e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	32b0      	adds	r2, #176	; 0xb0
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	32b0      	adds	r2, #176	; 0xb0
 80084de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	7c1b      	ldrb	r3, [r3, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d138      	bne.n	8008562 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80084f0:	4b5e      	ldr	r3, [pc, #376]	; (800866c <USBD_CDC_Init+0x1e4>)
 80084f2:	7819      	ldrb	r1, [r3, #0]
 80084f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084f8:	2202      	movs	r2, #2
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f003 fe2f 	bl	800c15e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008500:	4b5a      	ldr	r3, [pc, #360]	; (800866c <USBD_CDC_Init+0x1e4>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	f003 020f 	and.w	r2, r3, #15
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	4613      	mov	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	440b      	add	r3, r1
 8008514:	3324      	adds	r3, #36	; 0x24
 8008516:	2201      	movs	r2, #1
 8008518:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800851a:	4b55      	ldr	r3, [pc, #340]	; (8008670 <USBD_CDC_Init+0x1e8>)
 800851c:	7819      	ldrb	r1, [r3, #0]
 800851e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008522:	2202      	movs	r2, #2
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f003 fe1a 	bl	800c15e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800852a:	4b51      	ldr	r3, [pc, #324]	; (8008670 <USBD_CDC_Init+0x1e8>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 020f 	and.w	r2, r3, #15
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008542:	2201      	movs	r2, #1
 8008544:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008546:	4b4b      	ldr	r3, [pc, #300]	; (8008674 <USBD_CDC_Init+0x1ec>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	3326      	adds	r3, #38	; 0x26
 800855c:	2210      	movs	r2, #16
 800855e:	801a      	strh	r2, [r3, #0]
 8008560:	e035      	b.n	80085ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008562:	4b42      	ldr	r3, [pc, #264]	; (800866c <USBD_CDC_Init+0x1e4>)
 8008564:	7819      	ldrb	r1, [r3, #0]
 8008566:	2340      	movs	r3, #64	; 0x40
 8008568:	2202      	movs	r2, #2
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f003 fdf7 	bl	800c15e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008570:	4b3e      	ldr	r3, [pc, #248]	; (800866c <USBD_CDC_Init+0x1e4>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f003 020f 	and.w	r2, r3, #15
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	440b      	add	r3, r1
 8008584:	3324      	adds	r3, #36	; 0x24
 8008586:	2201      	movs	r2, #1
 8008588:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800858a:	4b39      	ldr	r3, [pc, #228]	; (8008670 <USBD_CDC_Init+0x1e8>)
 800858c:	7819      	ldrb	r1, [r3, #0]
 800858e:	2340      	movs	r3, #64	; 0x40
 8008590:	2202      	movs	r2, #2
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f003 fde3 	bl	800c15e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008598:	4b35      	ldr	r3, [pc, #212]	; (8008670 <USBD_CDC_Init+0x1e8>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	f003 020f 	and.w	r2, r3, #15
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085b0:	2201      	movs	r2, #1
 80085b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085b4:	4b2f      	ldr	r3, [pc, #188]	; (8008674 <USBD_CDC_Init+0x1ec>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 020f 	and.w	r2, r3, #15
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	3326      	adds	r3, #38	; 0x26
 80085ca:	2210      	movs	r2, #16
 80085cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085ce:	4b29      	ldr	r3, [pc, #164]	; (8008674 <USBD_CDC_Init+0x1ec>)
 80085d0:	7819      	ldrb	r1, [r3, #0]
 80085d2:	2308      	movs	r3, #8
 80085d4:	2203      	movs	r2, #3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f003 fdc1 	bl	800c15e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80085dc:	4b25      	ldr	r3, [pc, #148]	; (8008674 <USBD_CDC_Init+0x1ec>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f003 020f 	and.w	r2, r3, #15
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	3324      	adds	r3, #36	; 0x24
 80085f2:	2201      	movs	r2, #1
 80085f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	33b0      	adds	r3, #176	; 0xb0
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800862c:	2302      	movs	r3, #2
 800862e:	e018      	b.n	8008662 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7c1b      	ldrb	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008638:	4b0d      	ldr	r3, [pc, #52]	; (8008670 <USBD_CDC_Init+0x1e8>)
 800863a:	7819      	ldrb	r1, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f003 fe78 	bl	800c33c <USBD_LL_PrepareReceive>
 800864c:	e008      	b.n	8008660 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800864e:	4b08      	ldr	r3, [pc, #32]	; (8008670 <USBD_CDC_Init+0x1e8>)
 8008650:	7819      	ldrb	r1, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008658:	2340      	movs	r3, #64	; 0x40
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f003 fe6e 	bl	800c33c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	200000b3 	.word	0x200000b3
 8008670:	200000b4 	.word	0x200000b4
 8008674:	200000b5 	.word	0x200000b5

08008678 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008684:	4b3a      	ldr	r3, [pc, #232]	; (8008770 <USBD_CDC_DeInit+0xf8>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f003 fd8d 	bl	800c1aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008690:	4b37      	ldr	r3, [pc, #220]	; (8008770 <USBD_CDC_DeInit+0xf8>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f003 020f 	and.w	r2, r3, #15
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	3324      	adds	r3, #36	; 0x24
 80086a6:	2200      	movs	r2, #0
 80086a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80086aa:	4b32      	ldr	r3, [pc, #200]	; (8008774 <USBD_CDC_DeInit+0xfc>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f003 fd7a 	bl	800c1aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80086b6:	4b2f      	ldr	r3, [pc, #188]	; (8008774 <USBD_CDC_DeInit+0xfc>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f003 020f 	and.w	r2, r3, #15
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086ce:	2200      	movs	r2, #0
 80086d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80086d2:	4b29      	ldr	r3, [pc, #164]	; (8008778 <USBD_CDC_DeInit+0x100>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f003 fd66 	bl	800c1aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80086de:	4b26      	ldr	r3, [pc, #152]	; (8008778 <USBD_CDC_DeInit+0x100>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	f003 020f 	and.w	r2, r3, #15
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	3324      	adds	r3, #36	; 0x24
 80086f4:	2200      	movs	r2, #0
 80086f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80086f8:	4b1f      	ldr	r3, [pc, #124]	; (8008778 <USBD_CDC_DeInit+0x100>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f003 020f 	and.w	r2, r3, #15
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3326      	adds	r3, #38	; 0x26
 800870e:	2200      	movs	r2, #0
 8008710:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	32b0      	adds	r2, #176	; 0xb0
 800871c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d01f      	beq.n	8008764 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	33b0      	adds	r3, #176	; 0xb0
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	32b0      	adds	r2, #176	; 0xb0
 8008742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008746:	4618      	mov	r0, r3
 8008748:	f003 fe3a 	bl	800c3c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	32b0      	adds	r2, #176	; 0xb0
 8008756:	2100      	movs	r1, #0
 8008758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200000b3 	.word	0x200000b3
 8008774:	200000b4 	.word	0x200000b4
 8008778:	200000b5 	.word	0x200000b5

0800877c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	32b0      	adds	r2, #176	; 0xb0
 8008790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008794:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e0bf      	b.n	800892c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d050      	beq.n	800885a <USBD_CDC_Setup+0xde>
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	f040 80af 	bne.w	800891c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88db      	ldrh	r3, [r3, #6]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d03a      	beq.n	800883c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	b25b      	sxtb	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	da1b      	bge.n	8008808 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	33b0      	adds	r3, #176	; 0xb0
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80087e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	88d2      	ldrh	r2, [r2, #6]
 80087ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	88db      	ldrh	r3, [r3, #6]
 80087f2:	2b07      	cmp	r3, #7
 80087f4:	bf28      	it	cs
 80087f6:	2307      	movcs	r3, #7
 80087f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	89fa      	ldrh	r2, [r7, #14]
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 fd89 	bl	800a318 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008806:	e090      	b.n	800892a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	785a      	ldrb	r2, [r3, #1]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	88db      	ldrh	r3, [r3, #6]
 8008816:	2b3f      	cmp	r3, #63	; 0x3f
 8008818:	d803      	bhi.n	8008822 <USBD_CDC_Setup+0xa6>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	88db      	ldrh	r3, [r3, #6]
 800881e:	b2da      	uxtb	r2, r3
 8008820:	e000      	b.n	8008824 <USBD_CDC_Setup+0xa8>
 8008822:	2240      	movs	r2, #64	; 0x40
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800882a:	6939      	ldr	r1, [r7, #16]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008832:	461a      	mov	r2, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 fd9b 	bl	800a370 <USBD_CtlPrepareRx>
      break;
 800883a:	e076      	b.n	800892a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	33b0      	adds	r3, #176	; 0xb0
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	7850      	ldrb	r0, [r2, #1]
 8008852:	2200      	movs	r2, #0
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	4798      	blx	r3
      break;
 8008858:	e067      	b.n	800892a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b0b      	cmp	r3, #11
 8008860:	d851      	bhi.n	8008906 <USBD_CDC_Setup+0x18a>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <USBD_CDC_Setup+0xec>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	08008899 	.word	0x08008899
 800886c:	08008915 	.word	0x08008915
 8008870:	08008907 	.word	0x08008907
 8008874:	08008907 	.word	0x08008907
 8008878:	08008907 	.word	0x08008907
 800887c:	08008907 	.word	0x08008907
 8008880:	08008907 	.word	0x08008907
 8008884:	08008907 	.word	0x08008907
 8008888:	08008907 	.word	0x08008907
 800888c:	08008907 	.word	0x08008907
 8008890:	080088c3 	.word	0x080088c3
 8008894:	080088ed 	.word	0x080088ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d107      	bne.n	80088b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088a4:	f107 030a 	add.w	r3, r7, #10
 80088a8:	2202      	movs	r2, #2
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 fd33 	bl	800a318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088b2:	e032      	b.n	800891a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 fcbd 	bl	800a236 <USBD_CtlError>
            ret = USBD_FAIL;
 80088bc:	2303      	movs	r3, #3
 80088be:	75fb      	strb	r3, [r7, #23]
          break;
 80088c0:	e02b      	b.n	800891a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d107      	bne.n	80088de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80088ce:	f107 030d 	add.w	r3, r7, #13
 80088d2:	2201      	movs	r2, #1
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 fd1e 	bl	800a318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088dc:	e01d      	b.n	800891a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 fca8 	bl	800a236 <USBD_CtlError>
            ret = USBD_FAIL;
 80088e6:	2303      	movs	r3, #3
 80088e8:	75fb      	strb	r3, [r7, #23]
          break;
 80088ea:	e016      	b.n	800891a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d00f      	beq.n	8008918 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 fc9b 	bl	800a236 <USBD_CtlError>
            ret = USBD_FAIL;
 8008900:	2303      	movs	r3, #3
 8008902:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008904:	e008      	b.n	8008918 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 fc94 	bl	800a236 <USBD_CtlError>
          ret = USBD_FAIL;
 800890e:	2303      	movs	r3, #3
 8008910:	75fb      	strb	r3, [r7, #23]
          break;
 8008912:	e002      	b.n	800891a <USBD_CDC_Setup+0x19e>
          break;
 8008914:	bf00      	nop
 8008916:	e008      	b.n	800892a <USBD_CDC_Setup+0x1ae>
          break;
 8008918:	bf00      	nop
      }
      break;
 800891a:	e006      	b.n	800892a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 fc89 	bl	800a236 <USBD_CtlError>
      ret = USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	75fb      	strb	r3, [r7, #23]
      break;
 8008928:	bf00      	nop
  }

  return (uint8_t)ret;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008946:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	32b0      	adds	r2, #176	; 0xb0
 8008952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800895a:	2303      	movs	r3, #3
 800895c:	e065      	b.n	8008a2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	32b0      	adds	r2, #176	; 0xb0
 8008968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	f003 020f 	and.w	r2, r3, #15
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	440b      	add	r3, r1
 8008980:	3318      	adds	r3, #24
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d02f      	beq.n	80089e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	f003 020f 	and.w	r2, r3, #15
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	440b      	add	r3, r1
 800899a:	3318      	adds	r3, #24
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	f003 010f 	and.w	r1, r3, #15
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	460b      	mov	r3, r1
 80089a8:	00db      	lsls	r3, r3, #3
 80089aa:	440b      	add	r3, r1
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4403      	add	r3, r0
 80089b0:	3348      	adds	r3, #72	; 0x48
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80089b8:	fb01 f303 	mul.w	r3, r1, r3
 80089bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d112      	bne.n	80089e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	f003 020f 	and.w	r2, r3, #15
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	3318      	adds	r3, #24
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089da:	78f9      	ldrb	r1, [r7, #3]
 80089dc:	2300      	movs	r3, #0
 80089de:	2200      	movs	r2, #0
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f003 fc8a 	bl	800c2fa <USBD_LL_Transmit>
 80089e6:	e01f      	b.n	8008a28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	33b0      	adds	r3, #176	; 0xb0
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d010      	beq.n	8008a28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	33b0      	adds	r3, #176	; 0xb0
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a24:	78fa      	ldrb	r2, [r7, #3]
 8008a26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	32b0      	adds	r2, #176	; 0xb0
 8008a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	32b0      	adds	r2, #176	; 0xb0
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e01a      	b.n	8008a9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f003 fc88 	bl	800c37e <USBD_LL_GetRxDataSize>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	33b0      	adds	r3, #176	; 0xb0
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a94:	4611      	mov	r1, r2
 8008a96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	32b0      	adds	r2, #176	; 0xb0
 8008ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e025      	b.n	8008b10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	33b0      	adds	r3, #176	; 0xb0
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01a      	beq.n	8008b0e <USBD_CDC_EP0_RxReady+0x6c>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ade:	2bff      	cmp	r3, #255	; 0xff
 8008ae0:	d015      	beq.n	8008b0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	33b0      	adds	r3, #176	; 0xb0
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008afa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b02:	b292      	uxth	r2, r2
 8008b04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	22ff      	movs	r2, #255	; 0xff
 8008b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b20:	2182      	movs	r1, #130	; 0x82
 8008b22:	4818      	ldr	r0, [pc, #96]	; (8008b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b24:	f000 fd4f 	bl	80095c6 <USBD_GetEpDesc>
 8008b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	4815      	ldr	r0, [pc, #84]	; (8008b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b2e:	f000 fd4a 	bl	80095c6 <USBD_GetEpDesc>
 8008b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b34:	2181      	movs	r1, #129	; 0x81
 8008b36:	4813      	ldr	r0, [pc, #76]	; (8008b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b38:	f000 fd45 	bl	80095c6 <USBD_GetEpDesc>
 8008b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2210      	movs	r2, #16
 8008b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d006      	beq.n	8008b5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b58:	711a      	strb	r2, [r3, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d006      	beq.n	8008b72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b6c:	711a      	strb	r2, [r3, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2243      	movs	r2, #67	; 0x43
 8008b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b78:	4b02      	ldr	r3, [pc, #8]	; (8008b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20000070 	.word	0x20000070

08008b88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b90:	2182      	movs	r1, #130	; 0x82
 8008b92:	4818      	ldr	r0, [pc, #96]	; (8008bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b94:	f000 fd17 	bl	80095c6 <USBD_GetEpDesc>
 8008b98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	4815      	ldr	r0, [pc, #84]	; (8008bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b9e:	f000 fd12 	bl	80095c6 <USBD_GetEpDesc>
 8008ba2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ba4:	2181      	movs	r1, #129	; 0x81
 8008ba6:	4813      	ldr	r0, [pc, #76]	; (8008bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ba8:	f000 fd0d 	bl	80095c6 <USBD_GetEpDesc>
 8008bac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2210      	movs	r2, #16
 8008bb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d006      	beq.n	8008bce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	711a      	strb	r2, [r3, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f042 0202 	orr.w	r2, r2, #2
 8008bcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d006      	beq.n	8008be2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	711a      	strb	r2, [r3, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f042 0202 	orr.w	r2, r2, #2
 8008be0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2243      	movs	r2, #67	; 0x43
 8008be6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008be8:	4b02      	ldr	r3, [pc, #8]	; (8008bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000070 	.word	0x20000070

08008bf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c00:	2182      	movs	r1, #130	; 0x82
 8008c02:	4818      	ldr	r0, [pc, #96]	; (8008c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c04:	f000 fcdf 	bl	80095c6 <USBD_GetEpDesc>
 8008c08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	4815      	ldr	r0, [pc, #84]	; (8008c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c0e:	f000 fcda 	bl	80095c6 <USBD_GetEpDesc>
 8008c12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c14:	2181      	movs	r1, #129	; 0x81
 8008c16:	4813      	ldr	r0, [pc, #76]	; (8008c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c18:	f000 fcd5 	bl	80095c6 <USBD_GetEpDesc>
 8008c1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2210      	movs	r2, #16
 8008c28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d006      	beq.n	8008c3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c38:	711a      	strb	r2, [r3, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d006      	beq.n	8008c52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c4c:	711a      	strb	r2, [r3, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2243      	movs	r2, #67	; 0x43
 8008c56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c58:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000070 	.word	0x20000070

08008c68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	220a      	movs	r2, #10
 8008c74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c76:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	2000002c 	.word	0x2000002c

08008c88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e009      	b.n	8008cb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	33b0      	adds	r3, #176	; 0xb0
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	32b0      	adds	r2, #176	; 0xb0
 8008cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e008      	b.n	8008cf4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	32b0      	adds	r2, #176	; 0xb0
 8008d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e004      	b.n	8008d2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
	...

08008d3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	32b0      	adds	r2, #176	; 0xb0
 8008d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	32b0      	adds	r2, #176	; 0xb0
 8008d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e025      	b.n	8008dba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d11f      	bne.n	8008db8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008d80:	4b10      	ldr	r3, [pc, #64]	; (8008dc4 <USBD_CDC_TransmitPacket+0x88>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f003 020f 	and.w	r2, r3, #15
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4403      	add	r3, r0
 8008d9a:	3318      	adds	r3, #24
 8008d9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008d9e:	4b09      	ldr	r3, [pc, #36]	; (8008dc4 <USBD_CDC_TransmitPacket+0x88>)
 8008da0:	7819      	ldrb	r1, [r3, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f003 faa3 	bl	800c2fa <USBD_LL_Transmit>

    ret = USBD_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	200000b3 	.word	0x200000b3

08008dc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	32b0      	adds	r2, #176	; 0xb0
 8008dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	32b0      	adds	r2, #176	; 0xb0
 8008dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e018      	b.n	8008e28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	7c1b      	ldrb	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <USBD_CDC_ReceivePacket+0x68>)
 8008e00:	7819      	ldrb	r1, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f003 fa95 	bl	800c33c <USBD_LL_PrepareReceive>
 8008e12:	e008      	b.n	8008e26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e14:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <USBD_CDC_ReceivePacket+0x68>)
 8008e16:	7819      	ldrb	r1, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f003 fa8b 	bl	800c33c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	200000b4 	.word	0x200000b4

08008e34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e01f      	b.n	8008e8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	79fa      	ldrb	r2, [r7, #7]
 8008e7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f003 f905 	bl	800c090 <USBD_LL_Init>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e025      	b.n	8008ef8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	32ae      	adds	r2, #174	; 0xae
 8008ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00f      	beq.n	8008ee8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32ae      	adds	r2, #174	; 0xae
 8008ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	f107 020e 	add.w	r2, r7, #14
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f003 f90d 	bl	800c128 <USBD_LL_Start>
 8008f0e:	4603      	mov	r3, r0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d009      	beq.n	8008f5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	4611      	mov	r1, r2
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	78fa      	ldrb	r2, [r7, #3]
 8008f80:	4611      	mov	r1, r2
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	4798      	blx	r3
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f001 f908 	bl	800a1c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fce:	f003 031f 	and.w	r3, r3, #31
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d01a      	beq.n	800900c <USBD_LL_SetupStage+0x72>
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d822      	bhi.n	8009020 <USBD_LL_SetupStage+0x86>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <USBD_LL_SetupStage+0x4a>
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d00a      	beq.n	8008ff8 <USBD_LL_SetupStage+0x5e>
 8008fe2:	e01d      	b.n	8009020 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fb5f 	bl	80096b0 <USBD_StdDevReq>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff6:	e020      	b.n	800903a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fbc7 	bl	8009794 <USBD_StdItfReq>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
      break;
 800900a:	e016      	b.n	800903a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fc29 	bl	800986c <USBD_StdEPReq>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]
      break;
 800901e:	e00c      	b.n	800903a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800902a:	b2db      	uxtb	r3, r3
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f003 f8da 	bl	800c1e8 <USBD_LL_StallEP>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
      break;
 8009038:	bf00      	nop
  }

  return ret;
 800903a:	7bfb      	ldrb	r3, [r7, #15]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	460b      	mov	r3, r1
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009056:	7afb      	ldrb	r3, [r7, #11]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d16e      	bne.n	800913a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009062:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800906a:	2b03      	cmp	r3, #3
 800906c:	f040 8098 	bne.w	80091a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	429a      	cmp	r2, r3
 800907a:	d913      	bls.n	80090a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	1ad2      	subs	r2, r2, r3
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	4293      	cmp	r3, r2
 8009094:	bf28      	it	cs
 8009096:	4613      	movcs	r3, r2
 8009098:	461a      	mov	r2, r3
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f001 f984 	bl	800a3aa <USBD_CtlContinueRx>
 80090a2:	e07d      	b.n	80091a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090aa:	f003 031f 	and.w	r3, r3, #31
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d014      	beq.n	80090dc <USBD_LL_DataOutStage+0x98>
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d81d      	bhi.n	80090f2 <USBD_LL_DataOutStage+0xae>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <USBD_LL_DataOutStage+0x7c>
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d003      	beq.n	80090c6 <USBD_LL_DataOutStage+0x82>
 80090be:	e018      	b.n	80090f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	75bb      	strb	r3, [r7, #22]
            break;
 80090c4:	e018      	b.n	80090f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	4619      	mov	r1, r3
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 fa5e 	bl	8009592 <USBD_CoreFindIF>
 80090d6:	4603      	mov	r3, r0
 80090d8:	75bb      	strb	r3, [r7, #22]
            break;
 80090da:	e00d      	b.n	80090f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4619      	mov	r1, r3
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fa60 	bl	80095ac <USBD_CoreFindEP>
 80090ec:	4603      	mov	r3, r0
 80090ee:	75bb      	strb	r3, [r7, #22]
            break;
 80090f0:	e002      	b.n	80090f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75bb      	strb	r3, [r7, #22]
            break;
 80090f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090f8:	7dbb      	ldrb	r3, [r7, #22]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d119      	bne.n	8009132 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b03      	cmp	r3, #3
 8009108:	d113      	bne.n	8009132 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800910a:	7dba      	ldrb	r2, [r7, #22]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	32ae      	adds	r2, #174	; 0xae
 8009110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00b      	beq.n	8009132 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800911a:	7dba      	ldrb	r2, [r7, #22]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009122:	7dba      	ldrb	r2, [r7, #22]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	32ae      	adds	r2, #174	; 0xae
 8009128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f001 f94a 	bl	800a3cc <USBD_CtlSendStatus>
 8009138:	e032      	b.n	80091a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800913a:	7afb      	ldrb	r3, [r7, #11]
 800913c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009140:	b2db      	uxtb	r3, r3
 8009142:	4619      	mov	r1, r3
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fa31 	bl	80095ac <USBD_CoreFindEP>
 800914a:	4603      	mov	r3, r0
 800914c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800914e:	7dbb      	ldrb	r3, [r7, #22]
 8009150:	2bff      	cmp	r3, #255	; 0xff
 8009152:	d025      	beq.n	80091a0 <USBD_LL_DataOutStage+0x15c>
 8009154:	7dbb      	ldrb	r3, [r7, #22]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d122      	bne.n	80091a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b03      	cmp	r3, #3
 8009164:	d117      	bne.n	8009196 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009166:	7dba      	ldrb	r2, [r7, #22]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	32ae      	adds	r2, #174	; 0xae
 800916c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00f      	beq.n	8009196 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009176:	7dba      	ldrb	r2, [r7, #22]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800917e:	7dba      	ldrb	r2, [r7, #22]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	32ae      	adds	r2, #174	; 0xae
 8009184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	7afa      	ldrb	r2, [r7, #11]
 800918c:	4611      	mov	r1, r2
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	4798      	blx	r3
 8009192:	4603      	mov	r3, r0
 8009194:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	e000      	b.n	80091a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b086      	sub	sp, #24
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	460b      	mov	r3, r1
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d16f      	bne.n	800929e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3314      	adds	r3, #20
 80091c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d15a      	bne.n	8009284 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d914      	bls.n	8009204 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	1ad2      	subs	r2, r2, r3
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	461a      	mov	r2, r3
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f001 f8ac 	bl	800a34e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091f6:	2300      	movs	r3, #0
 80091f8:	2200      	movs	r2, #0
 80091fa:	2100      	movs	r1, #0
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f003 f89d 	bl	800c33c <USBD_LL_PrepareReceive>
 8009202:	e03f      	b.n	8009284 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	429a      	cmp	r2, r3
 800920e:	d11c      	bne.n	800924a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009218:	429a      	cmp	r2, r3
 800921a:	d316      	bcc.n	800924a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009226:	429a      	cmp	r2, r3
 8009228:	d20f      	bcs.n	800924a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800922a:	2200      	movs	r2, #0
 800922c:	2100      	movs	r1, #0
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f001 f88d 	bl	800a34e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f003 f87a 	bl	800c33c <USBD_LL_PrepareReceive>
 8009248:	e01c      	b.n	8009284 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b03      	cmp	r3, #3
 8009254:	d10f      	bne.n	8009276 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d009      	beq.n	8009276 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009276:	2180      	movs	r1, #128	; 0x80
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f002 ffb5 	bl	800c1e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f001 f8b7 	bl	800a3f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d03a      	beq.n	8009304 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff fe42 	bl	8008f18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800929c:	e032      	b.n	8009304 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800929e:	7afb      	ldrb	r3, [r7, #11]
 80092a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	4619      	mov	r1, r3
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 f97f 	bl	80095ac <USBD_CoreFindEP>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	2bff      	cmp	r3, #255	; 0xff
 80092b6:	d025      	beq.n	8009304 <USBD_LL_DataInStage+0x15a>
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d122      	bne.n	8009304 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d11c      	bne.n	8009304 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092ca:	7dfa      	ldrb	r2, [r7, #23]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	32ae      	adds	r2, #174	; 0xae
 80092d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d014      	beq.n	8009304 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092da:	7dfa      	ldrb	r2, [r7, #23]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092e2:	7dfa      	ldrb	r2, [r7, #23]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	32ae      	adds	r2, #174	; 0xae
 80092e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	7afa      	ldrb	r2, [r7, #11]
 80092f0:	4611      	mov	r1, r2
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	4798      	blx	r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092fa:	7dbb      	ldrb	r3, [r7, #22]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009300:	7dbb      	ldrb	r3, [r7, #22]
 8009302:	e000      	b.n	8009306 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009346:	2b00      	cmp	r3, #0
 8009348:	d014      	beq.n	8009374 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00e      	beq.n	8009374 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	6852      	ldr	r2, [r2, #4]
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	4611      	mov	r1, r2
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	4798      	blx	r3
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009370:	2303      	movs	r3, #3
 8009372:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f002 feef 	bl	800c15e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2240      	movs	r2, #64	; 0x40
 800938c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	2200      	movs	r2, #0
 8009394:	2180      	movs	r1, #128	; 0x80
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f002 fee1 	bl	800c15e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2240      	movs	r2, #64	; 0x40
 80093a6:	621a      	str	r2, [r3, #32]

  return ret;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	78fa      	ldrb	r2, [r7, #3]
 80093c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2204      	movs	r2, #4
 80093ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b04      	cmp	r3, #4
 8009410:	d106      	bne.n	8009420 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009418:	b2da      	uxtb	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b03      	cmp	r3, #3
 8009440:	d110      	bne.n	8009464 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d005      	beq.n	8009464 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	32ae      	adds	r2, #174	; 0xae
 8009484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800948c:	2303      	movs	r3, #3
 800948e:	e01c      	b.n	80094ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b03      	cmp	r3, #3
 800949a:	d115      	bne.n	80094c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	32ae      	adds	r2, #174	; 0xae
 80094a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00b      	beq.n	80094c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	32ae      	adds	r2, #174	; 0xae
 80094ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	78fa      	ldrb	r2, [r7, #3]
 80094c2:	4611      	mov	r1, r2
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	32ae      	adds	r2, #174	; 0xae
 80094e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e01c      	b.n	800952e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	d115      	bne.n	800952c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	32ae      	adds	r2, #174	; 0xae
 800950a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00b      	beq.n	800952c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	32ae      	adds	r2, #174	; 0xae
 800951e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009524:	78fa      	ldrb	r2, [r7, #3]
 8009526:	4611      	mov	r1, r2
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009536:	b480      	push	{r7}
 8009538:	b083      	sub	sp, #12
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00e      	beq.n	8009588 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6852      	ldr	r2, [r2, #4]
 8009576:	b2d2      	uxtb	r2, r2
 8009578:	4611      	mov	r1, r2
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	4798      	blx	r3
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009584:	2303      	movs	r3, #3
 8009586:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	460b      	mov	r3, r1
 800959c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800959e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b086      	sub	sp, #24
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d920      	bls.n	8009630 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095f6:	e013      	b.n	8009620 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095f8:	f107 030a 	add.w	r3, r7, #10
 80095fc:	4619      	mov	r1, r3
 80095fe:	6978      	ldr	r0, [r7, #20]
 8009600:	f000 f81b 	bl	800963a <USBD_GetNextDesc>
 8009604:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b05      	cmp	r3, #5
 800960c:	d108      	bne.n	8009620 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	789b      	ldrb	r3, [r3, #2]
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	429a      	cmp	r2, r3
 800961a:	d008      	beq.n	800962e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	885b      	ldrh	r3, [r3, #2]
 8009624:	b29a      	uxth	r2, r3
 8009626:	897b      	ldrh	r3, [r7, #10]
 8009628:	429a      	cmp	r2, r3
 800962a:	d8e5      	bhi.n	80095f8 <USBD_GetEpDesc+0x32>
 800962c:	e000      	b.n	8009630 <USBD_GetEpDesc+0x6a>
          break;
 800962e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009630:	693b      	ldr	r3, [r7, #16]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	881a      	ldrh	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	4413      	add	r3, r2
 8009654:	b29a      	uxth	r2, r3
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4413      	add	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009666:	68fb      	ldr	r3, [r7, #12]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	3301      	adds	r3, #1
 800968a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009692:	8a3b      	ldrh	r3, [r7, #16]
 8009694:	021b      	lsls	r3, r3, #8
 8009696:	b21a      	sxth	r2, r3
 8009698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800969c:	4313      	orrs	r3, r2
 800969e:	b21b      	sxth	r3, r3
 80096a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096a2:	89fb      	ldrh	r3, [r7, #14]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	371c      	adds	r7, #28
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096c6:	2b40      	cmp	r3, #64	; 0x40
 80096c8:	d005      	beq.n	80096d6 <USBD_StdDevReq+0x26>
 80096ca:	2b40      	cmp	r3, #64	; 0x40
 80096cc:	d857      	bhi.n	800977e <USBD_StdDevReq+0xce>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <USBD_StdDevReq+0x42>
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	d153      	bne.n	800977e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	32ae      	adds	r2, #174	; 0xae
 80096e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	4798      	blx	r3
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]
      break;
 80096f0:	e04a      	b.n	8009788 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	785b      	ldrb	r3, [r3, #1]
 80096f6:	2b09      	cmp	r3, #9
 80096f8:	d83b      	bhi.n	8009772 <USBD_StdDevReq+0xc2>
 80096fa:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <USBD_StdDevReq+0x50>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	08009755 	.word	0x08009755
 8009704:	08009769 	.word	0x08009769
 8009708:	08009773 	.word	0x08009773
 800970c:	0800975f 	.word	0x0800975f
 8009710:	08009773 	.word	0x08009773
 8009714:	08009733 	.word	0x08009733
 8009718:	08009729 	.word	0x08009729
 800971c:	08009773 	.word	0x08009773
 8009720:	0800974b 	.word	0x0800974b
 8009724:	0800973d 	.word	0x0800973d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa3c 	bl	8009ba8 <USBD_GetDescriptor>
          break;
 8009730:	e024      	b.n	800977c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fba1 	bl	8009e7c <USBD_SetAddress>
          break;
 800973a:	e01f      	b.n	800977c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fbe0 	bl	8009f04 <USBD_SetConfig>
 8009744:	4603      	mov	r3, r0
 8009746:	73fb      	strb	r3, [r7, #15]
          break;
 8009748:	e018      	b.n	800977c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fc83 	bl	800a058 <USBD_GetConfig>
          break;
 8009752:	e013      	b.n	800977c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fcb4 	bl	800a0c4 <USBD_GetStatus>
          break;
 800975c:	e00e      	b.n	800977c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fce3 	bl	800a12c <USBD_SetFeature>
          break;
 8009766:	e009      	b.n	800977c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fd07 	bl	800a17e <USBD_ClrFeature>
          break;
 8009770:	e004      	b.n	800977c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fd5e 	bl	800a236 <USBD_CtlError>
          break;
 800977a:	bf00      	nop
      }
      break;
 800977c:	e004      	b.n	8009788 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fd58 	bl	800a236 <USBD_CtlError>
      break;
 8009786:	bf00      	nop
  }

  return ret;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop

08009794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097aa:	2b40      	cmp	r3, #64	; 0x40
 80097ac:	d005      	beq.n	80097ba <USBD_StdItfReq+0x26>
 80097ae:	2b40      	cmp	r3, #64	; 0x40
 80097b0:	d852      	bhi.n	8009858 <USBD_StdItfReq+0xc4>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <USBD_StdItfReq+0x26>
 80097b6:	2b20      	cmp	r3, #32
 80097b8:	d14e      	bne.n	8009858 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d840      	bhi.n	800984a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	889b      	ldrh	r3, [r3, #4]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d836      	bhi.n	8009840 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	889b      	ldrh	r3, [r3, #4]
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff fed9 	bl	8009592 <USBD_CoreFindIF>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	2bff      	cmp	r3, #255	; 0xff
 80097e8:	d01d      	beq.n	8009826 <USBD_StdItfReq+0x92>
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d11a      	bne.n	8009826 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097f0:	7bba      	ldrb	r2, [r7, #14]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	32ae      	adds	r2, #174	; 0xae
 80097f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00f      	beq.n	8009820 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009800:	7bba      	ldrb	r2, [r7, #14]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009808:	7bba      	ldrb	r2, [r7, #14]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	32ae      	adds	r2, #174	; 0xae
 800980e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
 800981a:	4603      	mov	r3, r0
 800981c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800981e:	e004      	b.n	800982a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009820:	2303      	movs	r3, #3
 8009822:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009824:	e001      	b.n	800982a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009826:	2303      	movs	r3, #3
 8009828:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	88db      	ldrh	r3, [r3, #6]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d110      	bne.n	8009854 <USBD_StdItfReq+0xc0>
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10d      	bne.n	8009854 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fdc7 	bl	800a3cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800983e:	e009      	b.n	8009854 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fcf7 	bl	800a236 <USBD_CtlError>
          break;
 8009848:	e004      	b.n	8009854 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fcf2 	bl	800a236 <USBD_CtlError>
          break;
 8009852:	e000      	b.n	8009856 <USBD_StdItfReq+0xc2>
          break;
 8009854:	bf00      	nop
      }
      break;
 8009856:	e004      	b.n	8009862 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fceb 	bl	800a236 <USBD_CtlError>
      break;
 8009860:	bf00      	nop
  }

  return ret;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	889b      	ldrh	r3, [r3, #4]
 800987e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009888:	2b40      	cmp	r3, #64	; 0x40
 800988a:	d007      	beq.n	800989c <USBD_StdEPReq+0x30>
 800988c:	2b40      	cmp	r3, #64	; 0x40
 800988e:	f200 817f 	bhi.w	8009b90 <USBD_StdEPReq+0x324>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d02a      	beq.n	80098ec <USBD_StdEPReq+0x80>
 8009896:	2b20      	cmp	r3, #32
 8009898:	f040 817a 	bne.w	8009b90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff fe83 	bl	80095ac <USBD_CoreFindEP>
 80098a6:	4603      	mov	r3, r0
 80098a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098aa:	7b7b      	ldrb	r3, [r7, #13]
 80098ac:	2bff      	cmp	r3, #255	; 0xff
 80098ae:	f000 8174 	beq.w	8009b9a <USBD_StdEPReq+0x32e>
 80098b2:	7b7b      	ldrb	r3, [r7, #13]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 8170 	bne.w	8009b9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098ba:	7b7a      	ldrb	r2, [r7, #13]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098c2:	7b7a      	ldrb	r2, [r7, #13]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	32ae      	adds	r2, #174	; 0xae
 80098c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 8163 	beq.w	8009b9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098d4:	7b7a      	ldrb	r2, [r7, #13]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	32ae      	adds	r2, #174	; 0xae
 80098da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	4798      	blx	r3
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098ea:	e156      	b.n	8009b9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	785b      	ldrb	r3, [r3, #1]
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d008      	beq.n	8009906 <USBD_StdEPReq+0x9a>
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	f300 8145 	bgt.w	8009b84 <USBD_StdEPReq+0x318>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 809b 	beq.w	8009a36 <USBD_StdEPReq+0x1ca>
 8009900:	2b01      	cmp	r3, #1
 8009902:	d03c      	beq.n	800997e <USBD_StdEPReq+0x112>
 8009904:	e13e      	b.n	8009b84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d002      	beq.n	8009918 <USBD_StdEPReq+0xac>
 8009912:	2b03      	cmp	r3, #3
 8009914:	d016      	beq.n	8009944 <USBD_StdEPReq+0xd8>
 8009916:	e02c      	b.n	8009972 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00d      	beq.n	800993a <USBD_StdEPReq+0xce>
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b80      	cmp	r3, #128	; 0x80
 8009922:	d00a      	beq.n	800993a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f002 fc5d 	bl	800c1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800992e:	2180      	movs	r1, #128	; 0x80
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f002 fc59 	bl	800c1e8 <USBD_LL_StallEP>
 8009936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009938:	e020      	b.n	800997c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fc7a 	bl	800a236 <USBD_CtlError>
              break;
 8009942:	e01b      	b.n	800997c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	885b      	ldrh	r3, [r3, #2]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10e      	bne.n	800996a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00b      	beq.n	800996a <USBD_StdEPReq+0xfe>
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b80      	cmp	r3, #128	; 0x80
 8009956:	d008      	beq.n	800996a <USBD_StdEPReq+0xfe>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	88db      	ldrh	r3, [r3, #6]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d104      	bne.n	800996a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f002 fc3f 	bl	800c1e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fd2e 	bl	800a3cc <USBD_CtlSendStatus>

              break;
 8009970:	e004      	b.n	800997c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fc5e 	bl	800a236 <USBD_CtlError>
              break;
 800997a:	bf00      	nop
          }
          break;
 800997c:	e107      	b.n	8009b8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b02      	cmp	r3, #2
 8009988:	d002      	beq.n	8009990 <USBD_StdEPReq+0x124>
 800998a:	2b03      	cmp	r3, #3
 800998c:	d016      	beq.n	80099bc <USBD_StdEPReq+0x150>
 800998e:	e04b      	b.n	8009a28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00d      	beq.n	80099b2 <USBD_StdEPReq+0x146>
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	2b80      	cmp	r3, #128	; 0x80
 800999a:	d00a      	beq.n	80099b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f002 fc21 	bl	800c1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099a6:	2180      	movs	r1, #128	; 0x80
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f002 fc1d 	bl	800c1e8 <USBD_LL_StallEP>
 80099ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099b0:	e040      	b.n	8009a34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fc3e 	bl	800a236 <USBD_CtlError>
              break;
 80099ba:	e03b      	b.n	8009a34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	885b      	ldrh	r3, [r3, #2]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d136      	bne.n	8009a32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
 80099c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d004      	beq.n	80099d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f002 fc27 	bl	800c226 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fcf7 	bl	800a3cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099de:	7bbb      	ldrb	r3, [r7, #14]
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff fde2 	bl	80095ac <USBD_CoreFindEP>
 80099e8:	4603      	mov	r3, r0
 80099ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099ec:	7b7b      	ldrb	r3, [r7, #13]
 80099ee:	2bff      	cmp	r3, #255	; 0xff
 80099f0:	d01f      	beq.n	8009a32 <USBD_StdEPReq+0x1c6>
 80099f2:	7b7b      	ldrb	r3, [r7, #13]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d11c      	bne.n	8009a32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099f8:	7b7a      	ldrb	r2, [r7, #13]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a00:	7b7a      	ldrb	r2, [r7, #13]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32ae      	adds	r2, #174	; 0xae
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d010      	beq.n	8009a32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a10:	7b7a      	ldrb	r2, [r7, #13]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	32ae      	adds	r2, #174	; 0xae
 8009a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	4798      	blx	r3
 8009a22:	4603      	mov	r3, r0
 8009a24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a26:	e004      	b.n	8009a32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fc03 	bl	800a236 <USBD_CtlError>
              break;
 8009a30:	e000      	b.n	8009a34 <USBD_StdEPReq+0x1c8>
              break;
 8009a32:	bf00      	nop
          }
          break;
 8009a34:	e0ab      	b.n	8009b8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d002      	beq.n	8009a48 <USBD_StdEPReq+0x1dc>
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d032      	beq.n	8009aac <USBD_StdEPReq+0x240>
 8009a46:	e097      	b.n	8009b78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d007      	beq.n	8009a5e <USBD_StdEPReq+0x1f2>
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	2b80      	cmp	r3, #128	; 0x80
 8009a52:	d004      	beq.n	8009a5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fbed 	bl	800a236 <USBD_CtlError>
                break;
 8009a5c:	e091      	b.n	8009b82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da0b      	bge.n	8009a7e <USBD_StdEPReq+0x212>
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	3310      	adds	r3, #16
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	4413      	add	r3, r2
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	e00b      	b.n	8009a96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4413      	add	r3, r2
 8009a94:	3304      	adds	r3, #4
 8009a96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fc37 	bl	800a318 <USBD_CtlSendData>
              break;
 8009aaa:	e06a      	b.n	8009b82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	da11      	bge.n	8009ad8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	f003 020f 	and.w	r2, r3, #15
 8009aba:	6879      	ldr	r1, [r7, #4]
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	440b      	add	r3, r1
 8009ac6:	3324      	adds	r3, #36	; 0x24
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d117      	bne.n	8009afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fbb0 	bl	800a236 <USBD_CtlError>
                  break;
 8009ad6:	e054      	b.n	8009b82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	f003 020f 	and.w	r2, r3, #15
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d104      	bne.n	8009afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fb9d 	bl	800a236 <USBD_CtlError>
                  break;
 8009afc:	e041      	b.n	8009b82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	da0b      	bge.n	8009b1e <USBD_StdEPReq+0x2b2>
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	3310      	adds	r3, #16
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	4413      	add	r3, r2
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	e00b      	b.n	8009b36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b24:	4613      	mov	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	4413      	add	r3, r2
 8009b34:	3304      	adds	r3, #4
 8009b36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <USBD_StdEPReq+0x2d8>
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b80      	cmp	r3, #128	; 0x80
 8009b42:	d103      	bne.n	8009b4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e00e      	b.n	8009b6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f002 fb87 	bl	800c264 <USBD_LL_IsStallEP>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	e002      	b.n	8009b6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fbd1 	bl	800a318 <USBD_CtlSendData>
              break;
 8009b76:	e004      	b.n	8009b82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fb5b 	bl	800a236 <USBD_CtlError>
              break;
 8009b80:	bf00      	nop
          }
          break;
 8009b82:	e004      	b.n	8009b8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fb55 	bl	800a236 <USBD_CtlError>
          break;
 8009b8c:	bf00      	nop
      }
      break;
 8009b8e:	e005      	b.n	8009b9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fb4f 	bl	800a236 <USBD_CtlError>
      break;
 8009b98:	e000      	b.n	8009b9c <USBD_StdEPReq+0x330>
      break;
 8009b9a:	bf00      	nop
  }

  return ret;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	885b      	ldrh	r3, [r3, #2]
 8009bc2:	0a1b      	lsrs	r3, r3, #8
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	2b06      	cmp	r3, #6
 8009bca:	f200 8128 	bhi.w	8009e1e <USBD_GetDescriptor+0x276>
 8009bce:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <USBD_GetDescriptor+0x2c>)
 8009bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd4:	08009bf1 	.word	0x08009bf1
 8009bd8:	08009c09 	.word	0x08009c09
 8009bdc:	08009c49 	.word	0x08009c49
 8009be0:	08009e1f 	.word	0x08009e1f
 8009be4:	08009e1f 	.word	0x08009e1f
 8009be8:	08009dbf 	.word	0x08009dbf
 8009bec:	08009deb 	.word	0x08009deb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	7c12      	ldrb	r2, [r2, #16]
 8009bfc:	f107 0108 	add.w	r1, r7, #8
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
 8009c04:	60f8      	str	r0, [r7, #12]
      break;
 8009c06:	e112      	b.n	8009e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	7c1b      	ldrb	r3, [r3, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10d      	bne.n	8009c2c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c18:	f107 0208 	add.w	r2, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3301      	adds	r3, #1
 8009c26:	2202      	movs	r2, #2
 8009c28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c2a:	e100      	b.n	8009e2e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	f107 0208 	add.w	r2, r7, #8
 8009c38:	4610      	mov	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3301      	adds	r3, #1
 8009c42:	2202      	movs	r2, #2
 8009c44:	701a      	strb	r2, [r3, #0]
      break;
 8009c46:	e0f2      	b.n	8009e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	885b      	ldrh	r3, [r3, #2]
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b05      	cmp	r3, #5
 8009c50:	f200 80ac 	bhi.w	8009dac <USBD_GetDescriptor+0x204>
 8009c54:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <USBD_GetDescriptor+0xb4>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009c75 	.word	0x08009c75
 8009c60:	08009ca9 	.word	0x08009ca9
 8009c64:	08009cdd 	.word	0x08009cdd
 8009c68:	08009d11 	.word	0x08009d11
 8009c6c:	08009d45 	.word	0x08009d45
 8009c70:	08009d79 	.word	0x08009d79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00b      	beq.n	8009c98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	7c12      	ldrb	r2, [r2, #16]
 8009c8c:	f107 0108 	add.w	r1, r7, #8
 8009c90:	4610      	mov	r0, r2
 8009c92:	4798      	blx	r3
 8009c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c96:	e091      	b.n	8009dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 facb 	bl	800a236 <USBD_CtlError>
            err++;
 8009ca0:	7afb      	ldrb	r3, [r7, #11]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ca6:	e089      	b.n	8009dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00b      	beq.n	8009ccc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	7c12      	ldrb	r2, [r2, #16]
 8009cc0:	f107 0108 	add.w	r1, r7, #8
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4798      	blx	r3
 8009cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cca:	e077      	b.n	8009dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fab1 	bl	800a236 <USBD_CtlError>
            err++;
 8009cd4:	7afb      	ldrb	r3, [r7, #11]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cda:	e06f      	b.n	8009dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00b      	beq.n	8009d00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	7c12      	ldrb	r2, [r2, #16]
 8009cf4:	f107 0108 	add.w	r1, r7, #8
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4798      	blx	r3
 8009cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cfe:	e05d      	b.n	8009dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fa97 	bl	800a236 <USBD_CtlError>
            err++;
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d0e:	e055      	b.n	8009dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	7c12      	ldrb	r2, [r2, #16]
 8009d28:	f107 0108 	add.w	r1, r7, #8
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4798      	blx	r3
 8009d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d32:	e043      	b.n	8009dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fa7d 	bl	800a236 <USBD_CtlError>
            err++;
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	72fb      	strb	r3, [r7, #11]
          break;
 8009d42:	e03b      	b.n	8009dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00b      	beq.n	8009d68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	7c12      	ldrb	r2, [r2, #16]
 8009d5c:	f107 0108 	add.w	r1, r7, #8
 8009d60:	4610      	mov	r0, r2
 8009d62:	4798      	blx	r3
 8009d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d66:	e029      	b.n	8009dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa63 	bl	800a236 <USBD_CtlError>
            err++;
 8009d70:	7afb      	ldrb	r3, [r7, #11]
 8009d72:	3301      	adds	r3, #1
 8009d74:	72fb      	strb	r3, [r7, #11]
          break;
 8009d76:	e021      	b.n	8009dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00b      	beq.n	8009d9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	7c12      	ldrb	r2, [r2, #16]
 8009d90:	f107 0108 	add.w	r1, r7, #8
 8009d94:	4610      	mov	r0, r2
 8009d96:	4798      	blx	r3
 8009d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d9a:	e00f      	b.n	8009dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa49 	bl	800a236 <USBD_CtlError>
            err++;
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	3301      	adds	r3, #1
 8009da8:	72fb      	strb	r3, [r7, #11]
          break;
 8009daa:	e007      	b.n	8009dbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fa41 	bl	800a236 <USBD_CtlError>
          err++;
 8009db4:	7afb      	ldrb	r3, [r7, #11]
 8009db6:	3301      	adds	r3, #1
 8009db8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009dba:	bf00      	nop
      }
      break;
 8009dbc:	e037      	b.n	8009e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	7c1b      	ldrb	r3, [r3, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d109      	bne.n	8009dda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	f107 0208 	add.w	r2, r7, #8
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	4798      	blx	r3
 8009dd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dd8:	e029      	b.n	8009e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fa2a 	bl	800a236 <USBD_CtlError>
        err++;
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	3301      	adds	r3, #1
 8009de6:	72fb      	strb	r3, [r7, #11]
      break;
 8009de8:	e021      	b.n	8009e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7c1b      	ldrb	r3, [r3, #16]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10d      	bne.n	8009e0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfa:	f107 0208 	add.w	r2, r7, #8
 8009dfe:	4610      	mov	r0, r2
 8009e00:	4798      	blx	r3
 8009e02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3301      	adds	r3, #1
 8009e08:	2207      	movs	r2, #7
 8009e0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e0c:	e00f      	b.n	8009e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fa10 	bl	800a236 <USBD_CtlError>
        err++;
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e1c:	e007      	b.n	8009e2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fa08 	bl	800a236 <USBD_CtlError>
      err++;
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e2c:	bf00      	nop
  }

  if (err != 0U)
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d11e      	bne.n	8009e72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	88db      	ldrh	r3, [r3, #6]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d016      	beq.n	8009e6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e3c:	893b      	ldrh	r3, [r7, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00e      	beq.n	8009e60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	88da      	ldrh	r2, [r3, #6]
 8009e46:	893b      	ldrh	r3, [r7, #8]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	bf28      	it	cs
 8009e4c:	4613      	movcs	r3, r2
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e52:	893b      	ldrh	r3, [r7, #8]
 8009e54:	461a      	mov	r2, r3
 8009e56:	68f9      	ldr	r1, [r7, #12]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fa5d 	bl	800a318 <USBD_CtlSendData>
 8009e5e:	e009      	b.n	8009e74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f9e7 	bl	800a236 <USBD_CtlError>
 8009e68:	e004      	b.n	8009e74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 faae 	bl	800a3cc <USBD_CtlSendStatus>
 8009e70:	e000      	b.n	8009e74 <USBD_GetDescriptor+0x2cc>
    return;
 8009e72:	bf00      	nop
  }
}
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop

08009e7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	889b      	ldrh	r3, [r3, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d131      	bne.n	8009ef2 <USBD_SetAddress+0x76>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	88db      	ldrh	r3, [r3, #6]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d12d      	bne.n	8009ef2 <USBD_SetAddress+0x76>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e9c:	d829      	bhi.n	8009ef2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	885b      	ldrh	r3, [r3, #2]
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d104      	bne.n	8009ec0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f9bc 	bl	800a236 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ebe:	e01d      	b.n	8009efc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	7bfa      	ldrb	r2, [r7, #15]
 8009ec4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f002 f9f5 	bl	800c2bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa7a 	bl	800a3cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee6:	e009      	b.n	8009efc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef0:	e004      	b.n	8009efc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f99e 	bl	800a236 <USBD_CtlError>
  }
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	885b      	ldrh	r3, [r3, #2]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	4b4e      	ldr	r3, [pc, #312]	; (800a054 <USBD_SetConfig+0x150>)
 8009f1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f1c:	4b4d      	ldr	r3, [pc, #308]	; (800a054 <USBD_SetConfig+0x150>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d905      	bls.n	8009f30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f985 	bl	800a236 <USBD_CtlError>
    return USBD_FAIL;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e08c      	b.n	800a04a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d002      	beq.n	8009f42 <USBD_SetConfig+0x3e>
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d029      	beq.n	8009f94 <USBD_SetConfig+0x90>
 8009f40:	e075      	b.n	800a02e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f42:	4b44      	ldr	r3, [pc, #272]	; (800a054 <USBD_SetConfig+0x150>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d020      	beq.n	8009f8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f4a:	4b42      	ldr	r3, [pc, #264]	; (800a054 <USBD_SetConfig+0x150>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f54:	4b3f      	ldr	r3, [pc, #252]	; (800a054 <USBD_SetConfig+0x150>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7fe ffe7 	bl	8008f2e <USBD_SetClassConfig>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d008      	beq.n	8009f7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f962 	bl	800a236 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2202      	movs	r2, #2
 8009f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f7a:	e065      	b.n	800a048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fa25 	bl	800a3cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2203      	movs	r2, #3
 8009f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f8a:	e05d      	b.n	800a048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fa1d 	bl	800a3cc <USBD_CtlSendStatus>
      break;
 8009f92:	e059      	b.n	800a048 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f94:	4b2f      	ldr	r3, [pc, #188]	; (800a054 <USBD_SetConfig+0x150>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d112      	bne.n	8009fc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009fa4:	4b2b      	ldr	r3, [pc, #172]	; (800a054 <USBD_SetConfig+0x150>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fae:	4b29      	ldr	r3, [pc, #164]	; (800a054 <USBD_SetConfig+0x150>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7fe ffd6 	bl	8008f66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa06 	bl	800a3cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fc0:	e042      	b.n	800a048 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009fc2:	4b24      	ldr	r3, [pc, #144]	; (800a054 <USBD_SetConfig+0x150>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d02a      	beq.n	800a026 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7fe ffc4 	bl	8008f66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fde:	4b1d      	ldr	r3, [pc, #116]	; (800a054 <USBD_SetConfig+0x150>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fe8:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <USBD_SetConfig+0x150>)
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7fe ff9d 	bl	8008f2e <USBD_SetClassConfig>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00f      	beq.n	800a01e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f918 	bl	800a236 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7fe ffa9 	bl	8008f66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2202      	movs	r2, #2
 800a018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a01c:	e014      	b.n	800a048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f9d4 	bl	800a3cc <USBD_CtlSendStatus>
      break;
 800a024:	e010      	b.n	800a048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f9d0 	bl	800a3cc <USBD_CtlSendStatus>
      break;
 800a02c:	e00c      	b.n	800a048 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f900 	bl	800a236 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a036:	4b07      	ldr	r3, [pc, #28]	; (800a054 <USBD_SetConfig+0x150>)
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	4619      	mov	r1, r3
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7fe ff92 	bl	8008f66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a042:	2303      	movs	r3, #3
 800a044:	73fb      	strb	r3, [r7, #15]
      break;
 800a046:	bf00      	nop
  }

  return ret;
 800a048:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20000554 	.word	0x20000554

0800a058 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	88db      	ldrh	r3, [r3, #6]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d004      	beq.n	800a074 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f8e2 	bl	800a236 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a072:	e023      	b.n	800a0bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	dc02      	bgt.n	800a086 <USBD_GetConfig+0x2e>
 800a080:	2b00      	cmp	r3, #0
 800a082:	dc03      	bgt.n	800a08c <USBD_GetConfig+0x34>
 800a084:	e015      	b.n	800a0b2 <USBD_GetConfig+0x5a>
 800a086:	2b03      	cmp	r3, #3
 800a088:	d00b      	beq.n	800a0a2 <USBD_GetConfig+0x4a>
 800a08a:	e012      	b.n	800a0b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3308      	adds	r3, #8
 800a096:	2201      	movs	r2, #1
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f93c 	bl	800a318 <USBD_CtlSendData>
        break;
 800a0a0:	e00c      	b.n	800a0bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f934 	bl	800a318 <USBD_CtlSendData>
        break;
 800a0b0:	e004      	b.n	800a0bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f8be 	bl	800a236 <USBD_CtlError>
        break;
 800a0ba:	bf00      	nop
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d81e      	bhi.n	800a11a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	88db      	ldrh	r3, [r3, #6]
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d004      	beq.n	800a0ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f8a5 	bl	800a236 <USBD_CtlError>
        break;
 800a0ec:	e01a      	b.n	800a124 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d005      	beq.n	800a10a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f043 0202 	orr.w	r2, r3, #2
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	330c      	adds	r3, #12
 800a10e:	2202      	movs	r2, #2
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f900 	bl	800a318 <USBD_CtlSendData>
      break;
 800a118:	e004      	b.n	800a124 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f88a 	bl	800a236 <USBD_CtlError>
      break;
 800a122:	bf00      	nop
  }
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	885b      	ldrh	r3, [r3, #2]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d107      	bne.n	800a14e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f940 	bl	800a3cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a14c:	e013      	b.n	800a176 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	885b      	ldrh	r3, [r3, #2]
 800a152:	2b02      	cmp	r3, #2
 800a154:	d10b      	bne.n	800a16e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	889b      	ldrh	r3, [r3, #4]
 800a15a:	0a1b      	lsrs	r3, r3, #8
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f930 	bl	800a3cc <USBD_CtlSendStatus>
}
 800a16c:	e003      	b.n	800a176 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f860 	bl	800a236 <USBD_CtlError>
}
 800a176:	bf00      	nop
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b082      	sub	sp, #8
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	3b01      	subs	r3, #1
 800a192:	2b02      	cmp	r3, #2
 800a194:	d80b      	bhi.n	800a1ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	885b      	ldrh	r3, [r3, #2]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d10c      	bne.n	800a1b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f910 	bl	800a3cc <USBD_CtlSendStatus>
      }
      break;
 800a1ac:	e004      	b.n	800a1b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f840 	bl	800a236 <USBD_CtlError>
      break;
 800a1b6:	e000      	b.n	800a1ba <USBD_ClrFeature+0x3c>
      break;
 800a1b8:	bf00      	nop
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	781a      	ldrb	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	781a      	ldrb	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff fa41 	bl	8009674 <SWAPBYTE>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	3301      	adds	r3, #1
 800a204:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f7ff fa34 	bl	8009674 <SWAPBYTE>
 800a20c:	4603      	mov	r3, r0
 800a20e:	461a      	mov	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3301      	adds	r3, #1
 800a218:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3301      	adds	r3, #1
 800a21e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f7ff fa27 	bl	8009674 <SWAPBYTE>
 800a226:	4603      	mov	r3, r0
 800a228:	461a      	mov	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	80da      	strh	r2, [r3, #6]
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b082      	sub	sp, #8
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a240:	2180      	movs	r1, #128	; 0x80
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 ffd0 	bl	800c1e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a248:	2100      	movs	r1, #0
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 ffcc 	bl	800c1e8 <USBD_LL_StallEP>
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d036      	beq.n	800a2dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a272:	6938      	ldr	r0, [r7, #16]
 800a274:	f000 f836 	bl	800a2e4 <USBD_GetLen>
 800a278:	4603      	mov	r3, r0
 800a27a:	3301      	adds	r3, #1
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	b29a      	uxth	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a286:	7dfb      	ldrb	r3, [r7, #23]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	4413      	add	r3, r2
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	7812      	ldrb	r2, [r2, #0]
 800a290:	701a      	strb	r2, [r3, #0]
  idx++;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	3301      	adds	r3, #1
 800a296:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	4413      	add	r3, r2
 800a29e:	2203      	movs	r2, #3
 800a2a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a2a8:	e013      	b.n	800a2d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	7812      	ldrb	r2, [r2, #0]
 800a2b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	613b      	str	r3, [r7, #16]
    idx++;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1e7      	bne.n	800a2aa <USBD_GetString+0x52>
 800a2da:	e000      	b.n	800a2de <USBD_GetString+0x86>
    return;
 800a2dc:	bf00      	nop
  }
}
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2f4:	e005      	b.n	800a302 <USBD_GetLen+0x1e>
  {
    len++;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	3301      	adds	r3, #1
 800a300:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1f5      	bne.n	800a2f6 <USBD_GetLen+0x12>
  }

  return len;
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2202      	movs	r2, #2
 800a328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	2100      	movs	r1, #0
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f001 ffdb 	bl	800c2fa <USBD_LL_Transmit>

  return USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	2100      	movs	r1, #0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f001 ffca 	bl	800c2fa <USBD_LL_Transmit>

  return USBD_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2203      	movs	r2, #3
 800a380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	2100      	movs	r1, #0
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f001 ffce 	bl	800c33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f001 ffbd 	bl	800c33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2204      	movs	r2, #4
 800a3d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3dc:	2300      	movs	r3, #0
 800a3de:	2200      	movs	r2, #0
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 ff89 	bl	800c2fa <USBD_LL_Transmit>

  return USBD_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2205      	movs	r2, #5
 800a3fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a402:	2300      	movs	r3, #0
 800a404:	2200      	movs	r2, #0
 800a406:	2100      	movs	r1, #0
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 ff97 	bl	800c33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a422:	2300      	movs	r3, #0
 800a424:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 800a426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a42a:	2b84      	cmp	r3, #132	; 0x84
 800a42c:	d005      	beq.n	800a43a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a42e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4413      	add	r3, r2
 800a436:	3303      	adds	r3, #3
 800a438:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 800a43a:	68fb      	ldr	r3, [r7, #12]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a44c:	f000 fb6e 	bl	800ab2c <vTaskStartScheduler>

  return osOK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	bd80      	pop	{r7, pc}

0800a456 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a456:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a458:	b089      	sub	sp, #36	; 0x24
 800a45a:	af04      	add	r7, sp, #16
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d020      	beq.n	800a4aa <osThreadCreate+0x54>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d01c      	beq.n	800a4aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685c      	ldr	r4, [r3, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691e      	ldr	r6, [r3, #16]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a482:	4618      	mov	r0, r3
 800a484:	f7ff ffc8 	bl	800a418 <makeFreeRtosPriority>
 800a488:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a492:	9202      	str	r2, [sp, #8]
 800a494:	9301      	str	r3, [sp, #4]
 800a496:	9100      	str	r1, [sp, #0]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	4632      	mov	r2, r6
 800a49c:	4629      	mov	r1, r5
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 f8ed 	bl	800a67e <xTaskCreateStatic>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	e01c      	b.n	800a4e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685c      	ldr	r4, [r3, #4]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4b6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff ffaa 	bl	800a418 <makeFreeRtosPriority>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	f107 030c 	add.w	r3, r7, #12
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	9200      	str	r2, [sp, #0]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 f92f 	bl	800a738 <xTaskCreate>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d001      	beq.n	800a4e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e000      	b.n	800a4e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <osDelay+0x16>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	e000      	b.n	800a506 <osDelay+0x18>
 800a504:	2301      	movs	r3, #1
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fadc 	bl	800aac4 <vTaskDelay>

  return osOK;
 800a50c:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f103 0208 	add.w	r2, r3, #8
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a52e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f103 0208 	add.w	r2, r3, #8
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f103 0208 	add.w	r2, r3, #8
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a556:	b480      	push	{r7}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	601a      	str	r2, [r3, #0]
}
 800a5ac:	bf00      	nop
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5ce:	d103      	bne.n	800a5d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	60fb      	str	r3, [r7, #12]
 800a5d6:	e00c      	b.n	800a5f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	e002      	b.n	800a5e6 <vListInsert+0x2e>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d2f6      	bcs.n	800a5e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	1c5a      	adds	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	601a      	str	r2, [r3, #0]
}
 800a61e:	bf00      	nop
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a62a:	b480      	push	{r7}
 800a62c:	b085      	sub	sp, #20
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6892      	ldr	r2, [r2, #8]
 800a640:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	6852      	ldr	r2, [r2, #4]
 800a64a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	429a      	cmp	r2, r3
 800a654:	d103      	bne.n	800a65e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	1e5a      	subs	r2, r3, #1
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b08e      	sub	sp, #56	; 0x38
 800a682:	af04      	add	r7, sp, #16
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	623b      	str	r3, [r7, #32]
}
 800a6a4:	bf00      	nop
 800a6a6:	e7fe      	b.n	800a6a6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10a      	bne.n	800a6c4 <xTaskCreateStatic+0x46>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	61fb      	str	r3, [r7, #28]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a6c4:	2354      	movs	r3, #84	; 0x54
 800a6c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2b54      	cmp	r3, #84	; 0x54
 800a6cc:	d00a      	beq.n	800a6e4 <xTaskCreateStatic+0x66>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	61bb      	str	r3, [r7, #24]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d01e      	beq.n	800a72a <xTaskCreateStatic+0xac>
 800a6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d01b      	beq.n	800a72a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	2202      	movs	r2, #2
 800a700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a704:	2300      	movs	r3, #0
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	9302      	str	r3, [sp, #8]
 800a70c:	f107 0314 	add.w	r3, r7, #20
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	68b9      	ldr	r1, [r7, #8]
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 f850 	bl	800a7c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a724:	f000 f8d4 	bl	800a8d0 <prvAddNewTaskToReadyList>
 800a728:	e001      	b.n	800a72e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a72e:	697b      	ldr	r3, [r7, #20]
	}
 800a730:	4618      	mov	r0, r3
 800a732:	3728      	adds	r7, #40	; 0x28
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08c      	sub	sp, #48	; 0x30
 800a73c:	af04      	add	r7, sp, #16
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	4613      	mov	r3, r2
 800a746:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a748:	88fb      	ldrh	r3, [r7, #6]
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 ff73 	bl	800b638 <pvPortMalloc>
 800a752:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00e      	beq.n	800a778 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a75a:	2054      	movs	r0, #84	; 0x54
 800a75c:	f000 ff6c 	bl	800b638 <pvPortMalloc>
 800a760:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d003      	beq.n	800a770 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	631a      	str	r2, [r3, #48]	; 0x30
 800a76e:	e005      	b.n	800a77c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a770:	6978      	ldr	r0, [r7, #20]
 800a772:	f001 f82d 	bl	800b7d0 <vPortFree>
 800a776:	e001      	b.n	800a77c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a778:	2300      	movs	r3, #0
 800a77a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d017      	beq.n	800a7b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a78a:	88fa      	ldrh	r2, [r7, #6]
 800a78c:	2300      	movs	r3, #0
 800a78e:	9303      	str	r3, [sp, #12]
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	9302      	str	r3, [sp, #8]
 800a794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	68b9      	ldr	r1, [r7, #8]
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 f80e 	bl	800a7c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7a6:	69f8      	ldr	r0, [r7, #28]
 800a7a8:	f000 f892 	bl	800a8d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	61bb      	str	r3, [r7, #24]
 800a7b0:	e002      	b.n	800a7b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a7b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a7b8:	69bb      	ldr	r3, [r7, #24]
	}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3720      	adds	r7, #32
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b088      	sub	sp, #32
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	607a      	str	r2, [r7, #4]
 800a7ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	f023 0307 	bic.w	r3, r3, #7
 800a7e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	f003 0307 	and.w	r3, r3, #7
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00a      	beq.n	800a80a <prvInitialiseNewTask+0x48>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	617b      	str	r3, [r7, #20]
}
 800a806:	bf00      	nop
 800a808:	e7fe      	b.n	800a808 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d01f      	beq.n	800a850 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a810:	2300      	movs	r3, #0
 800a812:	61fb      	str	r3, [r7, #28]
 800a814:	e012      	b.n	800a83c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	4413      	add	r3, r2
 800a81c:	7819      	ldrb	r1, [r3, #0]
 800a81e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	4413      	add	r3, r2
 800a824:	3334      	adds	r3, #52	; 0x34
 800a826:	460a      	mov	r2, r1
 800a828:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	4413      	add	r3, r2
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d006      	beq.n	800a844 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	3301      	adds	r3, #1
 800a83a:	61fb      	str	r3, [r7, #28]
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	2b0f      	cmp	r3, #15
 800a840:	d9e9      	bls.n	800a816 <prvInitialiseNewTask+0x54>
 800a842:	e000      	b.n	800a846 <prvInitialiseNewTask+0x84>
			{
				break;
 800a844:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a84e:	e003      	b.n	800a858 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	2200      	movs	r2, #0
 800a854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	2b06      	cmp	r3, #6
 800a85c:	d901      	bls.n	800a862 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a85e:	2306      	movs	r3, #6
 800a860:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a866:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a86c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	2200      	movs	r2, #0
 800a872:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	3304      	adds	r3, #4
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff fe6c 	bl	800a556 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	3318      	adds	r3, #24
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff fe67 	bl	800a556 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a88c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	f1c3 0207 	rsb	r2, r3, #7
 800a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a896:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a89c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	69b8      	ldr	r0, [r7, #24]
 800a8b2:	f000 fcb3 	bl	800b21c <pxPortInitialiseStack>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d002      	beq.n	800a8c8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8c8:	bf00      	nop
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8d8:	f000 fdcc 	bl	800b474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8dc:	4b2a      	ldr	r3, [pc, #168]	; (800a988 <prvAddNewTaskToReadyList+0xb8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	4a29      	ldr	r2, [pc, #164]	; (800a988 <prvAddNewTaskToReadyList+0xb8>)
 800a8e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8e6:	4b29      	ldr	r3, [pc, #164]	; (800a98c <prvAddNewTaskToReadyList+0xbc>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d109      	bne.n	800a902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8ee:	4a27      	ldr	r2, [pc, #156]	; (800a98c <prvAddNewTaskToReadyList+0xbc>)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8f4:	4b24      	ldr	r3, [pc, #144]	; (800a988 <prvAddNewTaskToReadyList+0xb8>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d110      	bne.n	800a91e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8fc:	f000 fb4c 	bl	800af98 <prvInitialiseTaskLists>
 800a900:	e00d      	b.n	800a91e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a902:	4b23      	ldr	r3, [pc, #140]	; (800a990 <prvAddNewTaskToReadyList+0xc0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a90a:	4b20      	ldr	r3, [pc, #128]	; (800a98c <prvAddNewTaskToReadyList+0xbc>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	429a      	cmp	r2, r3
 800a916:	d802      	bhi.n	800a91e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a918:	4a1c      	ldr	r2, [pc, #112]	; (800a98c <prvAddNewTaskToReadyList+0xbc>)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a91e:	4b1d      	ldr	r3, [pc, #116]	; (800a994 <prvAddNewTaskToReadyList+0xc4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a1b      	ldr	r2, [pc, #108]	; (800a994 <prvAddNewTaskToReadyList+0xc4>)
 800a926:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	2201      	movs	r2, #1
 800a92e:	409a      	lsls	r2, r3
 800a930:	4b19      	ldr	r3, [pc, #100]	; (800a998 <prvAddNewTaskToReadyList+0xc8>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4313      	orrs	r3, r2
 800a936:	4a18      	ldr	r2, [pc, #96]	; (800a998 <prvAddNewTaskToReadyList+0xc8>)
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93e:	4613      	mov	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4a15      	ldr	r2, [pc, #84]	; (800a99c <prvAddNewTaskToReadyList+0xcc>)
 800a948:	441a      	add	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f7ff fe0d 	bl	800a570 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a956:	f000 fdbd 	bl	800b4d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a95a:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <prvAddNewTaskToReadyList+0xc0>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00e      	beq.n	800a980 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a962:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <prvAddNewTaskToReadyList+0xbc>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d207      	bcs.n	800a980 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a970:	4b0b      	ldr	r3, [pc, #44]	; (800a9a0 <prvAddNewTaskToReadyList+0xd0>)
 800a972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20000658 	.word	0x20000658
 800a98c:	20000558 	.word	0x20000558
 800a990:	20000664 	.word	0x20000664
 800a994:	20000674 	.word	0x20000674
 800a998:	20000660 	.word	0x20000660
 800a99c:	2000055c 	.word	0x2000055c
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a9ac:	f000 fd62 	bl	800b474 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d102      	bne.n	800a9bc <vTaskDelete+0x18>
 800a9b6:	4b39      	ldr	r3, [pc, #228]	; (800aa9c <vTaskDelete+0xf8>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	e000      	b.n	800a9be <vTaskDelete+0x1a>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff fe30 	bl	800a62a <uxListRemove>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d115      	bne.n	800a9fc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d4:	4932      	ldr	r1, [pc, #200]	; (800aaa0 <vTaskDelete+0xfc>)
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	440b      	add	r3, r1
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10a      	bne.n	800a9fc <vTaskDelete+0x58>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f0:	43da      	mvns	r2, r3
 800a9f2:	4b2c      	ldr	r3, [pc, #176]	; (800aaa4 <vTaskDelete+0x100>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	4a2a      	ldr	r2, [pc, #168]	; (800aaa4 <vTaskDelete+0x100>)
 800a9fa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d004      	beq.n	800aa0e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3318      	adds	r3, #24
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff fe0e 	bl	800a62a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800aa0e:	4b26      	ldr	r3, [pc, #152]	; (800aaa8 <vTaskDelete+0x104>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3301      	adds	r3, #1
 800aa14:	4a24      	ldr	r2, [pc, #144]	; (800aaa8 <vTaskDelete+0x104>)
 800aa16:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800aa18:	4b20      	ldr	r3, [pc, #128]	; (800aa9c <vTaskDelete+0xf8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d10b      	bne.n	800aa3a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3304      	adds	r3, #4
 800aa26:	4619      	mov	r1, r3
 800aa28:	4820      	ldr	r0, [pc, #128]	; (800aaac <vTaskDelete+0x108>)
 800aa2a:	f7ff fda1 	bl	800a570 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800aa2e:	4b20      	ldr	r3, [pc, #128]	; (800aab0 <vTaskDelete+0x10c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	4a1e      	ldr	r2, [pc, #120]	; (800aab0 <vTaskDelete+0x10c>)
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	e009      	b.n	800aa4e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800aa3a:	4b1e      	ldr	r3, [pc, #120]	; (800aab4 <vTaskDelete+0x110>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	4a1c      	ldr	r2, [pc, #112]	; (800aab4 <vTaskDelete+0x110>)
 800aa42:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fb15 	bl	800b074 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800aa4a:	f000 fb43 	bl	800b0d4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800aa4e:	f000 fd41 	bl	800b4d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800aa52:	4b19      	ldr	r3, [pc, #100]	; (800aab8 <vTaskDelete+0x114>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d01b      	beq.n	800aa92 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800aa5a:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <vTaskDelete+0xf8>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d116      	bne.n	800aa92 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800aa64:	4b15      	ldr	r3, [pc, #84]	; (800aabc <vTaskDelete+0x118>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00a      	beq.n	800aa82 <vTaskDelete+0xde>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	60bb      	str	r3, [r7, #8]
}
 800aa7e:	bf00      	nop
 800aa80:	e7fe      	b.n	800aa80 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800aa82:	4b0f      	ldr	r3, [pc, #60]	; (800aac0 <vTaskDelete+0x11c>)
 800aa84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa92:	bf00      	nop
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000558 	.word	0x20000558
 800aaa0:	2000055c 	.word	0x2000055c
 800aaa4:	20000660 	.word	0x20000660
 800aaa8:	20000674 	.word	0x20000674
 800aaac:	2000062c 	.word	0x2000062c
 800aab0:	20000640 	.word	0x20000640
 800aab4:	20000658 	.word	0x20000658
 800aab8:	20000664 	.word	0x20000664
 800aabc:	20000680 	.word	0x20000680
 800aac0:	e000ed04 	.word	0xe000ed04

0800aac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aacc:	2300      	movs	r3, #0
 800aace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d017      	beq.n	800ab06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aad6:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <vTaskDelay+0x60>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00a      	beq.n	800aaf4 <vTaskDelay+0x30>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60bb      	str	r3, [r7, #8]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aaf4:	f000 f87a 	bl	800abec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb28 	bl	800b150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab00:	f000 f882 	bl	800ac08 <xTaskResumeAll>
 800ab04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d107      	bne.n	800ab1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ab0c:	4b06      	ldr	r3, [pc, #24]	; (800ab28 <vTaskDelay+0x64>)
 800ab0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab1c:	bf00      	nop
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20000680 	.word	0x20000680
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08a      	sub	sp, #40	; 0x28
 800ab30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab3a:	463a      	mov	r2, r7
 800ab3c:	1d39      	adds	r1, r7, #4
 800ab3e:	f107 0308 	add.w	r3, r7, #8
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7f6 fc80 	bl	8001448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	9202      	str	r2, [sp, #8]
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	2300      	movs	r3, #0
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	2300      	movs	r3, #0
 800ab58:	460a      	mov	r2, r1
 800ab5a:	491e      	ldr	r1, [pc, #120]	; (800abd4 <vTaskStartScheduler+0xa8>)
 800ab5c:	481e      	ldr	r0, [pc, #120]	; (800abd8 <vTaskStartScheduler+0xac>)
 800ab5e:	f7ff fd8e 	bl	800a67e <xTaskCreateStatic>
 800ab62:	4603      	mov	r3, r0
 800ab64:	4a1d      	ldr	r2, [pc, #116]	; (800abdc <vTaskStartScheduler+0xb0>)
 800ab66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab68:	4b1c      	ldr	r3, [pc, #112]	; (800abdc <vTaskStartScheduler+0xb0>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab70:	2301      	movs	r3, #1
 800ab72:	617b      	str	r3, [r7, #20]
 800ab74:	e001      	b.n	800ab7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab76:	2300      	movs	r3, #0
 800ab78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d116      	bne.n	800abae <vTaskStartScheduler+0x82>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	613b      	str	r3, [r7, #16]
}
 800ab92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab94:	4b12      	ldr	r3, [pc, #72]	; (800abe0 <vTaskStartScheduler+0xb4>)
 800ab96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab9c:	4b11      	ldr	r3, [pc, #68]	; (800abe4 <vTaskStartScheduler+0xb8>)
 800ab9e:	2201      	movs	r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aba2:	4b11      	ldr	r3, [pc, #68]	; (800abe8 <vTaskStartScheduler+0xbc>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aba8:	f000 fbc2 	bl	800b330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800abac:	e00e      	b.n	800abcc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abb4:	d10a      	bne.n	800abcc <vTaskStartScheduler+0xa0>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	60fb      	str	r3, [r7, #12]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <vTaskStartScheduler+0x9e>
}
 800abcc:	bf00      	nop
 800abce:	3718      	adds	r7, #24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	0800d4dc 	.word	0x0800d4dc
 800abd8:	0800af69 	.word	0x0800af69
 800abdc:	2000067c 	.word	0x2000067c
 800abe0:	20000678 	.word	0x20000678
 800abe4:	20000664 	.word	0x20000664
 800abe8:	2000065c 	.word	0x2000065c

0800abec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abec:	b480      	push	{r7}
 800abee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800abf0:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <vTaskSuspendAll+0x18>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3301      	adds	r3, #1
 800abf6:	4a03      	ldr	r2, [pc, #12]	; (800ac04 <vTaskSuspendAll+0x18>)
 800abf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800abfa:	bf00      	nop
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	20000680 	.word	0x20000680

0800ac08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac16:	4b41      	ldr	r3, [pc, #260]	; (800ad1c <xTaskResumeAll+0x114>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10a      	bne.n	800ac34 <xTaskResumeAll+0x2c>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	603b      	str	r3, [r7, #0]
}
 800ac30:	bf00      	nop
 800ac32:	e7fe      	b.n	800ac32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac34:	f000 fc1e 	bl	800b474 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac38:	4b38      	ldr	r3, [pc, #224]	; (800ad1c <xTaskResumeAll+0x114>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4a37      	ldr	r2, [pc, #220]	; (800ad1c <xTaskResumeAll+0x114>)
 800ac40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac42:	4b36      	ldr	r3, [pc, #216]	; (800ad1c <xTaskResumeAll+0x114>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d161      	bne.n	800ad0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac4a:	4b35      	ldr	r3, [pc, #212]	; (800ad20 <xTaskResumeAll+0x118>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d05d      	beq.n	800ad0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac52:	e02e      	b.n	800acb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac54:	4b33      	ldr	r3, [pc, #204]	; (800ad24 <xTaskResumeAll+0x11c>)
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3318      	adds	r3, #24
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff fce2 	bl	800a62a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7ff fcdd 	bl	800a62a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	2201      	movs	r2, #1
 800ac76:	409a      	lsls	r2, r3
 800ac78:	4b2b      	ldr	r3, [pc, #172]	; (800ad28 <xTaskResumeAll+0x120>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	4a2a      	ldr	r2, [pc, #168]	; (800ad28 <xTaskResumeAll+0x120>)
 800ac80:	6013      	str	r3, [r2, #0]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4a27      	ldr	r2, [pc, #156]	; (800ad2c <xTaskResumeAll+0x124>)
 800ac90:	441a      	add	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3304      	adds	r3, #4
 800ac96:	4619      	mov	r1, r3
 800ac98:	4610      	mov	r0, r2
 800ac9a:	f7ff fc69 	bl	800a570 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca2:	4b23      	ldr	r3, [pc, #140]	; (800ad30 <xTaskResumeAll+0x128>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d302      	bcc.n	800acb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800acac:	4b21      	ldr	r3, [pc, #132]	; (800ad34 <xTaskResumeAll+0x12c>)
 800acae:	2201      	movs	r2, #1
 800acb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acb2:	4b1c      	ldr	r3, [pc, #112]	; (800ad24 <xTaskResumeAll+0x11c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1cc      	bne.n	800ac54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800acc0:	f000 fa08 	bl	800b0d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800acc4:	4b1c      	ldr	r3, [pc, #112]	; (800ad38 <xTaskResumeAll+0x130>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d010      	beq.n	800acf2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800acd0:	f000 f836 	bl	800ad40 <xTaskIncrementTick>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800acda:	4b16      	ldr	r3, [pc, #88]	; (800ad34 <xTaskResumeAll+0x12c>)
 800acdc:	2201      	movs	r2, #1
 800acde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1f1      	bne.n	800acd0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800acec:	4b12      	ldr	r3, [pc, #72]	; (800ad38 <xTaskResumeAll+0x130>)
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acf2:	4b10      	ldr	r3, [pc, #64]	; (800ad34 <xTaskResumeAll+0x12c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d009      	beq.n	800ad0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acfa:	2301      	movs	r3, #1
 800acfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acfe:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <xTaskResumeAll+0x134>)
 800ad00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad0e:	f000 fbe1 	bl	800b4d4 <vPortExitCritical>

	return xAlreadyYielded;
 800ad12:	68bb      	ldr	r3, [r7, #8]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	20000680 	.word	0x20000680
 800ad20:	20000658 	.word	0x20000658
 800ad24:	20000618 	.word	0x20000618
 800ad28:	20000660 	.word	0x20000660
 800ad2c:	2000055c 	.word	0x2000055c
 800ad30:	20000558 	.word	0x20000558
 800ad34:	2000066c 	.word	0x2000066c
 800ad38:	20000668 	.word	0x20000668
 800ad3c:	e000ed04 	.word	0xe000ed04

0800ad40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad4a:	4b4e      	ldr	r3, [pc, #312]	; (800ae84 <xTaskIncrementTick+0x144>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f040 808e 	bne.w	800ae70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad54:	4b4c      	ldr	r3, [pc, #304]	; (800ae88 <xTaskIncrementTick+0x148>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad5c:	4a4a      	ldr	r2, [pc, #296]	; (800ae88 <xTaskIncrementTick+0x148>)
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d120      	bne.n	800adaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad68:	4b48      	ldr	r3, [pc, #288]	; (800ae8c <xTaskIncrementTick+0x14c>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00a      	beq.n	800ad88 <xTaskIncrementTick+0x48>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	603b      	str	r3, [r7, #0]
}
 800ad84:	bf00      	nop
 800ad86:	e7fe      	b.n	800ad86 <xTaskIncrementTick+0x46>
 800ad88:	4b40      	ldr	r3, [pc, #256]	; (800ae8c <xTaskIncrementTick+0x14c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	4b40      	ldr	r3, [pc, #256]	; (800ae90 <xTaskIncrementTick+0x150>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a3e      	ldr	r2, [pc, #248]	; (800ae8c <xTaskIncrementTick+0x14c>)
 800ad94:	6013      	str	r3, [r2, #0]
 800ad96:	4a3e      	ldr	r2, [pc, #248]	; (800ae90 <xTaskIncrementTick+0x150>)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	4b3d      	ldr	r3, [pc, #244]	; (800ae94 <xTaskIncrementTick+0x154>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3301      	adds	r3, #1
 800ada2:	4a3c      	ldr	r2, [pc, #240]	; (800ae94 <xTaskIncrementTick+0x154>)
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	f000 f995 	bl	800b0d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adaa:	4b3b      	ldr	r3, [pc, #236]	; (800ae98 <xTaskIncrementTick+0x158>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d348      	bcc.n	800ae46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adb4:	4b35      	ldr	r3, [pc, #212]	; (800ae8c <xTaskIncrementTick+0x14c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d104      	bne.n	800adc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adbe:	4b36      	ldr	r3, [pc, #216]	; (800ae98 <xTaskIncrementTick+0x158>)
 800adc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adc4:	601a      	str	r2, [r3, #0]
					break;
 800adc6:	e03e      	b.n	800ae46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adc8:	4b30      	ldr	r3, [pc, #192]	; (800ae8c <xTaskIncrementTick+0x14c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d203      	bcs.n	800ade8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ade0:	4a2d      	ldr	r2, [pc, #180]	; (800ae98 <xTaskIncrementTick+0x158>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ade6:	e02e      	b.n	800ae46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	3304      	adds	r3, #4
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fc1c 	bl	800a62a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d004      	beq.n	800ae04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	3318      	adds	r3, #24
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fc13 	bl	800a62a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	2201      	movs	r2, #1
 800ae0a:	409a      	lsls	r2, r3
 800ae0c:	4b23      	ldr	r3, [pc, #140]	; (800ae9c <xTaskIncrementTick+0x15c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	4a22      	ldr	r2, [pc, #136]	; (800ae9c <xTaskIncrementTick+0x15c>)
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4a1f      	ldr	r2, [pc, #124]	; (800aea0 <xTaskIncrementTick+0x160>)
 800ae24:	441a      	add	r2, r3
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	f7ff fb9f 	bl	800a570 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae36:	4b1b      	ldr	r3, [pc, #108]	; (800aea4 <xTaskIncrementTick+0x164>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d3b9      	bcc.n	800adb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae40:	2301      	movs	r3, #1
 800ae42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae44:	e7b6      	b.n	800adb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae46:	4b17      	ldr	r3, [pc, #92]	; (800aea4 <xTaskIncrementTick+0x164>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae4c:	4914      	ldr	r1, [pc, #80]	; (800aea0 <xTaskIncrementTick+0x160>)
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	440b      	add	r3, r1
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d901      	bls.n	800ae62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae62:	4b11      	ldr	r3, [pc, #68]	; (800aea8 <xTaskIncrementTick+0x168>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d007      	beq.n	800ae7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	617b      	str	r3, [r7, #20]
 800ae6e:	e004      	b.n	800ae7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae70:	4b0e      	ldr	r3, [pc, #56]	; (800aeac <xTaskIncrementTick+0x16c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	4a0d      	ldr	r2, [pc, #52]	; (800aeac <xTaskIncrementTick+0x16c>)
 800ae78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae7a:	697b      	ldr	r3, [r7, #20]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	20000680 	.word	0x20000680
 800ae88:	2000065c 	.word	0x2000065c
 800ae8c:	20000610 	.word	0x20000610
 800ae90:	20000614 	.word	0x20000614
 800ae94:	20000670 	.word	0x20000670
 800ae98:	20000678 	.word	0x20000678
 800ae9c:	20000660 	.word	0x20000660
 800aea0:	2000055c 	.word	0x2000055c
 800aea4:	20000558 	.word	0x20000558
 800aea8:	2000066c 	.word	0x2000066c
 800aeac:	20000668 	.word	0x20000668

0800aeb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aeb6:	4b27      	ldr	r3, [pc, #156]	; (800af54 <vTaskSwitchContext+0xa4>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aebe:	4b26      	ldr	r3, [pc, #152]	; (800af58 <vTaskSwitchContext+0xa8>)
 800aec0:	2201      	movs	r2, #1
 800aec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aec4:	e03f      	b.n	800af46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800aec6:	4b24      	ldr	r3, [pc, #144]	; (800af58 <vTaskSwitchContext+0xa8>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aecc:	4b23      	ldr	r3, [pc, #140]	; (800af5c <vTaskSwitchContext+0xac>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	fab3 f383 	clz	r3, r3
 800aed8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	f1c3 031f 	rsb	r3, r3, #31
 800aee0:	617b      	str	r3, [r7, #20]
 800aee2:	491f      	ldr	r1, [pc, #124]	; (800af60 <vTaskSwitchContext+0xb0>)
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10a      	bne.n	800af0c <vTaskSwitchContext+0x5c>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	607b      	str	r3, [r7, #4]
}
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <vTaskSwitchContext+0x5a>
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4a12      	ldr	r2, [pc, #72]	; (800af60 <vTaskSwitchContext+0xb0>)
 800af18:	4413      	add	r3, r2
 800af1a:	613b      	str	r3, [r7, #16]
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	3308      	adds	r3, #8
 800af2e:	429a      	cmp	r2, r3
 800af30:	d104      	bne.n	800af3c <vTaskSwitchContext+0x8c>
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	605a      	str	r2, [r3, #4]
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	4a08      	ldr	r2, [pc, #32]	; (800af64 <vTaskSwitchContext+0xb4>)
 800af44:	6013      	str	r3, [r2, #0]
}
 800af46:	bf00      	nop
 800af48:	371c      	adds	r7, #28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20000680 	.word	0x20000680
 800af58:	2000066c 	.word	0x2000066c
 800af5c:	20000660 	.word	0x20000660
 800af60:	2000055c 	.word	0x2000055c
 800af64:	20000558 	.word	0x20000558

0800af68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af70:	f000 f852 	bl	800b018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af74:	4b06      	ldr	r3, [pc, #24]	; (800af90 <prvIdleTask+0x28>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d9f9      	bls.n	800af70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af7c:	4b05      	ldr	r3, [pc, #20]	; (800af94 <prvIdleTask+0x2c>)
 800af7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af8c:	e7f0      	b.n	800af70 <prvIdleTask+0x8>
 800af8e:	bf00      	nop
 800af90:	2000055c 	.word	0x2000055c
 800af94:	e000ed04 	.word	0xe000ed04

0800af98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af9e:	2300      	movs	r3, #0
 800afa0:	607b      	str	r3, [r7, #4]
 800afa2:	e00c      	b.n	800afbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4a12      	ldr	r2, [pc, #72]	; (800aff8 <prvInitialiseTaskLists+0x60>)
 800afb0:	4413      	add	r3, r2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7ff faaf 	bl	800a516 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3301      	adds	r3, #1
 800afbc:	607b      	str	r3, [r7, #4]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b06      	cmp	r3, #6
 800afc2:	d9ef      	bls.n	800afa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afc4:	480d      	ldr	r0, [pc, #52]	; (800affc <prvInitialiseTaskLists+0x64>)
 800afc6:	f7ff faa6 	bl	800a516 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afca:	480d      	ldr	r0, [pc, #52]	; (800b000 <prvInitialiseTaskLists+0x68>)
 800afcc:	f7ff faa3 	bl	800a516 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afd0:	480c      	ldr	r0, [pc, #48]	; (800b004 <prvInitialiseTaskLists+0x6c>)
 800afd2:	f7ff faa0 	bl	800a516 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afd6:	480c      	ldr	r0, [pc, #48]	; (800b008 <prvInitialiseTaskLists+0x70>)
 800afd8:	f7ff fa9d 	bl	800a516 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afdc:	480b      	ldr	r0, [pc, #44]	; (800b00c <prvInitialiseTaskLists+0x74>)
 800afde:	f7ff fa9a 	bl	800a516 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afe2:	4b0b      	ldr	r3, [pc, #44]	; (800b010 <prvInitialiseTaskLists+0x78>)
 800afe4:	4a05      	ldr	r2, [pc, #20]	; (800affc <prvInitialiseTaskLists+0x64>)
 800afe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <prvInitialiseTaskLists+0x7c>)
 800afea:	4a05      	ldr	r2, [pc, #20]	; (800b000 <prvInitialiseTaskLists+0x68>)
 800afec:	601a      	str	r2, [r3, #0]
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	2000055c 	.word	0x2000055c
 800affc:	200005e8 	.word	0x200005e8
 800b000:	200005fc 	.word	0x200005fc
 800b004:	20000618 	.word	0x20000618
 800b008:	2000062c 	.word	0x2000062c
 800b00c:	20000644 	.word	0x20000644
 800b010:	20000610 	.word	0x20000610
 800b014:	20000614 	.word	0x20000614

0800b018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b01e:	e019      	b.n	800b054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b020:	f000 fa28 	bl	800b474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b024:	4b10      	ldr	r3, [pc, #64]	; (800b068 <prvCheckTasksWaitingTermination+0x50>)
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3304      	adds	r3, #4
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fafa 	bl	800a62a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b036:	4b0d      	ldr	r3, [pc, #52]	; (800b06c <prvCheckTasksWaitingTermination+0x54>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	4a0b      	ldr	r2, [pc, #44]	; (800b06c <prvCheckTasksWaitingTermination+0x54>)
 800b03e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b040:	4b0b      	ldr	r3, [pc, #44]	; (800b070 <prvCheckTasksWaitingTermination+0x58>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3b01      	subs	r3, #1
 800b046:	4a0a      	ldr	r2, [pc, #40]	; (800b070 <prvCheckTasksWaitingTermination+0x58>)
 800b048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b04a:	f000 fa43 	bl	800b4d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f810 	bl	800b074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b054:	4b06      	ldr	r3, [pc, #24]	; (800b070 <prvCheckTasksWaitingTermination+0x58>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e1      	bne.n	800b020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b05c:	bf00      	nop
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	2000062c 	.word	0x2000062c
 800b06c:	20000658 	.word	0x20000658
 800b070:	20000640 	.word	0x20000640

0800b074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b082:	2b00      	cmp	r3, #0
 800b084:	d108      	bne.n	800b098 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 fba0 	bl	800b7d0 <vPortFree>
				vPortFree( pxTCB );
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fb9d 	bl	800b7d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b096:	e018      	b.n	800b0ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d103      	bne.n	800b0aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fb94 	bl	800b7d0 <vPortFree>
	}
 800b0a8:	e00f      	b.n	800b0ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d00a      	beq.n	800b0ca <prvDeleteTCB+0x56>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60fb      	str	r3, [r7, #12]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <prvDeleteTCB+0x54>
	}
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
	...

0800b0d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0da:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <prvResetNextTaskUnblockTime+0x38>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <prvResetNextTaskUnblockTime+0x3c>)
 800b0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0ec:	e008      	b.n	800b100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <prvResetNextTaskUnblockTime+0x38>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4a04      	ldr	r2, [pc, #16]	; (800b110 <prvResetNextTaskUnblockTime+0x3c>)
 800b0fe:	6013      	str	r3, [r2, #0]
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20000610 	.word	0x20000610
 800b110:	20000678 	.word	0x20000678

0800b114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <xTaskGetSchedulerState+0x34>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b122:	2301      	movs	r3, #1
 800b124:	607b      	str	r3, [r7, #4]
 800b126:	e008      	b.n	800b13a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b128:	4b08      	ldr	r3, [pc, #32]	; (800b14c <xTaskGetSchedulerState+0x38>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b130:	2302      	movs	r3, #2
 800b132:	607b      	str	r3, [r7, #4]
 800b134:	e001      	b.n	800b13a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b136:	2300      	movs	r3, #0
 800b138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b13a:	687b      	ldr	r3, [r7, #4]
	}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	20000664 	.word	0x20000664
 800b14c:	20000680 	.word	0x20000680

0800b150 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b15a:	4b29      	ldr	r3, [pc, #164]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b160:	4b28      	ldr	r3, [pc, #160]	; (800b204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3304      	adds	r3, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff fa5f 	bl	800a62a <uxListRemove>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10b      	bne.n	800b18a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b172:	4b24      	ldr	r3, [pc, #144]	; (800b204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	2201      	movs	r2, #1
 800b17a:	fa02 f303 	lsl.w	r3, r2, r3
 800b17e:	43da      	mvns	r2, r3
 800b180:	4b21      	ldr	r3, [pc, #132]	; (800b208 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4013      	ands	r3, r2
 800b186:	4a20      	ldr	r2, [pc, #128]	; (800b208 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b188:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b190:	d10a      	bne.n	800b1a8 <prvAddCurrentTaskToDelayedList+0x58>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d007      	beq.n	800b1a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b198:	4b1a      	ldr	r3, [pc, #104]	; (800b204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4619      	mov	r1, r3
 800b1a0:	481a      	ldr	r0, [pc, #104]	; (800b20c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b1a2:	f7ff f9e5 	bl	800a570 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1a6:	e026      	b.n	800b1f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1b0:	4b14      	ldr	r3, [pc, #80]	; (800b204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d209      	bcs.n	800b1d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1c0:	4b13      	ldr	r3, [pc, #76]	; (800b210 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	f7ff f9f3 	bl	800a5b8 <vListInsert>
}
 800b1d2:	e010      	b.n	800b1f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1d4:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7ff f9e9 	bl	800a5b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1e6:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d202      	bcs.n	800b1f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b1f0:	4a09      	ldr	r2, [pc, #36]	; (800b218 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6013      	str	r3, [r2, #0]
}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	2000065c 	.word	0x2000065c
 800b204:	20000558 	.word	0x20000558
 800b208:	20000660 	.word	0x20000660
 800b20c:	20000644 	.word	0x20000644
 800b210:	20000614 	.word	0x20000614
 800b214:	20000610 	.word	0x20000610
 800b218:	20000678 	.word	0x20000678

0800b21c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3b04      	subs	r3, #4
 800b22c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3b04      	subs	r3, #4
 800b23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f023 0201 	bic.w	r2, r3, #1
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3b04      	subs	r3, #4
 800b24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b24c:	4a0c      	ldr	r2, [pc, #48]	; (800b280 <pxPortInitialiseStack+0x64>)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3b14      	subs	r3, #20
 800b256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3b04      	subs	r3, #4
 800b262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f06f 0202 	mvn.w	r2, #2
 800b26a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3b20      	subs	r3, #32
 800b270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b272:	68fb      	ldr	r3, [r7, #12]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	0800b285 	.word	0x0800b285

0800b284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b28e:	4b12      	ldr	r3, [pc, #72]	; (800b2d8 <prvTaskExitError+0x54>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b296:	d00a      	beq.n	800b2ae <prvTaskExitError+0x2a>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	60fb      	str	r3, [r7, #12]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <prvTaskExitError+0x28>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	60bb      	str	r3, [r7, #8]
}
 800b2c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2c2:	bf00      	nop
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0fc      	beq.n	800b2c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2ca:	bf00      	nop
 800b2cc:	bf00      	nop
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	200000b8 	.word	0x200000b8
 800b2dc:	00000000 	.word	0x00000000

0800b2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2e0:	4b07      	ldr	r3, [pc, #28]	; (800b300 <pxCurrentTCBConst2>)
 800b2e2:	6819      	ldr	r1, [r3, #0]
 800b2e4:	6808      	ldr	r0, [r1, #0]
 800b2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ea:	f380 8809 	msr	PSP, r0
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f04f 0000 	mov.w	r0, #0
 800b2f6:	f380 8811 	msr	BASEPRI, r0
 800b2fa:	4770      	bx	lr
 800b2fc:	f3af 8000 	nop.w

0800b300 <pxCurrentTCBConst2>:
 800b300:	20000558 	.word	0x20000558
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop

0800b308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b308:	4808      	ldr	r0, [pc, #32]	; (800b32c <prvPortStartFirstTask+0x24>)
 800b30a:	6800      	ldr	r0, [r0, #0]
 800b30c:	6800      	ldr	r0, [r0, #0]
 800b30e:	f380 8808 	msr	MSP, r0
 800b312:	f04f 0000 	mov.w	r0, #0
 800b316:	f380 8814 	msr	CONTROL, r0
 800b31a:	b662      	cpsie	i
 800b31c:	b661      	cpsie	f
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	df00      	svc	0
 800b328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b32a:	bf00      	nop
 800b32c:	e000ed08 	.word	0xe000ed08

0800b330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b336:	4b46      	ldr	r3, [pc, #280]	; (800b450 <xPortStartScheduler+0x120>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a46      	ldr	r2, [pc, #280]	; (800b454 <xPortStartScheduler+0x124>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d10a      	bne.n	800b356 <xPortStartScheduler+0x26>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	613b      	str	r3, [r7, #16]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b356:	4b3e      	ldr	r3, [pc, #248]	; (800b450 <xPortStartScheduler+0x120>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a3f      	ldr	r2, [pc, #252]	; (800b458 <xPortStartScheduler+0x128>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d10a      	bne.n	800b376 <xPortStartScheduler+0x46>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	60fb      	str	r3, [r7, #12]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b376:	4b39      	ldr	r3, [pc, #228]	; (800b45c <xPortStartScheduler+0x12c>)
 800b378:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	22ff      	movs	r2, #255	; 0xff
 800b386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	4b31      	ldr	r3, [pc, #196]	; (800b460 <xPortStartScheduler+0x130>)
 800b39c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b39e:	4b31      	ldr	r3, [pc, #196]	; (800b464 <xPortStartScheduler+0x134>)
 800b3a0:	2207      	movs	r2, #7
 800b3a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3a4:	e009      	b.n	800b3ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b3a6:	4b2f      	ldr	r3, [pc, #188]	; (800b464 <xPortStartScheduler+0x134>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	4a2d      	ldr	r2, [pc, #180]	; (800b464 <xPortStartScheduler+0x134>)
 800b3ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3b0:	78fb      	ldrb	r3, [r7, #3]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	005b      	lsls	r3, r3, #1
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c2:	2b80      	cmp	r3, #128	; 0x80
 800b3c4:	d0ef      	beq.n	800b3a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3c6:	4b27      	ldr	r3, [pc, #156]	; (800b464 <xPortStartScheduler+0x134>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f1c3 0307 	rsb	r3, r3, #7
 800b3ce:	2b04      	cmp	r3, #4
 800b3d0:	d00a      	beq.n	800b3e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	60bb      	str	r3, [r7, #8]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3e8:	4b1e      	ldr	r3, [pc, #120]	; (800b464 <xPortStartScheduler+0x134>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	4a1d      	ldr	r2, [pc, #116]	; (800b464 <xPortStartScheduler+0x134>)
 800b3f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3f2:	4b1c      	ldr	r3, [pc, #112]	; (800b464 <xPortStartScheduler+0x134>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3fa:	4a1a      	ldr	r2, [pc, #104]	; (800b464 <xPortStartScheduler+0x134>)
 800b3fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	b2da      	uxtb	r2, r3
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b406:	4b18      	ldr	r3, [pc, #96]	; (800b468 <xPortStartScheduler+0x138>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a17      	ldr	r2, [pc, #92]	; (800b468 <xPortStartScheduler+0x138>)
 800b40c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b412:	4b15      	ldr	r3, [pc, #84]	; (800b468 <xPortStartScheduler+0x138>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a14      	ldr	r2, [pc, #80]	; (800b468 <xPortStartScheduler+0x138>)
 800b418:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b41c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b41e:	f000 f8dd 	bl	800b5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <xPortStartScheduler+0x13c>)
 800b424:	2200      	movs	r2, #0
 800b426:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b428:	f000 f8fc 	bl	800b624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b42c:	4b10      	ldr	r3, [pc, #64]	; (800b470 <xPortStartScheduler+0x140>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a0f      	ldr	r2, [pc, #60]	; (800b470 <xPortStartScheduler+0x140>)
 800b432:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b436:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b438:	f7ff ff66 	bl	800b308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b43c:	f7ff fd38 	bl	800aeb0 <vTaskSwitchContext>
	prvTaskExitError();
 800b440:	f7ff ff20 	bl	800b284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	e000ed00 	.word	0xe000ed00
 800b454:	410fc271 	.word	0x410fc271
 800b458:	410fc270 	.word	0x410fc270
 800b45c:	e000e400 	.word	0xe000e400
 800b460:	20000684 	.word	0x20000684
 800b464:	20000688 	.word	0x20000688
 800b468:	e000ed20 	.word	0xe000ed20
 800b46c:	200000b8 	.word	0x200000b8
 800b470:	e000ef34 	.word	0xe000ef34

0800b474 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	607b      	str	r3, [r7, #4]
}
 800b48c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <vPortEnterCritical+0x58>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3301      	adds	r3, #1
 800b494:	4a0d      	ldr	r2, [pc, #52]	; (800b4cc <vPortEnterCritical+0x58>)
 800b496:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b498:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <vPortEnterCritical+0x58>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d10f      	bne.n	800b4c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4a0:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <vPortEnterCritical+0x5c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	603b      	str	r3, [r7, #0]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <vPortEnterCritical+0x4a>
	}
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	200000b8 	.word	0x200000b8
 800b4d0:	e000ed04 	.word	0xe000ed04

0800b4d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4da:	4b12      	ldr	r3, [pc, #72]	; (800b524 <vPortExitCritical+0x50>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <vPortExitCritical+0x24>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	607b      	str	r3, [r7, #4]
}
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <vPortExitCritical+0x50>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	4a09      	ldr	r2, [pc, #36]	; (800b524 <vPortExitCritical+0x50>)
 800b500:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b502:	4b08      	ldr	r3, [pc, #32]	; (800b524 <vPortExitCritical+0x50>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d105      	bne.n	800b516 <vPortExitCritical+0x42>
 800b50a:	2300      	movs	r3, #0
 800b50c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b514:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b516:	bf00      	nop
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	200000b8 	.word	0x200000b8
	...

0800b530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b530:	f3ef 8009 	mrs	r0, PSP
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	4b15      	ldr	r3, [pc, #84]	; (800b590 <pxCurrentTCBConst>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	f01e 0f10 	tst.w	lr, #16
 800b540:	bf08      	it	eq
 800b542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54a:	6010      	str	r0, [r2, #0]
 800b54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b550:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b554:	f380 8811 	msr	BASEPRI, r0
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f7ff fca6 	bl	800aeb0 <vTaskSwitchContext>
 800b564:	f04f 0000 	mov.w	r0, #0
 800b568:	f380 8811 	msr	BASEPRI, r0
 800b56c:	bc09      	pop	{r0, r3}
 800b56e:	6819      	ldr	r1, [r3, #0]
 800b570:	6808      	ldr	r0, [r1, #0]
 800b572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b576:	f01e 0f10 	tst.w	lr, #16
 800b57a:	bf08      	it	eq
 800b57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b580:	f380 8809 	msr	PSP, r0
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	f3af 8000 	nop.w

0800b590 <pxCurrentTCBConst>:
 800b590:	20000558 	.word	0x20000558
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop

0800b598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	607b      	str	r3, [r7, #4]
}
 800b5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5b2:	f7ff fbc5 	bl	800ad40 <xTaskIncrementTick>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <xPortSysTickHandler+0x40>)
 800b5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	f383 8811 	msr	BASEPRI, r3
}
 800b5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5d0:	bf00      	nop
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	e000ed04 	.word	0xe000ed04

0800b5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <vPortSetupTimerInterrupt+0x34>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <vPortSetupTimerInterrupt+0x38>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <vPortSetupTimerInterrupt+0x3c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a0a      	ldr	r2, [pc, #40]	; (800b61c <vPortSetupTimerInterrupt+0x40>)
 800b5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f6:	099b      	lsrs	r3, r3, #6
 800b5f8:	4a09      	ldr	r2, [pc, #36]	; (800b620 <vPortSetupTimerInterrupt+0x44>)
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5fe:	4b04      	ldr	r3, [pc, #16]	; (800b610 <vPortSetupTimerInterrupt+0x34>)
 800b600:	2207      	movs	r2, #7
 800b602:	601a      	str	r2, [r3, #0]
}
 800b604:	bf00      	nop
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	e000e010 	.word	0xe000e010
 800b614:	e000e018 	.word	0xe000e018
 800b618:	20000000 	.word	0x20000000
 800b61c:	10624dd3 	.word	0x10624dd3
 800b620:	e000e014 	.word	0xe000e014

0800b624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b634 <vPortEnableVFP+0x10>
 800b628:	6801      	ldr	r1, [r0, #0]
 800b62a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b62e:	6001      	str	r1, [r0, #0]
 800b630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b632:	bf00      	nop
 800b634:	e000ed88 	.word	0xe000ed88

0800b638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08a      	sub	sp, #40	; 0x28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b644:	f7ff fad2 	bl	800abec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b648:	4b5b      	ldr	r3, [pc, #364]	; (800b7b8 <pvPortMalloc+0x180>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b650:	f000 f920 	bl	800b894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b654:	4b59      	ldr	r3, [pc, #356]	; (800b7bc <pvPortMalloc+0x184>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4013      	ands	r3, r2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 8093 	bne.w	800b788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01d      	beq.n	800b6a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b668:	2208      	movs	r2, #8
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4413      	add	r3, r2
 800b66e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f003 0307 	and.w	r3, r3, #7
 800b676:	2b00      	cmp	r3, #0
 800b678:	d014      	beq.n	800b6a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f023 0307 	bic.w	r3, r3, #7
 800b680:	3308      	adds	r3, #8
 800b682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f003 0307 	and.w	r3, r3, #7
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	617b      	str	r3, [r7, #20]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d06e      	beq.n	800b788 <pvPortMalloc+0x150>
 800b6aa:	4b45      	ldr	r3, [pc, #276]	; (800b7c0 <pvPortMalloc+0x188>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d869      	bhi.n	800b788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6b4:	4b43      	ldr	r3, [pc, #268]	; (800b7c4 <pvPortMalloc+0x18c>)
 800b6b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6b8:	4b42      	ldr	r3, [pc, #264]	; (800b7c4 <pvPortMalloc+0x18c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6be:	e004      	b.n	800b6ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d903      	bls.n	800b6dc <pvPortMalloc+0xa4>
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1f1      	bne.n	800b6c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6dc:	4b36      	ldr	r3, [pc, #216]	; (800b7b8 <pvPortMalloc+0x180>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d050      	beq.n	800b788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2208      	movs	r2, #8
 800b6ec:	4413      	add	r3, r2
 800b6ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	1ad2      	subs	r2, r2, r3
 800b700:	2308      	movs	r3, #8
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	429a      	cmp	r2, r3
 800b706:	d91f      	bls.n	800b748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4413      	add	r3, r2
 800b70e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	f003 0307 	and.w	r3, r3, #7
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <pvPortMalloc+0xf8>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	613b      	str	r3, [r7, #16]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b742:	69b8      	ldr	r0, [r7, #24]
 800b744:	f000 f908 	bl	800b958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b748:	4b1d      	ldr	r3, [pc, #116]	; (800b7c0 <pvPortMalloc+0x188>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	4a1b      	ldr	r2, [pc, #108]	; (800b7c0 <pvPortMalloc+0x188>)
 800b754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b756:	4b1a      	ldr	r3, [pc, #104]	; (800b7c0 <pvPortMalloc+0x188>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	4b1b      	ldr	r3, [pc, #108]	; (800b7c8 <pvPortMalloc+0x190>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d203      	bcs.n	800b76a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b762:	4b17      	ldr	r3, [pc, #92]	; (800b7c0 <pvPortMalloc+0x188>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a18      	ldr	r2, [pc, #96]	; (800b7c8 <pvPortMalloc+0x190>)
 800b768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <pvPortMalloc+0x184>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	431a      	orrs	r2, r3
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b77e:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <pvPortMalloc+0x194>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3301      	adds	r3, #1
 800b784:	4a11      	ldr	r2, [pc, #68]	; (800b7cc <pvPortMalloc+0x194>)
 800b786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b788:	f7ff fa3e 	bl	800ac08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <pvPortMalloc+0x174>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	60fb      	str	r3, [r7, #12]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <pvPortMalloc+0x172>
	return pvReturn;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3728      	adds	r7, #40	; 0x28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20004294 	.word	0x20004294
 800b7bc:	200042a8 	.word	0x200042a8
 800b7c0:	20004298 	.word	0x20004298
 800b7c4:	2000428c 	.word	0x2000428c
 800b7c8:	2000429c 	.word	0x2000429c
 800b7cc:	200042a0 	.word	0x200042a0

0800b7d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d04d      	beq.n	800b87e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7e2:	2308      	movs	r3, #8
 800b7e4:	425b      	negs	r3, r3
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	4b24      	ldr	r3, [pc, #144]	; (800b888 <vPortFree+0xb8>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <vPortFree+0x44>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	60fb      	str	r3, [r7, #12]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00a      	beq.n	800b832 <vPortFree+0x62>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	60bb      	str	r3, [r7, #8]
}
 800b82e:	bf00      	nop
 800b830:	e7fe      	b.n	800b830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	4b14      	ldr	r3, [pc, #80]	; (800b888 <vPortFree+0xb8>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4013      	ands	r3, r2
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d01e      	beq.n	800b87e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d11a      	bne.n	800b87e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	4b0e      	ldr	r3, [pc, #56]	; (800b888 <vPortFree+0xb8>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	43db      	mvns	r3, r3
 800b852:	401a      	ands	r2, r3
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b858:	f7ff f9c8 	bl	800abec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <vPortFree+0xbc>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4413      	add	r3, r2
 800b866:	4a09      	ldr	r2, [pc, #36]	; (800b88c <vPortFree+0xbc>)
 800b868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b86a:	6938      	ldr	r0, [r7, #16]
 800b86c:	f000 f874 	bl	800b958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b870:	4b07      	ldr	r3, [pc, #28]	; (800b890 <vPortFree+0xc0>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3301      	adds	r3, #1
 800b876:	4a06      	ldr	r2, [pc, #24]	; (800b890 <vPortFree+0xc0>)
 800b878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b87a:	f7ff f9c5 	bl	800ac08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b87e:	bf00      	nop
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	200042a8 	.word	0x200042a8
 800b88c:	20004298 	.word	0x20004298
 800b890:	200042a4 	.word	0x200042a4

0800b894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b89a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b89e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8a0:	4b27      	ldr	r3, [pc, #156]	; (800b940 <prvHeapInit+0xac>)
 800b8a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00c      	beq.n	800b8c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3307      	adds	r3, #7
 800b8b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0307 	bic.w	r3, r3, #7
 800b8ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	4a1f      	ldr	r2, [pc, #124]	; (800b940 <prvHeapInit+0xac>)
 800b8c4:	4413      	add	r3, r2
 800b8c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8cc:	4a1d      	ldr	r2, [pc, #116]	; (800b944 <prvHeapInit+0xb0>)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8d2:	4b1c      	ldr	r3, [pc, #112]	; (800b944 <prvHeapInit+0xb0>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	4413      	add	r3, r2
 800b8de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8e0:	2208      	movs	r2, #8
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	1a9b      	subs	r3, r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f023 0307 	bic.w	r3, r3, #7
 800b8ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4a15      	ldr	r2, [pc, #84]	; (800b948 <prvHeapInit+0xb4>)
 800b8f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8f6:	4b14      	ldr	r3, [pc, #80]	; (800b948 <prvHeapInit+0xb4>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8fe:	4b12      	ldr	r3, [pc, #72]	; (800b948 <prvHeapInit+0xb4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	1ad2      	subs	r2, r2, r3
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b914:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <prvHeapInit+0xb4>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	4a0a      	ldr	r2, [pc, #40]	; (800b94c <prvHeapInit+0xb8>)
 800b922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4a09      	ldr	r2, [pc, #36]	; (800b950 <prvHeapInit+0xbc>)
 800b92a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b92c:	4b09      	ldr	r3, [pc, #36]	; (800b954 <prvHeapInit+0xc0>)
 800b92e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b932:	601a      	str	r2, [r3, #0]
}
 800b934:	bf00      	nop
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	2000068c 	.word	0x2000068c
 800b944:	2000428c 	.word	0x2000428c
 800b948:	20004294 	.word	0x20004294
 800b94c:	2000429c 	.word	0x2000429c
 800b950:	20004298 	.word	0x20004298
 800b954:	200042a8 	.word	0x200042a8

0800b958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b960:	4b28      	ldr	r3, [pc, #160]	; (800ba04 <prvInsertBlockIntoFreeList+0xac>)
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	e002      	b.n	800b96c <prvInsertBlockIntoFreeList+0x14>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	429a      	cmp	r2, r3
 800b974:	d8f7      	bhi.n	800b966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	4413      	add	r3, r2
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	429a      	cmp	r2, r3
 800b986:	d108      	bne.n	800b99a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	441a      	add	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	441a      	add	r2, r3
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d118      	bne.n	800b9e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <prvInsertBlockIntoFreeList+0xb0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d00d      	beq.n	800b9d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685a      	ldr	r2, [r3, #4]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	441a      	add	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	e008      	b.n	800b9e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <prvInsertBlockIntoFreeList+0xb0>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	601a      	str	r2, [r3, #0]
 800b9de:	e003      	b.n	800b9e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d002      	beq.n	800b9f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9f6:	bf00      	nop
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	2000428c 	.word	0x2000428c
 800ba08:	20004294 	.word	0x20004294

0800ba0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba10:	2200      	movs	r2, #0
 800ba12:	4912      	ldr	r1, [pc, #72]	; (800ba5c <MX_USB_DEVICE_Init+0x50>)
 800ba14:	4812      	ldr	r0, [pc, #72]	; (800ba60 <MX_USB_DEVICE_Init+0x54>)
 800ba16:	f7fd fa0d 	bl	8008e34 <USBD_Init>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba20:	f7f5 ff18 	bl	8001854 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba24:	490f      	ldr	r1, [pc, #60]	; (800ba64 <MX_USB_DEVICE_Init+0x58>)
 800ba26:	480e      	ldr	r0, [pc, #56]	; (800ba60 <MX_USB_DEVICE_Init+0x54>)
 800ba28:	f7fd fa34 	bl	8008e94 <USBD_RegisterClass>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba32:	f7f5 ff0f 	bl	8001854 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba36:	490c      	ldr	r1, [pc, #48]	; (800ba68 <MX_USB_DEVICE_Init+0x5c>)
 800ba38:	4809      	ldr	r0, [pc, #36]	; (800ba60 <MX_USB_DEVICE_Init+0x54>)
 800ba3a:	f7fd f925 	bl	8008c88 <USBD_CDC_RegisterInterface>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba44:	f7f5 ff06 	bl	8001854 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba48:	4805      	ldr	r0, [pc, #20]	; (800ba60 <MX_USB_DEVICE_Init+0x54>)
 800ba4a:	f7fd fa59 	bl	8008f00 <USBD_Start>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba54:	f7f5 fefe 	bl	8001854 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba58:	bf00      	nop
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	200000d0 	.word	0x200000d0
 800ba60:	200042ac 	.word	0x200042ac
 800ba64:	20000038 	.word	0x20000038
 800ba68:	200000bc 	.word	0x200000bc

0800ba6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba70:	2200      	movs	r2, #0
 800ba72:	4905      	ldr	r1, [pc, #20]	; (800ba88 <CDC_Init_FS+0x1c>)
 800ba74:	4805      	ldr	r0, [pc, #20]	; (800ba8c <CDC_Init_FS+0x20>)
 800ba76:	f7fd f921 	bl	8008cbc <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba7a:	4905      	ldr	r1, [pc, #20]	; (800ba90 <CDC_Init_FS+0x24>)
 800ba7c:	4803      	ldr	r0, [pc, #12]	; (800ba8c <CDC_Init_FS+0x20>)
 800ba7e:	f7fd f93f 	bl	8008d00 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800ba82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	20004988 	.word	0x20004988
 800ba8c:	200042ac 	.word	0x200042ac
 800ba90:	20004588 	.word	0x20004588

0800ba94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba94:	b480      	push	{r7}
 800ba96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800ba98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
 800bab0:	4613      	mov	r3, r2
 800bab2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	2b23      	cmp	r3, #35	; 0x23
 800bab8:	d84a      	bhi.n	800bb50 <CDC_Control_FS+0xac>
 800baba:	a201      	add	r2, pc, #4	; (adr r2, 800bac0 <CDC_Control_FS+0x1c>)
 800babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac0:	0800bb51 	.word	0x0800bb51
 800bac4:	0800bb51 	.word	0x0800bb51
 800bac8:	0800bb51 	.word	0x0800bb51
 800bacc:	0800bb51 	.word	0x0800bb51
 800bad0:	0800bb51 	.word	0x0800bb51
 800bad4:	0800bb51 	.word	0x0800bb51
 800bad8:	0800bb51 	.word	0x0800bb51
 800badc:	0800bb51 	.word	0x0800bb51
 800bae0:	0800bb51 	.word	0x0800bb51
 800bae4:	0800bb51 	.word	0x0800bb51
 800bae8:	0800bb51 	.word	0x0800bb51
 800baec:	0800bb51 	.word	0x0800bb51
 800baf0:	0800bb51 	.word	0x0800bb51
 800baf4:	0800bb51 	.word	0x0800bb51
 800baf8:	0800bb51 	.word	0x0800bb51
 800bafc:	0800bb51 	.word	0x0800bb51
 800bb00:	0800bb51 	.word	0x0800bb51
 800bb04:	0800bb51 	.word	0x0800bb51
 800bb08:	0800bb51 	.word	0x0800bb51
 800bb0c:	0800bb51 	.word	0x0800bb51
 800bb10:	0800bb51 	.word	0x0800bb51
 800bb14:	0800bb51 	.word	0x0800bb51
 800bb18:	0800bb51 	.word	0x0800bb51
 800bb1c:	0800bb51 	.word	0x0800bb51
 800bb20:	0800bb51 	.word	0x0800bb51
 800bb24:	0800bb51 	.word	0x0800bb51
 800bb28:	0800bb51 	.word	0x0800bb51
 800bb2c:	0800bb51 	.word	0x0800bb51
 800bb30:	0800bb51 	.word	0x0800bb51
 800bb34:	0800bb51 	.word	0x0800bb51
 800bb38:	0800bb51 	.word	0x0800bb51
 800bb3c:	0800bb51 	.word	0x0800bb51
 800bb40:	0800bb51 	.word	0x0800bb51
 800bb44:	0800bb51 	.word	0x0800bb51
 800bb48:	0800bb51 	.word	0x0800bb51
 800bb4c:	0800bb51 	.word	0x0800bb51
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800bb50:	bf00      	nop
    }

    return (USBD_OK);
 800bb52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb6a:	6879      	ldr	r1, [r7, #4]
 800bb6c:	4805      	ldr	r0, [pc, #20]	; (800bb84 <CDC_Receive_FS+0x24>)
 800bb6e:	f7fd f8c7 	bl	8008d00 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bb72:	4804      	ldr	r0, [pc, #16]	; (800bb84 <CDC_Receive_FS+0x24>)
 800bb74:	f7fd f928 	bl	8008dc8 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800bb78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	200042ac 	.word	0x200042ac

0800bb88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800bb98:	4b0d      	ldr	r3, [pc, #52]	; (800bbd0 <CDC_Transmit_FS+0x48>)
 800bb9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb9e:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e00b      	b.n	800bbc6 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bbae:	887b      	ldrh	r3, [r7, #2]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	6879      	ldr	r1, [r7, #4]
 800bbb4:	4806      	ldr	r0, [pc, #24]	; (800bbd0 <CDC_Transmit_FS+0x48>)
 800bbb6:	f7fd f881 	bl	8008cbc <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bbba:	4805      	ldr	r0, [pc, #20]	; (800bbd0 <CDC_Transmit_FS+0x48>)
 800bbbc:	f7fd f8be 	bl	8008d3c <USBD_CDC_TransmitPacket>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	200042ac 	.word	0x200042ac

0800bbd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b087      	sub	sp, #28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bbe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	371c      	adds	r7, #28
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
	...

0800bbf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	6039      	str	r1, [r7, #0]
 800bc02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2212      	movs	r2, #18
 800bc08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc0a:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	200000ec 	.word	0x200000ec

0800bc1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	6039      	str	r1, [r7, #0]
 800bc26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2204      	movs	r2, #4
 800bc2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc2e:	4b03      	ldr	r3, [pc, #12]	; (800bc3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	20000100 	.word	0x20000100

0800bc40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	6039      	str	r1, [r7, #0]
 800bc4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc4c:	79fb      	ldrb	r3, [r7, #7]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d105      	bne.n	800bc5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	4907      	ldr	r1, [pc, #28]	; (800bc74 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc56:	4808      	ldr	r0, [pc, #32]	; (800bc78 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc58:	f7fe fafe 	bl	800a258 <USBD_GetString>
 800bc5c:	e004      	b.n	800bc68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	4904      	ldr	r1, [pc, #16]	; (800bc74 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc62:	4805      	ldr	r0, [pc, #20]	; (800bc78 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc64:	f7fe faf8 	bl	800a258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc68:	4b02      	ldr	r3, [pc, #8]	; (800bc74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20004d88 	.word	0x20004d88
 800bc78:	0800d4e4 	.word	0x0800d4e4

0800bc7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	6039      	str	r1, [r7, #0]
 800bc86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	4904      	ldr	r1, [pc, #16]	; (800bc9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc8c:	4804      	ldr	r0, [pc, #16]	; (800bca0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc8e:	f7fe fae3 	bl	800a258 <USBD_GetString>
  return USBD_StrDesc;
 800bc92:	4b02      	ldr	r3, [pc, #8]	; (800bc9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20004d88 	.word	0x20004d88
 800bca0:	0800d4fc 	.word	0x0800d4fc

0800bca4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	6039      	str	r1, [r7, #0]
 800bcae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	221a      	movs	r2, #26
 800bcb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bcb6:	f000 f843 	bl	800bd40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bcba:	4b02      	ldr	r3, [pc, #8]	; (800bcc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	20000104 	.word	0x20000104

0800bcc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d105      	bne.n	800bce6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	4907      	ldr	r1, [pc, #28]	; (800bcfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcde:	4808      	ldr	r0, [pc, #32]	; (800bd00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bce0:	f7fe faba 	bl	800a258 <USBD_GetString>
 800bce4:	e004      	b.n	800bcf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	4904      	ldr	r1, [pc, #16]	; (800bcfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcea:	4805      	ldr	r0, [pc, #20]	; (800bd00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcec:	f7fe fab4 	bl	800a258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcf0:	4b02      	ldr	r3, [pc, #8]	; (800bcfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20004d88 	.word	0x20004d88
 800bd00:	0800d510 	.word	0x0800d510

0800bd04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	6039      	str	r1, [r7, #0]
 800bd0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d105      	bne.n	800bd22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	4907      	ldr	r1, [pc, #28]	; (800bd38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd1a:	4808      	ldr	r0, [pc, #32]	; (800bd3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd1c:	f7fe fa9c 	bl	800a258 <USBD_GetString>
 800bd20:	e004      	b.n	800bd2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	4904      	ldr	r1, [pc, #16]	; (800bd38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd26:	4805      	ldr	r0, [pc, #20]	; (800bd3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd28:	f7fe fa96 	bl	800a258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd2c:	4b02      	ldr	r3, [pc, #8]	; (800bd38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20004d88 	.word	0x20004d88
 800bd3c:	0800d51c 	.word	0x0800d51c

0800bd40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd46:	4b0f      	ldr	r3, [pc, #60]	; (800bd84 <Get_SerialNum+0x44>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd4c:	4b0e      	ldr	r3, [pc, #56]	; (800bd88 <Get_SerialNum+0x48>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd52:	4b0e      	ldr	r3, [pc, #56]	; (800bd8c <Get_SerialNum+0x4c>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d009      	beq.n	800bd7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd66:	2208      	movs	r2, #8
 800bd68:	4909      	ldr	r1, [pc, #36]	; (800bd90 <Get_SerialNum+0x50>)
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f000 f814 	bl	800bd98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd70:	2204      	movs	r2, #4
 800bd72:	4908      	ldr	r1, [pc, #32]	; (800bd94 <Get_SerialNum+0x54>)
 800bd74:	68b8      	ldr	r0, [r7, #8]
 800bd76:	f000 f80f 	bl	800bd98 <IntToUnicode>
  }
}
 800bd7a:	bf00      	nop
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	1fff7a10 	.word	0x1fff7a10
 800bd88:	1fff7a14 	.word	0x1fff7a14
 800bd8c:	1fff7a18 	.word	0x1fff7a18
 800bd90:	20000106 	.word	0x20000106
 800bd94:	20000116 	.word	0x20000116

0800bd98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b087      	sub	sp, #28
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	4613      	mov	r3, r2
 800bda4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bdaa:	2300      	movs	r3, #0
 800bdac:	75fb      	strb	r3, [r7, #23]
 800bdae:	e027      	b.n	800be00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	0f1b      	lsrs	r3, r3, #28
 800bdb4:	2b09      	cmp	r3, #9
 800bdb6:	d80b      	bhi.n	800bdd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	0f1b      	lsrs	r3, r3, #28
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	7dfb      	ldrb	r3, [r7, #23]
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	440b      	add	r3, r1
 800bdc8:	3230      	adds	r2, #48	; 0x30
 800bdca:	b2d2      	uxtb	r2, r2
 800bdcc:	701a      	strb	r2, [r3, #0]
 800bdce:	e00a      	b.n	800bde6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	0f1b      	lsrs	r3, r3, #28
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4619      	mov	r1, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	440b      	add	r3, r1
 800bde0:	3237      	adds	r2, #55	; 0x37
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bdec:	7dfb      	ldrb	r3, [r7, #23]
 800bdee:	005b      	lsls	r3, r3, #1
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	75fb      	strb	r3, [r7, #23]
 800be00:	7dfa      	ldrb	r2, [r7, #23]
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	429a      	cmp	r2, r3
 800be06:	d3d3      	bcc.n	800bdb0 <IntToUnicode+0x18>
  }
}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	371c      	adds	r7, #28
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
	...

0800be18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08a      	sub	sp, #40	; 0x28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be20:	f107 0314 	add.w	r3, r7, #20
 800be24:	2200      	movs	r2, #0
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	605a      	str	r2, [r3, #4]
 800be2a:	609a      	str	r2, [r3, #8]
 800be2c:	60da      	str	r2, [r3, #12]
 800be2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be38:	d13a      	bne.n	800beb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be3a:	2300      	movs	r3, #0
 800be3c:	613b      	str	r3, [r7, #16]
 800be3e:	4b1e      	ldr	r3, [pc, #120]	; (800beb8 <HAL_PCD_MspInit+0xa0>)
 800be40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be42:	4a1d      	ldr	r2, [pc, #116]	; (800beb8 <HAL_PCD_MspInit+0xa0>)
 800be44:	f043 0301 	orr.w	r3, r3, #1
 800be48:	6313      	str	r3, [r2, #48]	; 0x30
 800be4a:	4b1b      	ldr	r3, [pc, #108]	; (800beb8 <HAL_PCD_MspInit+0xa0>)
 800be4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	613b      	str	r3, [r7, #16]
 800be54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800be5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be5c:	2302      	movs	r3, #2
 800be5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be60:	2300      	movs	r3, #0
 800be62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be64:	2303      	movs	r3, #3
 800be66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800be68:	230a      	movs	r3, #10
 800be6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be6c:	f107 0314 	add.w	r3, r7, #20
 800be70:	4619      	mov	r1, r3
 800be72:	4812      	ldr	r0, [pc, #72]	; (800bebc <HAL_PCD_MspInit+0xa4>)
 800be74:	f7f6 ff8e 	bl	8002d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be78:	4b0f      	ldr	r3, [pc, #60]	; (800beb8 <HAL_PCD_MspInit+0xa0>)
 800be7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7c:	4a0e      	ldr	r2, [pc, #56]	; (800beb8 <HAL_PCD_MspInit+0xa0>)
 800be7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be82:	6353      	str	r3, [r2, #52]	; 0x34
 800be84:	2300      	movs	r3, #0
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	4b0b      	ldr	r3, [pc, #44]	; (800beb8 <HAL_PCD_MspInit+0xa0>)
 800be8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8c:	4a0a      	ldr	r2, [pc, #40]	; (800beb8 <HAL_PCD_MspInit+0xa0>)
 800be8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be92:	6453      	str	r3, [r2, #68]	; 0x44
 800be94:	4b08      	ldr	r3, [pc, #32]	; (800beb8 <HAL_PCD_MspInit+0xa0>)
 800be96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be9c:	60fb      	str	r3, [r7, #12]
 800be9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bea0:	2200      	movs	r2, #0
 800bea2:	2105      	movs	r1, #5
 800bea4:	2043      	movs	r0, #67	; 0x43
 800bea6:	f7f6 fd58 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800beaa:	2043      	movs	r0, #67	; 0x43
 800beac:	f7f6 fd71 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800beb0:	bf00      	nop
 800beb2:	3728      	adds	r7, #40	; 0x28
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	40023800 	.word	0x40023800
 800bebc:	40020000 	.word	0x40020000

0800bec0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bed4:	4619      	mov	r1, r3
 800bed6:	4610      	mov	r0, r2
 800bed8:	f7fd f85f 	bl	8008f9a <USBD_LL_SetupStage>
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bef6:	78fa      	ldrb	r2, [r7, #3]
 800bef8:	6879      	ldr	r1, [r7, #4]
 800befa:	4613      	mov	r3, r2
 800befc:	00db      	lsls	r3, r3, #3
 800befe:	4413      	add	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	440b      	add	r3, r1
 800bf04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	78fb      	ldrb	r3, [r7, #3]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	f7fd f899 	bl	8009044 <USBD_LL_DataOutStage>
}
 800bf12:	bf00      	nop
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b082      	sub	sp, #8
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	460b      	mov	r3, r1
 800bf24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf2c:	78fa      	ldrb	r2, [r7, #3]
 800bf2e:	6879      	ldr	r1, [r7, #4]
 800bf30:	4613      	mov	r3, r2
 800bf32:	00db      	lsls	r3, r3, #3
 800bf34:	4413      	add	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	440b      	add	r3, r1
 800bf3a:	334c      	adds	r3, #76	; 0x4c
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	78fb      	ldrb	r3, [r7, #3]
 800bf40:	4619      	mov	r1, r3
 800bf42:	f7fd f932 	bl	80091aa <USBD_LL_DataInStage>
}
 800bf46:	bf00      	nop
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fd fa66 	bl	800942e <USBD_LL_SOF>
}
 800bf62:	bf00      	nop
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf72:	2301      	movs	r3, #1
 800bf74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d001      	beq.n	800bf82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bf7e:	f7f5 fc69 	bl	8001854 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf88:	7bfa      	ldrb	r2, [r7, #15]
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fd fa10 	bl	80093b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fd f9b8 	bl	800930e <USBD_LL_Reset>
}
 800bf9e:	bf00      	nop
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
	...

0800bfa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fd fa0b 	bl	80093d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6812      	ldr	r2, [r2, #0]
 800bfca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfce:	f043 0301 	orr.w	r3, r3, #1
 800bfd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfdc:	4b04      	ldr	r3, [pc, #16]	; (800bff0 <HAL_PCD_SuspendCallback+0x48>)
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	4a03      	ldr	r2, [pc, #12]	; (800bff0 <HAL_PCD_SuspendCallback+0x48>)
 800bfe2:	f043 0306 	orr.w	r3, r3, #6
 800bfe6:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	e000ed00 	.word	0xe000ed00

0800bff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c002:	4618      	mov	r0, r3
 800c004:	f7fd f9fb 	bl	80093fe <USBD_LL_Resume>
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c022:	78fa      	ldrb	r2, [r7, #3]
 800c024:	4611      	mov	r1, r2
 800c026:	4618      	mov	r0, r3
 800c028:	f7fd fa53 	bl	80094d2 <USBD_LL_IsoOUTIncomplete>
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c046:	78fa      	ldrb	r2, [r7, #3]
 800c048:	4611      	mov	r1, r2
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fd fa0f 	bl	800946e <USBD_LL_IsoINIncomplete>
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c066:	4618      	mov	r0, r3
 800c068:	f7fd fa65 	bl	8009536 <USBD_LL_DevConnected>
}
 800c06c:	bf00      	nop
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c082:	4618      	mov	r0, r3
 800c084:	f7fd fa62 	bl	800954c <USBD_LL_DevDisconnected>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d13c      	bne.n	800c11a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c0a0:	4a20      	ldr	r2, [pc, #128]	; (800c124 <USBD_LL_Init+0x94>)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a1e      	ldr	r2, [pc, #120]	; (800c124 <USBD_LL_Init+0x94>)
 800c0ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c0b0:	4b1c      	ldr	r3, [pc, #112]	; (800c124 <USBD_LL_Init+0x94>)
 800c0b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c0b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c0b8:	4b1a      	ldr	r3, [pc, #104]	; (800c124 <USBD_LL_Init+0x94>)
 800c0ba:	2204      	movs	r2, #4
 800c0bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c0be:	4b19      	ldr	r3, [pc, #100]	; (800c124 <USBD_LL_Init+0x94>)
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c0c4:	4b17      	ldr	r3, [pc, #92]	; (800c124 <USBD_LL_Init+0x94>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c0ca:	4b16      	ldr	r3, [pc, #88]	; (800c124 <USBD_LL_Init+0x94>)
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0d0:	4b14      	ldr	r3, [pc, #80]	; (800c124 <USBD_LL_Init+0x94>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c0d6:	4b13      	ldr	r3, [pc, #76]	; (800c124 <USBD_LL_Init+0x94>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c0dc:	4b11      	ldr	r3, [pc, #68]	; (800c124 <USBD_LL_Init+0x94>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c0e2:	4b10      	ldr	r3, [pc, #64]	; (800c124 <USBD_LL_Init+0x94>)
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c0e8:	4b0e      	ldr	r3, [pc, #56]	; (800c124 <USBD_LL_Init+0x94>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c0ee:	480d      	ldr	r0, [pc, #52]	; (800c124 <USBD_LL_Init+0x94>)
 800c0f0:	f7f7 fddc 	bl	8003cac <HAL_PCD_Init>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c0fa:	f7f5 fbab 	bl	8001854 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c0fe:	2180      	movs	r1, #128	; 0x80
 800c100:	4808      	ldr	r0, [pc, #32]	; (800c124 <USBD_LL_Init+0x94>)
 800c102:	f7f9 f834 	bl	800516e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c106:	2240      	movs	r2, #64	; 0x40
 800c108:	2100      	movs	r1, #0
 800c10a:	4806      	ldr	r0, [pc, #24]	; (800c124 <USBD_LL_Init+0x94>)
 800c10c:	f7f8 ffe8 	bl	80050e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c110:	2280      	movs	r2, #128	; 0x80
 800c112:	2101      	movs	r1, #1
 800c114:	4803      	ldr	r0, [pc, #12]	; (800c124 <USBD_LL_Init+0x94>)
 800c116:	f7f8 ffe3 	bl	80050e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	20004f88 	.word	0x20004f88

0800c128 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f7 fed1 	bl	8003ee6 <HAL_PCD_Start>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 f942 	bl	800c3d4 <USBD_Get_USB_Status>
 800c150:	4603      	mov	r3, r0
 800c152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c154:	7bbb      	ldrb	r3, [r7, #14]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	4608      	mov	r0, r1
 800c168:	4611      	mov	r1, r2
 800c16a:	461a      	mov	r2, r3
 800c16c:	4603      	mov	r3, r0
 800c16e:	70fb      	strb	r3, [r7, #3]
 800c170:	460b      	mov	r3, r1
 800c172:	70bb      	strb	r3, [r7, #2]
 800c174:	4613      	mov	r3, r2
 800c176:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c186:	78bb      	ldrb	r3, [r7, #2]
 800c188:	883a      	ldrh	r2, [r7, #0]
 800c18a:	78f9      	ldrb	r1, [r7, #3]
 800c18c:	f7f8 fba2 	bl	80048d4 <HAL_PCD_EP_Open>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	4618      	mov	r0, r3
 800c198:	f000 f91c 	bl	800c3d4 <USBD_Get_USB_Status>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b084      	sub	sp, #16
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1c4:	78fa      	ldrb	r2, [r7, #3]
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f8 fbeb 	bl	80049a4 <HAL_PCD_EP_Close>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 f8fd 	bl	800c3d4 <USBD_Get_USB_Status>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c202:	78fa      	ldrb	r2, [r7, #3]
 800c204:	4611      	mov	r1, r2
 800c206:	4618      	mov	r0, r3
 800c208:	f7f8 fcc3 	bl	8004b92 <HAL_PCD_EP_SetStall>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 f8de 	bl	800c3d4 <USBD_Get_USB_Status>
 800c218:	4603      	mov	r3, r0
 800c21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	460b      	mov	r3, r1
 800c230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c240:	78fa      	ldrb	r2, [r7, #3]
 800c242:	4611      	mov	r1, r2
 800c244:	4618      	mov	r0, r3
 800c246:	f7f8 fd08 	bl	8004c5a <HAL_PCD_EP_ClrStall>
 800c24a:	4603      	mov	r3, r0
 800c24c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
 800c250:	4618      	mov	r0, r3
 800c252:	f000 f8bf 	bl	800c3d4 <USBD_Get_USB_Status>
 800c256:	4603      	mov	r3, r0
 800c258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c276:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	da0b      	bge.n	800c298 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c280:	78fb      	ldrb	r3, [r7, #3]
 800c282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c286:	68f9      	ldr	r1, [r7, #12]
 800c288:	4613      	mov	r3, r2
 800c28a:	00db      	lsls	r3, r3, #3
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	440b      	add	r3, r1
 800c292:	333e      	adds	r3, #62	; 0x3e
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	e00b      	b.n	800c2b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c298:	78fb      	ldrb	r3, [r7, #3]
 800c29a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c29e:	68f9      	ldr	r1, [r7, #12]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	4413      	add	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	440b      	add	r3, r1
 800c2aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c2ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2d6:	78fa      	ldrb	r2, [r7, #3]
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7f8 fad5 	bl	800488a <HAL_PCD_SetAddress>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e4:	7bfb      	ldrb	r3, [r7, #15]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f000 f874 	bl	800c3d4 <USBD_Get_USB_Status>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b086      	sub	sp, #24
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	607a      	str	r2, [r7, #4]
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	460b      	mov	r3, r1
 800c308:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c318:	7af9      	ldrb	r1, [r7, #11]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	f7f8 fbee 	bl	8004afe <HAL_PCD_EP_Transmit>
 800c322:	4603      	mov	r3, r0
 800c324:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c326:	7dfb      	ldrb	r3, [r7, #23]
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 f853 	bl	800c3d4 <USBD_Get_USB_Status>
 800c32e:	4603      	mov	r3, r0
 800c330:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c332:	7dbb      	ldrb	r3, [r7, #22]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	607a      	str	r2, [r7, #4]
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	460b      	mov	r3, r1
 800c34a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c35a:	7af9      	ldrb	r1, [r7, #11]
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	f7f8 fb6a 	bl	8004a38 <HAL_PCD_EP_Receive>
 800c364:	4603      	mov	r3, r0
 800c366:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 f832 	bl	800c3d4 <USBD_Get_USB_Status>
 800c370:	4603      	mov	r3, r0
 800c372:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c374:	7dbb      	ldrb	r3, [r7, #22]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3718      	adds	r7, #24
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	460b      	mov	r3, r1
 800c388:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c390:	78fa      	ldrb	r2, [r7, #3]
 800c392:	4611      	mov	r1, r2
 800c394:	4618      	mov	r0, r3
 800c396:	f7f8 fb9a 	bl	8004ace <HAL_PCD_EP_GetRxCount>
 800c39a:	4603      	mov	r3, r0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3ac:	4b03      	ldr	r3, [pc, #12]	; (800c3bc <USBD_static_malloc+0x18>)
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	20005494 	.word	0x20005494

0800c3c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]

}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	d817      	bhi.n	800c418 <USBD_Get_USB_Status+0x44>
 800c3e8:	a201      	add	r2, pc, #4	; (adr r2, 800c3f0 <USBD_Get_USB_Status+0x1c>)
 800c3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ee:	bf00      	nop
 800c3f0:	0800c401 	.word	0x0800c401
 800c3f4:	0800c407 	.word	0x0800c407
 800c3f8:	0800c40d 	.word	0x0800c40d
 800c3fc:	0800c413 	.word	0x0800c413
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]
    break;
 800c404:	e00b      	b.n	800c41e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c406:	2303      	movs	r3, #3
 800c408:	73fb      	strb	r3, [r7, #15]
    break;
 800c40a:	e008      	b.n	800c41e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c40c:	2301      	movs	r3, #1
 800c40e:	73fb      	strb	r3, [r7, #15]
    break;
 800c410:	e005      	b.n	800c41e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c412:	2303      	movs	r3, #3
 800c414:	73fb      	strb	r3, [r7, #15]
    break;
 800c416:	e002      	b.n	800c41e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c418:	2303      	movs	r3, #3
 800c41a:	73fb      	strb	r3, [r7, #15]
    break;
 800c41c:	bf00      	nop
  }
  return usb_status;
 800c41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <malloc>:
 800c42c:	4b02      	ldr	r3, [pc, #8]	; (800c438 <malloc+0xc>)
 800c42e:	4601      	mov	r1, r0
 800c430:	6818      	ldr	r0, [r3, #0]
 800c432:	f000 b82b 	b.w	800c48c <_malloc_r>
 800c436:	bf00      	nop
 800c438:	2000016c 	.word	0x2000016c

0800c43c <free>:
 800c43c:	4b02      	ldr	r3, [pc, #8]	; (800c448 <free+0xc>)
 800c43e:	4601      	mov	r1, r0
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	f000 b931 	b.w	800c6a8 <_free_r>
 800c446:	bf00      	nop
 800c448:	2000016c 	.word	0x2000016c

0800c44c <sbrk_aligned>:
 800c44c:	b570      	push	{r4, r5, r6, lr}
 800c44e:	4e0e      	ldr	r6, [pc, #56]	; (800c488 <sbrk_aligned+0x3c>)
 800c450:	460c      	mov	r4, r1
 800c452:	6831      	ldr	r1, [r6, #0]
 800c454:	4605      	mov	r5, r0
 800c456:	b911      	cbnz	r1, 800c45e <sbrk_aligned+0x12>
 800c458:	f000 f8dc 	bl	800c614 <_sbrk_r>
 800c45c:	6030      	str	r0, [r6, #0]
 800c45e:	4621      	mov	r1, r4
 800c460:	4628      	mov	r0, r5
 800c462:	f000 f8d7 	bl	800c614 <_sbrk_r>
 800c466:	1c43      	adds	r3, r0, #1
 800c468:	d00a      	beq.n	800c480 <sbrk_aligned+0x34>
 800c46a:	1cc4      	adds	r4, r0, #3
 800c46c:	f024 0403 	bic.w	r4, r4, #3
 800c470:	42a0      	cmp	r0, r4
 800c472:	d007      	beq.n	800c484 <sbrk_aligned+0x38>
 800c474:	1a21      	subs	r1, r4, r0
 800c476:	4628      	mov	r0, r5
 800c478:	f000 f8cc 	bl	800c614 <_sbrk_r>
 800c47c:	3001      	adds	r0, #1
 800c47e:	d101      	bne.n	800c484 <sbrk_aligned+0x38>
 800c480:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c484:	4620      	mov	r0, r4
 800c486:	bd70      	pop	{r4, r5, r6, pc}
 800c488:	200056b8 	.word	0x200056b8

0800c48c <_malloc_r>:
 800c48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c490:	1ccd      	adds	r5, r1, #3
 800c492:	f025 0503 	bic.w	r5, r5, #3
 800c496:	3508      	adds	r5, #8
 800c498:	2d0c      	cmp	r5, #12
 800c49a:	bf38      	it	cc
 800c49c:	250c      	movcc	r5, #12
 800c49e:	2d00      	cmp	r5, #0
 800c4a0:	4607      	mov	r7, r0
 800c4a2:	db01      	blt.n	800c4a8 <_malloc_r+0x1c>
 800c4a4:	42a9      	cmp	r1, r5
 800c4a6:	d905      	bls.n	800c4b4 <_malloc_r+0x28>
 800c4a8:	230c      	movs	r3, #12
 800c4aa:	603b      	str	r3, [r7, #0]
 800c4ac:	2600      	movs	r6, #0
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c588 <_malloc_r+0xfc>
 800c4b8:	f000 f868 	bl	800c58c <__malloc_lock>
 800c4bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c0:	461c      	mov	r4, r3
 800c4c2:	bb5c      	cbnz	r4, 800c51c <_malloc_r+0x90>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	f7ff ffc0 	bl	800c44c <sbrk_aligned>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	d155      	bne.n	800c57e <_malloc_r+0xf2>
 800c4d2:	f8d8 4000 	ldr.w	r4, [r8]
 800c4d6:	4626      	mov	r6, r4
 800c4d8:	2e00      	cmp	r6, #0
 800c4da:	d145      	bne.n	800c568 <_malloc_r+0xdc>
 800c4dc:	2c00      	cmp	r4, #0
 800c4de:	d048      	beq.n	800c572 <_malloc_r+0xe6>
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	eb04 0903 	add.w	r9, r4, r3
 800c4ea:	f000 f893 	bl	800c614 <_sbrk_r>
 800c4ee:	4581      	cmp	r9, r0
 800c4f0:	d13f      	bne.n	800c572 <_malloc_r+0xe6>
 800c4f2:	6821      	ldr	r1, [r4, #0]
 800c4f4:	1a6d      	subs	r5, r5, r1
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff ffa7 	bl	800c44c <sbrk_aligned>
 800c4fe:	3001      	adds	r0, #1
 800c500:	d037      	beq.n	800c572 <_malloc_r+0xe6>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	442b      	add	r3, r5
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	f8d8 3000 	ldr.w	r3, [r8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d038      	beq.n	800c582 <_malloc_r+0xf6>
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	42a2      	cmp	r2, r4
 800c514:	d12b      	bne.n	800c56e <_malloc_r+0xe2>
 800c516:	2200      	movs	r2, #0
 800c518:	605a      	str	r2, [r3, #4]
 800c51a:	e00f      	b.n	800c53c <_malloc_r+0xb0>
 800c51c:	6822      	ldr	r2, [r4, #0]
 800c51e:	1b52      	subs	r2, r2, r5
 800c520:	d41f      	bmi.n	800c562 <_malloc_r+0xd6>
 800c522:	2a0b      	cmp	r2, #11
 800c524:	d917      	bls.n	800c556 <_malloc_r+0xca>
 800c526:	1961      	adds	r1, r4, r5
 800c528:	42a3      	cmp	r3, r4
 800c52a:	6025      	str	r5, [r4, #0]
 800c52c:	bf18      	it	ne
 800c52e:	6059      	strne	r1, [r3, #4]
 800c530:	6863      	ldr	r3, [r4, #4]
 800c532:	bf08      	it	eq
 800c534:	f8c8 1000 	streq.w	r1, [r8]
 800c538:	5162      	str	r2, [r4, r5]
 800c53a:	604b      	str	r3, [r1, #4]
 800c53c:	4638      	mov	r0, r7
 800c53e:	f104 060b 	add.w	r6, r4, #11
 800c542:	f000 f829 	bl	800c598 <__malloc_unlock>
 800c546:	f026 0607 	bic.w	r6, r6, #7
 800c54a:	1d23      	adds	r3, r4, #4
 800c54c:	1af2      	subs	r2, r6, r3
 800c54e:	d0ae      	beq.n	800c4ae <_malloc_r+0x22>
 800c550:	1b9b      	subs	r3, r3, r6
 800c552:	50a3      	str	r3, [r4, r2]
 800c554:	e7ab      	b.n	800c4ae <_malloc_r+0x22>
 800c556:	42a3      	cmp	r3, r4
 800c558:	6862      	ldr	r2, [r4, #4]
 800c55a:	d1dd      	bne.n	800c518 <_malloc_r+0x8c>
 800c55c:	f8c8 2000 	str.w	r2, [r8]
 800c560:	e7ec      	b.n	800c53c <_malloc_r+0xb0>
 800c562:	4623      	mov	r3, r4
 800c564:	6864      	ldr	r4, [r4, #4]
 800c566:	e7ac      	b.n	800c4c2 <_malloc_r+0x36>
 800c568:	4634      	mov	r4, r6
 800c56a:	6876      	ldr	r6, [r6, #4]
 800c56c:	e7b4      	b.n	800c4d8 <_malloc_r+0x4c>
 800c56e:	4613      	mov	r3, r2
 800c570:	e7cc      	b.n	800c50c <_malloc_r+0x80>
 800c572:	230c      	movs	r3, #12
 800c574:	603b      	str	r3, [r7, #0]
 800c576:	4638      	mov	r0, r7
 800c578:	f000 f80e 	bl	800c598 <__malloc_unlock>
 800c57c:	e797      	b.n	800c4ae <_malloc_r+0x22>
 800c57e:	6025      	str	r5, [r4, #0]
 800c580:	e7dc      	b.n	800c53c <_malloc_r+0xb0>
 800c582:	605b      	str	r3, [r3, #4]
 800c584:	deff      	udf	#255	; 0xff
 800c586:	bf00      	nop
 800c588:	200056b4 	.word	0x200056b4

0800c58c <__malloc_lock>:
 800c58c:	4801      	ldr	r0, [pc, #4]	; (800c594 <__malloc_lock+0x8>)
 800c58e:	f000 b87b 	b.w	800c688 <__retarget_lock_acquire_recursive>
 800c592:	bf00      	nop
 800c594:	200057f8 	.word	0x200057f8

0800c598 <__malloc_unlock>:
 800c598:	4801      	ldr	r0, [pc, #4]	; (800c5a0 <__malloc_unlock+0x8>)
 800c59a:	f000 b876 	b.w	800c68a <__retarget_lock_release_recursive>
 800c59e:	bf00      	nop
 800c5a0:	200057f8 	.word	0x200057f8

0800c5a4 <siprintf>:
 800c5a4:	b40e      	push	{r1, r2, r3}
 800c5a6:	b500      	push	{lr}
 800c5a8:	b09c      	sub	sp, #112	; 0x70
 800c5aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c5ac:	9002      	str	r0, [sp, #8]
 800c5ae:	9006      	str	r0, [sp, #24]
 800c5b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5b4:	4809      	ldr	r0, [pc, #36]	; (800c5dc <siprintf+0x38>)
 800c5b6:	9107      	str	r1, [sp, #28]
 800c5b8:	9104      	str	r1, [sp, #16]
 800c5ba:	4909      	ldr	r1, [pc, #36]	; (800c5e0 <siprintf+0x3c>)
 800c5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c0:	9105      	str	r1, [sp, #20]
 800c5c2:	6800      	ldr	r0, [r0, #0]
 800c5c4:	9301      	str	r3, [sp, #4]
 800c5c6:	a902      	add	r1, sp, #8
 800c5c8:	f000 f914 	bl	800c7f4 <_svfiprintf_r>
 800c5cc:	9b02      	ldr	r3, [sp, #8]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	b01c      	add	sp, #112	; 0x70
 800c5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5d8:	b003      	add	sp, #12
 800c5da:	4770      	bx	lr
 800c5dc:	2000016c 	.word	0x2000016c
 800c5e0:	ffff0208 	.word	0xffff0208

0800c5e4 <memset>:
 800c5e4:	4402      	add	r2, r0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d100      	bne.n	800c5ee <memset+0xa>
 800c5ec:	4770      	bx	lr
 800c5ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c5f2:	e7f9      	b.n	800c5e8 <memset+0x4>

0800c5f4 <strcat>:
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	7814      	ldrb	r4, [r2, #0]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	3201      	adds	r2, #1
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	d1fa      	bne.n	800c5f8 <strcat+0x4>
 800c602:	3b01      	subs	r3, #1
 800c604:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c608:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c60c:	2a00      	cmp	r2, #0
 800c60e:	d1f9      	bne.n	800c604 <strcat+0x10>
 800c610:	bd10      	pop	{r4, pc}
	...

0800c614 <_sbrk_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4d06      	ldr	r5, [pc, #24]	; (800c630 <_sbrk_r+0x1c>)
 800c618:	2300      	movs	r3, #0
 800c61a:	4604      	mov	r4, r0
 800c61c:	4608      	mov	r0, r1
 800c61e:	602b      	str	r3, [r5, #0]
 800c620:	f7f5 fab8 	bl	8001b94 <_sbrk>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	d102      	bne.n	800c62e <_sbrk_r+0x1a>
 800c628:	682b      	ldr	r3, [r5, #0]
 800c62a:	b103      	cbz	r3, 800c62e <_sbrk_r+0x1a>
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	bd38      	pop	{r3, r4, r5, pc}
 800c630:	200057f4 	.word	0x200057f4

0800c634 <__errno>:
 800c634:	4b01      	ldr	r3, [pc, #4]	; (800c63c <__errno+0x8>)
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	2000016c 	.word	0x2000016c

0800c640 <__libc_init_array>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	4d0d      	ldr	r5, [pc, #52]	; (800c678 <__libc_init_array+0x38>)
 800c644:	4c0d      	ldr	r4, [pc, #52]	; (800c67c <__libc_init_array+0x3c>)
 800c646:	1b64      	subs	r4, r4, r5
 800c648:	10a4      	asrs	r4, r4, #2
 800c64a:	2600      	movs	r6, #0
 800c64c:	42a6      	cmp	r6, r4
 800c64e:	d109      	bne.n	800c664 <__libc_init_array+0x24>
 800c650:	4d0b      	ldr	r5, [pc, #44]	; (800c680 <__libc_init_array+0x40>)
 800c652:	4c0c      	ldr	r4, [pc, #48]	; (800c684 <__libc_init_array+0x44>)
 800c654:	f000 fe22 	bl	800d29c <_init>
 800c658:	1b64      	subs	r4, r4, r5
 800c65a:	10a4      	asrs	r4, r4, #2
 800c65c:	2600      	movs	r6, #0
 800c65e:	42a6      	cmp	r6, r4
 800c660:	d105      	bne.n	800c66e <__libc_init_array+0x2e>
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	f855 3b04 	ldr.w	r3, [r5], #4
 800c668:	4798      	blx	r3
 800c66a:	3601      	adds	r6, #1
 800c66c:	e7ee      	b.n	800c64c <__libc_init_array+0xc>
 800c66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c672:	4798      	blx	r3
 800c674:	3601      	adds	r6, #1
 800c676:	e7f2      	b.n	800c65e <__libc_init_array+0x1e>
 800c678:	0800d5f8 	.word	0x0800d5f8
 800c67c:	0800d5f8 	.word	0x0800d5f8
 800c680:	0800d5f8 	.word	0x0800d5f8
 800c684:	0800d5fc 	.word	0x0800d5fc

0800c688 <__retarget_lock_acquire_recursive>:
 800c688:	4770      	bx	lr

0800c68a <__retarget_lock_release_recursive>:
 800c68a:	4770      	bx	lr

0800c68c <memcpy>:
 800c68c:	440a      	add	r2, r1
 800c68e:	4291      	cmp	r1, r2
 800c690:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c694:	d100      	bne.n	800c698 <memcpy+0xc>
 800c696:	4770      	bx	lr
 800c698:	b510      	push	{r4, lr}
 800c69a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c69e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a2:	4291      	cmp	r1, r2
 800c6a4:	d1f9      	bne.n	800c69a <memcpy+0xe>
 800c6a6:	bd10      	pop	{r4, pc}

0800c6a8 <_free_r>:
 800c6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6aa:	2900      	cmp	r1, #0
 800c6ac:	d044      	beq.n	800c738 <_free_r+0x90>
 800c6ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6b2:	9001      	str	r0, [sp, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ba:	bfb8      	it	lt
 800c6bc:	18e4      	addlt	r4, r4, r3
 800c6be:	f7ff ff65 	bl	800c58c <__malloc_lock>
 800c6c2:	4a1e      	ldr	r2, [pc, #120]	; (800c73c <_free_r+0x94>)
 800c6c4:	9801      	ldr	r0, [sp, #4]
 800c6c6:	6813      	ldr	r3, [r2, #0]
 800c6c8:	b933      	cbnz	r3, 800c6d8 <_free_r+0x30>
 800c6ca:	6063      	str	r3, [r4, #4]
 800c6cc:	6014      	str	r4, [r2, #0]
 800c6ce:	b003      	add	sp, #12
 800c6d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6d4:	f7ff bf60 	b.w	800c598 <__malloc_unlock>
 800c6d8:	42a3      	cmp	r3, r4
 800c6da:	d908      	bls.n	800c6ee <_free_r+0x46>
 800c6dc:	6825      	ldr	r5, [r4, #0]
 800c6de:	1961      	adds	r1, r4, r5
 800c6e0:	428b      	cmp	r3, r1
 800c6e2:	bf01      	itttt	eq
 800c6e4:	6819      	ldreq	r1, [r3, #0]
 800c6e6:	685b      	ldreq	r3, [r3, #4]
 800c6e8:	1949      	addeq	r1, r1, r5
 800c6ea:	6021      	streq	r1, [r4, #0]
 800c6ec:	e7ed      	b.n	800c6ca <_free_r+0x22>
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	b10b      	cbz	r3, 800c6f8 <_free_r+0x50>
 800c6f4:	42a3      	cmp	r3, r4
 800c6f6:	d9fa      	bls.n	800c6ee <_free_r+0x46>
 800c6f8:	6811      	ldr	r1, [r2, #0]
 800c6fa:	1855      	adds	r5, r2, r1
 800c6fc:	42a5      	cmp	r5, r4
 800c6fe:	d10b      	bne.n	800c718 <_free_r+0x70>
 800c700:	6824      	ldr	r4, [r4, #0]
 800c702:	4421      	add	r1, r4
 800c704:	1854      	adds	r4, r2, r1
 800c706:	42a3      	cmp	r3, r4
 800c708:	6011      	str	r1, [r2, #0]
 800c70a:	d1e0      	bne.n	800c6ce <_free_r+0x26>
 800c70c:	681c      	ldr	r4, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	6053      	str	r3, [r2, #4]
 800c712:	440c      	add	r4, r1
 800c714:	6014      	str	r4, [r2, #0]
 800c716:	e7da      	b.n	800c6ce <_free_r+0x26>
 800c718:	d902      	bls.n	800c720 <_free_r+0x78>
 800c71a:	230c      	movs	r3, #12
 800c71c:	6003      	str	r3, [r0, #0]
 800c71e:	e7d6      	b.n	800c6ce <_free_r+0x26>
 800c720:	6825      	ldr	r5, [r4, #0]
 800c722:	1961      	adds	r1, r4, r5
 800c724:	428b      	cmp	r3, r1
 800c726:	bf04      	itt	eq
 800c728:	6819      	ldreq	r1, [r3, #0]
 800c72a:	685b      	ldreq	r3, [r3, #4]
 800c72c:	6063      	str	r3, [r4, #4]
 800c72e:	bf04      	itt	eq
 800c730:	1949      	addeq	r1, r1, r5
 800c732:	6021      	streq	r1, [r4, #0]
 800c734:	6054      	str	r4, [r2, #4]
 800c736:	e7ca      	b.n	800c6ce <_free_r+0x26>
 800c738:	b003      	add	sp, #12
 800c73a:	bd30      	pop	{r4, r5, pc}
 800c73c:	200056b4 	.word	0x200056b4

0800c740 <__ssputs_r>:
 800c740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c744:	688e      	ldr	r6, [r1, #8]
 800c746:	461f      	mov	r7, r3
 800c748:	42be      	cmp	r6, r7
 800c74a:	680b      	ldr	r3, [r1, #0]
 800c74c:	4682      	mov	sl, r0
 800c74e:	460c      	mov	r4, r1
 800c750:	4690      	mov	r8, r2
 800c752:	d82c      	bhi.n	800c7ae <__ssputs_r+0x6e>
 800c754:	898a      	ldrh	r2, [r1, #12]
 800c756:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c75a:	d026      	beq.n	800c7aa <__ssputs_r+0x6a>
 800c75c:	6965      	ldr	r5, [r4, #20]
 800c75e:	6909      	ldr	r1, [r1, #16]
 800c760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c764:	eba3 0901 	sub.w	r9, r3, r1
 800c768:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c76c:	1c7b      	adds	r3, r7, #1
 800c76e:	444b      	add	r3, r9
 800c770:	106d      	asrs	r5, r5, #1
 800c772:	429d      	cmp	r5, r3
 800c774:	bf38      	it	cc
 800c776:	461d      	movcc	r5, r3
 800c778:	0553      	lsls	r3, r2, #21
 800c77a:	d527      	bpl.n	800c7cc <__ssputs_r+0x8c>
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7ff fe85 	bl	800c48c <_malloc_r>
 800c782:	4606      	mov	r6, r0
 800c784:	b360      	cbz	r0, 800c7e0 <__ssputs_r+0xa0>
 800c786:	6921      	ldr	r1, [r4, #16]
 800c788:	464a      	mov	r2, r9
 800c78a:	f7ff ff7f 	bl	800c68c <memcpy>
 800c78e:	89a3      	ldrh	r3, [r4, #12]
 800c790:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c798:	81a3      	strh	r3, [r4, #12]
 800c79a:	6126      	str	r6, [r4, #16]
 800c79c:	6165      	str	r5, [r4, #20]
 800c79e:	444e      	add	r6, r9
 800c7a0:	eba5 0509 	sub.w	r5, r5, r9
 800c7a4:	6026      	str	r6, [r4, #0]
 800c7a6:	60a5      	str	r5, [r4, #8]
 800c7a8:	463e      	mov	r6, r7
 800c7aa:	42be      	cmp	r6, r7
 800c7ac:	d900      	bls.n	800c7b0 <__ssputs_r+0x70>
 800c7ae:	463e      	mov	r6, r7
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	4632      	mov	r2, r6
 800c7b4:	4641      	mov	r1, r8
 800c7b6:	f000 faab 	bl	800cd10 <memmove>
 800c7ba:	68a3      	ldr	r3, [r4, #8]
 800c7bc:	1b9b      	subs	r3, r3, r6
 800c7be:	60a3      	str	r3, [r4, #8]
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	4433      	add	r3, r6
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7cc:	462a      	mov	r2, r5
 800c7ce:	f000 fab9 	bl	800cd44 <_realloc_r>
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d1e0      	bne.n	800c79a <__ssputs_r+0x5a>
 800c7d8:	6921      	ldr	r1, [r4, #16]
 800c7da:	4650      	mov	r0, sl
 800c7dc:	f7ff ff64 	bl	800c6a8 <_free_r>
 800c7e0:	230c      	movs	r3, #12
 800c7e2:	f8ca 3000 	str.w	r3, [sl]
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ec:	81a3      	strh	r3, [r4, #12]
 800c7ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7f2:	e7e9      	b.n	800c7c8 <__ssputs_r+0x88>

0800c7f4 <_svfiprintf_r>:
 800c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f8:	4698      	mov	r8, r3
 800c7fa:	898b      	ldrh	r3, [r1, #12]
 800c7fc:	061b      	lsls	r3, r3, #24
 800c7fe:	b09d      	sub	sp, #116	; 0x74
 800c800:	4607      	mov	r7, r0
 800c802:	460d      	mov	r5, r1
 800c804:	4614      	mov	r4, r2
 800c806:	d50e      	bpl.n	800c826 <_svfiprintf_r+0x32>
 800c808:	690b      	ldr	r3, [r1, #16]
 800c80a:	b963      	cbnz	r3, 800c826 <_svfiprintf_r+0x32>
 800c80c:	2140      	movs	r1, #64	; 0x40
 800c80e:	f7ff fe3d 	bl	800c48c <_malloc_r>
 800c812:	6028      	str	r0, [r5, #0]
 800c814:	6128      	str	r0, [r5, #16]
 800c816:	b920      	cbnz	r0, 800c822 <_svfiprintf_r+0x2e>
 800c818:	230c      	movs	r3, #12
 800c81a:	603b      	str	r3, [r7, #0]
 800c81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c820:	e0d0      	b.n	800c9c4 <_svfiprintf_r+0x1d0>
 800c822:	2340      	movs	r3, #64	; 0x40
 800c824:	616b      	str	r3, [r5, #20]
 800c826:	2300      	movs	r3, #0
 800c828:	9309      	str	r3, [sp, #36]	; 0x24
 800c82a:	2320      	movs	r3, #32
 800c82c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c830:	f8cd 800c 	str.w	r8, [sp, #12]
 800c834:	2330      	movs	r3, #48	; 0x30
 800c836:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c9dc <_svfiprintf_r+0x1e8>
 800c83a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c83e:	f04f 0901 	mov.w	r9, #1
 800c842:	4623      	mov	r3, r4
 800c844:	469a      	mov	sl, r3
 800c846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c84a:	b10a      	cbz	r2, 800c850 <_svfiprintf_r+0x5c>
 800c84c:	2a25      	cmp	r2, #37	; 0x25
 800c84e:	d1f9      	bne.n	800c844 <_svfiprintf_r+0x50>
 800c850:	ebba 0b04 	subs.w	fp, sl, r4
 800c854:	d00b      	beq.n	800c86e <_svfiprintf_r+0x7a>
 800c856:	465b      	mov	r3, fp
 800c858:	4622      	mov	r2, r4
 800c85a:	4629      	mov	r1, r5
 800c85c:	4638      	mov	r0, r7
 800c85e:	f7ff ff6f 	bl	800c740 <__ssputs_r>
 800c862:	3001      	adds	r0, #1
 800c864:	f000 80a9 	beq.w	800c9ba <_svfiprintf_r+0x1c6>
 800c868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c86a:	445a      	add	r2, fp
 800c86c:	9209      	str	r2, [sp, #36]	; 0x24
 800c86e:	f89a 3000 	ldrb.w	r3, [sl]
 800c872:	2b00      	cmp	r3, #0
 800c874:	f000 80a1 	beq.w	800c9ba <_svfiprintf_r+0x1c6>
 800c878:	2300      	movs	r3, #0
 800c87a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c87e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c882:	f10a 0a01 	add.w	sl, sl, #1
 800c886:	9304      	str	r3, [sp, #16]
 800c888:	9307      	str	r3, [sp, #28]
 800c88a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c88e:	931a      	str	r3, [sp, #104]	; 0x68
 800c890:	4654      	mov	r4, sl
 800c892:	2205      	movs	r2, #5
 800c894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c898:	4850      	ldr	r0, [pc, #320]	; (800c9dc <_svfiprintf_r+0x1e8>)
 800c89a:	f7f3 fca9 	bl	80001f0 <memchr>
 800c89e:	9a04      	ldr	r2, [sp, #16]
 800c8a0:	b9d8      	cbnz	r0, 800c8da <_svfiprintf_r+0xe6>
 800c8a2:	06d0      	lsls	r0, r2, #27
 800c8a4:	bf44      	itt	mi
 800c8a6:	2320      	movmi	r3, #32
 800c8a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ac:	0711      	lsls	r1, r2, #28
 800c8ae:	bf44      	itt	mi
 800c8b0:	232b      	movmi	r3, #43	; 0x2b
 800c8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c8bc:	d015      	beq.n	800c8ea <_svfiprintf_r+0xf6>
 800c8be:	9a07      	ldr	r2, [sp, #28]
 800c8c0:	4654      	mov	r4, sl
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	f04f 0c0a 	mov.w	ip, #10
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ce:	3b30      	subs	r3, #48	; 0x30
 800c8d0:	2b09      	cmp	r3, #9
 800c8d2:	d94d      	bls.n	800c970 <_svfiprintf_r+0x17c>
 800c8d4:	b1b0      	cbz	r0, 800c904 <_svfiprintf_r+0x110>
 800c8d6:	9207      	str	r2, [sp, #28]
 800c8d8:	e014      	b.n	800c904 <_svfiprintf_r+0x110>
 800c8da:	eba0 0308 	sub.w	r3, r0, r8
 800c8de:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	46a2      	mov	sl, r4
 800c8e8:	e7d2      	b.n	800c890 <_svfiprintf_r+0x9c>
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	1d19      	adds	r1, r3, #4
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	9103      	str	r1, [sp, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	bfbb      	ittet	lt
 800c8f6:	425b      	neglt	r3, r3
 800c8f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c8fc:	9307      	strge	r3, [sp, #28]
 800c8fe:	9307      	strlt	r3, [sp, #28]
 800c900:	bfb8      	it	lt
 800c902:	9204      	strlt	r2, [sp, #16]
 800c904:	7823      	ldrb	r3, [r4, #0]
 800c906:	2b2e      	cmp	r3, #46	; 0x2e
 800c908:	d10c      	bne.n	800c924 <_svfiprintf_r+0x130>
 800c90a:	7863      	ldrb	r3, [r4, #1]
 800c90c:	2b2a      	cmp	r3, #42	; 0x2a
 800c90e:	d134      	bne.n	800c97a <_svfiprintf_r+0x186>
 800c910:	9b03      	ldr	r3, [sp, #12]
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	9203      	str	r2, [sp, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bfb8      	it	lt
 800c91c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c920:	3402      	adds	r4, #2
 800c922:	9305      	str	r3, [sp, #20]
 800c924:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c9ec <_svfiprintf_r+0x1f8>
 800c928:	7821      	ldrb	r1, [r4, #0]
 800c92a:	2203      	movs	r2, #3
 800c92c:	4650      	mov	r0, sl
 800c92e:	f7f3 fc5f 	bl	80001f0 <memchr>
 800c932:	b138      	cbz	r0, 800c944 <_svfiprintf_r+0x150>
 800c934:	9b04      	ldr	r3, [sp, #16]
 800c936:	eba0 000a 	sub.w	r0, r0, sl
 800c93a:	2240      	movs	r2, #64	; 0x40
 800c93c:	4082      	lsls	r2, r0
 800c93e:	4313      	orrs	r3, r2
 800c940:	3401      	adds	r4, #1
 800c942:	9304      	str	r3, [sp, #16]
 800c944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c948:	4825      	ldr	r0, [pc, #148]	; (800c9e0 <_svfiprintf_r+0x1ec>)
 800c94a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c94e:	2206      	movs	r2, #6
 800c950:	f7f3 fc4e 	bl	80001f0 <memchr>
 800c954:	2800      	cmp	r0, #0
 800c956:	d038      	beq.n	800c9ca <_svfiprintf_r+0x1d6>
 800c958:	4b22      	ldr	r3, [pc, #136]	; (800c9e4 <_svfiprintf_r+0x1f0>)
 800c95a:	bb1b      	cbnz	r3, 800c9a4 <_svfiprintf_r+0x1b0>
 800c95c:	9b03      	ldr	r3, [sp, #12]
 800c95e:	3307      	adds	r3, #7
 800c960:	f023 0307 	bic.w	r3, r3, #7
 800c964:	3308      	adds	r3, #8
 800c966:	9303      	str	r3, [sp, #12]
 800c968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c96a:	4433      	add	r3, r6
 800c96c:	9309      	str	r3, [sp, #36]	; 0x24
 800c96e:	e768      	b.n	800c842 <_svfiprintf_r+0x4e>
 800c970:	fb0c 3202 	mla	r2, ip, r2, r3
 800c974:	460c      	mov	r4, r1
 800c976:	2001      	movs	r0, #1
 800c978:	e7a6      	b.n	800c8c8 <_svfiprintf_r+0xd4>
 800c97a:	2300      	movs	r3, #0
 800c97c:	3401      	adds	r4, #1
 800c97e:	9305      	str	r3, [sp, #20]
 800c980:	4619      	mov	r1, r3
 800c982:	f04f 0c0a 	mov.w	ip, #10
 800c986:	4620      	mov	r0, r4
 800c988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c98c:	3a30      	subs	r2, #48	; 0x30
 800c98e:	2a09      	cmp	r2, #9
 800c990:	d903      	bls.n	800c99a <_svfiprintf_r+0x1a6>
 800c992:	2b00      	cmp	r3, #0
 800c994:	d0c6      	beq.n	800c924 <_svfiprintf_r+0x130>
 800c996:	9105      	str	r1, [sp, #20]
 800c998:	e7c4      	b.n	800c924 <_svfiprintf_r+0x130>
 800c99a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c99e:	4604      	mov	r4, r0
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e7f0      	b.n	800c986 <_svfiprintf_r+0x192>
 800c9a4:	ab03      	add	r3, sp, #12
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	462a      	mov	r2, r5
 800c9aa:	4b0f      	ldr	r3, [pc, #60]	; (800c9e8 <_svfiprintf_r+0x1f4>)
 800c9ac:	a904      	add	r1, sp, #16
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	f3af 8000 	nop.w
 800c9b4:	1c42      	adds	r2, r0, #1
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	d1d6      	bne.n	800c968 <_svfiprintf_r+0x174>
 800c9ba:	89ab      	ldrh	r3, [r5, #12]
 800c9bc:	065b      	lsls	r3, r3, #25
 800c9be:	f53f af2d 	bmi.w	800c81c <_svfiprintf_r+0x28>
 800c9c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9c4:	b01d      	add	sp, #116	; 0x74
 800c9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ca:	ab03      	add	r3, sp, #12
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	462a      	mov	r2, r5
 800c9d0:	4b05      	ldr	r3, [pc, #20]	; (800c9e8 <_svfiprintf_r+0x1f4>)
 800c9d2:	a904      	add	r1, sp, #16
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	f000 f879 	bl	800cacc <_printf_i>
 800c9da:	e7eb      	b.n	800c9b4 <_svfiprintf_r+0x1c0>
 800c9dc:	0800d54c 	.word	0x0800d54c
 800c9e0:	0800d556 	.word	0x0800d556
 800c9e4:	00000000 	.word	0x00000000
 800c9e8:	0800c741 	.word	0x0800c741
 800c9ec:	0800d552 	.word	0x0800d552

0800c9f0 <_printf_common>:
 800c9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f4:	4616      	mov	r6, r2
 800c9f6:	4699      	mov	r9, r3
 800c9f8:	688a      	ldr	r2, [r1, #8]
 800c9fa:	690b      	ldr	r3, [r1, #16]
 800c9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca00:	4293      	cmp	r3, r2
 800ca02:	bfb8      	it	lt
 800ca04:	4613      	movlt	r3, r2
 800ca06:	6033      	str	r3, [r6, #0]
 800ca08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca0c:	4607      	mov	r7, r0
 800ca0e:	460c      	mov	r4, r1
 800ca10:	b10a      	cbz	r2, 800ca16 <_printf_common+0x26>
 800ca12:	3301      	adds	r3, #1
 800ca14:	6033      	str	r3, [r6, #0]
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	0699      	lsls	r1, r3, #26
 800ca1a:	bf42      	ittt	mi
 800ca1c:	6833      	ldrmi	r3, [r6, #0]
 800ca1e:	3302      	addmi	r3, #2
 800ca20:	6033      	strmi	r3, [r6, #0]
 800ca22:	6825      	ldr	r5, [r4, #0]
 800ca24:	f015 0506 	ands.w	r5, r5, #6
 800ca28:	d106      	bne.n	800ca38 <_printf_common+0x48>
 800ca2a:	f104 0a19 	add.w	sl, r4, #25
 800ca2e:	68e3      	ldr	r3, [r4, #12]
 800ca30:	6832      	ldr	r2, [r6, #0]
 800ca32:	1a9b      	subs	r3, r3, r2
 800ca34:	42ab      	cmp	r3, r5
 800ca36:	dc26      	bgt.n	800ca86 <_printf_common+0x96>
 800ca38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca3c:	1e13      	subs	r3, r2, #0
 800ca3e:	6822      	ldr	r2, [r4, #0]
 800ca40:	bf18      	it	ne
 800ca42:	2301      	movne	r3, #1
 800ca44:	0692      	lsls	r2, r2, #26
 800ca46:	d42b      	bmi.n	800caa0 <_printf_common+0xb0>
 800ca48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	4638      	mov	r0, r7
 800ca50:	47c0      	blx	r8
 800ca52:	3001      	adds	r0, #1
 800ca54:	d01e      	beq.n	800ca94 <_printf_common+0xa4>
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	6922      	ldr	r2, [r4, #16]
 800ca5a:	f003 0306 	and.w	r3, r3, #6
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	bf02      	ittt	eq
 800ca62:	68e5      	ldreq	r5, [r4, #12]
 800ca64:	6833      	ldreq	r3, [r6, #0]
 800ca66:	1aed      	subeq	r5, r5, r3
 800ca68:	68a3      	ldr	r3, [r4, #8]
 800ca6a:	bf0c      	ite	eq
 800ca6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca70:	2500      	movne	r5, #0
 800ca72:	4293      	cmp	r3, r2
 800ca74:	bfc4      	itt	gt
 800ca76:	1a9b      	subgt	r3, r3, r2
 800ca78:	18ed      	addgt	r5, r5, r3
 800ca7a:	2600      	movs	r6, #0
 800ca7c:	341a      	adds	r4, #26
 800ca7e:	42b5      	cmp	r5, r6
 800ca80:	d11a      	bne.n	800cab8 <_printf_common+0xc8>
 800ca82:	2000      	movs	r0, #0
 800ca84:	e008      	b.n	800ca98 <_printf_common+0xa8>
 800ca86:	2301      	movs	r3, #1
 800ca88:	4652      	mov	r2, sl
 800ca8a:	4649      	mov	r1, r9
 800ca8c:	4638      	mov	r0, r7
 800ca8e:	47c0      	blx	r8
 800ca90:	3001      	adds	r0, #1
 800ca92:	d103      	bne.n	800ca9c <_printf_common+0xac>
 800ca94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9c:	3501      	adds	r5, #1
 800ca9e:	e7c6      	b.n	800ca2e <_printf_common+0x3e>
 800caa0:	18e1      	adds	r1, r4, r3
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	2030      	movs	r0, #48	; 0x30
 800caa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800caaa:	4422      	add	r2, r4
 800caac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cab4:	3302      	adds	r3, #2
 800cab6:	e7c7      	b.n	800ca48 <_printf_common+0x58>
 800cab8:	2301      	movs	r3, #1
 800caba:	4622      	mov	r2, r4
 800cabc:	4649      	mov	r1, r9
 800cabe:	4638      	mov	r0, r7
 800cac0:	47c0      	blx	r8
 800cac2:	3001      	adds	r0, #1
 800cac4:	d0e6      	beq.n	800ca94 <_printf_common+0xa4>
 800cac6:	3601      	adds	r6, #1
 800cac8:	e7d9      	b.n	800ca7e <_printf_common+0x8e>
	...

0800cacc <_printf_i>:
 800cacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cad0:	7e0f      	ldrb	r7, [r1, #24]
 800cad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cad4:	2f78      	cmp	r7, #120	; 0x78
 800cad6:	4691      	mov	r9, r2
 800cad8:	4680      	mov	r8, r0
 800cada:	460c      	mov	r4, r1
 800cadc:	469a      	mov	sl, r3
 800cade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cae2:	d807      	bhi.n	800caf4 <_printf_i+0x28>
 800cae4:	2f62      	cmp	r7, #98	; 0x62
 800cae6:	d80a      	bhi.n	800cafe <_printf_i+0x32>
 800cae8:	2f00      	cmp	r7, #0
 800caea:	f000 80d4 	beq.w	800cc96 <_printf_i+0x1ca>
 800caee:	2f58      	cmp	r7, #88	; 0x58
 800caf0:	f000 80c0 	beq.w	800cc74 <_printf_i+0x1a8>
 800caf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cafc:	e03a      	b.n	800cb74 <_printf_i+0xa8>
 800cafe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb02:	2b15      	cmp	r3, #21
 800cb04:	d8f6      	bhi.n	800caf4 <_printf_i+0x28>
 800cb06:	a101      	add	r1, pc, #4	; (adr r1, 800cb0c <_printf_i+0x40>)
 800cb08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb0c:	0800cb65 	.word	0x0800cb65
 800cb10:	0800cb79 	.word	0x0800cb79
 800cb14:	0800caf5 	.word	0x0800caf5
 800cb18:	0800caf5 	.word	0x0800caf5
 800cb1c:	0800caf5 	.word	0x0800caf5
 800cb20:	0800caf5 	.word	0x0800caf5
 800cb24:	0800cb79 	.word	0x0800cb79
 800cb28:	0800caf5 	.word	0x0800caf5
 800cb2c:	0800caf5 	.word	0x0800caf5
 800cb30:	0800caf5 	.word	0x0800caf5
 800cb34:	0800caf5 	.word	0x0800caf5
 800cb38:	0800cc7d 	.word	0x0800cc7d
 800cb3c:	0800cba5 	.word	0x0800cba5
 800cb40:	0800cc37 	.word	0x0800cc37
 800cb44:	0800caf5 	.word	0x0800caf5
 800cb48:	0800caf5 	.word	0x0800caf5
 800cb4c:	0800cc9f 	.word	0x0800cc9f
 800cb50:	0800caf5 	.word	0x0800caf5
 800cb54:	0800cba5 	.word	0x0800cba5
 800cb58:	0800caf5 	.word	0x0800caf5
 800cb5c:	0800caf5 	.word	0x0800caf5
 800cb60:	0800cc3f 	.word	0x0800cc3f
 800cb64:	682b      	ldr	r3, [r5, #0]
 800cb66:	1d1a      	adds	r2, r3, #4
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	602a      	str	r2, [r5, #0]
 800cb6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb74:	2301      	movs	r3, #1
 800cb76:	e09f      	b.n	800ccb8 <_printf_i+0x1ec>
 800cb78:	6820      	ldr	r0, [r4, #0]
 800cb7a:	682b      	ldr	r3, [r5, #0]
 800cb7c:	0607      	lsls	r7, r0, #24
 800cb7e:	f103 0104 	add.w	r1, r3, #4
 800cb82:	6029      	str	r1, [r5, #0]
 800cb84:	d501      	bpl.n	800cb8a <_printf_i+0xbe>
 800cb86:	681e      	ldr	r6, [r3, #0]
 800cb88:	e003      	b.n	800cb92 <_printf_i+0xc6>
 800cb8a:	0646      	lsls	r6, r0, #25
 800cb8c:	d5fb      	bpl.n	800cb86 <_printf_i+0xba>
 800cb8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb92:	2e00      	cmp	r6, #0
 800cb94:	da03      	bge.n	800cb9e <_printf_i+0xd2>
 800cb96:	232d      	movs	r3, #45	; 0x2d
 800cb98:	4276      	negs	r6, r6
 800cb9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb9e:	485a      	ldr	r0, [pc, #360]	; (800cd08 <_printf_i+0x23c>)
 800cba0:	230a      	movs	r3, #10
 800cba2:	e012      	b.n	800cbca <_printf_i+0xfe>
 800cba4:	682b      	ldr	r3, [r5, #0]
 800cba6:	6820      	ldr	r0, [r4, #0]
 800cba8:	1d19      	adds	r1, r3, #4
 800cbaa:	6029      	str	r1, [r5, #0]
 800cbac:	0605      	lsls	r5, r0, #24
 800cbae:	d501      	bpl.n	800cbb4 <_printf_i+0xe8>
 800cbb0:	681e      	ldr	r6, [r3, #0]
 800cbb2:	e002      	b.n	800cbba <_printf_i+0xee>
 800cbb4:	0641      	lsls	r1, r0, #25
 800cbb6:	d5fb      	bpl.n	800cbb0 <_printf_i+0xe4>
 800cbb8:	881e      	ldrh	r6, [r3, #0]
 800cbba:	4853      	ldr	r0, [pc, #332]	; (800cd08 <_printf_i+0x23c>)
 800cbbc:	2f6f      	cmp	r7, #111	; 0x6f
 800cbbe:	bf0c      	ite	eq
 800cbc0:	2308      	moveq	r3, #8
 800cbc2:	230a      	movne	r3, #10
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbca:	6865      	ldr	r5, [r4, #4]
 800cbcc:	60a5      	str	r5, [r4, #8]
 800cbce:	2d00      	cmp	r5, #0
 800cbd0:	bfa2      	ittt	ge
 800cbd2:	6821      	ldrge	r1, [r4, #0]
 800cbd4:	f021 0104 	bicge.w	r1, r1, #4
 800cbd8:	6021      	strge	r1, [r4, #0]
 800cbda:	b90e      	cbnz	r6, 800cbe0 <_printf_i+0x114>
 800cbdc:	2d00      	cmp	r5, #0
 800cbde:	d04b      	beq.n	800cc78 <_printf_i+0x1ac>
 800cbe0:	4615      	mov	r5, r2
 800cbe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbe6:	fb03 6711 	mls	r7, r3, r1, r6
 800cbea:	5dc7      	ldrb	r7, [r0, r7]
 800cbec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbf0:	4637      	mov	r7, r6
 800cbf2:	42bb      	cmp	r3, r7
 800cbf4:	460e      	mov	r6, r1
 800cbf6:	d9f4      	bls.n	800cbe2 <_printf_i+0x116>
 800cbf8:	2b08      	cmp	r3, #8
 800cbfa:	d10b      	bne.n	800cc14 <_printf_i+0x148>
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	07de      	lsls	r6, r3, #31
 800cc00:	d508      	bpl.n	800cc14 <_printf_i+0x148>
 800cc02:	6923      	ldr	r3, [r4, #16]
 800cc04:	6861      	ldr	r1, [r4, #4]
 800cc06:	4299      	cmp	r1, r3
 800cc08:	bfde      	ittt	le
 800cc0a:	2330      	movle	r3, #48	; 0x30
 800cc0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc14:	1b52      	subs	r2, r2, r5
 800cc16:	6122      	str	r2, [r4, #16]
 800cc18:	f8cd a000 	str.w	sl, [sp]
 800cc1c:	464b      	mov	r3, r9
 800cc1e:	aa03      	add	r2, sp, #12
 800cc20:	4621      	mov	r1, r4
 800cc22:	4640      	mov	r0, r8
 800cc24:	f7ff fee4 	bl	800c9f0 <_printf_common>
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d14a      	bne.n	800ccc2 <_printf_i+0x1f6>
 800cc2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc30:	b004      	add	sp, #16
 800cc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	f043 0320 	orr.w	r3, r3, #32
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	4833      	ldr	r0, [pc, #204]	; (800cd0c <_printf_i+0x240>)
 800cc40:	2778      	movs	r7, #120	; 0x78
 800cc42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc46:	6823      	ldr	r3, [r4, #0]
 800cc48:	6829      	ldr	r1, [r5, #0]
 800cc4a:	061f      	lsls	r7, r3, #24
 800cc4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc50:	d402      	bmi.n	800cc58 <_printf_i+0x18c>
 800cc52:	065f      	lsls	r7, r3, #25
 800cc54:	bf48      	it	mi
 800cc56:	b2b6      	uxthmi	r6, r6
 800cc58:	07df      	lsls	r7, r3, #31
 800cc5a:	bf48      	it	mi
 800cc5c:	f043 0320 	orrmi.w	r3, r3, #32
 800cc60:	6029      	str	r1, [r5, #0]
 800cc62:	bf48      	it	mi
 800cc64:	6023      	strmi	r3, [r4, #0]
 800cc66:	b91e      	cbnz	r6, 800cc70 <_printf_i+0x1a4>
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	f023 0320 	bic.w	r3, r3, #32
 800cc6e:	6023      	str	r3, [r4, #0]
 800cc70:	2310      	movs	r3, #16
 800cc72:	e7a7      	b.n	800cbc4 <_printf_i+0xf8>
 800cc74:	4824      	ldr	r0, [pc, #144]	; (800cd08 <_printf_i+0x23c>)
 800cc76:	e7e4      	b.n	800cc42 <_printf_i+0x176>
 800cc78:	4615      	mov	r5, r2
 800cc7a:	e7bd      	b.n	800cbf8 <_printf_i+0x12c>
 800cc7c:	682b      	ldr	r3, [r5, #0]
 800cc7e:	6826      	ldr	r6, [r4, #0]
 800cc80:	6961      	ldr	r1, [r4, #20]
 800cc82:	1d18      	adds	r0, r3, #4
 800cc84:	6028      	str	r0, [r5, #0]
 800cc86:	0635      	lsls	r5, r6, #24
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	d501      	bpl.n	800cc90 <_printf_i+0x1c4>
 800cc8c:	6019      	str	r1, [r3, #0]
 800cc8e:	e002      	b.n	800cc96 <_printf_i+0x1ca>
 800cc90:	0670      	lsls	r0, r6, #25
 800cc92:	d5fb      	bpl.n	800cc8c <_printf_i+0x1c0>
 800cc94:	8019      	strh	r1, [r3, #0]
 800cc96:	2300      	movs	r3, #0
 800cc98:	6123      	str	r3, [r4, #16]
 800cc9a:	4615      	mov	r5, r2
 800cc9c:	e7bc      	b.n	800cc18 <_printf_i+0x14c>
 800cc9e:	682b      	ldr	r3, [r5, #0]
 800cca0:	1d1a      	adds	r2, r3, #4
 800cca2:	602a      	str	r2, [r5, #0]
 800cca4:	681d      	ldr	r5, [r3, #0]
 800cca6:	6862      	ldr	r2, [r4, #4]
 800cca8:	2100      	movs	r1, #0
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f7f3 faa0 	bl	80001f0 <memchr>
 800ccb0:	b108      	cbz	r0, 800ccb6 <_printf_i+0x1ea>
 800ccb2:	1b40      	subs	r0, r0, r5
 800ccb4:	6060      	str	r0, [r4, #4]
 800ccb6:	6863      	ldr	r3, [r4, #4]
 800ccb8:	6123      	str	r3, [r4, #16]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccc0:	e7aa      	b.n	800cc18 <_printf_i+0x14c>
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	462a      	mov	r2, r5
 800ccc6:	4649      	mov	r1, r9
 800ccc8:	4640      	mov	r0, r8
 800ccca:	47d0      	blx	sl
 800cccc:	3001      	adds	r0, #1
 800ccce:	d0ad      	beq.n	800cc2c <_printf_i+0x160>
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	079b      	lsls	r3, r3, #30
 800ccd4:	d413      	bmi.n	800ccfe <_printf_i+0x232>
 800ccd6:	68e0      	ldr	r0, [r4, #12]
 800ccd8:	9b03      	ldr	r3, [sp, #12]
 800ccda:	4298      	cmp	r0, r3
 800ccdc:	bfb8      	it	lt
 800ccde:	4618      	movlt	r0, r3
 800cce0:	e7a6      	b.n	800cc30 <_printf_i+0x164>
 800cce2:	2301      	movs	r3, #1
 800cce4:	4632      	mov	r2, r6
 800cce6:	4649      	mov	r1, r9
 800cce8:	4640      	mov	r0, r8
 800ccea:	47d0      	blx	sl
 800ccec:	3001      	adds	r0, #1
 800ccee:	d09d      	beq.n	800cc2c <_printf_i+0x160>
 800ccf0:	3501      	adds	r5, #1
 800ccf2:	68e3      	ldr	r3, [r4, #12]
 800ccf4:	9903      	ldr	r1, [sp, #12]
 800ccf6:	1a5b      	subs	r3, r3, r1
 800ccf8:	42ab      	cmp	r3, r5
 800ccfa:	dcf2      	bgt.n	800cce2 <_printf_i+0x216>
 800ccfc:	e7eb      	b.n	800ccd6 <_printf_i+0x20a>
 800ccfe:	2500      	movs	r5, #0
 800cd00:	f104 0619 	add.w	r6, r4, #25
 800cd04:	e7f5      	b.n	800ccf2 <_printf_i+0x226>
 800cd06:	bf00      	nop
 800cd08:	0800d55d 	.word	0x0800d55d
 800cd0c:	0800d56e 	.word	0x0800d56e

0800cd10 <memmove>:
 800cd10:	4288      	cmp	r0, r1
 800cd12:	b510      	push	{r4, lr}
 800cd14:	eb01 0402 	add.w	r4, r1, r2
 800cd18:	d902      	bls.n	800cd20 <memmove+0x10>
 800cd1a:	4284      	cmp	r4, r0
 800cd1c:	4623      	mov	r3, r4
 800cd1e:	d807      	bhi.n	800cd30 <memmove+0x20>
 800cd20:	1e43      	subs	r3, r0, #1
 800cd22:	42a1      	cmp	r1, r4
 800cd24:	d008      	beq.n	800cd38 <memmove+0x28>
 800cd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd2e:	e7f8      	b.n	800cd22 <memmove+0x12>
 800cd30:	4402      	add	r2, r0
 800cd32:	4601      	mov	r1, r0
 800cd34:	428a      	cmp	r2, r1
 800cd36:	d100      	bne.n	800cd3a <memmove+0x2a>
 800cd38:	bd10      	pop	{r4, pc}
 800cd3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd42:	e7f7      	b.n	800cd34 <memmove+0x24>

0800cd44 <_realloc_r>:
 800cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd48:	4680      	mov	r8, r0
 800cd4a:	4614      	mov	r4, r2
 800cd4c:	460e      	mov	r6, r1
 800cd4e:	b921      	cbnz	r1, 800cd5a <_realloc_r+0x16>
 800cd50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd54:	4611      	mov	r1, r2
 800cd56:	f7ff bb99 	b.w	800c48c <_malloc_r>
 800cd5a:	b92a      	cbnz	r2, 800cd68 <_realloc_r+0x24>
 800cd5c:	f7ff fca4 	bl	800c6a8 <_free_r>
 800cd60:	4625      	mov	r5, r4
 800cd62:	4628      	mov	r0, r5
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	f000 f81b 	bl	800cda2 <_malloc_usable_size_r>
 800cd6c:	4284      	cmp	r4, r0
 800cd6e:	4607      	mov	r7, r0
 800cd70:	d802      	bhi.n	800cd78 <_realloc_r+0x34>
 800cd72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd76:	d812      	bhi.n	800cd9e <_realloc_r+0x5a>
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	f7ff fb86 	bl	800c48c <_malloc_r>
 800cd80:	4605      	mov	r5, r0
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d0ed      	beq.n	800cd62 <_realloc_r+0x1e>
 800cd86:	42bc      	cmp	r4, r7
 800cd88:	4622      	mov	r2, r4
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	bf28      	it	cs
 800cd8e:	463a      	movcs	r2, r7
 800cd90:	f7ff fc7c 	bl	800c68c <memcpy>
 800cd94:	4631      	mov	r1, r6
 800cd96:	4640      	mov	r0, r8
 800cd98:	f7ff fc86 	bl	800c6a8 <_free_r>
 800cd9c:	e7e1      	b.n	800cd62 <_realloc_r+0x1e>
 800cd9e:	4635      	mov	r5, r6
 800cda0:	e7df      	b.n	800cd62 <_realloc_r+0x1e>

0800cda2 <_malloc_usable_size_r>:
 800cda2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda6:	1f18      	subs	r0, r3, #4
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bfbc      	itt	lt
 800cdac:	580b      	ldrlt	r3, [r1, r0]
 800cdae:	18c0      	addlt	r0, r0, r3
 800cdb0:	4770      	bx	lr

0800cdb2 <atan2>:
 800cdb2:	f000 b801 	b.w	800cdb8 <__ieee754_atan2>
	...

0800cdb8 <__ieee754_atan2>:
 800cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	ec57 6b11 	vmov	r6, r7, d1
 800cdc0:	4273      	negs	r3, r6
 800cdc2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800cf40 <__ieee754_atan2+0x188>
 800cdc6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800cdca:	4333      	orrs	r3, r6
 800cdcc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cdd0:	4543      	cmp	r3, r8
 800cdd2:	ec51 0b10 	vmov	r0, r1, d0
 800cdd6:	ee11 5a10 	vmov	r5, s2
 800cdda:	d80a      	bhi.n	800cdf2 <__ieee754_atan2+0x3a>
 800cddc:	4244      	negs	r4, r0
 800cdde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cde2:	4304      	orrs	r4, r0
 800cde4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cde8:	4544      	cmp	r4, r8
 800cdea:	ee10 9a10 	vmov	r9, s0
 800cdee:	468e      	mov	lr, r1
 800cdf0:	d907      	bls.n	800ce02 <__ieee754_atan2+0x4a>
 800cdf2:	4632      	mov	r2, r6
 800cdf4:	463b      	mov	r3, r7
 800cdf6:	f7f3 fa51 	bl	800029c <__adddf3>
 800cdfa:	ec41 0b10 	vmov	d0, r0, r1
 800cdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ce06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce0a:	4334      	orrs	r4, r6
 800ce0c:	d103      	bne.n	800ce16 <__ieee754_atan2+0x5e>
 800ce0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce12:	f000 b899 	b.w	800cf48 <atan>
 800ce16:	17bc      	asrs	r4, r7, #30
 800ce18:	f004 0402 	and.w	r4, r4, #2
 800ce1c:	ea53 0909 	orrs.w	r9, r3, r9
 800ce20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ce24:	d107      	bne.n	800ce36 <__ieee754_atan2+0x7e>
 800ce26:	2c02      	cmp	r4, #2
 800ce28:	d05f      	beq.n	800ceea <__ieee754_atan2+0x132>
 800ce2a:	2c03      	cmp	r4, #3
 800ce2c:	d1e5      	bne.n	800cdfa <__ieee754_atan2+0x42>
 800ce2e:	a140      	add	r1, pc, #256	; (adr r1, 800cf30 <__ieee754_atan2+0x178>)
 800ce30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce34:	e7e1      	b.n	800cdfa <__ieee754_atan2+0x42>
 800ce36:	4315      	orrs	r5, r2
 800ce38:	d106      	bne.n	800ce48 <__ieee754_atan2+0x90>
 800ce3a:	f1be 0f00 	cmp.w	lr, #0
 800ce3e:	da5f      	bge.n	800cf00 <__ieee754_atan2+0x148>
 800ce40:	a13d      	add	r1, pc, #244	; (adr r1, 800cf38 <__ieee754_atan2+0x180>)
 800ce42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce46:	e7d8      	b.n	800cdfa <__ieee754_atan2+0x42>
 800ce48:	4542      	cmp	r2, r8
 800ce4a:	d10f      	bne.n	800ce6c <__ieee754_atan2+0xb4>
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ce52:	d107      	bne.n	800ce64 <__ieee754_atan2+0xac>
 800ce54:	2c02      	cmp	r4, #2
 800ce56:	d84c      	bhi.n	800cef2 <__ieee754_atan2+0x13a>
 800ce58:	4b33      	ldr	r3, [pc, #204]	; (800cf28 <__ieee754_atan2+0x170>)
 800ce5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce62:	e7ca      	b.n	800cdfa <__ieee754_atan2+0x42>
 800ce64:	2c02      	cmp	r4, #2
 800ce66:	d848      	bhi.n	800cefa <__ieee754_atan2+0x142>
 800ce68:	4b30      	ldr	r3, [pc, #192]	; (800cf2c <__ieee754_atan2+0x174>)
 800ce6a:	e7f6      	b.n	800ce5a <__ieee754_atan2+0xa2>
 800ce6c:	4543      	cmp	r3, r8
 800ce6e:	d0e4      	beq.n	800ce3a <__ieee754_atan2+0x82>
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ce76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce7a:	da1e      	bge.n	800ceba <__ieee754_atan2+0x102>
 800ce7c:	2f00      	cmp	r7, #0
 800ce7e:	da01      	bge.n	800ce84 <__ieee754_atan2+0xcc>
 800ce80:	323c      	adds	r2, #60	; 0x3c
 800ce82:	db1e      	blt.n	800cec2 <__ieee754_atan2+0x10a>
 800ce84:	4632      	mov	r2, r6
 800ce86:	463b      	mov	r3, r7
 800ce88:	f7f3 fce8 	bl	800085c <__aeabi_ddiv>
 800ce8c:	ec41 0b10 	vmov	d0, r0, r1
 800ce90:	f000 f9fa 	bl	800d288 <fabs>
 800ce94:	f000 f858 	bl	800cf48 <atan>
 800ce98:	ec51 0b10 	vmov	r0, r1, d0
 800ce9c:	2c01      	cmp	r4, #1
 800ce9e:	d013      	beq.n	800cec8 <__ieee754_atan2+0x110>
 800cea0:	2c02      	cmp	r4, #2
 800cea2:	d015      	beq.n	800ced0 <__ieee754_atan2+0x118>
 800cea4:	2c00      	cmp	r4, #0
 800cea6:	d0a8      	beq.n	800cdfa <__ieee754_atan2+0x42>
 800cea8:	a317      	add	r3, pc, #92	; (adr r3, 800cf08 <__ieee754_atan2+0x150>)
 800ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceae:	f7f3 f9f3 	bl	8000298 <__aeabi_dsub>
 800ceb2:	a317      	add	r3, pc, #92	; (adr r3, 800cf10 <__ieee754_atan2+0x158>)
 800ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb8:	e014      	b.n	800cee4 <__ieee754_atan2+0x12c>
 800ceba:	a117      	add	r1, pc, #92	; (adr r1, 800cf18 <__ieee754_atan2+0x160>)
 800cebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cec0:	e7ec      	b.n	800ce9c <__ieee754_atan2+0xe4>
 800cec2:	2000      	movs	r0, #0
 800cec4:	2100      	movs	r1, #0
 800cec6:	e7e9      	b.n	800ce9c <__ieee754_atan2+0xe4>
 800cec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cecc:	4619      	mov	r1, r3
 800cece:	e794      	b.n	800cdfa <__ieee754_atan2+0x42>
 800ced0:	a30d      	add	r3, pc, #52	; (adr r3, 800cf08 <__ieee754_atan2+0x150>)
 800ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced6:	f7f3 f9df 	bl	8000298 <__aeabi_dsub>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	a10c      	add	r1, pc, #48	; (adr r1, 800cf10 <__ieee754_atan2+0x158>)
 800cee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cee4:	f7f3 f9d8 	bl	8000298 <__aeabi_dsub>
 800cee8:	e787      	b.n	800cdfa <__ieee754_atan2+0x42>
 800ceea:	a109      	add	r1, pc, #36	; (adr r1, 800cf10 <__ieee754_atan2+0x158>)
 800ceec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef0:	e783      	b.n	800cdfa <__ieee754_atan2+0x42>
 800cef2:	a10b      	add	r1, pc, #44	; (adr r1, 800cf20 <__ieee754_atan2+0x168>)
 800cef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef8:	e77f      	b.n	800cdfa <__ieee754_atan2+0x42>
 800cefa:	2000      	movs	r0, #0
 800cefc:	2100      	movs	r1, #0
 800cefe:	e77c      	b.n	800cdfa <__ieee754_atan2+0x42>
 800cf00:	a105      	add	r1, pc, #20	; (adr r1, 800cf18 <__ieee754_atan2+0x160>)
 800cf02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf06:	e778      	b.n	800cdfa <__ieee754_atan2+0x42>
 800cf08:	33145c07 	.word	0x33145c07
 800cf0c:	3ca1a626 	.word	0x3ca1a626
 800cf10:	54442d18 	.word	0x54442d18
 800cf14:	400921fb 	.word	0x400921fb
 800cf18:	54442d18 	.word	0x54442d18
 800cf1c:	3ff921fb 	.word	0x3ff921fb
 800cf20:	54442d18 	.word	0x54442d18
 800cf24:	3fe921fb 	.word	0x3fe921fb
 800cf28:	0800d580 	.word	0x0800d580
 800cf2c:	0800d598 	.word	0x0800d598
 800cf30:	54442d18 	.word	0x54442d18
 800cf34:	c00921fb 	.word	0xc00921fb
 800cf38:	54442d18 	.word	0x54442d18
 800cf3c:	bff921fb 	.word	0xbff921fb
 800cf40:	7ff00000 	.word	0x7ff00000
 800cf44:	00000000 	.word	0x00000000

0800cf48 <atan>:
 800cf48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	ec55 4b10 	vmov	r4, r5, d0
 800cf50:	4bc3      	ldr	r3, [pc, #780]	; (800d260 <atan+0x318>)
 800cf52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf56:	429e      	cmp	r6, r3
 800cf58:	46ab      	mov	fp, r5
 800cf5a:	dd18      	ble.n	800cf8e <atan+0x46>
 800cf5c:	4bc1      	ldr	r3, [pc, #772]	; (800d264 <atan+0x31c>)
 800cf5e:	429e      	cmp	r6, r3
 800cf60:	dc01      	bgt.n	800cf66 <atan+0x1e>
 800cf62:	d109      	bne.n	800cf78 <atan+0x30>
 800cf64:	b144      	cbz	r4, 800cf78 <atan+0x30>
 800cf66:	4622      	mov	r2, r4
 800cf68:	462b      	mov	r3, r5
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 f995 	bl	800029c <__adddf3>
 800cf72:	4604      	mov	r4, r0
 800cf74:	460d      	mov	r5, r1
 800cf76:	e006      	b.n	800cf86 <atan+0x3e>
 800cf78:	f1bb 0f00 	cmp.w	fp, #0
 800cf7c:	f300 8131 	bgt.w	800d1e2 <atan+0x29a>
 800cf80:	a59b      	add	r5, pc, #620	; (adr r5, 800d1f0 <atan+0x2a8>)
 800cf82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf86:	ec45 4b10 	vmov	d0, r4, r5
 800cf8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8e:	4bb6      	ldr	r3, [pc, #728]	; (800d268 <atan+0x320>)
 800cf90:	429e      	cmp	r6, r3
 800cf92:	dc14      	bgt.n	800cfbe <atan+0x76>
 800cf94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cf98:	429e      	cmp	r6, r3
 800cf9a:	dc0d      	bgt.n	800cfb8 <atan+0x70>
 800cf9c:	a396      	add	r3, pc, #600	; (adr r3, 800d1f8 <atan+0x2b0>)
 800cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa2:	ee10 0a10 	vmov	r0, s0
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 f978 	bl	800029c <__adddf3>
 800cfac:	4baf      	ldr	r3, [pc, #700]	; (800d26c <atan+0x324>)
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f7f3 fdba 	bl	8000b28 <__aeabi_dcmpgt>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d1e6      	bne.n	800cf86 <atan+0x3e>
 800cfb8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cfbc:	e02b      	b.n	800d016 <atan+0xce>
 800cfbe:	f000 f963 	bl	800d288 <fabs>
 800cfc2:	4bab      	ldr	r3, [pc, #684]	; (800d270 <atan+0x328>)
 800cfc4:	429e      	cmp	r6, r3
 800cfc6:	ec55 4b10 	vmov	r4, r5, d0
 800cfca:	f300 80bf 	bgt.w	800d14c <atan+0x204>
 800cfce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cfd2:	429e      	cmp	r6, r3
 800cfd4:	f300 80a0 	bgt.w	800d118 <atan+0x1d0>
 800cfd8:	ee10 2a10 	vmov	r2, s0
 800cfdc:	ee10 0a10 	vmov	r0, s0
 800cfe0:	462b      	mov	r3, r5
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	f7f3 f95a 	bl	800029c <__adddf3>
 800cfe8:	4ba0      	ldr	r3, [pc, #640]	; (800d26c <atan+0x324>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	f7f3 f954 	bl	8000298 <__aeabi_dsub>
 800cff0:	2200      	movs	r2, #0
 800cff2:	4606      	mov	r6, r0
 800cff4:	460f      	mov	r7, r1
 800cff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cffa:	4620      	mov	r0, r4
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7f3 f94d 	bl	800029c <__adddf3>
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	4630      	mov	r0, r6
 800d008:	4639      	mov	r1, r7
 800d00a:	f7f3 fc27 	bl	800085c <__aeabi_ddiv>
 800d00e:	f04f 0a00 	mov.w	sl, #0
 800d012:	4604      	mov	r4, r0
 800d014:	460d      	mov	r5, r1
 800d016:	4622      	mov	r2, r4
 800d018:	462b      	mov	r3, r5
 800d01a:	4620      	mov	r0, r4
 800d01c:	4629      	mov	r1, r5
 800d01e:	f7f3 faf3 	bl	8000608 <__aeabi_dmul>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4680      	mov	r8, r0
 800d028:	4689      	mov	r9, r1
 800d02a:	f7f3 faed 	bl	8000608 <__aeabi_dmul>
 800d02e:	a374      	add	r3, pc, #464	; (adr r3, 800d200 <atan+0x2b8>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	4606      	mov	r6, r0
 800d036:	460f      	mov	r7, r1
 800d038:	f7f3 fae6 	bl	8000608 <__aeabi_dmul>
 800d03c:	a372      	add	r3, pc, #456	; (adr r3, 800d208 <atan+0x2c0>)
 800d03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d042:	f7f3 f92b 	bl	800029c <__adddf3>
 800d046:	4632      	mov	r2, r6
 800d048:	463b      	mov	r3, r7
 800d04a:	f7f3 fadd 	bl	8000608 <__aeabi_dmul>
 800d04e:	a370      	add	r3, pc, #448	; (adr r3, 800d210 <atan+0x2c8>)
 800d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d054:	f7f3 f922 	bl	800029c <__adddf3>
 800d058:	4632      	mov	r2, r6
 800d05a:	463b      	mov	r3, r7
 800d05c:	f7f3 fad4 	bl	8000608 <__aeabi_dmul>
 800d060:	a36d      	add	r3, pc, #436	; (adr r3, 800d218 <atan+0x2d0>)
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	f7f3 f919 	bl	800029c <__adddf3>
 800d06a:	4632      	mov	r2, r6
 800d06c:	463b      	mov	r3, r7
 800d06e:	f7f3 facb 	bl	8000608 <__aeabi_dmul>
 800d072:	a36b      	add	r3, pc, #428	; (adr r3, 800d220 <atan+0x2d8>)
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	f7f3 f910 	bl	800029c <__adddf3>
 800d07c:	4632      	mov	r2, r6
 800d07e:	463b      	mov	r3, r7
 800d080:	f7f3 fac2 	bl	8000608 <__aeabi_dmul>
 800d084:	a368      	add	r3, pc, #416	; (adr r3, 800d228 <atan+0x2e0>)
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f7f3 f907 	bl	800029c <__adddf3>
 800d08e:	4642      	mov	r2, r8
 800d090:	464b      	mov	r3, r9
 800d092:	f7f3 fab9 	bl	8000608 <__aeabi_dmul>
 800d096:	a366      	add	r3, pc, #408	; (adr r3, 800d230 <atan+0x2e8>)
 800d098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09c:	4680      	mov	r8, r0
 800d09e:	4689      	mov	r9, r1
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	4639      	mov	r1, r7
 800d0a4:	f7f3 fab0 	bl	8000608 <__aeabi_dmul>
 800d0a8:	a363      	add	r3, pc, #396	; (adr r3, 800d238 <atan+0x2f0>)
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	f7f3 f8f3 	bl	8000298 <__aeabi_dsub>
 800d0b2:	4632      	mov	r2, r6
 800d0b4:	463b      	mov	r3, r7
 800d0b6:	f7f3 faa7 	bl	8000608 <__aeabi_dmul>
 800d0ba:	a361      	add	r3, pc, #388	; (adr r3, 800d240 <atan+0x2f8>)
 800d0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c0:	f7f3 f8ea 	bl	8000298 <__aeabi_dsub>
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	463b      	mov	r3, r7
 800d0c8:	f7f3 fa9e 	bl	8000608 <__aeabi_dmul>
 800d0cc:	a35e      	add	r3, pc, #376	; (adr r3, 800d248 <atan+0x300>)
 800d0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d2:	f7f3 f8e1 	bl	8000298 <__aeabi_dsub>
 800d0d6:	4632      	mov	r2, r6
 800d0d8:	463b      	mov	r3, r7
 800d0da:	f7f3 fa95 	bl	8000608 <__aeabi_dmul>
 800d0de:	a35c      	add	r3, pc, #368	; (adr r3, 800d250 <atan+0x308>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	f7f3 f8d8 	bl	8000298 <__aeabi_dsub>
 800d0e8:	4632      	mov	r2, r6
 800d0ea:	463b      	mov	r3, r7
 800d0ec:	f7f3 fa8c 	bl	8000608 <__aeabi_dmul>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	4640      	mov	r0, r8
 800d0f6:	4649      	mov	r1, r9
 800d0f8:	f7f3 f8d0 	bl	800029c <__adddf3>
 800d0fc:	4622      	mov	r2, r4
 800d0fe:	462b      	mov	r3, r5
 800d100:	f7f3 fa82 	bl	8000608 <__aeabi_dmul>
 800d104:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	d14b      	bne.n	800d1a6 <atan+0x25e>
 800d10e:	4620      	mov	r0, r4
 800d110:	4629      	mov	r1, r5
 800d112:	f7f3 f8c1 	bl	8000298 <__aeabi_dsub>
 800d116:	e72c      	b.n	800cf72 <atan+0x2a>
 800d118:	ee10 0a10 	vmov	r0, s0
 800d11c:	4b53      	ldr	r3, [pc, #332]	; (800d26c <atan+0x324>)
 800d11e:	2200      	movs	r2, #0
 800d120:	4629      	mov	r1, r5
 800d122:	f7f3 f8b9 	bl	8000298 <__aeabi_dsub>
 800d126:	4b51      	ldr	r3, [pc, #324]	; (800d26c <atan+0x324>)
 800d128:	4606      	mov	r6, r0
 800d12a:	460f      	mov	r7, r1
 800d12c:	2200      	movs	r2, #0
 800d12e:	4620      	mov	r0, r4
 800d130:	4629      	mov	r1, r5
 800d132:	f7f3 f8b3 	bl	800029c <__adddf3>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4630      	mov	r0, r6
 800d13c:	4639      	mov	r1, r7
 800d13e:	f7f3 fb8d 	bl	800085c <__aeabi_ddiv>
 800d142:	f04f 0a01 	mov.w	sl, #1
 800d146:	4604      	mov	r4, r0
 800d148:	460d      	mov	r5, r1
 800d14a:	e764      	b.n	800d016 <atan+0xce>
 800d14c:	4b49      	ldr	r3, [pc, #292]	; (800d274 <atan+0x32c>)
 800d14e:	429e      	cmp	r6, r3
 800d150:	da1d      	bge.n	800d18e <atan+0x246>
 800d152:	ee10 0a10 	vmov	r0, s0
 800d156:	4b48      	ldr	r3, [pc, #288]	; (800d278 <atan+0x330>)
 800d158:	2200      	movs	r2, #0
 800d15a:	4629      	mov	r1, r5
 800d15c:	f7f3 f89c 	bl	8000298 <__aeabi_dsub>
 800d160:	4b45      	ldr	r3, [pc, #276]	; (800d278 <atan+0x330>)
 800d162:	4606      	mov	r6, r0
 800d164:	460f      	mov	r7, r1
 800d166:	2200      	movs	r2, #0
 800d168:	4620      	mov	r0, r4
 800d16a:	4629      	mov	r1, r5
 800d16c:	f7f3 fa4c 	bl	8000608 <__aeabi_dmul>
 800d170:	4b3e      	ldr	r3, [pc, #248]	; (800d26c <atan+0x324>)
 800d172:	2200      	movs	r2, #0
 800d174:	f7f3 f892 	bl	800029c <__adddf3>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 fb6c 	bl	800085c <__aeabi_ddiv>
 800d184:	f04f 0a02 	mov.w	sl, #2
 800d188:	4604      	mov	r4, r0
 800d18a:	460d      	mov	r5, r1
 800d18c:	e743      	b.n	800d016 <atan+0xce>
 800d18e:	462b      	mov	r3, r5
 800d190:	ee10 2a10 	vmov	r2, s0
 800d194:	4939      	ldr	r1, [pc, #228]	; (800d27c <atan+0x334>)
 800d196:	2000      	movs	r0, #0
 800d198:	f7f3 fb60 	bl	800085c <__aeabi_ddiv>
 800d19c:	f04f 0a03 	mov.w	sl, #3
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	e737      	b.n	800d016 <atan+0xce>
 800d1a6:	4b36      	ldr	r3, [pc, #216]	; (800d280 <atan+0x338>)
 800d1a8:	4e36      	ldr	r6, [pc, #216]	; (800d284 <atan+0x33c>)
 800d1aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	f7f3 f871 	bl	8000298 <__aeabi_dsub>
 800d1b6:	4622      	mov	r2, r4
 800d1b8:	462b      	mov	r3, r5
 800d1ba:	f7f3 f86d 	bl	8000298 <__aeabi_dsub>
 800d1be:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d1ca:	f7f3 f865 	bl	8000298 <__aeabi_dsub>
 800d1ce:	f1bb 0f00 	cmp.w	fp, #0
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	460d      	mov	r5, r1
 800d1d6:	f6bf aed6 	bge.w	800cf86 <atan+0x3e>
 800d1da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1de:	461d      	mov	r5, r3
 800d1e0:	e6d1      	b.n	800cf86 <atan+0x3e>
 800d1e2:	a51d      	add	r5, pc, #116	; (adr r5, 800d258 <atan+0x310>)
 800d1e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d1e8:	e6cd      	b.n	800cf86 <atan+0x3e>
 800d1ea:	bf00      	nop
 800d1ec:	f3af 8000 	nop.w
 800d1f0:	54442d18 	.word	0x54442d18
 800d1f4:	bff921fb 	.word	0xbff921fb
 800d1f8:	8800759c 	.word	0x8800759c
 800d1fc:	7e37e43c 	.word	0x7e37e43c
 800d200:	e322da11 	.word	0xe322da11
 800d204:	3f90ad3a 	.word	0x3f90ad3a
 800d208:	24760deb 	.word	0x24760deb
 800d20c:	3fa97b4b 	.word	0x3fa97b4b
 800d210:	a0d03d51 	.word	0xa0d03d51
 800d214:	3fb10d66 	.word	0x3fb10d66
 800d218:	c54c206e 	.word	0xc54c206e
 800d21c:	3fb745cd 	.word	0x3fb745cd
 800d220:	920083ff 	.word	0x920083ff
 800d224:	3fc24924 	.word	0x3fc24924
 800d228:	5555550d 	.word	0x5555550d
 800d22c:	3fd55555 	.word	0x3fd55555
 800d230:	2c6a6c2f 	.word	0x2c6a6c2f
 800d234:	bfa2b444 	.word	0xbfa2b444
 800d238:	52defd9a 	.word	0x52defd9a
 800d23c:	3fadde2d 	.word	0x3fadde2d
 800d240:	af749a6d 	.word	0xaf749a6d
 800d244:	3fb3b0f2 	.word	0x3fb3b0f2
 800d248:	fe231671 	.word	0xfe231671
 800d24c:	3fbc71c6 	.word	0x3fbc71c6
 800d250:	9998ebc4 	.word	0x9998ebc4
 800d254:	3fc99999 	.word	0x3fc99999
 800d258:	54442d18 	.word	0x54442d18
 800d25c:	3ff921fb 	.word	0x3ff921fb
 800d260:	440fffff 	.word	0x440fffff
 800d264:	7ff00000 	.word	0x7ff00000
 800d268:	3fdbffff 	.word	0x3fdbffff
 800d26c:	3ff00000 	.word	0x3ff00000
 800d270:	3ff2ffff 	.word	0x3ff2ffff
 800d274:	40038000 	.word	0x40038000
 800d278:	3ff80000 	.word	0x3ff80000
 800d27c:	bff00000 	.word	0xbff00000
 800d280:	0800d5d0 	.word	0x0800d5d0
 800d284:	0800d5b0 	.word	0x0800d5b0

0800d288 <fabs>:
 800d288:	ec51 0b10 	vmov	r0, r1, d0
 800d28c:	ee10 2a10 	vmov	r2, s0
 800d290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d294:	ec43 2b10 	vmov	d0, r2, r3
 800d298:	4770      	bx	lr
	...

0800d29c <_init>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	bf00      	nop
 800d2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2a2:	bc08      	pop	{r3}
 800d2a4:	469e      	mov	lr, r3
 800d2a6:	4770      	bx	lr

0800d2a8 <_fini>:
 800d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2aa:	bf00      	nop
 800d2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ae:	bc08      	pop	{r3}
 800d2b0:	469e      	mov	lr, r3
 800d2b2:	4770      	bx	lr
